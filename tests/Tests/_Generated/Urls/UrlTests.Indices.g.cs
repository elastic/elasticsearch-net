// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.Indices
{
    public class IndicesDeleteUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.DELETE("/_all").Request(c => c.Indices.DeleteIndex(new DeleteIndexRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.DeleteIndexAsync(new DeleteIndexRequest(Nest.Indices.All)));
            await UrlTester.DELETE("/project").Request(c => c.Indices.DeleteIndex(new DeleteIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.DeleteIndexAsync(new DeleteIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesGetMappingUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest())).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest()));
            await UrlTester.GET("/_all/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesPutMappingUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_all/_mapping").Request(c => c.Indices.PutMapping(new PutMappingRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.PutMappingAsync(new PutMappingRequest(Nest.Indices.All)));
            await UrlTester.PUT("/project/_mapping").Request(c => c.Indices.PutMapping(new PutMappingRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.PutMappingAsync(new PutMappingRequest(Nest.IndexName.From<Project>())));
        }
    }
}