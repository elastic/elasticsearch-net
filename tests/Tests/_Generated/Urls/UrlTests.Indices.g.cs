// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.Indices
{
    public class IndicesAnalyzeUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_analyze").Request(c => c.Indices.Analyze(new AnalyzeRequest())).RequestAsync(c => c.Indices.AnalyzeAsync(new AnalyzeRequest()));
            await UrlTester.POST("/project/_analyze").Request(c => c.Indices.Analyze(new AnalyzeRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.AnalyzeAsync(new AnalyzeRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesClearCacheUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_cache/clear").Request(c => c.Indices.ClearCache(new ClearCacheRequest())).RequestAsync(c => c.Indices.ClearCacheAsync(new ClearCacheRequest()));
            await UrlTester.POST("/_all/_cache/clear").Request(c => c.Indices.ClearCache(new ClearCacheRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.ClearCacheAsync(new ClearCacheRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_cache/clear").Request(c => c.Indices.ClearCache(new ClearCacheRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.ClearCacheAsync(new ClearCacheRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesCloseUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_all/_close").Request(c => c.Indices.CloseIndex(new CloseIndexRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.CloseIndexAsync(new CloseIndexRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_close").Request(c => c.Indices.CloseIndex(new CloseIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.CloseIndexAsync(new CloseIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesCreateUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/project").Request(c => c.Indices.CreateIndex(new CreateIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.CreateIndexAsync(new CreateIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesDeleteUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.DELETE("/_all").Request(c => c.Indices.DeleteIndex(new DeleteIndexRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.DeleteIndexAsync(new DeleteIndexRequest(Nest.Indices.All)));
            await UrlTester.DELETE("/project").Request(c => c.Indices.DeleteIndex(new DeleteIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.DeleteIndexAsync(new DeleteIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesExistsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.HEAD("/_all").Request(c => c.Indices.IndexExists(new IndexExistsRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.IndexExistsAsync(new IndexExistsRequest(Nest.Indices.All)));
            await UrlTester.HEAD("/project").Request(c => c.Indices.IndexExists(new IndexExistsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.IndexExistsAsync(new IndexExistsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesFlushUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_flush").Request(c => c.Indices.Flush(new FlushRequest())).RequestAsync(c => c.Indices.FlushAsync(new FlushRequest()));
            await UrlTester.POST("/_all/_flush").Request(c => c.Indices.Flush(new FlushRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.FlushAsync(new FlushRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_flush").Request(c => c.Indices.Flush(new FlushRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.FlushAsync(new FlushRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesForcemergeUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_forcemerge").Request(c => c.Indices.ForceMerge(new ForceMergeRequest())).RequestAsync(c => c.Indices.ForceMergeAsync(new ForceMergeRequest()));
            await UrlTester.POST("/_all/_forcemerge").Request(c => c.Indices.ForceMerge(new ForceMergeRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.ForceMergeAsync(new ForceMergeRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_forcemerge").Request(c => c.Indices.ForceMerge(new ForceMergeRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.ForceMergeAsync(new ForceMergeRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesFreezeUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/project/_freeze").Request(c => c.Indices.FreezeIndex(new FreezeIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.FreezeIndexAsync(new FreezeIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesGetUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_all").Request(c => c.Indices.GetIndex(new GetIndexRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.GetIndexAsync(new GetIndexRequest(Nest.Indices.All)));
            await UrlTester.GET("/project").Request(c => c.Indices.GetIndex(new GetIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.GetIndexAsync(new GetIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesGetAliasUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_alias").Request(c => c.Indices.GetAlias(new GetAliasRequest())).RequestAsync(c => c.Indices.GetAliasAsync(new GetAliasRequest()));
        }
    }

    public class IndicesGetMappingUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest())).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest()));
            await UrlTester.GET("/_all/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_mapping").Request(c => c.Indices.GetMapping(new GetMappingRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.GetMappingAsync(new GetMappingRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesGetSettingsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_settings").Request(c => c.Indices.GetIndexSettings(new GetIndexSettingsRequest())).RequestAsync(c => c.Indices.GetIndexSettingsAsync(new GetIndexSettingsRequest()));
            await UrlTester.GET("/_all/_settings").Request(c => c.Indices.GetIndexSettings(new GetIndexSettingsRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.GetIndexSettingsAsync(new GetIndexSettingsRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_settings").Request(c => c.Indices.GetIndexSettings(new GetIndexSettingsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.GetIndexSettingsAsync(new GetIndexSettingsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesGetTemplateUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_template").Request(c => c.Indices.GetIndexTemplate(new GetIndexTemplateRequest())).RequestAsync(c => c.Indices.GetIndexTemplateAsync(new GetIndexTemplateRequest()));
        }
    }

    public class IndicesOpenUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_all/_open").Request(c => c.Indices.OpenIndex(new OpenIndexRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.OpenIndexAsync(new OpenIndexRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_open").Request(c => c.Indices.OpenIndex(new OpenIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.OpenIndexAsync(new OpenIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesPutMappingUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_all/_mapping").Request(c => c.Indices.PutMapping(new PutMappingRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.PutMappingAsync(new PutMappingRequest(Nest.Indices.All)));
            await UrlTester.PUT("/project/_mapping").Request(c => c.Indices.PutMapping(new PutMappingRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.PutMappingAsync(new PutMappingRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesPutSettingsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_settings").Request(c => c.Indices.UpdateIndexSettings(new UpdateIndexSettingsRequest())).RequestAsync(c => c.Indices.UpdateIndexSettingsAsync(new UpdateIndexSettingsRequest()));
            await UrlTester.PUT("/_all/_settings").Request(c => c.Indices.UpdateIndexSettings(new UpdateIndexSettingsRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.UpdateIndexSettingsAsync(new UpdateIndexSettingsRequest(Nest.Indices.All)));
            await UrlTester.PUT("/project/_settings").Request(c => c.Indices.UpdateIndexSettings(new UpdateIndexSettingsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.UpdateIndexSettingsAsync(new UpdateIndexSettingsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesRecoveryUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_recovery").Request(c => c.Indices.RecoveryStatus(new RecoveryStatusRequest())).RequestAsync(c => c.Indices.RecoveryStatusAsync(new RecoveryStatusRequest()));
            await UrlTester.GET("/_all/_recovery").Request(c => c.Indices.RecoveryStatus(new RecoveryStatusRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.RecoveryStatusAsync(new RecoveryStatusRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_recovery").Request(c => c.Indices.RecoveryStatus(new RecoveryStatusRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.RecoveryStatusAsync(new RecoveryStatusRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesRefreshUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_refresh").Request(c => c.Indices.Refresh(new RefreshRequest())).RequestAsync(c => c.Indices.RefreshAsync(new RefreshRequest()));
            await UrlTester.POST("/_all/_refresh").Request(c => c.Indices.Refresh(new RefreshRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.RefreshAsync(new RefreshRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_refresh").Request(c => c.Indices.Refresh(new RefreshRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.RefreshAsync(new RefreshRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesReloadSearchAnalyzersUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_all/_reload_search_analyzers").Request(c => c.Indices.ReloadSearchAnalyzers(new ReloadSearchAnalyzersRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.ReloadSearchAnalyzersAsync(new ReloadSearchAnalyzersRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_reload_search_analyzers").Request(c => c.Indices.ReloadSearchAnalyzers(new ReloadSearchAnalyzersRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.ReloadSearchAnalyzersAsync(new ReloadSearchAnalyzersRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesSegmentsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_segments").Request(c => c.Indices.Segments(new SegmentsRequest())).RequestAsync(c => c.Indices.SegmentsAsync(new SegmentsRequest()));
            await UrlTester.GET("/_all/_segments").Request(c => c.Indices.Segments(new SegmentsRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.SegmentsAsync(new SegmentsRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_segments").Request(c => c.Indices.Segments(new SegmentsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.SegmentsAsync(new SegmentsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesShardStoresUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_shard_stores").Request(c => c.Indices.ShardStores(new IndicesShardStoresRequest())).RequestAsync(c => c.Indices.ShardStoresAsync(new IndicesShardStoresRequest()));
            await UrlTester.GET("/_all/_shard_stores").Request(c => c.Indices.ShardStores(new IndicesShardStoresRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.ShardStoresAsync(new IndicesShardStoresRequest(Nest.Indices.All)));
            await UrlTester.GET("/project/_shard_stores").Request(c => c.Indices.ShardStores(new IndicesShardStoresRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.ShardStoresAsync(new IndicesShardStoresRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesStatsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_stats").Request(c => c.Indices.Stats(new IndicesStatsRequest())).RequestAsync(c => c.Indices.StatsAsync(new IndicesStatsRequest()));
        }
    }

    public class IndicesUnfreezeUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/project/_unfreeze").Request(c => c.Indices.UnfreezeIndex(new UnfreezeIndexRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.UnfreezeIndexAsync(new UnfreezeIndexRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndicesUpdateAliasesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_aliases").Request(c => c.Indices.BulkAlias(new BulkAliasRequest())).RequestAsync(c => c.Indices.BulkAliasAsync(new BulkAliasRequest()));
        }
    }

    public class IndicesValidateQueryUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_validate/query").Request(c => c.Indices.ValidateQuery(new ValidateQueryRequest())).RequestAsync(c => c.Indices.ValidateQueryAsync(new ValidateQueryRequest()));
            await UrlTester.POST("/_all/_validate/query").Request(c => c.Indices.ValidateQuery(new ValidateQueryRequest(Nest.Indices.All))).RequestAsync(c => c.Indices.ValidateQueryAsync(new ValidateQueryRequest(Nest.Indices.All)));
            await UrlTester.POST("/project/_validate/query").Request(c => c.Indices.ValidateQuery(new ValidateQueryRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Indices.ValidateQueryAsync(new ValidateQueryRequest(Nest.IndexName.From<Project>())));
        }
    }
}