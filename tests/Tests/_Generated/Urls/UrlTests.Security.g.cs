// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.Security
{
    public class SecurityAuthenticateUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/_authenticate").Request(c => c.Security.Authenticate(new AuthenticateRequest())).RequestAsync(c => c.Security.AuthenticateAsync(new AuthenticateRequest()));
        }
    }

    public class SecurityChangePasswordUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_security/user/_password").Request(c => c.Security.ChangePassword(new ChangePasswordRequest())).RequestAsync(c => c.Security.ChangePasswordAsync(new ChangePasswordRequest()));
        }
    }

    public class SecurityCreateApiKeyUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_security/api_key").Request(c => c.Security.CreateApiKey(new CreateApiKeyRequest())).RequestAsync(c => c.Security.CreateApiKeyAsync(new CreateApiKeyRequest()));
        }
    }

    public class SecurityGetApiKeyUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/api_key").Request(c => c.Security.GetApiKey(new GetApiKeyRequest())).RequestAsync(c => c.Security.GetApiKeyAsync(new GetApiKeyRequest()));
        }
    }

    public class SecurityGetBuiltinPrivilegesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/privilege/_builtin").Request(c => c.Security.GetBuiltinPrivileges(new GetBuiltinPrivilegesRequest())).RequestAsync(c => c.Security.GetBuiltinPrivilegesAsync(new GetBuiltinPrivilegesRequest()));
        }
    }

    public class SecurityGetPrivilegesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/privilege").Request(c => c.Security.GetPrivileges(new GetPrivilegesRequest())).RequestAsync(c => c.Security.GetPrivilegesAsync(new GetPrivilegesRequest()));
        }
    }

    public class SecurityGetRoleUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/role").Request(c => c.Security.GetRole(new GetRoleRequest())).RequestAsync(c => c.Security.GetRoleAsync(new GetRoleRequest()));
        }
    }

    public class SecurityGetRoleMappingUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/role_mapping").Request(c => c.Security.GetRoleMapping(new GetRoleMappingRequest())).RequestAsync(c => c.Security.GetRoleMappingAsync(new GetRoleMappingRequest()));
        }
    }

    public class SecurityGetTokenUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_security/oauth2/token").Request(c => c.Security.GetUserAccessToken(new GetUserAccessTokenRequest())).RequestAsync(c => c.Security.GetUserAccessTokenAsync(new GetUserAccessTokenRequest()));
        }
    }

    public class SecurityGetUserUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/user").Request(c => c.Security.GetUser(new GetUserRequest())).RequestAsync(c => c.Security.GetUserAsync(new GetUserRequest()));
        }
    }

    public class SecurityGetUserPrivilegesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_security/user/_privileges").Request(c => c.Security.GetUserPrivileges(new GetUserPrivilegesRequest())).RequestAsync(c => c.Security.GetUserPrivilegesAsync(new GetUserPrivilegesRequest()));
        }
    }

    public class SecurityHasPrivilegesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_security/user/_has_privileges").Request(c => c.Security.HasPrivileges(new HasPrivilegesRequest())).RequestAsync(c => c.Security.HasPrivilegesAsync(new HasPrivilegesRequest()));
        }
    }

    public class SecurityInvalidateApiKeyUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.DELETE("/_security/api_key").Request(c => c.Security.InvalidateApiKey(new InvalidateApiKeyRequest())).RequestAsync(c => c.Security.InvalidateApiKeyAsync(new InvalidateApiKeyRequest()));
        }
    }

    public class SecurityInvalidateTokenUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.DELETE("/_security/oauth2/token").Request(c => c.Security.InvalidateUserAccessToken(new InvalidateUserAccessTokenRequest())).RequestAsync(c => c.Security.InvalidateUserAccessTokenAsync(new InvalidateUserAccessTokenRequest()));
        }
    }

    public class SecurityPutPrivilegesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.PUT("/_security/privilege/").Request(c => c.Security.PutPrivileges(new PutPrivilegesRequest())).RequestAsync(c => c.Security.PutPrivilegesAsync(new PutPrivilegesRequest()));
        }
    }

    public class SecurityCertificatesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ssl/certificates").Request(c => c.Security.GetCertificates(new GetCertificatesRequest())).RequestAsync(c => c.Security.GetCertificatesAsync(new GetCertificatesRequest()));
        }
    }
}