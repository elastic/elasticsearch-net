// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.IndexLifecycleManagement
{
    public class IndexLifecycleManagementExplainLifecycleUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/project/_ilm/explain").Request(c => c.IndexLifecycleManagement.ExplainLifecycle(new ExplainLifecycleRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.IndexLifecycleManagement.ExplainLifecycleAsync(new ExplainLifecycleRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndexLifecycleManagementGetLifecycleUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ilm/policy").Request(c => c.IndexLifecycleManagement.GetLifecycle(new GetLifecycleRequest())).RequestAsync(c => c.IndexLifecycleManagement.GetLifecycleAsync(new GetLifecycleRequest()));
        }
    }

    public class IndexLifecycleManagementGetStatusUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ilm/status").Request(c => c.IndexLifecycleManagement.GetIlmStatus(new GetIlmStatusRequest())).RequestAsync(c => c.IndexLifecycleManagement.GetIlmStatusAsync(new GetIlmStatusRequest()));
        }
    }

    public class IndexLifecycleManagementMoveToStepUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ilm/move/project").Request(c => c.IndexLifecycleManagement.MoveToStep(new MoveToStepRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.IndexLifecycleManagement.MoveToStepAsync(new MoveToStepRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndexLifecycleManagementRemovePolicyUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/project/_ilm/remove").Request(c => c.IndexLifecycleManagement.RemovePolicy(new RemovePolicyRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.IndexLifecycleManagement.RemovePolicyAsync(new RemovePolicyRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndexLifecycleManagementRetryUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/project/_ilm/retry").Request(c => c.IndexLifecycleManagement.RetryIlm(new RetryIlmRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.IndexLifecycleManagement.RetryIlmAsync(new RetryIlmRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class IndexLifecycleManagementStartUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ilm/start").Request(c => c.IndexLifecycleManagement.StartIlm(new StartIlmRequest())).RequestAsync(c => c.IndexLifecycleManagement.StartIlmAsync(new StartIlmRequest()));
        }
    }

    public class IndexLifecycleManagementStopUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ilm/stop").Request(c => c.IndexLifecycleManagement.StopIlm(new StopIlmRequest())).RequestAsync(c => c.IndexLifecycleManagement.StopIlmAsync(new StopIlmRequest()));
        }
    }
}