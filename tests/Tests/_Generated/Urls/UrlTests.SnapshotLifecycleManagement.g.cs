// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.SnapshotLifecycleManagement
{
    public class SnapshotLifecycleManagementExecuteRetentionUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_slm/_execute_retention").Request(c => c.SnapshotLifecycleManagement.ExecuteRetention(new ExecuteRetentionRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.ExecuteRetentionAsync(new ExecuteRetentionRequest()));
        }
    }

    public class SnapshotLifecycleManagementGetLifecycleUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_slm/policy").Request(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycle(new GetSnapshotLifecycleRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleAsync(new GetSnapshotLifecycleRequest()));
        }
    }

    public class SnapshotLifecycleManagementGetStatsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_slm/stats").Request(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleStats(new GetSnapshotLifecycleStatsRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleStatsAsync(new GetSnapshotLifecycleStatsRequest()));
        }
    }

    public class SnapshotLifecycleManagementGetStatusUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_slm/status").Request(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleManagementStatus(new GetSnapshotLifecycleManagementStatusRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.GetSnapshotLifecycleManagementStatusAsync(new GetSnapshotLifecycleManagementStatusRequest()));
        }
    }

    public class SnapshotLifecycleManagementStartUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_slm/start").Request(c => c.SnapshotLifecycleManagement.StartSnapshotLifecycleManagement(new StartSnapshotLifecycleManagementRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.StartSnapshotLifecycleManagementAsync(new StartSnapshotLifecycleManagementRequest()));
        }
    }

    public class SnapshotLifecycleManagementStopUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_slm/stop").Request(c => c.SnapshotLifecycleManagement.StopSnapshotLifecycleManagement(new StopSnapshotLifecycleManagementRequest())).RequestAsync(c => c.SnapshotLifecycleManagement.StopSnapshotLifecycleManagementAsync(new StopSnapshotLifecycleManagementRequest()));
        }
    }
}