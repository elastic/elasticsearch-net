// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.Cat
{
    public class CatAliasesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/aliases").Request(c => c.Cat.Aliases(new CatAliasesRequest())).RequestAsync(c => c.Cat.AliasesAsync(new CatAliasesRequest()));
        }
    }

    public class CatAllocationUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/allocation").Request(c => c.Cat.Allocation(new CatAllocationRequest())).RequestAsync(c => c.Cat.AllocationAsync(new CatAllocationRequest()));
        }
    }

    public class CatCountUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/count").Request(c => c.Cat.Count(new CatCountRequest())).RequestAsync(c => c.Cat.CountAsync(new CatCountRequest()));
            await UrlTester.GET("/_cat/count/_all").Request(c => c.Cat.Count(new CatCountRequest(Nest.Indices.All))).RequestAsync(c => c.Cat.CountAsync(new CatCountRequest(Nest.Indices.All)));
            await UrlTester.GET("/_cat/count/project").Request(c => c.Cat.Count(new CatCountRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Cat.CountAsync(new CatCountRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class CatFielddataUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/fielddata").Request(c => c.Cat.Fielddata(new CatFielddataRequest())).RequestAsync(c => c.Cat.FielddataAsync(new CatFielddataRequest()));
        }
    }

    public class CatHealthUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/health").Request(c => c.Cat.Health(new CatHealthRequest())).RequestAsync(c => c.Cat.HealthAsync(new CatHealthRequest()));
        }
    }

    public class CatHelpUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat").Request(c => c.Cat.Help(new CatHelpRequest())).RequestAsync(c => c.Cat.HelpAsync(new CatHelpRequest()));
        }
    }

    public class CatIndicesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/indices").Request(c => c.Cat.Indices(new CatIndicesRequest())).RequestAsync(c => c.Cat.IndicesAsync(new CatIndicesRequest()));
            await UrlTester.GET("/_cat/indices/_all").Request(c => c.Cat.Indices(new CatIndicesRequest(Nest.Indices.All))).RequestAsync(c => c.Cat.IndicesAsync(new CatIndicesRequest(Nest.Indices.All)));
            await UrlTester.GET("/_cat/indices/project").Request(c => c.Cat.Indices(new CatIndicesRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Cat.IndicesAsync(new CatIndicesRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class CatMasterUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/master").Request(c => c.Cat.Master(new CatMasterRequest())).RequestAsync(c => c.Cat.MasterAsync(new CatMasterRequest()));
        }
    }

    public class CatMlDataFrameAnalyticsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/ml/data_frame/analytics").Request(c => c.Cat.DataFrameAnalytics(new CatDataFrameAnalyticsRequest())).RequestAsync(c => c.Cat.DataFrameAnalyticsAsync(new CatDataFrameAnalyticsRequest()));
        }
    }

    public class CatMlDatafeedsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/ml/datafeeds").Request(c => c.Cat.Datafeeds(new CatDatafeedsRequest())).RequestAsync(c => c.Cat.DatafeedsAsync(new CatDatafeedsRequest()));
        }
    }

    public class CatMlJobsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/ml/anomaly_detectors").Request(c => c.Cat.Jobs(new CatJobsRequest())).RequestAsync(c => c.Cat.JobsAsync(new CatJobsRequest()));
        }
    }

    public class CatMlTrainedModelsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/ml/trained_models").Request(c => c.Cat.TrainedModels(new CatTrainedModelsRequest())).RequestAsync(c => c.Cat.TrainedModelsAsync(new CatTrainedModelsRequest()));
        }
    }

    public class CatNodeattrsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/nodeattrs").Request(c => c.Cat.NodeAttributes(new CatNodeAttributesRequest())).RequestAsync(c => c.Cat.NodeAttributesAsync(new CatNodeAttributesRequest()));
        }
    }

    public class CatNodesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/nodes").Request(c => c.Cat.Nodes(new CatNodesRequest())).RequestAsync(c => c.Cat.NodesAsync(new CatNodesRequest()));
        }
    }

    public class CatPendingTasksUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/pending_tasks").Request(c => c.Cat.PendingTasks(new CatPendingTasksRequest())).RequestAsync(c => c.Cat.PendingTasksAsync(new CatPendingTasksRequest()));
        }
    }

    public class CatPluginsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/plugins").Request(c => c.Cat.Plugins(new CatPluginsRequest())).RequestAsync(c => c.Cat.PluginsAsync(new CatPluginsRequest()));
        }
    }

    public class CatRecoveryUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/recovery").Request(c => c.Cat.Recovery(new CatRecoveryRequest())).RequestAsync(c => c.Cat.RecoveryAsync(new CatRecoveryRequest()));
            await UrlTester.GET("/_cat/recovery/_all").Request(c => c.Cat.Recovery(new CatRecoveryRequest(Nest.Indices.All))).RequestAsync(c => c.Cat.RecoveryAsync(new CatRecoveryRequest(Nest.Indices.All)));
            await UrlTester.GET("/_cat/recovery/project").Request(c => c.Cat.Recovery(new CatRecoveryRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Cat.RecoveryAsync(new CatRecoveryRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class CatRepositoriesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/repositories").Request(c => c.Cat.Repositories(new CatRepositoriesRequest())).RequestAsync(c => c.Cat.RepositoriesAsync(new CatRepositoriesRequest()));
        }
    }

    public class CatSegmentsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/segments").Request(c => c.Cat.Segments(new CatSegmentsRequest())).RequestAsync(c => c.Cat.SegmentsAsync(new CatSegmentsRequest()));
            await UrlTester.GET("/_cat/segments/_all").Request(c => c.Cat.Segments(new CatSegmentsRequest(Nest.Indices.All))).RequestAsync(c => c.Cat.SegmentsAsync(new CatSegmentsRequest(Nest.Indices.All)));
            await UrlTester.GET("/_cat/segments/project").Request(c => c.Cat.Segments(new CatSegmentsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Cat.SegmentsAsync(new CatSegmentsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class CatShardsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/shards").Request(c => c.Cat.Shards(new CatShardsRequest())).RequestAsync(c => c.Cat.ShardsAsync(new CatShardsRequest()));
            await UrlTester.GET("/_cat/shards/_all").Request(c => c.Cat.Shards(new CatShardsRequest(Nest.Indices.All))).RequestAsync(c => c.Cat.ShardsAsync(new CatShardsRequest(Nest.Indices.All)));
            await UrlTester.GET("/_cat/shards/project").Request(c => c.Cat.Shards(new CatShardsRequest(Nest.IndexName.From<Project>()))).RequestAsync(c => c.Cat.ShardsAsync(new CatShardsRequest(Nest.IndexName.From<Project>())));
        }
    }

    public class CatSnapshotsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/snapshots").Request(c => c.Cat.Snapshots(new CatSnapshotsRequest())).RequestAsync(c => c.Cat.SnapshotsAsync(new CatSnapshotsRequest()));
        }
    }

    public class CatTasksUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/tasks").Request(c => c.Cat.Tasks(new CatTasksRequest())).RequestAsync(c => c.Cat.TasksAsync(new CatTasksRequest()));
        }
    }

    public class CatTemplatesUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/templates").Request(c => c.Cat.Templates(new CatTemplatesRequest())).RequestAsync(c => c.Cat.TemplatesAsync(new CatTemplatesRequest()));
        }
    }

    public class CatThreadPoolUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/thread_pool").Request(c => c.Cat.ThreadPool(new CatThreadPoolRequest())).RequestAsync(c => c.Cat.ThreadPoolAsync(new CatThreadPoolRequest()));
        }
    }

    public class CatTransformsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_cat/transforms").Request(c => c.Cat.Transforms(new CatTransformsRequest())).RequestAsync(c => c.Cat.TransformsAsync(new CatTransformsRequest()));
        }
    }
}