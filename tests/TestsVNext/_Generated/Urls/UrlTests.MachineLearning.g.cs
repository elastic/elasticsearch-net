// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using Elastic.Elasticsearch.Xunit.XunitPlumbing;
using Nest;
using System.Threading.Tasks;
using Tests.Domain;
using Tests.Framework.EndpointTests;

namespace Tests.Urls.MachineLearning
{
    public class MachineLearningDeleteExpiredDataUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.DELETE("/_ml/_delete_expired_data").Request(c => c.MachineLearning.DeleteExpiredData(new DeleteExpiredDataRequest())).RequestAsync(c => c.MachineLearning.DeleteExpiredDataAsync(new DeleteExpiredDataRequest()));
        }
    }

    public class MachineLearningEstimateModelMemoryUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ml/anomaly_detectors/_estimate_model_memory").Request(c => c.MachineLearning.EstimateModelMemory(new EstimateModelMemoryRequest())).RequestAsync(c => c.MachineLearning.EstimateModelMemoryAsync(new EstimateModelMemoryRequest()));
        }
    }

    public class MachineLearningGetCalendarsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ml/calendars").Request(c => c.MachineLearning.GetCalendars(new GetCalendarsRequest())).RequestAsync(c => c.MachineLearning.GetCalendarsAsync(new GetCalendarsRequest()));
        }
    }

    public class MachineLearningGetDatafeedStatsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/datafeeds/_stats").Request(c => c.MachineLearning.GetDatafeedStats(new GetDatafeedStatsRequest())).RequestAsync(c => c.MachineLearning.GetDatafeedStatsAsync(new GetDatafeedStatsRequest()));
        }
    }

    public class MachineLearningGetDatafeedsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/datafeeds").Request(c => c.MachineLearning.GetDatafeeds(new GetDatafeedsRequest())).RequestAsync(c => c.MachineLearning.GetDatafeedsAsync(new GetDatafeedsRequest()));
        }
    }

    public class MachineLearningGetFiltersUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/filters").Request(c => c.MachineLearning.GetFilters(new GetFiltersRequest())).RequestAsync(c => c.MachineLearning.GetFiltersAsync(new GetFiltersRequest()));
        }
    }

    public class MachineLearningGetJobStatsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/anomaly_detectors/_stats").Request(c => c.MachineLearning.GetJobStats(new GetJobStatsRequest())).RequestAsync(c => c.MachineLearning.GetJobStatsAsync(new GetJobStatsRequest()));
        }
    }

    public class MachineLearningGetJobsUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/anomaly_detectors").Request(c => c.MachineLearning.GetJobs(new GetJobsRequest())).RequestAsync(c => c.MachineLearning.GetJobsAsync(new GetJobsRequest()));
        }
    }

    public class MachineLearningInfoUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.GET("/_ml/info").Request(c => c.MachineLearning.Info(new MachineLearningInfoRequest())).RequestAsync(c => c.MachineLearning.InfoAsync(new MachineLearningInfoRequest()));
        }
    }

    public class MachineLearningSetUpgradeModeUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ml/set_upgrade_mode").Request(c => c.MachineLearning.SetUpgradeMode(new SetUpgradeModeRequest())).RequestAsync(c => c.MachineLearning.SetUpgradeModeAsync(new SetUpgradeModeRequest()));
        }
    }

    public class MachineLearningValidateUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ml/anomaly_detectors/_validate").Request(c => c.MachineLearning.ValidateJob(new ValidateJobRequest())).RequestAsync(c => c.MachineLearning.ValidateJobAsync(new ValidateJobRequest()));
        }
    }

    public class MachineLearningValidateDetectorUrlTests : UrlTestsBase
    {
        [U]
        public override async Task Urls()
        {
            await UrlTester.POST("/_ml/anomaly_detectors/_validate/detector").Request(c => c.MachineLearning.ValidateDetector(new ValidateDetectorRequest())).RequestAsync(c => c.MachineLearning.ValidateDetectorAsync(new ValidateDetectorRequest()));
        }
    }
}