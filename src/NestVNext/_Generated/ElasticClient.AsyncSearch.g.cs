// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

namespace Nest
{
    public class AsyncSearchNamespace : NamespacedClientProxy
    {
        internal AsyncSearchNamespace(ElasticClient client): base(client)
        {
        }

        public AsyncSearchDeleteResponse Delete(IAsyncSearchDeleteRequest request)
        {
            return DoRequest<IAsyncSearchDeleteRequest, AsyncSearchDeleteResponse>(request, request.RequestParameters);
        }

        public Task<AsyncSearchDeleteResponse> DeleteAsync(IAsyncSearchDeleteRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IAsyncSearchDeleteRequest, AsyncSearchDeleteResponse>(request, request.RequestParameters, cancellationToken);
        }

        public AsyncSearchGetResponse Get(IAsyncSearchGetRequest request)
        {
            return DoRequest<IAsyncSearchGetRequest, AsyncSearchGetResponse>(request, request.RequestParameters);
        }

        public Task<AsyncSearchGetResponse> GetAsync(IAsyncSearchGetRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IAsyncSearchGetRequest, AsyncSearchGetResponse>(request, request.RequestParameters, cancellationToken);
        }

        public AsyncSearchStatusResponse Status(IAsyncSearchStatusRequest request)
        {
            return DoRequest<IAsyncSearchStatusRequest, AsyncSearchStatusResponse>(request, request.RequestParameters);
        }

        public Task<AsyncSearchStatusResponse> StatusAsync(IAsyncSearchStatusRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IAsyncSearchStatusRequest, AsyncSearchStatusResponse>(request, request.RequestParameters, cancellationToken);
        }

        public AsyncSearchSubmitResponse Submit(IAsyncSearchSubmitRequest request)
        {
            return DoRequest<IAsyncSearchSubmitRequest, AsyncSearchSubmitResponse>(request, request.RequestParameters);
        }

        public Task<AsyncSearchSubmitResponse> SubmitAsync(IAsyncSearchSubmitRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IAsyncSearchSubmitRequest, AsyncSearchSubmitResponse>(request, request.RequestParameters, cancellationToken);
        }
    }
}