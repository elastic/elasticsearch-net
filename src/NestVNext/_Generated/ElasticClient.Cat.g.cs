// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class CatNamespace : NamespacedClientProxy
	{
		internal CatNamespace(ElasticClient client) : base(client)
		{
		}

		public CatAliasesResponse Aliases(ICatAliasesRequest request)
		{
			return DoRequest<ICatAliasesRequest, CatAliasesResponse>(request, request.RequestParameters);
		}

		public Task<CatAliasesResponse> AliasesAsync(ICatAliasesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatAliasesRequest, CatAliasesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatAllocationResponse Allocation(ICatAllocationRequest request)
		{
			return DoRequest<ICatAllocationRequest, CatAllocationResponse>(request, request.RequestParameters);
		}

		public Task<CatAllocationResponse> AllocationAsync(ICatAllocationRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatAllocationRequest, CatAllocationResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatCountResponse Count(ICatCountRequest request)
		{
			return DoRequest<ICatCountRequest, CatCountResponse>(request, request.RequestParameters);
		}

		public Task<CatCountResponse> CountAsync(ICatCountRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatCountRequest, CatCountResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatFielddataResponse Fielddata(ICatFielddataRequest request)
		{
			return DoRequest<ICatFielddataRequest, CatFielddataResponse>(request, request.RequestParameters);
		}

		public Task<CatFielddataResponse> FielddataAsync(ICatFielddataRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatFielddataRequest, CatFielddataResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatHealthResponse Health(ICatHealthRequest request)
		{
			return DoRequest<ICatHealthRequest, CatHealthResponse>(request, request.RequestParameters);
		}

		public Task<CatHealthResponse> HealthAsync(ICatHealthRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatHealthRequest, CatHealthResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatHelpResponse Help(ICatHelpRequest request)
		{
			return DoRequest<ICatHelpRequest, CatHelpResponse>(request, request.RequestParameters);
		}

		public Task<CatHelpResponse> HelpAsync(ICatHelpRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatHelpRequest, CatHelpResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatIndicesResponse Indices(ICatIndicesRequest request)
		{
			return DoRequest<ICatIndicesRequest, CatIndicesResponse>(request, request.RequestParameters);
		}

		public Task<CatIndicesResponse> IndicesAsync(ICatIndicesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatIndicesRequest, CatIndicesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatMasterResponse Master(ICatMasterRequest request)
		{
			return DoRequest<ICatMasterRequest, CatMasterResponse>(request, request.RequestParameters);
		}

		public Task<CatMasterResponse> MasterAsync(ICatMasterRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatMasterRequest, CatMasterResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatDatafeedsResponse Datafeeds(ICatDatafeedsRequest request)
		{
			return DoRequest<ICatDatafeedsRequest, CatDatafeedsResponse>(request, request.RequestParameters);
		}

		public Task<CatDatafeedsResponse> DatafeedsAsync(ICatDatafeedsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatDatafeedsRequest, CatDatafeedsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatDataFrameAnalyticsResponse DataFrameAnalytics(ICatDataFrameAnalyticsRequest request)
		{
			return DoRequest<ICatDataFrameAnalyticsRequest, CatDataFrameAnalyticsResponse>(request, request.RequestParameters);
		}

		public Task<CatDataFrameAnalyticsResponse> DataFrameAnalyticsAsync(ICatDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatDataFrameAnalyticsRequest, CatDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatJobsResponse Jobs(ICatJobsRequest request)
		{
			return DoRequest<ICatJobsRequest, CatJobsResponse>(request, request.RequestParameters);
		}

		public Task<CatJobsResponse> JobsAsync(ICatJobsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatJobsRequest, CatJobsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatTrainedModelsResponse TrainedModels(ICatTrainedModelsRequest request)
		{
			return DoRequest<ICatTrainedModelsRequest, CatTrainedModelsResponse>(request, request.RequestParameters);
		}

		public Task<CatTrainedModelsResponse> TrainedModelsAsync(ICatTrainedModelsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatTrainedModelsRequest, CatTrainedModelsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatNodeAttributesResponse NodeAttributes(ICatNodeAttributesRequest request)
		{
			return DoRequest<ICatNodeAttributesRequest, CatNodeAttributesResponse>(request, request.RequestParameters);
		}

		public Task<CatNodeAttributesResponse> NodeAttributesAsync(ICatNodeAttributesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatNodeAttributesRequest, CatNodeAttributesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatNodesResponse Nodes(ICatNodesRequest request)
		{
			return DoRequest<ICatNodesRequest, CatNodesResponse>(request, request.RequestParameters);
		}

		public Task<CatNodesResponse> NodesAsync(ICatNodesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatNodesRequest, CatNodesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatPendingTasksResponse PendingTasks(ICatPendingTasksRequest request)
		{
			return DoRequest<ICatPendingTasksRequest, CatPendingTasksResponse>(request, request.RequestParameters);
		}

		public Task<CatPendingTasksResponse> PendingTasksAsync(ICatPendingTasksRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatPendingTasksRequest, CatPendingTasksResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatPluginsResponse Plugins(ICatPluginsRequest request)
		{
			return DoRequest<ICatPluginsRequest, CatPluginsResponse>(request, request.RequestParameters);
		}

		public Task<CatPluginsResponse> PluginsAsync(ICatPluginsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatPluginsRequest, CatPluginsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatRecoveryResponse Recovery(ICatRecoveryRequest request)
		{
			return DoRequest<ICatRecoveryRequest, CatRecoveryResponse>(request, request.RequestParameters);
		}

		public Task<CatRecoveryResponse> RecoveryAsync(ICatRecoveryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatRecoveryRequest, CatRecoveryResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatRepositoriesResponse Repositories(ICatRepositoriesRequest request)
		{
			return DoRequest<ICatRepositoriesRequest, CatRepositoriesResponse>(request, request.RequestParameters);
		}

		public Task<CatRepositoriesResponse> RepositoriesAsync(ICatRepositoriesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatRepositoriesRequest, CatRepositoriesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatSegmentsResponse Segments(ICatSegmentsRequest request)
		{
			return DoRequest<ICatSegmentsRequest, CatSegmentsResponse>(request, request.RequestParameters);
		}

		public Task<CatSegmentsResponse> SegmentsAsync(ICatSegmentsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatSegmentsRequest, CatSegmentsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatShardsResponse Shards(ICatShardsRequest request)
		{
			return DoRequest<ICatShardsRequest, CatShardsResponse>(request, request.RequestParameters);
		}

		public Task<CatShardsResponse> ShardsAsync(ICatShardsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatShardsRequest, CatShardsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatSnapshotsResponse Snapshots(ICatSnapshotsRequest request)
		{
			return DoRequest<ICatSnapshotsRequest, CatSnapshotsResponse>(request, request.RequestParameters);
		}

		public Task<CatSnapshotsResponse> SnapshotsAsync(ICatSnapshotsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatSnapshotsRequest, CatSnapshotsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatTasksResponse Tasks(ICatTasksRequest request)
		{
			return DoRequest<ICatTasksRequest, CatTasksResponse>(request, request.RequestParameters);
		}

		public Task<CatTasksResponse> TasksAsync(ICatTasksRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatTasksRequest, CatTasksResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatTemplatesResponse Templates(ICatTemplatesRequest request)
		{
			return DoRequest<ICatTemplatesRequest, CatTemplatesResponse>(request, request.RequestParameters);
		}

		public Task<CatTemplatesResponse> TemplatesAsync(ICatTemplatesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatTemplatesRequest, CatTemplatesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatThreadPoolResponse ThreadPool(ICatThreadPoolRequest request)
		{
			return DoRequest<ICatThreadPoolRequest, CatThreadPoolResponse>(request, request.RequestParameters);
		}

		public Task<CatThreadPoolResponse> ThreadPoolAsync(ICatThreadPoolRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatThreadPoolRequest, CatThreadPoolResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CatTransformsResponse Transforms(ICatTransformsRequest request)
		{
			return DoRequest<ICatTransformsRequest, CatTransformsResponse>(request, request.RequestParameters);
		}

		public Task<CatTransformsResponse> TransformsAsync(ICatTransformsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICatTransformsRequest, CatTransformsResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}