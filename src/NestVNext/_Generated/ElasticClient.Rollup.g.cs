// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class RollupNamespace : NamespacedClientProxy
	{
		internal RollupNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteRollupJobResponse DeleteRollupJob(IDeleteRollupJobRequest request)
		{
			return DoRequest<IDeleteRollupJobRequest, DeleteRollupJobResponse>(request, request.RequestParameters);
		}

		public Task<DeleteRollupJobResponse> DeleteRollupJobAsync(IDeleteRollupJobRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRollupJobRequest, DeleteRollupJobResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRollupJobResponse GetRollupJob(IGetRollupJobRequest request)
		{
			return DoRequest<IGetRollupJobRequest, GetRollupJobResponse>(request, request.RequestParameters);
		}

		public Task<GetRollupJobResponse> GetRollupJobAsync(IGetRollupJobRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRollupJobRequest, GetRollupJobResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRollupCapabilitiesResponse GetRollupCapabilities(IGetRollupCapabilitiesRequest request)
		{
			return DoRequest<IGetRollupCapabilitiesRequest, GetRollupCapabilitiesResponse>(request, request.RequestParameters);
		}

		public Task<GetRollupCapabilitiesResponse> GetRollupCapabilitiesAsync(IGetRollupCapabilitiesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRollupCapabilitiesRequest, GetRollupCapabilitiesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRollupIndexCapabilitiesResponse GetRollupIndexCapabilities(IGetRollupIndexCapabilitiesRequest request)
		{
			return DoRequest<IGetRollupIndexCapabilitiesRequest, GetRollupIndexCapabilitiesResponse>(request, request.RequestParameters);
		}

		public Task<GetRollupIndexCapabilitiesResponse> GetRollupIndexCapabilitiesAsync(IGetRollupIndexCapabilitiesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRollupIndexCapabilitiesRequest, GetRollupIndexCapabilitiesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateRollupJobResponse CreateRollupJob(ICreateRollupJobRequest request)
		{
			return DoRequest<ICreateRollupJobRequest, CreateRollupJobResponse>(request, request.RequestParameters);
		}

		public Task<CreateRollupJobResponse> CreateRollupJobAsync(ICreateRollupJobRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateRollupJobRequest, CreateRollupJobResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RollupSearchResponse Search(IRollupSearchRequest request)
		{
			return DoRequest<IRollupSearchRequest, RollupSearchResponse>(request, request.RequestParameters);
		}

		public Task<RollupSearchResponse> SearchAsync(IRollupSearchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRollupSearchRequest, RollupSearchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartRollupJobResponse StartRollupJob(IStartRollupJobRequest request)
		{
			return DoRequest<IStartRollupJobRequest, StartRollupJobResponse>(request, request.RequestParameters);
		}

		public Task<StartRollupJobResponse> StartRollupJobAsync(IStartRollupJobRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartRollupJobRequest, StartRollupJobResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StopRollupJobResponse StopRollupJob(IStopRollupJobRequest request)
		{
			return DoRequest<IStopRollupJobRequest, StopRollupJobResponse>(request, request.RequestParameters);
		}

		public Task<StopRollupJobResponse> StopRollupJobAsync(IStopRollupJobRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStopRollupJobRequest, StopRollupJobResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}