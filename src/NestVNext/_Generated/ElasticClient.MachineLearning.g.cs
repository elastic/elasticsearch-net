// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

namespace Nest
{
    public class MachineLearningNamespace : NamespacedClientProxy
    {
        internal MachineLearningNamespace(ElasticClient client): base(client)
        {
        }

        public CloseJobResponse CloseJob(ICloseJobRequest request)
        {
            return DoRequest<ICloseJobRequest, CloseJobResponse>(request, request.RequestParameters);
        }

        public Task<CloseJobResponse> CloseJobAsync(ICloseJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<ICloseJobRequest, CloseJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteCalendarResponse DeleteCalendar(IDeleteCalendarRequest request)
        {
            return DoRequest<IDeleteCalendarRequest, DeleteCalendarResponse>(request, request.RequestParameters);
        }

        public Task<DeleteCalendarResponse> DeleteCalendarAsync(IDeleteCalendarRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteCalendarRequest, DeleteCalendarResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteCalendarEventResponse DeleteCalendarEvent(IDeleteCalendarEventRequest request)
        {
            return DoRequest<IDeleteCalendarEventRequest, DeleteCalendarEventResponse>(request, request.RequestParameters);
        }

        public Task<DeleteCalendarEventResponse> DeleteCalendarEventAsync(IDeleteCalendarEventRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteCalendarEventRequest, DeleteCalendarEventResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteCalendarJobResponse DeleteCalendarJob(IDeleteCalendarJobRequest request)
        {
            return DoRequest<IDeleteCalendarJobRequest, DeleteCalendarJobResponse>(request, request.RequestParameters);
        }

        public Task<DeleteCalendarJobResponse> DeleteCalendarJobAsync(IDeleteCalendarJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteCalendarJobRequest, DeleteCalendarJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteDatafeedResponse DeleteDatafeed(IDeleteDatafeedRequest request)
        {
            return DoRequest<IDeleteDatafeedRequest, DeleteDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<DeleteDatafeedResponse> DeleteDatafeedAsync(IDeleteDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteDatafeedRequest, DeleteDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteExpiredDataResponse DeleteExpiredData(IDeleteExpiredDataRequest request)
        {
            return DoRequest<IDeleteExpiredDataRequest, DeleteExpiredDataResponse>(request, request.RequestParameters);
        }

        public Task<DeleteExpiredDataResponse> DeleteExpiredDataAsync(IDeleteExpiredDataRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteExpiredDataRequest, DeleteExpiredDataResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteFilterResponse DeleteFilter(IDeleteFilterRequest request)
        {
            return DoRequest<IDeleteFilterRequest, DeleteFilterResponse>(request, request.RequestParameters);
        }

        public Task<DeleteFilterResponse> DeleteFilterAsync(IDeleteFilterRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteFilterRequest, DeleteFilterResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteForecastResponse DeleteForecast(IDeleteForecastRequest request)
        {
            return DoRequest<IDeleteForecastRequest, DeleteForecastResponse>(request, request.RequestParameters);
        }

        public Task<DeleteForecastResponse> DeleteForecastAsync(IDeleteForecastRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteForecastRequest, DeleteForecastResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteJobResponse DeleteJob(IDeleteJobRequest request)
        {
            return DoRequest<IDeleteJobRequest, DeleteJobResponse>(request, request.RequestParameters);
        }

        public Task<DeleteJobResponse> DeleteJobAsync(IDeleteJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteJobRequest, DeleteJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public DeleteModelSnapshotResponse DeleteModelSnapshot(IDeleteModelSnapshotRequest request)
        {
            return DoRequest<IDeleteModelSnapshotRequest, DeleteModelSnapshotResponse>(request, request.RequestParameters);
        }

        public Task<DeleteModelSnapshotResponse> DeleteModelSnapshotAsync(IDeleteModelSnapshotRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IDeleteModelSnapshotRequest, DeleteModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
        }

        public EstimateModelMemoryResponse EstimateModelMemory(IEstimateModelMemoryRequest request)
        {
            return DoRequest<IEstimateModelMemoryRequest, EstimateModelMemoryResponse>(request, request.RequestParameters);
        }

        public Task<EstimateModelMemoryResponse> EstimateModelMemoryAsync(IEstimateModelMemoryRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IEstimateModelMemoryRequest, EstimateModelMemoryResponse>(request, request.RequestParameters, cancellationToken);
        }

        public FlushJobResponse FlushJob(IFlushJobRequest request)
        {
            return DoRequest<IFlushJobRequest, FlushJobResponse>(request, request.RequestParameters);
        }

        public Task<FlushJobResponse> FlushJobAsync(IFlushJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IFlushJobRequest, FlushJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public ForecastJobResponse ForecastJob(IForecastJobRequest request)
        {
            return DoRequest<IForecastJobRequest, ForecastJobResponse>(request, request.RequestParameters);
        }

        public Task<ForecastJobResponse> ForecastJobAsync(IForecastJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IForecastJobRequest, ForecastJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetBucketsResponse GetBuckets(IGetBucketsRequest request)
        {
            return DoRequest<IGetBucketsRequest, GetBucketsResponse>(request, request.RequestParameters);
        }

        public Task<GetBucketsResponse> GetBucketsAsync(IGetBucketsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetBucketsRequest, GetBucketsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetCalendarEventsResponse GetCalendarEvents(IGetCalendarEventsRequest request)
        {
            return DoRequest<IGetCalendarEventsRequest, GetCalendarEventsResponse>(request, request.RequestParameters);
        }

        public Task<GetCalendarEventsResponse> GetCalendarEventsAsync(IGetCalendarEventsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetCalendarEventsRequest, GetCalendarEventsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetCalendarsResponse GetCalendars(IGetCalendarsRequest request)
        {
            return DoRequest<IGetCalendarsRequest, GetCalendarsResponse>(request, request.RequestParameters);
        }

        public Task<GetCalendarsResponse> GetCalendarsAsync(IGetCalendarsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetCalendarsRequest, GetCalendarsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetCategoriesResponse GetCategories(IGetCategoriesRequest request)
        {
            return DoRequest<IGetCategoriesRequest, GetCategoriesResponse>(request, request.RequestParameters);
        }

        public Task<GetCategoriesResponse> GetCategoriesAsync(IGetCategoriesRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetCategoriesRequest, GetCategoriesResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetDatafeedStatsResponse GetDatafeedStats(IGetDatafeedStatsRequest request)
        {
            return DoRequest<IGetDatafeedStatsRequest, GetDatafeedStatsResponse>(request, request.RequestParameters);
        }

        public Task<GetDatafeedStatsResponse> GetDatafeedStatsAsync(IGetDatafeedStatsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetDatafeedStatsRequest, GetDatafeedStatsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetDatafeedsResponse GetDatafeeds(IGetDatafeedsRequest request)
        {
            return DoRequest<IGetDatafeedsRequest, GetDatafeedsResponse>(request, request.RequestParameters);
        }

        public Task<GetDatafeedsResponse> GetDatafeedsAsync(IGetDatafeedsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetDatafeedsRequest, GetDatafeedsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetFiltersResponse GetFilters(IGetFiltersRequest request)
        {
            return DoRequest<IGetFiltersRequest, GetFiltersResponse>(request, request.RequestParameters);
        }

        public Task<GetFiltersResponse> GetFiltersAsync(IGetFiltersRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetFiltersRequest, GetFiltersResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetInfluencersResponse GetInfluencers(IGetInfluencersRequest request)
        {
            return DoRequest<IGetInfluencersRequest, GetInfluencersResponse>(request, request.RequestParameters);
        }

        public Task<GetInfluencersResponse> GetInfluencersAsync(IGetInfluencersRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetInfluencersRequest, GetInfluencersResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetJobStatsResponse GetJobStats(IGetJobStatsRequest request)
        {
            return DoRequest<IGetJobStatsRequest, GetJobStatsResponse>(request, request.RequestParameters);
        }

        public Task<GetJobStatsResponse> GetJobStatsAsync(IGetJobStatsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetJobStatsRequest, GetJobStatsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetJobsResponse GetJobs(IGetJobsRequest request)
        {
            return DoRequest<IGetJobsRequest, GetJobsResponse>(request, request.RequestParameters);
        }

        public Task<GetJobsResponse> GetJobsAsync(IGetJobsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetJobsRequest, GetJobsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetModelSnapshotsResponse GetModelSnapshots(IGetModelSnapshotsRequest request)
        {
            return DoRequest<IGetModelSnapshotsRequest, GetModelSnapshotsResponse>(request, request.RequestParameters);
        }

        public Task<GetModelSnapshotsResponse> GetModelSnapshotsAsync(IGetModelSnapshotsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetModelSnapshotsRequest, GetModelSnapshotsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetOverallBucketsResponse GetOverallBuckets(IGetOverallBucketsRequest request)
        {
            return DoRequest<IGetOverallBucketsRequest, GetOverallBucketsResponse>(request, request.RequestParameters);
        }

        public Task<GetOverallBucketsResponse> GetOverallBucketsAsync(IGetOverallBucketsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetOverallBucketsRequest, GetOverallBucketsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public GetAnomalyRecordsResponse GetAnomalyRecords(IGetAnomalyRecordsRequest request)
        {
            return DoRequest<IGetAnomalyRecordsRequest, GetAnomalyRecordsResponse>(request, request.RequestParameters);
        }

        public Task<GetAnomalyRecordsResponse> GetAnomalyRecordsAsync(IGetAnomalyRecordsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IGetAnomalyRecordsRequest, GetAnomalyRecordsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public MachineLearningInfoResponse Info(IMachineLearningInfoRequest request)
        {
            return DoRequest<IMachineLearningInfoRequest, MachineLearningInfoResponse>(request, request.RequestParameters);
        }

        public Task<MachineLearningInfoResponse> InfoAsync(IMachineLearningInfoRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IMachineLearningInfoRequest, MachineLearningInfoResponse>(request, request.RequestParameters, cancellationToken);
        }

        public OpenJobResponse OpenJob(IOpenJobRequest request)
        {
            return DoRequest<IOpenJobRequest, OpenJobResponse>(request, request.RequestParameters);
        }

        public Task<OpenJobResponse> OpenJobAsync(IOpenJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IOpenJobRequest, OpenJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PostCalendarEventsResponse PostCalendarEvents(IPostCalendarEventsRequest request)
        {
            return DoRequest<IPostCalendarEventsRequest, PostCalendarEventsResponse>(request, request.RequestParameters);
        }

        public Task<PostCalendarEventsResponse> PostCalendarEventsAsync(IPostCalendarEventsRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPostCalendarEventsRequest, PostCalendarEventsResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PostJobDataResponse PostJobData(IPostJobDataRequest request)
        {
            return DoRequest<IPostJobDataRequest, PostJobDataResponse>(request, request.RequestParameters);
        }

        public Task<PostJobDataResponse> PostJobDataAsync(IPostJobDataRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPostJobDataRequest, PostJobDataResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PreviewDatafeedResponse PreviewDatafeed(IPreviewDatafeedRequest request)
        {
            return DoRequest<IPreviewDatafeedRequest, PreviewDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<PreviewDatafeedResponse> PreviewDatafeedAsync(IPreviewDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPreviewDatafeedRequest, PreviewDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PutCalendarResponse PutCalendar(IPutCalendarRequest request)
        {
            return DoRequest<IPutCalendarRequest, PutCalendarResponse>(request, request.RequestParameters);
        }

        public Task<PutCalendarResponse> PutCalendarAsync(IPutCalendarRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPutCalendarRequest, PutCalendarResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PutCalendarJobResponse PutCalendarJob(IPutCalendarJobRequest request)
        {
            return DoRequest<IPutCalendarJobRequest, PutCalendarJobResponse>(request, request.RequestParameters);
        }

        public Task<PutCalendarJobResponse> PutCalendarJobAsync(IPutCalendarJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPutCalendarJobRequest, PutCalendarJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PutDatafeedResponse PutDatafeed(IPutDatafeedRequest request)
        {
            return DoRequest<IPutDatafeedRequest, PutDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<PutDatafeedResponse> PutDatafeedAsync(IPutDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPutDatafeedRequest, PutDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PutFilterResponse PutFilter(IPutFilterRequest request)
        {
            return DoRequest<IPutFilterRequest, PutFilterResponse>(request, request.RequestParameters);
        }

        public Task<PutFilterResponse> PutFilterAsync(IPutFilterRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPutFilterRequest, PutFilterResponse>(request, request.RequestParameters, cancellationToken);
        }

        public PutJobResponse PutJob(IPutJobRequest request)
        {
            return DoRequest<IPutJobRequest, PutJobResponse>(request, request.RequestParameters);
        }

        public Task<PutJobResponse> PutJobAsync(IPutJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IPutJobRequest, PutJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public RevertModelSnapshotResponse RevertModelSnapshot(IRevertModelSnapshotRequest request)
        {
            return DoRequest<IRevertModelSnapshotRequest, RevertModelSnapshotResponse>(request, request.RequestParameters);
        }

        public Task<RevertModelSnapshotResponse> RevertModelSnapshotAsync(IRevertModelSnapshotRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IRevertModelSnapshotRequest, RevertModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
        }

        public SetUpgradeModeResponse SetUpgradeMode(ISetUpgradeModeRequest request)
        {
            return DoRequest<ISetUpgradeModeRequest, SetUpgradeModeResponse>(request, request.RequestParameters);
        }

        public Task<SetUpgradeModeResponse> SetUpgradeModeAsync(ISetUpgradeModeRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<ISetUpgradeModeRequest, SetUpgradeModeResponse>(request, request.RequestParameters, cancellationToken);
        }

        public StartDatafeedResponse StartDatafeed(IStartDatafeedRequest request)
        {
            return DoRequest<IStartDatafeedRequest, StartDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<StartDatafeedResponse> StartDatafeedAsync(IStartDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IStartDatafeedRequest, StartDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public StopDatafeedResponse StopDatafeed(IStopDatafeedRequest request)
        {
            return DoRequest<IStopDatafeedRequest, StopDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<StopDatafeedResponse> StopDatafeedAsync(IStopDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IStopDatafeedRequest, StopDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public UpdateDatafeedResponse UpdateDatafeed(IUpdateDatafeedRequest request)
        {
            return DoRequest<IUpdateDatafeedRequest, UpdateDatafeedResponse>(request, request.RequestParameters);
        }

        public Task<UpdateDatafeedResponse> UpdateDatafeedAsync(IUpdateDatafeedRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IUpdateDatafeedRequest, UpdateDatafeedResponse>(request, request.RequestParameters, cancellationToken);
        }

        public UpdateFilterResponse UpdateFilter(IUpdateFilterRequest request)
        {
            return DoRequest<IUpdateFilterRequest, UpdateFilterResponse>(request, request.RequestParameters);
        }

        public Task<UpdateFilterResponse> UpdateFilterAsync(IUpdateFilterRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IUpdateFilterRequest, UpdateFilterResponse>(request, request.RequestParameters, cancellationToken);
        }

        public UpdateJobResponse UpdateJob(IUpdateJobRequest request)
        {
            return DoRequest<IUpdateJobRequest, UpdateJobResponse>(request, request.RequestParameters);
        }

        public Task<UpdateJobResponse> UpdateJobAsync(IUpdateJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IUpdateJobRequest, UpdateJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public UpdateModelSnapshotResponse UpdateModelSnapshot(IUpdateModelSnapshotRequest request)
        {
            return DoRequest<IUpdateModelSnapshotRequest, UpdateModelSnapshotResponse>(request, request.RequestParameters);
        }

        public Task<UpdateModelSnapshotResponse> UpdateModelSnapshotAsync(IUpdateModelSnapshotRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IUpdateModelSnapshotRequest, UpdateModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
        }

        public ValidateJobResponse ValidateJob(IValidateJobRequest request)
        {
            return DoRequest<IValidateJobRequest, ValidateJobResponse>(request, request.RequestParameters);
        }

        public Task<ValidateJobResponse> ValidateJobAsync(IValidateJobRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IValidateJobRequest, ValidateJobResponse>(request, request.RequestParameters, cancellationToken);
        }

        public ValidateDetectorResponse ValidateDetector(IValidateDetectorRequest request)
        {
            return DoRequest<IValidateDetectorRequest, ValidateDetectorResponse>(request, request.RequestParameters);
        }

        public Task<ValidateDetectorResponse> ValidateDetectorAsync(IValidateDetectorRequest request, CancellationToken cancellationToken = default)
        {
            return DoRequestAsync<IValidateDetectorRequest, ValidateDetectorResponse>(request, request.RequestParameters, cancellationToken);
        }
    }
}