// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System.Runtime.Serialization;

namespace Nest
{
    public enum FieldType
    {
        [EnumMember(Value = "none")]
        None,
        [EnumMember(Value = "geo_point")]
        GeoPoint,
        [EnumMember(Value = "geo_shape")]
        GeoShape,
        [EnumMember(Value = "ip")]
        Ip,
        [EnumMember(Value = "binary")]
        Binary,
        [EnumMember(Value = "keyword")]
        Keyword,
        [EnumMember(Value = "text")]
        Text,
        [EnumMember(Value = "search_as_you_type")]
        SearchAsYouType,
        [EnumMember(Value = "date")]
        Date,
        [EnumMember(Value = "date_nanos")]
        DateNanos,
        [EnumMember(Value = "boolean")]
        Boolean,
        [EnumMember(Value = "completion")]
        Completion,
        [EnumMember(Value = "nested")]
        Nested,
        [EnumMember(Value = "object")]
        Object,
        [EnumMember(Value = "murmur3")]
        Murmur3,
        [EnumMember(Value = "token_count")]
        TokenCount,
        [EnumMember(Value = "percolator")]
        Percolator,
        [EnumMember(Value = "integer")]
        Integer,
        [EnumMember(Value = "long")]
        Long,
        [EnumMember(Value = "short")]
        Short,
        [EnumMember(Value = "byte")]
        Byte,
        [EnumMember(Value = "float")]
        Float,
        [EnumMember(Value = "half_float")]
        HalfFloat,
        [EnumMember(Value = "scaled_float")]
        ScaledFloat,
        [EnumMember(Value = "double")]
        Double,
        [EnumMember(Value = "integer_range")]
        IntegerRange,
        [EnumMember(Value = "float_range")]
        FloatRange,
        [EnumMember(Value = "long_range")]
        LongRange,
        [EnumMember(Value = "double_range")]
        DoubleRange,
        [EnumMember(Value = "date_range")]
        DateRange,
        [EnumMember(Value = "ip_range")]
        IpRange,
        [EnumMember(Value = "alias")]
        Alias,
        [EnumMember(Value = "join")]
        Join,
        [EnumMember(Value = "rank_feature")]
        RankFeature,
        [EnumMember(Value = "rank_features")]
        RankFeatures,
        [EnumMember(Value = "flattened")]
        Flattened,
        [EnumMember(Value = "shape")]
        Shape,
        [EnumMember(Value = "histogram")]
        Histogram,
        [EnumMember(Value = "constant_keyword")]
        ConstantKeyword
    }

    public enum GeoOrientation
    {
        [EnumMember(Value = "ClockWise")]
        Clockwise,
        [EnumMember(Value = "CounterClockWise")]
        Counterclockwise
    }

    public enum GeoStrategy
    {
        [EnumMember(Value = "recursive")]
        Recursive,
        [EnumMember(Value = "term")]
        Term
    }

    public enum GeoTree
    {
        [EnumMember(Value = "geohash")]
        Geohash,
        [EnumMember(Value = "quadtree")]
        Quadtree
    }

    public enum IndexOptions
    {
        [EnumMember(Value = "docs")]
        Docs,
        [EnumMember(Value = "freqs")]
        Freqs,
        [EnumMember(Value = "positions")]
        Positions,
        [EnumMember(Value = "offsets")]
        Offsets
    }

    public enum MatchType
    {
        [EnumMember(Value = "simple")]
        Simple,
        [EnumMember(Value = "regex")]
        Regex
    }

    public enum NumberType
    {
        [EnumMember(Value = "float")]
        Float,
        [EnumMember(Value = "half_float")]
        HalfFloat,
        [EnumMember(Value = "scaled_float")]
        ScaledFloat,
        [EnumMember(Value = "double")]
        Double,
        [EnumMember(Value = "integer")]
        Integer,
        [EnumMember(Value = "long")]
        Long,
        [EnumMember(Value = "short")]
        Short,
        [EnumMember(Value = "byte")]
        Byte
    }

    public enum RangeType
    {
        [EnumMember(Value = "integer_range")]
        IntegerRange,
        [EnumMember(Value = "float_range")]
        FloatRange,
        [EnumMember(Value = "long_range")]
        LongRange,
        [EnumMember(Value = "double_range")]
        DoubleRange,
        [EnumMember(Value = "date_range")]
        DateRange,
        [EnumMember(Value = "ip_range")]
        IpRange
    }

    public enum ShapeOrientation
    {
        [EnumMember(Value = "ClockWise")]
        Clockwise,
        [EnumMember(Value = "CounterClockWise")]
        Counterclockwise
    }
}