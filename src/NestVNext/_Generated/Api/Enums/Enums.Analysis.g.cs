// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System.Runtime.Serialization;

namespace Nest
{
    public enum DelimitedPayloadEncoding
    {
        [EnumMember(Value = "int")]
        Integer,
        [EnumMember(Value = "float")]
        Float,
        [EnumMember(Value = "identity")]
        Identity
    }

    public enum EdgeNGramSide
    {
        [EnumMember(Value = "front")]
        Front,
        [EnumMember(Value = "back")]
        Back
    }

    public enum IcuCollationAlternate
    {
        [EnumMember(Value = "shifted")]
        Shifted,
        [EnumMember(Value = "non-ignorable")]
        NonIgnorable
    }

    public enum IcuCollationCaseFirst
    {
        [EnumMember(Value = "lower")]
        Lower,
        [EnumMember(Value = "upper")]
        Upper
    }

    public enum IcuCollationDecomposition
    {
        [EnumMember(Value = "no")]
        No,
        [EnumMember(Value = "identical")]
        Identical
    }

    public enum IcuCollationStrength
    {
        [EnumMember(Value = "primary")]
        Primary,
        [EnumMember(Value = "secondary")]
        Secondary,
        [EnumMember(Value = "tertiary")]
        Tertiary,
        [EnumMember(Value = "quaternary")]
        Quaternary,
        [EnumMember(Value = "identical")]
        Identical
    }

    public enum IcuNormalizationMode
    {
        [EnumMember(Value = "decompose")]
        Decompose,
        [EnumMember(Value = "compose")]
        Compose
    }

    public enum IcuNormalizationType
    {
        [EnumMember(Value = "nfc")]
        Nfc,
        [EnumMember(Value = "nfkc")]
        Nfkc,
        [EnumMember(Value = "nfkc_cf")]
        NfkcCf
    }

    public enum IcuTransformDirection
    {
        [EnumMember(Value = "forward")]
        Forward,
        [EnumMember(Value = "reverse")]
        Reverse
    }

    public enum KeepTypesMode
    {
        [EnumMember(Value = "include")]
        Include,
        [EnumMember(Value = "exclude")]
        Exclude
    }

    public enum KuromojiTokenizationMode
    {
        [EnumMember(Value = "normal")]
        Normal,
        [EnumMember(Value = "search")]
        Search,
        [EnumMember(Value = "extended")]
        Extended
    }

    public enum Language
    {
        [EnumMember(Value = "Arabic")]
        Arabic,
        [EnumMember(Value = "Armenian")]
        Armenian,
        [EnumMember(Value = "Basque")]
        Basque,
        [EnumMember(Value = "Brazilian")]
        Brazilian,
        [EnumMember(Value = "Bulgarian")]
        Bulgarian,
        [EnumMember(Value = "Catalan")]
        Catalan,
        [EnumMember(Value = "Chinese")]
        Chinese,
        [EnumMember(Value = "Cjk")]
        Cjk,
        [EnumMember(Value = "Czech")]
        Czech,
        [EnumMember(Value = "Danish")]
        Danish,
        [EnumMember(Value = "Dutch")]
        Dutch,
        [EnumMember(Value = "English")]
        English,
        [EnumMember(Value = "Estonian")]
        Estonian,
        [EnumMember(Value = "Finnish")]
        Finnish,
        [EnumMember(Value = "French")]
        French,
        [EnumMember(Value = "Galician")]
        Galician,
        [EnumMember(Value = "German")]
        German,
        [EnumMember(Value = "Greek")]
        Greek,
        [EnumMember(Value = "Hindi")]
        Hindi,
        [EnumMember(Value = "Hungarian")]
        Hungarian,
        [EnumMember(Value = "Indonesian")]
        Indonesian,
        [EnumMember(Value = "Irish")]
        Irish,
        [EnumMember(Value = "Italian")]
        Italian,
        [EnumMember(Value = "Latvian")]
        Latvian,
        [EnumMember(Value = "Norwegian")]
        Norwegian,
        [EnumMember(Value = "Persian")]
        Persian,
        [EnumMember(Value = "Portuguese")]
        Portuguese,
        [EnumMember(Value = "Romanian")]
        Romanian,
        [EnumMember(Value = "Russian")]
        Russian,
        [EnumMember(Value = "Sorani")]
        Sorani,
        [EnumMember(Value = "Spanish")]
        Spanish,
        [EnumMember(Value = "Swedish")]
        Swedish,
        [EnumMember(Value = "Turkish")]
        Turkish,
        [EnumMember(Value = "Thai")]
        Thai
    }

    public enum NoriDecompoundMode
    {
        [EnumMember(Value = "discard")]
        Discard,
        [EnumMember(Value = "none")]
        None,
        [EnumMember(Value = "mixed")]
        Mixed
    }

    public enum PhoneticEncoder
    {
        [EnumMember(Value = "metaphone")]
        Metaphone,
        [EnumMember(Value = "double_metaphone")]
        DoubleMetaphone,
        [EnumMember(Value = "soundex")]
        Soundex,
        [EnumMember(Value = "refined_soundex")]
        RefinedSoundex,
        [EnumMember(Value = "caverphone1")]
        Caverphone1,
        [EnumMember(Value = "caverphone2")]
        Caverphone2,
        [EnumMember(Value = "cologne")]
        Cologne,
        [EnumMember(Value = "nysiis")]
        Nysiis,
        [EnumMember(Value = "koelnerphonetik")]
        Koelnerphonetik,
        [EnumMember(Value = "haasephonetik")]
        Haasephonetik,
        [EnumMember(Value = "beider_morse")]
        BeiderMorse,
        [EnumMember(Value = "daitch_mokotoff")]
        DaitchMokotoff
    }

    public enum PhoneticLanguage
    {
        [EnumMember(Value = "any")]
        Any,
        [EnumMember(Value = "comomon")]
        Comomon,
        [EnumMember(Value = "cyrillic")]
        Cyrillic,
        [EnumMember(Value = "english")]
        English,
        [EnumMember(Value = "french")]
        French,
        [EnumMember(Value = "german")]
        German,
        [EnumMember(Value = "hebrew")]
        Hebrew,
        [EnumMember(Value = "hungarian")]
        Hungarian,
        [EnumMember(Value = "polish")]
        Polish,
        [EnumMember(Value = "romanian")]
        Romanian,
        [EnumMember(Value = "russian")]
        Russian,
        [EnumMember(Value = "spanish")]
        Spanish
    }

    public enum PhoneticNameType
    {
        [EnumMember(Value = "generic")]
        Generic,
        [EnumMember(Value = "ashkenazi")]
        Ashkenazi,
        [EnumMember(Value = "sephardic")]
        Sephardic
    }

    public enum PhoneticRuleType
    {
        [EnumMember(Value = "approx")]
        Approx,
        [EnumMember(Value = "exact")]
        Exact
    }

    public enum SnowballLanguage
    {
        [EnumMember(Value = "Armenian")]
        Armenian,
        [EnumMember(Value = "Basque")]
        Basque,
        [EnumMember(Value = "Catalan")]
        Catalan,
        [EnumMember(Value = "Danish")]
        Danish,
        [EnumMember(Value = "Dutch")]
        Dutch,
        [EnumMember(Value = "English")]
        English,
        [EnumMember(Value = "Finnish")]
        Finnish,
        [EnumMember(Value = "French")]
        French,
        [EnumMember(Value = "German")]
        German,
        [EnumMember(Value = "German2")]
        German2,
        [EnumMember(Value = "Hungarian")]
        Hungarian,
        [EnumMember(Value = "Italian")]
        Italian,
        [EnumMember(Value = "Kp")]
        Kp,
        [EnumMember(Value = "Lovins")]
        Lovins,
        [EnumMember(Value = "Norwegian")]
        Norwegian,
        [EnumMember(Value = "Porter")]
        Porter,
        [EnumMember(Value = "Portuguese")]
        Portuguese,
        [EnumMember(Value = "Romanian")]
        Romanian,
        [EnumMember(Value = "Russian")]
        Russian,
        [EnumMember(Value = "Spanish")]
        Spanish,
        [EnumMember(Value = "Swedish")]
        Swedish,
        [EnumMember(Value = "Turkish")]
        Turkish
    }

    public enum SynonymFormat
    {
        [EnumMember(Value = "solr")]
        Solr,
        [EnumMember(Value = "wordnet")]
        Wordnet
    }

    public enum TokenChar
    {
        [EnumMember(Value = "letter")]
        Letter,
        [EnumMember(Value = "digit")]
        Digit,
        [EnumMember(Value = "whitespace")]
        Whitespace,
        [EnumMember(Value = "punctuation")]
        Punctuation,
        [EnumMember(Value = "symbol")]
        Symbol,
        [EnumMember(Value = "custom")]
        Custom
    }
}