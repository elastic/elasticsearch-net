// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System.Runtime.Serialization;

namespace Nest
{
    public enum AppliesTo
    {
        [EnumMember(Value = "actual")]
        Actual,
        [EnumMember(Value = "typical")]
        Typical,
        [EnumMember(Value = "diff_from_typical")]
        DiffFromTypical,
        [EnumMember(Value = "time")]
        Time
    }

    public enum ChunkingMode
    {
        [EnumMember(Value = "auto")]
        Auto,
        [EnumMember(Value = "manual")]
        Manual,
        [EnumMember(Value = "off")]
        Off
    }

    public enum ConditionOperator
    {
        [EnumMember(Value = "gt")]
        Gt,
        [EnumMember(Value = "gte")]
        Gte,
        [EnumMember(Value = "lt")]
        Lt,
        [EnumMember(Value = "lte")]
        Lte
    }

    public enum CountFunction
    {
        [EnumMember(Value = "Count")]
        Count,
        [EnumMember(Value = "HighCount")]
        Highcount,
        [EnumMember(Value = "LowCount")]
        Lowcount
    }

    public enum DatafeedState
    {
        [EnumMember(Value = "started")]
        Started,
        [EnumMember(Value = "stopped")]
        Stopped,
        [EnumMember(Value = "starting")]
        Starting,
        [EnumMember(Value = "stopping")]
        Stopping
    }

    public enum DistinctCountFunction
    {
        [EnumMember(Value = "DistinctCount")]
        Distinctcount,
        [EnumMember(Value = "LowDistinctCount")]
        Lowdistinctcount,
        [EnumMember(Value = "HighDistinctCount")]
        Highdistinctcount
    }

    public enum ExcludeFrequent
    {
        [EnumMember(Value = "all")]
        All,
        [EnumMember(Value = "none")]
        None,
        [EnumMember(Value = "by")]
        By,
        [EnumMember(Value = "over")]
        Over
    }

    public enum GeographicFunction
    {
        [EnumMember(Value = "LatLong")]
        Latlong
    }

    public enum InfoContentFunction
    {
        [EnumMember(Value = "InfoContent")]
        Infocontent,
        [EnumMember(Value = "HighInfoContent")]
        Highinfocontent,
        [EnumMember(Value = "LowInfoContent")]
        Lowinfocontent
    }

    public enum JobState
    {
        [EnumMember(Value = "closing")]
        Closing,
        [EnumMember(Value = "closed")]
        Closed,
        [EnumMember(Value = "opened")]
        Opened,
        [EnumMember(Value = "failed")]
        Failed,
        [EnumMember(Value = "opening")]
        Opening
    }

    public enum MemoryStatus
    {
        [EnumMember(Value = "ok")]
        Ok,
        [EnumMember(Value = "soft_limit")]
        SoftLimit,
        [EnumMember(Value = "hard_limit")]
        HardLimit
    }

    public enum MetricFunction
    {
        [EnumMember(Value = "Min")]
        Min,
        [EnumMember(Value = "Max")]
        Max,
        [EnumMember(Value = "Median")]
        Median,
        [EnumMember(Value = "HighMedian")]
        Highmedian,
        [EnumMember(Value = "LowMedian")]
        Lowmedian,
        [EnumMember(Value = "Mean")]
        Mean,
        [EnumMember(Value = "HighMean")]
        Highmean,
        [EnumMember(Value = "LowMean")]
        Lowmean,
        [EnumMember(Value = "Metric")]
        Metric,
        [EnumMember(Value = "Varp")]
        Varp,
        [EnumMember(Value = "HighVarp")]
        Highvarp,
        [EnumMember(Value = "LowVarp")]
        Lowvarp
    }

    public enum NonNullSumFunction
    {
        [EnumMember(Value = "NonNullSum")]
        Nonnullsum,
        [EnumMember(Value = "HighNonNullSum")]
        Highnonnullsum,
        [EnumMember(Value = "LowNonNullSum")]
        Lownonnullsum
    }

    public enum NonZeroCountFunction
    {
        [EnumMember(Value = "NonZeroCount")]
        Nonzerocount,
        [EnumMember(Value = "LowNonZeroCount")]
        Lownonzerocount,
        [EnumMember(Value = "HighNonZeroCount")]
        Highnonzerocount
    }

    public enum RareFunction
    {
        [EnumMember(Value = "Rare")]
        Rare,
        [EnumMember(Value = "FreqRare")]
        Freqrare
    }

    public enum RuleAction
    {
        [EnumMember(Value = "skip_result")]
        SkipResult,
        [EnumMember(Value = "skip_model_update")]
        SkipModelUpdate
    }

    public enum RuleFilterType
    {
        [EnumMember(Value = "include")]
        Include,
        [EnumMember(Value = "exclude")]
        Exclude
    }

    public enum SumFunction
    {
        [EnumMember(Value = "Sum")]
        Sum,
        [EnumMember(Value = "HighSum")]
        Highsum,
        [EnumMember(Value = "LowSum")]
        Lowsum
    }

    public enum TimeFunction
    {
        [EnumMember(Value = "TimeOfDay")]
        Timeofday,
        [EnumMember(Value = "TimeOfWeek")]
        Timeofweek
    }
}