// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System.Runtime.Serialization;

namespace Nest
{
    public enum DFIIndependenceMeasure
    {
        [EnumMember(Value = "standardized")]
        Standardized,
        [EnumMember(Value = "saturated")]
        Saturated,
        [EnumMember(Value = "chisquared")]
        Chisquared
    }

    public enum DFRAfterEffect
    {
        [EnumMember(Value = "no")]
        No,
        [EnumMember(Value = "b")]
        b,
        [EnumMember(Value = "l")]
        l
    }

    public enum DFRBasicModel
    {
        [EnumMember(Value = "be")]
        Be,
        [EnumMember(Value = "d")]
        d,
        [EnumMember(Value = "g")]
        g,
        [EnumMember(Value = "if")]
        If,
        [EnumMember(Value = "in")]
        In,
        [EnumMember(Value = "ine")]
        Ine,
        [EnumMember(Value = "p")]
        p
    }

    public enum FileSystemStorageImplementation
    {
        [EnumMember(Value = "simplefs")]
        Simplefs,
        [EnumMember(Value = "niofs")]
        Niofs,
        [EnumMember(Value = "mmapfs")]
        Mmapfs,
        [EnumMember(Value = "default_fs")]
        DefaultFs
    }

    public enum IBDistribution
    {
        [EnumMember(Value = "ll")]
        Ll,
        [EnumMember(Value = "spl")]
        Spl
    }

    public enum IBLambda
    {
        [EnumMember(Value = "df")]
        Df,
        [EnumMember(Value = "ttf")]
        Ttf
    }

    public enum IndexSortMissing
    {
        [EnumMember(Value = "_first")]
        First,
        [EnumMember(Value = "_last")]
        Last
    }

    public enum IndexSortMode
    {
        [EnumMember(Value = "min")]
        Min,
        [EnumMember(Value = "max")]
        Max
    }

    public enum IndexSortOrder
    {
        [EnumMember(Value = "asc")]
        Asc,
        [EnumMember(Value = "desc")]
        Desc
    }

    public enum LogLevel
    {
        [EnumMember(Value = "error")]
        Error,
        [EnumMember(Value = "warn")]
        Warn,
        [EnumMember(Value = "info")]
        Info,
        [EnumMember(Value = "debug")]
        Debug,
        [EnumMember(Value = "trace")]
        Trace
    }

    public enum Normalization
    {
        [EnumMember(Value = "no")]
        No,
        [EnumMember(Value = "h1")]
        H1,
        [EnumMember(Value = "h2")]
        H2,
        [EnumMember(Value = "h3")]
        H3,
        [EnumMember(Value = "z")]
        z
    }

    public enum RecoveryInitialShards
    {
        [EnumMember(Value = "quorem")]
        Quorem,
        [EnumMember(Value = "quorem-1")]
        Quorem1,
        [EnumMember(Value = "full")]
        Full,
        [EnumMember(Value = "full-1")]
        Full1
    }

    public enum TranslogDurability
    {
        [EnumMember(Value = "request")]
        Request,
        [EnumMember(Value = "async")]
        Async
    }
}