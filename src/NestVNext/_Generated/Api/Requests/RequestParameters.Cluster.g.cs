// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

#nullable enable
namespace Nest
{
    public class CancelTasksRequestParameters : RequestParameters<CancelTasksRequestParameters>
    {
        public string? ParentTaskId
        {
            get => Q<string?>("parent_task_id");
            set => Q("parent_task_id", value);
        }
    }

    public class ClusterAllocationExplainRequestParameters : RequestParameters<ClusterAllocationExplainRequestParameters>
    {
        public bool? IncludeDiskInfo
        {
            get => Q<bool?>("include_disk_info");
            set => Q("include_disk_info", value);
        }

        public bool? IncludeYesDecisions
        {
            get => Q<bool?>("include_yes_decisions");
            set => Q("include_yes_decisions", value);
        }
    }

    public class ClusterGetSettingsRequestParameters : RequestParameters<ClusterGetSettingsRequestParameters>
    {
        public bool? FlatSettings
        {
            get => Q<bool?>("flat_settings");
            set => Q("flat_settings", value);
        }

        public bool? IncludeDefaults
        {
            get => Q<bool?>("include_defaults");
            set => Q("include_defaults", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class ClusterHealthRequestParameters : RequestParameters<ClusterHealthRequestParameters>
    {
        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public Level? Level
        {
            get => Q<Level?>("level");
            set => Q("level", value);
        }

        public bool? Local
        {
            get => Q<bool?>("local");
            set => Q("local", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }

        public WaitForActiveShards? WaitForActiveShards
        {
            get => Q<WaitForActiveShards?>("wait_for_active_shards");
            set => Q("wait_for_active_shards", value);
        }

        public WaitForEvents? WaitForEvents
        {
            get => Q<WaitForEvents?>("wait_for_events");
            set => Q("wait_for_events", value);
        }

        public string? WaitForNodes
        {
            get => Q<string?>("wait_for_nodes");
            set => Q("wait_for_nodes", value);
        }

        public bool? WaitForNoInitializingShards
        {
            get => Q<bool?>("wait_for_no_initializing_shards");
            set => Q("wait_for_no_initializing_shards", value);
        }

        public bool? WaitForNoRelocatingShards
        {
            get => Q<bool?>("wait_for_no_relocating_shards");
            set => Q("wait_for_no_relocating_shards", value);
        }

        public WaitForStatus? WaitForStatus
        {
            get => Q<WaitForStatus?>("wait_for_status");
            set => Q("wait_for_status", value);
        }
    }

    public class ClusterPendingTasksRequestParameters : RequestParameters<ClusterPendingTasksRequestParameters>
    {
        public bool? Local
        {
            get => Q<bool?>("local");
            set => Q("local", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }
    }

    public class ClusterPutSettingsRequestParameters : RequestParameters<ClusterPutSettingsRequestParameters>
    {
        public bool? FlatSettings
        {
            get => Q<bool?>("flat_settings");
            set => Q("flat_settings", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class ClusterRerouteRequestParameters : RequestParameters<ClusterRerouteRequestParameters>
    {
        public bool? DryRun
        {
            get => Q<bool?>("dry_run");
            set => Q("dry_run", value);
        }

        public bool? Explain
        {
            get => Q<bool?>("explain");
            set => Q("explain", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }

        public Metrics? Metric
        {
            get => Q<Metrics?>("metric");
            set => Q("metric", value);
        }

        public bool? RetryFailed
        {
            get => Q<bool?>("retry_failed");
            set => Q("retry_failed", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class ClusterStateRequestParameters : RequestParameters<ClusterStateRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? FlatSettings
        {
            get => Q<bool?>("flat_settings");
            set => Q("flat_settings", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? Local
        {
            get => Q<bool?>("local");
            set => Q("local", value);
        }

        public Time? MasterTimeout
        {
            get => Q<Time?>("master_timeout");
            set => Q("master_timeout", value);
        }

        public long? WaitForMetadataVersion
        {
            get => Q<long?>("wait_for_metadata_version");
            set => Q("wait_for_metadata_version", value);
        }

        public Time? WaitForTimeout
        {
            get => Q<Time?>("wait_for_timeout");
            set => Q("wait_for_timeout", value);
        }
    }

    public class ClusterStatsRequestParameters : RequestParameters<ClusterStatsRequestParameters>
    {
        public bool? FlatSettings
        {
            get => Q<bool?>("flat_settings");
            set => Q("flat_settings", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class GetTaskRequestParameters : RequestParameters<GetTaskRequestParameters>
    {
        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }

        public bool? WaitForCompletion
        {
            get => Q<bool?>("wait_for_completion");
            set => Q("wait_for_completion", value);
        }
    }

    public class ListTasksRequestParameters : RequestParameters<ListTasksRequestParameters>
    {
        public bool? Detailed
        {
            get => Q<bool?>("detailed");
            set => Q("detailed", value);
        }

        public GroupBy? GroupBy
        {
            get => Q<GroupBy?>("group_by");
            set => Q("group_by", value);
        }

        public string? ParentTaskId
        {
            get => Q<string?>("parent_task_id");
            set => Q("parent_task_id", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }

        public bool? WaitForCompletion
        {
            get => Q<bool?>("wait_for_completion");
            set => Q("wait_for_completion", value);
        }
    }

    public class NodesHotThreadsRequestParameters : RequestParameters<NodesHotThreadsRequestParameters>
    {
        public bool? IgnoreIdleThreads
        {
            get => Q<bool?>("ignore_idle_threads");
            set => Q("ignore_idle_threads", value);
        }

        public Time? Interval
        {
            get => Q<Time?>("interval");
            set => Q("interval", value);
        }

        public long? Snapshots
        {
            get => Q<long?>("snapshots");
            set => Q("snapshots", value);
        }

        public long? Threads
        {
            get => Q<long?>("threads");
            set => Q("threads", value);
        }

        public ThreadType? ThreadType
        {
            get => Q<ThreadType?>("thread_type");
            set => Q("thread_type", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class NodesInfoRequestParameters : RequestParameters<NodesInfoRequestParameters>
    {
        public bool? FlatSettings
        {
            get => Q<bool?>("flat_settings");
            set => Q("flat_settings", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class NodesStatsRequestParameters : RequestParameters<NodesStatsRequestParameters>
    {
        public Fields? CompletionFields
        {
            get => Q<Fields?>("completion_fields");
            set => Q("completion_fields", value);
        }

        public Fields? FielddataFields
        {
            get => Q<Fields?>("fielddata_fields");
            set => Q("fielddata_fields", value);
        }

        public Fields? Fields
        {
            get => Q<Fields?>("fields");
            set => Q("fields", value);
        }

        public bool? Groups
        {
            get => Q<bool?>("groups");
            set => Q("groups", value);
        }

        public bool? IncludeSegmentFileSizes
        {
            get => Q<bool?>("include_segment_file_sizes");
            set => Q("include_segment_file_sizes", value);
        }

        public Level? Level
        {
            get => Q<Level?>("level");
            set => Q("level", value);
        }

        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class NodesUsageRequestParameters : RequestParameters<NodesUsageRequestParameters>
    {
        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class PingRequestParameters : RequestParameters<PingRequestParameters>
    {
    }

    public class ReloadSecureSettingsRequestParameters : RequestParameters<ReloadSecureSettingsRequestParameters>
    {
        public Time? Timeout
        {
            get => Q<Time?>("timeout");
            set => Q("timeout", value);
        }
    }

    public class RemoteInfoRequestParameters : RequestParameters<RemoteInfoRequestParameters>
    {
    }

    public class RootNodeInfoRequestParameters : RequestParameters<RootNodeInfoRequestParameters>
    {
    }
}