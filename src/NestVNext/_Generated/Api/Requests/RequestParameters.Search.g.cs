// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

#nullable enable
namespace Nest
{
    public class ClearScrollRequestParameters : RequestParameters<ClearScrollRequestParameters>
    {
    }

    public class CountRequestParameters : RequestParameters<CountRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public string? Analyzer
        {
            get => Q<string?>("analyzer");
            set => Q("analyzer", value);
        }

        public bool? AnalyzeWildcard
        {
            get => Q<bool?>("analyze_wildcard");
            set => Q("analyze_wildcard", value);
        }

        public DefaultOperator? DefaultOperator
        {
            get => Q<DefaultOperator?>("default_operator");
            set => Q("default_operator", value);
        }

        public string? Df
        {
            get => Q<string?>("df");
            set => Q("df", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? IgnoreThrottled
        {
            get => Q<bool?>("ignore_throttled");
            set => Q("ignore_throttled", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? Lenient
        {
            get => Q<bool?>("lenient");
            set => Q("lenient", value);
        }

        public double? MinScore
        {
            get => Q<double?>("min_score");
            set => Q("min_score", value);
        }

        public string? Preference
        {
            get => Q<string?>("preference");
            set => Q("preference", value);
        }

        public string? QueryOnQueryString
        {
            get => Q<string?>("query_on_query_string");
            set => Q("query_on_query_string", value);
        }

        public Routing? Routing
        {
            get => Q<Routing?>("routing");
            set => Q("routing", value);
        }

        public long? TerminateAfter
        {
            get => Q<long?>("terminate_after");
            set => Q("terminate_after", value);
        }

        public string? q
        {
            get => Q<string?>("q");
            set => Q("q", value);
        }
    }

    public class ExplainRequestParameters : RequestParameters<ExplainRequestParameters>
    {
        public string? Analyzer
        {
            get => Q<string?>("analyzer");
            set => Q("analyzer", value);
        }

        public bool? AnalyzeWildcard
        {
            get => Q<bool?>("analyze_wildcard");
            set => Q("analyze_wildcard", value);
        }

        public DefaultOperator? DefaultOperator
        {
            get => Q<DefaultOperator?>("default_operator");
            set => Q("default_operator", value);
        }

        public string? Df
        {
            get => Q<string?>("df");
            set => Q("df", value);
        }

        public bool? Lenient
        {
            get => Q<bool?>("lenient");
            set => Q("lenient", value);
        }

        public string? Preference
        {
            get => Q<string?>("preference");
            set => Q("preference", value);
        }

        public string? QueryOnQueryString
        {
            get => Q<string?>("query_on_query_string");
            set => Q("query_on_query_string", value);
        }

        public Routing? Routing
        {
            get => Q<Routing?>("routing");
            set => Q("routing", value);
        }

        public Fields? SourceExcludes
        {
            get => Q<Fields?>("_source_excludes");
            set => Q("_source_excludes", value);
        }

        public Fields? SourceIncludes
        {
            get => Q<Fields?>("_source_includes");
            set => Q("_source_includes", value);
        }

        public Fields? StoredFields
        {
            get => Q<Fields?>("stored_fields");
            set => Q("stored_fields", value);
        }

        public string? q
        {
            get => Q<string?>("q");
            set => Q("q", value);
        }
    }

    public class FieldCapabilitiesRequestParameters : RequestParameters<FieldCapabilitiesRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public Fields? Fields
        {
            get => Q<Fields?>("fields");
            set => Q("fields", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? IncludeUnmapped
        {
            get => Q<bool?>("include_unmapped");
            set => Q("include_unmapped", value);
        }
    }

    public class MultiSearchRequestParameters : RequestParameters<MultiSearchRequestParameters>
    {
        public bool? CcsMinimizeRoundtrips
        {
            get => Q<bool?>("ccs_minimize_roundtrips");
            set => Q("ccs_minimize_roundtrips", value);
        }

        public long? MaxConcurrentSearches
        {
            get => Q<long?>("max_concurrent_searches");
            set => Q("max_concurrent_searches", value);
        }

        public long? MaxConcurrentShardRequests
        {
            get => Q<long?>("max_concurrent_shard_requests");
            set => Q("max_concurrent_shard_requests", value);
        }

        public long? PreFilterShardSize
        {
            get => Q<long?>("pre_filter_shard_size");
            set => Q("pre_filter_shard_size", value);
        }

        public SearchType? SearchType
        {
            get => Q<SearchType?>("search_type");
            set => Q("search_type", value);
        }

        public bool? TotalHitsAsInteger
        {
            get => Q<bool?>("total_hits_as_integer");
            set => Q("total_hits_as_integer", value);
        }

        public bool? TypedKeys
        {
            get => Q<bool?>("typed_keys");
            set => Q("typed_keys", value);
        }
    }

    public class MultiSearchTemplateRequestParameters : RequestParameters<MultiSearchTemplateRequestParameters>
    {
        public bool? CcsMinimizeRoundtrips
        {
            get => Q<bool?>("ccs_minimize_roundtrips");
            set => Q("ccs_minimize_roundtrips", value);
        }

        public long? MaxConcurrentSearches
        {
            get => Q<long?>("max_concurrent_searches");
            set => Q("max_concurrent_searches", value);
        }

        public SearchType? SearchType
        {
            get => Q<SearchType?>("search_type");
            set => Q("search_type", value);
        }

        public bool? TotalHitsAsInteger
        {
            get => Q<bool?>("total_hits_as_integer");
            set => Q("total_hits_as_integer", value);
        }

        public bool? TypedKeys
        {
            get => Q<bool?>("typed_keys");
            set => Q("typed_keys", value);
        }
    }

    public class RenderSearchTemplateRequestParameters : RequestParameters<RenderSearchTemplateRequestParameters>
    {
    }

    public class ScrollRequestParameters : RequestParameters<ScrollRequestParameters>
    {
        public Time? Scroll
        {
            get => Q<Time?>("scroll");
            set => Q("scroll", value);
        }

        public ScrollId? ScrollId
        {
            get => Q<ScrollId?>("scroll_id");
            set => Q("scroll_id", value);
        }

        public bool? RestTotalHitsAsInt
        {
            get => Q<bool?>("rest_total_hits_as_int");
            set => Q("rest_total_hits_as_int", value);
        }

        public bool? TotalHitsAsInteger
        {
            get => Q<bool?>("total_hits_as_integer");
            set => Q("total_hits_as_integer", value);
        }
    }

    public class SearchRequestParameters : RequestParameters<SearchRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public bool? AllowPartialSearchResults
        {
            get => Q<bool?>("allow_partial_search_results");
            set => Q("allow_partial_search_results", value);
        }

        public string? Analyzer
        {
            get => Q<string?>("analyzer");
            set => Q("analyzer", value);
        }

        public bool? AnalyzeWildcard
        {
            get => Q<bool?>("analyze_wildcard");
            set => Q("analyze_wildcard", value);
        }

        public long? BatchedReduceSize
        {
            get => Q<long?>("batched_reduce_size");
            set => Q("batched_reduce_size", value);
        }

        public bool? CcsMinimizeRoundtrips
        {
            get => Q<bool?>("ccs_minimize_roundtrips");
            set => Q("ccs_minimize_roundtrips", value);
        }

        public DefaultOperator? DefaultOperator
        {
            get => Q<DefaultOperator?>("default_operator");
            set => Q("default_operator", value);
        }

        public string? Df
        {
            get => Q<string?>("df");
            set => Q("df", value);
        }

        public Fields? DocvalueFields
        {
            get => Q<Fields?>("docvalue_fields");
            set => Q("docvalue_fields", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? IgnoreThrottled
        {
            get => Q<bool?>("ignore_throttled");
            set => Q("ignore_throttled", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? Lenient
        {
            get => Q<bool?>("lenient");
            set => Q("lenient", value);
        }

        public long? MaxConcurrentShardRequests
        {
            get => Q<long?>("max_concurrent_shard_requests");
            set => Q("max_concurrent_shard_requests", value);
        }

        public string? Preference
        {
            get => Q<string?>("preference");
            set => Q("preference", value);
        }

        public long? PreFilterShardSize
        {
            get => Q<long?>("pre_filter_shard_size");
            set => Q("pre_filter_shard_size", value);
        }

        public string? QueryOnQueryString
        {
            get => Q<string?>("query_on_query_string");
            set => Q("query_on_query_string", value);
        }

        public bool? RequestCache
        {
            get => Q<bool?>("request_cache");
            set => Q("request_cache", value);
        }

        public Routing? Routing
        {
            get => Q<Routing?>("routing");
            set => Q("routing", value);
        }

        public Time? Scroll
        {
            get => Q<Time?>("scroll");
            set => Q("scroll", value);
        }

        public SearchType? SearchType
        {
            get => Q<SearchType?>("search_type");
            set => Q("search_type", value);
        }

        public bool? SequenceNumberPrimaryTerm
        {
            get => Q<bool?>("sequence_number_primary_term");
            set => Q("sequence_number_primary_term", value);
        }

        public Fields? StoredFields
        {
            get => Q<Fields?>("stored_fields");
            set => Q("stored_fields", value);
        }

        public Field? SuggestField
        {
            get => Q<Field?>("suggest_field");
            set => Q("suggest_field", value);
        }

        public SuggestMode? SuggestMode
        {
            get => Q<SuggestMode?>("suggest_mode");
            set => Q("suggest_mode", value);
        }

        public long? SuggestSize
        {
            get => Q<long?>("suggest_size");
            set => Q("suggest_size", value);
        }

        public string? SuggestText
        {
            get => Q<string?>("suggest_text");
            set => Q("suggest_text", value);
        }

        public bool? TotalHitsAsInteger
        {
            get => Q<bool?>("total_hits_as_integer");
            set => Q("total_hits_as_integer", value);
        }

        public bool? TypedKeys
        {
            get => Q<bool?>("typed_keys");
            set => Q("typed_keys", value);
        }

        public bool? RestTotalHitsAsInt
        {
            get => Q<bool?>("rest_total_hits_as_int");
            set => Q("rest_total_hits_as_int", value);
        }

        public Fields? SourceExcludes
        {
            get => Q<Fields?>("_source_excludes");
            set => Q("_source_excludes", value);
        }

        public Fields? SourceIncludes
        {
            get => Q<Fields?>("_source_includes");
            set => Q("_source_includes", value);
        }

        public bool? SeqNoPrimaryTerm
        {
            get => Q<bool?>("seq_no_primary_term");
            set => Q("seq_no_primary_term", value);
        }

        public string? q
        {
            get => Q<string?>("q");
            set => Q("q", value);
        }

        public int? Size
        {
            get => Q<int?>("size");
            set => Q("size", value);
        }

        public int? From
        {
            get => Q<int?>("from");
            set => Q("from", value);
        }
    }

    public class SearchShardsRequestParameters : RequestParameters<SearchShardsRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? Local
        {
            get => Q<bool?>("local");
            set => Q("local", value);
        }

        public string? Preference
        {
            get => Q<string?>("preference");
            set => Q("preference", value);
        }

        public Routing? Routing
        {
            get => Q<Routing?>("routing");
            set => Q("routing", value);
        }
    }

    public class SearchTemplateRequestParameters : RequestParameters<SearchTemplateRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public bool? CcsMinimizeRoundtrips
        {
            get => Q<bool?>("ccs_minimize_roundtrips");
            set => Q("ccs_minimize_roundtrips", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? Explain
        {
            get => Q<bool?>("explain");
            set => Q("explain", value);
        }

        public bool? IgnoreThrottled
        {
            get => Q<bool?>("ignore_throttled");
            set => Q("ignore_throttled", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public string? Preference
        {
            get => Q<string?>("preference");
            set => Q("preference", value);
        }

        public bool? Profile
        {
            get => Q<bool?>("profile");
            set => Q("profile", value);
        }

        public Routing? Routing
        {
            get => Q<Routing?>("routing");
            set => Q("routing", value);
        }

        public Time? Scroll
        {
            get => Q<Time?>("scroll");
            set => Q("scroll", value);
        }

        public SearchType? SearchType
        {
            get => Q<SearchType?>("search_type");
            set => Q("search_type", value);
        }

        public bool? TotalHitsAsInteger
        {
            get => Q<bool?>("total_hits_as_integer");
            set => Q("total_hits_as_integer", value);
        }

        public bool? TypedKeys
        {
            get => Q<bool?>("typed_keys");
            set => Q("typed_keys", value);
        }
    }

    public class ValidateQueryRequestParameters : RequestParameters<ValidateQueryRequestParameters>
    {
        public bool? AllowNoIndices
        {
            get => Q<bool?>("allow_no_indices");
            set => Q("allow_no_indices", value);
        }

        public bool? AllShards
        {
            get => Q<bool?>("all_shards");
            set => Q("all_shards", value);
        }

        public string? Analyzer
        {
            get => Q<string?>("analyzer");
            set => Q("analyzer", value);
        }

        public bool? AnalyzeWildcard
        {
            get => Q<bool?>("analyze_wildcard");
            set => Q("analyze_wildcard", value);
        }

        public DefaultOperator? DefaultOperator
        {
            get => Q<DefaultOperator?>("default_operator");
            set => Q("default_operator", value);
        }

        public string? Df
        {
            get => Q<string?>("df");
            set => Q("df", value);
        }

        public ExpandWildcards? ExpandWildcards
        {
            get => Q<ExpandWildcards?>("expand_wildcards");
            set => Q("expand_wildcards", value);
        }

        public bool? Explain
        {
            get => Q<bool?>("explain");
            set => Q("explain", value);
        }

        public bool? IgnoreUnavailable
        {
            get => Q<bool?>("ignore_unavailable");
            set => Q("ignore_unavailable", value);
        }

        public bool? Lenient
        {
            get => Q<bool?>("lenient");
            set => Q("lenient", value);
        }

        public string? QueryOnQueryString
        {
            get => Q<string?>("query_on_query_string");
            set => Q("query_on_query_string", value);
        }

        public bool? Rewrite
        {
            get => Q<bool?>("rewrite");
            set => Q("rewrite", value);
        }
    }
}