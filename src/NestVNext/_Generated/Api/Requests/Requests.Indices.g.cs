// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;

namespace Nest
{
    public interface IAliasExistsRequest : IRequest<AliasExistsRequestParameters>
    {
    }

    public class AliasExistsRequest : PlainRequestBase<AliasExistsRequestParameters>, IAliasExistsRequest
    {
        protected IAliasExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesExistsAlias;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
    }

    public interface IAnalyzeRequest : IRequest<AnalyzeRequestParameters>
    {
    }

    public class AnalyzeRequest : PlainRequestBase<AnalyzeRequestParameters>, IAnalyzeRequest
    {
        protected IAnalyzeRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesAnalyze;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IBulkAliasRequest : IRequest<BulkAliasRequestParameters>
    {
    }

    public class BulkAliasRequest : PlainRequestBase<BulkAliasRequestParameters>, IBulkAliasRequest
    {
        protected IBulkAliasRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesUpdateAliases;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IClearCacheRequest : IRequest<ClearCacheRequestParameters>
    {
    }

    public class ClearCacheRequest : PlainRequestBase<ClearCacheRequestParameters>, IClearCacheRequest
    {
        protected IClearCacheRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClearCache;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface ICloneIndexRequest : IRequest<CloneIndexRequestParameters>
    {
    }

    public class CloneIndexRequest : PlainRequestBase<CloneIndexRequestParameters>, ICloneIndexRequest
    {
        protected ICloneIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClone;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface ICloseIndexRequest : IRequest<CloseIndexRequestParameters>
    {
    }

    public class CloseIndexRequest : PlainRequestBase<CloseIndexRequestParameters>, ICloseIndexRequest
    {
        protected ICloseIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClose;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface ICreateIndexRequest : IRequest<CreateIndexRequestParameters>
    {
    }

    public class CreateIndexRequest : PlainRequestBase<CreateIndexRequestParameters>, ICreateIndexRequest
    {
        protected ICreateIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesCreate;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface IDeleteAliasRequest : IRequest<DeleteAliasRequestParameters>
    {
    }

    public class DeleteAliasRequest : PlainRequestBase<DeleteAliasRequestParameters>, IDeleteAliasRequest
    {
        protected IDeleteAliasRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesDeleteAlias;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
    }

    public interface IDeleteIndexRequest : IRequest<DeleteIndexRequestParameters>
    {
    }

    public class DeleteIndexRequest : PlainRequestBase<DeleteIndexRequestParameters>, IDeleteIndexRequest
    {
        protected IDeleteIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesDelete;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
    }

    public interface IDeleteIndexTemplateRequest : IRequest<DeleteIndexTemplateRequestParameters>
    {
    }

    public class DeleteIndexTemplateRequest : PlainRequestBase<DeleteIndexTemplateRequestParameters>, IDeleteIndexTemplateRequest
    {
        protected IDeleteIndexTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesDeleteTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
    }

    public interface IFlushRequest : IRequest<FlushRequestParameters>
    {
    }

    public class FlushRequest : PlainRequestBase<FlushRequestParameters>, IFlushRequest
    {
        protected IFlushRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesFlush;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IForceMergeRequest : IRequest<ForceMergeRequestParameters>
    {
    }

    public class ForceMergeRequest : PlainRequestBase<ForceMergeRequestParameters>, IForceMergeRequest
    {
        protected IForceMergeRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesForcemerge;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IFreezeIndexRequest : IRequest<FreezeIndexRequestParameters>
    {
    }

    public class FreezeIndexRequest : PlainRequestBase<FreezeIndexRequestParameters>, IFreezeIndexRequest
    {
        protected IFreezeIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesFreeze;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IGetAliasRequest : IRequest<GetAliasRequestParameters>
    {
    }

    public class GetAliasRequest : PlainRequestBase<GetAliasRequestParameters>, IGetAliasRequest
    {
        protected IGetAliasRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetAlias;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IGetFieldMappingRequest : IRequest<GetFieldMappingRequestParameters>
    {
    }

    public class GetFieldMappingRequest : PlainRequestBase<GetFieldMappingRequestParameters>, IGetFieldMappingRequest
    {
        protected IGetFieldMappingRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetFieldMapping;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IGetIndexRequest : IRequest<GetIndexRequestParameters>
    {
    }

    public class GetIndexRequest : PlainRequestBase<GetIndexRequestParameters>, IGetIndexRequest
    {
        protected IGetIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGet;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IGetIndexSettingsRequest : IRequest<GetIndexSettingsRequestParameters>
    {
    }

    public class GetIndexSettingsRequest : PlainRequestBase<GetIndexSettingsRequestParameters>, IGetIndexSettingsRequest
    {
        protected IGetIndexSettingsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetSettings;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IGetIndexTemplateRequest : IRequest<GetIndexTemplateRequestParameters>
    {
    }

    public class GetIndexTemplateRequest : PlainRequestBase<GetIndexTemplateRequestParameters>, IGetIndexTemplateRequest
    {
        protected IGetIndexTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IGetMappingRequest : IRequest<GetMappingRequestParameters>
    {
    }

    public class GetMappingRequest : PlainRequestBase<GetMappingRequestParameters>, IGetMappingRequest
    {
        protected IGetMappingRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetMapping;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IIndexExistsRequest : IRequest<IndexExistsRequestParameters>
    {
    }

    public class IndexExistsRequest : PlainRequestBase<IndexExistsRequestParameters>, IIndexExistsRequest
    {
        protected IIndexExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesExists;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
    }

    public interface IIndexTemplateExistsRequest : IRequest<IndexTemplateExistsRequestParameters>
    {
    }

    public class IndexTemplateExistsRequest : PlainRequestBase<IndexTemplateExistsRequestParameters>, IIndexTemplateExistsRequest
    {
        protected IIndexTemplateExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesExistsTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
    }

    public interface IIndicesShardStoresRequest : IRequest<IndicesShardStoresRequestParameters>
    {
    }

    public class IndicesShardStoresRequest : PlainRequestBase<IndicesShardStoresRequestParameters>, IIndicesShardStoresRequest
    {
        protected IIndicesShardStoresRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesShardStores;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IIndicesStatsRequest : IRequest<IndicesStatsRequestParameters>
    {
    }

    public class IndicesStatsRequest : PlainRequestBase<IndicesStatsRequestParameters>, IIndicesStatsRequest
    {
        protected IIndicesStatsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesStats;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IOpenIndexRequest : IRequest<OpenIndexRequestParameters>
    {
    }

    public class OpenIndexRequest : PlainRequestBase<OpenIndexRequestParameters>, IOpenIndexRequest
    {
        protected IOpenIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesOpen;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IPutAliasRequest : IRequest<PutAliasRequestParameters>
    {
    }

    public class PutAliasRequest : PlainRequestBase<PutAliasRequestParameters>, IPutAliasRequest
    {
        protected IPutAliasRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesPutAlias;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface IPutIndexTemplateRequest : IRequest<PutIndexTemplateRequestParameters>
    {
    }

    public class PutIndexTemplateRequest : PlainRequestBase<PutIndexTemplateRequestParameters>, IPutIndexTemplateRequest
    {
        protected IPutIndexTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesPutTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface IPutMappingRequest : IRequest<PutMappingRequestParameters>
    {
    }

    public class PutMappingRequest : PlainRequestBase<PutMappingRequestParameters>, IPutMappingRequest
    {
        protected IPutMappingRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesPutMapping;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface IRecoveryStatusRequest : IRequest<RecoveryStatusRequestParameters>
    {
    }

    public class RecoveryStatusRequest : PlainRequestBase<RecoveryStatusRequestParameters>, IRecoveryStatusRequest
    {
        protected IRecoveryStatusRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesRecovery;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IRefreshRequest : IRequest<RefreshRequestParameters>
    {
    }

    public class RefreshRequest : PlainRequestBase<RefreshRequestParameters>, IRefreshRequest
    {
        protected IRefreshRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesRefresh;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IReloadSearchAnalyzersRequest : IRequest<ReloadSearchAnalyzersRequestParameters>
    {
    }

    public class ReloadSearchAnalyzersRequest : PlainRequestBase<ReloadSearchAnalyzersRequestParameters>, IReloadSearchAnalyzersRequest
    {
        protected IReloadSearchAnalyzersRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesReloadSearchAnalyzers;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IRolloverIndexRequest : IRequest<RolloverIndexRequestParameters>
    {
    }

    public class RolloverIndexRequest : PlainRequestBase<RolloverIndexRequestParameters>, IRolloverIndexRequest
    {
        protected IRolloverIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesRollover;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface ISegmentsRequest : IRequest<SegmentsRequestParameters>
    {
    }

    public class SegmentsRequest : PlainRequestBase<SegmentsRequestParameters>, ISegmentsRequest
    {
        protected ISegmentsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesSegments;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
    }

    public interface IShrinkIndexRequest : IRequest<ShrinkIndexRequestParameters>
    {
    }

    public class ShrinkIndexRequest : PlainRequestBase<ShrinkIndexRequestParameters>, IShrinkIndexRequest
    {
        protected IShrinkIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesShrink;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface ISplitIndexRequest : IRequest<SplitIndexRequestParameters>
    {
    }

    public class SplitIndexRequest : PlainRequestBase<SplitIndexRequestParameters>, ISplitIndexRequest
    {
        protected ISplitIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesSplit;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }

    public interface ISyncedFlushRequest : IRequest<SyncedFlushRequestParameters>
    {
    }

    public class SyncedFlushRequest : PlainRequestBase<SyncedFlushRequestParameters>, ISyncedFlushRequest
    {
        protected ISyncedFlushRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesFlushSynced;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface ITypeExistsRequest : IRequest<TypeExistsRequestParameters>
    {
    }

    public class TypeExistsRequest : PlainRequestBase<TypeExistsRequestParameters>, ITypeExistsRequest
    {
        protected ITypeExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesExistsType;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
    }

    public interface IUnfreezeIndexRequest : IRequest<UnfreezeIndexRequestParameters>
    {
    }

    public class UnfreezeIndexRequest : PlainRequestBase<UnfreezeIndexRequestParameters>, IUnfreezeIndexRequest
    {
        protected IUnfreezeIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesUnfreeze;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
    }

    public interface IUpdateIndexSettingsRequest : IRequest<UpdateIndexSettingsRequestParameters>
    {
    }

    public class UpdateIndexSettingsRequest : PlainRequestBase<UpdateIndexSettingsRequestParameters>, IUpdateIndexSettingsRequest
    {
        protected IUpdateIndexSettingsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesPutSettings;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
    }
}