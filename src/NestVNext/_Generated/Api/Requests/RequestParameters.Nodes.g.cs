// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

#nullable enable
namespace Nest
{
    public class NodesHotThreadsRequestParameters : RequestParameters<NodesHotThreadsRequestParameters>
    {
        public bool? IgnoreIdleThreads { get => Q<bool?>("ignore_idle_threads"); set => Q("ignore_idle_threads", value); }

        public Time? Interval { get => Q<Time?>("interval"); set => Q("interval", value); }

        public long? Snapshots { get => Q<long?>("snapshots"); set => Q("snapshots", value); }

        public long? Threads { get => Q<long?>("threads"); set => Q("threads", value); }

        public ThreadType? ThreadType { get => Q<ThreadType?>("thread_type"); set => Q("thread_type", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public class NodesInfoRequestParameters : RequestParameters<NodesInfoRequestParameters>
    {
        public bool? FlatSettings { get => Q<bool?>("flat_settings"); set => Q("flat_settings", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public class ReloadSecureSettingsRequestParameters : RequestParameters<ReloadSecureSettingsRequestParameters>
    {
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public class NodesStatsRequestParameters : RequestParameters<NodesStatsRequestParameters>
    {
        public Fields? CompletionFields { get => Q<Fields?>("completion_fields"); set => Q("completion_fields", value); }

        public Fields? FielddataFields { get => Q<Fields?>("fielddata_fields"); set => Q("fielddata_fields", value); }

        public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

        public bool? Groups { get => Q<bool?>("groups"); set => Q("groups", value); }

        public bool? IncludeSegmentFileSizes { get => Q<bool?>("include_segment_file_sizes"); set => Q("include_segment_file_sizes", value); }

        public Level? Level { get => Q<Level?>("level"); set => Q("level", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public class NodesUsageRequestParameters : RequestParameters<NodesUsageRequestParameters>
    {
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }
}