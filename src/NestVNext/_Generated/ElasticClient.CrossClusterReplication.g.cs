// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class CrossClusterReplicationNamespace : NamespacedClientProxy
	{
		internal CrossClusterReplicationNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteAutoFollowPatternResponse DeleteAutoFollowPattern(IDeleteAutoFollowPatternRequest request)
		{
			return DoRequest<IDeleteAutoFollowPatternRequest, DeleteAutoFollowPatternResponse>(request, request.RequestParameters);
		}

		public Task<DeleteAutoFollowPatternResponse> DeleteAutoFollowPatternAsync(IDeleteAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteAutoFollowPatternRequest, DeleteAutoFollowPatternResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateFollowIndexResponse CreateFollowIndex(ICreateFollowIndexRequest request)
		{
			return DoRequest<ICreateFollowIndexRequest, CreateFollowIndexResponse>(request, request.RequestParameters);
		}

		public Task<CreateFollowIndexResponse> CreateFollowIndexAsync(ICreateFollowIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateFollowIndexRequest, CreateFollowIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FollowInfoResponse FollowInfo(IFollowInfoRequest request)
		{
			return DoRequest<IFollowInfoRequest, FollowInfoResponse>(request, request.RequestParameters);
		}

		public Task<FollowInfoResponse> FollowInfoAsync(IFollowInfoRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFollowInfoRequest, FollowInfoResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FollowIndexStatsResponse FollowIndexStats(IFollowIndexStatsRequest request)
		{
			return DoRequest<IFollowIndexStatsRequest, FollowIndexStatsResponse>(request, request.RequestParameters);
		}

		public Task<FollowIndexStatsResponse> FollowIndexStatsAsync(IFollowIndexStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFollowIndexStatsRequest, FollowIndexStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ForgetFollowerIndexResponse ForgetFollowerIndex(IForgetFollowerIndexRequest request)
		{
			return DoRequest<IForgetFollowerIndexRequest, ForgetFollowerIndexResponse>(request, request.RequestParameters);
		}

		public Task<ForgetFollowerIndexResponse> ForgetFollowerIndexAsync(IForgetFollowerIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IForgetFollowerIndexRequest, ForgetFollowerIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetAutoFollowPatternResponse GetAutoFollowPattern(IGetAutoFollowPatternRequest request)
		{
			return DoRequest<IGetAutoFollowPatternRequest, GetAutoFollowPatternResponse>(request, request.RequestParameters);
		}

		public Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(IGetAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetAutoFollowPatternRequest, GetAutoFollowPatternResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PauseAutoFollowPatternResponse PauseAutoFollowPattern(IPauseAutoFollowPatternRequest request)
		{
			return DoRequest<IPauseAutoFollowPatternRequest, PauseAutoFollowPatternResponse>(request, request.RequestParameters);
		}

		public Task<PauseAutoFollowPatternResponse> PauseAutoFollowPatternAsync(IPauseAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPauseAutoFollowPatternRequest, PauseAutoFollowPatternResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PauseFollowIndexResponse PauseFollowIndex(IPauseFollowIndexRequest request)
		{
			return DoRequest<IPauseFollowIndexRequest, PauseFollowIndexResponse>(request, request.RequestParameters);
		}

		public Task<PauseFollowIndexResponse> PauseFollowIndexAsync(IPauseFollowIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPauseFollowIndexRequest, PauseFollowIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateAutoFollowPatternResponse CreateAutoFollowPattern(ICreateAutoFollowPatternRequest request)
		{
			return DoRequest<ICreateAutoFollowPatternRequest, CreateAutoFollowPatternResponse>(request, request.RequestParameters);
		}

		public Task<CreateAutoFollowPatternResponse> CreateAutoFollowPatternAsync(ICreateAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateAutoFollowPatternRequest, CreateAutoFollowPatternResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ResumeAutoFollowPatternResponse ResumeAutoFollowPattern(IResumeAutoFollowPatternRequest request)
		{
			return DoRequest<IResumeAutoFollowPatternRequest, ResumeAutoFollowPatternResponse>(request, request.RequestParameters);
		}

		public Task<ResumeAutoFollowPatternResponse> ResumeAutoFollowPatternAsync(IResumeAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IResumeAutoFollowPatternRequest, ResumeAutoFollowPatternResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ResumeFollowIndexResponse ResumeFollowIndex(IResumeFollowIndexRequest request)
		{
			return DoRequest<IResumeFollowIndexRequest, ResumeFollowIndexResponse>(request, request.RequestParameters);
		}

		public Task<ResumeFollowIndexResponse> ResumeFollowIndexAsync(IResumeFollowIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IResumeFollowIndexRequest, ResumeFollowIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CcrStatsResponse CcrStats(ICcrStatsRequest request)
		{
			return DoRequest<ICcrStatsRequest, CcrStatsResponse>(request, request.RequestParameters);
		}

		public Task<CcrStatsResponse> CcrStatsAsync(ICcrStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICcrStatsRequest, CcrStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public UnfollowIndexResponse UnfollowIndex(IUnfollowIndexRequest request)
		{
			return DoRequest<IUnfollowIndexRequest, UnfollowIndexResponse>(request, request.RequestParameters);
		}

		public Task<UnfollowIndexResponse> UnfollowIndexAsync(IUnfollowIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUnfollowIndexRequest, UnfollowIndexResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}