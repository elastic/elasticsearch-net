// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public enum DateInterval
	{
		[EnumMember(Value = "second")]
		Second,
		[EnumMember(Value = "minute")]
		Minute,
		[EnumMember(Value = "hour")]
		Hour,
		[EnumMember(Value = "day")]
		Day,
		[EnumMember(Value = "week")]
		Week,
		[EnumMember(Value = "month")]
		Month,
		[EnumMember(Value = "quarter")]
		Quarter,
		[EnumMember(Value = "year")]
		Year
	}

	public enum GapPolicy
	{
		[EnumMember(Value = "skip")]
		Skip,
		[EnumMember(Value = "insert_zeros")]
		InsertZeros
	}

	public enum HoltWintersType
	{
		[EnumMember(Value = "add")]
		Add,
		[EnumMember(Value = "mult")]
		Mult
	}

	public enum MatrixStatsMode
	{
		[EnumMember(Value = "avg")]
		Avg,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "median")]
		Median
	}

	public enum MinimumInterval
	{
		[EnumMember(Value = "second")]
		Second,
		[EnumMember(Value = "minute")]
		Minute,
		[EnumMember(Value = "hour")]
		Hour,
		[EnumMember(Value = "day")]
		Day,
		[EnumMember(Value = "month")]
		Month,
		[EnumMember(Value = "year")]
		Year
	}

	public enum MovingAverageModel
	{
		[EnumMember(Value = "linear")]
		Linear,
		[EnumMember(Value = "simple")]
		Simple,
		[EnumMember(Value = "ewma")]
		Ewma,
		[EnumMember(Value = "holt")]
		Holt,
		[EnumMember(Value = "holt_winters")]
		HoltWinters
	}

	public enum NormalizeMethod
	{
		[EnumMember(Value = "rescale_0_1")]
		Rescale01,
		[EnumMember(Value = "rescale_0_100")]
		Rescale0100,
		[EnumMember(Value = "percent_of_sum")]
		PercentOfSum,
		[EnumMember(Value = "mean")]
		Mean,
		[EnumMember(Value = "zscore")]
		Zscore,
		[EnumMember(Value = "softmax")]
		Softmax
	}

	public enum RateMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "value_count")]
		ValueCount
	}

	public enum SamplerAggregationExecutionHint
	{
		[EnumMember(Value = "map")]
		Map,
		[EnumMember(Value = "global_ordinals")]
		GlobalOrdinals,
		[EnumMember(Value = "bytes_hash")]
		BytesHash
	}

	public enum TermsAggregationCollectMode
	{
		[EnumMember(Value = "depth_first")]
		DepthFirst,
		[EnumMember(Value = "breadth_first")]
		BreadthFirst
	}

	public enum TermsAggregationExecutionHint
	{
		[EnumMember(Value = "map")]
		Map,
		[EnumMember(Value = "global_ordinals")]
		GlobalOrdinals,
		[EnumMember(Value = "global_ordinals_hash")]
		GlobalOrdinalsHash,
		[EnumMember(Value = "global_ordinals_low_cardinality")]
		GlobalOrdinalsLowCardinality
	}

	public enum TTestType
	{
		[EnumMember(Value = "paired")]
		Paired,
		[EnumMember(Value = "homoscedastic")]
		Homoscedastic,
		[EnumMember(Value = "heteroscedastic")]
		Heteroscedastic
	}

	public enum ValueType
	{
		[EnumMember(Value = "string")]
		String,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "number")]
		Number,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "date_nanos")]
		DateNanos,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "numeric")]
		Numeric,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "boolean")]
		Boolean
	}
}