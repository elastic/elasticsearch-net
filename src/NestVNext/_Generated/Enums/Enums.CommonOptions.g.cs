// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public enum DistanceUnit
	{
		[EnumMember(Value = "in")]
		In,
		[EnumMember(Value = "ft")]
		Ft,
		[EnumMember(Value = "yd")]
		Yd,
		[EnumMember(Value = "mi")]
		Mi,
		[EnumMember(Value = "nmi")]
		Nmi,
		[EnumMember(Value = "km")]
		Km,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "cm")]
		Cm,
		[EnumMember(Value = "mm")]
		Mm
	}

	public enum GeoDistanceType
	{
		[EnumMember(Value = "arc")]
		Arc,
		[EnumMember(Value = "plane")]
		Plane
	}

	public enum GeoShapeRelation
	{
		[EnumMember(Value = "intersects")]
		Intersects,
		[EnumMember(Value = "disjoint")]
		Disjoint,
		[EnumMember(Value = "within")]
		Within,
		[EnumMember(Value = "contains")]
		Contains
	}

	public enum ShapeRelation
	{
		[EnumMember(Value = "intersects")]
		Intersects,
		[EnumMember(Value = "disjoint")]
		Disjoint,
		[EnumMember(Value = "within")]
		Within
	}
}