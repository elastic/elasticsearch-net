// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System.Runtime.Serialization;

namespace Nest
{
    public enum AcknowledgementState
    {
        [EnumMember(Value = "awaits_successful_execution")]
        AwaitsSuccessfulExecution,
        [EnumMember(Value = "ackable")]
        Ackable,
        [EnumMember(Value = "acked")]
        Acked
    }

    public enum ActionExecutionMode
    {
        [EnumMember(Value = "simulate")]
        Simulate,
        [EnumMember(Value = "force_simulate")]
        ForceSimulate,
        [EnumMember(Value = "execute")]
        Execute,
        [EnumMember(Value = "force_execute")]
        ForceExecute,
        [EnumMember(Value = "skip")]
        Skip
    }

    public enum ActionExecutionState
    {
        [EnumMember(Value = "awaits_execution")]
        AwaitsExecution,
        [EnumMember(Value = "checking")]
        Checking,
        [EnumMember(Value = "execution_not_needed")]
        ExecutionNotNeeded,
        [EnumMember(Value = "throttled")]
        Throttled,
        [EnumMember(Value = "executed")]
        Executed,
        [EnumMember(Value = "failed")]
        Failed,
        [EnumMember(Value = "deleted_while_queued")]
        DeletedWhileQueued,
        [EnumMember(Value = "not_executed_already_queued")]
        NotExecutedAlreadyQueued
    }

    public enum ActionType
    {
        [EnumMember(Value = "email")]
        Email,
        [EnumMember(Value = "webhook")]
        Webhook,
        [EnumMember(Value = "index")]
        Index,
        [EnumMember(Value = "logging")]
        Logging,
        [EnumMember(Value = "slack")]
        Slack,
        [EnumMember(Value = "pagerduty")]
        Pagerduty
    }

    public enum ConditionType
    {
        [EnumMember(Value = "always")]
        Always,
        [EnumMember(Value = "never")]
        Never,
        [EnumMember(Value = "script")]
        Script,
        [EnumMember(Value = "compare")]
        Compare,
        [EnumMember(Value = "array_compare")]
        ArrayCompare
    }

    public enum ConnectionScheme
    {
        [EnumMember(Value = "http")]
        Http,
        [EnumMember(Value = "https")]
        Https
    }

    public enum Day
    {
        [EnumMember(Value = "sunday")]
        Sunday,
        [EnumMember(Value = "monday")]
        Monday,
        [EnumMember(Value = "tuesday")]
        Tuesday,
        [EnumMember(Value = "wednesday")]
        Wednesday,
        [EnumMember(Value = "thursday")]
        Thursday,
        [EnumMember(Value = "friday")]
        Friday,
        [EnumMember(Value = "saturday")]
        Saturday
    }

    public enum EmailPriority
    {
        [EnumMember(Value = "lowest")]
        Lowest,
        [EnumMember(Value = "low")]
        Low,
        [EnumMember(Value = "normal")]
        Normal,
        [EnumMember(Value = "high")]
        High,
        [EnumMember(Value = "highest")]
        Highest
    }

    public enum ExecutionPhase
    {
        [EnumMember(Value = "awaits_execution")]
        AwaitsExecution,
        [EnumMember(Value = "started")]
        Started,
        [EnumMember(Value = "input")]
        Input,
        [EnumMember(Value = "condition")]
        Condition,
        [EnumMember(Value = "actions")]
        Actions,
        [EnumMember(Value = "watch_transform")]
        WatchTransform,
        [EnumMember(Value = "aborted")]
        Aborted,
        [EnumMember(Value = "finished")]
        Finished
    }

    public enum HttpInputMethod
    {
        [EnumMember(Value = "head")]
        Head,
        [EnumMember(Value = "get")]
        Get,
        [EnumMember(Value = "post")]
        Post,
        [EnumMember(Value = "put")]
        Put,
        [EnumMember(Value = "delete")]
        Delete
    }

    public enum InputType
    {
        [EnumMember(Value = "http")]
        Http,
        [EnumMember(Value = "search")]
        Search,
        [EnumMember(Value = "simple")]
        Simple
    }

    public enum IntervalUnit
    {
        [EnumMember(Value = "s")]
        s,
        [EnumMember(Value = "m")]
        m,
        [EnumMember(Value = "h")]
        h,
        [EnumMember(Value = "d")]
        d,
        [EnumMember(Value = "w")]
        w
    }

    public enum Month
    {
        [EnumMember(Value = "january")]
        January,
        [EnumMember(Value = "february")]
        February,
        [EnumMember(Value = "march")]
        March,
        [EnumMember(Value = "april")]
        April,
        [EnumMember(Value = "may")]
        May,
        [EnumMember(Value = "june")]
        June,
        [EnumMember(Value = "july")]
        July,
        [EnumMember(Value = "august")]
        August,
        [EnumMember(Value = "september")]
        September,
        [EnumMember(Value = "october")]
        October,
        [EnumMember(Value = "november")]
        November,
        [EnumMember(Value = "december")]
        December
    }

    public enum PagerDutyContextType
    {
        [EnumMember(Value = "link")]
        Link,
        [EnumMember(Value = "image")]
        Image
    }

    public enum PagerDutyEventType
    {
        [EnumMember(Value = "trigger")]
        Trigger,
        [EnumMember(Value = "resolve")]
        Resolve,
        [EnumMember(Value = "acknowledge")]
        Acknowledge
    }

    public enum Quantifier
    {
        [EnumMember(Value = "some")]
        Some,
        [EnumMember(Value = "all")]
        All
    }

    public enum ResponseContentType
    {
        [EnumMember(Value = "json")]
        Json,
        [EnumMember(Value = "yaml")]
        Yaml,
        [EnumMember(Value = "text")]
        Text
    }

    public enum Status
    {
        [EnumMember(Value = "success")]
        Success,
        [EnumMember(Value = "failure")]
        Failure,
        [EnumMember(Value = "simulated")]
        Simulated,
        [EnumMember(Value = "throttled")]
        Throttled
    }

    public enum WatcherState
    {
        [EnumMember(Value = "stopped")]
        Stopped,
        [EnumMember(Value = "starting")]
        Starting,
        [EnumMember(Value = "started")]
        Started,
        [EnumMember(Value = "stopping")]
        Stopping
    }
}