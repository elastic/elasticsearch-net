// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;

namespace Nest
{
	[MapsApi("indices.put_index_template.json")]
	public partial interface IPutIndexTemplateV2Request
	{
		[DataMember(Name = "index_patterns")]
		IEnumerable<string> IndexPatterns { get; set; }

		[DataMember(Name = "composed_of")]
		IEnumerable<string> ComposedOf { get; set; }

		[DataMember(Name = "template")]
		ITemplate Template { get; set; }

		[DataMember(Name = "data_stream")]
		DataStream DataStream { get; set; }

		[DataMember(Name = "priority")]
		int? Priority { get; set; }

		[DataMember(Name = "version")]
		long? Version { get; set; }

		/// <summary>
		/// Optional user metadata about the component template. May have any contents.
		/// This map is not automatically generated by Elasticsearch.
		/// </summary>
		[DataMember(Name = "_meta")]
		IDictionary<string, object> Meta { get; set; }
	}

	public partial class PutIndexTemplateV2Request
	{
		public IEnumerable<string> IndexPatterns { get; set; }
		
		public IEnumerable<string> ComposedOf { get; set; }
		
		public ITemplate Template { get; set; }
		
		public DataStream DataStream { get; set; }
		
		public int? Priority { get; set; }
		
		public long? Version { get; set; }

		/// <inheritdoc cref="IPutIndexTemplateV2Request.Meta"/>
		public IDictionary<string, object> Meta { get; set; }
	}

	public partial class PutIndexTemplateV2Descriptor
	{
		IEnumerable<string> IPutIndexTemplateV2Request.IndexPatterns { get; set; }
		IEnumerable<string> IPutIndexTemplateV2Request.ComposedOf { get; set; }
		ITemplate IPutIndexTemplateV2Request.Template { get; set; }
		DataStream IPutIndexTemplateV2Request.DataStream { get; set; }
		int? IPutIndexTemplateV2Request.Priority { get; set; }
		long? IPutIndexTemplateV2Request.Version { get; set; }
		IDictionary<string, object> IPutIndexTemplateV2Request.Meta { get; set; }

		public PutIndexTemplateV2Descriptor IndexPatterns(params string[] patterns) => Assign(patterns, (a, v) => a.IndexPatterns = v);

		public PutIndexTemplateV2Descriptor IndexPatterns(IEnumerable<string> patterns) => Assign(patterns?.ToArray(), (a, v) => a.IndexPatterns = v);

		public PutIndexTemplateV2Descriptor ComposedOf(params string[] composedOf) => Assign(composedOf, (a, v) => a.ComposedOf = v);

		public PutIndexTemplateV2Descriptor ComposedOf(IEnumerable<string> composedOf) => Assign(composedOf?.ToArray(), (a, v) => a.ComposedOf = v);

		public PutIndexTemplateV2Descriptor Template(Func<TemplateDescriptor, ITemplate> selector) =>
			Assign(selector?.Invoke(new TemplateDescriptor()), (a, v) => a.Template = v);

		public PutIndexTemplateV2Descriptor DataStream(DataStream dataStream) => Assign(dataStream, (a, v) => a.DataStream = v);

		public PutIndexTemplateV2Descriptor Priority(int? priority) => Assign(priority, (a, v) => a.Priority = v);

		public PutIndexTemplateV2Descriptor Version(long? version) => Assign(version, (a, v) => a.Version = v);

		/// <inheritdoc cref="IPutIndexTemplateV2Request.Meta"/>
		public PutIndexTemplateV2Descriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector) =>
			Assign(selector, (a, v) => a.Meta = v?.Invoke(new FluentDictionary<string, object>()));
	}

	public class DataStream
	{
		[DataMember(Name = "hidden")]
		public bool? Hidden { get; set; }
	}
}
