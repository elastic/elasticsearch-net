// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Nest
{
	/// <summary>
	/// Creates a component template
	/// <para />
	/// Available in Elasticsearch 7.8.0+
	/// </summary>
	[MapsApi("cluster.put_component_template.json")]
	public partial interface IPutComponentTemplateRequest
	{
		/// <summary>
		/// The template to be applied
		/// </summary>
		[DataMember(Name = "template")]
		ITemplate Template { get; set; }

		/// <summary>
		/// Version number used to manage component templates externally. This number is not
		/// automatically generated or incremented by Elasticsearch.
		/// </summary>
		[DataMember(Name = "version")]
		long? Version { get; set; }

		/// <summary>
		/// Optional user metadata about the component template. May have any contents.
		/// This map is not automatically generated by Elasticsearch.
		/// </summary>
		[DataMember(Name = "_meta")]
		IDictionary<string, object> Meta { get; set; }
	}

	/// <inheritdoc cref="IPutComponentTemplateRequest"/>
	public partial class PutComponentTemplateRequest
	{
		/// <inheritdoc cref="IPutComponentTemplateRequest.Template"/>
		public ITemplate Template { get; set; }

		/// <inheritdoc cref="IPutComponentTemplateRequest.Version"/>
		public long? Version { get; set; }

		/// <inheritdoc cref="IPutComponentTemplateRequest.Meta"/>
		public IDictionary<string, object> Meta { get; set; }
	}

	/// <inheritdoc cref="IPutComponentTemplateRequest"/>
	public partial class PutComponentTemplateDescriptor
	{
		ITemplate IPutComponentTemplateRequest.Template { get; set; }
		long? IPutComponentTemplateRequest.Version { get; set; }
		IDictionary<string, object> IPutComponentTemplateRequest.Meta { get; set; }

		/// <inheritdoc cref="IPutComponentTemplateRequest.Template"/>
		public PutComponentTemplateDescriptor Template(Func<TemplateDescriptor, ITemplate> selector) =>
			Assign(selector?.Invoke(new TemplateDescriptor()), (a, v) => a.Template = v);

		/// <inheritdoc cref="IPutComponentTemplateRequest.Version"/>
		public PutComponentTemplateDescriptor Version(long? version) =>
			Assign(version, (a, v) => a.Version = v);

		/// <inheritdoc cref="IPutComponentTemplateRequest.Meta"/>
		public PutComponentTemplateDescriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector) =>
			Assign(selector, (a, v) => a.Meta = v?.Invoke(new FluentDictionary<string, object>()));
	}
}
