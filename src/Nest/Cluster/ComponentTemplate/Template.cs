// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Elasticsearch.Net.Utf8Json;

namespace Nest
{
	/// <summary>
	/// A component template with a name
	/// </summary>
	[DataContract]
	public class NamedComponentTemplate
	{
		/// <summary>
		/// The name of the template
		/// </summary>
		[DataMember(Name = "name")]
		public string Name { get; internal set; }

		/// <summary>
		/// The template
		/// </summary>
		[DataMember(Name = "component_template")]
		public ComponentTemplate ComponentTemplate { get; internal set; }
	}

	/// <summary>
	/// A component template
	/// </summary>
	[DataContract]
	public class ComponentTemplate
	{
		/// <summary>
		/// The template to be applied
		/// </summary>
		[DataMember(Name = "template")]
		public ITemplate Template { get; set; }

		/// <summary>
		/// Version number used to manage component templates externally.
		/// This number is not automatically generated or incremented by Elasticsearch.
		/// </summary>
		[DataMember(Name = "version")]
		public long? Version { get; set; }

		/// <summary>
		/// Optional user metadata about the component template. May have any contents.
		/// This map is not automatically generated by Elasticsearch.
		/// </summary>
		[DataMember(Name = "_meta")]
		public IReadOnlyDictionary<string, object> Meta { get; set; }
	}

	/// <summary>
	/// A template consists of optional settings, mappings, or alias configuration for an index, however,
	/// it is entirely independent from an index. It's a building block forming part of a regular index
	/// template.
	/// </summary>
	[InterfaceDataContract]
	[ReadAs(typeof(Template))]
	public interface ITemplate
	{
		/// <summary>
		/// Aliases configuration
		/// </summary>
		[DataMember(Name = "aliases")]
		IAliases Aliases { get; set; }

		/// <summary>
		/// Mappings configuration
		/// </summary>
		[DataMember(Name = "mappings")]
		ITypeMapping Mappings { get; set; }

		/// <summary>
		/// Settings configuration
		/// </summary>
		[DataMember(Name = "settings")]
		IIndexSettings Settings { get; set; }
	}

	[DataContract]
	/// <inheritdoc />
	public class Template : ITemplate
	{
		/// <inheritdoc />
		public IAliases Aliases { get; set; }

		/// <inheritdoc />
		public ITypeMapping Mappings { get; set; }

		/// <inheritdoc />
		public IIndexSettings Settings { get; set; }
	}

	/// <inheritdoc cref="ITemplate" />
	public class TemplateDescriptor : DescriptorBase<TemplateDescriptor, ITemplate>, ITemplate
	{
		IAliases ITemplate.Aliases { get; set; }
		ITypeMapping ITemplate.Mappings { get; set; }
		IIndexSettings ITemplate.Settings { get; set; }

		/// <inheritdoc cref="ITemplate.Settings" />
		public TemplateDescriptor Settings(Func<IndexSettingsDescriptor, IPromise<IIndexSettings>> selector) =>
			Assign(selector, (a, v) => a.Settings = v?.Invoke(new IndexSettingsDescriptor())?.Value);

		/// <inheritdoc cref="ITemplate.Mappings" />
		public TemplateDescriptor Mappings<T>(Func<TypeMappingDescriptor<T>, ITypeMapping> selector) where T : class =>
			Assign(selector, (a, v) => a.Mappings = v?.Invoke(new TypeMappingDescriptor<T>()));

		/// <inheritdoc cref="ITemplate.Mappings" />
		public TemplateDescriptor Mappings(Func<TypeMappingDescriptor<object>, ITypeMapping> selector) =>
			Assign(selector, (a, v) => a.Mappings = v?.Invoke(new TypeMappingDescriptor<object>()));

		/// <inheritdoc cref="ITemplate.Aliases" />
		public TemplateDescriptor Aliases(Func<AliasesDescriptor, IPromise<IAliases>> selector) =>
			Assign(selector, (a, v) => a.Aliases = v?.Invoke(new AliasesDescriptor())?.Value);
	}
}
