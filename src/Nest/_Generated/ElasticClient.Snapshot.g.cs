// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Snapshot
{
	public class SnapshotNamespace : NamespacedClientProxy
	{
		internal SnapshotNamespace(ElasticClient client) : base(client)
		{
		}

		public CleanupRepositoryResponse CleanupRepository(ICleanupRepositoryRequest request) => DoRequest<ICleanupRepositoryRequest, CleanupRepositoryResponse>(request, request.RequestParameters);
		public Task<CleanupRepositoryResponse> CleanupRepositoryAsync(ICleanupRepositoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICleanupRepositoryRequest, CleanupRepositoryResponse>(request, request.RequestParameters, cancellationToken);
		public CleanupRepositoryResponse CleanupRepository(Nest.Name repository, Func<CleanupRepositoryDescriptor, ICleanupRepositoryRequest> selector = null) => CleanupRepository(selector.InvokeOrDefault(new CleanupRepositoryDescriptor(repository)));
		public Task<CleanupRepositoryResponse> CleanupRepositoryAsync(Nest.Name repository, Func<CleanupRepositoryDescriptor, ICleanupRepositoryRequest> selector = null, CancellationToken cancellationToken = default) => CleanupRepositoryAsync(selector.InvokeOrDefault(new CleanupRepositoryDescriptor(repository)), cancellationToken);
		public CloneResponse Clone(ICloneRequest request) => DoRequest<ICloneRequest, CloneResponse>(request, request.RequestParameters);
		public Task<CloneResponse> CloneAsync(ICloneRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICloneRequest, CloneResponse>(request, request.RequestParameters, cancellationToken);
		public CloneResponse Clone(Nest.Name repository, Nest.Name snapshot, Nest.Name target_snapshot, Func<CloneDescriptor, ICloneRequest> selector = null) => Clone(selector.InvokeOrDefault(new CloneDescriptor(repository, snapshot, target_snapshot)));
		public Task<CloneResponse> CloneAsync(Nest.Name repository, Nest.Name snapshot, Nest.Name target_snapshot, Func<CloneDescriptor, ICloneRequest> selector = null, CancellationToken cancellationToken = default) => CloneAsync(selector.InvokeOrDefault(new CloneDescriptor(repository, snapshot, target_snapshot)), cancellationToken);
		public CreateResponse Create(ICreateRequest request) => DoRequest<ICreateRequest, CreateResponse>(request, request.RequestParameters);
		public Task<CreateResponse> CreateAsync(ICreateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateRequest, CreateResponse>(request, request.RequestParameters, cancellationToken);
		public CreateResponse Create(Nest.Name repository, Nest.Name snapshot, Func<CreateDescriptor, ICreateRequest> selector = null) => Create(selector.InvokeOrDefault(new CreateDescriptor(repository, snapshot)));
		public Task<CreateResponse> CreateAsync(Nest.Name repository, Nest.Name snapshot, Func<CreateDescriptor, ICreateRequest> selector = null, CancellationToken cancellationToken = default) => CreateAsync(selector.InvokeOrDefault(new CreateDescriptor(repository, snapshot)), cancellationToken);
		public CreateRepositoryResponse CreateRepository(ICreateRepositoryRequest request) => DoRequest<ICreateRepositoryRequest, CreateRepositoryResponse>(request, request.RequestParameters);
		public Task<CreateRepositoryResponse> CreateRepositoryAsync(ICreateRepositoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateRepositoryRequest, CreateRepositoryResponse>(request, request.RequestParameters, cancellationToken);
		public CreateRepositoryResponse CreateRepository(Nest.Name repository, Func<CreateRepositoryDescriptor, ICreateRepositoryRequest> selector = null) => CreateRepository(selector.InvokeOrDefault(new CreateRepositoryDescriptor(repository)));
		public Task<CreateRepositoryResponse> CreateRepositoryAsync(Nest.Name repository, Func<CreateRepositoryDescriptor, ICreateRepositoryRequest> selector = null, CancellationToken cancellationToken = default) => CreateRepositoryAsync(selector.InvokeOrDefault(new CreateRepositoryDescriptor(repository)), cancellationToken);
		public DeleteResponse Delete(IDeleteRequest request) => DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteResponse Delete(Nest.Name repository, Nest.Name snapshot, Func<DeleteDescriptor, IDeleteRequest> selector = null) => Delete(selector.InvokeOrDefault(new DeleteDescriptor(repository, snapshot)));
		public Task<DeleteResponse> DeleteAsync(Nest.Name repository, Nest.Name snapshot, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(repository, snapshot)), cancellationToken);
		public DeleteRepositoryResponse DeleteRepository(IDeleteRepositoryRequest request) => DoRequest<IDeleteRepositoryRequest, DeleteRepositoryResponse>(request, request.RequestParameters);
		public Task<DeleteRepositoryResponse> DeleteRepositoryAsync(IDeleteRepositoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRepositoryRequest, DeleteRepositoryResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteRepositoryResponse DeleteRepository(Nest.Names repository, Func<DeleteRepositoryDescriptor, IDeleteRepositoryRequest> selector = null) => DeleteRepository(selector.InvokeOrDefault(new DeleteRepositoryDescriptor(repository)));
		public Task<DeleteRepositoryResponse> DeleteRepositoryAsync(Nest.Names repository, Func<DeleteRepositoryDescriptor, IDeleteRepositoryRequest> selector = null, CancellationToken cancellationToken = default) => DeleteRepositoryAsync(selector.InvokeOrDefault(new DeleteRepositoryDescriptor(repository)), cancellationToken);
		public GetResponse Get(IGetRequest request) => DoRequest<IGetRequest, GetResponse>(request, request.RequestParameters);
		public Task<GetResponse> GetAsync(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse>(request, request.RequestParameters, cancellationToken);
		public GetResponse Get(Nest.Name repository, Nest.Names snapshot, Func<GetDescriptor, IGetRequest> selector = null) => Get(selector.InvokeOrDefault(new GetDescriptor(repository, snapshot)));
		public Task<GetResponse> GetAsync(Nest.Name repository, Nest.Names snapshot, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync(selector.InvokeOrDefault(new GetDescriptor(repository, snapshot)), cancellationToken);
		public GetRepositoryResponse GetRepository(IGetRepositoryRequest request) => DoRequest<IGetRepositoryRequest, GetRepositoryResponse>(request, request.RequestParameters);
		public Task<GetRepositoryResponse> GetRepositoryAsync(IGetRepositoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRepositoryRequest, GetRepositoryResponse>(request, request.RequestParameters, cancellationToken);
		public GetRepositoryResponse GetRepository(Func<GetRepositoryDescriptor, IGetRepositoryRequest> selector = null) => GetRepository(selector.InvokeOrDefault(new GetRepositoryDescriptor()));
		public Task<GetRepositoryResponse> GetRepositoryAsync(Func<GetRepositoryDescriptor, IGetRepositoryRequest> selector = null, CancellationToken cancellationToken = default) => GetRepositoryAsync(selector.InvokeOrDefault(new GetRepositoryDescriptor()), cancellationToken);
		public RestoreResponse Restore(IRestoreRequest request) => DoRequest<IRestoreRequest, RestoreResponse>(request, request.RequestParameters);
		public Task<RestoreResponse> RestoreAsync(IRestoreRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRestoreRequest, RestoreResponse>(request, request.RequestParameters, cancellationToken);
		public RestoreResponse Restore(Nest.Name repository, Nest.Name snapshot, Func<RestoreDescriptor, IRestoreRequest> selector = null) => Restore(selector.InvokeOrDefault(new RestoreDescriptor(repository, snapshot)));
		public Task<RestoreResponse> RestoreAsync(Nest.Name repository, Nest.Name snapshot, Func<RestoreDescriptor, IRestoreRequest> selector = null, CancellationToken cancellationToken = default) => RestoreAsync(selector.InvokeOrDefault(new RestoreDescriptor(repository, snapshot)), cancellationToken);
		public StatusResponse Status(IStatusRequest request) => DoRequest<IStatusRequest, StatusResponse>(request, request.RequestParameters);
		public Task<StatusResponse> StatusAsync(IStatusRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStatusRequest, StatusResponse>(request, request.RequestParameters, cancellationToken);
		public StatusResponse Status(Func<StatusDescriptor, IStatusRequest> selector = null) => Status(selector.InvokeOrDefault(new StatusDescriptor()));
		public Task<StatusResponse> StatusAsync(Func<StatusDescriptor, IStatusRequest> selector = null, CancellationToken cancellationToken = default) => StatusAsync(selector.InvokeOrDefault(new StatusDescriptor()), cancellationToken);
		public VerifyRepositoryResponse VerifyRepository(IVerifyRepositoryRequest request) => DoRequest<IVerifyRepositoryRequest, VerifyRepositoryResponse>(request, request.RequestParameters);
		public Task<VerifyRepositoryResponse> VerifyRepositoryAsync(IVerifyRepositoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IVerifyRepositoryRequest, VerifyRepositoryResponse>(request, request.RequestParameters, cancellationToken);
		public VerifyRepositoryResponse VerifyRepository(Nest.Name repository, Func<VerifyRepositoryDescriptor, IVerifyRepositoryRequest> selector = null) => VerifyRepository(selector.InvokeOrDefault(new VerifyRepositoryDescriptor(repository)));
		public Task<VerifyRepositoryResponse> VerifyRepositoryAsync(Nest.Name repository, Func<VerifyRepositoryDescriptor, IVerifyRepositoryRequest> selector = null, CancellationToken cancellationToken = default) => VerifyRepositoryAsync(selector.InvokeOrDefault(new VerifyRepositoryDescriptor(repository)), cancellationToken);
	}
}