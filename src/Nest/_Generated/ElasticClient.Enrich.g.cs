// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Enrich
{
	public class EnrichNamespace : NamespacedClientProxy
	{
		internal EnrichNamespace(ElasticClient client) : base(client)
		{
		}

		public DeletePolicyResponse DeletePolicy(IDeletePolicyRequest request)
		{
			return DoRequest<IDeletePolicyRequest, DeletePolicyResponse>(request, request.RequestParameters);
		}

		public Task<DeletePolicyResponse> DeletePolicyAsync(IDeletePolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeletePolicyRequest, DeletePolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeletePolicyResponse DeletePolicy(Nest.Name name, Func<DeletePolicyDescriptor, IDeletePolicyRequest> selector = null)
		{
			return DeletePolicy(selector.InvokeOrDefault(new DeletePolicyDescriptor(name)));
		}

		public Task<DeletePolicyResponse> DeletePolicyAsync(Nest.Name name, Func<DeletePolicyDescriptor, IDeletePolicyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeletePolicyAsync(selector.InvokeOrDefault(new DeletePolicyDescriptor(name)), cancellationToken);
		}

		public ExecutePolicyResponse ExecutePolicy(IExecutePolicyRequest request)
		{
			return DoRequest<IExecutePolicyRequest, ExecutePolicyResponse>(request, request.RequestParameters);
		}

		public Task<ExecutePolicyResponse> ExecutePolicyAsync(IExecutePolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExecutePolicyRequest, ExecutePolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExecutePolicyResponse ExecutePolicy(Nest.Name name, Func<ExecutePolicyDescriptor, IExecutePolicyRequest> selector = null)
		{
			return ExecutePolicy(selector.InvokeOrDefault(new ExecutePolicyDescriptor(name)));
		}

		public Task<ExecutePolicyResponse> ExecutePolicyAsync(Nest.Name name, Func<ExecutePolicyDescriptor, IExecutePolicyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExecutePolicyAsync(selector.InvokeOrDefault(new ExecutePolicyDescriptor(name)), cancellationToken);
		}

		public GetPolicyResponse GetPolicy(IGetPolicyRequest request)
		{
			return DoRequest<IGetPolicyRequest, GetPolicyResponse>(request, request.RequestParameters);
		}

		public Task<GetPolicyResponse> GetPolicyAsync(IGetPolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetPolicyRequest, GetPolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetPolicyResponse GetPolicy(Func<GetPolicyDescriptor, IGetPolicyRequest> selector = null)
		{
			return GetPolicy(selector.InvokeOrDefault(new GetPolicyDescriptor()));
		}

		public Task<GetPolicyResponse> GetPolicyAsync(Func<GetPolicyDescriptor, IGetPolicyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetPolicyAsync(selector.InvokeOrDefault(new GetPolicyDescriptor()), cancellationToken);
		}

		public PutPolicyResponse PutPolicy(IPutPolicyRequest request)
		{
			return DoRequest<IPutPolicyRequest, PutPolicyResponse>(request, request.RequestParameters);
		}

		public Task<PutPolicyResponse> PutPolicyAsync(IPutPolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutPolicyRequest, PutPolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutPolicyResponse PutPolicy(Nest.Name name, Func<PutPolicyDescriptor, IPutPolicyRequest> selector = null)
		{
			return PutPolicy(selector.InvokeOrDefault(new PutPolicyDescriptor(name)));
		}

		public Task<PutPolicyResponse> PutPolicyAsync(Nest.Name name, Func<PutPolicyDescriptor, IPutPolicyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutPolicyAsync(selector.InvokeOrDefault(new PutPolicyDescriptor(name)), cancellationToken);
		}

		public StatsResponse Stats(IStatsRequest request)
		{
			return DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		}

		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null)
		{
			return Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		}

		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
		}
	}
}