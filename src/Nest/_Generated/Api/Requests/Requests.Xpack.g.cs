// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Xpack
{
	[ConvertAs(typeof(InfoRequest))]
	public partial interface IInfoRequest : IRequest<InfoRequestParameters>
	{
	}

	public partial class InfoRequest : PlainRequestBase<InfoRequestParameters>, IInfoRequest
	{
		protected IInfoRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.XpackInfo;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_xpack</summary>
        public InfoRequest() : base()
		{
		}

		[JsonIgnore]
		public IEnumerable<string>? Categories { get => Q<IEnumerable<string>?>("categories"); set => Q("categories", value); }
	}

	[ConvertAs(typeof(UsageRequest))]
	public partial interface IUsageRequest : IRequest<UsageRequestParameters>
	{
	}

	public partial class UsageRequest : PlainRequestBase<UsageRequestParameters>, IUsageRequest
	{
		protected IUsageRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.XpackUsage;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_xpack/usage</summary>
        public UsageRequest() : base()
		{
		}

		[JsonIgnore]
		public Nest.Time? MasterTimeout { get => Q<Nest.Time?>("master_timeout"); set => Q("master_timeout", value); }
	}
}