// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using Elastic.Transport;

#nullable restore
namespace Nest
{
    public interface IBulkRequest : IRequest<BulkRequestParameters>
    {
    }

    public class BulkRequest : PlainRequestBase<BulkRequestParameters>, IBulkRequest
    {
        protected IBulkRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceBulk;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/_bulk</summary>
        public BulkRequest(): base()
        {
        }

        ///<summary>/{index}/_bulk</summary>
        public BulkRequest(IndexName index): base(r => r.Optional("index", index))
        {
        }

        ///<summary>/{index}/{type}/_bulk</summary>
        public BulkRequest(IndexName index, Name type): base(r => r.Optional("index", index).Optional("type", type))
        {
        }

        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? Source { get => Q<bool?>("_source"); set => Q("_source", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public string? TypeQueryString { get => Q<string?>("type_query_string"); set => Q("type_query_string", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }
    }

    public interface IClearScrollRequest : IRequest<ClearScrollRequestParameters>
    {
    }

    public class ClearScrollRequest : PlainRequestBase<ClearScrollRequestParameters>, IClearScrollRequest
    {
        protected IClearScrollRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceClearScroll;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_search/scroll</summary>
        public ClearScrollRequest(): base()
        {
        }
    }

    public interface ICountRequest : IRequest<CountRequestParameters>
    {
    }

    public class CountRequest : PlainRequestBase<CountRequestParameters>, ICountRequest
    {
        protected ICountRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceCount;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_count</summary>
        public CountRequest(): base()
        {
        }

        ///<summary>/{index}/_count</summary>
        public CountRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        public double? MinScore { get => Q<double?>("min_score"); set => Q("min_score", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }
    }

    public interface ICreateRequest : IRequest<CreateRequestParameters>
    {
    }

    public class CreateRequest : PlainRequestBase<CreateRequestParameters>, ICreateRequest
    {
        protected ICreateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceCreate;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_create/{id}</summary>
        public CreateRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
    }

    public interface IDeleteRequest : IRequest<DeleteRequestParameters>
    {
    }

    public class DeleteRequest : PlainRequestBase<DeleteRequestParameters>, IDeleteRequest
    {
        protected IDeleteRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDelete;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_doc/{id}</summary>
        public DeleteRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

        public long? IfSeqNo { get => Q<long?>("if_seq_no"); set => Q("if_seq_no", value); }

        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
    }

    public interface IDeleteByQueryRequest : IRequest<DeleteByQueryRequestParameters>
    {
    }

    public class DeleteByQueryRequest : PlainRequestBase<DeleteByQueryRequestParameters>, IDeleteByQueryRequest
    {
        protected IDeleteByQueryRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteByQuery;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_delete_by_query</summary>
        public DeleteByQueryRequest(Indices index): base(r => r.Required("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        public Conflicts? Conflicts { get => Q<Conflicts?>("conflicts"); set => Q("conflicts", value); }

        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public long? From { get => Q<long?>("from"); set => Q("from", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        public long? ScrollSize { get => Q<long?>("scroll_size"); set => Q("scroll_size", value); }

        public Time? SearchTimeout { get => Q<Time?>("search_timeout"); set => Q("search_timeout", value); }

        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        public long? Size { get => Q<long?>("size"); set => Q("size", value); }

        public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
    }

    public interface IDeleteByQueryRethrottleRequest : IRequest<DeleteByQueryRethrottleRequestParameters>
    {
    }

    public class DeleteByQueryRethrottleRequest : PlainRequestBase<DeleteByQueryRethrottleRequestParameters>, IDeleteByQueryRethrottleRequest
    {
        protected IDeleteByQueryRethrottleRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteByQueryRethrottle;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_delete_by_query/{task_id}/_rethrottle</summary>
        public DeleteByQueryRethrottleRequest(Id taskId): base(r => r.Required("task_id", taskId))
        {
        }

        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }
    }

    public interface IDeleteScriptRequest : IRequest<DeleteScriptRequestParameters>
    {
    }

    public class DeleteScriptRequest : PlainRequestBase<DeleteScriptRequestParameters>, IDeleteScriptRequest
    {
        protected IDeleteScriptRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteScript;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_scripts/{id}</summary>
        public DeleteScriptRequest(Id id): base(r => r.Required("id", id))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IDocumentExistsRequest : IRequest<DocumentExistsRequestParameters>
    {
    }

    public class DocumentExistsRequest : PlainRequestBase<DocumentExistsRequestParameters>, IDocumentExistsRequest
    {
        protected IDocumentExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExists;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_doc/{id}</summary>
        public DocumentExistsRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface ISourceExistsRequest : IRequest<SourceExistsRequestParameters>
    {
    }

    public class SourceExistsRequest : PlainRequestBase<SourceExistsRequestParameters>, ISourceExistsRequest
    {
        protected ISourceExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExistsSource;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_source/{id}</summary>
        public SourceExistsRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface IExplainRequest : IRequest<ExplainRequestParameters>
    {
    }

    public class ExplainRequest : PlainRequestBase<ExplainRequestParameters>, IExplainRequest
    {
        protected IExplainRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExplain;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_explain/{id}</summary>
        public ExplainRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }
    }

    public interface IFieldCapabilitiesRequest : IRequest<FieldCapabilitiesRequestParameters>
    {
    }

    public class FieldCapabilitiesRequest : PlainRequestBase<FieldCapabilitiesRequestParameters>, IFieldCapabilitiesRequest
    {
        protected IFieldCapabilitiesRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceFieldCaps;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_field_caps</summary>
        public FieldCapabilitiesRequest(): base()
        {
        }

        ///<summary>/{index}/_field_caps</summary>
        public FieldCapabilitiesRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? IncludeUnmapped { get => Q<bool?>("include_unmapped"); set => Q("include_unmapped", value); }
    }

    public interface IGetRequest : IRequest<GetRequestParameters>
    {
    }

    public class GetRequest : PlainRequestBase<GetRequestParameters>, IGetRequest
    {
        protected IGetRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGet;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_doc/{id}</summary>
        public GetRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface IGetScriptRequest : IRequest<GetScriptRequestParameters>
    {
    }

    public class GetScriptRequest : PlainRequestBase<GetScriptRequestParameters>, IGetScriptRequest
    {
        protected IGetScriptRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGetScript;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_scripts/{id}</summary>
        public GetScriptRequest(Id id): base(r => r.Required("id", id))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
    }

    public interface ISourceRequest : IRequest<SourceRequestParameters>
    {
    }

    public class SourceRequest : PlainRequestBase<SourceRequestParameters>, ISourceRequest
    {
        protected ISourceRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGetSource;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_source/{id}</summary>
        public SourceRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface IIndexRequest : IRequest<IndexRequestParameters>
    {
    }

    public class IndexRequest : PlainRequestBase<IndexRequestParameters>, IIndexRequest
    {
        protected IIndexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceIndex;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_doc/{id}</summary>
        public IndexRequest(IndexName index, Id id): base(r => r.Required("index", index).Optional("id", id))
        {
        }

        ///<summary>/{index}/_doc</summary>
        public IndexRequest(IndexName index): base(r => r.Required("index", index))
        {
        }

        public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

        public long? IfSeqNo { get => Q<long?>("if_seq_no"); set => Q("if_seq_no", value); }

        public OpType? OpType { get => Q<OpType?>("op_type"); set => Q("op_type", value); }

        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }
    }

    public interface IRootNodeInfoRequest : IRequest<RootNodeInfoRequestParameters>
    {
    }

    public class RootNodeInfoRequest : PlainRequestBase<RootNodeInfoRequestParameters>, IRootNodeInfoRequest
    {
        protected IRootNodeInfoRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceInfo;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/</summary>
        public RootNodeInfoRequest(): base()
        {
        }
    }

    public interface IMultiGetRequest : IRequest<MultiGetRequestParameters>
    {
    }

    public class MultiGetRequest : PlainRequestBase<MultiGetRequestParameters>, IMultiGetRequest
    {
        protected IMultiGetRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMget;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_mget</summary>
        public MultiGetRequest(): base()
        {
        }

        ///<summary>/{index}/_mget</summary>
        public MultiGetRequest(IndexName index): base(r => r.Optional("index", index))
        {
        }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }
    }

    public interface IMultiSearchRequest : IRequest<MultiSearchRequestParameters>
    {
    }

    public class MultiSearchRequest : PlainRequestBase<MultiSearchRequestParameters>, IMultiSearchRequest
    {
        protected IMultiSearchRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMsearch;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_msearch</summary>
        public MultiSearchRequest(): base()
        {
        }

        ///<summary>/{index}/_msearch</summary>
        public MultiSearchRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

        public long? MaxConcurrentSearches { get => Q<long?>("max_concurrent_searches"); set => Q("max_concurrent_searches", value); }

        public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

        public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }

        public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }
    }

    public interface IMultiTermVectorsRequest : IRequest<MultiTermVectorsRequestParameters>
    {
    }

    public class MultiTermVectorsRequest : PlainRequestBase<MultiTermVectorsRequestParameters>, IMultiTermVectorsRequest
    {
        protected IMultiTermVectorsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMtermvectors;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_mtermvectors</summary>
        public MultiTermVectorsRequest(): base()
        {
        }

        ///<summary>/{index}/_mtermvectors</summary>
        public MultiTermVectorsRequest(IndexName index): base(r => r.Optional("index", index))
        {
        }

        public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

        public bool? FieldStatistics { get => Q<bool?>("field_statistics"); set => Q("field_statistics", value); }

        public bool? Offsets { get => Q<bool?>("offsets"); set => Q("offsets", value); }

        public bool? Payloads { get => Q<bool?>("payloads"); set => Q("payloads", value); }

        public bool? Positions { get => Q<bool?>("positions"); set => Q("positions", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? TermStatistics { get => Q<bool?>("term_statistics"); set => Q("term_statistics", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface IPingRequest : IRequest<PingRequestParameters>
    {
    }

    public class PingRequest : PlainRequestBase<PingRequestParameters>, IPingRequest
    {
        protected IPingRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespacePing;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
        ///<summary>/</summary>
        public PingRequest(): base()
        {
        }
    }

    public interface IPutScriptRequest : IRequest<PutScriptRequestParameters>
    {
    }

    public class PutScriptRequest : PlainRequestBase<PutScriptRequestParameters>, IPutScriptRequest
    {
        protected IPutScriptRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespacePutScript;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/_scripts/{id}</summary>
        public PutScriptRequest(Id id): base(r => r.Required("id", id))
        {
        }

        ///<summary>/_scripts/{id}/{context}</summary>
        public PutScriptRequest(Id id, Name context): base(r => r.Required("id", id).Optional("context", context))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IReindexRequest : IRequest<ReindexRequestParameters>
    {
    }

    public class ReindexRequest : PlainRequestBase<ReindexRequestParameters>, IReindexRequest
    {
        protected IReindexRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceReindex;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_reindex</summary>
        public ReindexRequest(): base()
        {
        }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }
    }

    public interface IReindexRethrottleRequest : IRequest<ReindexRethrottleRequestParameters>
    {
    }

    public class ReindexRethrottleRequest : PlainRequestBase<ReindexRethrottleRequestParameters>, IReindexRethrottleRequest
    {
        protected IReindexRethrottleRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceReindexRethrottle;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_reindex/{task_id}/_rethrottle</summary>
        public ReindexRethrottleRequest(Id taskId): base(r => r.Required("task_id", taskId))
        {
        }

        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }
    }

    public interface IRenderSearchTemplateRequest : IRequest<RenderSearchTemplateRequestParameters>
    {
    }

    public class RenderSearchTemplateRequest : PlainRequestBase<RenderSearchTemplateRequestParameters>, IRenderSearchTemplateRequest
    {
        protected IRenderSearchTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceRenderSearchTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_render/template</summary>
        public RenderSearchTemplateRequest(): base()
        {
        }

        ///<summary>/_render/template/{id}</summary>
        public RenderSearchTemplateRequest(Id id): base(r => r)
        {
        }
    }

    public interface IExecutePainlessScriptRequest : IRequest<ExecutePainlessScriptRequestParameters>
    {
    }

    public class ExecutePainlessScriptRequest : PlainRequestBase<ExecutePainlessScriptRequestParameters>, IExecutePainlessScriptRequest
    {
        protected IExecutePainlessScriptRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScriptsPainlessExecute;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_scripts/painless/_execute</summary>
        public ExecutePainlessScriptRequest(): base()
        {
        }
    }

    public interface IScrollRequest : IRequest<ScrollRequestParameters>
    {
    }

    public class ScrollRequest : PlainRequestBase<ScrollRequestParameters>, IScrollRequest
    {
        protected IScrollRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScroll;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_search/scroll</summary>
        public ScrollRequest(): base()
        {
        }

        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        public ScrollId? ScrollId { get => Q<ScrollId?>("scroll_id"); set => Q("scroll_id", value); }

        public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

        public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }
    }

    public interface ISearchRequest : IRequest<SearchRequestParameters>
    {
    }

    public class SearchRequest : PlainRequestBase<SearchRequestParameters>, ISearchRequest
    {
        protected ISearchRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_search</summary>
        public SearchRequest(): base()
        {
        }

        ///<summary>/{index}/_search</summary>
        public SearchRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public bool? AllowPartialSearchResults { get => Q<bool?>("allow_partial_search_results"); set => Q("allow_partial_search_results", value); }

        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

        public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        public Fields? DocvalueFields { get => Q<Fields?>("docvalue_fields"); set => Q("docvalue_fields", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        public bool? SequenceNumberPrimaryTerm { get => Q<bool?>("sequence_number_primary_term"); set => Q("sequence_number_primary_term", value); }

        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        public Field? SuggestField { get => Q<Field?>("suggest_field"); set => Q("suggest_field", value); }

        public SuggestMode? SuggestMode { get => Q<SuggestMode?>("suggest_mode"); set => Q("suggest_mode", value); }

        public long? SuggestSize { get => Q<long?>("suggest_size"); set => Q("suggest_size", value); }

        public string? SuggestText { get => Q<string?>("suggest_text"); set => Q("suggest_text", value); }

        public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }

        public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }

        public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        public bool? SeqNoPrimaryTerm { get => Q<bool?>("seq_no_primary_term"); set => Q("seq_no_primary_term", value); }

        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

        public int? Size { get => Q<int?>("size"); set => Q("size", value); }

        public int? From { get => Q<int?>("from"); set => Q("from", value); }
    }

    public interface ISearchShardsRequest : IRequest<SearchShardsRequestParameters>
    {
    }

    public class SearchShardsRequest : PlainRequestBase<SearchShardsRequestParameters>, ISearchShardsRequest
    {
        protected ISearchShardsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearchShards;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_search_shards</summary>
        public SearchShardsRequest(): base()
        {
        }

        ///<summary>/{index}/_search_shards</summary>
        public SearchShardsRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }
    }

    public interface ITermVectorsRequest : IRequest<TermVectorsRequestParameters>
    {
    }

    public class TermVectorsRequest : PlainRequestBase<TermVectorsRequestParameters>, ITermVectorsRequest
    {
        protected ITermVectorsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceTermvectors;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_termvectors/{id}</summary>
        public TermVectorsRequest(IndexName index, Id id): base(r => r.Required("index", index).Optional("id", id))
        {
        }

        ///<summary>/{index}/_termvectors</summary>
        public TermVectorsRequest(IndexName index): base(r => r.Required("index", index))
        {
        }

        public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

        public bool? FieldStatistics { get => Q<bool?>("field_statistics"); set => Q("field_statistics", value); }

        public bool? Offsets { get => Q<bool?>("offsets"); set => Q("offsets", value); }

        public bool? Payloads { get => Q<bool?>("payloads"); set => Q("payloads", value); }

        public bool? Positions { get => Q<bool?>("positions"); set => Q("positions", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? TermStatistics { get => Q<bool?>("term_statistics"); set => Q("term_statistics", value); }

        public long? Version { get => Q<long?>("version"); set => Q("version", value); }

        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public interface IUpdateRequest : IRequest<UpdateRequestParameters>
    {
    }

    public class UpdateRequest : PlainRequestBase<UpdateRequestParameters>, IUpdateRequest
    {
        protected IUpdateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceUpdate;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_update/{id}</summary>
        public UpdateRequest(IndexName index, Id id): base(r => r.Required("index", index).Required("id", id))
        {
        }

        public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

        public long? IfSeqNo { get => Q<long?>("if_seq_no"); set => Q("if_seq_no", value); }

        public string? Lang { get => Q<string?>("lang"); set => Q("lang", value); }

        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }

        public long? RetryOnConflict { get => Q<long?>("retry_on_conflict"); set => Q("retry_on_conflict", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }
    }

    public interface IUpdateByQueryRequest : IRequest<UpdateByQueryRequestParameters>
    {
    }

    public class UpdateByQueryRequest : PlainRequestBase<UpdateByQueryRequestParameters>, IUpdateByQueryRequest
    {
        protected IUpdateByQueryRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceUpdateByQuery;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/{index}/_update_by_query</summary>
        public UpdateByQueryRequest(Indices index): base(r => r.Required("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        public Conflicts? Conflicts { get => Q<Conflicts?>("conflicts"); set => Q("conflicts", value); }

        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public long? From { get => Q<long?>("from"); set => Q("from", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        public long? ScrollSize { get => Q<long?>("scroll_size"); set => Q("scroll_size", value); }

        public Time? SearchTimeout { get => Q<Time?>("search_timeout"); set => Q("search_timeout", value); }

        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        public long? Size { get => Q<long?>("size"); set => Q("size", value); }

        public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

        public bool? VersionType { get => Q<bool?>("version_type"); set => Q("version_type", value); }

        public string? WaitForActiveShards { get => Q<string?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
    }
}