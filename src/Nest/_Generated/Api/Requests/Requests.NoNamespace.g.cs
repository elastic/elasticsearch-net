// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IClearScrollRequest, ClearScrollRequest>))]
	public interface IClearScrollRequest : IRequest<ClearScrollRequestParameters>
	{
	}

	public class ClearScrollRequest : PlainRequestBase<ClearScrollRequestParameters>, IClearScrollRequest
	{
		protected IClearScrollRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceClearScroll;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_search/scroll</summary>
        public ClearScrollRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IClosePointInTimeRequest, ClosePointInTimeRequest>))]
	public interface IClosePointInTimeRequest : IRequest<ClosePointInTimeRequestParameters>
	{
	}

	public class ClosePointInTimeRequest : PlainRequestBase<ClosePointInTimeRequestParameters>, IClosePointInTimeRequest
	{
		protected IClosePointInTimeRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceClosePointInTime;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_pit</summary>
        public ClosePointInTimeRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ICountRequest, CountRequest>))]
	public interface ICountRequest : IRequest<CountRequestParameters>
	{
	}

	public class CountRequest : PlainRequestBase<CountRequestParameters>, ICountRequest
	{
		protected ICountRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceCount;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Query is null;
		///<summary>/_count</summary>
        public CountRequest() : base()
		{
		}

		///<summary>/{index}/_count</summary>
        public CountRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public double? MinScore { get => Q<double?>("min_score"); set => Q("min_score", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteRequest, DeleteRequest>))]
	public interface IDeleteRequest : IRequest<DeleteRequestParameters>
	{
	}

	public class DeleteRequest : PlainRequestBase<DeleteRequestParameters>, IDeleteRequest
	{
		protected IDeleteRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/{index}/_doc/{id}</summary>
        public DeleteRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

		[JsonIgnore]
		public long? IfSeqNo { get => Q<long?>("if_seq_no"); set => Q("if_seq_no", value); }

		[JsonIgnore]
		public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

		[JsonIgnore]
		public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteByQueryRequest, DeleteByQueryRequest>))]
	public interface IDeleteByQueryRequest : IRequest<DeleteByQueryRequestParameters>
	{
	}

	public class DeleteByQueryRequest : PlainRequestBase<DeleteByQueryRequestParameters>, IDeleteByQueryRequest
	{
		protected IDeleteByQueryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteByQuery;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Query is null && Slice is null;
		///<summary>/{index}/_delete_by_query</summary>
        public DeleteByQueryRequest(Indices index) : base(r => r.Required("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public Conflicts? Conflicts { get => Q<Conflicts?>("conflicts"); set => Q("conflicts", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public long? From { get => Q<long?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

		[JsonIgnore]
		public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public long? ScrollSize { get => Q<long?>("scroll_size"); set => Q("scroll_size", value); }

		[JsonIgnore]
		public Time? SearchTimeout { get => Q<Time?>("search_timeout"); set => Q("search_timeout", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public long? Size { get => Q<long?>("size"); set => Q("size", value); }

		[JsonIgnore]
		public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

		[JsonIgnore]
		public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("slice")]
		public SlicedScroll? Slice
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteByQueryRethrottleRequest, DeleteByQueryRethrottleRequest>))]
	public interface IDeleteByQueryRethrottleRequest : IRequest<DeleteByQueryRethrottleRequestParameters>
	{
	}

	public class DeleteByQueryRethrottleRequest : PlainRequestBase<DeleteByQueryRethrottleRequestParameters>, IDeleteByQueryRethrottleRequest
	{
		protected IDeleteByQueryRethrottleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteByQueryRethrottle;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_delete_by_query/{task_id}/_rethrottle</summary>
        public DeleteByQueryRethrottleRequest(Id taskId) : base(r => r.Required("task_id", taskId))
		{
		}

		[JsonIgnore]
		public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteScriptRequest, DeleteScriptRequest>))]
	public interface IDeleteScriptRequest : IRequest<DeleteScriptRequestParameters>
	{
	}

	public class DeleteScriptRequest : PlainRequestBase<DeleteScriptRequestParameters>, IDeleteScriptRequest
	{
		protected IDeleteScriptRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceDeleteScript;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_scripts/{id}</summary>
        public DeleteScriptRequest(Id id) : base(r => r.Required("id", id))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDocumentExistsRequest, DocumentExistsRequest>))]
	public interface IDocumentExistsRequest : IRequest<DocumentExistsRequestParameters>
	{
	}

	public class DocumentExistsRequest : PlainRequestBase<DocumentExistsRequestParameters>, IDocumentExistsRequest
	{
		protected IDocumentExistsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExists;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/{index}/_doc/{id}</summary>
        public DocumentExistsRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISourceExistsRequest, SourceExistsRequest>))]
	public interface ISourceExistsRequest : IRequest<SourceExistsRequestParameters>
	{
	}

	public class SourceExistsRequest : PlainRequestBase<SourceExistsRequestParameters>, ISourceExistsRequest
	{
		protected ISourceExistsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExistsSource;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/{index}/_source/{id}</summary>
        public SourceExistsRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IExplainRequest, ExplainRequest>))]
	public interface IExplainRequest : IRequest<ExplainRequestParameters>
	{
	}

	public class ExplainRequest : PlainRequestBase<ExplainRequestParameters>, IExplainRequest
	{
		protected IExplainRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceExplain;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Query is null;
		///<summary>/{index}/_explain/{id}</summary>
        public ExplainRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IFieldCapabilitiesRequest, FieldCapabilitiesRequest>))]
	public interface IFieldCapabilitiesRequest : IRequest<FieldCapabilitiesRequestParameters>
	{
	}

	public class FieldCapabilitiesRequest : PlainRequestBase<FieldCapabilitiesRequestParameters>, IFieldCapabilitiesRequest
	{
		protected IFieldCapabilitiesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceFieldCaps;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => IndexFilter is null;
		///<summary>/_field_caps</summary>
        public FieldCapabilitiesRequest() : base()
		{
		}

		///<summary>/{index}/_field_caps</summary>
        public FieldCapabilitiesRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? IncludeUnmapped { get => Q<bool?>("include_unmapped"); set => Q("include_unmapped", value); }

		[JsonPropertyName("index_filter")]
		public FieldCapabilitiesBodyIndexFilter? IndexFilter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetRequest, GetRequest>))]
	public interface IGetRequest : IRequest<GetRequestParameters>
	{
	}

	public class GetRequest : PlainRequestBase<GetRequestParameters>, IGetRequest
	{
		protected IGetRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/{index}/_doc/{id}</summary>
        public GetRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetScriptRequest, GetScriptRequest>))]
	public interface IGetScriptRequest : IRequest<GetScriptRequestParameters>
	{
	}

	public class GetScriptRequest : PlainRequestBase<GetScriptRequestParameters>, IGetScriptRequest
	{
		protected IGetScriptRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGetScript;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_scripts/{id}</summary>
        public GetScriptRequest(Id id) : base(r => r.Required("id", id))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISourceRequest, SourceRequest>))]
	public interface ISourceRequest : IRequest<SourceRequestParameters>
	{
	}

	public class SourceRequest : PlainRequestBase<SourceRequestParameters>, ISourceRequest
	{
		protected ISourceRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceGetSource;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/{index}/_source/{id}</summary>
        public SourceRequest(IndexName index, Id id) : base(r => r.Required("index", index).Required("id", id))
		{
		}

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IRootNodeInfoRequest, RootNodeInfoRequest>))]
	public interface IRootNodeInfoRequest : IRequest<RootNodeInfoRequestParameters>
	{
	}

	public class RootNodeInfoRequest : PlainRequestBase<RootNodeInfoRequestParameters>, IRootNodeInfoRequest
	{
		protected IRootNodeInfoRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceInfo;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/</summary>
        public RootNodeInfoRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IMultiGetRequest, MultiGetRequest>))]
	public interface IMultiGetRequest : IRequest<MultiGetRequestParameters>
	{
	}

	public class MultiGetRequest : PlainRequestBase<MultiGetRequestParameters>, IMultiGetRequest
	{
		protected IMultiGetRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMget;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_mget</summary>
        public MultiGetRequest() : base()
		{
		}

		///<summary>/{index}/_mget</summary>
        public MultiGetRequest(IndexName index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IMultiSearchRequest, MultiSearchRequest>))]
	public interface IMultiSearchRequest : IRequest<MultiSearchRequestParameters>
	{
	}

	public class MultiSearchRequest : PlainRequestBase<MultiSearchRequestParameters>, IMultiSearchRequest
	{
		protected IMultiSearchRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMsearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_msearch</summary>
        public MultiSearchRequest() : base()
		{
		}

		///<summary>/{index}/_msearch</summary>
        public MultiSearchRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

		[JsonIgnore]
		public long? MaxConcurrentSearches { get => Q<long?>("max_concurrent_searches"); set => Q("max_concurrent_searches", value); }

		[JsonIgnore]
		public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

		[JsonIgnore]
		public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }

		[JsonIgnore]
		public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IMultiSearchTemplateRequest, MultiSearchTemplateRequest>))]
	public interface IMultiSearchTemplateRequest : IRequest<MultiSearchTemplateRequestParameters>
	{
	}

	public class MultiSearchTemplateRequest : PlainRequestBase<MultiSearchTemplateRequestParameters>, IMultiSearchTemplateRequest
	{
		protected IMultiSearchTemplateRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMsearchTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_msearch/template</summary>
        public MultiSearchTemplateRequest() : base()
		{
		}

		///<summary>/{index}/_msearch/template</summary>
        public MultiSearchTemplateRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

		[JsonIgnore]
		public long? MaxConcurrentSearches { get => Q<long?>("max_concurrent_searches"); set => Q("max_concurrent_searches", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }

		[JsonIgnore]
		public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IMultiTermVectorsRequest, MultiTermVectorsRequest>))]
	public interface IMultiTermVectorsRequest : IRequest<MultiTermVectorsRequestParameters>
	{
	}

	public class MultiTermVectorsRequest : PlainRequestBase<MultiTermVectorsRequestParameters>, IMultiTermVectorsRequest
	{
		protected IMultiTermVectorsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceMtermvectors;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_mtermvectors</summary>
        public MultiTermVectorsRequest() : base()
		{
		}

		///<summary>/{index}/_mtermvectors</summary>
        public MultiTermVectorsRequest(IndexName index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

		[JsonIgnore]
		public bool? FieldStatistics { get => Q<bool?>("field_statistics"); set => Q("field_statistics", value); }

		[JsonIgnore]
		public bool? Offsets { get => Q<bool?>("offsets"); set => Q("offsets", value); }

		[JsonIgnore]
		public bool? Payloads { get => Q<bool?>("payloads"); set => Q("payloads", value); }

		[JsonIgnore]
		public bool? Positions { get => Q<bool?>("positions"); set => Q("positions", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public bool? TermStatistics { get => Q<bool?>("term_statistics"); set => Q("term_statistics", value); }

		[JsonIgnore]
		public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IOpenPointInTimeRequest, OpenPointInTimeRequest>))]
	public interface IOpenPointInTimeRequest : IRequest<OpenPointInTimeRequestParameters>
	{
	}

	public class OpenPointInTimeRequest : PlainRequestBase<OpenPointInTimeRequestParameters>, IOpenPointInTimeRequest
	{
		protected IOpenPointInTimeRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceOpenPointInTime;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_pit</summary>
        public OpenPointInTimeRequest() : base()
		{
		}

		///<summary>/{index}/_pit</summary>
        public OpenPointInTimeRequest(Indices index) : base(r => r.Required("index", index))
		{
		}

		[JsonIgnore]
		public Time? KeepAlive { get => Q<Time?>("keep_alive"); set => Q("keep_alive", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPingRequest, PingRequest>))]
	public interface IPingRequest : IRequest<PingRequestParameters>
	{
	}

	public class PingRequest : PlainRequestBase<PingRequestParameters>, IPingRequest
	{
		protected IPingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespacePing;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/</summary>
        public PingRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPutScriptRequest, PutScriptRequest>))]
	public interface IPutScriptRequest : IRequest<PutScriptRequestParameters>
	{
	}

	public class PutScriptRequest : PlainRequestBase<PutScriptRequestParameters>, IPutScriptRequest
	{
		protected IPutScriptRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespacePutScript;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Script is null;
		///<summary>/_scripts/{id}</summary>
        public PutScriptRequest(Id id) : base(r => r.Required("id", id))
		{
		}

		///<summary>/_scripts/{id}/{context}</summary>
        public PutScriptRequest(Id id, Name context) : base(r => r.Required("id", id).Optional("context", context))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonPropertyName("script")]
		public StoredScript? Script
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IReindexRequest, ReindexRequest>))]
	public interface IReindexRequest : IRequest<ReindexRequestParameters>
	{
	}

	public class ReindexRequest : PlainRequestBase<ReindexRequestParameters>, IReindexRequest
	{
		protected IReindexRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceReindex;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Conflicts is null && Dest is null && Source is null;
		///<summary>/_reindex</summary>
        public ReindexRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

		[JsonIgnore]
		public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }

		[JsonPropertyName("conflicts")]
		public Conflicts? Conflicts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dest")]
		public ReindexDestination? Dest
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public ReindexSource? Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IReindexRethrottleRequest, ReindexRethrottleRequest>))]
	public interface IReindexRethrottleRequest : IRequest<ReindexRethrottleRequestParameters>
	{
	}

	public class ReindexRethrottleRequest : PlainRequestBase<ReindexRethrottleRequestParameters>, IReindexRethrottleRequest
	{
		protected IReindexRethrottleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceReindexRethrottle;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_reindex/{task_id}/_rethrottle</summary>
        public ReindexRethrottleRequest(Id taskId) : base(r => r.Required("task_id", taskId))
		{
		}

		[JsonIgnore]
		public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IRenderSearchTemplateRequest, RenderSearchTemplateRequest>))]
	public interface IRenderSearchTemplateRequest : IRequest<RenderSearchTemplateRequestParameters>
	{
	}

	public class RenderSearchTemplateRequest : PlainRequestBase<RenderSearchTemplateRequestParameters>, IRenderSearchTemplateRequest
	{
		protected IRenderSearchTemplateRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceRenderSearchTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => File is null && Source is null;
		///<summary>/_render/template</summary>
        public RenderSearchTemplateRequest() : base()
		{
		}

		///<summary>/_render/template/{id}</summary>
        public RenderSearchTemplateRequest(Id id) : base(r => r)
		{
		}

		[JsonPropertyName("file")]
		public string? File
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string? Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IExecutePainlessScriptRequest, ExecutePainlessScriptRequest>))]
	public interface IExecutePainlessScriptRequest : IRequest<ExecutePainlessScriptRequestParameters>
	{
	}

	public class ExecutePainlessScriptRequest : PlainRequestBase<ExecutePainlessScriptRequestParameters>, IExecutePainlessScriptRequest
	{
		protected IExecutePainlessScriptRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScriptsPainlessExecute;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Context is null && ContextSetup is null && Script is null;
		///<summary>/_scripts/painless/_execute</summary>
        public ExecutePainlessScriptRequest() : base()
		{
		}

		[JsonPropertyName("context")]
		public string? Context
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("context_setup")]
		public PainlessContextSetup? ContextSetup
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public InlineScript? Script
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IScrollRequest, ScrollRequest>))]
	public interface IScrollRequest : IRequest<ScrollRequestParameters>
	{
	}

	public class ScrollRequest : PlainRequestBase<ScrollRequestParameters>, IScrollRequest
	{
		protected IScrollRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScroll;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_search/scroll</summary>
        public ScrollRequest() : base()
		{
		}

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public ScrollId? ScrollId { get => Q<ScrollId?>("scroll_id"); set => Q("scroll_id", value); }

		[JsonIgnore]
		public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

		[JsonIgnore]
		public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISearchRequest, SearchRequest>))]
	public interface ISearchRequest : IRequest<SearchRequestParameters>
	{
	}

	public class SearchRequest : PlainRequestBase<SearchRequestParameters>, ISearchRequest
	{
		protected ISearchRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Collapse is null && Explain is null && Highlight is null && IndicesBoost is null && PostFilter is null && Profile is null && Query is null && SearchAfter is null && Slice is null && Fields is null && Timeout is null && TrackScores is null && Version is null && Pit is null;
		///<summary>/_search</summary>
        public SearchRequest() : base()
		{
		}

		///<summary>/{index}/_search</summary>
        public SearchRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public bool? AllowPartialSearchResults { get => Q<bool?>("allow_partial_search_results"); set => Q("allow_partial_search_results", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

		[JsonIgnore]
		public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public Fields? DocvalueFields { get => Q<Fields?>("docvalue_fields"); set => Q("docvalue_fields", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

		[JsonIgnore]
		public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

		[JsonIgnore]
		public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public bool? SequenceNumberPrimaryTerm { get => Q<bool?>("sequence_number_primary_term"); set => Q("sequence_number_primary_term", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public Field? SuggestField { get => Q<Field?>("suggest_field"); set => Q("suggest_field", value); }

		[JsonIgnore]
		public SuggestMode? SuggestMode { get => Q<SuggestMode?>("suggest_mode"); set => Q("suggest_mode", value); }

		[JsonIgnore]
		public long? SuggestSize { get => Q<long?>("suggest_size"); set => Q("suggest_size", value); }

		[JsonIgnore]
		public string? SuggestText { get => Q<string?>("suggest_text"); set => Q("suggest_text", value); }

		[JsonIgnore]
		public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }

		[JsonIgnore]
		public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }

		[JsonIgnore]
		public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public bool? SeqNoPrimaryTerm { get => Q<bool?>("seq_no_primary_term"); set => Q("seq_no_primary_term", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }

		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonPropertyName("collapse")]
		public FieldCollapse? Collapse
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explain")]
		public bool? Explain
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlight")]
		public Highlight? Highlight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indices_boost")]
		public Array? IndicesBoost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_filter")]
		public QueryContainer? PostFilter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("profile")]
		public bool? Profile
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_after")]
		public Array? SearchAfter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("slice")]
		public SlicedScroll? Slice
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Array? Fields
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timeout")]
		public string? Timeout
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("track_scores")]
		public bool? TrackScores
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public bool? Version
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pit")]
		public PointInTimeReference? Pit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISearchShardsRequest, SearchShardsRequest>))]
	public interface ISearchShardsRequest : IRequest<SearchShardsRequestParameters>
	{
	}

	public class SearchShardsRequest : PlainRequestBase<SearchShardsRequestParameters>, ISearchShardsRequest
	{
		protected ISearchShardsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearchShards;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_search_shards</summary>
        public SearchShardsRequest() : base()
		{
		}

		///<summary>/{index}/_search_shards</summary>
        public SearchShardsRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IUpdateByQueryRequest, UpdateByQueryRequest>))]
	public interface IUpdateByQueryRequest : IRequest<UpdateByQueryRequestParameters>
	{
	}

	public class UpdateByQueryRequest : PlainRequestBase<UpdateByQueryRequestParameters>, IUpdateByQueryRequest
	{
		protected IUpdateByQueryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceUpdateByQuery;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Query is null && Slice is null;
		///<summary>/{index}/_update_by_query</summary>
        public UpdateByQueryRequest(Indices index) : base(r => r.Required("index", index))
		{
		}

		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public Conflicts? Conflicts { get => Q<Conflicts?>("conflicts"); set => Q("conflicts", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public long? From { get => Q<long?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

		[JsonIgnore]
		public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

		[JsonIgnore]
		public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

		[JsonIgnore]
		public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

		[JsonIgnore]
		public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public long? ScrollSize { get => Q<long?>("scroll_size"); set => Q("scroll_size", value); }

		[JsonIgnore]
		public Time? SearchTimeout { get => Q<Time?>("search_timeout"); set => Q("search_timeout", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public long? Size { get => Q<long?>("size"); set => Q("size", value); }

		[JsonIgnore]
		public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

		[JsonIgnore]
		public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

		[JsonIgnore]
		public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public bool? VersionType { get => Q<bool?>("version_type"); set => Q("version_type", value); }

		[JsonIgnore]
		public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("slice")]
		public SlicedScroll? Slice
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}
}