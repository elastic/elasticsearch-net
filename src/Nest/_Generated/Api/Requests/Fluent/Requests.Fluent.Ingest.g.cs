// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest.Ingest
{
	public partial class DeletePipelineDescriptor : RequestDescriptorBase<DeletePipelineDescriptor, DeletePipelineRequestParameters, IDeletePipelineRequest>, IDeletePipelineRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestDeletePipeline;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/pipeline/{id}</summary>
        public DeletePipelineDescriptor(Nest.Id id) : base(r => r.Required("id", id))
		{
		}

		public DeletePipelineDescriptor MasterTimeout(Nest.Time? masterTimeout) => Qs("master_timeout", masterTimeout);
		public DeletePipelineDescriptor Timeout(Nest.Time? timeout) => Qs("timeout", timeout);
	}

	public partial class GeoIpStatsDescriptor : RequestDescriptorBase<GeoIpStatsDescriptor, GeoIpStatsRequestParameters, IGeoIpStatsRequest>, IGeoIpStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestGeoIpStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/geoip/stats</summary>
        public GeoIpStatsDescriptor() : base()
		{
		}
	}

	public partial class GetPipelineDescriptor : RequestDescriptorBase<GetPipelineDescriptor, GetPipelineRequestParameters, IGetPipelineRequest>, IGetPipelineRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestGetPipeline;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/pipeline</summary>
        public GetPipelineDescriptor() : base()
		{
		}

		///<summary>/_ingest/pipeline/{id}</summary>
        public GetPipelineDescriptor(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		public GetPipelineDescriptor MasterTimeout(Nest.Time? masterTimeout) => Qs("master_timeout", masterTimeout);
		public GetPipelineDescriptor Summary(bool? summary = true) => Qs("summary", summary);
	}

	public partial class ProcessorGrokDescriptor : RequestDescriptorBase<ProcessorGrokDescriptor, ProcessorGrokRequestParameters, IProcessorGrokRequest>, IProcessorGrokRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestProcessorGrok;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/processor/grok</summary>
        public ProcessorGrokDescriptor() : base()
		{
		}
	}

	public partial class PutPipelineDescriptor : RequestDescriptorBase<PutPipelineDescriptor, PutPipelineRequestParameters, IPutPipelineRequest>, IPutPipelineRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestPutPipeline;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/pipeline/{id}</summary>
        public PutPipelineDescriptor(Nest.Id id) : base(r => r.Required("id", id))
		{
		}

		Nest.Metadata? IPutPipelineRequest.Meta { get; set; }

		string? IPutPipelineRequest.Description { get; set; }

		IEnumerable<Nest.Ingest.ProcessorContainer>? IPutPipelineRequest.OnFailure { get; set; }

		IEnumerable<Nest.Ingest.ProcessorContainer>? IPutPipelineRequest.Processors { get; set; }

		Nest.VersionNumber? IPutPipelineRequest.Version { get; set; }

		public PutPipelineDescriptor MasterTimeout(Nest.Time? masterTimeout) => Qs("master_timeout", masterTimeout);
		public PutPipelineDescriptor Timeout(Nest.Time? timeout) => Qs("timeout", timeout);
		public PutPipelineDescriptor Meta(Nest.Metadata? meta) => Assign(meta, (a, v) => a.Meta = v);
		public PutPipelineDescriptor Description(string? description) => Assign(description, (a, v) => a.Description = v);
		public PutPipelineDescriptor OnFailure(IEnumerable<Nest.Ingest.ProcessorContainer>? onFailure) => Assign(onFailure, (a, v) => a.OnFailure = v);
		public PutPipelineDescriptor Processors(IEnumerable<Nest.Ingest.ProcessorContainer>? processors) => Assign(processors, (a, v) => a.Processors = v);
		public PutPipelineDescriptor Version(Nest.VersionNumber? version) => Assign(version, (a, v) => a.Version = v);
	}

	public partial class SimulateDescriptor : RequestDescriptorBase<SimulateDescriptor, SimulateRequestParameters, ISimulateRequest>, ISimulateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestSimulate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_ingest/pipeline/_simulate</summary>
        public SimulateDescriptor() : base()
		{
		}

		///<summary>/_ingest/pipeline/{id}/_simulate</summary>
        public SimulateDescriptor(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		IEnumerable<Nest.Ingest.Simulate.Document>? ISimulateRequest.Docs { get; set; }

		Nest.Ingest.Pipeline? ISimulateRequest.Pipeline { get; set; }

		public SimulateDescriptor Verbose(bool? verbose = true) => Qs("verbose", verbose);
		public SimulateDescriptor Docs(IEnumerable<Nest.Ingest.Simulate.Document>? docs) => Assign(docs, (a, v) => a.Docs = v);
		public SimulateDescriptor Pipeline(Nest.Ingest.Pipeline? pipeline) => Assign(pipeline, (a, v) => a.Pipeline = v);
	}
}