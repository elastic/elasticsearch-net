// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport;

#nullable restore
namespace Nest.Nodes
{
	public partial class HotThreadsDescriptor : RequestDescriptorBase<HotThreadsDescriptor, HotThreadsRequestParameters, IHotThreadsRequest>, IHotThreadsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesHotThreads;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_nodes/hot_threads</summary>
        public HotThreadsDescriptor() : base()
		{
		}

		///<summary>/_nodes/{node_id}/hot_threads</summary>
        public HotThreadsDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}
	}

	public partial class InfoDescriptor : RequestDescriptorBase<InfoDescriptor, InfoRequestParameters, IInfoRequest>, IInfoRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesInfo;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_nodes</summary>
        public InfoDescriptor() : base()
		{
		}

		///<summary>/_nodes/{node_id}</summary>
        public InfoDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}

		///<summary>/_nodes/{metric}</summary>
        public InfoDescriptor(Nest.Metrics? metric) : base(r => r.Optional("metric", metric))
		{
		}

		///<summary>/_nodes/{node_id}/{metric}</summary>
        public InfoDescriptor(Nest.NodeIds? node_id, Nest.Metrics? metric) : base(r => r.Optional("node_id", node_id).Optional("metric", metric))
		{
		}
	}

	public partial class ReloadSecureSettingsDescriptor : RequestDescriptorBase<ReloadSecureSettingsDescriptor, ReloadSecureSettingsRequestParameters, IReloadSecureSettingsRequest>, IReloadSecureSettingsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesReloadSecureSettings;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_nodes/reload_secure_settings</summary>
        public ReloadSecureSettingsDescriptor() : base()
		{
		}

		///<summary>/_nodes/{node_id}/reload_secure_settings</summary>
        public ReloadSecureSettingsDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}
	}

	public partial class StatsDescriptor : RequestDescriptorBase<StatsDescriptor, StatsRequestParameters, IStatsRequest>, IStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_nodes/stats</summary>
        public StatsDescriptor() : base()
		{
		}

		///<summary>/_nodes/{node_id}/stats</summary>
        public StatsDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}

		///<summary>/_nodes/stats/{metric}</summary>
        public StatsDescriptor(Nest.Metrics? metric) : base(r => r.Optional("metric", metric))
		{
		}

		///<summary>/_nodes/{node_id}/stats/{metric}</summary>
        public StatsDescriptor(Nest.NodeIds? node_id, Nest.Metrics? metric) : base(r => r.Optional("node_id", node_id).Optional("metric", metric))
		{
		}

		///<summary>/_nodes/stats/{metric}/{index_metric}</summary>
        public StatsDescriptor(Nest.Metrics? metric, Nest.Metrics? index_metric) : base(r => r.Optional("metric", metric).Optional("index_metric", index_metric))
		{
		}

		///<summary>/_nodes/{node_id}/stats/{metric}/{index_metric}</summary>
        public StatsDescriptor(Nest.NodeIds? node_id, Nest.Metrics? metric, Nest.Metrics? index_metric) : base(r => r.Optional("node_id", node_id).Optional("metric", metric).Optional("index_metric", index_metric))
		{
		}
	}

	public partial class UsageDescriptor : RequestDescriptorBase<UsageDescriptor, UsageRequestParameters, IUsageRequest>, IUsageRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NodesUsage;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_nodes/usage</summary>
        public UsageDescriptor() : base()
		{
		}

		///<summary>/_nodes/{node_id}/usage</summary>
        public UsageDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}

		///<summary>/_nodes/usage/{metric}</summary>
        public UsageDescriptor(Nest.Metrics? metric) : base(r => r.Optional("metric", metric))
		{
		}

		///<summary>/_nodes/{node_id}/usage/{metric}</summary>
        public UsageDescriptor(Nest.NodeIds? node_id, Nest.Metrics? metric) : base(r => r.Optional("node_id", node_id).Optional("metric", metric))
		{
		}
	}
}