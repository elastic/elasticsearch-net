// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;

#nullable restore
namespace Nest.Ssl
{
	public partial class AuthenticateDescriptor : RequestDescriptorBase<AuthenticateDescriptor, AuthenticateRequestParameters, IAuthenticateRequest>, IAuthenticateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityAuthenticate;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/_authenticate</summary>
        public AuthenticateDescriptor() : base()
		{
		}
	}

	public partial class ChangePasswordDescriptor : RequestDescriptorBase<ChangePasswordDescriptor, ChangePasswordRequestParameters, IChangePasswordRequest>, IChangePasswordRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityChangePassword;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_password</summary>
        public ChangePasswordDescriptor(Nest.Username? username) : base(r => r.Optional("username", username))
		{
		}

		///<summary>/_security/user/_password</summary>
        public ChangePasswordDescriptor() : base()
		{
		}
	}

	public partial class ClearApiKeyCacheDescriptor : RequestDescriptorBase<ClearApiKeyCacheDescriptor, ClearApiKeyCacheRequestParameters, IClearApiKeyCacheRequest>, IClearApiKeyCacheRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearApiKeyCache;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key/{ids}/_clear_cache</summary>
        public ClearApiKeyCacheDescriptor(Nest.Ids? ids) : base(r => r.Optional("ids", ids))
		{
		}
	}

	public partial class ClearCachedPrivilegesDescriptor : RequestDescriptorBase<ClearCachedPrivilegesDescriptor, ClearCachedPrivilegesRequestParameters, IClearCachedPrivilegesRequest>, IClearCachedPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/{application}/_clear_cache</summary>
        public ClearCachedPrivilegesDescriptor(Nest.Name application) : base(r => r.Required("application", application))
		{
		}
	}

	public partial class ClearCachedRealmsDescriptor : RequestDescriptorBase<ClearCachedRealmsDescriptor, ClearCachedRealmsRequestParameters, IClearCachedRealmsRequest>, IClearCachedRealmsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRealms;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/realm/{realms}/_clear_cache</summary>
        public ClearCachedRealmsDescriptor(Nest.Names realms) : base(r => r.Required("realms", realms))
		{
		}
	}

	public partial class ClearCachedRolesDescriptor : RequestDescriptorBase<ClearCachedRolesDescriptor, ClearCachedRolesRequestParameters, IClearCachedRolesRequest>, IClearCachedRolesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRoles;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}/_clear_cache</summary>
        public ClearCachedRolesDescriptor(Nest.Names name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class ClearCachedServiceTokensDescriptor : RequestDescriptorBase<ClearCachedServiceTokensDescriptor, ClearCachedServiceTokensRequestParameters, IClearCachedServiceTokensRequest>, IClearCachedServiceTokensRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedServiceTokens;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}/_clear_cache</summary>
        public ClearCachedServiceTokensDescriptor(Nest.Namespace ns, Nest.Service service, Nest.Names name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}
	}

	public partial class CreateApiKeyDescriptor : RequestDescriptorBase<CreateApiKeyDescriptor, CreateApiKeyRequestParameters, ICreateApiKeyRequest>, ICreateApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public CreateApiKeyDescriptor() : base()
		{
		}
	}

	public partial class CreateServiceTokenDescriptor : RequestDescriptorBase<CreateServiceTokenDescriptor, CreateServiceTokenRequestParameters, ICreateServiceTokenRequest>, ICreateServiceTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public CreateServiceTokenDescriptor(Nest.Namespace ns, Nest.Service service, Nest.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}

		///<summary>/_security/service/{namespace}/{service}/credential/token</summary>
        public CreateServiceTokenDescriptor(Nest.Namespace ns, Nest.Service service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	public partial class DeletePrivilegesDescriptor : RequestDescriptorBase<DeletePrivilegesDescriptor, DeletePrivilegesRequestParameters, IDeletePrivilegesRequest>, IDeletePrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeletePrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/{application}/{name}</summary>
        public DeletePrivilegesDescriptor(Nest.Name application, Nest.Name name) : base(r => r.Required("application", application).Required("name", name))
		{
		}
	}

	public partial class DeleteRoleDescriptor : RequestDescriptorBase<DeleteRoleDescriptor, DeleteRoleRequestParameters, IDeleteRoleRequest>, IDeleteRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRole;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public DeleteRoleDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class DeleteRoleMappingDescriptor : RequestDescriptorBase<DeleteRoleMappingDescriptor, DeleteRoleMappingRequestParameters, IDeleteRoleMappingRequest>, IDeleteRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public DeleteRoleMappingDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class DeleteServiceTokenDescriptor : RequestDescriptorBase<DeleteServiceTokenDescriptor, DeleteServiceTokenRequestParameters, IDeleteServiceTokenRequest>, IDeleteServiceTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public DeleteServiceTokenDescriptor(Nest.Namespace ns, Nest.Service service, Nest.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}
	}

	public partial class DeleteUserDescriptor : RequestDescriptorBase<DeleteUserDescriptor, DeleteUserRequestParameters, IDeleteUserRequest>, IDeleteUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteUser;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}</summary>
        public DeleteUserDescriptor(Nest.Username username) : base(r => r.Required("username", username))
		{
		}
	}

	public partial class DisableUserDescriptor : RequestDescriptorBase<DisableUserDescriptor, DisableUserRequestParameters, IDisableUserRequest>, IDisableUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDisableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_disable</summary>
        public DisableUserDescriptor(Nest.Username username) : base(r => r.Required("username", username))
		{
		}
	}

	public partial class EnableUserDescriptor : RequestDescriptorBase<EnableUserDescriptor, EnableUserRequestParameters, IEnableUserRequest>, IEnableUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityEnableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_enable</summary>
        public EnableUserDescriptor(Nest.Username username) : base(r => r.Required("username", username))
		{
		}
	}

	public partial class GetApiKeyDescriptor : RequestDescriptorBase<GetApiKeyDescriptor, GetApiKeyRequestParameters, IGetApiKeyRequest>, IGetApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public GetApiKeyDescriptor() : base()
		{
		}
	}

	public partial class GetBuiltinPrivilegesDescriptor : RequestDescriptorBase<GetBuiltinPrivilegesDescriptor, GetBuiltinPrivilegesRequestParameters, IGetBuiltinPrivilegesRequest>, IGetBuiltinPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetBuiltinPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/_builtin</summary>
        public GetBuiltinPrivilegesDescriptor() : base()
		{
		}
	}

	public partial class GetPrivilegesDescriptor : RequestDescriptorBase<GetPrivilegesDescriptor, GetPrivilegesRequestParameters, IGetPrivilegesRequest>, IGetPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege</summary>
        public GetPrivilegesDescriptor() : base()
		{
		}

		///<summary>/_security/privilege/{application}</summary>
        public GetPrivilegesDescriptor(Nest.Name? application) : base(r => r.Optional("application", application))
		{
		}

		///<summary>/_security/privilege/{application}/{name}</summary>
        public GetPrivilegesDescriptor(Nest.Name? application, Nest.Name? name) : base(r => r.Optional("application", application).Optional("name", name))
		{
		}
	}

	public partial class GetRoleDescriptor : RequestDescriptorBase<GetRoleDescriptor, GetRoleRequestParameters, IGetRoleRequest>, IGetRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRole;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public GetRoleDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role</summary>
        public GetRoleDescriptor() : base()
		{
		}
	}

	public partial class GetRoleMappingDescriptor : RequestDescriptorBase<GetRoleMappingDescriptor, GetRoleMappingRequestParameters, IGetRoleMappingRequest>, IGetRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public GetRoleMappingDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role_mapping</summary>
        public GetRoleMappingDescriptor() : base()
		{
		}
	}

	public partial class GetServiceAccountsDescriptor : RequestDescriptorBase<GetServiceAccountsDescriptor, GetServiceAccountsRequestParameters, IGetServiceAccountsRequest>, IGetServiceAccountsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceAccounts;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}</summary>
        public GetServiceAccountsDescriptor(Nest.Namespace? ns, Nest.Service? service) : base(r => r.Optional("ns", ns).Optional("service", service))
		{
		}

		///<summary>/_security/service/{namespace}</summary>
        public GetServiceAccountsDescriptor(Nest.Namespace? ns) : base(r => r.Optional("ns", ns))
		{
		}

		///<summary>/_security/service</summary>
        public GetServiceAccountsDescriptor() : base()
		{
		}
	}

	public partial class GetServiceCredentialsDescriptor : RequestDescriptorBase<GetServiceCredentialsDescriptor, GetServiceCredentialsRequestParameters, IGetServiceCredentialsRequest>, IGetServiceCredentialsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceCredentials;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential</summary>
        public GetServiceCredentialsDescriptor(Nest.Namespace ns, Nest.Service service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	public partial class GetTokenDescriptor : RequestDescriptorBase<GetTokenDescriptor, GetTokenRequestParameters, IGetTokenRequest>, IGetTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetToken;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/oauth2/token</summary>
        public GetTokenDescriptor() : base()
		{
		}
	}

	public partial class GetUserDescriptor : RequestDescriptorBase<GetUserDescriptor, GetUserRequestParameters, IGetUserRequest>, IGetUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUser;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/user</summary>
        public GetUserDescriptor() : base()
		{
		}
	}

	public partial class GetUserPrivilegesDescriptor : RequestDescriptorBase<GetUserPrivilegesDescriptor, GetUserPrivilegesRequestParameters, IGetUserPrivilegesRequest>, IGetUserPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUserPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/_privileges</summary>
        public GetUserPrivilegesDescriptor() : base()
		{
		}
	}

	public partial class GrantApiKeyDescriptor : RequestDescriptorBase<GrantApiKeyDescriptor, GrantApiKeyRequestParameters, IGrantApiKeyRequest>, IGrantApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGrantApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key/grant</summary>
        public GrantApiKeyDescriptor() : base()
		{
		}
	}

	public partial class HasPrivilegesDescriptor : RequestDescriptorBase<HasPrivilegesDescriptor, HasPrivilegesRequestParameters, IHasPrivilegesRequest>, IHasPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityHasPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/_has_privileges</summary>
        public HasPrivilegesDescriptor() : base()
		{
		}

		///<summary>/_security/user/{user}/_has_privileges</summary>
        public HasPrivilegesDescriptor(Nest.Name? user) : base(r => r.Optional("user", user))
		{
		}
	}

	public partial class InvalidateApiKeyDescriptor : RequestDescriptorBase<InvalidateApiKeyDescriptor, InvalidateApiKeyRequestParameters, IInvalidateApiKeyRequest>, IInvalidateApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public InvalidateApiKeyDescriptor() : base()
		{
		}
	}

	public partial class InvalidateTokenDescriptor : RequestDescriptorBase<InvalidateTokenDescriptor, InvalidateTokenRequestParameters, IInvalidateTokenRequest>, IInvalidateTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/oauth2/token</summary>
        public InvalidateTokenDescriptor() : base()
		{
		}
	}

	public partial class PutPrivilegesDescriptor : RequestDescriptorBase<PutPrivilegesDescriptor, PutPrivilegesRequestParameters, IPutPrivilegesRequest>, IPutPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/</summary>
        public PutPrivilegesDescriptor() : base()
		{
		}
	}

	public partial class PutRoleDescriptor : RequestDescriptorBase<PutRoleDescriptor, PutRoleRequestParameters, IPutRoleRequest>, IPutRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRole;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public PutRoleDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class PutRoleMappingDescriptor : RequestDescriptorBase<PutRoleMappingDescriptor, PutRoleMappingRequestParameters, IPutRoleMappingRequest>, IPutRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public PutRoleMappingDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class PutUserDescriptor : RequestDescriptorBase<PutUserDescriptor, PutUserRequestParameters, IPutUserRequest>, IPutUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}</summary>
        public PutUserDescriptor(Nest.Username username) : base(r => r.Required("username", username))
		{
		}
	}

	public partial class CertificatesDescriptor : RequestDescriptorBase<CertificatesDescriptor, CertificatesRequestParameters, ICertificatesRequest>, ICertificatesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCertificates;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ssl/certificates</summary>
        public CertificatesDescriptor() : base()
		{
		}
	}
}