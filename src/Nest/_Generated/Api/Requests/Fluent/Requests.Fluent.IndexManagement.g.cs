// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;

#nullable restore
namespace Nest.IndexManagement
{
	public partial class AddBlockDescriptor : RequestDescriptorBase<AddBlockDescriptor, AddBlockRequestParameters, IAddBlockRequest>, IAddBlockRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAddBlock;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_block/{block}</summary>
        public AddBlockDescriptor(Nest.IndexName index, Nest.IndexManagement.AddBlock.IndicesBlockOptions block) : base(r => r.Required("index", index).Required("block", block))
		{
		}
	}

	public partial class AnalyzeDescriptor : RequestDescriptorBase<AnalyzeDescriptor, AnalyzeRequestParameters, IAnalyzeRequest>, IAnalyzeRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAnalyze;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_analyze</summary>
        public AnalyzeDescriptor() : base()
		{
		}

		///<summary>/{index}/_analyze</summary>
        public AnalyzeDescriptor(Nest.IndexName? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class ClearCacheDescriptor : RequestDescriptorBase<ClearCacheDescriptor, ClearCacheRequestParameters, IClearCacheRequest>, IClearCacheRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementClearCache;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_cache/clear</summary>
        public ClearCacheDescriptor() : base()
		{
		}

		///<summary>/{index}/_cache/clear</summary>
        public ClearCacheDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class CloneDescriptor : RequestDescriptorBase<CloneDescriptor, CloneRequestParameters, ICloneRequest>, ICloneRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementClone;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_clone/{target}</summary>
        public CloneDescriptor(Nest.IndexName index, Nest.Name target) : base(r => r.Required("index", index).Required("target", target))
		{
		}
	}

	public partial class CloseDescriptor : RequestDescriptorBase<CloseDescriptor, CloseRequestParameters, ICloseRequest>, ICloseRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementClose;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_close</summary>
        public CloseDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class CreateDescriptor : RequestDescriptorBase<CreateDescriptor, CreateRequestParameters, ICreateRequest>, ICreateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementCreate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}</summary>
        public CreateDescriptor(Nest.IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class CreateDataStreamDescriptor : RequestDescriptorBase<CreateDataStreamDescriptor, CreateDataStreamRequestParameters, ICreateDataStreamRequest>, ICreateDataStreamRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementCreateDataStream;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream/{name}</summary>
        public CreateDataStreamDescriptor(Nest.DataStreamName name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class DataStreamsStatsDescriptor : RequestDescriptorBase<DataStreamsStatsDescriptor, DataStreamsStatsRequestParameters, IDataStreamsStatsRequest>, IDataStreamsStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDataStreamsStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream/_stats</summary>
        public DataStreamsStatsDescriptor() : base()
		{
		}

		///<summary>/_data_stream/{name}/_stats</summary>
        public DataStreamsStatsDescriptor(Nest.IndexName? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class DeleteDescriptor : RequestDescriptorBase<DeleteDescriptor, DeleteRequestParameters, IDeleteRequest>, IDeleteRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/{index}</summary>
        public DeleteDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class DeleteAliasDescriptor : RequestDescriptorBase<DeleteAliasDescriptor, DeleteAliasRequestParameters, IDeleteAliasRequest>, IDeleteAliasRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDeleteAlias;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_alias/{name}</summary>
        public DeleteAliasDescriptor(Nest.Indices index, Nest.Names name) : base(r => r.Required("index", index).Required("name", name))
		{
		}
	}

	public partial class DeleteDataStreamDescriptor : RequestDescriptorBase<DeleteDataStreamDescriptor, DeleteDataStreamRequestParameters, IDeleteDataStreamRequest>, IDeleteDataStreamRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDeleteDataStream;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream/{name}</summary>
        public DeleteDataStreamDescriptor(Nest.DataStreamName name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class DeleteIndexTemplateDescriptor : RequestDescriptorBase<DeleteIndexTemplateDescriptor, DeleteIndexTemplateRequestParameters, IDeleteIndexTemplateRequest>, IDeleteIndexTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDeleteIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_index_template/{name}</summary>
        public DeleteIndexTemplateDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class DeleteTemplateDescriptor : RequestDescriptorBase<DeleteTemplateDescriptor, DeleteTemplateRequestParameters, IDeleteTemplateRequest>, IDeleteTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementDeleteTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_template/{name}</summary>
        public DeleteTemplateDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class ExistsDescriptor : RequestDescriptorBase<ExistsDescriptor, ExistsRequestParameters, IExistsRequest>, IExistsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementExists;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		///<summary>/{index}</summary>
        public ExistsDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class ExistsAliasDescriptor : RequestDescriptorBase<ExistsAliasDescriptor, ExistsAliasRequestParameters, IExistsAliasRequest>, IExistsAliasRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementExistsAlias;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		///<summary>/_alias/{name}</summary>
        public ExistsAliasDescriptor(Nest.Names name) : base(r => r.Required("name", name))
		{
		}

		///<summary>/{index}/_alias/{name}</summary>
        public ExistsAliasDescriptor(Nest.Indices? index, Nest.Names name) : base(r => r.Optional("index", index).Required("name", name))
		{
		}
	}

	public partial class ExistsIndexTemplateDescriptor : RequestDescriptorBase<ExistsIndexTemplateDescriptor, ExistsIndexTemplateRequestParameters, IExistsIndexTemplateRequest>, IExistsIndexTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementExistsIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		///<summary>/_index_template/{name}</summary>
        public ExistsIndexTemplateDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class ExistsTemplateDescriptor : RequestDescriptorBase<ExistsTemplateDescriptor, ExistsTemplateRequestParameters, IExistsTemplateRequest>, IExistsTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementExistsTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.HEAD;
		protected override bool SupportsBody => false;
		///<summary>/_template/{name}</summary>
        public ExistsTemplateDescriptor(Nest.Names name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class FlushDescriptor : RequestDescriptorBase<FlushDescriptor, FlushRequestParameters, IFlushRequest>, IFlushRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementFlush;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_flush</summary>
        public FlushDescriptor() : base()
		{
		}

		///<summary>/{index}/_flush</summary>
        public FlushDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class ForcemergeDescriptor : RequestDescriptorBase<ForcemergeDescriptor, ForcemergeRequestParameters, IForcemergeRequest>, IForcemergeRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementForcemerge;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_forcemerge</summary>
        public ForcemergeDescriptor() : base()
		{
		}

		///<summary>/{index}/_forcemerge</summary>
        public ForcemergeDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class GetDescriptor : RequestDescriptorBase<GetDescriptor, GetRequestParameters, IGetRequest>, IGetRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/{index}</summary>
        public GetDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class GetAliasDescriptor : RequestDescriptorBase<GetAliasDescriptor, GetAliasRequestParameters, IGetAliasRequest>, IGetAliasRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetAlias;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_alias</summary>
        public GetAliasDescriptor() : base()
		{
		}

		///<summary>/_alias/{name}</summary>
        public GetAliasDescriptor(Nest.Names? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/{index}/_alias/{name}</summary>
        public GetAliasDescriptor(Nest.Indices? index, Nest.Names? name) : base(r => r.Optional("index", index).Optional("name", name))
		{
		}

		///<summary>/{index}/_alias</summary>
        public GetAliasDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class GetDataStreamDescriptor : RequestDescriptorBase<GetDataStreamDescriptor, GetDataStreamRequestParameters, IGetDataStreamRequest>, IGetDataStreamRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetDataStream;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream</summary>
        public GetDataStreamDescriptor() : base()
		{
		}

		///<summary>/_data_stream/{name}</summary>
        public GetDataStreamDescriptor(Nest.IndexName? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class GetFieldMappingDescriptor : RequestDescriptorBase<GetFieldMappingDescriptor, GetFieldMappingRequestParameters, IGetFieldMappingRequest>, IGetFieldMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetFieldMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_mapping/field/{fields}</summary>
        public GetFieldMappingDescriptor(Nest.Fields fields) : base(r => r.Required("fields", fields))
		{
		}

		///<summary>/{index}/_mapping/field/{fields}</summary>
        public GetFieldMappingDescriptor(Nest.Indices? index, Nest.Fields fields) : base(r => r.Optional("index", index).Required("fields", fields))
		{
		}
	}

	public partial class GetIndexTemplateDescriptor : RequestDescriptorBase<GetIndexTemplateDescriptor, GetIndexTemplateRequestParameters, IGetIndexTemplateRequest>, IGetIndexTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_index_template</summary>
        public GetIndexTemplateDescriptor() : base()
		{
		}

		///<summary>/_index_template/{name}</summary>
        public GetIndexTemplateDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class GetMappingDescriptor : RequestDescriptorBase<GetMappingDescriptor, GetMappingRequestParameters, IGetMappingRequest>, IGetMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_mapping</summary>
        public GetMappingDescriptor() : base()
		{
		}

		///<summary>/{index}/_mapping</summary>
        public GetMappingDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class GetSettingsDescriptor : RequestDescriptorBase<GetSettingsDescriptor, GetSettingsRequestParameters, IGetSettingsRequest>, IGetSettingsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetSettings;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_settings</summary>
        public GetSettingsDescriptor() : base()
		{
		}

		///<summary>/{index}/_settings</summary>
        public GetSettingsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		///<summary>/{index}/_settings/{name}</summary>
        public GetSettingsDescriptor(Nest.Indices? index, Nest.Names? name) : base(r => r.Optional("index", index).Optional("name", name))
		{
		}

		///<summary>/_settings/{name}</summary>
        public GetSettingsDescriptor(Nest.Names? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class GetTemplateDescriptor : RequestDescriptorBase<GetTemplateDescriptor, GetTemplateRequestParameters, IGetTemplateRequest>, IGetTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementGetTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_template</summary>
        public GetTemplateDescriptor() : base()
		{
		}

		///<summary>/_template/{name}</summary>
        public GetTemplateDescriptor(Nest.Names? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class MigrateToDataStreamDescriptor : RequestDescriptorBase<MigrateToDataStreamDescriptor, MigrateToDataStreamRequestParameters, IMigrateToDataStreamRequest>, IMigrateToDataStreamRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementMigrateToDataStream;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream/_migrate/{name}</summary>
        public MigrateToDataStreamDescriptor(Nest.IndexName name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class OpenDescriptor : RequestDescriptorBase<OpenDescriptor, OpenRequestParameters, IOpenRequest>, IOpenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementOpen;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_open</summary>
        public OpenDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class PromoteDataStreamDescriptor : RequestDescriptorBase<PromoteDataStreamDescriptor, PromoteDataStreamRequestParameters, IPromoteDataStreamRequest>, IPromoteDataStreamRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPromoteDataStream;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_data_stream/_promote/{name}</summary>
        public PromoteDataStreamDescriptor(Nest.IndexName name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class PutAliasDescriptor : RequestDescriptorBase<PutAliasDescriptor, PutAliasRequestParameters, IPutAliasRequest>, IPutAliasRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutAlias;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_alias/{name}</summary>
        public PutAliasDescriptor(Nest.Indices index, Nest.Name name) : base(r => r.Required("index", index).Required("name", name))
		{
		}
	}

	public partial class PutIndexTemplateDescriptor : RequestDescriptorBase<PutIndexTemplateDescriptor, PutIndexTemplateRequestParameters, IPutIndexTemplateRequest>, IPutIndexTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_index_template/{name}</summary>
        public PutIndexTemplateDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class PutMappingDescriptor : RequestDescriptorBase<PutMappingDescriptor, PutMappingRequestParameters, IPutMappingRequest>, IPutMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutMapping;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_mapping</summary>
        public PutMappingDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class PutSettingsDescriptor : RequestDescriptorBase<PutSettingsDescriptor, PutSettingsRequestParameters, IPutSettingsRequest>, IPutSettingsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutSettings;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_settings</summary>
        public PutSettingsDescriptor() : base()
		{
		}

		///<summary>/{index}/_settings</summary>
        public PutSettingsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class PutTemplateDescriptor : RequestDescriptorBase<PutTemplateDescriptor, PutTemplateRequestParameters, IPutTemplateRequest>, IPutTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_template/{name}</summary>
        public PutTemplateDescriptor(Nest.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class RecoveryDescriptor : RequestDescriptorBase<RecoveryDescriptor, RecoveryRequestParameters, IRecoveryRequest>, IRecoveryRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementRecovery;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_recovery</summary>
        public RecoveryDescriptor() : base()
		{
		}

		///<summary>/{index}/_recovery</summary>
        public RecoveryDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class RefreshDescriptor : RequestDescriptorBase<RefreshDescriptor, RefreshRequestParameters, IRefreshRequest>, IRefreshRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementRefresh;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_refresh</summary>
        public RefreshDescriptor() : base()
		{
		}

		///<summary>/{index}/_refresh</summary>
        public RefreshDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class ReloadSearchAnalyzersDescriptor : RequestDescriptorBase<ReloadSearchAnalyzersDescriptor, ReloadSearchAnalyzersRequestParameters, IReloadSearchAnalyzersRequest>, IReloadSearchAnalyzersRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementReloadSearchAnalyzers;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_reload_search_analyzers</summary>
        public ReloadSearchAnalyzersDescriptor(Nest.Indices index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class ResolveIndexDescriptor : RequestDescriptorBase<ResolveIndexDescriptor, ResolveIndexRequestParameters, IResolveIndexRequest>, IResolveIndexRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementResolveIndex;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_resolve/index/{name}</summary>
        public ResolveIndexDescriptor(Nest.Names name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class RolloverDescriptor : RequestDescriptorBase<RolloverDescriptor, RolloverRequestParameters, IRolloverRequest>, IRolloverRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementRollover;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{alias}/_rollover</summary>
        public RolloverDescriptor(Nest.IndexAlias alias) : base(r => r.Required("alias", alias))
		{
		}

		///<summary>/{alias}/_rollover/{new_index}</summary>
        public RolloverDescriptor(Nest.IndexAlias alias, Nest.IndexName? new_index) : base(r => r.Required("alias", alias).Optional("new_index", new_index))
		{
		}
	}

	public partial class SegmentsDescriptor : RequestDescriptorBase<SegmentsDescriptor, SegmentsRequestParameters, ISegmentsRequest>, ISegmentsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSegments;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_segments</summary>
        public SegmentsDescriptor() : base()
		{
		}

		///<summary>/{index}/_segments</summary>
        public SegmentsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class ShardStoresDescriptor : RequestDescriptorBase<ShardStoresDescriptor, ShardStoresRequestParameters, IShardStoresRequest>, IShardStoresRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementShardStores;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_shard_stores</summary>
        public ShardStoresDescriptor() : base()
		{
		}

		///<summary>/{index}/_shard_stores</summary>
        public ShardStoresDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class ShrinkDescriptor : RequestDescriptorBase<ShrinkDescriptor, ShrinkRequestParameters, IShrinkRequest>, IShrinkRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementShrink;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_shrink/{target}</summary>
        public ShrinkDescriptor(Nest.IndexName index, Nest.IndexName target) : base(r => r.Required("index", index).Required("target", target))
		{
		}
	}

	public partial class SimulateIndexTemplateDescriptor : RequestDescriptorBase<SimulateIndexTemplateDescriptor, SimulateIndexTemplateRequestParameters, ISimulateIndexTemplateRequest>, ISimulateIndexTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_index_template/_simulate_index/{name}</summary>
        public SimulateIndexTemplateDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class SimulateTemplateDescriptor : RequestDescriptorBase<SimulateTemplateDescriptor, SimulateTemplateRequestParameters, ISimulateTemplateRequest>, ISimulateTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_index_template/_simulate</summary>
        public SimulateTemplateDescriptor() : base()
		{
		}

		///<summary>/_index_template/_simulate/{name}</summary>
        public SimulateTemplateDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class SplitDescriptor : RequestDescriptorBase<SplitDescriptor, SplitRequestParameters, ISplitRequest>, ISplitRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSplit;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_split/{target}</summary>
        public SplitDescriptor(Nest.IndexName index, Nest.IndexName target) : base(r => r.Required("index", index).Required("target", target))
		{
		}
	}

	public partial class StatsDescriptor : RequestDescriptorBase<StatsDescriptor, StatsRequestParameters, IStatsRequest>, IStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_stats</summary>
        public StatsDescriptor() : base()
		{
		}

		///<summary>/_stats/{metric}</summary>
        public StatsDescriptor(Nest.Metrics? metric) : base(r => r.Optional("metric", metric))
		{
		}

		///<summary>/{index}/_stats</summary>
        public StatsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		///<summary>/{index}/_stats/{metric}</summary>
        public StatsDescriptor(Nest.Indices? index, Nest.Metrics? metric) : base(r => r.Optional("index", index).Optional("metric", metric))
		{
		}
	}

	public partial class UpdateAliasesDescriptor : RequestDescriptorBase<UpdateAliasesDescriptor, UpdateAliasesRequestParameters, IUpdateAliasesRequest>, IUpdateAliasesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementUpdateAliases;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_aliases</summary>
        public UpdateAliasesDescriptor() : base()
		{
		}
	}

	public partial class ValidateQueryDescriptor : RequestDescriptorBase<ValidateQueryDescriptor, ValidateQueryRequestParameters, IValidateQueryRequest>, IValidateQueryRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementValidateQuery;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_validate/query</summary>
        public ValidateQueryDescriptor() : base()
		{
		}

		///<summary>/{index}/_validate/query</summary>
        public ValidateQueryDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}
}