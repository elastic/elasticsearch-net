// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest.TextStructure
{
	public partial class FindStructureDescriptor<TJsonDocument> : RequestDescriptorBase<FindStructureDescriptor<TJsonDocument>, FindStructureRequestParameters, IFindStructureRequest<TJsonDocument>>, IFindStructureRequest<TJsonDocument>
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TextStructureFindStructure;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_text_structure/find_structure</summary>
        public FindStructureDescriptor() : base()
		{
		}

		public FindStructureDescriptor<TJsonDocument> Charset(string? charset) => Qs("charset", charset);
		public FindStructureDescriptor<TJsonDocument> ColumnNames(string? columnNames) => Qs("column_names", columnNames);
		public FindStructureDescriptor<TJsonDocument> Delimiter(string? delimiter) => Qs("delimiter", delimiter);
		public FindStructureDescriptor<TJsonDocument> Explain(bool? explain = true) => Qs("explain", explain);
		public FindStructureDescriptor<TJsonDocument> Format(string? format) => Qs("format", format);
		public FindStructureDescriptor<TJsonDocument> GrokPattern(string? grokPattern) => Qs("grok_pattern", grokPattern);
		public FindStructureDescriptor<TJsonDocument> HasHeaderRow(bool? hasHeaderRow = true) => Qs("has_header_row", hasHeaderRow);
		public FindStructureDescriptor<TJsonDocument> LineMergeSizeLimit(int? lineMergeSizeLimit) => Qs("line_merge_size_limit", lineMergeSizeLimit);
		public FindStructureDescriptor<TJsonDocument> LinesToSample(int? linesToSample) => Qs("lines_to_sample", linesToSample);
		public FindStructureDescriptor<TJsonDocument> Quote(string? quote) => Qs("quote", quote);
		public FindStructureDescriptor<TJsonDocument> ShouldTrimFields(bool? shouldTrimFields = true) => Qs("should_trim_fields", shouldTrimFields);
		public FindStructureDescriptor<TJsonDocument> Timeout(Nest.Time? timeout) => Qs("timeout", timeout);
		public FindStructureDescriptor<TJsonDocument> TimestampField(Nest.Field? timestampField) => Qs("timestamp_field", timestampField);
		public FindStructureDescriptor<TJsonDocument> TimestampFormat(string? timestampFormat) => Qs("timestamp_format", timestampFormat);
	}
}
