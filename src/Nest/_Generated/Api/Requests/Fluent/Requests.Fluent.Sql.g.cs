// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest.Sql
{
	public partial class ClearCursorDescriptor : RequestDescriptorBase<ClearCursorDescriptor, ClearCursorRequestParameters, IClearCursorRequest>, IClearCursorRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SqlClearCursor;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_sql/close</summary>
        public ClearCursorDescriptor() : base()
		{
		}

		string IClearCursorRequest.Cursor { get; set; }

		public ClearCursorDescriptor Cursor(string cursor) => Assign(cursor, (a, v) => a.Cursor = v);
	}

	public partial class QueryDescriptor : RequestDescriptorBase<QueryDescriptor, QueryRequestParameters, IQueryRequest>, IQueryRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SqlQuery;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_sql</summary>
        public QueryDescriptor() : base()
		{
		}

		bool? IQueryRequest.Columnar { get; set; }

		string? IQueryRequest.Cursor { get; set; }

		int? IQueryRequest.FetchSize { get; set; }

		Nest.QueryDsl.QueryContainer? IQueryRequest.Filter { get; set; }

		string? IQueryRequest.Query { get; set; }

		Nest.Time? IQueryRequest.RequestTimeout { get; set; }

		Nest.Time? IQueryRequest.PageTimeout { get; set; }

		string? IQueryRequest.TimeZone { get; set; }

		bool? IQueryRequest.FieldMultiValueLeniency { get; set; }

		public QueryDescriptor Format(string? format) => Qs("format", format);
		public QueryDescriptor Columnar(bool? columnar = true) => Assign(columnar, (a, v) => a.Columnar = v);
		public QueryDescriptor Cursor(string? cursor) => Assign(cursor, (a, v) => a.Cursor = v);
		public QueryDescriptor FetchSize(int? fetchSize) => Assign(fetchSize, (a, v) => a.FetchSize = v);
		public QueryDescriptor Filter(Nest.QueryDsl.QueryContainer? filter) => Assign(filter, (a, v) => a.Filter = v);
		public QueryDescriptor Query(string? query) => Assign(query, (a, v) => a.Query = v);
		public QueryDescriptor RequestTimeout(Nest.Time? requestTimeout) => Assign(requestTimeout, (a, v) => a.RequestTimeout = v);
		public QueryDescriptor PageTimeout(Nest.Time? pageTimeout) => Assign(pageTimeout, (a, v) => a.PageTimeout = v);
		public QueryDescriptor TimeZone(string? timeZone) => Assign(timeZone, (a, v) => a.TimeZone = v);
		public QueryDescriptor FieldMultiValueLeniency(bool? fieldMultiValueLeniency = true) => Assign(fieldMultiValueLeniency, (a, v) => a.FieldMultiValueLeniency = v);
	}

	public partial class TranslateDescriptor : RequestDescriptorBase<TranslateDescriptor, TranslateRequestParameters, ITranslateRequest>, ITranslateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SqlTranslate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_sql/translate</summary>
        public TranslateDescriptor() : base()
		{
		}

		int? ITranslateRequest.FetchSize { get; set; }

		Nest.QueryDsl.QueryContainer? ITranslateRequest.Filter { get; set; }

		string ITranslateRequest.Query { get; set; }

		string? ITranslateRequest.TimeZone { get; set; }

		public TranslateDescriptor FetchSize(int? fetchSize) => Assign(fetchSize, (a, v) => a.FetchSize = v);
		public TranslateDescriptor Filter(Nest.QueryDsl.QueryContainer? filter) => Assign(filter, (a, v) => a.Filter = v);
		public TranslateDescriptor Query(string query) => Assign(query, (a, v) => a.Query = v);
		public TranslateDescriptor TimeZone(string? timeZone) => Assign(timeZone, (a, v) => a.TimeZone = v);
	}
}