// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest.Cat
{
	public partial class AliasesDescriptor : RequestDescriptorBase<AliasesDescriptor, AliasesRequestParameters, IAliasesRequest>, IAliasesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAliases;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/aliases</summary>
        public AliasesDescriptor() : base()
		{
		}

		///<summary>/_cat/aliases/{name}</summary>
        public AliasesDescriptor(Nest.Names? name) : base(r => r.Optional("name", name))
		{
		}

		public AliasesDescriptor ExpandWildcards(Nest.ExpandWildcards? expandWildcards) => Qs("expand_wildcards", expandWildcards);
	}

	public partial class AllocationDescriptor : RequestDescriptorBase<AllocationDescriptor, AllocationRequestParameters, IAllocationRequest>, IAllocationRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAllocation;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/allocation</summary>
        public AllocationDescriptor() : base()
		{
		}

		///<summary>/_cat/allocation/{node_id}</summary>
        public AllocationDescriptor(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}

		public AllocationDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class CountDescriptor : RequestDescriptorBase<CountDescriptor, CountRequestParameters, ICountRequest>, ICountRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatCount;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/count</summary>
        public CountDescriptor() : base()
		{
		}

		///<summary>/_cat/count/{index}</summary>
        public CountDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	public partial class FielddataDescriptor : RequestDescriptorBase<FielddataDescriptor, FielddataRequestParameters, IFielddataRequest>, IFielddataRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatFielddata;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/fielddata</summary>
        public FielddataDescriptor() : base()
		{
		}

		///<summary>/_cat/fielddata/{fields}</summary>
        public FielddataDescriptor(Nest.Fields? fields) : base(r => r.Optional("fields", fields))
		{
		}

		public FielddataDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class HealthDescriptor : RequestDescriptorBase<HealthDescriptor, HealthRequestParameters, IHealthRequest>, IHealthRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHealth;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/health</summary>
        public HealthDescriptor() : base()
		{
		}

		public HealthDescriptor IncludeTimestamp(bool? includeTimestamp = true) => Qs("include_timestamp", includeTimestamp);
		public HealthDescriptor Ts(bool? ts = true) => Qs("ts", ts);
	}

	public partial class HelpDescriptor : RequestDescriptorBase<HelpDescriptor, HelpRequestParameters, IHelpRequest>, IHelpRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHelp;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat</summary>
        public HelpDescriptor() : base()
		{
		}
	}

	public partial class IndicesDescriptor : RequestDescriptorBase<IndicesDescriptor, IndicesRequestParameters, IIndicesRequest>, IIndicesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatIndices;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/indices</summary>
        public IndicesDescriptor() : base()
		{
		}

		///<summary>/_cat/indices/{index}</summary>
        public IndicesDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public IndicesDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
		public IndicesDescriptor ExpandWildcards(Nest.ExpandWildcards? expandWildcards) => Qs("expand_wildcards", expandWildcards);
		public IndicesDescriptor Health(Nest.Health? health) => Qs("health", health);
		public IndicesDescriptor IncludeUnloadedSegments(bool? includeUnloadedSegments = true) => Qs("include_unloaded_segments", includeUnloadedSegments);
		public IndicesDescriptor Pri(bool? pri = true) => Qs("pri", pri);
	}

	public partial class MasterDescriptor : RequestDescriptorBase<MasterDescriptor, MasterRequestParameters, IMasterRequest>, IMasterRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMaster;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/master</summary>
        public MasterDescriptor() : base()
		{
		}
	}

	public partial class MlDataFrameAnalyticsDescriptor : RequestDescriptorBase<MlDataFrameAnalyticsDescriptor, MlDataFrameAnalyticsRequestParameters, IMlDataFrameAnalyticsRequest>, IMlDataFrameAnalyticsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlDataFrameAnalytics;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/ml/data_frame/analytics</summary>
        public MlDataFrameAnalyticsDescriptor() : base()
		{
		}

		///<summary>/_cat/ml/data_frame/analytics/{id}</summary>
        public MlDataFrameAnalyticsDescriptor(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		public MlDataFrameAnalyticsDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public MlDataFrameAnalyticsDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class MlDatafeedsDescriptor : RequestDescriptorBase<MlDatafeedsDescriptor, MlDatafeedsRequestParameters, IMlDatafeedsRequest>, IMlDatafeedsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlDatafeeds;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/ml/datafeeds</summary>
        public MlDatafeedsDescriptor() : base()
		{
		}

		///<summary>/_cat/ml/datafeeds/{datafeed_id}</summary>
        public MlDatafeedsDescriptor(Nest.Id? datafeed_id) : base(r => r.Optional("datafeed_id", datafeed_id))
		{
		}

		public MlDatafeedsDescriptor AllowNoDatafeeds(bool? allowNoDatafeeds = true) => Qs("allow_no_datafeeds", allowNoDatafeeds);
	}

	public partial class MlJobsDescriptor : RequestDescriptorBase<MlJobsDescriptor, MlJobsRequestParameters, IMlJobsRequest>, IMlJobsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlJobs;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/ml/anomaly_detectors</summary>
        public MlJobsDescriptor() : base()
		{
		}

		///<summary>/_cat/ml/anomaly_detectors/{job_id}</summary>
        public MlJobsDescriptor(Nest.Id? job_id) : base(r => r.Optional("job_id", job_id))
		{
		}

		public MlJobsDescriptor AllowNoJobs(bool? allowNoJobs = true) => Qs("allow_no_jobs", allowNoJobs);
		public MlJobsDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class MlTrainedModelsDescriptor : RequestDescriptorBase<MlTrainedModelsDescriptor, MlTrainedModelsRequestParameters, IMlTrainedModelsRequest>, IMlTrainedModelsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlTrainedModels;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/ml/trained_models</summary>
        public MlTrainedModelsDescriptor() : base()
		{
		}

		///<summary>/_cat/ml/trained_models/{model_id}</summary>
        public MlTrainedModelsDescriptor(Nest.Id? model_id) : base(r => r.Optional("model_id", model_id))
		{
		}

		public MlTrainedModelsDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public MlTrainedModelsDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
		public MlTrainedModelsDescriptor From(int? from) => Qs("from", from);
		public MlTrainedModelsDescriptor Size(int? size) => Qs("size", size);
	}

	public partial class NodeattrsDescriptor : RequestDescriptorBase<NodeattrsDescriptor, NodeattrsRequestParameters, INodeattrsRequest>, INodeattrsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodeattrs;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/nodeattrs</summary>
        public NodeattrsDescriptor() : base()
		{
		}
	}

	public partial class NodesDescriptor : RequestDescriptorBase<NodesDescriptor, NodesRequestParameters, INodesRequest>, INodesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodes;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/nodes</summary>
        public NodesDescriptor() : base()
		{
		}

		public NodesDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
		public NodesDescriptor FullId(Union<bool, string>? fullId) => Qs("full_id", fullId);
	}

	public partial class PendingTasksDescriptor : RequestDescriptorBase<PendingTasksDescriptor, PendingTasksRequestParameters, IPendingTasksRequest>, IPendingTasksRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatPendingTasks;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/pending_tasks</summary>
        public PendingTasksDescriptor() : base()
		{
		}
	}

	public partial class PluginsDescriptor : RequestDescriptorBase<PluginsDescriptor, PluginsRequestParameters, IPluginsRequest>, IPluginsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatPlugins;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/plugins</summary>
        public PluginsDescriptor() : base()
		{
		}
	}

	public partial class RecoveryDescriptor : RequestDescriptorBase<RecoveryDescriptor, RecoveryRequestParameters, IRecoveryRequest>, IRecoveryRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatRecovery;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/recovery</summary>
        public RecoveryDescriptor() : base()
		{
		}

		///<summary>/_cat/recovery/{index}</summary>
        public RecoveryDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public RecoveryDescriptor ActiveOnly(bool? activeOnly = true) => Qs("active_only", activeOnly);
		public RecoveryDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
		public RecoveryDescriptor Detailed(bool? detailed = true) => Qs("detailed", detailed);
	}

	public partial class RepositoriesDescriptor : RequestDescriptorBase<RepositoriesDescriptor, RepositoriesRequestParameters, IRepositoriesRequest>, IRepositoriesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatRepositories;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/repositories</summary>
        public RepositoriesDescriptor() : base()
		{
		}
	}

	public partial class SegmentsDescriptor : RequestDescriptorBase<SegmentsDescriptor, SegmentsRequestParameters, ISegmentsRequest>, ISegmentsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatSegments;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/segments</summary>
        public SegmentsDescriptor() : base()
		{
		}

		///<summary>/_cat/segments/{index}</summary>
        public SegmentsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public SegmentsDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class ShardsDescriptor : RequestDescriptorBase<ShardsDescriptor, ShardsRequestParameters, IShardsRequest>, IShardsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatShards;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/shards</summary>
        public ShardsDescriptor() : base()
		{
		}

		///<summary>/_cat/shards/{index}</summary>
        public ShardsDescriptor(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public ShardsDescriptor Bytes(Nest.Bytes? bytes) => Qs("bytes", bytes);
	}

	public partial class SnapshotsDescriptor : RequestDescriptorBase<SnapshotsDescriptor, SnapshotsRequestParameters, ISnapshotsRequest>, ISnapshotsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatSnapshots;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/snapshots</summary>
        public SnapshotsDescriptor() : base()
		{
		}

		///<summary>/_cat/snapshots/{repository}</summary>
        public SnapshotsDescriptor(Nest.Names? repository) : base(r => r.Optional("repository", repository))
		{
		}

		public SnapshotsDescriptor IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);
	}

	public partial class TasksDescriptor : RequestDescriptorBase<TasksDescriptor, TasksRequestParameters, ITasksRequest>, ITasksRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTasks;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/tasks</summary>
        public TasksDescriptor() : base()
		{
		}

		public TasksDescriptor Actions(IEnumerable<string>? actions) => Qs("actions", actions);
		public TasksDescriptor Detailed(bool? detailed = true) => Qs("detailed", detailed);
		public TasksDescriptor NodeId(IEnumerable<string>? nodeId) => Qs("node_id", nodeId);
		public TasksDescriptor ParentTask(long? parentTask) => Qs("parent_task", parentTask);
	}

	public partial class TemplatesDescriptor : RequestDescriptorBase<TemplatesDescriptor, TemplatesRequestParameters, ITemplatesRequest>, ITemplatesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTemplates;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/templates</summary>
        public TemplatesDescriptor() : base()
		{
		}

		///<summary>/_cat/templates/{name}</summary>
        public TemplatesDescriptor(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}
	}

	public partial class ThreadPoolDescriptor : RequestDescriptorBase<ThreadPoolDescriptor, ThreadPoolRequestParameters, IThreadPoolRequest>, IThreadPoolRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatThreadPool;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/thread_pool</summary>
        public ThreadPoolDescriptor() : base()
		{
		}

		///<summary>/_cat/thread_pool/{thread_pool_patterns}</summary>
        public ThreadPoolDescriptor(Nest.Names? thread_pool_patterns) : base(r => r.Optional("thread_pool_patterns", thread_pool_patterns))
		{
		}

		public ThreadPoolDescriptor Size(Union<Nest.Size, bool>? size) => Qs("size", size);
	}

	public partial class TransformsDescriptor : RequestDescriptorBase<TransformsDescriptor, TransformsRequestParameters, ITransformsRequest>, ITransformsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTransforms;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_cat/transforms</summary>
        public TransformsDescriptor() : base()
		{
		}

		///<summary>/_cat/transforms/{transform_id}</summary>
        public TransformsDescriptor(Nest.Id? transform_id) : base(r => r.Optional("transform_id", transform_id))
		{
		}

		public TransformsDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public TransformsDescriptor From(int? from) => Qs("from", from);
		public TransformsDescriptor Size(int? size) => Qs("size", size);
	}
}