// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport;

#nullable restore
namespace Nest
{
	public partial class IndexLifecycleManagementDeleteLifecycleDescriptor : RequestDescriptorBase<IndexLifecycleManagementDeleteLifecycleDescriptor, IndexLifecycleManagementDeleteLifecycleRequestParameters, IIndexLifecycleManagementDeleteLifecycleRequest>, IIndexLifecycleManagementDeleteLifecycleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementDeleteLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementDeleteLifecycleDescriptor(Name policy) : base(r => r.Optional("policy", policy))
		{
		}
	}

	public partial class IndexLifecycleManagementExplainLifecycleDescriptor : RequestDescriptorBase<IndexLifecycleManagementExplainLifecycleDescriptor, IndexLifecycleManagementExplainLifecycleRequestParameters, IIndexLifecycleManagementExplainLifecycleRequest>, IIndexLifecycleManagementExplainLifecycleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementExplainLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_ilm/explain</summary>
        public IndexLifecycleManagementExplainLifecycleDescriptor(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class IndexLifecycleManagementGetLifecycleDescriptor : RequestDescriptorBase<IndexLifecycleManagementGetLifecycleDescriptor, IndexLifecycleManagementGetLifecycleRequestParameters, IIndexLifecycleManagementGetLifecycleRequest>, IIndexLifecycleManagementGetLifecycleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementGetLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementGetLifecycleDescriptor(Name policy) : base(r => r.Optional("policy", policy))
		{
		}

		///<summary>/_ilm/policy</summary>
        public IndexLifecycleManagementGetLifecycleDescriptor() : base()
		{
		}
	}

	public partial class IndexLifecycleManagementGetStatusDescriptor : RequestDescriptorBase<IndexLifecycleManagementGetStatusDescriptor, IndexLifecycleManagementGetStatusRequestParameters, IIndexLifecycleManagementGetStatusRequest>, IIndexLifecycleManagementGetStatusRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementGetStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/status</summary>
        public IndexLifecycleManagementGetStatusDescriptor() : base()
		{
		}
	}

	public partial class IndexLifecycleManagementMoveToStepDescriptor : RequestDescriptorBase<IndexLifecycleManagementMoveToStepDescriptor, IndexLifecycleManagementMoveToStepRequestParameters, IIndexLifecycleManagementMoveToStepRequest>, IIndexLifecycleManagementMoveToStepRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementMoveToStep;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/move/{index}</summary>
        public IndexLifecycleManagementMoveToStepDescriptor(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class IndexLifecycleManagementPutLifecycleDescriptor : RequestDescriptorBase<IndexLifecycleManagementPutLifecycleDescriptor, IndexLifecycleManagementPutLifecycleRequestParameters, IIndexLifecycleManagementPutLifecycleRequest>, IIndexLifecycleManagementPutLifecycleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementPutLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementPutLifecycleDescriptor(Name policy) : base(r => r.Optional("policy", policy))
		{
		}
	}

	public partial class IndexLifecycleManagementRemovePolicyDescriptor : RequestDescriptorBase<IndexLifecycleManagementRemovePolicyDescriptor, IndexLifecycleManagementRemovePolicyRequestParameters, IIndexLifecycleManagementRemovePolicyRequest>, IIndexLifecycleManagementRemovePolicyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementRemovePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_ilm/remove</summary>
        public IndexLifecycleManagementRemovePolicyDescriptor(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class IndexLifecycleManagementRetryDescriptor : RequestDescriptorBase<IndexLifecycleManagementRetryDescriptor, IndexLifecycleManagementRetryRequestParameters, IIndexLifecycleManagementRetryRequest>, IIndexLifecycleManagementRetryRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementRetry;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_ilm/retry</summary>
        public IndexLifecycleManagementRetryDescriptor(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class IndexLifecycleManagementStartDescriptor : RequestDescriptorBase<IndexLifecycleManagementStartDescriptor, IndexLifecycleManagementStartRequestParameters, IIndexLifecycleManagementStartRequest>, IIndexLifecycleManagementStartRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementStart;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/start</summary>
        public IndexLifecycleManagementStartDescriptor() : base()
		{
		}
	}

	public partial class IndexLifecycleManagementStopDescriptor : RequestDescriptorBase<IndexLifecycleManagementStopDescriptor, IndexLifecycleManagementStopRequestParameters, IIndexLifecycleManagementStopRequest>, IIndexLifecycleManagementStopRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementStop;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_ilm/stop</summary>
        public IndexLifecycleManagementStopDescriptor() : base()
		{
		}
	}
}