// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IClusterAllocationExplainRequest, ClusterAllocationExplainRequest>))]
	public interface IClusterAllocationExplainRequest : IRequest<ClusterAllocationExplainRequestParameters>
    {
    }

    public class ClusterAllocationExplainRequest : PlainRequestBase<ClusterAllocationExplainRequestParameters>, IClusterAllocationExplainRequest
    {
        protected IClusterAllocationExplainRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterAllocationExplain;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => true;

        ///<summary>/_cluster/allocation/explain</summary>
        public ClusterAllocationExplainRequest(): base()
        {
        }

        [JsonIgnore]
		public bool? IncludeDiskInfo { get => Q<bool?>("include_disk_info"); set => Q("include_disk_info", value); }

		[JsonIgnore]
		public bool? IncludeYesDecisions { get => Q<bool?>("include_yes_decisions"); set => Q("include_yes_decisions", value); }

		[JsonPropertyName("index")]
		public IndexName? Index { get;
#if NET5_0
			init;
#else
			internal set; 
#endif
		}

		[JsonPropertyName("primary")]
        public bool? Primary { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
		
		[JsonPropertyName("shard")]
        public int? Shard { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterDeleteComponentTemplateRequest : IRequest<ClusterDeleteComponentTemplateRequestParameters>
    {
    }

    public class ClusterDeleteComponentTemplateRequest : PlainRequestBase<ClusterDeleteComponentTemplateRequestParameters>, IClusterDeleteComponentTemplateRequest
    {
        protected IClusterDeleteComponentTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterDeleteComponentTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_component_template/{name}</summary>
        public ClusterDeleteComponentTemplateRequest(Name name): base(r => r)
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterDeleteVotingConfigExclusionsRequest : IRequest<ClusterDeleteVotingConfigExclusionsRequestParameters>
    {
    }

    public class ClusterDeleteVotingConfigExclusionsRequest : PlainRequestBase<ClusterDeleteVotingConfigExclusionsRequestParameters>, IClusterDeleteVotingConfigExclusionsRequest
    {
        protected IClusterDeleteVotingConfigExclusionsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterDeleteVotingConfigExclusions;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/voting_config_exclusions</summary>
        public ClusterDeleteVotingConfigExclusionsRequest(): base()
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterComponentTemplateExistsRequest : IRequest<ClusterComponentTemplateExistsRequestParameters>
    {
    }

    public class ClusterComponentTemplateExistsRequest : PlainRequestBase<ClusterComponentTemplateExistsRequestParameters>, IClusterComponentTemplateExistsRequest
    {
        protected IClusterComponentTemplateExistsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterExistsComponentTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.HEAD;
        protected override bool SupportsBody => false;
        ///<summary>/_component_template/{name}</summary>
        public ClusterComponentTemplateExistsRequest(Name name): base(r => r)
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterGetComponentTemplateRequest : IRequest<ClusterGetComponentTemplateRequestParameters>
    {
    }

    public class ClusterGetComponentTemplateRequest : PlainRequestBase<ClusterGetComponentTemplateRequestParameters>, IClusterGetComponentTemplateRequest
    {
        protected IClusterGetComponentTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterGetComponentTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_component_template</summary>
        public ClusterGetComponentTemplateRequest(): base()
        {
        }

        ///<summary>/_component_template/{name}</summary>
        public ClusterGetComponentTemplateRequest(Name name): base(r => r)
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterGetSettingsRequest : IRequest<ClusterGetSettingsRequestParameters>
    {
    }

    public class ClusterGetSettingsRequest : PlainRequestBase<ClusterGetSettingsRequestParameters>, IClusterGetSettingsRequest
    {
        protected IClusterGetSettingsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterGetSettings;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/settings</summary>
        public ClusterGetSettingsRequest(): base()
        {
        }

        public bool? FlatSettings { get => Q<bool?>("flat_settings"); set => Q("flat_settings", value); }

        public bool? IncludeDefaults { get => Q<bool?>("include_defaults"); set => Q("include_defaults", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IClusterHealthRequest : IRequest<ClusterHealthRequestParameters>
    {
    }

    public class ClusterHealthRequest : PlainRequestBase<ClusterHealthRequestParameters>, IClusterHealthRequest
    {
        protected IClusterHealthRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterHealth;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/health</summary>
        public ClusterHealthRequest(): base()
        {
        }

        ///<summary>/_cluster/health/{index}</summary>
        public ClusterHealthRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public Level? Level { get => Q<Level?>("level"); set => Q("level", value); }

        public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        public WaitForEvents? WaitForEvents { get => Q<WaitForEvents?>("wait_for_events"); set => Q("wait_for_events", value); }

        public string? WaitForNodes { get => Q<string?>("wait_for_nodes"); set => Q("wait_for_nodes", value); }

        public bool? WaitForNoInitializingShards { get => Q<bool?>("wait_for_no_initializing_shards"); set => Q("wait_for_no_initializing_shards", value); }

        public bool? WaitForNoRelocatingShards { get => Q<bool?>("wait_for_no_relocating_shards"); set => Q("wait_for_no_relocating_shards", value); }

        public WaitForStatus? WaitForStatus { get => Q<WaitForStatus?>("wait_for_status"); set => Q("wait_for_status", value); }
    }

    public interface IClusterPendingTasksRequest : IRequest<ClusterPendingTasksRequestParameters>
    {
    }

    public class ClusterPendingTasksRequest : PlainRequestBase<ClusterPendingTasksRequestParameters>, IClusterPendingTasksRequest
    {
        protected IClusterPendingTasksRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPendingTasks;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/pending_tasks</summary>
        public ClusterPendingTasksRequest(): base()
        {
        }

        public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
    }

    public interface IClusterPostVotingConfigExclusionsRequest : IRequest<ClusterPostVotingConfigExclusionsRequestParameters>
    {
    }

    public class ClusterPostVotingConfigExclusionsRequest : PlainRequestBase<ClusterPostVotingConfigExclusionsRequestParameters>, IClusterPostVotingConfigExclusionsRequest
    {
        protected IClusterPostVotingConfigExclusionsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPostVotingConfigExclusions;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/voting_config_exclusions</summary>
        public ClusterPostVotingConfigExclusionsRequest(): base()
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterPutComponentTemplateRequest : IRequest<ClusterPutComponentTemplateRequestParameters>
    {
    }

    public class ClusterPutComponentTemplateRequest : PlainRequestBase<ClusterPutComponentTemplateRequestParameters>, IClusterPutComponentTemplateRequest
    {
        protected IClusterPutComponentTemplateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPutComponentTemplate;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/_component_template/{name}</summary>
        public ClusterPutComponentTemplateRequest(Name name): base(r => r)
        {
        }

        public string StubB { get => Q<string>("stub_b"); set => Q("stub_b", value); }

        [JsonPropertyName("stub_c")]
        public string StubC { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface IClusterPutSettingsRequest : IRequest<ClusterPutSettingsRequestParameters>
    {
    }

    public class ClusterPutSettingsRequest : PlainRequestBase<ClusterPutSettingsRequestParameters>, IClusterPutSettingsRequest
    {
        protected IClusterPutSettingsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPutSettings;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/settings</summary>
        public ClusterPutSettingsRequest(): base()
        {
        }

        public bool? FlatSettings { get => Q<bool?>("flat_settings"); set => Q("flat_settings", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IRemoteInfoRequest : IRequest<RemoteInfoRequestParameters>
    {
    }

    public class RemoteInfoRequest : PlainRequestBase<RemoteInfoRequestParameters>, IRemoteInfoRequest
    {
        protected IRemoteInfoRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterRemoteInfo;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_remote/info</summary>
        public RemoteInfoRequest(): base()
        {
        }
    }

    public interface IClusterRerouteRequest : IRequest<ClusterRerouteRequestParameters>
    {
    }

    public class ClusterRerouteRequest : PlainRequestBase<ClusterRerouteRequestParameters>, IClusterRerouteRequest
    {
        protected IClusterRerouteRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterReroute;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/reroute</summary>
        public ClusterRerouteRequest(): base()
        {
        }

        public bool? DryRun { get => Q<bool?>("dry_run"); set => Q("dry_run", value); }

        public bool? Explain { get => Q<bool?>("explain"); set => Q("explain", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Metrics? Metric { get => Q<Metrics?>("metric"); set => Q("metric", value); }

        public bool? RetryFailed { get => Q<bool?>("retry_failed"); set => Q("retry_failed", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IClusterStateRequest : IRequest<ClusterStateRequestParameters>
    {
    }

    public class ClusterStateRequest : PlainRequestBase<ClusterStateRequestParameters>, IClusterStateRequest
    {
        protected IClusterStateRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterState;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/state</summary>
        public ClusterStateRequest(): base()
        {
        }

        ///<summary>/_cluster/state/{metric}</summary>
        public ClusterStateRequest(Metrics metric): base(r => r.Optional("metric", metric))
        {
        }

        ///<summary>/_cluster/state/{metric}/{index}</summary>
        public ClusterStateRequest(Metrics metric, Indices index): base(r => r.Optional("metric", metric).Optional("index", index))
        {
        }

        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        public bool? FlatSettings { get => Q<bool?>("flat_settings"); set => Q("flat_settings", value); }

        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public long? WaitForMetadataVersion { get => Q<long?>("wait_for_metadata_version"); set => Q("wait_for_metadata_version", value); }

        public Time? WaitForTimeout { get => Q<Time?>("wait_for_timeout"); set => Q("wait_for_timeout", value); }
    }

    public interface IClusterStatsRequest : IRequest<ClusterStatsRequestParameters>
    {
    }

    public class ClusterStatsRequest : PlainRequestBase<ClusterStatsRequestParameters>, IClusterStatsRequest
    {
        protected IClusterStatsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterStats;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_cluster/stats</summary>
        public ClusterStatsRequest(): base()
        {
        }

        ///<summary>/_cluster/stats/nodes/{node_id}</summary>
        public ClusterStatsRequest(NodeIds nodeId): base(r => r.Optional("node_id", nodeId))
        {
        }

        public bool? FlatSettings { get => Q<bool?>("flat_settings"); set => Q("flat_settings", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }
}
