// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;
using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest
{
	[ConvertAs(typeof(IndexLifecycleManagementDeleteLifecycleRequest))]
	public partial interface IIndexLifecycleManagementDeleteLifecycleRequest : IRequest<IndexLifecycleManagementDeleteLifecycleRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementDeleteLifecycleRequest : PlainRequestBase<IndexLifecycleManagementDeleteLifecycleRequestParameters>, IIndexLifecycleManagementDeleteLifecycleRequest
	{
		protected IIndexLifecycleManagementDeleteLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementDeleteLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementDeleteLifecycleRequest(Name policy) : base(r => r.Optional("policy", policy))
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementExplainLifecycleRequest))]
	public partial interface IIndexLifecycleManagementExplainLifecycleRequest : IRequest<IndexLifecycleManagementExplainLifecycleRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementExplainLifecycleRequest : PlainRequestBase<IndexLifecycleManagementExplainLifecycleRequestParameters>, IIndexLifecycleManagementExplainLifecycleRequest
	{
		protected IIndexLifecycleManagementExplainLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementExplainLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/{index}/_ilm/explain</summary>
        public IndexLifecycleManagementExplainLifecycleRequest(IndexName index) : base(r => r.Required("index", index))
		{
		}

		[JsonIgnore]
		public bool? OnlyErrors { get => Q<bool?>("only_errors"); set => Q("only_errors", value); }

		[JsonIgnore]
		public bool? OnlyManaged { get => Q<bool?>("only_managed"); set => Q("only_managed", value); }
	}

	[ConvertAs(typeof(IndexLifecycleManagementGetLifecycleRequest))]
	public partial interface IIndexLifecycleManagementGetLifecycleRequest : IRequest<IndexLifecycleManagementGetLifecycleRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementGetLifecycleRequest : PlainRequestBase<IndexLifecycleManagementGetLifecycleRequestParameters>, IIndexLifecycleManagementGetLifecycleRequest
	{
		protected IIndexLifecycleManagementGetLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementGetLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementGetLifecycleRequest(Name policy) : base(r => r.Optional("policy", policy))
		{
		}

		///<summary>/_ilm/policy</summary>
        public IndexLifecycleManagementGetLifecycleRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementGetStatusRequest))]
	public partial interface IIndexLifecycleManagementGetStatusRequest : IRequest<IndexLifecycleManagementGetStatusRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementGetStatusRequest : PlainRequestBase<IndexLifecycleManagementGetStatusRequestParameters>, IIndexLifecycleManagementGetStatusRequest
	{
		protected IIndexLifecycleManagementGetStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementGetStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_ilm/status</summary>
        public IndexLifecycleManagementGetStatusRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementMoveToStepRequest))]
	public partial interface IIndexLifecycleManagementMoveToStepRequest : IRequest<IndexLifecycleManagementMoveToStepRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementMoveToStepRequest : PlainRequestBase<IndexLifecycleManagementMoveToStepRequestParameters>, IIndexLifecycleManagementMoveToStepRequest
	{
		protected IIndexLifecycleManagementMoveToStepRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementMoveToStep;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_ilm/move/{index}</summary>
        public IndexLifecycleManagementMoveToStepRequest(IndexName index) : base(r => r.Required("index", index))
		{
		}

		[JsonPropertyName("current_step")]
		public StepKey? CurrentStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_step")]
		public StepKey? NextStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementPutLifecycleRequest))]
	public partial interface IIndexLifecycleManagementPutLifecycleRequest : IRequest<IndexLifecycleManagementPutLifecycleRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementPutLifecycleRequest : PlainRequestBase<IndexLifecycleManagementPutLifecycleRequestParameters>, IIndexLifecycleManagementPutLifecycleRequest
	{
		protected IIndexLifecycleManagementPutLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementPutLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_ilm/policy/{policy}</summary>
        public IndexLifecycleManagementPutLifecycleRequest(Name policy) : base(r => r.Optional("policy", policy))
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementRemovePolicyRequest))]
	public partial interface IIndexLifecycleManagementRemovePolicyRequest : IRequest<IndexLifecycleManagementRemovePolicyRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementRemovePolicyRequest : PlainRequestBase<IndexLifecycleManagementRemovePolicyRequestParameters>, IIndexLifecycleManagementRemovePolicyRequest
	{
		protected IIndexLifecycleManagementRemovePolicyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementRemovePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/{index}/_ilm/remove</summary>
        public IndexLifecycleManagementRemovePolicyRequest(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementRetryRequest))]
	public partial interface IIndexLifecycleManagementRetryRequest : IRequest<IndexLifecycleManagementRetryRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementRetryRequest : PlainRequestBase<IndexLifecycleManagementRetryRequestParameters>, IIndexLifecycleManagementRetryRequest
	{
		protected IIndexLifecycleManagementRetryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementRetry;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/{index}/_ilm/retry</summary>
        public IndexLifecycleManagementRetryRequest(IndexName index) : base(r => r.Required("index", index))
		{
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementStartRequest))]
	public partial interface IIndexLifecycleManagementStartRequest : IRequest<IndexLifecycleManagementStartRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementStartRequest : PlainRequestBase<IndexLifecycleManagementStartRequestParameters>, IIndexLifecycleManagementStartRequest
	{
		protected IIndexLifecycleManagementStartRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementStart;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_ilm/start</summary>
        public IndexLifecycleManagementStartRequest() : base()
		{
		}

		[JsonPropertyName("stub")]
		public bool Stub
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(IndexLifecycleManagementStopRequest))]
	public partial interface IIndexLifecycleManagementStopRequest : IRequest<IndexLifecycleManagementStopRequestParameters>
	{
	}

	public partial class IndexLifecycleManagementStopRequest : PlainRequestBase<IndexLifecycleManagementStopRequestParameters>, IIndexLifecycleManagementStopRequest
	{
		protected IIndexLifecycleManagementStopRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexLifecycleManagementStop;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_ilm/stop</summary>
        public IndexLifecycleManagementStopRequest() : base()
		{
		}

		[JsonPropertyName("stub")]
		public bool Stub
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}