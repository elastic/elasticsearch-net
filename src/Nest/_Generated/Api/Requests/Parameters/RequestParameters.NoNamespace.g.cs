// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using Elastic.Transport;

#nullable restore
namespace Nest
{
    public class ClearScrollRequestParameters : RequestParameters<ClearScrollRequestParameters>
    {
    }

    public class ClosePointInTimeRequestParameters : RequestParameters<ClosePointInTimeRequestParameters>
    {
    }

    public class CountRequestParameters : RequestParameters<CountRequestParameters>
    {
        [JsonIgnore]
        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        [JsonIgnore]
        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        [JsonIgnore]
        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        [JsonIgnore]
        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        [JsonIgnore]
        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        [JsonIgnore]
        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        [JsonIgnore]
        public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

        [JsonIgnore]
        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        [JsonIgnore]
        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        [JsonIgnore]
        public double? MinScore { get => Q<double?>("min_score"); set => Q("min_score", value); }

        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        [JsonIgnore]
        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }
    }

    public class CreateRequestParameters : RequestParameters<CreateRequestParameters>
    {
        [JsonIgnore]
        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        [JsonIgnore]
        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        [JsonIgnore]
        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
    }

    public class DeleteRequestParameters : RequestParameters<DeleteRequestParameters>
    {
        [JsonIgnore]
        public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

        [JsonIgnore]
        public SequenceNumber? IfSeqNo { get => Q<SequenceNumber?>("if_seq_no"); set => Q("if_seq_no", value); }

        [JsonIgnore]
        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        [JsonIgnore]
        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
    }

    public class DeleteByQueryRequestParameters : RequestParameters<DeleteByQueryRequestParameters>
    {
        [JsonIgnore]
        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        [JsonIgnore]
        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        [JsonIgnore]
        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        [JsonIgnore]
        public Conflicts? Conflicts { get => Q<Conflicts?>("conflicts"); set => Q("conflicts", value); }

        [JsonIgnore]
        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        [JsonIgnore]
        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        [JsonIgnore]
        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        [JsonIgnore]
        public long? From { get => Q<long?>("from"); set => Q("from", value); }

        [JsonIgnore]
        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        [JsonIgnore]
        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        [JsonIgnore]
        public long? MaxDocs { get => Q<long?>("max_docs"); set => Q("max_docs", value); }

        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

        [JsonIgnore]
        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

        [JsonIgnore]
        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        [JsonIgnore]
        public long? ScrollSize { get => Q<long?>("scroll_size"); set => Q("scroll_size", value); }

        [JsonIgnore]
        public Time? SearchTimeout { get => Q<Time?>("search_timeout"); set => Q("search_timeout", value); }

        [JsonIgnore]
        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        [JsonIgnore]
        public long? Size { get => Q<long?>("size"); set => Q("size", value); }

        [JsonIgnore]
        public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

        [JsonIgnore]
        public string[]? Sort { get => Q<string[]?>("sort"); set => Q("sort", value); }

        [JsonIgnore]
        public Union<bool, Fields>? Source { get => Q<Union<bool, Fields>?>("_source"); set => Q("_source", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        [JsonIgnore]
        public string[]? Stats { get => Q<string[]?>("stats"); set => Q("stats", value); }

        [JsonIgnore]
        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        [JsonIgnore]
        public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
    }

    public class ExistsRequestParameters : RequestParameters<ExistsRequestParameters>
    {
        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        [JsonIgnore]
        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        [JsonIgnore]
        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public class ExistsSourceRequestParameters : RequestParameters<ExistsSourceRequestParameters>
    {
        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        [JsonIgnore]
        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("source_excludes"); set => Q("source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("source_includes"); set => Q("source_includes", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }
    }

    public class ExplainRequestParameters : RequestParameters<ExplainRequestParameters>
    {
        [JsonIgnore]
        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        [JsonIgnore]
        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        [JsonIgnore]
        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        [JsonIgnore]
        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        [JsonIgnore]
        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public string? QueryOnQueryString { get => Q<string?>("query_on_query_string"); set => Q("query_on_query_string", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public Union<bool, Fields>? Source { get => Q<Union<bool, Fields>?>("_source"); set => Q("_source", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        [JsonIgnore]
        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        [JsonIgnore]
        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }
    }

    public class FieldCapsRequestParameters : RequestParameters<FieldCapsRequestParameters>
    {
        [JsonIgnore]
        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        [JsonIgnore]
        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        [JsonIgnore]
        public Fields? Fields { get => Q<Fields?>("fields"); set => Q("fields", value); }

        [JsonIgnore]
        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        [JsonIgnore]
        public bool? IncludeUnmapped { get => Q<bool?>("include_unmapped"); set => Q("include_unmapped", value); }
    }

    public class GetRequestParameters : RequestParameters<GetRequestParameters>
    {
        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

        [JsonIgnore]
        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public bool? SourceEnabled { get => Q<bool?>("source_enabled"); set => Q("source_enabled", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        [JsonIgnore]
        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        [JsonIgnore]
        public Union<bool, Fields>? Source { get => Q<Union<bool, Fields>?>("_source"); set => Q("_source", value); }
    }

    public class GetScriptRequestParameters : RequestParameters<GetScriptRequestParameters>
    {
        [JsonIgnore]
        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
    }

    public class GetScriptContextRequestParameters : RequestParameters<GetScriptContextRequestParameters>
    {
    }

    public class GetScriptLanguagesRequestParameters : RequestParameters<GetScriptLanguagesRequestParameters>
    {
    }

    public class GetSourceRequestParameters : RequestParameters<GetSourceRequestParameters>
    {
    }

    public class IndexRequestParameters : RequestParameters<IndexRequestParameters>
    {
        [JsonIgnore]
        public long? IfPrimaryTerm { get => Q<long?>("if_primary_term"); set => Q("if_primary_term", value); }

        [JsonIgnore]
        public SequenceNumber? IfSeqNo { get => Q<SequenceNumber?>("if_seq_no"); set => Q("if_seq_no", value); }

        [JsonIgnore]
        public OpType? OpType { get => Q<OpType?>("op_type"); set => Q("op_type", value); }

        [JsonIgnore]
        public string? Pipeline { get => Q<string?>("pipeline"); set => Q("pipeline", value); }

        [JsonIgnore]
        public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public VersionNumber? Version { get => Q<VersionNumber?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public VersionType? VersionType { get => Q<VersionType?>("version_type"); set => Q("version_type", value); }

        [JsonIgnore]
        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        [JsonIgnore]
        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }
    }

    public class InfoRequestParameters : RequestParameters<InfoRequestParameters>
    {
    }

    public class OpenPointInTimeRequestParameters : RequestParameters<OpenPointInTimeRequestParameters>
    {
        [JsonIgnore]
        public Time? KeepAlive { get => Q<Time?>("keep_alive"); set => Q("keep_alive", value); }
    }

    public class PingRequestParameters : RequestParameters<PingRequestParameters>
    {
    }

    public class PutScriptRequestParameters : RequestParameters<PutScriptRequestParameters>
    {
        [JsonIgnore]
        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public class ReindexRequestParameters : RequestParameters<ReindexRequestParameters>
    {
        [JsonIgnore]
        public bool? Refresh { get => Q<bool?>("refresh"); set => Q("refresh", value); }

        [JsonIgnore]
        public long? RequestsPerSecond { get => Q<long?>("requests_per_second"); set => Q("requests_per_second", value); }

        [JsonIgnore]
        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        [JsonIgnore]
        public long? Slices { get => Q<long?>("slices"); set => Q("slices", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }

        [JsonIgnore]
        public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

        [JsonIgnore]
        public bool? RequireAlias { get => Q<bool?>("require_alias"); set => Q("require_alias", value); }
    }

    public class ScrollRequestParameters : RequestParameters<ScrollRequestParameters>
    {
        [JsonIgnore]
        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        [JsonIgnore]
        public ScrollId? ScrollId { get => Q<ScrollId?>("scroll_id"); set => Q("scroll_id", value); }

        [JsonIgnore]
        public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

        [JsonIgnore]
        public bool? TotalHitsAsInteger { get => Q<bool?>("total_hits_as_integer"); set => Q("total_hits_as_integer", value); }
    }

    public class SearchRequestParameters : RequestParameters<SearchRequestParameters>
    {
        [JsonIgnore]
        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        [JsonIgnore]
        public bool? AllowPartialSearchResults { get => Q<bool?>("allow_partial_search_results"); set => Q("allow_partial_search_results", value); }

        [JsonIgnore]
        public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

        [JsonIgnore]
        public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

        [JsonIgnore]
        public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

        [JsonIgnore]
        public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

        [JsonIgnore]
        public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

        [JsonIgnore]
        public string? Df { get => Q<string?>("df"); set => Q("df", value); }

        [JsonIgnore]
        public Fields? DocvalueFields { get => Q<Fields?>("docvalue_fields"); set => Q("docvalue_fields", value); }

        [JsonIgnore]
        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        [JsonIgnore]
        public bool? Explain { get => Q<bool?>("explain"); set => Q("explain", value); }

        [JsonIgnore]
        public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

        [JsonIgnore]
        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        [JsonIgnore]
        public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

        [JsonIgnore]
        public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

        [JsonIgnore]
        public VersionString? MinCompatibleShardNode { get => Q<VersionString?>("min_compatible_shard_node"); set => Q("min_compatible_shard_node", value); }

        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

        [JsonIgnore]
        public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }

        [JsonIgnore]
        public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

        [JsonIgnore]
        public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

        [JsonIgnore]
        public string[]? Stats { get => Q<string[]?>("stats"); set => Q("stats", value); }

        [JsonIgnore]
        public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

        [JsonIgnore]
        public Field? SuggestField { get => Q<Field?>("suggest_field"); set => Q("suggest_field", value); }

        [JsonIgnore]
        public SuggestMode? SuggestMode { get => Q<SuggestMode?>("suggest_mode"); set => Q("suggest_mode", value); }

        [JsonIgnore]
        public long? SuggestSize { get => Q<long?>("suggest_size"); set => Q("suggest_size", value); }

        [JsonIgnore]
        public string? SuggestText { get => Q<string?>("suggest_text"); set => Q("suggest_text", value); }

        [JsonIgnore]
        public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

        [JsonIgnore]
        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonIgnore]
        public Union<bool, int>? TrackTotalHits { get => Q<Union<bool, int>?>("track_total_hits"); set => Q("track_total_hits", value); }

        [JsonIgnore]
        public bool? TrackScores { get => Q<bool?>("track_scores"); set => Q("track_scores", value); }

        [JsonIgnore]
        public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }

        [JsonIgnore]
        public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

        [JsonIgnore]
        public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

        [JsonIgnore]
        public Union<bool, Fields>? Source { get => Q<Union<bool, Fields>?>("_source"); set => Q("_source", value); }

        [JsonIgnore]
        public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

        [JsonIgnore]
        public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

        [JsonIgnore]
        public bool? SeqNoPrimaryTerm { get => Q<bool?>("seq_no_primary_term"); set => Q("seq_no_primary_term", value); }

        [JsonIgnore]
        public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

        [JsonIgnore]
        public int? Size { get => Q<int?>("size"); set => Q("size", value); }

        [JsonIgnore]
        public int? From { get => Q<int?>("from"); set => Q("from", value); }
    }

    public class SearchShardsRequestParameters : RequestParameters<SearchShardsRequestParameters>
    {
        [JsonIgnore]
        public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

        [JsonIgnore]
        public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

        [JsonIgnore]
        public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

        [JsonIgnore]
        public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

        [JsonIgnore]
        public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

        [JsonIgnore]
        public Routing? Routing { get => Q<Routing?>("routing"); set => Q("routing", value); }
    }
}