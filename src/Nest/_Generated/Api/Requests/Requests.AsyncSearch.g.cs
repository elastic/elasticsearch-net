// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IAsyncSearchDeleteRequest, AsyncSearchDeleteRequest>))]
	public interface IAsyncSearchDeleteRequest : IRequest<AsyncSearchDeleteRequestParameters>
	{
	}

	public class AsyncSearchDeleteRequest : PlainRequestBase<AsyncSearchDeleteRequestParameters>, IAsyncSearchDeleteRequest
	{
		protected IAsyncSearchDeleteRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_async_search/{id}</summary>
        public AsyncSearchDeleteRequest(Id id) : base(r => r.Required("id", id))
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IAsyncSearchGetRequest, AsyncSearchGetRequest>))]
	public interface IAsyncSearchGetRequest : IRequest<AsyncSearchGetRequestParameters>
	{
	}

	public class AsyncSearchGetRequest : PlainRequestBase<AsyncSearchGetRequestParameters>, IAsyncSearchGetRequest
	{
		protected IAsyncSearchGetRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => TypedKeys is null;
		///<summary>/_async_search/{id}</summary>
        public AsyncSearchGetRequest(Id id) : base(r => r.Required("id", id))
		{
		}

		[JsonPropertyName("typed_keys")]
		public bool? TypedKeys
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IAsyncSearchStatusRequest, AsyncSearchStatusRequest>))]
	public interface IAsyncSearchStatusRequest : IRequest<AsyncSearchStatusRequestParameters>
	{
	}

	public class AsyncSearchStatusRequest : PlainRequestBase<AsyncSearchStatusRequestParameters>, IAsyncSearchStatusRequest
	{
		protected IAsyncSearchStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_async_search/status/{id}</summary>
        public AsyncSearchStatusRequest(Id id) : base(r => r.Required("id", id))
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IAsyncSearchSubmitRequest, AsyncSearchSubmitRequest>))]
	public interface IAsyncSearchSubmitRequest : IRequest<AsyncSearchSubmitRequestParameters>
	{
	}

	public class AsyncSearchSubmitRequest : PlainRequestBase<AsyncSearchSubmitRequestParameters>, IAsyncSearchSubmitRequest
	{
		protected IAsyncSearchSubmitRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchSubmit;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => AllowNoIndices is null && AllowPartialSearchResults is null && Analyzer is null && AnalyzeWildcard is null && Collapse is null && DefaultOperator is null && Df is null && Explain is null && From is null && Highlight is null && IgnoreThrottled is null && IgnoreUnavailable is null && Lenient is null && PostFilter is null && Preference is null && Profile is null && Pit is null && Query is null && QueryOnQueryString is null && RequestCache is null && SearchType is null && SequenceNumberPrimaryTerm is null && Size is null && SuggestMode is null && SuggestText is null && Timeout is null && TrackScores is null && TrackTotalHits is null && Version is null && Fields is null;
		///<summary>/_async_search</summary>
        public AsyncSearchSubmitRequest() : base()
		{
		}

		///<summary>/{index}/_async_search</summary>
        public AsyncSearchSubmitRequest(Indices index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

		[JsonIgnore]
		public Time? WaitForCompletionTimeout { get => Q<Time?>("wait_for_completion_timeout"); set => Q("wait_for_completion_timeout", value); }

		[JsonIgnore]
		public bool? KeepOnCompletion { get => Q<bool?>("keep_on_completion"); set => Q("keep_on_completion", value); }

		[JsonIgnore]
		public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }

		[JsonPropertyName("allow_no_indices")]
		public bool? AllowNoIndices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("allow_partial_search_results")]
		public bool? AllowPartialSearchResults
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collapse")]
		public FieldCollapse? Collapse
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("default_operator")]
		public DefaultOperator? DefaultOperator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("df")]
		public string? Df
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explain")]
		public bool? Explain
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("from")]
		public int? From
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlight")]
		public Highlight? Highlight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_throttled")]
		public bool? IgnoreThrottled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_unavailable")]
		public bool? IgnoreUnavailable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool? Lenient
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_filter")]
		public QueryContainer? PostFilter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preference")]
		public string? Preference
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("profile")]
		public bool? Profile
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pit")]
		public PointInTimeReference? Pit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public QueryContainer? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_on_query_string")]
		public string? QueryOnQueryString
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("request_cache")]
		public bool? RequestCache
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_type")]
		public SearchType? SearchType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sequence_number_primary_term")]
		public bool? SequenceNumberPrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_mode")]
		public SuggestMode? SuggestMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_text")]
		public string? SuggestText
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timeout")]
		public string? Timeout
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("track_scores")]
		public bool? TrackScores
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("track_total_hits")]
		public bool? TrackTotalHits
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public bool? Version
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Array? Fields
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}
}