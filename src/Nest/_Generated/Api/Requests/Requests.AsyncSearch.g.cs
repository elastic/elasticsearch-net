// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using Elastic.Transport;

#nullable restore
namespace Nest
{
    public interface IAsyncSearchDeleteRequest : IRequest<AsyncSearchDeleteRequestParameters>
    {
    }

    public class AsyncSearchDeleteRequest : PlainRequestBase<AsyncSearchDeleteRequestParameters>, IAsyncSearchDeleteRequest
    {
        protected IAsyncSearchDeleteRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchDelete;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_async_search/{id}</summary>
        public AsyncSearchDeleteRequest(Id id): base(r => r.Required("id", id))
        {
        }
    }

    public interface IAsyncSearchGetRequest : IRequest<AsyncSearchGetRequestParameters>
    {
    }

    public class AsyncSearchGetRequest : PlainRequestBase<AsyncSearchGetRequestParameters>, IAsyncSearchGetRequest
    {
        protected IAsyncSearchGetRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchGet;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_async_search/{id}</summary>
        public AsyncSearchGetRequest(Id id): base(r => r.Required("id", id))
        {
        }
    }

    public interface IAsyncSearchStatusRequest : IRequest<AsyncSearchStatusRequestParameters>
    {
    }

    public class AsyncSearchStatusRequest : PlainRequestBase<AsyncSearchStatusRequestParameters>, IAsyncSearchStatusRequest
    {
        protected IAsyncSearchStatusRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchStatus;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_async_search/status/{id}</summary>
        public AsyncSearchStatusRequest(Id id): base(r => r.Required("id", id))
        {
        }
    }

    public interface IAsyncSearchSubmitRequest : IRequest<AsyncSearchSubmitRequestParameters>
    {
    }

    public class AsyncSearchSubmitRequest : PlainRequestBase<AsyncSearchSubmitRequestParameters>, IAsyncSearchSubmitRequest
    {
        protected IAsyncSearchSubmitRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchSubmit;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_async_search</summary>
        public AsyncSearchSubmitRequest(): base()
        {
        }

        ///<summary>/{index}/_async_search</summary>
        public AsyncSearchSubmitRequest(Indices index): base(r => r.Optional("index", index))
        {
        }

        public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

        public Time? WaitForCompletionTimeout { get => Q<Time?>("wait_for_completion_timeout"); set => Q("wait_for_completion_timeout", value); }

        public bool? KeepOnCompletion { get => Q<bool?>("keep_on_completion"); set => Q("keep_on_completion", value); }

        public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }
    }
}