// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗ 
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝ 
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗   
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝   
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗ 
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝ 
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------
using System;
using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
    public interface IDeletePipelineRequest : IRequest<DeletePipelineRequestParameters>
    {
    }

    public class DeletePipelineRequest : PlainRequestBase<DeletePipelineRequestParameters>, IDeletePipelineRequest
    {
        protected IDeletePipelineRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestDeletePipeline;
        protected override HttpMethod HttpMethod => HttpMethod.DELETE;
        protected override bool SupportsBody => false;
        ///<summary>/_ingest/pipeline/{id}</summary>
        public DeletePipelineRequest(Id id): base(r => r.Required("id", id))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
    }

    public interface IGetPipelineRequest : IRequest<GetPipelineRequestParameters>
    {
    }

    public class GetPipelineRequest : PlainRequestBase<GetPipelineRequestParameters>, IGetPipelineRequest
    {
        protected IGetPipelineRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestGetPipeline;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_ingest/pipeline</summary>
        public GetPipelineRequest(): base()
        {
        }

        ///<summary>/_ingest/pipeline/{id}</summary>
        public GetPipelineRequest(Id id): base(r => r.Optional("id", id))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
    }

    public interface IGrokProcessorPatternsRequest : IRequest<GrokProcessorPatternsRequestParameters>
    {
    }

    public class GrokProcessorPatternsRequest : PlainRequestBase<GrokProcessorPatternsRequestParameters>, IGrokProcessorPatternsRequest
    {
        protected IGrokProcessorPatternsRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestProcessorGrok;
        protected override HttpMethod HttpMethod => HttpMethod.GET;
        protected override bool SupportsBody => false;
        ///<summary>/_ingest/processor/grok</summary>
        public GrokProcessorPatternsRequest(): base()
        {
        }
    }

    public interface IPutPipelineRequest : IRequest<PutPipelineRequestParameters>
    {
    }

    public class PutPipelineRequest : PlainRequestBase<PutPipelineRequestParameters>, IPutPipelineRequest
    {
        protected IPutPipelineRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestPutPipeline;
        protected override HttpMethod HttpMethod => HttpMethod.PUT;
        protected override bool SupportsBody => false;
        ///<summary>/_ingest/pipeline/{id}</summary>
        public PutPipelineRequest(Id id): base(r => r.Required("id", id))
        {
        }

        public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

        public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

        [JsonPropertyName("description")]
        public string Description { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }

        [JsonPropertyName("version")]
        public long Version { get; 
#if NET5_0
            init;
#else
            internal set; 
#endif
        }
    }

    public interface ISimulatePipelineRequest : IRequest<SimulatePipelineRequestParameters>
    {
    }

    public class SimulatePipelineRequest : PlainRequestBase<SimulatePipelineRequestParameters>, ISimulatePipelineRequest
    {
        protected ISimulatePipelineRequest Self => this;
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestSimulate;
        protected override HttpMethod HttpMethod => HttpMethod.POST;
        protected override bool SupportsBody => false;
        ///<summary>/_ingest/pipeline/_simulate</summary>
        public SimulatePipelineRequest(): base()
        {
        }

        ///<summary>/_ingest/pipeline/{id}/_simulate</summary>
        public SimulatePipelineRequest(Id id): base(r => r.Optional("id", id))
        {
        }

        public bool? Verbose { get => Q<bool?>("verbose"); set => Q("verbose", value); }
    }
}