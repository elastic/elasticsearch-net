// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Ingest
{
	[ConvertAs(typeof(DeletePipelineRequest))]
	public partial interface IDeletePipelineRequest : IRequest<DeletePipelineRequestParameters>
	{
	}

	public partial class DeletePipelineRequest : PlainRequestBase<DeletePipelineRequestParameters>, IDeletePipelineRequest
	{
		protected IDeletePipelineRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestDeletePipeline;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_ingest/pipeline/{id}</summary>
        public DeletePipelineRequest(Nest.Id id) : base(r => r.Required("id", id))
		{
		}

		[JsonIgnore]
		public Nest.Time? MasterTimeout { get => Q<Nest.Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Nest.Time? Timeout { get => Q<Nest.Time?>("timeout"); set => Q("timeout", value); }
	}

	[ConvertAs(typeof(GeoIpStatsRequest))]
	public partial interface IGeoIpStatsRequest : IRequest<GeoIpStatsRequestParameters>
	{
	}

	public partial class GeoIpStatsRequest : PlainRequestBase<GeoIpStatsRequestParameters>, IGeoIpStatsRequest
	{
		protected IGeoIpStatsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestGeoIpStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_ingest/geoip/stats</summary>
        public GeoIpStatsRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetPipelineRequest))]
	public partial interface IGetPipelineRequest : IRequest<GetPipelineRequestParameters>
	{
	}

	public partial class GetPipelineRequest : PlainRequestBase<GetPipelineRequestParameters>, IGetPipelineRequest
	{
		protected IGetPipelineRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestGetPipeline;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_ingest/pipeline</summary>
        public GetPipelineRequest() : base()
		{
		}

		///<summary>/_ingest/pipeline/{id}</summary>
        public GetPipelineRequest(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		[JsonIgnore]
		public Nest.Time? MasterTimeout { get => Q<Nest.Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public bool? Summary { get => Q<bool?>("summary"); set => Q("summary", value); }
	}

	[ConvertAs(typeof(ProcessorGrokRequest))]
	public partial interface IProcessorGrokRequest : IRequest<ProcessorGrokRequestParameters>
	{
	}

	public partial class ProcessorGrokRequest : PlainRequestBase<ProcessorGrokRequestParameters>, IProcessorGrokRequest
	{
		protected IProcessorGrokRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestProcessorGrok;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_ingest/processor/grok</summary>
        public ProcessorGrokRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(PutPipelineRequest))]
	public partial interface IPutPipelineRequest : IRequest<PutPipelineRequestParameters>
	{
	}

	public partial class PutPipelineRequest : PlainRequestBase<PutPipelineRequestParameters>, IPutPipelineRequest
	{
		protected IPutPipelineRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestPutPipeline;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_ingest/pipeline/{id}</summary>
        public PutPipelineRequest(Nest.Id id) : base(r => r.Required("id", id))
		{
		}

		[JsonIgnore]
		public Nest.Time? MasterTimeout { get => Q<Nest.Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Nest.Time? Timeout { get => Q<Nest.Time?>("timeout"); set => Q("timeout", value); }

		[JsonPropertyName("_meta")]
		public Nest.Metadata? Meta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("on_failure")]
		public IReadOnlyCollection<Nest.Ingest.ProcessorContainer>? OnFailure
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processors")]
		public IReadOnlyCollection<Nest.Ingest.ProcessorContainer>? Processors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Nest.VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(SimulateRequest))]
	public partial interface ISimulateRequest : IRequest<SimulateRequestParameters>
	{
	}

	public partial class SimulateRequest : PlainRequestBase<SimulateRequestParameters>, ISimulateRequest
	{
		protected ISimulateRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IngestSimulate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Docs is null && Pipeline is null;

		///<summary>/_ingest/pipeline/_simulate</summary>
        public SimulateRequest() : base()
		{
		}

		///<summary>/_ingest/pipeline/{id}/_simulate</summary>
        public SimulateRequest(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		[JsonIgnore]
		public bool? Verbose { get => Q<bool?>("verbose"); set => Q("verbose", value); }

		[JsonPropertyName("docs")]
		public IReadOnlyCollection<Nest.Ingest.Simulate.Document>? Docs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pipeline")]
		public Nest.Ingest.Pipeline? Pipeline
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}