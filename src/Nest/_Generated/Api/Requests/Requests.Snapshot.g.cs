// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<ICleanupRepositoryRequest, CleanupRepositoryRequest>))]
	public interface ICleanupRepositoryRequest : IRequest<CleanupRepositoryRequestParameters>
	{
	}

	public class CleanupRepositoryRequest : PlainRequestBase<CleanupRepositoryRequestParameters>, ICleanupRepositoryRequest
	{
		protected ICleanupRepositoryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotCleanupRepository;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/{repository}/_cleanup</summary>
        public CleanupRepositoryRequest(Name repository) : base(r => r.Required("repository", repository))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ICloneSnapshotRequest, CloneSnapshotRequest>))]
	public interface ICloneSnapshotRequest : IRequest<CloneSnapshotRequestParameters>
	{
	}

	public class CloneSnapshotRequest : PlainRequestBase<CloneSnapshotRequestParameters>, ICloneSnapshotRequest
	{
		protected ICloneSnapshotRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotClone;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_snapshot/{repository}/{snapshot}/_clone/{target_snapshot}</summary>
        public CloneSnapshotRequest(Name repository, Name snapshot, Name targetSnapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot).Required("target_snapshot", targetSnapshot))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonPropertyName("indices")]
		public string Indices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISnapshotRequest, SnapshotRequest>))]
	public interface ISnapshotRequest : IRequest<SnapshotRequestParameters>
	{
	}

	public class SnapshotRequest : PlainRequestBase<SnapshotRequestParameters>, ISnapshotRequest
	{
		protected ISnapshotRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotCreate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => IgnoreUnavailable is null && IncludeGlobalState is null && Partial is null;
		///<summary>/_snapshot/{repository}/{snapshot}</summary>
        public SnapshotRequest(Name repository, Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

		[JsonPropertyName("ignore_unavailable")]
		public bool? IgnoreUnavailable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_global_state")]
		public bool? IncludeGlobalState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partial")]
		public bool? Partial
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ICreateRepositoryRequest, CreateRepositoryRequest>))]
	public interface ICreateRepositoryRequest : IRequest<CreateRepositoryRequestParameters>
	{
	}

	public class CreateRepositoryRequest : PlainRequestBase<CreateRepositoryRequestParameters>, ICreateRepositoryRequest
	{
		protected ICreateRepositoryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotCreateRepository;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;
		///<summary>/_snapshot/{repository}</summary>
        public CreateRepositoryRequest(Name repository) : base(r => r.Required("repository", repository))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public bool? Verify { get => Q<bool?>("verify"); set => Q("verify", value); }

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteSnapshotRequest, DeleteSnapshotRequest>))]
	public interface IDeleteSnapshotRequest : IRequest<DeleteSnapshotRequestParameters>
	{
	}

	public class DeleteSnapshotRequest : PlainRequestBase<DeleteSnapshotRequestParameters>, IDeleteSnapshotRequest
	{
		protected IDeleteSnapshotRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/{repository}/{snapshot}</summary>
        public DeleteSnapshotRequest(Name repository, Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteRepositoryRequest, DeleteRepositoryRequest>))]
	public interface IDeleteRepositoryRequest : IRequest<DeleteRepositoryRequestParameters>
	{
	}

	public class DeleteRepositoryRequest : PlainRequestBase<DeleteRepositoryRequestParameters>, IDeleteRepositoryRequest
	{
		protected IDeleteRepositoryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotDeleteRepository;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/{repository}</summary>
        public DeleteRepositoryRequest(Names repository) : base(r => r.Required("repository", repository))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetSnapshotRequest, GetSnapshotRequest>))]
	public interface IGetSnapshotRequest : IRequest<GetSnapshotRequestParameters>
	{
	}

	public class GetSnapshotRequest : PlainRequestBase<GetSnapshotRequestParameters>, IGetSnapshotRequest
	{
		protected IGetSnapshotRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/{repository}/{snapshot}</summary>
        public GetSnapshotRequest(Name repository, Names snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
		{
		}

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public bool? Verbose { get => Q<bool?>("verbose"); set => Q("verbose", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetRepositoryRequest, GetRepositoryRequest>))]
	public interface IGetRepositoryRequest : IRequest<GetRepositoryRequestParameters>
	{
	}

	public class GetRepositoryRequest : PlainRequestBase<GetRepositoryRequestParameters>, IGetRepositoryRequest
	{
		protected IGetRepositoryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotGetRepository;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot</summary>
        public GetRepositoryRequest() : base()
		{
		}

		///<summary>/_snapshot/{repository}</summary>
        public GetRepositoryRequest(Names repository) : base(r => r.Optional("repository", repository))
		{
		}

		[JsonIgnore]
		public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IRestoreRequest, RestoreRequest>))]
	public interface IRestoreRequest : IRequest<RestoreRequestParameters>
	{
	}

	public class RestoreRequest : PlainRequestBase<RestoreRequestParameters>, IRestoreRequest
	{
		protected IRestoreRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotRestore;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => IgnoreUnavailable is null && IncludeAliases is null && IncludeGlobalState is null && Partial is null && RenamePattern is null && RenameReplacement is null;
		///<summary>/_snapshot/{repository}/{snapshot}/_restore</summary>
        public RestoreRequest(Name repository, Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

		[JsonPropertyName("ignore_unavailable")]
		public bool? IgnoreUnavailable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_aliases")]
		public bool? IncludeAliases
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_global_state")]
		public bool? IncludeGlobalState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partial")]
		public bool? Partial
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rename_pattern")]
		public string? RenamePattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rename_replacement")]
		public string? RenameReplacement
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<ISnapshotStatusRequest, SnapshotStatusRequest>))]
	public interface ISnapshotStatusRequest : IRequest<SnapshotStatusRequestParameters>
	{
	}

	public class SnapshotStatusRequest : PlainRequestBase<SnapshotStatusRequestParameters>, ISnapshotStatusRequest
	{
		protected ISnapshotStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/_status</summary>
        public SnapshotStatusRequest() : base()
		{
		}

		///<summary>/_snapshot/{repository}/_status</summary>
        public SnapshotStatusRequest(Name repository) : base(r => r.Optional("repository", repository))
		{
		}

		///<summary>/_snapshot/{repository}/{snapshot}/_status</summary>
        public SnapshotStatusRequest(Name repository, Names snapshot) : base(r => r.Optional("repository", repository).Optional("snapshot", snapshot))
		{
		}

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IVerifyRepositoryRequest, VerifyRepositoryRequest>))]
	public interface IVerifyRepositoryRequest : IRequest<VerifyRepositoryRequestParameters>
	{
	}

	public class VerifyRepositoryRequest : PlainRequestBase<VerifyRepositoryRequestParameters>, IVerifyRepositoryRequest
	{
		protected IVerifyRepositoryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotVerifyRepository;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_snapshot/{repository}/_verify</summary>
        public VerifyRepositoryRequest(Name repository) : base(r => r.Required("repository", repository))
		{
		}

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }
	}
}