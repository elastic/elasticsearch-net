// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteLicenseRequest, DeleteLicenseRequest>))]
	public interface IDeleteLicenseRequest : IRequest<DeleteLicenseRequestParameters>
	{
	}

	public class DeleteLicenseRequest : PlainRequestBase<DeleteLicenseRequestParameters>, IDeleteLicenseRequest
	{
		protected IDeleteLicenseRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicenseDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license</summary>
        public DeleteLicenseRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetLicenseRequest, GetLicenseRequest>))]
	public interface IGetLicenseRequest : IRequest<GetLicenseRequestParameters>
	{
	}

	public class GetLicenseRequest : PlainRequestBase<GetLicenseRequestParameters>, IGetLicenseRequest
	{
		protected IGetLicenseRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicenseGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license</summary>
        public GetLicenseRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? AcceptEnterprise { get => Q<bool?>("accept_enterprise"); set => Q("accept_enterprise", value); }

		[JsonIgnore]
		public bool? Local { get => Q<bool?>("local"); set => Q("local", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetBasicLicenseStatusRequest, GetBasicLicenseStatusRequest>))]
	public interface IGetBasicLicenseStatusRequest : IRequest<GetBasicLicenseStatusRequestParameters>
	{
	}

	public class GetBasicLicenseStatusRequest : PlainRequestBase<GetBasicLicenseStatusRequestParameters>, IGetBasicLicenseStatusRequest
	{
		protected IGetBasicLicenseStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicenseGetBasicStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license/basic_status</summary>
        public GetBasicLicenseStatusRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetTrialLicenseStatusRequest, GetTrialLicenseStatusRequest>))]
	public interface IGetTrialLicenseStatusRequest : IRequest<GetTrialLicenseStatusRequestParameters>
	{
	}

	public class GetTrialLicenseStatusRequest : PlainRequestBase<GetTrialLicenseStatusRequestParameters>, IGetTrialLicenseStatusRequest
	{
		protected IGetTrialLicenseStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicenseGetTrialStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license/trial_status</summary>
        public GetTrialLicenseStatusRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPostLicenseRequest, PostLicenseRequest>))]
	public interface IPostLicenseRequest : IRequest<PostLicenseRequestParameters>
	{
	}

	public class PostLicenseRequest : PlainRequestBase<PostLicenseRequestParameters>, IPostLicenseRequest
	{
		protected IPostLicenseRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicensePost;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => License is null && Licenses is null;
		///<summary>/_license</summary>
        public PostLicenseRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? Acknowledge { get => Q<bool?>("acknowledge"); set => Q("acknowledge", value); }

		[JsonPropertyName("license")]
		public License? License
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licenses")]
		public Array? Licenses
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IStartBasicLicenseRequest, StartBasicLicenseRequest>))]
	public interface IStartBasicLicenseRequest : IRequest<StartBasicLicenseRequestParameters>
	{
	}

	public class StartBasicLicenseRequest : PlainRequestBase<StartBasicLicenseRequestParameters>, IStartBasicLicenseRequest
	{
		protected IStartBasicLicenseRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicensePostStartBasic;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license/start_basic</summary>
        public StartBasicLicenseRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? Acknowledge { get => Q<bool?>("acknowledge"); set => Q("acknowledge", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IStartTrialLicenseRequest, StartTrialLicenseRequest>))]
	public interface IStartTrialLicenseRequest : IRequest<StartTrialLicenseRequestParameters>
	{
	}

	public class StartTrialLicenseRequest : PlainRequestBase<StartTrialLicenseRequestParameters>, IStartTrialLicenseRequest
	{
		protected IStartTrialLicenseRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.LicensePostStartTrial;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_license/start_trial</summary>
        public StartTrialLicenseRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? Acknowledge { get => Q<bool?>("acknowledge"); set => Q("acknowledge", value); }

		[JsonIgnore]
		public string? TypeQueryString { get => Q<string?>("type_query_string"); set => Q("type_query_string", value); }
	}
}