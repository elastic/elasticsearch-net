// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Cat
{
	[ConvertAs(typeof(AliasesRequest))]
	public partial interface IAliasesRequest : IRequest<AliasesRequestParameters>
	{
	}

	public partial class AliasesRequest : PlainRequestBase<AliasesRequestParameters>, IAliasesRequest
	{
		protected IAliasesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAliases;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/aliases</summary>
        public AliasesRequest() : base()
		{
		}

		///<summary>/_cat/aliases/{name}</summary>
        public AliasesRequest(Nest.Names? name) : base(r => r.Optional("name", name))
		{
		}

		[JsonIgnore]
		public Nest.ExpandWildcards? ExpandWildcards { get => Q<Nest.ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }
	}

	[ConvertAs(typeof(AllocationRequest))]
	public partial interface IAllocationRequest : IRequest<AllocationRequestParameters>
	{
	}

	public partial class AllocationRequest : PlainRequestBase<AllocationRequestParameters>, IAllocationRequest
	{
		protected IAllocationRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatAllocation;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/allocation</summary>
        public AllocationRequest() : base()
		{
		}

		///<summary>/_cat/allocation/{node_id}</summary>
        public AllocationRequest(Nest.NodeIds? node_id) : base(r => r.Optional("node_id", node_id))
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(CountRequest))]
	public partial interface ICountRequest : IRequest<CountRequestParameters>
	{
	}

	public partial class CountRequest : PlainRequestBase<CountRequestParameters>, ICountRequest
	{
		protected ICountRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatCount;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/count</summary>
        public CountRequest() : base()
		{
		}

		///<summary>/_cat/count/{index}</summary>
        public CountRequest(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}
	}

	[ConvertAs(typeof(FielddataRequest))]
	public partial interface IFielddataRequest : IRequest<FielddataRequestParameters>
	{
	}

	public partial class FielddataRequest : PlainRequestBase<FielddataRequestParameters>, IFielddataRequest
	{
		protected IFielddataRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatFielddata;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/fielddata</summary>
        public FielddataRequest() : base()
		{
		}

		///<summary>/_cat/fielddata/{fields}</summary>
        public FielddataRequest(Nest.Fields? fields) : base(r => r.Optional("fields", fields))
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(HealthRequest))]
	public partial interface IHealthRequest : IRequest<HealthRequestParameters>
	{
	}

	public partial class HealthRequest : PlainRequestBase<HealthRequestParameters>, IHealthRequest
	{
		protected IHealthRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHealth;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/health</summary>
        public HealthRequest() : base()
		{
		}

		[JsonIgnore]
		public bool? IncludeTimestamp { get => Q<bool?>("include_timestamp"); set => Q("include_timestamp", value); }

		[JsonIgnore]
		public bool? Ts { get => Q<bool?>("ts"); set => Q("ts", value); }
	}

	[ConvertAs(typeof(HelpRequest))]
	public partial interface IHelpRequest : IRequest<HelpRequestParameters>
	{
	}

	public partial class HelpRequest : PlainRequestBase<HelpRequestParameters>, IHelpRequest
	{
		protected IHelpRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatHelp;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat</summary>
        public HelpRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(IndicesRequest))]
	public partial interface IIndicesRequest : IRequest<IndicesRequestParameters>
	{
	}

	public partial class IndicesRequest : PlainRequestBase<IndicesRequestParameters>, IIndicesRequest
	{
		protected IIndicesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatIndices;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/indices</summary>
        public IndicesRequest() : base()
		{
		}

		///<summary>/_cat/indices/{index}</summary>
        public IndicesRequest(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }

		[JsonIgnore]
		public Nest.ExpandWildcards? ExpandWildcards { get => Q<Nest.ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public Nest.Health? Health { get => Q<Nest.Health?>("health"); set => Q("health", value); }

		[JsonIgnore]
		public bool? IncludeUnloadedSegments { get => Q<bool?>("include_unloaded_segments"); set => Q("include_unloaded_segments", value); }

		[JsonIgnore]
		public bool? Pri { get => Q<bool?>("pri"); set => Q("pri", value); }
	}

	[ConvertAs(typeof(MasterRequest))]
	public partial interface IMasterRequest : IRequest<MasterRequestParameters>
	{
	}

	public partial class MasterRequest : PlainRequestBase<MasterRequestParameters>, IMasterRequest
	{
		protected IMasterRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMaster;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/master</summary>
        public MasterRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(MlDataFrameAnalyticsRequest))]
	public partial interface IMlDataFrameAnalyticsRequest : IRequest<MlDataFrameAnalyticsRequestParameters>
	{
	}

	public partial class MlDataFrameAnalyticsRequest : PlainRequestBase<MlDataFrameAnalyticsRequestParameters>, IMlDataFrameAnalyticsRequest
	{
		protected IMlDataFrameAnalyticsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlDataFrameAnalytics;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/ml/data_frame/analytics</summary>
        public MlDataFrameAnalyticsRequest() : base()
		{
		}

		///<summary>/_cat/ml/data_frame/analytics/{id}</summary>
        public MlDataFrameAnalyticsRequest(Nest.Id? id) : base(r => r.Optional("id", id))
		{
		}

		[JsonIgnore]
		public bool? AllowNoMatch { get => Q<bool?>("allow_no_match"); set => Q("allow_no_match", value); }

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(MlDatafeedsRequest))]
	public partial interface IMlDatafeedsRequest : IRequest<MlDatafeedsRequestParameters>
	{
	}

	public partial class MlDatafeedsRequest : PlainRequestBase<MlDatafeedsRequestParameters>, IMlDatafeedsRequest
	{
		protected IMlDatafeedsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlDatafeeds;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/ml/datafeeds</summary>
        public MlDatafeedsRequest() : base()
		{
		}

		///<summary>/_cat/ml/datafeeds/{datafeed_id}</summary>
        public MlDatafeedsRequest(Nest.Id? datafeed_id) : base(r => r.Optional("datafeed_id", datafeed_id))
		{
		}

		[JsonIgnore]
		public bool? AllowNoDatafeeds { get => Q<bool?>("allow_no_datafeeds"); set => Q("allow_no_datafeeds", value); }
	}

	[ConvertAs(typeof(MlJobsRequest))]
	public partial interface IMlJobsRequest : IRequest<MlJobsRequestParameters>
	{
	}

	public partial class MlJobsRequest : PlainRequestBase<MlJobsRequestParameters>, IMlJobsRequest
	{
		protected IMlJobsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlJobs;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/ml/anomaly_detectors</summary>
        public MlJobsRequest() : base()
		{
		}

		///<summary>/_cat/ml/anomaly_detectors/{job_id}</summary>
        public MlJobsRequest(Nest.Id? job_id) : base(r => r.Optional("job_id", job_id))
		{
		}

		[JsonIgnore]
		public bool? AllowNoJobs { get => Q<bool?>("allow_no_jobs"); set => Q("allow_no_jobs", value); }

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(MlTrainedModelsRequest))]
	public partial interface IMlTrainedModelsRequest : IRequest<MlTrainedModelsRequestParameters>
	{
	}

	public partial class MlTrainedModelsRequest : PlainRequestBase<MlTrainedModelsRequestParameters>, IMlTrainedModelsRequest
	{
		protected IMlTrainedModelsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatMlTrainedModels;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/ml/trained_models</summary>
        public MlTrainedModelsRequest() : base()
		{
		}

		///<summary>/_cat/ml/trained_models/{model_id}</summary>
        public MlTrainedModelsRequest(Nest.Id? model_id) : base(r => r.Optional("model_id", model_id))
		{
		}

		[JsonIgnore]
		public bool? AllowNoMatch { get => Q<bool?>("allow_no_match"); set => Q("allow_no_match", value); }

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }

		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }
	}

	[ConvertAs(typeof(NodeattrsRequest))]
	public partial interface INodeattrsRequest : IRequest<NodeattrsRequestParameters>
	{
	}

	public partial class NodeattrsRequest : PlainRequestBase<NodeattrsRequestParameters>, INodeattrsRequest
	{
		protected INodeattrsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodeattrs;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/nodeattrs</summary>
        public NodeattrsRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(NodesRequest))]
	public partial interface INodesRequest : IRequest<NodesRequestParameters>
	{
	}

	public partial class NodesRequest : PlainRequestBase<NodesRequestParameters>, INodesRequest
	{
		protected INodesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatNodes;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/nodes</summary>
        public NodesRequest() : base()
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }

		[JsonIgnore]
		public Union<bool, string>? FullId { get => Q<Union<bool, string>?>("full_id"); set => Q("full_id", value); }
	}

	[ConvertAs(typeof(PendingTasksRequest))]
	public partial interface IPendingTasksRequest : IRequest<PendingTasksRequestParameters>
	{
	}

	public partial class PendingTasksRequest : PlainRequestBase<PendingTasksRequestParameters>, IPendingTasksRequest
	{
		protected IPendingTasksRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatPendingTasks;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/pending_tasks</summary>
        public PendingTasksRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(PluginsRequest))]
	public partial interface IPluginsRequest : IRequest<PluginsRequestParameters>
	{
	}

	public partial class PluginsRequest : PlainRequestBase<PluginsRequestParameters>, IPluginsRequest
	{
		protected IPluginsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatPlugins;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/plugins</summary>
        public PluginsRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(RecoveryRequest))]
	public partial interface IRecoveryRequest : IRequest<RecoveryRequestParameters>
	{
	}

	public partial class RecoveryRequest : PlainRequestBase<RecoveryRequestParameters>, IRecoveryRequest
	{
		protected IRecoveryRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatRecovery;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/recovery</summary>
        public RecoveryRequest() : base()
		{
		}

		///<summary>/_cat/recovery/{index}</summary>
        public RecoveryRequest(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public bool? ActiveOnly { get => Q<bool?>("active_only"); set => Q("active_only", value); }

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }

		[JsonIgnore]
		public bool? Detailed { get => Q<bool?>("detailed"); set => Q("detailed", value); }
	}

	[ConvertAs(typeof(RepositoriesRequest))]
	public partial interface IRepositoriesRequest : IRequest<RepositoriesRequestParameters>
	{
	}

	public partial class RepositoriesRequest : PlainRequestBase<RepositoriesRequestParameters>, IRepositoriesRequest
	{
		protected IRepositoriesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatRepositories;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/repositories</summary>
        public RepositoriesRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(SegmentsRequest))]
	public partial interface ISegmentsRequest : IRequest<SegmentsRequestParameters>
	{
	}

	public partial class SegmentsRequest : PlainRequestBase<SegmentsRequestParameters>, ISegmentsRequest
	{
		protected ISegmentsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatSegments;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/segments</summary>
        public SegmentsRequest() : base()
		{
		}

		///<summary>/_cat/segments/{index}</summary>
        public SegmentsRequest(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(ShardsRequest))]
	public partial interface IShardsRequest : IRequest<ShardsRequestParameters>
	{
	}

	public partial class ShardsRequest : PlainRequestBase<ShardsRequestParameters>, IShardsRequest
	{
		protected IShardsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatShards;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/shards</summary>
        public ShardsRequest() : base()
		{
		}

		///<summary>/_cat/shards/{index}</summary>
        public ShardsRequest(Nest.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		[JsonIgnore]
		public Nest.Bytes? Bytes { get => Q<Nest.Bytes?>("bytes"); set => Q("bytes", value); }
	}

	[ConvertAs(typeof(SnapshotsRequest))]
	public partial interface ISnapshotsRequest : IRequest<SnapshotsRequestParameters>
	{
	}

	public partial class SnapshotsRequest : PlainRequestBase<SnapshotsRequestParameters>, ISnapshotsRequest
	{
		protected ISnapshotsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatSnapshots;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/snapshots</summary>
        public SnapshotsRequest() : base()
		{
		}

		///<summary>/_cat/snapshots/{repository}</summary>
        public SnapshotsRequest(Nest.Names? repository) : base(r => r.Optional("repository", repository))
		{
		}

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }
	}

	[ConvertAs(typeof(TasksRequest))]
	public partial interface ITasksRequest : IRequest<TasksRequestParameters>
	{
	}

	public partial class TasksRequest : PlainRequestBase<TasksRequestParameters>, ITasksRequest
	{
		protected ITasksRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTasks;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/tasks</summary>
        public TasksRequest() : base()
		{
		}

		[JsonIgnore]
		public IEnumerable<string>? Actions { get => Q<IEnumerable<string>?>("actions"); set => Q("actions", value); }

		[JsonIgnore]
		public bool? Detailed { get => Q<bool?>("detailed"); set => Q("detailed", value); }

		[JsonIgnore]
		public IEnumerable<string>? NodeId { get => Q<IEnumerable<string>?>("node_id"); set => Q("node_id", value); }

		[JsonIgnore]
		public long? ParentTask { get => Q<long?>("parent_task"); set => Q("parent_task", value); }
	}

	[ConvertAs(typeof(TemplatesRequest))]
	public partial interface ITemplatesRequest : IRequest<TemplatesRequestParameters>
	{
	}

	public partial class TemplatesRequest : PlainRequestBase<TemplatesRequestParameters>, ITemplatesRequest
	{
		protected ITemplatesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTemplates;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/templates</summary>
        public TemplatesRequest() : base()
		{
		}

		///<summary>/_cat/templates/{name}</summary>
        public TemplatesRequest(Nest.Name? name) : base(r => r.Optional("name", name))
		{
		}
	}

	[ConvertAs(typeof(ThreadPoolRequest))]
	public partial interface IThreadPoolRequest : IRequest<ThreadPoolRequestParameters>
	{
	}

	public partial class ThreadPoolRequest : PlainRequestBase<ThreadPoolRequestParameters>, IThreadPoolRequest
	{
		protected IThreadPoolRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatThreadPool;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/thread_pool</summary>
        public ThreadPoolRequest() : base()
		{
		}

		///<summary>/_cat/thread_pool/{thread_pool_patterns}</summary>
        public ThreadPoolRequest(Nest.Names? thread_pool_patterns) : base(r => r.Optional("thread_pool_patterns", thread_pool_patterns))
		{
		}

		[JsonIgnore]
		public Union<Nest.Size, bool>? Size { get => Q<Union<Nest.Size, bool>?>("size"); set => Q("size", value); }
	}

	[ConvertAs(typeof(TransformsRequest))]
	public partial interface ITransformsRequest : IRequest<TransformsRequestParameters>
	{
	}

	public partial class TransformsRequest : PlainRequestBase<TransformsRequestParameters>, ITransformsRequest
	{
		protected ITransformsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.CatTransforms;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_cat/transforms</summary>
        public TransformsRequest() : base()
		{
		}

		///<summary>/_cat/transforms/{transform_id}</summary>
        public TransformsRequest(Nest.Id? transform_id) : base(r => r.Optional("transform_id", transform_id))
		{
		}

		[JsonIgnore]
		public bool? AllowNoMatch { get => Q<bool?>("allow_no_match"); set => Q("allow_no_match", value); }

		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }
	}
}