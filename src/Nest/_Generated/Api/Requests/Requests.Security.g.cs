// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;
using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteRoleMappingRequest, DeleteRoleMappingRequest>))]
	public interface IDeleteRoleMappingRequest : IRequest<DeleteRoleMappingRequestParameters>
	{
	}

	public class DeleteRoleMappingRequest : PlainRequestBase<DeleteRoleMappingRequestParameters>, IDeleteRoleMappingRequest
	{
		protected IDeleteRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_security/role_mapping/{name}</summary>
        public DeleteRoleMappingRequest(Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetRoleMappingRequest, GetRoleMappingRequest>))]
	public interface IGetRoleMappingRequest : IRequest<GetRoleMappingRequestParameters>
	{
	}

	public class GetRoleMappingRequest : PlainRequestBase<GetRoleMappingRequestParameters>, IGetRoleMappingRequest
	{
		protected IGetRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_security/role_mapping/{name}</summary>
        public GetRoleMappingRequest(Name name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role_mapping</summary>
        public GetRoleMappingRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPutRoleMappingRequest, PutRoleMappingRequest>))]
	public interface IPutRoleMappingRequest : IRequest<PutRoleMappingRequestParameters>
	{
	}

	public class PutRoleMappingRequest : PlainRequestBase<PutRoleMappingRequestParameters>, IPutRoleMappingRequest
	{
		protected IPutRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Enabled is null && Metadata is null && Roles is null && Rules is null && RunAs is null;
		///<summary>/_security/role_mapping/{name}</summary>
        public PutRoleMappingRequest(Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("metadata")]
		public IDictionary<string, object>? Metadata
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("roles")]
		public IEnumerable<string>? Roles
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rules")]
		public RoleMappingRuleBase? Rules
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("run_as")]
		public IEnumerable<string>? RunAs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPutUserRequest, PutUserRequest>))]
	public interface IPutUserRequest : IRequest<PutUserRequestParameters>
	{
	}

	public class PutUserRequest : PlainRequestBase<PutUserRequestParameters>, IPutUserRequest
	{
		protected IPutUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Metadata is null && Password is null && PasswordHash is null && Roles is null && Enabled is null;
		///<summary>/_security/user/{username}</summary>
        public PutUserRequest(Name username) : base(r => r.Required("username", username))
		{
		}

		[JsonIgnore]
		public Refresh? Refresh { get => Q<Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonPropertyName("metadata")]
		public IDictionary<string, object>? Metadata
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("password")]
		public string? Password
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("password_hash")]
		public string? PasswordHash
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("roles")]
		public IEnumerable<string>? Roles
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}
}