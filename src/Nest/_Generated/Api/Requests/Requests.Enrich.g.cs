// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using Elastic.Transport;

#nullable restore
namespace Nest
{
	[JsonInterfaceConverter(typeof(InterfaceConverter<IDeleteEnrichPolicyRequest, DeleteEnrichPolicyRequest>))]
	public interface IDeleteEnrichPolicyRequest : IRequest<DeleteEnrichPolicyRequestParameters>
	{
	}

	public class DeleteEnrichPolicyRequest : PlainRequestBase<DeleteEnrichPolicyRequestParameters>, IDeleteEnrichPolicyRequest
	{
		protected IDeleteEnrichPolicyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichDeletePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_enrich/policy/{name}</summary>
        public DeleteEnrichPolicyRequest(Name name) : base(r => r.Required("name", name))
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IExecuteEnrichPolicyRequest, ExecuteEnrichPolicyRequest>))]
	public interface IExecuteEnrichPolicyRequest : IRequest<ExecuteEnrichPolicyRequestParameters>
	{
	}

	public class ExecuteEnrichPolicyRequest : PlainRequestBase<ExecuteEnrichPolicyRequestParameters>, IExecuteEnrichPolicyRequest
	{
		protected IExecuteEnrichPolicyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichExecutePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_enrich/policy/{name}/_execute</summary>
        public ExecuteEnrichPolicyRequest(Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IGetEnrichPolicyRequest, GetEnrichPolicyRequest>))]
	public interface IGetEnrichPolicyRequest : IRequest<GetEnrichPolicyRequestParameters>
	{
	}

	public class GetEnrichPolicyRequest : PlainRequestBase<GetEnrichPolicyRequestParameters>, IGetEnrichPolicyRequest
	{
		protected IGetEnrichPolicyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichGetPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_enrich/policy/{name}</summary>
        public GetEnrichPolicyRequest(Names name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_enrich/policy/</summary>
        public GetEnrichPolicyRequest() : base()
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IPutEnrichPolicyRequest, PutEnrichPolicyRequest>))]
	public interface IPutEnrichPolicyRequest : IRequest<PutEnrichPolicyRequestParameters>
	{
	}

	public class PutEnrichPolicyRequest : PlainRequestBase<PutEnrichPolicyRequestParameters>, IPutEnrichPolicyRequest
	{
		protected IPutEnrichPolicyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichPutPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_enrich/policy/{name}</summary>
        public PutEnrichPolicyRequest(Name name) : base(r => r.Required("name", name))
		{
		}
	}

	[JsonInterfaceConverter(typeof(InterfaceConverter<IEnrichStatsRequest, EnrichStatsRequest>))]
	public interface IEnrichStatsRequest : IRequest<EnrichStatsRequestParameters>
	{
	}

	public class EnrichStatsRequest : PlainRequestBase<EnrichStatsRequestParameters>, IEnrichStatsRequest
	{
		protected IEnrichStatsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;
		///<summary>/_enrich/_stats</summary>
        public EnrichStatsRequest() : base()
		{
		}
	}
}