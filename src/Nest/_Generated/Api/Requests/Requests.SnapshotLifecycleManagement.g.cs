// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Slm
{
	[ConvertAs(typeof(DeleteLifecycleRequest))]
	public partial interface IDeleteLifecycleRequest : IRequest<DeleteLifecycleRequestParameters>
	{
	}

	public partial class DeleteLifecycleRequest : PlainRequestBase<DeleteLifecycleRequestParameters>, IDeleteLifecycleRequest
	{
		protected IDeleteLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementDeleteLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_slm/policy/{policy_id}</summary>
        public DeleteLifecycleRequest(Nest.Name policy_id) : base(r => r.Required("policy_id", policy_id))
		{
		}
	}

	[ConvertAs(typeof(ExecuteLifecycleRequest))]
	public partial interface IExecuteLifecycleRequest : IRequest<ExecuteLifecycleRequestParameters>
	{
	}

	public partial class ExecuteLifecycleRequest : PlainRequestBase<ExecuteLifecycleRequestParameters>, IExecuteLifecycleRequest
	{
		protected IExecuteLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementExecuteLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_slm/policy/{policy_id}/_execute</summary>
        public ExecuteLifecycleRequest(Nest.Name policy_id) : base(r => r.Required("policy_id", policy_id))
		{
		}
	}

	[ConvertAs(typeof(ExecuteRetentionRequest))]
	public partial interface IExecuteRetentionRequest : IRequest<ExecuteRetentionRequestParameters>
	{
	}

	public partial class ExecuteRetentionRequest : PlainRequestBase<ExecuteRetentionRequestParameters>, IExecuteRetentionRequest
	{
		protected IExecuteRetentionRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementExecuteRetention;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/_execute_retention</summary>
        public ExecuteRetentionRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetLifecycleRequest))]
	public partial interface IGetLifecycleRequest : IRequest<GetLifecycleRequestParameters>
	{
	}

	public partial class GetLifecycleRequest : PlainRequestBase<GetLifecycleRequestParameters>, IGetLifecycleRequest
	{
		protected IGetLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementGetLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/policy/{policy_id}</summary>
        public GetLifecycleRequest(Nest.Names? policy_id) : base(r => r.Optional("policy_id", policy_id))
		{
		}

		///<summary>/_slm/policy</summary>
        public GetLifecycleRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetStatsRequest))]
	public partial interface IGetStatsRequest : IRequest<GetStatsRequestParameters>
	{
	}

	public partial class GetStatsRequest : PlainRequestBase<GetStatsRequestParameters>, IGetStatsRequest
	{
		protected IGetStatsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementGetStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/stats</summary>
        public GetStatsRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetStatusRequest))]
	public partial interface IGetStatusRequest : IRequest<GetStatusRequestParameters>
	{
	}

	public partial class GetStatusRequest : PlainRequestBase<GetStatusRequestParameters>, IGetStatusRequest
	{
		protected IGetStatusRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementGetStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/status</summary>
        public GetStatusRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(PutLifecycleRequest))]
	public partial interface IPutLifecycleRequest : IRequest<PutLifecycleRequestParameters>
	{
	}

	public partial class PutLifecycleRequest : PlainRequestBase<PutLifecycleRequestParameters>, IPutLifecycleRequest
	{
		protected IPutLifecycleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementPutLifecycle;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_slm/policy/{policy_id}</summary>
        public PutLifecycleRequest(Nest.Name policy_id) : base(r => r.Required("policy_id", policy_id))
		{
		}

		[JsonPropertyName("config")]
		public Nest.Slm.Configuration? Config
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repository")]
		public string? Repository
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retention")]
		public Nest.Slm.Retention? Retention
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("schedule")]
		public Nest.Watcher.CronExpression? Schedule
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(StartRequest))]
	public partial interface IStartRequest : IRequest<StartRequestParameters>
	{
	}

	public partial class StartRequest : PlainRequestBase<StartRequestParameters>, IStartRequest
	{
		protected IStartRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementStart;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/start</summary>
        public StartRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(StopRequest))]
	public partial interface IStopRequest : IRequest<StopRequestParameters>
	{
	}

	public partial class StopRequest : PlainRequestBase<StopRequestParameters>, IStopRequest
	{
		protected IStopRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SnapshotLifecycleManagementStop;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_slm/stop</summary>
        public StopRequest() : base()
		{
		}
	}
}