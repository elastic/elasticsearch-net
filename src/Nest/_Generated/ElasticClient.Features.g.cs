// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Features
{
	public class FeaturesNamespace : NamespacedClientProxy
	{
		internal FeaturesNamespace(ElasticClient client) : base(client)
		{
		}

		public GetFeaturesResponse Get(IGetFeaturesRequest request) => DoRequest<IGetFeaturesRequest, GetFeaturesResponse>(request, request.RequestParameters);
		public Task<GetFeaturesResponse> GetAsync(IGetFeaturesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetFeaturesRequest, GetFeaturesResponse>(request, request.RequestParameters, cancellationToken);
		public GetFeaturesResponse Get(Func<GetFeaturesDescriptor, IGetFeaturesRequest> selector = null) => Get(selector.InvokeOrDefault(new GetFeaturesDescriptor()));
		public Task<GetFeaturesResponse> GetAsync(Func<GetFeaturesDescriptor, IGetFeaturesRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync(selector.InvokeOrDefault(new GetFeaturesDescriptor()), cancellationToken);
		public ResetFeaturesResponse Reset(IResetFeaturesRequest request) => DoRequest<IResetFeaturesRequest, ResetFeaturesResponse>(request, request.RequestParameters);
		public Task<ResetFeaturesResponse> ResetAsync(IResetFeaturesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IResetFeaturesRequest, ResetFeaturesResponse>(request, request.RequestParameters, cancellationToken);
		public ResetFeaturesResponse Reset(Func<ResetFeaturesDescriptor, IResetFeaturesRequest> selector = null) => Reset(selector.InvokeOrDefault(new ResetFeaturesDescriptor()));
		public Task<ResetFeaturesResponse> ResetAsync(Func<ResetFeaturesDescriptor, IResetFeaturesRequest> selector = null, CancellationToken cancellationToken = default) => ResetAsync(selector.InvokeOrDefault(new ResetFeaturesDescriptor()), cancellationToken);
	}
}