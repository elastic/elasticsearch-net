// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Nodes.Info
{
	public partial class NodeInfo
	{
		[JsonPropertyName("aggregations")]
		public Dictionary<string, Nest.Nodes.Info.NodeInfoAggregation>? Aggregations
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("attributes")]
		public Dictionary<string, string> Attributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_flavor")]
		public string BuildFlavor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_hash")]
		public string BuildHash
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_type")]
		public string BuildType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("host")]
		public Nest.Host Host
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("http")]
		public Nest.Nodes.Info.NodeInfoHttp? Http
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public Nest.Nodes.Info.NodeInfoIngest? Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ip")]
		public Nest.Ip Ip
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("jvm")]
		public Nest.Nodes.Info.NodeJvmInfo? Jvm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modules")]
		public IReadOnlyCollection<Nest.PluginStats>? Modules
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Nest.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("network")]
		public Nest.Nodes.Info.NodeInfoNetwork? Network
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("os")]
		public Nest.Nodes.Info.NodeOperatingSystemInfo? Os
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("plugins")]
		public IReadOnlyCollection<Nest.PluginStats>? Plugins
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("process")]
		public Nest.Nodes.Info.NodeProcessInfo? Process
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("roles")]
		public Nest.NodeRoles Roles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings")]
		public Nest.Nodes.Info.NodeInfoSettings? Settings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("thread_pool")]
		public Dictionary<string, Nest.Nodes.Info.NodeThreadPoolInfo>? ThreadPool
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_indexing_buffer")]
		public long? TotalIndexingBuffer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_indexing_buffer_in_bytes")]
		public Nest.ByteSize? TotalIndexingBufferInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport")]
		public Nest.Nodes.Info.NodeInfoTransport? Transport
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public Nest.TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Nest.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoAction
	{
		[JsonPropertyName("destructive_requires_name")]
		public string DestructiveRequiresName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoAggregation
	{
		[JsonPropertyName("types")]
		public IReadOnlyCollection<string> Types
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoBootstrap
	{
		[JsonPropertyName("memory_lock")]
		public string MemoryLock
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoClient
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoDiscover
	{
		[JsonPropertyName("seed_hosts")]
		public string SeedHosts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoHttp
	{
		[JsonPropertyName("bound_address")]
		public IReadOnlyCollection<string> BoundAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_content_length")]
		public Nest.ByteSize? MaxContentLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_content_length_in_bytes")]
		public long MaxContentLengthInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("publish_address")]
		public string PublishAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoIngest
	{
		[JsonPropertyName("processors")]
		public IReadOnlyCollection<Nest.Nodes.Info.NodeInfoIngestProcessor> Processors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoIngestProcessor
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoJvmMemory
	{
		[JsonPropertyName("direct_max")]
		public Nest.ByteSize? DirectMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("direct_max_in_bytes")]
		public long DirectMaxInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_init")]
		public Nest.ByteSize? HeapInit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_init_in_bytes")]
		public long HeapInitInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_max")]
		public Nest.ByteSize? HeapMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_max_in_bytes")]
		public long HeapMaxInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_init")]
		public Nest.ByteSize? NonHeapInit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_init_in_bytes")]
		public long NonHeapInitInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_max")]
		public Nest.ByteSize? NonHeapMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_max_in_bytes")]
		public long NonHeapMaxInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoMemory
	{
		[JsonPropertyName("total")]
		public string Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoNetwork
	{
		[JsonPropertyName("primary_interface")]
		public Nest.Nodes.Info.NodeInfoNetworkInterface PrimaryInterface
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("refresh_interval")]
		public int RefreshInterval
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoNetworkInterface
	{
		[JsonPropertyName("address")]
		public string Address
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mac_address")]
		public string MacAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Nest.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoOSCPU
	{
		[JsonPropertyName("cache_size")]
		public string CacheSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size_in_bytes")]
		public int CacheSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cores_per_socket")]
		public int CoresPerSocket
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mhz")]
		public int Mhz
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model")]
		public string Model
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_cores")]
		public int TotalCores
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_sockets")]
		public int TotalSockets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vendor")]
		public string Vendor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoPath
	{
		[JsonPropertyName("data")]
		public IReadOnlyCollection<string>? Data
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("home")]
		public string Home
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("logs")]
		public string Logs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repo")]
		public IReadOnlyCollection<string> Repo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoRepositories
	{
		[JsonPropertyName("url")]
		public Nest.Nodes.Info.NodeInfoRepositoriesUrl Url
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoRepositoriesUrl
	{
		[JsonPropertyName("allowed_urls")]
		public string AllowedUrls
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoScript
	{
		[JsonPropertyName("allowed_types")]
		public string AllowedTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disable_max_compilations_rate")]
		public string DisableMaxCompilationsRate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSearch
	{
		[JsonPropertyName("remote")]
		public Nest.Nodes.Info.NodeInfoSearchRemote Remote
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSearchRemote
	{
		[JsonPropertyName("connect")]
		public string Connect
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettings
	{
		[JsonPropertyName("action")]
		public Nest.Nodes.Info.NodeInfoAction? Action
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bootstrap")]
		public Nest.Nodes.Info.NodeInfoBootstrap? Bootstrap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("client")]
		public Nest.Nodes.Info.NodeInfoClient Client
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster")]
		public Nest.Nodes.Info.NodeInfoSettingsCluster Cluster
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discovery")]
		public Nest.Nodes.Info.NodeInfoDiscover? Discovery
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("http")]
		public Nest.Nodes.Info.NodeInfoSettingsHttp Http
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("network")]
		public Nest.Nodes.Info.NodeInfoSettingsNetwork? Network
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public Nest.Nodes.Info.NodeInfoSettingsNode Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public Nest.Nodes.Info.NodeInfoPath Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repositories")]
		public Nest.Nodes.Info.NodeInfoRepositories? Repositories
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Nest.Nodes.Info.NodeInfoScript? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search")]
		public Nest.Nodes.Info.NodeInfoSearch? Search
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport")]
		public Nest.Nodes.Info.NodeInfoSettingsTransport Transport
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("xpack")]
		public Nest.Nodes.Info.NodeInfoXpack? Xpack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsCluster
	{
		[JsonPropertyName("election")]
		public Nest.Nodes.Info.NodeInfoSettingsClusterElection Election
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initial_master_nodes")]
		public string? InitialMasterNodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Nest.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing")]
		public Nest.IndexManagement.IndexRouting? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsClusterElection
	{
		[JsonPropertyName("strategy")]
		public Nest.Name Strategy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsHttp
	{
		[JsonPropertyName("compression")]
		public Union<bool, string>? Compression
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("port")]
		public Union<int, string>? Port
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public Union<string, Nest.Nodes.Info.NodeInfoSettingsHttpType> Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type.default")]
		public string? TypeDefault
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsHttpType
	{
		[JsonPropertyName("default")]
		public string Default
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsNetwork
	{
		[JsonPropertyName("host")]
		public Nest.Host Host
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsNode
	{
		[JsonPropertyName("attr")]
		public Dictionary<string, object> Attr
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_local_storage_nodes")]
		public string? MaxLocalStorageNodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Nest.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsTransport
	{
		[JsonPropertyName("features")]
		public Nest.Nodes.Info.NodeInfoSettingsTransportFeatures? Features
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public Union<string, Nest.Nodes.Info.NodeInfoSettingsTransportType> Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type.default")]
		public string? TypeDefault
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsTransportFeatures
	{
		[JsonPropertyName("x-pack")]
		public string XPack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoSettingsTransportType
	{
		[JsonPropertyName("default")]
		public string Default
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoTransport
	{
		[JsonPropertyName("bound_address")]
		public IReadOnlyCollection<string> BoundAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("profiles")]
		public Dictionary<string, string> Profiles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("publish_address")]
		public string PublishAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpack
	{
		[JsonPropertyName("license")]
		public Nest.Nodes.Info.NodeInfoXpackLicense? License
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("notification")]
		public Dictionary<string, object>? Notification
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("security")]
		public Nest.Nodes.Info.NodeInfoXpackSecurity Security
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackLicense
	{
		[JsonPropertyName("self_generated")]
		public Nest.Nodes.Info.NodeInfoXpackLicenseType SelfGenerated
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackLicenseType
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecurity
	{
		[JsonPropertyName("authc")]
		public Nest.Nodes.Info.NodeInfoXpackSecurityAuthc? Authc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enabled")]
		public string Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("http")]
		public Nest.Nodes.Info.NodeInfoXpackSecuritySsl Http
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport")]
		public Nest.Nodes.Info.NodeInfoXpackSecuritySsl Transport
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecurityAuthc
	{
		[JsonPropertyName("realms")]
		public Nest.Nodes.Info.NodeInfoXpackSecurityAuthcRealms Realms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token")]
		public Nest.Nodes.Info.NodeInfoXpackSecurityAuthcToken Token
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecurityAuthcRealms
	{
		[JsonPropertyName("file")]
		public Dictionary<string, Nest.Nodes.Info.NodeInfoXpackSecurityAuthcRealmsStatus>? File
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("native")]
		public Dictionary<string, Nest.Nodes.Info.NodeInfoXpackSecurityAuthcRealmsStatus>? Native
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pki")]
		public Dictionary<string, Nest.Nodes.Info.NodeInfoXpackSecurityAuthcRealmsStatus>? Pki
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecurityAuthcRealmsStatus
	{
		[JsonPropertyName("enabled")]
		public string? Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public string Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecurityAuthcToken
	{
		[JsonPropertyName("enabled")]
		public string Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeInfoXpackSecuritySsl
	{
		[JsonPropertyName("ssl")]
		public Dictionary<string, string> Ssl
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeJvmInfo
	{
		[JsonPropertyName("bundled_jdk")]
		public bool BundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gc_collectors")]
		public IReadOnlyCollection<string> GcCollectors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("input_arguments")]
		public IReadOnlyCollection<string> InputArguments
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public Nest.Nodes.Info.NodeInfoJvmMemory Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_pools")]
		public IReadOnlyCollection<string> MemoryPools
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pid")]
		public int Pid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("using_bundled_jdk")]
		public bool UsingBundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("using_compressed_ordinary_object_pointers")]
		public Union<bool, string>? UsingCompressedOrdinaryObjectPointers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Nest.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_name")]
		public Nest.Name VmName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_vendor")]
		public string VmVendor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_version")]
		public Nest.VersionString VmVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeOperatingSystemInfo
	{
		[JsonPropertyName("allocated_processors")]
		public int? AllocatedProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("arch")]
		public string Arch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_processors")]
		public int AvailableProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cpu")]
		public Nest.Nodes.Info.NodeInfoOSCPU? Cpu
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public Nest.Nodes.Info.NodeInfoMemory? Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Nest.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretty_name")]
		public Nest.Name PrettyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("refresh_interval_in_millis")]
		public int RefreshIntervalInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("swap")]
		public Nest.Nodes.Info.NodeInfoMemory? Swap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Nest.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeProcessInfo
	{
		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mlockall")]
		public bool Mlockall
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("refresh_interval_in_millis")]
		public long RefreshIntervalInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeThreadPoolInfo
	{
		[JsonPropertyName("core")]
		public int? Core
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_alive")]
		public string? KeepAlive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public int? Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("queue_size")]
		public int QueueSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}