// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public readonly partial struct Bytes
	{
		public Bytes(string value) => Value = value;
		public string Value { get; }

		public static Bytes Tb { get; } = new Bytes("tb");
		public static Bytes t { get; } = new Bytes("t");
		public static Bytes Pb { get; } = new Bytes("pb");
		public static Bytes p { get; } = new Bytes("p");
		public static Bytes Mb { get; } = new Bytes("mb");
		public static Bytes m { get; } = new Bytes("m");
		public static Bytes Kb { get; } = new Bytes("kb");
		public static Bytes k { get; } = new Bytes("k");
		public static Bytes Gb { get; } = new Bytes("gb");
		public static Bytes g { get; } = new Bytes("g");
		public static Bytes b { get; } = new Bytes("b");
	}

	public readonly partial struct Conflicts
	{
		public Conflicts(string value) => Value = value;
		public string Value { get; }

		public static Conflicts Proceed { get; } = new Conflicts("proceed");
		public static Conflicts Abort { get; } = new Conflicts("abort");
	}

	public readonly partial struct DefaultOperator
	{
		public DefaultOperator(string value) => Value = value;
		public string Value { get; }

		public static DefaultOperator Or { get; } = new DefaultOperator("OR");
		public static DefaultOperator And { get; } = new DefaultOperator("AND");
	}

	public readonly partial struct DistanceUnit
	{
		public DistanceUnit(string value) => Value = value;
		public string Value { get; }

		public static DistanceUnit Yd { get; } = new DistanceUnit("yd");
		public static DistanceUnit Nmi { get; } = new DistanceUnit("nmi");
		public static DistanceUnit Mm { get; } = new DistanceUnit("mm");
		public static DistanceUnit Mi { get; } = new DistanceUnit("mi");
		public static DistanceUnit m { get; } = new DistanceUnit("m");
		public static DistanceUnit Km { get; } = new DistanceUnit("km");
		public static DistanceUnit In { get; } = new DistanceUnit("in");
		public static DistanceUnit Ft { get; } = new DistanceUnit("ft");
		public static DistanceUnit Cm { get; } = new DistanceUnit("cm");
	}

	public readonly partial struct ExpandWildcardOptions
	{
		public ExpandWildcardOptions(string value) => Value = value;
		public string Value { get; }

		public static ExpandWildcardOptions Open { get; } = new ExpandWildcardOptions("open");
		public static ExpandWildcardOptions None { get; } = new ExpandWildcardOptions("none");
		public static ExpandWildcardOptions Hidden { get; } = new ExpandWildcardOptions("hidden");
		public static ExpandWildcardOptions Closed { get; } = new ExpandWildcardOptions("closed");
		public static ExpandWildcardOptions All { get; } = new ExpandWildcardOptions("all");
	}

	public readonly partial struct GeoDistanceType
	{
		public GeoDistanceType(string value) => Value = value;
		public string Value { get; }

		public static GeoDistanceType Plane { get; } = new GeoDistanceType("plane");
		public static GeoDistanceType Arc { get; } = new GeoDistanceType("arc");
	}

	public readonly partial struct GeoShapeRelation
	{
		public GeoShapeRelation(string value) => Value = value;
		public string Value { get; }

		public static GeoShapeRelation Within { get; } = new GeoShapeRelation("within");
		public static GeoShapeRelation Intersects { get; } = new GeoShapeRelation("intersects");
		public static GeoShapeRelation Disjoint { get; } = new GeoShapeRelation("disjoint");
		public static GeoShapeRelation Contains { get; } = new GeoShapeRelation("contains");
	}

	public readonly partial struct GroupBy
	{
		public GroupBy(string value) => Value = value;
		public string Value { get; }

		public static GroupBy Parents { get; } = new GroupBy("parents");
		public static GroupBy None { get; } = new GroupBy("none");
		public static GroupBy Nodes { get; } = new GroupBy("nodes");
	}

	public readonly partial struct Health
	{
		public Health(string value) => Value = value;
		public string Value { get; }

		public static Health Yellow { get; } = new Health("yellow");
		public static Health Red { get; } = new Health("red");
		public static Health Green { get; } = new Health("green");
	}

	public readonly partial struct Level
	{
		public Level(string value) => Value = value;
		public string Value { get; }

		public static Level Shards { get; } = new Level("shards");
		public static Level Indices { get; } = new Level("indices");
		public static Level Cluster { get; } = new Level("cluster");
	}

	public readonly partial struct LifecycleOperationMode
	{
		public LifecycleOperationMode(string value) => Value = value;
		public string Value { get; }

		public static LifecycleOperationMode Stopping { get; } = new LifecycleOperationMode("STOPPING");
		public static LifecycleOperationMode Stopped { get; } = new LifecycleOperationMode("STOPPED");
		public static LifecycleOperationMode Running { get; } = new LifecycleOperationMode("RUNNING");
	}

	public readonly partial struct NodeRole
	{
		public NodeRole(string value) => Value = value;
		public string Value { get; }

		public static NodeRole VotingOnly { get; } = new NodeRole("voting_only");
		public static NodeRole Transform { get; } = new NodeRole("transform");
		public static NodeRole RemoteClusterClient { get; } = new NodeRole("remote_cluster_client");
		public static NodeRole Ml { get; } = new NodeRole("ml");
		public static NodeRole Master { get; } = new NodeRole("master");
		public static NodeRole Ingest { get; } = new NodeRole("ingest");
		public static NodeRole DataWarm { get; } = new NodeRole("data_warm");
		public static NodeRole DataHot { get; } = new NodeRole("data_hot");
		public static NodeRole DataFrozen { get; } = new NodeRole("data_frozen");
		public static NodeRole DataContent { get; } = new NodeRole("data_content");
		public static NodeRole DataCold { get; } = new NodeRole("data_cold");
		public static NodeRole Data { get; } = new NodeRole("data");
		public static NodeRole CoordinatingOnly { get; } = new NodeRole("coordinating_only");
		public static NodeRole Client { get; } = new NodeRole("client");
	}

	public readonly partial struct OpType
	{
		public OpType(string value) => Value = value;
		public string Value { get; }

		public static OpType Index { get; } = new OpType("index");
		public static OpType Create { get; } = new OpType("create");
	}

	public readonly partial struct RefreshOptions
	{
		public RefreshOptions(string value) => Value = value;
		public string Value { get; }

		public static RefreshOptions WaitFor { get; } = new RefreshOptions("wait_for");
	}

	public readonly partial struct Result
	{
		public Result(string value) => Value = value;
		public string Value { get; }

		public static Result Updated { get; } = new Result("updated");
		public static Result NotFound { get; } = new Result("not_found");
		public static Result Noop { get; } = new Result("noop");
		public static Result Deleted { get; } = new Result("deleted");
		public static Result Created { get; } = new Result("created");
		public static Result Error { get; } = new Result("Error");
	}

	public readonly partial struct ScriptLanguage
	{
		public ScriptLanguage(string value) => Value = value;
		public string Value { get; }

		public static ScriptLanguage Painless { get; } = new ScriptLanguage("painless");
		public static ScriptLanguage Mustache { get; } = new ScriptLanguage("mustache");
		public static ScriptLanguage Java { get; } = new ScriptLanguage("java");
		public static ScriptLanguage Expression { get; } = new ScriptLanguage("expression");
	}

	public readonly partial struct SearchType
	{
		public SearchType(string value) => Value = value;
		public string Value { get; }

		public static SearchType QueryThenFetch { get; } = new SearchType("query_then_fetch");
		public static SearchType DfsQueryThenFetch { get; } = new SearchType("dfs_query_then_fetch");
	}

	public readonly partial struct ShapeRelation
	{
		public ShapeRelation(string value) => Value = value;
		public string Value { get; }

		public static ShapeRelation Within { get; } = new ShapeRelation("within");
		public static ShapeRelation Intersects { get; } = new ShapeRelation("intersects");
		public static ShapeRelation Disjoint { get; } = new ShapeRelation("disjoint");
	}

	public readonly partial struct Size
	{
		public Size(string value) => Value = value;
		public string Value { get; }

		public static Size t { get; } = new Size("t");
		public static Size p { get; } = new Size("p");
		public static Size m { get; } = new Size("m");
		public static Size k { get; } = new Size("k");
		public static Size g { get; } = new Size("g");
		public static Size Raw { get; } = new Size("Raw");
	}

	public readonly partial struct SuggestMode
	{
		public SuggestMode(string value) => Value = value;
		public string Value { get; }

		public static SuggestMode Popular { get; } = new SuggestMode("popular");
		public static SuggestMode Missing { get; } = new SuggestMode("missing");
		public static SuggestMode Always { get; } = new SuggestMode("always");
	}

	public readonly partial struct ThreadType
	{
		public ThreadType(string value) => Value = value;
		public string Value { get; }

		public static ThreadType Wait { get; } = new ThreadType("wait");
		public static ThreadType Cpu { get; } = new ThreadType("cpu");
		public static ThreadType Block { get; } = new ThreadType("block");
	}

	public readonly partial struct VersionType
	{
		public VersionType(string value) => Value = value;
		public string Value { get; }

		public static VersionType Internal { get; } = new VersionType("internal");
		public static VersionType Force { get; } = new VersionType("force");
		public static VersionType ExternalGte { get; } = new VersionType("external_gte");
		public static VersionType External { get; } = new VersionType("external");
	}

	public readonly partial struct WaitForActiveShardOptions
	{
		public WaitForActiveShardOptions(string value) => Value = value;
		public string Value { get; }

		public static WaitForActiveShardOptions All { get; } = new WaitForActiveShardOptions("all");
	}

	public readonly partial struct WaitForEvents
	{
		public WaitForEvents(string value) => Value = value;
		public string Value { get; }

		public static WaitForEvents Urgent { get; } = new WaitForEvents("urgent");
		public static WaitForEvents Normal { get; } = new WaitForEvents("normal");
		public static WaitForEvents Low { get; } = new WaitForEvents("low");
		public static WaitForEvents Languid { get; } = new WaitForEvents("languid");
		public static WaitForEvents Immediate { get; } = new WaitForEvents("immediate");
		public static WaitForEvents High { get; } = new WaitForEvents("high");
	}

	public readonly partial struct WaitForStatus
	{
		public WaitForStatus(string value) => Value = value;
		public string Value { get; }

		public static WaitForStatus Yellow { get; } = new WaitForStatus("yellow");
		public static WaitForStatus Red { get; } = new WaitForStatus("red");
		public static WaitForStatus Green { get; } = new WaitForStatus("green");
	}
}