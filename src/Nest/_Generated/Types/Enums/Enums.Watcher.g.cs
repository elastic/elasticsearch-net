// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest.Watcher
{
	public readonly partial struct AcknowledgementOptions
	{
		public AcknowledgementOptions(string value) => Value = value;
		public string Value { get; }

		public static AcknowledgementOptions AwaitsSuccessfulExecution { get; } = new AcknowledgementOptions("awaits_successful_execution");
		public static AcknowledgementOptions Acked { get; } = new AcknowledgementOptions("acked");
		public static AcknowledgementOptions Ackable { get; } = new AcknowledgementOptions("ackable");
	}

	public readonly partial struct ActionExecutionMode
	{
		public ActionExecutionMode(string value) => Value = value;
		public string Value { get; }

		public static ActionExecutionMode Skip { get; } = new ActionExecutionMode("skip");
		public static ActionExecutionMode Simulate { get; } = new ActionExecutionMode("simulate");
		public static ActionExecutionMode ForceSimulate { get; } = new ActionExecutionMode("force_simulate");
		public static ActionExecutionMode ForceExecute { get; } = new ActionExecutionMode("force_execute");
		public static ActionExecutionMode Execute { get; } = new ActionExecutionMode("execute");
	}

	public readonly partial struct ActionStatusOptions
	{
		public ActionStatusOptions(string value) => Value = value;
		public string Value { get; }

		public static ActionStatusOptions Throttled { get; } = new ActionStatusOptions("throttled");
		public static ActionStatusOptions Success { get; } = new ActionStatusOptions("success");
		public static ActionStatusOptions Simulated { get; } = new ActionStatusOptions("simulated");
		public static ActionStatusOptions Failure { get; } = new ActionStatusOptions("failure");
	}

	public readonly partial struct ActionType
	{
		public ActionType(string value) => Value = value;
		public string Value { get; }

		public static ActionType Webhook { get; } = new ActionType("webhook");
		public static ActionType Slack { get; } = new ActionType("slack");
		public static ActionType Pagerduty { get; } = new ActionType("pagerduty");
		public static ActionType Logging { get; } = new ActionType("logging");
		public static ActionType Index { get; } = new ActionType("index");
		public static ActionType Email { get; } = new ActionType("email");
	}

	public readonly partial struct ConditionType
	{
		public ConditionType(string value) => Value = value;
		public string Value { get; }

		public static ConditionType Script { get; } = new ConditionType("script");
		public static ConditionType Never { get; } = new ConditionType("never");
		public static ConditionType Compare { get; } = new ConditionType("compare");
		public static ConditionType ArrayCompare { get; } = new ConditionType("array_compare");
		public static ConditionType Always { get; } = new ConditionType("always");
	}

	public readonly partial struct ConnectionScheme
	{
		public ConnectionScheme(string value) => Value = value;
		public string Value { get; }

		public static ConnectionScheme Https { get; } = new ConnectionScheme("https");
		public static ConnectionScheme Http { get; } = new ConnectionScheme("http");
	}

	public readonly partial struct Day
	{
		public Day(string value) => Value = value;
		public string Value { get; }

		public static Day Wednesday { get; } = new Day("wednesday");
		public static Day Tuesday { get; } = new Day("tuesday");
		public static Day Thursday { get; } = new Day("thursday");
		public static Day Sunday { get; } = new Day("sunday");
		public static Day Saturday { get; } = new Day("saturday");
		public static Day Monday { get; } = new Day("monday");
		public static Day Friday { get; } = new Day("friday");
	}

	public readonly partial struct ExecutionPhase
	{
		public ExecutionPhase(string value) => Value = value;
		public string Value { get; }

		public static ExecutionPhase WatchTransform { get; } = new ExecutionPhase("watch_transform");
		public static ExecutionPhase Started { get; } = new ExecutionPhase("started");
		public static ExecutionPhase Input { get; } = new ExecutionPhase("input");
		public static ExecutionPhase Finished { get; } = new ExecutionPhase("finished");
		public static ExecutionPhase Condition { get; } = new ExecutionPhase("condition");
		public static ExecutionPhase AwaitsExecution { get; } = new ExecutionPhase("awaits_execution");
		public static ExecutionPhase Actions { get; } = new ExecutionPhase("actions");
		public static ExecutionPhase Aborted { get; } = new ExecutionPhase("aborted");
	}

	public readonly partial struct ExecutionStatus
	{
		public ExecutionStatus(string value) => Value = value;
		public string Value { get; }

		public static ExecutionStatus Throttled { get; } = new ExecutionStatus("throttled");
		public static ExecutionStatus NotExecutedAlreadyQueued { get; } = new ExecutionStatus("not_executed_already_queued");
		public static ExecutionStatus Failed { get; } = new ExecutionStatus("failed");
		public static ExecutionStatus ExecutionNotNeeded { get; } = new ExecutionStatus("execution_not_needed");
		public static ExecutionStatus Executed { get; } = new ExecutionStatus("executed");
		public static ExecutionStatus DeletedWhileQueued { get; } = new ExecutionStatus("deleted_while_queued");
		public static ExecutionStatus Checking { get; } = new ExecutionStatus("checking");
		public static ExecutionStatus AwaitsExecution { get; } = new ExecutionStatus("awaits_execution");
	}

	public readonly partial struct HttpInputMethod
	{
		public HttpInputMethod(string value) => Value = value;
		public string Value { get; }

		public static HttpInputMethod Put { get; } = new HttpInputMethod("put");
		public static HttpInputMethod Post { get; } = new HttpInputMethod("post");
		public static HttpInputMethod Head { get; } = new HttpInputMethod("head");
		public static HttpInputMethod Get { get; } = new HttpInputMethod("get");
		public static HttpInputMethod Delete { get; } = new HttpInputMethod("delete");
	}

	public readonly partial struct InputType
	{
		public InputType(string value) => Value = value;
		public string Value { get; }

		public static InputType Simple { get; } = new InputType("simple");
		public static InputType Search { get; } = new InputType("search");
		public static InputType Http { get; } = new InputType("http");
	}

	public readonly partial struct Month
	{
		public Month(string value) => Value = value;
		public string Value { get; }

		public static Month September { get; } = new Month("september");
		public static Month October { get; } = new Month("october");
		public static Month November { get; } = new Month("november");
		public static Month May { get; } = new Month("may");
		public static Month March { get; } = new Month("march");
		public static Month June { get; } = new Month("june");
		public static Month July { get; } = new Month("july");
		public static Month January { get; } = new Month("january");
		public static Month February { get; } = new Month("february");
		public static Month December { get; } = new Month("december");
		public static Month August { get; } = new Month("august");
		public static Month April { get; } = new Month("april");
	}

	public readonly partial struct PagerDutyContextType
	{
		public PagerDutyContextType(string value) => Value = value;
		public string Value { get; }

		public static PagerDutyContextType Link { get; } = new PagerDutyContextType("link");
		public static PagerDutyContextType Image { get; } = new PagerDutyContextType("image");
	}

	public readonly partial struct PagerDutyEventType
	{
		public PagerDutyEventType(string value) => Value = value;
		public string Value { get; }

		public static PagerDutyEventType Trigger { get; } = new PagerDutyEventType("trigger");
		public static PagerDutyEventType Resolve { get; } = new PagerDutyEventType("resolve");
		public static PagerDutyEventType Acknowledge { get; } = new PagerDutyEventType("acknowledge");
	}

	public readonly partial struct Quantifier
	{
		public Quantifier(string value) => Value = value;
		public string Value { get; }

		public static Quantifier Some { get; } = new Quantifier("some");
		public static Quantifier All { get; } = new Quantifier("all");
	}

	public readonly partial struct ResponseContentType
	{
		public ResponseContentType(string value) => Value = value;
		public string Value { get; }

		public static ResponseContentType Yaml { get; } = new ResponseContentType("yaml");
		public static ResponseContentType Text { get; } = new ResponseContentType("text");
		public static ResponseContentType Json { get; } = new ResponseContentType("json");
	}
}