// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest.QueryDsl
{
	public readonly partial struct ChildScoreMode
	{
		public ChildScoreMode(string value) => Value = value;
		public string Value { get; }

		public static ChildScoreMode Sum { get; } = new ChildScoreMode("sum");
		public static ChildScoreMode None { get; } = new ChildScoreMode("none");
		public static ChildScoreMode Min { get; } = new ChildScoreMode("min");
		public static ChildScoreMode Max { get; } = new ChildScoreMode("max");
		public static ChildScoreMode Avg { get; } = new ChildScoreMode("avg");
	}

	public readonly partial struct CombinedFieldsOperator
	{
		public CombinedFieldsOperator(string value) => Value = value;
		public string Value { get; }

		public static CombinedFieldsOperator Or { get; } = new CombinedFieldsOperator("or");
		public static CombinedFieldsOperator And { get; } = new CombinedFieldsOperator("and");
	}

	public readonly partial struct CombinedFieldsZeroTerms
	{
		public CombinedFieldsZeroTerms(string value) => Value = value;
		public string Value { get; }

		public static CombinedFieldsZeroTerms None { get; } = new CombinedFieldsZeroTerms("none");
		public static CombinedFieldsZeroTerms All { get; } = new CombinedFieldsZeroTerms("all");
	}

	public readonly partial struct FieldValueFactorModifier
	{
		public FieldValueFactorModifier(string value) => Value = value;
		public string Value { get; }

		public static FieldValueFactorModifier Square { get; } = new FieldValueFactorModifier("square");
		public static FieldValueFactorModifier Sqrt { get; } = new FieldValueFactorModifier("sqrt");
		public static FieldValueFactorModifier Reciprocal { get; } = new FieldValueFactorModifier("reciprocal");
		public static FieldValueFactorModifier None { get; } = new FieldValueFactorModifier("none");
		public static FieldValueFactorModifier Log2p { get; } = new FieldValueFactorModifier("log2p");
		public static FieldValueFactorModifier Log1p { get; } = new FieldValueFactorModifier("log1p");
		public static FieldValueFactorModifier Log { get; } = new FieldValueFactorModifier("log");
		public static FieldValueFactorModifier Ln2p { get; } = new FieldValueFactorModifier("ln2p");
		public static FieldValueFactorModifier Ln1p { get; } = new FieldValueFactorModifier("ln1p");
		public static FieldValueFactorModifier Ln { get; } = new FieldValueFactorModifier("ln");
	}

	public readonly partial struct FunctionBoostMode
	{
		public FunctionBoostMode(string value) => Value = value;
		public string Value { get; }

		public static FunctionBoostMode Sum { get; } = new FunctionBoostMode("sum");
		public static FunctionBoostMode Replace { get; } = new FunctionBoostMode("replace");
		public static FunctionBoostMode Multiply { get; } = new FunctionBoostMode("multiply");
		public static FunctionBoostMode Min { get; } = new FunctionBoostMode("min");
		public static FunctionBoostMode Max { get; } = new FunctionBoostMode("max");
		public static FunctionBoostMode Avg { get; } = new FunctionBoostMode("avg");
	}

	public readonly partial struct FunctionScoreMode
	{
		public FunctionScoreMode(string value) => Value = value;
		public string Value { get; }

		public static FunctionScoreMode Sum { get; } = new FunctionScoreMode("sum");
		public static FunctionScoreMode Multiply { get; } = new FunctionScoreMode("multiply");
		public static FunctionScoreMode Min { get; } = new FunctionScoreMode("min");
		public static FunctionScoreMode Max { get; } = new FunctionScoreMode("max");
		public static FunctionScoreMode First { get; } = new FunctionScoreMode("first");
		public static FunctionScoreMode Avg { get; } = new FunctionScoreMode("avg");
	}

	public readonly partial struct GeoExecution
	{
		public GeoExecution(string value) => Value = value;
		public string Value { get; }

		public static GeoExecution Memory { get; } = new GeoExecution("memory");
		public static GeoExecution Indexed { get; } = new GeoExecution("indexed");
	}

	public readonly partial struct GeoValidationMethod
	{
		public GeoValidationMethod(string value) => Value = value;
		public string Value { get; }

		public static GeoValidationMethod Strict { get; } = new GeoValidationMethod("strict");
		public static GeoValidationMethod IgnoreMalformed { get; } = new GeoValidationMethod("ignore_malformed");
		public static GeoValidationMethod Coerce { get; } = new GeoValidationMethod("coerce");
	}

	public readonly partial struct MultiValueMode
	{
		public MultiValueMode(string value) => Value = value;
		public string Value { get; }

		public static MultiValueMode Sum { get; } = new MultiValueMode("sum");
		public static MultiValueMode Min { get; } = new MultiValueMode("min");
		public static MultiValueMode Max { get; } = new MultiValueMode("max");
		public static MultiValueMode Avg { get; } = new MultiValueMode("avg");
	}

	public readonly partial struct NestedScoreMode
	{
		public NestedScoreMode(string value) => Value = value;
		public string Value { get; }

		public static NestedScoreMode Sum { get; } = new NestedScoreMode("sum");
		public static NestedScoreMode None { get; } = new NestedScoreMode("none");
		public static NestedScoreMode Min { get; } = new NestedScoreMode("min");
		public static NestedScoreMode Max { get; } = new NestedScoreMode("max");
		public static NestedScoreMode Avg { get; } = new NestedScoreMode("avg");
	}

	public readonly partial struct Operator
	{
		public Operator(string value) => Value = value;
		public string Value { get; }

		public static Operator Or { get; } = new Operator("or");
		public static Operator And { get; } = new Operator("and");
	}

	public readonly partial struct RangeRelation
	{
		public RangeRelation(string value) => Value = value;
		public string Value { get; }

		public static RangeRelation Within { get; } = new RangeRelation("within");
		public static RangeRelation Intersects { get; } = new RangeRelation("intersects");
		public static RangeRelation Contains { get; } = new RangeRelation("contains");
	}

	public readonly partial struct SimpleQueryStringFlags
	{
		public SimpleQueryStringFlags(string value) => Value = value;
		public string Value { get; }

		public static SimpleQueryStringFlags Whitespace { get; } = new SimpleQueryStringFlags("WHITESPACE");
		public static SimpleQueryStringFlags Slop { get; } = new SimpleQueryStringFlags("SLOP");
		public static SimpleQueryStringFlags Prefix { get; } = new SimpleQueryStringFlags("PREFIX");
		public static SimpleQueryStringFlags Precedence { get; } = new SimpleQueryStringFlags("PRECEDENCE");
		public static SimpleQueryStringFlags Phrase { get; } = new SimpleQueryStringFlags("PHRASE");
		public static SimpleQueryStringFlags Or { get; } = new SimpleQueryStringFlags("OR");
		public static SimpleQueryStringFlags Not { get; } = new SimpleQueryStringFlags("NOT");
		public static SimpleQueryStringFlags None { get; } = new SimpleQueryStringFlags("NONE");
		public static SimpleQueryStringFlags Near { get; } = new SimpleQueryStringFlags("NEAR");
		public static SimpleQueryStringFlags Fuzzy { get; } = new SimpleQueryStringFlags("FUZZY");
		public static SimpleQueryStringFlags Escape { get; } = new SimpleQueryStringFlags("ESCAPE");
		public static SimpleQueryStringFlags And { get; } = new SimpleQueryStringFlags("AND");
		public static SimpleQueryStringFlags All { get; } = new SimpleQueryStringFlags("ALL");
	}

	public readonly partial struct TextQueryType
	{
		public TextQueryType(string value) => Value = value;
		public string Value { get; }

		public static TextQueryType PhrasePrefix { get; } = new TextQueryType("phrase_prefix");
		public static TextQueryType Phrase { get; } = new TextQueryType("phrase");
		public static TextQueryType MostFields { get; } = new TextQueryType("most_fields");
		public static TextQueryType CrossFields { get; } = new TextQueryType("cross_fields");
		public static TextQueryType BoolPrefix { get; } = new TextQueryType("bool_prefix");
		public static TextQueryType BestFields { get; } = new TextQueryType("best_fields");
	}

	public readonly partial struct ZeroTermsQuery
	{
		public ZeroTermsQuery(string value) => Value = value;
		public string Value { get; }

		public static ZeroTermsQuery None { get; } = new ZeroTermsQuery("none");
		public static ZeroTermsQuery All { get; } = new ZeroTermsQuery("all");
	}
}