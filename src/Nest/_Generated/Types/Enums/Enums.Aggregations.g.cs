// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest.Aggregations
{
	public readonly partial struct DateInterval
	{
		public DateInterval(string value) => Value = value;
		public string Value { get; }

		public static DateInterval Year { get; } = new DateInterval("year");
		public static DateInterval Week { get; } = new DateInterval("week");
		public static DateInterval Second { get; } = new DateInterval("second");
		public static DateInterval Quarter { get; } = new DateInterval("quarter");
		public static DateInterval Month { get; } = new DateInterval("month");
		public static DateInterval Minute { get; } = new DateInterval("minute");
		public static DateInterval Hour { get; } = new DateInterval("hour");
		public static DateInterval Day { get; } = new DateInterval("day");
	}

	public readonly partial struct GapPolicy
	{
		public GapPolicy(string value) => Value = value;
		public string Value { get; }

		public static GapPolicy Skip { get; } = new GapPolicy("skip");
		public static GapPolicy InsertZeros { get; } = new GapPolicy("insert_zeros");
	}

	public readonly partial struct HoltWintersType
	{
		public HoltWintersType(string value) => Value = value;
		public string Value { get; }

		public static HoltWintersType Multiplicative { get; } = new HoltWintersType("mult");
		public static HoltWintersType Additive { get; } = new HoltWintersType("add");
	}

	public readonly partial struct MatrixStatsMode
	{
		public MatrixStatsMode(string value) => Value = value;
		public string Value { get; }

		public static MatrixStatsMode Sum { get; } = new MatrixStatsMode("sum");
		public static MatrixStatsMode Min { get; } = new MatrixStatsMode("min");
		public static MatrixStatsMode Median { get; } = new MatrixStatsMode("median");
		public static MatrixStatsMode Max { get; } = new MatrixStatsMode("max");
		public static MatrixStatsMode Avg { get; } = new MatrixStatsMode("avg");
	}

	public readonly partial struct MinimumInterval
	{
		public MinimumInterval(string value) => Value = value;
		public string Value { get; }

		public static MinimumInterval Year { get; } = new MinimumInterval("year");
		public static MinimumInterval Second { get; } = new MinimumInterval("second");
		public static MinimumInterval Month { get; } = new MinimumInterval("month");
		public static MinimumInterval Minute { get; } = new MinimumInterval("minute");
		public static MinimumInterval Hour { get; } = new MinimumInterval("hour");
		public static MinimumInterval Day { get; } = new MinimumInterval("day");
	}

	public readonly partial struct MovingAverageModel
	{
		public MovingAverageModel(string value) => Value = value;
		public string Value { get; }

		public static MovingAverageModel Simple { get; } = new MovingAverageModel("simple");
		public static MovingAverageModel Linear { get; } = new MovingAverageModel("linear");
		public static MovingAverageModel HoltWinters { get; } = new MovingAverageModel("holt_winters");
		public static MovingAverageModel Holt { get; } = new MovingAverageModel("holt");
		public static MovingAverageModel Ewma { get; } = new MovingAverageModel("ewma");
	}

	public readonly partial struct NormalizeMethod
	{
		public NormalizeMethod(string value) => Value = value;
		public string Value { get; }

		public static NormalizeMethod Zscore { get; } = new NormalizeMethod("zscore");
		public static NormalizeMethod Softmax { get; } = new NormalizeMethod("softmax");
		public static NormalizeMethod Rescale0100 { get; } = new NormalizeMethod("rescale_0_100");
		public static NormalizeMethod Rescale01 { get; } = new NormalizeMethod("rescale_0_1");
		public static NormalizeMethod PercentOfSum { get; } = new NormalizeMethod("percent_of_sum");
		public static NormalizeMethod Mean { get; } = new NormalizeMethod("mean");
	}

	public readonly partial struct RateMode
	{
		public RateMode(string value) => Value = value;
		public string Value { get; }

		public static RateMode ValueCount { get; } = new RateMode("value_count");
		public static RateMode Sum { get; } = new RateMode("sum");
	}

	public readonly partial struct SamplerAggregationExecutionHint
	{
		public SamplerAggregationExecutionHint(string value) => Value = value;
		public string Value { get; }

		public static SamplerAggregationExecutionHint Map { get; } = new SamplerAggregationExecutionHint("map");
		public static SamplerAggregationExecutionHint GlobalOrdinals { get; } = new SamplerAggregationExecutionHint("global_ordinals");
		public static SamplerAggregationExecutionHint BytesHash { get; } = new SamplerAggregationExecutionHint("bytes_hash");
	}

	public readonly partial struct TermsAggregationCollectMode
	{
		public TermsAggregationCollectMode(string value) => Value = value;
		public string Value { get; }

		public static TermsAggregationCollectMode DepthFirst { get; } = new TermsAggregationCollectMode("depth_first");
		public static TermsAggregationCollectMode BreadthFirst { get; } = new TermsAggregationCollectMode("breadth_first");
	}

	public readonly partial struct TermsAggregationExecutionHint
	{
		public TermsAggregationExecutionHint(string value) => Value = value;
		public string Value { get; }

		public static TermsAggregationExecutionHint Map { get; } = new TermsAggregationExecutionHint("map");
		public static TermsAggregationExecutionHint GlobalOrdinalsLowCardinality { get; } = new TermsAggregationExecutionHint("global_ordinals_low_cardinality");
		public static TermsAggregationExecutionHint GlobalOrdinalsHash { get; } = new TermsAggregationExecutionHint("global_ordinals_hash");
		public static TermsAggregationExecutionHint GlobalOrdinals { get; } = new TermsAggregationExecutionHint("global_ordinals");
	}

	public readonly partial struct TTestType
	{
		public TTestType(string value) => Value = value;
		public string Value { get; }

		public static TTestType Paired { get; } = new TTestType("paired");
		public static TTestType Homoscedastic { get; } = new TTestType("homoscedastic");
		public static TTestType Heteroscedastic { get; } = new TTestType("heteroscedastic");
	}

	public readonly partial struct ValueType
	{
		public ValueType(string value) => Value = value;
		public string Value { get; }

		public static ValueType String { get; } = new ValueType("string");
		public static ValueType Numeric { get; } = new ValueType("numeric");
		public static ValueType Number { get; } = new ValueType("number");
		public static ValueType Long { get; } = new ValueType("long");
		public static ValueType Ip { get; } = new ValueType("ip");
		public static ValueType GeoPoint { get; } = new ValueType("geo_point");
		public static ValueType Double { get; } = new ValueType("double");
		public static ValueType DateNanos { get; } = new ValueType("date_nanos");
		public static ValueType Date { get; } = new ValueType("date");
		public static ValueType Boolean { get; } = new ValueType("boolean");
	}
}