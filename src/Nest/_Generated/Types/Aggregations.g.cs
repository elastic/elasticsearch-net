// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Aggregations
{
	public partial class AutoDateHistogramAggregate
	{
		[JsonPropertyName("interval")]
		public Nest.DateMathTime Interval
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BoxPlotAggregate
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q1")]
		public double Q1
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q2")]
		public double Q2
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q3")]
		public double Q3
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BucketAggregate
	{
		[JsonPropertyName("after_key")]
		public Dictionary<string, object> AfterKey
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bg_count")]
		public long BgCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_count_error_upper_bound")]
		public long DocCountErrorUpperBound
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("interval")]
		public Nest.DateMathTime Interval
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("items")]
		public Nest.Aggregations.Bucket Items
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_other_doc_count")]
		public long SumOtherDocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompositeBucket
	{
	}

	public partial class CompositeBucketAggregate
	{
		[JsonPropertyName("after_key")]
		public Dictionary<string, object> AfterKey
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateHistogramBucket
	{
	}

	public partial class EwmaModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExtendedStatsAggregate
	{
		[JsonPropertyName("std_deviation")]
		public double? StdDeviation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_bounds")]
		public Nest.Aggregations.StandardDeviationBounds StdDeviationBounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_population")]
		public double? StdDeviationPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_sampling")]
		public double? StdDeviationSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_of_squares")]
		public double? SumOfSquares
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance")]
		public double? Variance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_population")]
		public double? VariancePopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_sampling")]
		public double? VarianceSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FiltersAggregate
	{
		[JsonPropertyName("buckets")]
		public Union<IReadOnlyCollection<FiltersBucketItem>, Dictionary<string, FiltersBucketItem>> Buckets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FiltersBucketItem
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoBounds
	{
		[JsonPropertyName("bottom_right")]
		public Nest.LatLon BottomRight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("top_left")]
		public Nest.LatLon TopLeft
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoBoundsAggregate
	{
		[JsonPropertyName("bounds")]
		public Nest.Aggregations.GeoBounds Bounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoCentroidAggregate
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("location")]
		public Nest.QueryDsl.GeoLocation Location
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineAggregate
	{
		[JsonPropertyName("geometry")]
		public Nest.Aggregations.LineStringGeoShape Geometry
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public Nest.Aggregations.GeoLineProperties Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineProperties
	{
		[JsonPropertyName("complete")]
		public bool Complete
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort_values")]
		public IReadOnlyCollection<double> SortValues
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentileItem
	{
		[JsonPropertyName("key")]
		public double Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentilesAggregate
	{
		[JsonPropertyName("values")]
		public IReadOnlyCollection<Nest.Aggregations.HdrPercentileItem> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltLinearModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltWintersModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gamma")]
		public float? Gamma
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pad")]
		public bool? Pad
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("period")]
		public int? Period
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public Nest.Aggregations.HoltWintersType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IpRangeBucket
	{
	}

	public partial class KeyedBucket<TKey>
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key")]
		public TKey Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key_as_string")]
		public string KeyAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeyedValueAggregate
	{
		[JsonPropertyName("keys")]
		public IReadOnlyCollection<string> Keys
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LineStringGeoShape
	{
		[JsonPropertyName("coordinates")]
		public IReadOnlyCollection<Nest.QueryDsl.GeoCoordinate> Coordinates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MatrixStatsAggregate
	{
		[JsonPropertyName("correlation")]
		public Dictionary<string, double> Correlation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("covariance")]
		public Dictionary<string, double> Covariance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("kurtosis")]
		public double Kurtosis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mean")]
		public double Mean
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skewness")]
		public double Skewness
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance")]
		public double Variance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MultiBucketAggregate<TBucket>
	{
		[JsonPropertyName("buckets")]
		public IReadOnlyCollection<TBucket> Buckets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentileItem
	{
		[JsonPropertyName("percentile")]
		public double Percentile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentilesAggregate
	{
		[JsonPropertyName("items")]
		public IReadOnlyCollection<Nest.Aggregations.PercentileItem> Items
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RangeBucket
	{
	}

	public partial class RareTermsBucket<TKey>
	{
	}

	public partial class ScriptedMetricAggregate
	{
		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SignificantTermsAggregate<TKey>
	{
		[JsonPropertyName("bg_count")]
		public long BgCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SignificantTermsBucket<TKey>
	{
	}

	public partial class SingleBucketAggregate
	{
		[JsonPropertyName("doc_count")]
		public double DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StandardDeviationBounds
	{
		[JsonPropertyName("lower")]
		public double? Lower
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_population")]
		public double? LowerPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_sampling")]
		public double? LowerSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper")]
		public double? Upper
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_population")]
		public double? UpperPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_sampling")]
		public double? UpperSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StatsAggregate
	{
		[JsonPropertyName("avg")]
		public double? Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public double Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double? Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double? Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum")]
		public double Sum
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringStatsAggregate
	{
		[JsonPropertyName("avg_length")]
		public double AvgLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("distribution")]
		public Dictionary<string, double> Distribution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("entropy")]
		public double Entropy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_length")]
		public int MaxLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_length")]
		public int MinLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TDigestPercentilesAggregate
	{
		[JsonPropertyName("values")]
		public Dictionary<string, double> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TermsAggregate<TKey>
	{
		[JsonPropertyName("doc_count_error_upper_bound")]
		public long DocCountErrorUpperBound
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_other_doc_count")]
		public long SumOtherDocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopHitsAggregate
	{
		[JsonPropertyName("hits")]
		public Nest.Global.Search.HitsMetadata<Dictionary<string, object>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetrics
	{
		[JsonPropertyName("metrics")]
		public Dictionary<string, OneOf<long, double, string>> Metrics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public IReadOnlyCollection<OneOf<long, double, string>> Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetricsAggregate
	{
		[JsonPropertyName("top")]
		public IReadOnlyCollection<Nest.Aggregations.TopMetrics> Top
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ValueAggregate
	{
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_as_string")]
		public string? ValueAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}