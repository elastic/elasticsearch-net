// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class WatcherNamespace : NamespacedClientProxy
	{
		internal WatcherNamespace(ElasticClient client) : base(client)
		{
		}

		public AcknowledgeWatchResponse AcknowledgeWatch(IAcknowledgeWatchRequest request)
		{
			return DoRequest<IAcknowledgeWatchRequest, AcknowledgeWatchResponse>(request, request.RequestParameters);
		}

		public Task<AcknowledgeWatchResponse> AcknowledgeWatchAsync(IAcknowledgeWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAcknowledgeWatchRequest, AcknowledgeWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ActivateWatchResponse ActivateWatch(IActivateWatchRequest request)
		{
			return DoRequest<IActivateWatchRequest, ActivateWatchResponse>(request, request.RequestParameters);
		}

		public Task<ActivateWatchResponse> ActivateWatchAsync(IActivateWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IActivateWatchRequest, ActivateWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeactivateWatchResponse DeactivateWatch(IDeactivateWatchRequest request)
		{
			return DoRequest<IDeactivateWatchRequest, DeactivateWatchResponse>(request, request.RequestParameters);
		}

		public Task<DeactivateWatchResponse> DeactivateWatchAsync(IDeactivateWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeactivateWatchRequest, DeactivateWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteWatchResponse DeleteWatch(IDeleteWatchRequest request)
		{
			return DoRequest<IDeleteWatchRequest, DeleteWatchResponse>(request, request.RequestParameters);
		}

		public Task<DeleteWatchResponse> DeleteWatchAsync(IDeleteWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteWatchRequest, DeleteWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExecuteWatchResponse ExecuteWatch(IExecuteWatchRequest request)
		{
			return DoRequest<IExecuteWatchRequest, ExecuteWatchResponse>(request, request.RequestParameters);
		}

		public Task<ExecuteWatchResponse> ExecuteWatchAsync(IExecuteWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExecuteWatchRequest, ExecuteWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetWatchResponse GetWatch(IGetWatchRequest request)
		{
			return DoRequest<IGetWatchRequest, GetWatchResponse>(request, request.RequestParameters);
		}

		public Task<GetWatchResponse> GetWatchAsync(IGetWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetWatchRequest, GetWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutWatchResponse PutWatch(IPutWatchRequest request)
		{
			return DoRequest<IPutWatchRequest, PutWatchResponse>(request, request.RequestParameters);
		}

		public Task<PutWatchResponse> PutWatchAsync(IPutWatchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutWatchRequest, PutWatchResponse>(request, request.RequestParameters, cancellationToken);
		}

		public QueryWatchesResponse QueryWatches(IQueryWatchesRequest request)
		{
			return DoRequest<IQueryWatchesRequest, QueryWatchesResponse>(request, request.RequestParameters);
		}

		public Task<QueryWatchesResponse> QueryWatchesAsync(IQueryWatchesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IQueryWatchesRequest, QueryWatchesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartWatcherResponse StartWatcher(IStartWatcherRequest request)
		{
			return DoRequest<IStartWatcherRequest, StartWatcherResponse>(request, request.RequestParameters);
		}

		public Task<StartWatcherResponse> StartWatcherAsync(IStartWatcherRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartWatcherRequest, StartWatcherResponse>(request, request.RequestParameters, cancellationToken);
		}

		public WatcherStatsResponse Stats(IWatcherStatsRequest request)
		{
			return DoRequest<IWatcherStatsRequest, WatcherStatsResponse>(request, request.RequestParameters);
		}

		public Task<WatcherStatsResponse> StatsAsync(IWatcherStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IWatcherStatsRequest, WatcherStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StopWatcherResponse StopWatcher(IStopWatcherRequest request)
		{
			return DoRequest<IStopWatcherRequest, StopWatcherResponse>(request, request.RequestParameters);
		}

		public Task<StopWatcherResponse> StopWatcherAsync(IStopWatcherRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStopWatcherRequest, StopWatcherResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}