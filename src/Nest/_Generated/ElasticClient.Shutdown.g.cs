// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Shutdown
{
	public class ShutdownNamespace : NamespacedClientProxy
	{
		internal ShutdownNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteNodeResponse DeleteNode(IDeleteNodeRequest request)
		{
			return DoRequest<IDeleteNodeRequest, DeleteNodeResponse>(request, request.RequestParameters);
		}

		public Task<DeleteNodeResponse> DeleteNodeAsync(IDeleteNodeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteNodeRequest, DeleteNodeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetNodeResponse GetNode(IGetNodeRequest request)
		{
			return DoRequest<IGetNodeRequest, GetNodeResponse>(request, request.RequestParameters);
		}

		public Task<GetNodeResponse> GetNodeAsync(IGetNodeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetNodeRequest, GetNodeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetNodeResponse GetNode(Func<GetNodeDescriptor, IGetNodeRequest> selector = null)
		{
			return GetNode(selector.InvokeOrDefault(new GetNodeDescriptor()));
		}

		public Task<GetNodeResponse> GetNodeAsync(Func<GetNodeDescriptor, IGetNodeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetNodeAsync(selector.InvokeOrDefault(new GetNodeDescriptor()), cancellationToken);
		}

		public PutNodeResponse PutNode(IPutNodeRequest request)
		{
			return DoRequest<IPutNodeRequest, PutNodeResponse>(request, request.RequestParameters);
		}

		public Task<PutNodeResponse> PutNodeAsync(IPutNodeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutNodeRequest, PutNodeResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}