// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Autoscaling
{
	public class AutoscalingNamespace : NamespacedClientProxy
	{
		internal AutoscalingNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteAutoscalingPolicyResponse DeletePolicy(IDeleteAutoscalingPolicyRequest request) => DoRequest<IDeleteAutoscalingPolicyRequest, DeleteAutoscalingPolicyResponse>(request, request.RequestParameters);
		public Task<DeleteAutoscalingPolicyResponse> DeletePolicyAsync(IDeleteAutoscalingPolicyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteAutoscalingPolicyRequest, DeleteAutoscalingPolicyResponse>(request, request.RequestParameters, cancellationToken);
		//public DeleteAutoscalingPolicyResponse DeletePolicy(string name, Func<DeleteAutoscalingPolicyDescriptor, IDeleteAutoscalingPolicyRequest> selector = null) => DeletePolicy(selector.InvokeOrDefault(new DeleteAutoscalingPolicyDescriptor(name)));
		//public Task<DeleteAutoscalingPolicyResponse> DeletePolicyAsync(string name, Func<DeleteAutoscalingPolicyDescriptor, IDeleteAutoscalingPolicyRequest> selector = null, CancellationToken cancellationToken = default) => DeletePolicyAsync(selector.InvokeOrDefault(new DeleteAutoscalingPolicyDescriptor(name)), cancellationToken);
		public GetAutoscalingCapacityResponse GetCapacity(IGetAutoscalingCapacityRequest request) => DoRequest<IGetAutoscalingCapacityRequest, GetAutoscalingCapacityResponse>(request, request.RequestParameters);
		public Task<GetAutoscalingCapacityResponse> GetCapacityAsync(IGetAutoscalingCapacityRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetAutoscalingCapacityRequest, GetAutoscalingCapacityResponse>(request, request.RequestParameters, cancellationToken);
		public GetAutoscalingCapacityResponse GetCapacity(Func<GetAutoscalingCapacityDescriptor, IGetAutoscalingCapacityRequest> selector = null) => GetCapacity(selector.InvokeOrDefault(new GetAutoscalingCapacityDescriptor()));
		public Task<GetAutoscalingCapacityResponse> GetCapacityAsync(Func<GetAutoscalingCapacityDescriptor, IGetAutoscalingCapacityRequest> selector = null, CancellationToken cancellationToken = default) => GetCapacityAsync(selector.InvokeOrDefault(new GetAutoscalingCapacityDescriptor()), cancellationToken);
		public GetAutoscalingPolicyResponse GetPolicy(IGetAutoscalingPolicyRequest request) => DoRequest<IGetAutoscalingPolicyRequest, GetAutoscalingPolicyResponse>(request, request.RequestParameters);
		public Task<GetAutoscalingPolicyResponse> GetPolicyAsync(IGetAutoscalingPolicyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetAutoscalingPolicyRequest, GetAutoscalingPolicyResponse>(request, request.RequestParameters, cancellationToken);
		//public GetAutoscalingPolicyResponse GetPolicy(string name, Func<GetAutoscalingPolicyDescriptor, IGetAutoscalingPolicyRequest> selector = null) => GetPolicy(selector.InvokeOrDefault(new GetAutoscalingPolicyDescriptor(name)));
		//public Task<GetAutoscalingPolicyResponse> GetPolicyAsync(string name, Func<GetAutoscalingPolicyDescriptor, IGetAutoscalingPolicyRequest> selector = null, CancellationToken cancellationToken = default) => GetPolicyAsync(selector.InvokeOrDefault(new GetAutoscalingPolicyDescriptor(name)), cancellationToken);
		public PutAutoscalingPolicyResponse PutPolicy(IPutAutoscalingPolicyRequest request) => DoRequest<IPutAutoscalingPolicyRequest, PutAutoscalingPolicyResponse>(request, request.RequestParameters);
		public Task<PutAutoscalingPolicyResponse> PutPolicyAsync(IPutAutoscalingPolicyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutAutoscalingPolicyRequest, PutAutoscalingPolicyResponse>(request, request.RequestParameters, cancellationToken);
		//public PutAutoscalingPolicyResponse PutPolicy(string name, Func<PutAutoscalingPolicyDescriptor, IPutAutoscalingPolicyRequest> selector = null) => PutPolicy(selector.InvokeOrDefault(new PutAutoscalingPolicyDescriptor(name)));
		//public Task<PutAutoscalingPolicyResponse> PutPolicyAsync(string name, Func<PutAutoscalingPolicyDescriptor, IPutAutoscalingPolicyRequest> selector = null, CancellationToken cancellationToken = default) => PutPolicyAsync(selector.InvokeOrDefault(new PutAutoscalingPolicyDescriptor(name)), cancellationToken);
	}
}
