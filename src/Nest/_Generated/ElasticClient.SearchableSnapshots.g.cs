// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.SearchableSnapshots
{
	public class SearchableSnapshotsNamespace : NamespacedClientProxy
	{
		internal SearchableSnapshotsNamespace(ElasticClient client) : base(client)
		{
		}

		public ClearCacheResponse ClearCache(IClearCacheRequest request)
		{
			return DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);
		}

		public Task<ClearCacheResponse> ClearCacheAsync(IClearCacheRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCacheResponse ClearCache(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null)
		{
			return ClearCache(selector.InvokeOrDefault(new ClearCacheDescriptor()));
		}

		public Task<ClearCacheResponse> ClearCacheAsync(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCacheAsync(selector.InvokeOrDefault(new ClearCacheDescriptor()), cancellationToken);
		}

		public MountResponse Mount(IMountRequest request)
		{
			return DoRequest<IMountRequest, MountResponse>(request, request.RequestParameters);
		}

		public Task<MountResponse> MountAsync(IMountRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IMountRequest, MountResponse>(request, request.RequestParameters, cancellationToken);
		}

		public MountResponse Mount(Nest.Name repository, Nest.Name snapshot, Func<MountDescriptor, IMountRequest> selector = null)
		{
			return Mount(selector.InvokeOrDefault(new MountDescriptor(repository, snapshot)));
		}

		public Task<MountResponse> MountAsync(Nest.Name repository, Nest.Name snapshot, Func<MountDescriptor, IMountRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return MountAsync(selector.InvokeOrDefault(new MountDescriptor(repository, snapshot)), cancellationToken);
		}
	}
}