// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.IndexManagement
{
	public class IndexManagementNamespace : NamespacedClientProxy
	{
		internal IndexManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public AddBlockResponse AddBlock(IAddBlockRequest request)
		{
			return DoRequest<IAddBlockRequest, AddBlockResponse>(request, request.RequestParameters);
		}

		public Task<AddBlockResponse> AddBlockAsync(IAddBlockRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAddBlockRequest, AddBlockResponse>(request, request.RequestParameters, cancellationToken);
		}

		public AddBlockResponse AddBlock(Nest.IndexName index, Nest.IndexManagement.AddBlock.IndicesBlockOptions block, Func<AddBlockDescriptor, IAddBlockRequest> selector = null)
		{
			return AddBlock(selector.InvokeOrDefault(new AddBlockDescriptor(index, block)));
		}

		public Task<AddBlockResponse> AddBlockAsync(Nest.IndexName index, Nest.IndexManagement.AddBlock.IndicesBlockOptions block, Func<AddBlockDescriptor, IAddBlockRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return AddBlockAsync(selector.InvokeOrDefault(new AddBlockDescriptor(index, block)), cancellationToken);
		}

		public AnalyzeResponse Analyze(IAnalyzeRequest request)
		{
			return DoRequest<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters);
		}

		public Task<AnalyzeResponse> AnalyzeAsync(IAnalyzeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public AnalyzeResponse Analyze(Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null)
		{
			return Analyze(selector.InvokeOrDefault(new AnalyzeDescriptor()));
		}

		public Task<AnalyzeResponse> AnalyzeAsync(Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return AnalyzeAsync(selector.InvokeOrDefault(new AnalyzeDescriptor()), cancellationToken);
		}

		public ClearCacheResponse ClearCache(IClearCacheRequest request)
		{
			return DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);
		}

		public Task<ClearCacheResponse> ClearCacheAsync(IClearCacheRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCacheResponse ClearCache(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null)
		{
			return ClearCache(selector.InvokeOrDefault(new ClearCacheDescriptor()));
		}

		public Task<ClearCacheResponse> ClearCacheAsync(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCacheAsync(selector.InvokeOrDefault(new ClearCacheDescriptor()), cancellationToken);
		}

		public CloneResponse Clone(ICloneRequest request)
		{
			return DoRequest<ICloneRequest, CloneResponse>(request, request.RequestParameters);
		}

		public Task<CloneResponse> CloneAsync(ICloneRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICloneRequest, CloneResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CloneResponse Clone(Nest.IndexName index, Nest.Name target, Func<CloneDescriptor, ICloneRequest> selector = null)
		{
			return Clone(selector.InvokeOrDefault(new CloneDescriptor(index, target)));
		}

		public Task<CloneResponse> CloneAsync(Nest.IndexName index, Nest.Name target, Func<CloneDescriptor, ICloneRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CloneAsync(selector.InvokeOrDefault(new CloneDescriptor(index, target)), cancellationToken);
		}

		public CloseResponse Close(ICloseRequest request)
		{
			return DoRequest<ICloseRequest, CloseResponse>(request, request.RequestParameters);
		}

		public Task<CloseResponse> CloseAsync(ICloseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICloseRequest, CloseResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CloseResponse Close(Nest.Indices index, Func<CloseDescriptor, ICloseRequest> selector = null)
		{
			return Close(selector.InvokeOrDefault(new CloseDescriptor(index)));
		}

		public Task<CloseResponse> CloseAsync(Nest.Indices index, Func<CloseDescriptor, ICloseRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CloseAsync(selector.InvokeOrDefault(new CloseDescriptor(index)), cancellationToken);
		}

		public CreateResponse Create(ICreateRequest request)
		{
			return DoRequest<ICreateRequest, CreateResponse>(request, request.RequestParameters);
		}

		public Task<CreateResponse> CreateAsync(ICreateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateRequest, CreateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateResponse Create(Nest.IndexName index, Func<CreateDescriptor, ICreateRequest> selector = null)
		{
			return Create(selector.InvokeOrDefault(new CreateDescriptor(index)));
		}

		public Task<CreateResponse> CreateAsync(Nest.IndexName index, Func<CreateDescriptor, ICreateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateAsync(selector.InvokeOrDefault(new CreateDescriptor(index)), cancellationToken);
		}

		public CreateDataStreamResponse CreateDataStream(ICreateDataStreamRequest request)
		{
			return DoRequest<ICreateDataStreamRequest, CreateDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<CreateDataStreamResponse> CreateDataStreamAsync(ICreateDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateDataStreamRequest, CreateDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateDataStreamResponse CreateDataStream(Nest.DataStreamName name, Func<CreateDataStreamDescriptor, ICreateDataStreamRequest> selector = null)
		{
			return CreateDataStream(selector.InvokeOrDefault(new CreateDataStreamDescriptor(name)));
		}

		public Task<CreateDataStreamResponse> CreateDataStreamAsync(Nest.DataStreamName name, Func<CreateDataStreamDescriptor, ICreateDataStreamRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateDataStreamAsync(selector.InvokeOrDefault(new CreateDataStreamDescriptor(name)), cancellationToken);
		}

		public DataStreamsStatsResponse DataStreamsStats(IDataStreamsStatsRequest request)
		{
			return DoRequest<IDataStreamsStatsRequest, DataStreamsStatsResponse>(request, request.RequestParameters);
		}

		public Task<DataStreamsStatsResponse> DataStreamsStatsAsync(IDataStreamsStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDataStreamsStatsRequest, DataStreamsStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DataStreamsStatsResponse DataStreamsStats(Func<DataStreamsStatsDescriptor, IDataStreamsStatsRequest> selector = null)
		{
			return DataStreamsStats(selector.InvokeOrDefault(new DataStreamsStatsDescriptor()));
		}

		public Task<DataStreamsStatsResponse> DataStreamsStatsAsync(Func<DataStreamsStatsDescriptor, IDataStreamsStatsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DataStreamsStatsAsync(selector.InvokeOrDefault(new DataStreamsStatsDescriptor()), cancellationToken);
		}

		public DeleteResponse Delete(IDeleteRequest request)
		{
			return DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		}

		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteResponse Delete(Nest.Indices index, Func<DeleteDescriptor, IDeleteRequest> selector = null)
		{
			return Delete(selector.InvokeOrDefault(new DeleteDescriptor(index)));
		}

		public Task<DeleteResponse> DeleteAsync(Nest.Indices index, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(index)), cancellationToken);
		}

		public DeleteAliasResponse DeleteAlias(IDeleteAliasRequest request)
		{
			return DoRequest<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters);
		}

		public Task<DeleteAliasResponse> DeleteAliasAsync(IDeleteAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteAliasResponse DeleteAlias(Nest.Indices index, Nest.Names name, Func<DeleteAliasDescriptor, IDeleteAliasRequest> selector = null)
		{
			return DeleteAlias(selector.InvokeOrDefault(new DeleteAliasDescriptor(index, name)));
		}

		public Task<DeleteAliasResponse> DeleteAliasAsync(Nest.Indices index, Nest.Names name, Func<DeleteAliasDescriptor, IDeleteAliasRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteAliasAsync(selector.InvokeOrDefault(new DeleteAliasDescriptor(index, name)), cancellationToken);
		}

		public DeleteDataStreamResponse DeleteDataStream(IDeleteDataStreamRequest request)
		{
			return DoRequest<IDeleteDataStreamRequest, DeleteDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<DeleteDataStreamResponse> DeleteDataStreamAsync(IDeleteDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteDataStreamRequest, DeleteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteDataStreamResponse DeleteDataStream(Nest.DataStreamName name, Func<DeleteDataStreamDescriptor, IDeleteDataStreamRequest> selector = null)
		{
			return DeleteDataStream(selector.InvokeOrDefault(new DeleteDataStreamDescriptor(name)));
		}

		public Task<DeleteDataStreamResponse> DeleteDataStreamAsync(Nest.DataStreamName name, Func<DeleteDataStreamDescriptor, IDeleteDataStreamRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteDataStreamAsync(selector.InvokeOrDefault(new DeleteDataStreamDescriptor(name)), cancellationToken);
		}

		public DeleteIndexTemplateResponse DeleteIndexTemplate(IDeleteIndexTemplateRequest request)
		{
			return DoRequest<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(IDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteIndexTemplateResponse DeleteIndexTemplate(Nest.Name name, Func<DeleteIndexTemplateDescriptor, IDeleteIndexTemplateRequest> selector = null)
		{
			return DeleteIndexTemplate(selector.InvokeOrDefault(new DeleteIndexTemplateDescriptor(name)));
		}

		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(Nest.Name name, Func<DeleteIndexTemplateDescriptor, IDeleteIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteIndexTemplateAsync(selector.InvokeOrDefault(new DeleteIndexTemplateDescriptor(name)), cancellationToken);
		}

		public DeleteTemplateResponse DeleteTemplate(IDeleteTemplateRequest request)
		{
			return DoRequest<IDeleteTemplateRequest, DeleteTemplateResponse>(request, request.RequestParameters);
		}

		public Task<DeleteTemplateResponse> DeleteTemplateAsync(IDeleteTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteTemplateRequest, DeleteTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteTemplateResponse DeleteTemplate(Nest.Name name, Func<DeleteTemplateDescriptor, IDeleteTemplateRequest> selector = null)
		{
			return DeleteTemplate(selector.InvokeOrDefault(new DeleteTemplateDescriptor(name)));
		}

		public Task<DeleteTemplateResponse> DeleteTemplateAsync(Nest.Name name, Func<DeleteTemplateDescriptor, IDeleteTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteTemplateAsync(selector.InvokeOrDefault(new DeleteTemplateDescriptor(name)), cancellationToken);
		}

		public ExistsResponse Exists(IExistsRequest request)
		{
			return DoRequest<IExistsRequest, ExistsResponse>(request, request.RequestParameters);
		}

		public Task<ExistsResponse> ExistsAsync(IExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsRequest, ExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsResponse Exists(Nest.Indices index, Func<ExistsDescriptor, IExistsRequest> selector = null)
		{
			return Exists(selector.InvokeOrDefault(new ExistsDescriptor(index)));
		}

		public Task<ExistsResponse> ExistsAsync(Nest.Indices index, Func<ExistsDescriptor, IExistsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsAsync(selector.InvokeOrDefault(new ExistsDescriptor(index)), cancellationToken);
		}

		public ExistsAliasResponse ExistsAlias(IExistsAliasRequest request)
		{
			return DoRequest<IExistsAliasRequest, ExistsAliasResponse>(request, request.RequestParameters);
		}

		public Task<ExistsAliasResponse> ExistsAliasAsync(IExistsAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsAliasRequest, ExistsAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsAliasResponse ExistsAlias(Nest.Names name, Func<ExistsAliasDescriptor, IExistsAliasRequest> selector = null)
		{
			return ExistsAlias(selector.InvokeOrDefault(new ExistsAliasDescriptor(name)));
		}

		public Task<ExistsAliasResponse> ExistsAliasAsync(Nest.Names name, Func<ExistsAliasDescriptor, IExistsAliasRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsAliasAsync(selector.InvokeOrDefault(new ExistsAliasDescriptor(name)), cancellationToken);
		}

		public ExistsIndexTemplateResponse ExistsIndexTemplate(IExistsIndexTemplateRequest request)
		{
			return DoRequest<IExistsIndexTemplateRequest, ExistsIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<ExistsIndexTemplateResponse> ExistsIndexTemplateAsync(IExistsIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsIndexTemplateRequest, ExistsIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsIndexTemplateResponse ExistsIndexTemplate(Nest.Name name, Func<ExistsIndexTemplateDescriptor, IExistsIndexTemplateRequest> selector = null)
		{
			return ExistsIndexTemplate(selector.InvokeOrDefault(new ExistsIndexTemplateDescriptor(name)));
		}

		public Task<ExistsIndexTemplateResponse> ExistsIndexTemplateAsync(Nest.Name name, Func<ExistsIndexTemplateDescriptor, IExistsIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsIndexTemplateAsync(selector.InvokeOrDefault(new ExistsIndexTemplateDescriptor(name)), cancellationToken);
		}

		public ExistsTemplateResponse ExistsTemplate(IExistsTemplateRequest request)
		{
			return DoRequest<IExistsTemplateRequest, ExistsTemplateResponse>(request, request.RequestParameters);
		}

		public Task<ExistsTemplateResponse> ExistsTemplateAsync(IExistsTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsTemplateRequest, ExistsTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsTemplateResponse ExistsTemplate(Nest.Names name, Func<ExistsTemplateDescriptor, IExistsTemplateRequest> selector = null)
		{
			return ExistsTemplate(selector.InvokeOrDefault(new ExistsTemplateDescriptor(name)));
		}

		public Task<ExistsTemplateResponse> ExistsTemplateAsync(Nest.Names name, Func<ExistsTemplateDescriptor, IExistsTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsTemplateAsync(selector.InvokeOrDefault(new ExistsTemplateDescriptor(name)), cancellationToken);
		}

		public FlushResponse Flush(IFlushRequest request)
		{
			return DoRequest<IFlushRequest, FlushResponse>(request, request.RequestParameters);
		}

		public Task<FlushResponse> FlushAsync(IFlushRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFlushRequest, FlushResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FlushResponse Flush(Func<FlushDescriptor, IFlushRequest> selector = null)
		{
			return Flush(selector.InvokeOrDefault(new FlushDescriptor()));
		}

		public Task<FlushResponse> FlushAsync(Func<FlushDescriptor, IFlushRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return FlushAsync(selector.InvokeOrDefault(new FlushDescriptor()), cancellationToken);
		}

		public ForcemergeResponse Forcemerge(IForcemergeRequest request)
		{
			return DoRequest<IForcemergeRequest, ForcemergeResponse>(request, request.RequestParameters);
		}

		public Task<ForcemergeResponse> ForcemergeAsync(IForcemergeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IForcemergeRequest, ForcemergeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ForcemergeResponse Forcemerge(Func<ForcemergeDescriptor, IForcemergeRequest> selector = null)
		{
			return Forcemerge(selector.InvokeOrDefault(new ForcemergeDescriptor()));
		}

		public Task<ForcemergeResponse> ForcemergeAsync(Func<ForcemergeDescriptor, IForcemergeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ForcemergeAsync(selector.InvokeOrDefault(new ForcemergeDescriptor()), cancellationToken);
		}

		public GetResponse Get(IGetRequest request)
		{
			return DoRequest<IGetRequest, GetResponse>(request, request.RequestParameters);
		}

		public Task<GetResponse> GetAsync(IGetRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRequest, GetResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetResponse Get(Nest.Indices index, Func<GetDescriptor, IGetRequest> selector = null)
		{
			return Get(selector.InvokeOrDefault(new GetDescriptor(index)));
		}

		public Task<GetResponse> GetAsync(Nest.Indices index, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetAsync(selector.InvokeOrDefault(new GetDescriptor(index)), cancellationToken);
		}

		public GetAliasResponse GetAlias(IGetAliasRequest request)
		{
			return DoRequest<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters);
		}

		public Task<GetAliasResponse> GetAliasAsync(IGetAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetAliasResponse GetAlias(Func<GetAliasDescriptor, IGetAliasRequest> selector = null)
		{
			return GetAlias(selector.InvokeOrDefault(new GetAliasDescriptor()));
		}

		public Task<GetAliasResponse> GetAliasAsync(Func<GetAliasDescriptor, IGetAliasRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetAliasAsync(selector.InvokeOrDefault(new GetAliasDescriptor()), cancellationToken);
		}

		public GetDataStreamResponse GetDataStream(IGetDataStreamRequest request)
		{
			return DoRequest<IGetDataStreamRequest, GetDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<GetDataStreamResponse> GetDataStreamAsync(IGetDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetDataStreamRequest, GetDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetDataStreamResponse GetDataStream(Func<GetDataStreamDescriptor, IGetDataStreamRequest> selector = null)
		{
			return GetDataStream(selector.InvokeOrDefault(new GetDataStreamDescriptor()));
		}

		public Task<GetDataStreamResponse> GetDataStreamAsync(Func<GetDataStreamDescriptor, IGetDataStreamRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetDataStreamAsync(selector.InvokeOrDefault(new GetDataStreamDescriptor()), cancellationToken);
		}

		public GetFieldMappingResponse GetFieldMapping(IGetFieldMappingRequest request)
		{
			return DoRequest<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetFieldMappingResponse> GetFieldMappingAsync(IGetFieldMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetFieldMappingResponse GetFieldMapping(Nest.Fields fields, Func<GetFieldMappingDescriptor, IGetFieldMappingRequest> selector = null)
		{
			return GetFieldMapping(selector.InvokeOrDefault(new GetFieldMappingDescriptor(fields)));
		}

		public Task<GetFieldMappingResponse> GetFieldMappingAsync(Nest.Fields fields, Func<GetFieldMappingDescriptor, IGetFieldMappingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetFieldMappingAsync(selector.InvokeOrDefault(new GetFieldMappingDescriptor(fields)), cancellationToken);
		}

		public GetIndexTemplateResponse GetIndexTemplate(IGetIndexTemplateRequest request)
		{
			return DoRequest<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<GetIndexTemplateResponse> GetIndexTemplateAsync(IGetIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetIndexTemplateResponse GetIndexTemplate(Func<GetIndexTemplateDescriptor, IGetIndexTemplateRequest> selector = null)
		{
			return GetIndexTemplate(selector.InvokeOrDefault(new GetIndexTemplateDescriptor()));
		}

		public Task<GetIndexTemplateResponse> GetIndexTemplateAsync(Func<GetIndexTemplateDescriptor, IGetIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetIndexTemplateAsync(selector.InvokeOrDefault(new GetIndexTemplateDescriptor()), cancellationToken);
		}

		public GetMappingResponse GetMapping(IGetMappingRequest request)
		{
			return DoRequest<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetMappingResponse> GetMappingAsync(IGetMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetMappingResponse GetMapping(Func<GetMappingDescriptor, IGetMappingRequest> selector = null)
		{
			return GetMapping(selector.InvokeOrDefault(new GetMappingDescriptor()));
		}

		public Task<GetMappingResponse> GetMappingAsync(Func<GetMappingDescriptor, IGetMappingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetMappingAsync(selector.InvokeOrDefault(new GetMappingDescriptor()), cancellationToken);
		}

		public GetSettingsResponse GetSettings(IGetSettingsRequest request)
		{
			return DoRequest<IGetSettingsRequest, GetSettingsResponse>(request, request.RequestParameters);
		}

		public Task<GetSettingsResponse> GetSettingsAsync(IGetSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetSettingsRequest, GetSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetSettingsResponse GetSettings(Func<GetSettingsDescriptor, IGetSettingsRequest> selector = null)
		{
			return GetSettings(selector.InvokeOrDefault(new GetSettingsDescriptor()));
		}

		public Task<GetSettingsResponse> GetSettingsAsync(Func<GetSettingsDescriptor, IGetSettingsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetSettingsAsync(selector.InvokeOrDefault(new GetSettingsDescriptor()), cancellationToken);
		}

		public GetTemplateResponse GetTemplate(IGetTemplateRequest request)
		{
			return DoRequest<IGetTemplateRequest, GetTemplateResponse>(request, request.RequestParameters);
		}

		public Task<GetTemplateResponse> GetTemplateAsync(IGetTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetTemplateRequest, GetTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetTemplateResponse GetTemplate(Func<GetTemplateDescriptor, IGetTemplateRequest> selector = null)
		{
			return GetTemplate(selector.InvokeOrDefault(new GetTemplateDescriptor()));
		}

		public Task<GetTemplateResponse> GetTemplateAsync(Func<GetTemplateDescriptor, IGetTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetTemplateAsync(selector.InvokeOrDefault(new GetTemplateDescriptor()), cancellationToken);
		}

		public MigrateToDataStreamResponse MigrateToDataStream(IMigrateToDataStreamRequest request)
		{
			return DoRequest<IMigrateToDataStreamRequest, MigrateToDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<MigrateToDataStreamResponse> MigrateToDataStreamAsync(IMigrateToDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IMigrateToDataStreamRequest, MigrateToDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public MigrateToDataStreamResponse MigrateToDataStream(Nest.IndexName name, Func<MigrateToDataStreamDescriptor, IMigrateToDataStreamRequest> selector = null)
		{
			return MigrateToDataStream(selector.InvokeOrDefault(new MigrateToDataStreamDescriptor(name)));
		}

		public Task<MigrateToDataStreamResponse> MigrateToDataStreamAsync(Nest.IndexName name, Func<MigrateToDataStreamDescriptor, IMigrateToDataStreamRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return MigrateToDataStreamAsync(selector.InvokeOrDefault(new MigrateToDataStreamDescriptor(name)), cancellationToken);
		}

		public OpenResponse Open(IOpenRequest request)
		{
			return DoRequest<IOpenRequest, OpenResponse>(request, request.RequestParameters);
		}

		public Task<OpenResponse> OpenAsync(IOpenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IOpenRequest, OpenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public OpenResponse Open(Nest.Indices index, Func<OpenDescriptor, IOpenRequest> selector = null)
		{
			return Open(selector.InvokeOrDefault(new OpenDescriptor(index)));
		}

		public Task<OpenResponse> OpenAsync(Nest.Indices index, Func<OpenDescriptor, IOpenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return OpenAsync(selector.InvokeOrDefault(new OpenDescriptor(index)), cancellationToken);
		}

		public PromoteDataStreamResponse PromoteDataStream(IPromoteDataStreamRequest request)
		{
			return DoRequest<IPromoteDataStreamRequest, PromoteDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<PromoteDataStreamResponse> PromoteDataStreamAsync(IPromoteDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPromoteDataStreamRequest, PromoteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PromoteDataStreamResponse PromoteDataStream(Nest.IndexName name, Func<PromoteDataStreamDescriptor, IPromoteDataStreamRequest> selector = null)
		{
			return PromoteDataStream(selector.InvokeOrDefault(new PromoteDataStreamDescriptor(name)));
		}

		public Task<PromoteDataStreamResponse> PromoteDataStreamAsync(Nest.IndexName name, Func<PromoteDataStreamDescriptor, IPromoteDataStreamRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PromoteDataStreamAsync(selector.InvokeOrDefault(new PromoteDataStreamDescriptor(name)), cancellationToken);
		}

		public PutAliasResponse PutAlias(IPutAliasRequest request)
		{
			return DoRequest<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters);
		}

		public Task<PutAliasResponse> PutAliasAsync(IPutAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutAliasResponse PutAlias(Nest.Indices index, Nest.Name name, Func<PutAliasDescriptor, IPutAliasRequest> selector = null)
		{
			return PutAlias(selector.InvokeOrDefault(new PutAliasDescriptor(index, name)));
		}

		public Task<PutAliasResponse> PutAliasAsync(Nest.Indices index, Nest.Name name, Func<PutAliasDescriptor, IPutAliasRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutAliasAsync(selector.InvokeOrDefault(new PutAliasDescriptor(index, name)), cancellationToken);
		}

		public PutIndexTemplateResponse PutIndexTemplate(IPutIndexTemplateRequest request)
		{
			return DoRequest<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<PutIndexTemplateResponse> PutIndexTemplateAsync(IPutIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutIndexTemplateResponse PutIndexTemplate(Nest.Name name, Func<PutIndexTemplateDescriptor, IPutIndexTemplateRequest> selector = null)
		{
			return PutIndexTemplate(selector.InvokeOrDefault(new PutIndexTemplateDescriptor(name)));
		}

		public Task<PutIndexTemplateResponse> PutIndexTemplateAsync(Nest.Name name, Func<PutIndexTemplateDescriptor, IPutIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutIndexTemplateAsync(selector.InvokeOrDefault(new PutIndexTemplateDescriptor(name)), cancellationToken);
		}

		public PutMappingResponse PutMapping(IPutMappingRequest request)
		{
			return DoRequest<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters);
		}

		public Task<PutMappingResponse> PutMappingAsync(IPutMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutSettingsResponse PutSettings(IPutSettingsRequest request)
		{
			return DoRequest<IPutSettingsRequest, PutSettingsResponse>(request, request.RequestParameters);
		}

		public Task<PutSettingsResponse> PutSettingsAsync(IPutSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutSettingsRequest, PutSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutSettingsResponse PutSettings(Func<PutSettingsDescriptor, IPutSettingsRequest> selector = null)
		{
			return PutSettings(selector.InvokeOrDefault(new PutSettingsDescriptor()));
		}

		public Task<PutSettingsResponse> PutSettingsAsync(Func<PutSettingsDescriptor, IPutSettingsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutSettingsAsync(selector.InvokeOrDefault(new PutSettingsDescriptor()), cancellationToken);
		}

		public PutTemplateResponse PutTemplate(IPutTemplateRequest request)
		{
			return DoRequest<IPutTemplateRequest, PutTemplateResponse>(request, request.RequestParameters);
		}

		public Task<PutTemplateResponse> PutTemplateAsync(IPutTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutTemplateRequest, PutTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutTemplateResponse PutTemplate(Nest.Name name, Func<PutTemplateDescriptor, IPutTemplateRequest> selector = null)
		{
			return PutTemplate(selector.InvokeOrDefault(new PutTemplateDescriptor(name)));
		}

		public Task<PutTemplateResponse> PutTemplateAsync(Nest.Name name, Func<PutTemplateDescriptor, IPutTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutTemplateAsync(selector.InvokeOrDefault(new PutTemplateDescriptor(name)), cancellationToken);
		}

		public RecoveryResponse Recovery(IRecoveryRequest request)
		{
			return DoRequest<IRecoveryRequest, RecoveryResponse>(request, request.RequestParameters);
		}

		public Task<RecoveryResponse> RecoveryAsync(IRecoveryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRecoveryRequest, RecoveryResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RecoveryResponse Recovery(Func<RecoveryDescriptor, IRecoveryRequest> selector = null)
		{
			return Recovery(selector.InvokeOrDefault(new RecoveryDescriptor()));
		}

		public Task<RecoveryResponse> RecoveryAsync(Func<RecoveryDescriptor, IRecoveryRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RecoveryAsync(selector.InvokeOrDefault(new RecoveryDescriptor()), cancellationToken);
		}

		public RefreshResponse Refresh(IRefreshRequest request)
		{
			return DoRequest<IRefreshRequest, RefreshResponse>(request, request.RequestParameters);
		}

		public Task<RefreshResponse> RefreshAsync(IRefreshRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRefreshRequest, RefreshResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RefreshResponse Refresh(Func<RefreshDescriptor, IRefreshRequest> selector = null)
		{
			return Refresh(selector.InvokeOrDefault(new RefreshDescriptor()));
		}

		public Task<RefreshResponse> RefreshAsync(Func<RefreshDescriptor, IRefreshRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RefreshAsync(selector.InvokeOrDefault(new RefreshDescriptor()), cancellationToken);
		}

		public ReloadSearchAnalyzersResponse ReloadSearchAnalyzers(IReloadSearchAnalyzersRequest request)
		{
			return DoRequest<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters);
		}

		public Task<ReloadSearchAnalyzersResponse> ReloadSearchAnalyzersAsync(IReloadSearchAnalyzersRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ReloadSearchAnalyzersResponse ReloadSearchAnalyzers(Nest.Indices index, Func<ReloadSearchAnalyzersDescriptor, IReloadSearchAnalyzersRequest> selector = null)
		{
			return ReloadSearchAnalyzers(selector.InvokeOrDefault(new ReloadSearchAnalyzersDescriptor(index)));
		}

		public Task<ReloadSearchAnalyzersResponse> ReloadSearchAnalyzersAsync(Nest.Indices index, Func<ReloadSearchAnalyzersDescriptor, IReloadSearchAnalyzersRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ReloadSearchAnalyzersAsync(selector.InvokeOrDefault(new ReloadSearchAnalyzersDescriptor(index)), cancellationToken);
		}

		public ResolveIndexResponse ResolveIndex(IResolveIndexRequest request)
		{
			return DoRequest<IResolveIndexRequest, ResolveIndexResponse>(request, request.RequestParameters);
		}

		public Task<ResolveIndexResponse> ResolveIndexAsync(IResolveIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IResolveIndexRequest, ResolveIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ResolveIndexResponse ResolveIndex(Nest.Names name, Func<ResolveIndexDescriptor, IResolveIndexRequest> selector = null)
		{
			return ResolveIndex(selector.InvokeOrDefault(new ResolveIndexDescriptor(name)));
		}

		public Task<ResolveIndexResponse> ResolveIndexAsync(Nest.Names name, Func<ResolveIndexDescriptor, IResolveIndexRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ResolveIndexAsync(selector.InvokeOrDefault(new ResolveIndexDescriptor(name)), cancellationToken);
		}

		public RolloverResponse Rollover(IRolloverRequest request)
		{
			return DoRequest<IRolloverRequest, RolloverResponse>(request, request.RequestParameters);
		}

		public Task<RolloverResponse> RolloverAsync(IRolloverRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRolloverRequest, RolloverResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RolloverResponse Rollover(Nest.IndexAlias alias, Func<RolloverDescriptor, IRolloverRequest> selector = null)
		{
			return Rollover(selector.InvokeOrDefault(new RolloverDescriptor(alias)));
		}

		public Task<RolloverResponse> RolloverAsync(Nest.IndexAlias alias, Func<RolloverDescriptor, IRolloverRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RolloverAsync(selector.InvokeOrDefault(new RolloverDescriptor(alias)), cancellationToken);
		}

		public SegmentsResponse Segments(ISegmentsRequest request)
		{
			return DoRequest<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters);
		}

		public Task<SegmentsResponse> SegmentsAsync(ISegmentsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SegmentsResponse Segments(Func<SegmentsDescriptor, ISegmentsRequest> selector = null)
		{
			return Segments(selector.InvokeOrDefault(new SegmentsDescriptor()));
		}

		public Task<SegmentsResponse> SegmentsAsync(Func<SegmentsDescriptor, ISegmentsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SegmentsAsync(selector.InvokeOrDefault(new SegmentsDescriptor()), cancellationToken);
		}

		public ShardStoresResponse ShardStores(IShardStoresRequest request)
		{
			return DoRequest<IShardStoresRequest, ShardStoresResponse>(request, request.RequestParameters);
		}

		public Task<ShardStoresResponse> ShardStoresAsync(IShardStoresRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IShardStoresRequest, ShardStoresResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ShardStoresResponse ShardStores(Func<ShardStoresDescriptor, IShardStoresRequest> selector = null)
		{
			return ShardStores(selector.InvokeOrDefault(new ShardStoresDescriptor()));
		}

		public Task<ShardStoresResponse> ShardStoresAsync(Func<ShardStoresDescriptor, IShardStoresRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ShardStoresAsync(selector.InvokeOrDefault(new ShardStoresDescriptor()), cancellationToken);
		}

		public ShrinkResponse Shrink(IShrinkRequest request)
		{
			return DoRequest<IShrinkRequest, ShrinkResponse>(request, request.RequestParameters);
		}

		public Task<ShrinkResponse> ShrinkAsync(IShrinkRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IShrinkRequest, ShrinkResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ShrinkResponse Shrink(Nest.IndexName index, Nest.IndexName target, Func<ShrinkDescriptor, IShrinkRequest> selector = null)
		{
			return Shrink(selector.InvokeOrDefault(new ShrinkDescriptor(index, target)));
		}

		public Task<ShrinkResponse> ShrinkAsync(Nest.IndexName index, Nest.IndexName target, Func<ShrinkDescriptor, IShrinkRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ShrinkAsync(selector.InvokeOrDefault(new ShrinkDescriptor(index, target)), cancellationToken);
		}

		public SimulateIndexTemplateResponse SimulateIndexTemplate(ISimulateIndexTemplateRequest request)
		{
			return DoRequest<ISimulateIndexTemplateRequest, SimulateIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<SimulateIndexTemplateResponse> SimulateIndexTemplateAsync(ISimulateIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISimulateIndexTemplateRequest, SimulateIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SimulateTemplateResponse SimulateTemplate(ISimulateTemplateRequest request)
		{
			return DoRequest<ISimulateTemplateRequest, SimulateTemplateResponse>(request, request.RequestParameters);
		}

		public Task<SimulateTemplateResponse> SimulateTemplateAsync(ISimulateTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISimulateTemplateRequest, SimulateTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SimulateTemplateResponse SimulateTemplate(Func<SimulateTemplateDescriptor, ISimulateTemplateRequest> selector = null)
		{
			return SimulateTemplate(selector.InvokeOrDefault(new SimulateTemplateDescriptor()));
		}

		public Task<SimulateTemplateResponse> SimulateTemplateAsync(Func<SimulateTemplateDescriptor, ISimulateTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SimulateTemplateAsync(selector.InvokeOrDefault(new SimulateTemplateDescriptor()), cancellationToken);
		}

		public SplitResponse Split(ISplitRequest request)
		{
			return DoRequest<ISplitRequest, SplitResponse>(request, request.RequestParameters);
		}

		public Task<SplitResponse> SplitAsync(ISplitRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISplitRequest, SplitResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SplitResponse Split(Nest.IndexName index, Nest.IndexName target, Func<SplitDescriptor, ISplitRequest> selector = null)
		{
			return Split(selector.InvokeOrDefault(new SplitDescriptor(index, target)));
		}

		public Task<SplitResponse> SplitAsync(Nest.IndexName index, Nest.IndexName target, Func<SplitDescriptor, ISplitRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SplitAsync(selector.InvokeOrDefault(new SplitDescriptor(index, target)), cancellationToken);
		}

		public StatsResponse Stats(IStatsRequest request)
		{
			return DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		}

		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null)
		{
			return Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		}

		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
		}

		public UpdateAliasesResponse UpdateAliases(IUpdateAliasesRequest request)
		{
			return DoRequest<IUpdateAliasesRequest, UpdateAliasesResponse>(request, request.RequestParameters);
		}

		public Task<UpdateAliasesResponse> UpdateAliasesAsync(IUpdateAliasesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUpdateAliasesRequest, UpdateAliasesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public UpdateAliasesResponse UpdateAliases(Func<UpdateAliasesDescriptor, IUpdateAliasesRequest> selector = null)
		{
			return UpdateAliases(selector.InvokeOrDefault(new UpdateAliasesDescriptor()));
		}

		public Task<UpdateAliasesResponse> UpdateAliasesAsync(Func<UpdateAliasesDescriptor, IUpdateAliasesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return UpdateAliasesAsync(selector.InvokeOrDefault(new UpdateAliasesDescriptor()), cancellationToken);
		}

		public ValidateQueryResponse ValidateQuery(IValidateQueryRequest request)
		{
			return DoRequest<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters);
		}

		public Task<ValidateQueryResponse> ValidateQueryAsync(IValidateQueryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ValidateQueryResponse ValidateQuery(Func<ValidateQueryDescriptor, IValidateQueryRequest> selector = null)
		{
			return ValidateQuery(selector.InvokeOrDefault(new ValidateQueryDescriptor()));
		}

		public Task<ValidateQueryResponse> ValidateQueryAsync(Func<ValidateQueryDescriptor, IValidateQueryRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ValidateQueryAsync(selector.InvokeOrDefault(new ValidateQueryDescriptor()), cancellationToken);
		}
	}
}