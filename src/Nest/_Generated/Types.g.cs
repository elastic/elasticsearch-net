// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest
{
	public partial class Explanation
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail> Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExplanationDetail
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail>? Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PainlessExecutionPosition
	{
		[JsonPropertyName("end")]
		public int End
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start")]
		public int Start
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoDistanceSort
	{
		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unit")]
		public DistanceUnit? Unit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Hit<TDocument>
	{
		[JsonPropertyName("_explanation")]
		public Explanation? Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlight")]
		public Dictionary<string, IReadOnlyCollection<string>>? Highlight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_ignored")]
		public IReadOnlyCollection<string>? Ignored
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inner_hits")]
		public Dictionary<string, InnerHitsResult>? InnerHits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matched_queries")]
		public IReadOnlyCollection<string>? MatchedQueries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_routing")]
		public string? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public double? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public SequenceNumber? SeqNo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_shard")]
		public string? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public SortResults? Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_source")]
		public TDocument? Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public Name? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HitsMetadata<T>
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<T>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHitsMetadata
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<Dictionary<string, object>>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHitsResult
	{
		[JsonPropertyName("hits")]
		public InnerHitsMetadata Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NestedIdentity
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScoreSort
	{
		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptSort
	{
		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SortContainer
	{
		[JsonPropertyName("_doc")]
		public ScoreSort? Doc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_geo_distance")]
		public GeoDistanceSort? GeoDistance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public ScoreSort? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_script")]
		public ScriptSort? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TotalHits
	{
		[JsonPropertyName("relation")]
		public TotalHitsRelation Relation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public long Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ErrorCause
	{
		[JsonPropertyName("bytes_limit")]
		public long? BytesLimit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes_wanted")]
		public long? BytesWanted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("caused_by")]
		public ErrorCause? CausedBy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("col")]
		public int? Col
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("column")]
		public int? Column
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_shards")]
		public IReadOnlyCollection<ShardFailure>? FailedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grouped")]
		public bool? Grouped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("header")]
		public HttpHeaders? Header
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_uuid")]
		public Uuid? IndexUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("language")]
		public string? Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed_expired_feature")]
		public string? LicensedExpiredFeature
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("line")]
		public int? Line
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_buckets")]
		public int? MaxBuckets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase")]
		public string? Phase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public PainlessExecutionPosition? Position
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_type")]
		public string? ProcessorType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("property_name")]
		public string? PropertyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_id")]
		public Ids? ResourceId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_type")]
		public string? ResourceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("root_cause")]
		public IReadOnlyCollection<ErrorCause>? RootCause
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public string? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script_stack")]
		public IReadOnlyCollection<string>? ScriptStack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public Union<int, string>? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stack_trace")]
		public string? StackTrace
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexedScript : ScriptBase
	{
		[JsonPropertyName("id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineScript : ScriptBase
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LatLon
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptBase
	{
		[JsonPropertyName("lang")]
		public ScriptLanguage? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardFailure
	{
		[JsonPropertyName("index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public ErrorCause Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public string? Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardStatistics
	{
		[JsonPropertyName("failed")]
		public uint Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failures")]
		public IReadOnlyCollection<ShardFailure>? Failures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skipped")]
		public uint? Skipped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public uint Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public uint Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AggregateBase
	{
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BoxPlotAggregate : AggregateBase
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q1")]
		public double Q1
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q2")]
		public double Q2
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q3")]
		public double Q3
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompositeBucket
	{
	}

	public partial class DateHistogramBucket
	{
	}

	public partial class EwmaModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExtendedStatsAggregate : StatsAggregate
	{
		[JsonPropertyName("std_deviation")]
		public double? StdDeviation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_bounds")]
		public StandardDeviationBounds StdDeviationBounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_population")]
		public double? StdDeviationPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_sampling")]
		public double? StdDeviationSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_of_squares")]
		public double? SumOfSquares
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance")]
		public double? Variance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_population")]
		public double? VariancePopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_sampling")]
		public double? VarianceSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FiltersBucketItem
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoBounds
	{
		[JsonPropertyName("bottom_right")]
		public LatLon BottomRight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("top_left")]
		public LatLon TopLeft
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoBoundsAggregate : AggregateBase
	{
		[JsonPropertyName("bounds")]
		public GeoBounds Bounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoCentroidAggregate : AggregateBase
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("location")]
		public GeoLocation Location
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineAggregate : AggregateBase
	{
		[JsonPropertyName("geometry")]
		public LineStringGeoShape Geometry
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public GeoLineProperties Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineProperties
	{
		[JsonPropertyName("complete")]
		public bool Complete
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort_values")]
		public IReadOnlyCollection<double> SortValues
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentileItem
	{
		[JsonPropertyName("key")]
		public double Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("values")]
		public IReadOnlyCollection<HdrPercentileItem> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltLinearModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltWintersModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gamma")]
		public float? Gamma
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pad")]
		public bool? Pad
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("period")]
		public int? Period
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public HoltWintersType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IpRangeBucket
	{
	}

	public partial class KeyedBucket<TKey>
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key")]
		public TKey Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key_as_string")]
		public string KeyAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LineStringGeoShape
	{
		[JsonPropertyName("coordinates")]
		public IReadOnlyCollection<GeoCoordinate> Coordinates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentileItem
	{
		[JsonPropertyName("percentile")]
		public double Percentile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("items")]
		public IReadOnlyCollection<PercentileItem> Items
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RangeBucket
	{
	}

	public partial class RareTermsBucket<TKey>
	{
	}

	public partial class ScriptedMetricAggregate : AggregateBase
	{
		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SignificantTermsBucket<TKey>
	{
	}

	public partial class StandardDeviationBounds
	{
		[JsonPropertyName("lower")]
		public double? Lower
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_population")]
		public double? LowerPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_sampling")]
		public double? LowerSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper")]
		public double? Upper
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_population")]
		public double? UpperPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_sampling")]
		public double? UpperSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StatsAggregate : AggregateBase
	{
		[JsonPropertyName("avg")]
		public double? Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public double Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double? Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double? Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum")]
		public double Sum
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringStatsAggregate : AggregateBase
	{
		[JsonPropertyName("avg_length")]
		public double AvgLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("distribution")]
		public Dictionary<string, double>? Distribution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("entropy")]
		public double Entropy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_length")]
		public int MaxLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_length")]
		public int MinLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TDigestPercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("values")]
		public Dictionary<string, double> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopHitsAggregate : AggregateBase
	{
		[JsonPropertyName("hits")]
		public HitsMetadata<Dictionary<string, object>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetrics
	{
		[JsonPropertyName("metrics")]
		public Dictionary<string, OneOf<long, double, string>> Metrics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public IReadOnlyCollection<OneOf<long, double, string>> Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetricsAggregate : AggregateBase
	{
		[JsonPropertyName("top")]
		public IReadOnlyCollection<TopMetrics> Top
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ValueAggregate : AggregateBase
	{
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_as_string")]
		public string? ValueAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AsciiFoldingTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharGroupTokenizer : TokenizerBase
	{
		[JsonPropertyName("tokenize_on_chars")]
		public IReadOnlyCollection<string> TokenizeOnChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CommonGramsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("common_words")]
		public IReadOnlyCollection<string> CommonWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("common_words_path")]
		public string CommonWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_mode")]
		public bool QueryMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompoundWordTokenFilterBase : TokenFilterBase
	{
		[JsonPropertyName("hyphenation_patterns_path")]
		public string HyphenationPatternsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_subword_size")]
		public int MaxSubwordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_subword_size")]
		public int MinSubwordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_size")]
		public int MinWordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("only_longest_match")]
		public bool OnlyLongestMatch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("word_list")]
		public IReadOnlyCollection<string> WordList
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("word_list_path")]
		public string WordListPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConditionTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filter")]
		public IReadOnlyCollection<string> Filter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DelimitedPayloadTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("encoding")]
		public DelimitedPayloadEncoding Encoding
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EdgeNGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("side")]
		public EdgeNGramSide Side
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EdgeNGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_chars")]
		public IReadOnlyCollection<TokenChar> TokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ElisionTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("articles")]
		public IReadOnlyCollection<string> Articles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("articles_case")]
		public bool ArticlesCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FingerprintTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_output_size")]
		public int MaxOutputSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HtmlStripCharFilter : CharFilterBase
	{
	}

	public partial class HunspellTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("dedup")]
		public bool Dedup
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dictionary")]
		public string Dictionary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("longest_only")]
		public bool LongestOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HyphenationDecompounderTokenFilter : CompoundWordTokenFilterBase
	{
	}

	public partial class KStemTokenFilter : TokenFilterBase
	{
	}

	public partial class KeepTypesTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("mode")]
		public KeepTypesMode Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("types")]
		public IReadOnlyCollection<string> Types
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeepWordsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("keep_words")]
		public IReadOnlyCollection<string> KeepWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_words_case")]
		public bool KeepWordsCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_words_path")]
		public string KeepWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeywordMarkerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords")]
		public IReadOnlyCollection<string> Keywords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_path")]
		public string KeywordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_pattern")]
		public string KeywordsPattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeywordTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LengthTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max")]
		public int Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public int Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LetterTokenizer : TokenizerBase
	{
	}

	public partial class LimitTokenCountTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("consume_all_tokens")]
		public bool ConsumeAllTokens
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_token_count")]
		public int MaxTokenCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseTokenizer : TokenizerBase
	{
	}

	public partial class MappingCharFilter : CharFilterBase
	{
		[JsonPropertyName("mappings")]
		public IReadOnlyCollection<string> Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings_path")]
		public string MappingsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MultiplexerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filters")]
		public IReadOnlyCollection<string> Filters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_chars")]
		public IReadOnlyCollection<TokenChar> TokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NoriPartOfSpeechTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("stoptags")]
		public IReadOnlyCollection<string> Stoptags
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NoriTokenizer : TokenizerBase
	{
		[JsonPropertyName("decompound_mode")]
		public NoriDecompoundMode DecompoundMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discard_punctuation")]
		public bool DiscardPunctuation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_dictionary")]
		public string UserDictionary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_dictionary_rules")]
		public IReadOnlyCollection<string> UserDictionaryRules
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PathHierarchyTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reverse")]
		public bool Reverse
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip")]
		public int Skip
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PatternCaptureTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("patterns")]
		public IReadOnlyCollection<string> Patterns
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PatternReplaceTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("flags")]
		public string Flags
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PorterStemTokenFilter : TokenFilterBase
	{
	}

	public partial class PredicateTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RemoveDuplicatesTokenFilter : TokenFilterBase
	{
	}

	public partial class ReverseTokenFilter : TokenFilterBase
	{
	}

	public partial class ShingleTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filler_token")]
		public string FillerToken
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int MaxShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_shingle_size")]
		public int MinShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams")]
		public bool OutputUnigrams
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams_if_no_shingles")]
		public bool OutputUnigramsIfNoShingles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_separator")]
		public string TokenSeparator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SnowballTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public SnowballLanguage Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StandardTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StemmerOverrideTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("rules")]
		public IReadOnlyCollection<string> Rules
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rules_path")]
		public string RulesPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StemmerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StopTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool? IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remove_trailing")]
		public bool? RemoveTrailing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stopwords")]
		public StopWords Stopwords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stopwords_path")]
		public string? StopwordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SynonymGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms")]
		public IReadOnlyCollection<string> Synonyms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SynonymTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms")]
		public IReadOnlyCollection<string> Synonyms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TokenFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TokenizerBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TrimTokenFilter : TokenFilterBase
	{
	}

	public partial class TruncateTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("length")]
		public int Length
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UaxEmailUrlTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UniqueTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("only_on_same_position")]
		public bool OnlyOnSamePosition
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UppercaseTokenFilter : TokenFilterBase
	{
	}

	public partial class WhitespaceTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class WordDelimiterGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("adjust_offsets")]
		public bool AdjustOffsets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words")]
		public IReadOnlyCollection<string> ProtectedWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table")]
		public IReadOnlyCollection<string> TypeTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class WordDelimiterTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words")]
		public IReadOnlyCollection<string> ProtectedWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table")]
		public IReadOnlyCollection<string> TypeTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BinaryProperty : DocValuesPropertyBase
	{
	}

	public partial class BooleanProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public bool? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompletionProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<SuggestContext>? Contexts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PropertyBase { }

	public partial class CorePropertyBase : PropertyBase
	{
		[JsonPropertyName("copy_to")]
		public Fields? CopyTo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("similarity")]
		public string? Similarity
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public bool? Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateNanosProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateTimeOffset? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateTimeOffset? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DocValuesPropertyBase : CorePropertyBase
	{
		[JsonPropertyName("doc_values")]
		public bool? DocValues
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DoubleRangeProperty : RangePropertyBase
	{
	}

	public partial class FloatRangeProperty : RangePropertyBase
	{
	}

	public partial class GenericProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public StringFielddata Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoPointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public GeoLocation? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public GeoOrientation? Orientation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strategy")]
		public GeoStrategy? Strategy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IntegerRangeProperty : RangePropertyBase
	{
	}

	public partial class IpProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IpRangeProperty : RangePropertyBase
	{
	}

	public partial class KeywordProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("normalizer")]
		public string? Normalizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LongRangeProperty : RangePropertyBase
	{
	}

	public partial class Murmur3HashProperty : DocValuesPropertyBase
	{
	}

	public partial class NestedProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumberProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public NumberType Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ObjectProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RangePropertyBase : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RuntimeField
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public RuntimeFieldType Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SearchAsYouTypeProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public ShapeOrientation? Orientation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SuggestContext
	{
		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public Field? Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision")]
		public int? Precision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TextIndexPrefixes
	{
		[JsonPropertyName("max_chars")]
		public int MaxChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_chars")]
		public int MinChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TextProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public bool? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata_frequency_filter")]
		public FielddataFrequencyFilter? FielddataFrequencyFilter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_prefixes")]
		public TextIndexPrefixes? IndexPrefixes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TokenCountProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class VersionProperty : DocValuesPropertyBase
	{
	}

	public partial class WildcardProperty : DocValuesPropertyBase
	{
	}

	public partial class DateDecayFunction : DecayFunctionBase
	{
	}

	public partial class ScoreFunctionBase { }

	public partial class DecayFunctionBase : ScoreFunctionBase
	{
		[JsonPropertyName("multi_value_mode")]
		public MultiValueMode? MultiValueMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoDecayFunction : DecayFunctionBase
	{
	}

	public partial class LikeDocument
	{
		[JsonPropertyName("doc")]
		public object? Doc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Fields? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public Union<Id, int>? Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<Field, string>? PerFieldAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing")]
		public Routing? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public Name? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumericDecayFunction : DecayFunctionBase
	{
	}

	public partial class ThreeDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("z")]
		public double? z
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TwoDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FielddataFrequencyFilter
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_segment_size")]
		public int MinSegmentSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumericFielddata
	{
		[JsonPropertyName("format")]
		public NumericFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringFielddata
	{
		[JsonPropertyName("format")]
		public StringFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeAnalysisAnalyzedFieldsIncludeExclude
	{
		[JsonPropertyName("excludes")]
		public IReadOnlyCollection<string> Excludes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("includes")]
		public IReadOnlyCollection<string> Includes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public InlineRoleTemplateSource Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineRoleTemplateSource
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InvalidRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public string Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StoredRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public StoredRoleTemplateId Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StoredRoleTemplateId
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AcknowledgeState
	{
		[JsonPropertyName("state")]
		public AcknowledgementOptions State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ActionStatus
	{
		[JsonPropertyName("ack")]
		public AcknowledgeState Ack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_execution")]
		public ExecutionState? LastExecution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_successful_execution")]
		public ExecutionState? LastSuccessfulExecution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_throttle")]
		public ThrottleState? LastThrottle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExecutionState
	{
		[JsonPropertyName("successful")]
		public bool Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ThrottleState
	{
		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BaseUrlConfig
	{
		[JsonPropertyName("url_name")]
		public string UrlName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("url_value")]
		public string UrlValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KibanaUrlConfig : BaseUrlConfig
	{
		[JsonPropertyName("time_range")]
		public string? TimeRange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}
