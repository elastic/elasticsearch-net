// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest
{
	public class AcknowledgeState
	{
		[JsonPropertyName("state")]
		public AcknowledgementState State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Action
	{
		[JsonPropertyName("action_type")]
		public ActionType? ActionType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("foreach")]
		public string? Foreach
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_iterations")]
		public int? MaxIterations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string? Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ActionIndex
	{
	}

	public class ActionStatus
	{
	}

	public class ActivationState
	{
		[JsonPropertyName("active")]
		public bool Active { get; set; }
	}

	public class ActivationStatus
	{
	}

	public class AdaptiveSelectionStats
	{
		[JsonPropertyName("avg_queue_size")]
		public long AvgQueueSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("avg_response_time")]
		public long AvgResponseTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("avg_response_time_ns")]
		public long AvgResponseTimeNs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("avg_service_time")]
		public string AvgServiceTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("avg_service_time_ns")]
		public long AvgServiceTimeNs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("outgoing_searches")]
		public long OutgoingSearches
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rank")]
		public string Rank
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AggregateBase
	{
	}

	public class AggregationBreakdown
	{
		[JsonPropertyName("build_aggregation")]
		public long BuildAggregation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_aggregation_count")]
		public long BuildAggregationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_leaf_collector")]
		public long BuildLeafCollector
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_leaf_collector_count")]
		public long BuildLeafCollectorCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collect")]
		public long Collect
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collect_count")]
		public long CollectCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initialize")]
		public long Initialize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initialize_count")]
		public long InitializeCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_collection")]
		public long? PostCollection
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_collection_count")]
		public long? PostCollectionCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reduce")]
		public long Reduce
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reduce_count")]
		public long ReduceCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AggregationContainer
	{
	}

	public class AggregationProfile
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AggregationProfileDebug
	{
	}

	public class AggregationRange
	{
		[JsonPropertyName("key")]
		public string? Key
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Alias
	{
		[JsonPropertyName("is_hidden")]
		public bool? IsHidden
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AliasAction
	{
	}

	public class AliasDefinition
	{
		[JsonPropertyName("index_routing")]
		public string? IndexRouting
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing")]
		public string? Routing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_routing")]
		public string? SearchRouting
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AllField
	{
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	public class AllocationDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public AllocationExplainDecision Decision
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AllocationStore
	{
		[JsonPropertyName("allocation_id")]
		public string AllocationId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("in_sync")]
		public bool InSync
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_size_in_bytes")]
		public long MatchingSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_sync_id")]
		public bool MatchingSyncId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store_exception")]
		public string StoreException
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AlwaysCondition
	{
	}

	public class AnalysisConfig
	{
		[JsonPropertyName("bucket_span")]
		public TimeSpan BucketSpan { get; set; }

		[JsonPropertyName("multivariate_by_fields")]
		public bool? MultivariateByFields { get; set; }
	}

	public class AnalysisLimits
	{
		[JsonPropertyName("categorization_examples_limit")]
		public long? CategorizationExamplesLimit { get; set; }

		[JsonPropertyName("model_memory_limit")]
		public string ModelMemoryLimit { get; set; }
	}

	public class AnalysisMemoryLimit
	{
		[JsonPropertyName("model_memory_limit")]
		public string ModelMemoryLimit { get; set; }
	}

	public class AnalyticsStatsUsage
	{
		[JsonPropertyName("boxplot_usage")]
		public long BoxplotUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cumulative_cardinality_usage")]
		public long CumulativeCardinalityUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("string_stats_usage")]
		public long StringStatsUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("top_metrics_usage")]
		public long TopMetricsUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("t_test_usage")]
		public long TTestUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("moving_percentiles_usage")]
		public long MovingPercentilesUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("normalize_usage")]
		public long NormalizeUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rate_usage")]
		public long RateUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("multi_terms_usage")]
		public long? MultiTermsUsage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AnalyticsUsage : XPackUsage
	{
	}

	public class AnalyzeDetail
	{
		[JsonPropertyName("custom_analyzer")]
		public bool CustomAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AnalyzeToken
	{
		[JsonPropertyName("end_offset")]
		public long EndOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public long Position
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_length")]
		public long? PositionLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_offset")]
		public long StartOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token")]
		public string Token
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AnalyzerDetail
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AnomalyCause
	{
		[JsonPropertyName("by_field_name")]
		public string ByFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("by_field_value")]
		public string ByFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("correlated_by_field_value")]
		public string CorrelatedByFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field_name")]
		public string FieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("function")]
		public string Function
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("function_description")]
		public string FunctionDescription
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("over_field_name")]
		public string OverFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("over_field_value")]
		public string OverFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partition_field_name")]
		public string PartitionFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partition_field_value")]
		public string PartitionFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("probability")]
		public double Probability
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AnomalyDetectors
	{
		[JsonPropertyName("categorization_examples_limit")]
		public int CategorizationExamplesLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_memory_limit")]
		public string ModelMemoryLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_snapshot_retention_days")]
		public int ModelSnapshotRetentionDays
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ApiKey
	{
	}

	public class ApiKeyApplication
	{
		[JsonPropertyName("application")]
		public string Application
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ApiKeyPrivileges
	{
	}

	public class ApiKeyRole
	{
	}

	public class ApiKeys
	{
		[JsonPropertyName("creation")]
		public long Creation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("expiration")]
		public long? Expiration
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("invalidated")]
		public bool Invalidated
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("realm")]
		public string Realm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("username")]
		public string Username
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AppendProcessor : ProcessorBase
	{
		[JsonPropertyName("allow_duplicates")]
		public bool? AllowDuplicates
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ApplicationGlobalUserPrivileges
	{
	}

	public class ApplicationPrivileges
	{
		[JsonPropertyName("application")]
		public string Application
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ApplicationPrivilegesCheck
	{
		[JsonPropertyName("application")]
		public string Application
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ApplicationResourcePrivileges
	{
		[JsonPropertyName("application")]
		public string Application
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ArrayCompareCondition
	{
		[JsonPropertyName("array_path")]
		public string ArrayPath { get; set; }

		[JsonPropertyName("comparison")]
		public string Comparison { get; set; }

		[JsonPropertyName("path")]
		public string Path { get; set; }

		[JsonPropertyName("quantifier")]
		public Quantifier Quantifier { get; set; }
	}

	public class AsciiFoldingTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AsyncSearch<TDocument>
	{
		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_reduce_phases")]
		public long? NumReducePhases
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terminated_early")]
		public bool? TerminatedEarly
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timed_out")]
		public bool TimedOut
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("took")]
		public long Took
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AttachmentProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indexed_chars")]
		public long? IndexedChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_name")]
		public string? ResourceName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AuditUsage : SecurityFeatureToggle
	{
	}

	public class AuthenticatedUser : XPackUser
	{
		[JsonPropertyName("authentication_type")]
		public string AuthenticationType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AuthenticationProvider
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AutoFollowPattern
	{
		[JsonPropertyName("follow_index_pattern")]
		public string FollowIndexPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_outstanding_read_requests")]
		public long MaxOutstandingReadRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_outstanding_write_requests")]
		public int MaxOutstandingWriteRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_read_request_operation_count")]
		public int MaxReadRequestOperationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_read_request_size")]
		public string MaxReadRequestSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_buffer_count")]
		public int MaxWriteBufferCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_buffer_size")]
		public string MaxWriteBufferSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_request_operation_count")]
		public int MaxWriteRequestOperationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_request_size")]
		public string MaxWriteRequestSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_cluster")]
		public string RemoteCluster
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AutoFollowedCluster
	{
		[JsonPropertyName("time_since_last_check_millis")]
		public DateTimeOffset TimeSinceLastCheckMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BaseUrlConfig
	{
		[JsonPropertyName("url_name")]
		public string UrlName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("url_value")]
		public string UrlValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BinaryProperty : DocValuesPropertyBase
	{
	}

	public class BoolQuery : QueryBase
	{
	}

	public class BooleanProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public bool? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BoostingQuery : QueryBase
	{
		[JsonPropertyName("negative_boost")]
		public double? NegativeBoost { get; set; }
	}

	public class BoundingBox
	{
		[JsonPropertyName("wkt")]
		public string? Wkt
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BreakerStats
	{
		[JsonPropertyName("estimated_size")]
		public string EstimatedSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("estimated_size_in_bytes")]
		public long EstimatedSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("limit_size")]
		public string LimitSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("limit_size_in_bytes")]
		public long LimitSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BucketInfluencer
	{
		[JsonPropertyName("bucket_span")]
		public long BucketSpan
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("influencer_field_name")]
		public string InfluencerFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("influencer_field_value")]
		public string InfluencerFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("influencer_score")]
		public double InfluencerScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initial_influencer_score")]
		public double InitialInfluencerScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_interim")]
		public bool IsInterim
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("probability")]
		public double Probability
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("result_type")]
		public string ResultType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BucketsPath
	{
	}

	public class BulkCreateOperation : BulkOperation
	{
	}

	public class BulkCreateResponseItem : BulkResponseItemBase
	{
	}

	public class BulkDeleteOperation : BulkOperation
	{
	}

	public class BulkDeleteResponseItem : BulkResponseItemBase
	{
	}

	public class BulkIndexByScrollFailure
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public int Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BulkIndexOperation : BulkOperation
	{
	}

	public class BulkIndexResponseItem : BulkResponseItemBase
	{
	}

	public class BulkOperation
	{
		[JsonPropertyName("retry_on_conflict")]
		public int RetryOnConflict
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_type")]
		public VersionType VersionType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BulkOperationContainer
	{
	}

	public class BulkResponseItemBase
	{
		[JsonPropertyName("_index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public int Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("result")]
		public string? Result
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public long? SeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public string? Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("forced_refresh")]
		public bool? ForcedRefresh
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class BulkResponseItemContainer
	{
	}

	public class BulkUpdateOperation : BulkOperation
	{
	}

	public class BulkUpdateResponseItem : BulkResponseItemBase
	{
	}

	public class BytesProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CPUStats
	{
		[JsonPropertyName("percent")]
		public int Percent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sys")]
		public string Sys
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sys_in_millis")]
		public long SysInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public string Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_millis")]
		public long TotalInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user")]
		public string User
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_in_millis")]
		public long UserInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Calendar
	{
		[JsonPropertyName("calendar_id")]
		public string CalendarId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CatRequestBase : RequestBase
	{
	}

	public class CategorizationAnalyzer
	{
	}

	public class CategoryDefinition
	{
		[JsonPropertyName("category_id")]
		public long CategoryId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_matching_length")]
		public long MaxMatchingLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex")]
		public string Regex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms")]
		public string Terms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CcrAutoFollowStats
	{
		[JsonPropertyName("number_of_failed_follow_indices")]
		public long NumberOfFailedFollowIndices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_failed_remote_cluster_state_requests")]
		public long NumberOfFailedRemoteClusterStateRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_successful_follow_indices")]
		public long NumberOfSuccessfulFollowIndices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CcrFollowStats
	{
	}

	public class CcrUsage : XPackUsage
	{
		[JsonPropertyName("auto_follow_patterns_count")]
		public int AutoFollowPatternsCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("follower_indices_count")]
		public int FollowerIndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ChainInput
	{
	}

	public class ChainTransform
	{
	}

	public class CharFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CharFilterDetail
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CharFilterTypes
	{
	}

	public class CharGroupTokenizer : TokenizerBase
	{
	}

	public class ChiSquareHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_negatives")]
		public bool IncludeNegatives
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ChunkingConfig
	{
		[JsonPropertyName("mode")]
		public ChunkingMode Mode { get; set; }
	}

	public class CircleProcessor : ProcessorBase
	{
		[JsonPropertyName("error_distance")]
		public double ErrorDistance
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_type")]
		public ShapeType ShapeType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClassificationInferenceOptions
	{
		[JsonPropertyName("num_top_classes")]
		public int? NumTopClasses
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prediction_field_type")]
		public string? PredictionFieldType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CleanupRepositoryResults
	{
		[JsonPropertyName("deleted_blobs")]
		public long DeletedBlobs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted_bytes")]
		public long DeletedBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClearApiKeyCacheNode
	{
	}

	public class CloseIndexResult
	{
		[JsonPropertyName("closed")]
		public bool Closed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CloseShardResult
	{
	}

	public class ClusterCertificateInformation
	{
		[JsonPropertyName("alias")]
		public string? Alias
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("expiry")]
		public DateTimeOffset Expiry
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("has_private_key")]
		public bool HasPrivateKey
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("serial_number")]
		public string SerialNumber
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("subject_dn")]
		public string SubjectDn
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterFileSystem
	{
		[JsonPropertyName("available_in_bytes")]
		public long AvailableInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterIndicesShardsIndexStats
	{
	}

	public class ClusterIndicesShardsStats
	{
		[JsonPropertyName("primaries")]
		public double? Primaries
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replication")]
		public double? Replication
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public double? Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterIndicesStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterInfo
	{
	}

	public class ClusterIngestStats
	{
		[JsonPropertyName("number_of_pipelines")]
		public int NumberOfPipelines
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterJvm
	{
		[JsonPropertyName("max_uptime_in_millis")]
		public long MaxUptimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("threads")]
		public long Threads
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterJvmMemory
	{
		[JsonPropertyName("heap_max_in_bytes")]
		public long HeapMaxInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_used_in_bytes")]
		public long HeapUsedInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterJvmVersion
	{
		[JsonPropertyName("bundled_jdk")]
		public bool BundledJdk
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("using_bundled_jdk")]
		public bool UsingBundledJdk
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_name")]
		public string VmName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_vendor")]
		public string VmVendor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterNetworkTypes
	{
	}

	public class ClusterNodeCount
	{
		[JsonPropertyName("coordinating_only")]
		public int CoordinatingOnly
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data")]
		public int Data
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public int Ingest
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("master")]
		public int Master
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("voting_only")]
		public int VotingOnly
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_cold")]
		public int DataCold
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_frozen")]
		public int? DataFrozen
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_content")]
		public int DataContent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_warm")]
		public int DataWarm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_hot")]
		public int DataHot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ml")]
		public int Ml
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_cluster_client")]
		public int RemoteClusterClient
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transform")]
		public int Transform
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterNodesStats
	{
	}

	public class ClusterOperatingSystemArchitecture
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("arch")]
		public string Arch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterOperatingSystemName
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterOperatingSystemPrettyName
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretty_name")]
		public string PrettyName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterOperatingSystemStats
	{
		[JsonPropertyName("allocated_processors")]
		public int AllocatedProcessors
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_processors")]
		public int AvailableProcessors
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterProcess
	{
	}

	public class ClusterProcessCpu
	{
		[JsonPropertyName("percent")]
		public int Percent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterProcessOpenFileDescriptors
	{
		[JsonPropertyName("avg")]
		public long Avg
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public long Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public long Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterProcessorStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterRerouteCommand
	{
	}

	public class ClusterRerouteCommandAction
	{
		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterRerouteDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public string Decision
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterRerouteExplanation
	{
		[JsonPropertyName("command")]
		public string Command
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterRerouteParameters
	{
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("from_node")]
		public string FromNode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("to_node")]
		public string ToNode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterShardMetrics
	{
		[JsonPropertyName("avg")]
		public double Avg
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterStateBlockIndex
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retryable")]
		public bool Retryable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string? State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterStateBlocks
	{
	}

	public class ClusterStateMetadata
	{
		[JsonPropertyName("cluster_uuid_committed")]
		public bool ClusterUuidCommitted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterStateMetadataClusterCoordination
	{
		[JsonPropertyName("term")]
		public int Term
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ClusterStateMetadataIndexGraveyard
	{
	}

	public class ClusterStateMetadataTemplate
	{
	}

	public class ClusterStatistics
	{
		[JsonPropertyName("skipped")]
		public int Skipped
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public int Successful
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Collector
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CommonGramsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("common_words_path")]
		public string CommonWordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_mode")]
		public bool QueryMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CommonTermsQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("high_freq_operator")]
		public Operator? HighFreqOperator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("low_freq_operator")]
		public Operator? LowFreqOperator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public string? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompactNodeInfo
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompareCondition
	{
		[JsonPropertyName("comparison")]
		public string Comparison { get; set; }

		[JsonPropertyName("path")]
		public string Path { get; set; }
	}

	public class CompletionProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompletionStats
	{
		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompletionSuggestOption<TDocument>
	{
		[JsonPropertyName("collate_match")]
		public bool? CollateMatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public double Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompletionSuggester : SuggesterBase
	{
		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex")]
		public string? Regex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip_duplicates")]
		public bool? SkipDuplicates
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CompositeAggregationSource
	{
	}

	public class CompositeBucket
	{
	}

	public class CompoundWordTokenFilterBase : TokenFilterBase
	{
		[JsonPropertyName("hyphenation_patterns_path")]
		public string HyphenationPatternsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_subword_size")]
		public int MaxSubwordSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_subword_size")]
		public int MinSubwordSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_size")]
		public int MinWordSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("only_longest_match")]
		public bool OnlyLongestMatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("word_list_path")]
		public string WordListPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ConditionContainer
	{
	}

	public class ConditionTokenFilter : TokenFilterBase
	{
	}

	public class ConstantKeywordProperty : PropertyBase
	{
	}

	public class ConstantScoreQuery : QueryBase
	{
	}

	public class ConvertProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public ConvertProcessorType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CoordinatorStats
	{
		[JsonPropertyName("executed_searches_total")]
		public long ExecutedSearchesTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_id")]
		public string NodeId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("queue_size")]
		public int QueueSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_requests_current")]
		public int RemoteRequestsCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_requests_total")]
		public long RemoteRequestsTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CorePropertyBase : PropertyBase
	{
		[JsonPropertyName("similarity")]
		public string? Similarity
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public bool? Store
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CronExpression : ScheduleBase
	{
	}

	public class CsvProcessor : ProcessorBase
	{
		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("quote")]
		public string? Quote
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string? Separator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim")]
		public bool Trim
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CurrentNode
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CustomSettings
	{
		[JsonPropertyName("created_by")]
		public string? CreatedBy
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DailySchedule
	{
	}

	public class DataCounts
	{
		[JsonPropertyName("bucket_count")]
		public long BucketCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("earliest_record_timestamp")]
		public long EarliestRecordTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("empty_bucket_count")]
		public long EmptyBucketCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("input_bytes")]
		public long InputBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("input_field_count")]
		public long InputFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("input_record_count")]
		public long InputRecordCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("invalid_date_count")]
		public long InvalidDateCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_data_time")]
		public long LastDataTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest_empty_bucket_timestamp")]
		public long LatestEmptyBucketTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest_record_timestamp")]
		public long LatestRecordTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest_sparse_bucket_timestamp")]
		public long LatestSparseBucketTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_field_count")]
		public long MissingFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("out_of_order_timestamp_count")]
		public long OutOfOrderTimestampCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processed_field_count")]
		public long ProcessedFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processed_record_count")]
		public long ProcessedRecordCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sparse_bucket_count")]
		public long SparseBucketCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DataDescription
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("time_format")]
		public string? TimeFormat { get; set; }
	}

	public class DataPathStats
	{
		[JsonPropertyName("available")]
		public string Available
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_in_bytes")]
		public long AvailableInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_queue")]
		public string DiskQueue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_reads")]
		public long DiskReads
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_read_size")]
		public string DiskReadSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_read_size_in_bytes")]
		public long DiskReadSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_writes")]
		public long DiskWrites
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_write_size")]
		public string DiskWriteSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("disk_write_size_in_bytes")]
		public long DiskWriteSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free")]
		public string Free
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mount")]
		public string Mount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public string Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DataStreamsUsage : XPackUsage
	{
		[JsonPropertyName("data_streams")]
		public long DataStreams
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indices_count")]
		public long IndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DataTierPhaseCountUsage
	{
		[JsonPropertyName("node_count")]
		public long NodeCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public long IndexCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_shard_count")]
		public long TotalShardCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_count")]
		public long PrimaryShardCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_size_bytes")]
		public long TotalSizeBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_size_bytes")]
		public long PrimarySizeBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_size_avg_bytes")]
		public long PrimaryShardSizeAvgBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_size_median_bytes")]
		public long PrimaryShardSizeMedianBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_size_mad_bytes")]
		public long PrimaryShardSizeMadBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DataTiersUsage : XPackUsage
	{
	}

	public class Datafeed
	{
		[JsonPropertyName("datafeed_id")]
		public string DatafeedId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_empty_searches")]
		public int? MaxEmptySearches
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_size")]
		public int? ScrollSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DatafeedCount
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DatafeedStats
	{
		[JsonPropertyName("assignment_explanation")]
		public string AssignmentExplanation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("datafeed_id")]
		public string DatafeedId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public DatafeedState State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DatafeedTimingStats
	{
		[JsonPropertyName("bucket_count")]
		public long BucketCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_average_search_time_per_hour_ms")]
		public double ExponentialAverageSearchTimePerHourMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_count")]
		public long SearchCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_search_time_ms")]
		public double TotalSearchTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Datafeeds
	{
		[JsonPropertyName("scroll_size")]
		public int ScrollSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateDecayFunction : DecayFunctionBase
	{
	}

	public class DateField
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_unmapped")]
		public bool? IncludeUnmapped
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateHistogramBucket
	{
	}

	public class DateHistogramRollupGrouping
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }
	}

	public class DateIndexNameProcessor : ProcessorBase
	{
		[JsonPropertyName("date_rounding")]
		public DateRounding DateRounding
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_format")]
		public string IndexNameFormat
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_prefix")]
		public string IndexNamePrefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string Timezone
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateNanosProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateTimeOffset? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateProcessor : ProcessorBase
	{
		[JsonPropertyName("locale")]
		public string? Locale
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string Timezone
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateTimeOffset? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateRangeExpression
	{
		[JsonPropertyName("from_as_string")]
		public string? FromAsString
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("to_as_string")]
		public string? ToAsString
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key")]
		public string? Key
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_count")]
		public long? DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DateRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DecayFunctionBase : ScoreFunctionBase
	{
		[JsonPropertyName("multi_value_mode")]
		public MultiValueMode? MultiValueMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DecayPlacement<TOrigin, TScale>
	{
		[JsonPropertyName("decay")]
		public double? Decay
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Defaults
	{
	}

	public class DelayedDataCheckConfig
	{
		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DelimitedPayloadTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("encoding")]
		public DelimitedPayloadEncoding Encoding
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DeprecationInfo
	{
		[JsonPropertyName("details")]
		public string Details
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("level")]
		public DeprecationWarningLevel Level
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("message")]
		public string Message
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("url")]
		public string Url
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DetectionRule
	{
	}

	public class Detector
	{
		[JsonPropertyName("detector_description")]
		public string? DetectorDescription
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("detector_index")]
		public int? DetectorIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exclude_frequent")]
		public ExcludeFrequent? ExcludeFrequent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("function")]
		public string Function
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("use_null")]
		public bool? UseNull
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DirectGenerator
	{
		[JsonPropertyName("max_edits")]
		public int? MaxEdits
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_filter")]
		public string? PostFilter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pre_filter")]
		public string? PreFilter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_mode")]
		public SuggestMode? SuggestMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DisMaxQuery : QueryBase
	{
		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }
	}

	public class DiscoveryNode
	{
		[JsonPropertyName("ephemeral_id")]
		public string EphemeralId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DiskUsage
	{
		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_bytes")]
		public long TotalBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_bytes")]
		public long UsedBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_bytes")]
		public long FreeBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_disk_percent")]
		public double FreeDiskPercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_disk_percent")]
		public double UsedDiskPercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DissectProcessor : ProcessorBase
	{
		[JsonPropertyName("append_separator")]
		public string AppendSeparator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DistanceFeatureQuery : QueryBase
	{
	}

	public class DocStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DocValueField
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DocValuesPropertyBase : CorePropertyBase
	{
		[JsonPropertyName("doc_values")]
		public bool? DocValues
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DocumentSimulation
	{
		[JsonPropertyName("_parent")]
		public string? Parent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_routing")]
		public string? Routing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DotExpanderProcessor : ProcessorBase
	{
		[JsonPropertyName("path")]
		public string? Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class DoubleRangeProperty : RangePropertyBase
	{
	}

	public class DropProcessor : ProcessorBase
	{
	}

	public class DynamicTemplate
	{
		[JsonPropertyName("match")]
		public string? Match
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match_pattern")]
		public MatchType? MatchPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path_match")]
		public string? PathMatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unmatch")]
		public string? Unmatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EdgeNGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("side")]
		public EdgeNGramSide Side
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EdgeNGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ElasticsearchVersionInfo
	{
		[JsonPropertyName("build_date")]
		public DateTimeOffset BuildDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_flavor")]
		public string BuildFlavor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_hash")]
		public string BuildHash
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_snapshot")]
		public bool BuildSnapshot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_type")]
		public string BuildType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number")]
		public string Number
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ElisionTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("articles_case")]
		public bool ArticlesCase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EmailActionResult
	{
		[JsonPropertyName("account")]
		public string? Account
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string? Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EmailBody
	{
		[JsonPropertyName("html")]
		public string Html
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EmailResult
	{
		[JsonPropertyName("from")]
		public string? From
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("priority")]
		public EmailPriority? Priority
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sent_date")]
		public DateTimeOffset SentDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("subject")]
		public string Subject
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EmptyObject
	{
	}

	public class EnrichPolicy
	{
		[JsonPropertyName("query")]
		public string? Query { get; set; }
	}

	public class EnrichProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_matches")]
		public int? MaxMatches
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy_name")]
		public string PolicyName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_relation")]
		public GeoShapeRelation? ShapeRelation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EqlFeaturesJoinUsage
	{
	}

	public class EqlFeaturesKeysUsage
	{
	}

	public class EqlFeaturesPipesUsage
	{
	}

	public class EqlFeaturesSequencesUsage
	{
	}

	public class EqlFeaturesUsage
	{
	}

	public class EqlHits<TEvent>
	{
	}

	public class EqlHitsEvent<TEvent>
	{
	}

	public class EqlHitsSequence<TEvent>
	{
	}

	public class EqlSearchFieldFormatted
	{
		[JsonPropertyName("format")]
		public string Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EqlUsage : XPackUsage
	{
	}

	public class ErrorCause
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stack_trace")]
		public string? StackTrace
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes_limit")]
		public long? BytesLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes_wanted")]
		public long? BytesWanted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("column")]
		public int? Column
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("col")]
		public int? Col
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grouped")]
		public bool? Grouped
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("language")]
		public string? Language
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed_expired_feature")]
		public string? LicensedExpiredFeature
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("line")]
		public int? Line
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_buckets")]
		public int? MaxBuckets
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase")]
		public string? Phase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("property_name")]
		public string? PropertyName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_type")]
		public string? ProcessorType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_type")]
		public string? ResourceType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public string? Script
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class EwmaModelSettings
	{
	}

	public class ExecuteEnrichPolicyStatus
	{
		[JsonPropertyName("phase")]
		public EnrichPolicyPhase Phase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutingPolicy
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionResult
	{
		[JsonPropertyName("execution_duration")]
		public int ExecutionDuration
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("execution_time")]
		public DateTimeOffset ExecutionTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionResultAction
	{
		[JsonPropertyName("reason")]
		public string? Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Status Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public ActionType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionResultCondition
	{
		[JsonPropertyName("met")]
		public bool Met
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Status Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public ConditionType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionResultInput
	{
		[JsonPropertyName("status")]
		public Status Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public InputType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionState
	{
		[JsonPropertyName("successful")]
		public bool Successful
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExecutionThreadPool
	{
		[JsonPropertyName("max_size")]
		public long MaxSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("queue_size")]
		public long QueueSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExistsQuery : QueryBase
	{
	}

	public class ExplainAnalyzeToken
	{
		[JsonPropertyName("bytes")]
		public string Bytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("end_offset")]
		public long EndOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keyword")]
		public bool? Keyword
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public long Position
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("positionLength")]
		public long Positionlength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_offset")]
		public long StartOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("termFrequency")]
		public long Termfrequency
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token")]
		public string Token
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Explanation
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExplanationDetail
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ExtendedBounds<T>
	{
	}

	public class ExtendedMemoryStats : MemoryStats
	{
		[JsonPropertyName("free_percent")]
		public int FreePercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_percent")]
		public int UsedPercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FailProcessor : ProcessorBase
	{
		[JsonPropertyName("message")]
		public string Message
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldAliasProperty : PropertyBase
	{
	}

	public class FieldCapabilities
	{
		[JsonPropertyName("aggregatable")]
		public bool Aggregatable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("searchable")]
		public bool Searchable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldCapabilitiesBodyIndexFilter
	{
	}

	public class FieldCapabilitiesBodyIndexFilterRange
	{
	}

	public class FieldCapabilitiesBodyIndexFilterRangeTimestamp
	{
		[JsonPropertyName("gte")]
		public int? Gte { get; set; }

		[JsonPropertyName("gt")]
		public int? Gt { get; set; }

		[JsonPropertyName("lte")]
		public int? Lte { get; set; }

		[JsonPropertyName("lt")]
		public int? Lt { get; set; }
	}

	public class FieldCapabilitiesBodyIndexFilterTerm
	{
	}

	public class FieldCapabilitiesBodyIndexFilterTermVersionControl
	{
		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public class FieldCollapse
	{
		[JsonPropertyName("max_concurrent_group_searches")]
		public int? MaxConcurrentGroupSearches { get; set; }
	}

	public class FieldLookup
	{
	}

	public class FieldMapping
	{
	}

	public class FieldNamesField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class FieldSecurity
	{
	}

	public class FieldSecuritySettings
	{
	}

	public class FieldSort
	{
		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unmapped_type")]
		public FieldType? UnmappedType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldStat
	{
		[JsonPropertyName("earliest")]
		public string? Earliest
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest")]
		public string? Latest
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldStatistics
	{
		[JsonPropertyName("doc_count")]
		public int DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_doc_freq")]
		public long SumDocFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_ttf")]
		public long SumTtf
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldTypesMappings
	{
	}

	public class FieldTypesStats
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FieldValueFactorScoreFunction : ScoreFunctionBase
	{
		[JsonPropertyName("factor")]
		public double? Factor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing")]
		public double? Missing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modifier")]
		public FieldValueFactorModifier? Modifier
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FielddataFrequencyFilter
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_segment_size")]
		public int MinSegmentSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FielddataStats
	{
		[JsonPropertyName("evictions")]
		public long? Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FileCountSnapshotStats
	{
		[JsonPropertyName("file_count")]
		public int FileCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FileSystemStats
	{
		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Filter
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("filter_id")]
		public string FilterId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FilterRef
	{
		[JsonPropertyName("filter_type")]
		public RuleFilterType FilterType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FiltersBucketItem
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FingerprintTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_output_size")]
		public int MaxOutputSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FlattenedProperty : PropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("depth_limit")]
		public int? DepthLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values")]
		public bool? DocValues
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("similarity")]
		public string? Similarity
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FlattenedUsage : XPackUsage
	{
		[JsonPropertyName("field_count")]
		public int FieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FloatRangeProperty : RangePropertyBase
	{
	}

	public class FlushStats
	{
		[JsonPropertyName("periodic")]
		public long Periodic
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public string? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FollowConfig
	{
		[JsonPropertyName("max_outstanding_read_requests")]
		public int MaxOutstandingReadRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_outstanding_write_requests")]
		public int MaxOutstandingWriteRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_read_request_operation_count")]
		public int MaxReadRequestOperationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_read_request_size")]
		public string MaxReadRequestSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_buffer_count")]
		public int MaxWriteBufferCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_buffer_size")]
		public string MaxWriteBufferSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_request_operation_count")]
		public int MaxWriteRequestOperationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_write_request_size")]
		public string MaxWriteRequestSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FollowIndexReadException
	{
		[JsonPropertyName("from_seq_no")]
		public long FromSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retries")]
		public int Retries
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FollowIndexShardStats
	{
		[JsonPropertyName("bytes_read")]
		public long BytesRead
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_read_requests")]
		public long FailedReadRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_write_requests")]
		public long FailedWriteRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("follower_global_checkpoint")]
		public long FollowerGlobalCheckpoint
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("follower_index")]
		public string FollowerIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("follower_max_seq_no")]
		public long FollowerMaxSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_requested_seq_no")]
		public long LastRequestedSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("leader_global_checkpoint")]
		public long LeaderGlobalCheckpoint
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("leader_index")]
		public string LeaderIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("leader_max_seq_no")]
		public long LeaderMaxSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operations_read")]
		public long OperationsRead
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operations_written")]
		public long OperationsWritten
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("outstanding_read_requests")]
		public int OutstandingReadRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("outstanding_write_requests")]
		public int OutstandingWriteRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_cluster")]
		public string RemoteCluster
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_id")]
		public int ShardId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful_read_requests")]
		public long SuccessfulReadRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful_write_requests")]
		public long SuccessfulWriteRequests
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("write_buffer_operation_count")]
		public long WriteBufferOperationCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FollowIndexStats
	{
	}

	public class FollowerInfo
	{
		[JsonPropertyName("status")]
		public FollowerIndexStatus Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ForeachProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FormatMetricAggregationBase : MetricAggregationBase
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FoundUserPrivilege
	{
		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FrozenIndicesUsage : XPackUsage
	{
		[JsonPropertyName("indices_count")]
		public long IndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FunctionScoreContainer
	{
		[JsonPropertyName("weight")]
		public double? Weight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class FunctionScoreQuery : QueryBase
	{
		[JsonPropertyName("boost_mode")]
		public FunctionBoostMode? BoostMode { get; set; }

		[JsonPropertyName("max_boost")]
		public double? MaxBoost { get; set; }

		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonPropertyName("score_mode")]
		public FunctionScoreMode? ScoreMode { get; set; }
	}

	public class FuzzyQuery : QueryBase
	{
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transpositions")]
		public bool? Transpositions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GarbageCollectionGenerationStats
	{
		[JsonPropertyName("collection_count")]
		public long CollectionCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collection_time")]
		public string CollectionTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collection_time_in_millis")]
		public long CollectionTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GarbageCollectionStats
	{
	}

	public class GenericProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions IndexOptions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool Norms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption TermVector
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoBoundingBoxQuery : QueryBase
	{
		[JsonPropertyName("type")]
		public GeoExecution? Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoBounds
	{
	}

	public class GeoDecayFunction : DecayFunctionBase
	{
	}

	public class GeoDistanceQuery : QueryBase
	{
		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoDistanceSort
	{
		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unit")]
		public DistanceUnit? Unit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoIpProcessor : ProcessorBase
	{
		[JsonPropertyName("database_file")]
		public string DatabaseFile
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("first_only")]
		public bool FirstOnly
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoLinePoint
	{
	}

	public class GeoLineProperties
	{
		[JsonPropertyName("complete")]
		public bool Complete
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoLineSort
	{
	}

	public class GeoPointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoPolygonQuery : QueryBase
	{
		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoShape
	{
		[JsonPropertyName("type")]
		public string? Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public GeoOrientation? Orientation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strategy")]
		public GeoStrategy? Strategy
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GeoShapeQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relation")]
		public GeoShapeRelation? Relation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GetStats
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exists_time")]
		public string? ExistsTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exists_time_in_millis")]
		public long ExistsTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exists_total")]
		public long ExistsTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_time")]
		public string? MissingTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_time_in_millis")]
		public long MissingTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_total")]
		public long MissingTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time")]
		public string? Time
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GlobalPrivileges
	{
	}

	public class GoogleNormalizedDistanceHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GraphConnection
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public long Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target")]
		public long Target
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight")]
		public double Weight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GraphExploreControls
	{
		[JsonPropertyName("sample_size")]
		public int? SampleSize { get; set; }

		[JsonPropertyName("use_significance")]
		public bool UseSignificance { get; set; }
	}

	public class GraphVertex
	{
		[JsonPropertyName("depth")]
		public long Depth
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public string Field
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term")]
		public string Term
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight")]
		public double Weight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GraphVertexDefinition
	{
		[JsonPropertyName("min_doc_count")]
		public long? MinDocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_min_doc_count")]
		public long? ShardMinDocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GraphVertexInclude
	{
		[JsonPropertyName("boost")]
		public double Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term")]
		public string Term
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GrokProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trace_match")]
		public bool? TraceMatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class GsubProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HasChildQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("max_children")]
		public int? MaxChildren { get; set; }

		[JsonPropertyName("min_children")]
		public int? MinChildren { get; set; }

		[JsonPropertyName("score_mode")]
		public ChildScoreMode? ScoreMode { get; set; }
	}

	public class HasParentQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("score")]
		public bool? Score { get; set; }
	}

	public class HdrMethod
	{
		[JsonPropertyName("number_of_significant_value_digits")]
		public int? NumberOfSignificantValueDigits
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HdrPercentileItem
	{
		[JsonPropertyName("key")]
		public double Key
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Highlight
	{
		[JsonPropertyName("type")]
		public HighlighterType? Type { get; set; }

		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonPropertyName("boundary_scanner")]
		public BoundaryScanner? BoundaryScanner { get; set; }

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonPropertyName("encoder")]
		public HighlighterEncoder? Encoder { get; set; }

		[JsonPropertyName("fragmenter")]
		public HighlighterFragmenter? Fragmenter { get; set; }

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonPropertyName("order")]
		public HighlighterOrder? Order { get; set; }

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonPropertyName("tags_schema")]
		public HighlighterTagsSchema? TagsSchema { get; set; }
	}

	public class HighlightField
	{
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boundary_scanner")]
		public BoundaryScanner? BoundaryScanner
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("force_source")]
		public bool? ForceSource
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fragmenter")]
		public HighlighterFragmenter? Fragmenter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public HighlighterOrder? Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phrase_limit")]
		public int? PhraseLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tags_schema")]
		public HighlighterTagsSchema? TagsSchema
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HistogramOrder
	{
		[JsonPropertyName("_count")]
		public SortOrder? Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_key")]
		public SortOrder? Key
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HistogramProperty : PropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HistogramRollupGrouping
	{
		[JsonPropertyName("interval")]
		public long Interval { get; set; }
	}

	public class Hit<TDocument>
	{
		[JsonPropertyName("_score")]
		public double? Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_shard")]
		public string? Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_node")]
		public string? Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_routing")]
		public string? Routing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public long? SeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HitsMetadata<T>
	{
		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HoltLinearModelSettings
	{
	}

	public class HoltWintersModelSettings
	{
		[JsonPropertyName("pad")]
		public bool? Pad
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("period")]
		public int? Period
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public HoltWintersType? Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Hop
	{
	}

	public class HotThreadInformation
	{
		[JsonPropertyName("node_id")]
		public string NodeId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public string NodeName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HourlySchedule
	{
	}

	public class HtmlStripCharFilter : CharFilterBase
	{
	}

	public class HttpInput
	{
		[JsonPropertyName("response_content_type")]
		public ResponseContentType ResponseContentType { get; set; }
	}

	public class HttpInputAuthentication
	{
	}

	public class HttpInputBasicAuthentication
	{
		[JsonPropertyName("password")]
		public string Password { get; set; }

		[JsonPropertyName("username")]
		public string Username { get; set; }
	}

	public class HttpInputProxy
	{
		[JsonPropertyName("host")]
		public string Host { get; set; }

		[JsonPropertyName("port")]
		public int Port { get; set; }
	}

	public class HttpInputRequestDefinition
	{
		[JsonPropertyName("body")]
		public string? Body { get; set; }

		[JsonPropertyName("host")]
		public string? Host { get; set; }

		[JsonPropertyName("method")]
		public HttpInputMethod? Method { get; set; }

		[JsonPropertyName("path")]
		public string? Path { get; set; }

		[JsonPropertyName("port")]
		public int? Port { get; set; }

		[JsonPropertyName("scheme")]
		public ConnectionScheme? Scheme { get; set; }

		[JsonPropertyName("url")]
		public string? Url { get; set; }
	}

	public class HttpInputRequestResult : HttpInputRequestDefinition
	{
	}

	public class HttpInputResponseResult
	{
		[JsonPropertyName("body")]
		public string Body
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public int Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HttpStats
	{
		[JsonPropertyName("current_open")]
		public int CurrentOpen
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_opened")]
		public long TotalOpened
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HunspellTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("dedup")]
		public bool Dedup
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dictionary")]
		public string Dictionary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("longest_only")]
		public bool LongestOnly
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class HyphenationDecompounderTokenFilter : CompoundWordTokenFilterBase
	{
	}

	public class IdsQuery : QueryBase
	{
	}

	public class IlmPolicyStatistics
	{
		[JsonPropertyName("indices_managed")]
		public int IndicesManaged
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IlmUsage
	{
		[JsonPropertyName("policy_count")]
		public int PolicyCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndexActionResult
	{
	}

	public class IndexAliases
	{
	}

	public class IndexBlockStatus
	{
		[JsonPropertyName("blocked")]
		public bool Blocked
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndexField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class IndexHealthStats
	{
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_replicas")]
		public int NumberOfReplicas
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_shards")]
		public int NumberOfShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Health Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndexMappings
	{
	}

	public class IndexPrivilegesCheck
	{
	}

	public class IndexSegment
	{
	}

	public class IndexState
	{
	}

	public class IndexStats
	{
	}

	public class IndexedScript : ScriptBase
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndexingStats
	{
		[JsonPropertyName("index_current")]
		public long IndexCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_current")]
		public long DeleteCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_time")]
		public string? DeleteTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_time_in_millis")]
		public long DeleteTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_total")]
		public long DeleteTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_throttled")]
		public bool IsThrottled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("noop_update_total")]
		public long NoopUpdateTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_time")]
		public string? IndexTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_time_in_millis")]
		public long IndexTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_total")]
		public long IndexTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_failed")]
		public long IndexFailed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndicesOptions
	{
		[JsonPropertyName("allow_no_indices")]
		public bool AllowNoIndices { get; set; }

		[JsonPropertyName("ignore_unavailable")]
		public bool IgnoreUnavailable { get; set; }
	}

	public class IndicesPrivileges
	{
		[JsonPropertyName("allow_restricted_indices")]
		public bool? AllowRestrictedIndices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndicesShardStores
	{
	}

	public class IndicesStats
	{
		[JsonPropertyName("uuid")]
		public string? Uuid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IndicesVersionsStats
	{
		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_count")]
		public int PrimaryShardCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_primary_bytes")]
		public long TotalPrimaryBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InferenceConfigContainer
	{
	}

	public class InferenceProcessor : ProcessorBase
	{
	}

	public class InferenceProcessorConfig
	{
	}

	public class InferenceProcessorConfigRegression
	{
		[JsonPropertyName("results_field")]
		public string ResultsField
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Influence
	{
		[JsonPropertyName("influencer_field_name")]
		public string InfluencerFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Ingest
	{
		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pipeline")]
		public string? Pipeline
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IngestStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InlineGet<TDocument>
	{
		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public long SeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long PrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InlineRoleTemplate
	{
		[JsonPropertyName("format")]
		public RoleTemplateFormat? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InlineRoleTemplateSource
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InlineScript : ScriptBase
	{
		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	public class InnerHits
	{
		[JsonPropertyName("name")]
		public string? Name { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public class InnerHitsMetadata
	{
		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InnerHitsResult
	{
	}

	public class InputContainer
	{
	}

	public class IntegerRangeProperty : RangePropertyBase
	{
	}

	public class Interval : ScheduleBase
	{
		[JsonPropertyName("factor")]
		public long Factor { get; set; }

		[JsonPropertyName("unit")]
		public IntervalUnit Unit { get; set; }
	}

	public class IntervalsAllOf
	{
		[JsonPropertyName("max_gaps")]
		public int? MaxGaps
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ordered")]
		public bool? Ordered
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IntervalsAnyOf
	{
	}

	public class IntervalsContainer
	{
	}

	public class IntervalsFilter
	{
	}

	public class IntervalsFuzzy
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term")]
		public string? Term
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transpositions")]
		public bool? Transpositions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IntervalsMatch
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gaps")]
		public int? MaxGaps
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ordered")]
		public bool? Ordered
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public string? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IntervalsPrefix
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IntervalsQuery : QueryBase
	{
	}

	public class IntervalsWildcard
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string? Pattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class InvalidRoleTemplate
	{
		[JsonPropertyName("template")]
		public string Template
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public RoleTemplateFormat? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IpFilterUsage
	{
		[JsonPropertyName("http")]
		public bool Http
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport")]
		public bool Transport
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IpProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IpRangeAggregationRange
	{
		[JsonPropertyName("from")]
		public string? From
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mask")]
		public string? Mask
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("to")]
		public string? To
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class IpRangeBucket
	{
	}

	public class IpRangeProperty : RangePropertyBase
	{
	}

	public class Job
	{
		[JsonPropertyName("allow_lazy_open")]
		public bool? AllowLazyOpen
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("create_time")]
		public int? CreateTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("finished_time")]
		public int? FinishedTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_type")]
		public string? JobType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_snapshot_retention_days")]
		public long? ModelSnapshotRetentionDays
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("renormalization_window_days")]
		public long? RenormalizationWindowDays
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("results_retention_days")]
		public long? ResultsRetentionDays
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleting")]
		public bool? Deleting
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("daily_model_snapshot_retention_after_days")]
		public long? DailyModelSnapshotRetentionAfterDays
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JobForecastStatistics
	{
		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JobStatistics
	{
		[JsonPropertyName("avg")]
		public double Avg
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public double Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JobStats
	{
		[JsonPropertyName("assignment_explanation")]
		public string AssignmentExplanation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("open_time")]
		public DateTimeOffset OpenTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public JobState State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleting")]
		public bool? Deleting
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JoinProcessor : ProcessorBase
	{
		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JoinProperty : PropertyBase
	{
	}

	public class JsonProcessor : ProcessorBase
	{
		[JsonPropertyName("add_to_root")]
		public bool AddToRoot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class JvmClassesStats
	{
		[JsonPropertyName("current_loaded_count")]
		public long CurrentLoadedCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_loaded_count")]
		public long TotalLoadedCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_unloaded_count")]
		public long TotalUnloadedCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KStemTokenFilter : TokenFilterBase
	{
	}

	public class KeepTypesTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("mode")]
		public KeepTypesMode Mode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeepWordsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("keep_words_case")]
		public bool KeepWordsCase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_words_path")]
		public string KeepWordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeyValueProcessor : ProcessorBase
	{
		[JsonPropertyName("field_split")]
		public string FieldSplit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strip_brackets")]
		public bool? StripBrackets
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_key")]
		public string? TrimKey
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_value")]
		public string? TrimValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_split")]
		public string ValueSplit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeyedBucket<TKey>
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key_as_string")]
		public string KeyAsString
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeyedProcessorStats
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeywordMarkerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_path")]
		public string KeywordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_pattern")]
		public string KeywordsPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeywordProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("normalizer")]
		public string? Normalizer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KeywordTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class KibanaUrlConfig : BaseUrlConfig
	{
		[JsonPropertyName("time_range")]
		public string? TimeRange
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LaplaceSmoothingModel
	{
		[JsonPropertyName("alpha")]
		public double Alpha
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LatLon
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LengthTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max")]
		public int Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public int Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LetterTokenizer : TokenizerBase
	{
	}

	public class License
	{
		[JsonPropertyName("issued_to")]
		public string IssuedTo { get; set; }

		[JsonPropertyName("issuer")]
		public string Issuer { get; set; }

		[JsonPropertyName("max_nodes")]
		public long? MaxNodes { get; set; }

		[JsonPropertyName("max_resource_units")]
		public long? MaxResourceUnits { get; set; }

		[JsonPropertyName("signature")]
		public string Signature { get; set; }

		[JsonPropertyName("type")]
		public LicenseType Type { get; set; }

		[JsonPropertyName("uid")]
		public string Uid { get; set; }
	}

	public class LicenseAcknowledgement
	{
		[JsonPropertyName("message")]
		public string Message
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LicenseInformation
	{
		[JsonPropertyName("expiry_date")]
		public DateTimeOffset ExpiryDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("issue_date")]
		public DateTimeOffset IssueDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("issued_to")]
		public string IssuedTo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("issuer")]
		public string Issuer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_nodes")]
		public long MaxNodes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_resource_units")]
		public int? MaxResourceUnits
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public LicenseStatus Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public LicenseType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LifecycleAction
	{
	}

	public class LifecycleExplain
	{
		[JsonPropertyName("failed_step_retry_count")]
		public int? FailedStepRetryCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_auto_retryable_error")]
		public bool? IsAutoRetryableError
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("managed")]
		public bool Managed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LifecycleExplainPhaseExecution
	{
	}

	public class LifecycleExplainProject
	{
	}

	public class LifecycleExplainProjectSummary
	{
		[JsonPropertyName("managed")]
		public bool Managed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LifecyclePolicy
	{
		[JsonPropertyName("modified_date")]
		public DateTimeOffset ModifiedDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LikeDocument
	{
	}

	public class LimitTokenCountTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("consume_all_tokens")]
		public bool ConsumeAllTokens
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_token_count")]
		public int MaxTokenCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Limits
	{
		[JsonPropertyName("max_model_memory_limit")]
		public string MaxModelMemoryLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("effective_max_model_memory_limit")]
		public string EffectiveMaxModelMemoryLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LineStringGeoShape
	{
	}

	public class LinearInterpolationSmoothingModel
	{
		[JsonPropertyName("bigram_lambda")]
		public double BigramLambda
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trigram_lambda")]
		public double TrigramLambda
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unigram_lambda")]
		public double UnigramLambda
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LoggingActionResult
	{
		[JsonPropertyName("logged_text")]
		public string LoggedText
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LongRangeProperty : RangePropertyBase
	{
	}

	public class LowercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LowercaseTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class LowercaseTokenizer : TokenizerBase
	{
	}

	public class MachineLearningUsage : XPackUsage
	{
		[JsonPropertyName("node_count")]
		public int NodeCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MainError : ErrorCause
	{
	}

	public class ManageUserPrivileges
	{
	}

	public class MappingCharFilter : CharFilterBase
	{
		[JsonPropertyName("mappings_path")]
		public string MappingsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MatchAllQuery : QueryBase
	{
		[JsonPropertyName("norm_field")]
		public string? NormField { get; set; }
	}

	public class MatchBoolPrefixQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operator")]
		public Operator? Operator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public string? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MatchNoneQuery : QueryBase
	{
	}

	public class MatchPhrasePrefixQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public string? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("slop")]
		public int? Slop
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MatchPhraseQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public string? Query
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("slop")]
		public int? Slop
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MatchQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool? Lenient
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operator")]
		public Operator? Operator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MemoryStats
	{
		[JsonPropertyName("resident")]
		public string Resident
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resident_in_bytes")]
		public long ResidentInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("share")]
		public string Share
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("share_in_bytes")]
		public long ShareInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_virtual")]
		public string TotalVirtual
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_virtual_in_bytes")]
		public long TotalVirtualInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MergesStats
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_docs")]
		public long CurrentDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_size")]
		public string? CurrentSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_size_in_bytes")]
		public long CurrentSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_auto_throttle")]
		public string? TotalAutoThrottle
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_auto_throttle_in_bytes")]
		public long TotalAutoThrottleInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_docs")]
		public long TotalDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_size")]
		public string? TotalSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_size_in_bytes")]
		public long TotalSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_stopped_time")]
		public string? TotalStoppedTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_stopped_time_in_millis")]
		public long TotalStoppedTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_throttled_time")]
		public string? TotalThrottledTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_throttled_time_in_millis")]
		public long TotalThrottledTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public string? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MetricAggregationBase
	{
	}

	public class MinimalLicenseInformation
	{
		[JsonPropertyName("mode")]
		public LicenseType Mode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public LicenseStatus Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public LicenseType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uid")]
		public string Uid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MlDataFrameAnalyticsJobsCountUsage
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MlDataFrameAnalyticsJobsMemoryUsage
	{
	}

	public class MlDataFrameAnalyticsJobsUsage
	{
	}

	public class MlInferenceIngestProcessorCountUsage
	{
		[JsonPropertyName("max")]
		public long Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum")]
		public long Sum
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public long Min
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MlInferenceIngestProcessorUsage
	{
	}

	public class MlInferenceTrainedModelsCountUsage
	{
		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prepackaged")]
		public long Prepackaged
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("other")]
		public long Other
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regression")]
		public long Regression
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("classification")]
		public long Classification
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MlInferenceTrainedModelsUsage
	{
	}

	public class MlInferenceUsage
	{
	}

	public class MlJobForecasts
	{
		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("forecasted_jobs")]
		public long ForecastedJobs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MlUsageCounter
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ModelPlotConfig
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonPropertyName("annotations_enabled")]
		public bool? AnnotationsEnabled { get; set; }
	}

	public class ModelPlotConfigEnabled
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class ModelSizeStats
	{
		[JsonPropertyName("bucket_allocation_failures_count")]
		public long BucketAllocationFailuresCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("log_time")]
		public DateTimeOffset LogTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_status")]
		public MemoryStatus MemoryStatus
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_bytes")]
		public long ModelBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("result_type")]
		public string ResultType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_by_field_count")]
		public long TotalByFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_over_field_count")]
		public long TotalOverFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_partition_field_count")]
		public long TotalPartitionFieldCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ModelSnapshot
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest_record_time_stamp")]
		public DateTimeOffset LatestRecordTimeStamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("latest_result_time_stamp")]
		public DateTimeOffset LatestResultTimeStamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retain")]
		public bool Retain
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot_doc_count")]
		public long SnapshotDocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot_id")]
		public string SnapshotId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MonitoringUsage : XPackUsage
	{
		[JsonPropertyName("collection_enabled")]
		public bool CollectionEnabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MoreLikeThisQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("boost_terms")]
		public double? BoostTerms { get; set; }

		[JsonPropertyName("include")]
		public bool? Include { get; set; }

		[JsonPropertyName("max_doc_freq")]
		public int? MaxDocFreq { get; set; }

		[JsonPropertyName("max_query_terms")]
		public int? MaxQueryTerms { get; set; }

		[JsonPropertyName("max_word_length")]
		public int? MaxWordLength { get; set; }

		[JsonPropertyName("min_doc_freq")]
		public int? MinDocFreq { get; set; }

		[JsonPropertyName("min_term_freq")]
		public int? MinTermFreq { get; set; }

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength { get; set; }

		[JsonPropertyName("version_type")]
		public VersionType? VersionType { get; set; }
	}

	public class MultiGetHit<TDocument>
	{
		[JsonPropertyName("found")]
		public bool? Found
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public long? SeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MultiGetOperation
	{
		[JsonPropertyName("can_be_flattened")]
		public bool? CanBeFlattened
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_type")]
		public VersionType? VersionType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MultiMatchQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("operator")]
		public Operator? Operator { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("query")]
		public string? Query { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonPropertyName("type")]
		public TextQueryType? Type { get; set; }

		[JsonPropertyName("use_dis_max")]
		public bool? UseDisMax { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public class MultiTermLookup
	{
	}

	public class MultiTermVectorOperation
	{
		[JsonPropertyName("field_statistics")]
		public bool FieldStatistics
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offsets")]
		public bool Offsets
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("payloads")]
		public bool Payloads
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("positions")]
		public bool Positions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_statistics")]
		public bool TermStatistics
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_type")]
		public VersionType VersionType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class MultiplexerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Murmur3HashProperty : DocValuesPropertyBase
	{
	}

	public class MutualInformationHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_negatives")]
		public bool IncludeNegatives
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NamedPolicy : EnrichPolicy
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NamedPolicyConfig
	{
	}

	public class NamedPolicyMetadata
	{
	}

	public class NamedQuery<TQuery>
	{
		[JsonPropertyName("_name")]
		public string? Name { get; set; }

		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }
	}

	public class NativeCodeInformation
	{
		[JsonPropertyName("build_hash")]
		public string BuildHash
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NestedIdentity
	{
		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NestedProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NestedQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("score_mode")]
		public NestedScoreMode? ScoreMode { get; set; }
	}

	public class NestedSortValue
	{
		[JsonPropertyName("max_children")]
		public int? MaxChildren
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NeverCondition
	{
	}

	public class NodeAllocationExplanation
	{
		[JsonPropertyName("node_decision")]
		public Decision NodeDecision
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_id")]
		public string NodeId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public string NodeName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeAttributes
	{
		[JsonPropertyName("ephemeral_id")]
		public string EphemeralId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeBufferPool
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_capacity")]
		public string TotalCapacity
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_capacity_in_bytes")]
		public long TotalCapacityInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used")]
		public string Used
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_in_bytes")]
		public long UsedInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeDiskUsage
	{
		[JsonPropertyName("node_name")]
		public string NodeName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfo
	{
		[JsonPropertyName("build_flavor")]
		public string BuildFlavor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_hash")]
		public string BuildHash
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_type")]
		public string BuildType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("host")]
		public string Host
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ip")]
		public string Ip
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_indexing_buffer")]
		public long TotalIndexingBuffer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoHttp
	{
		[JsonPropertyName("max_content_length")]
		public string MaxContentLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_content_length_in_bytes")]
		public long MaxContentLengthInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("publish_address")]
		public string PublishAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoJvmMemory
	{
		[JsonPropertyName("direct_max")]
		public string DirectMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("direct_max_in_bytes")]
		public long DirectMaxInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_init")]
		public string HeapInit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_init_in_bytes")]
		public long HeapInitInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_max")]
		public string HeapMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_max_in_bytes")]
		public long HeapMaxInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_init")]
		public string NonHeapInit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_init_in_bytes")]
		public long NonHeapInitInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_max")]
		public string NonHeapMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("non_heap_max_in_bytes")]
		public long NonHeapMaxInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoMemory
	{
		[JsonPropertyName("total")]
		public string Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoNetwork
	{
		[JsonPropertyName("refresh_interval")]
		public int RefreshInterval
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoNetworkInterface
	{
		[JsonPropertyName("address")]
		public string Address
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mac_address")]
		public string MacAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoOSCPU
	{
		[JsonPropertyName("cache_size")]
		public string CacheSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size_in_bytes")]
		public int CacheSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cores_per_socket")]
		public int CoresPerSocket
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mhz")]
		public int Mhz
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model")]
		public string Model
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_cores")]
		public int TotalCores
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_sockets")]
		public int TotalSockets
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vendor")]
		public string Vendor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeInfoTransport
	{
		[JsonPropertyName("publish_address")]
		public string PublishAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeIngestStats
	{
	}

	public class NodeJvmInfo
	{
		[JsonPropertyName("pid")]
		public int Pid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_vendor")]
		public string VmVendor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeJvmStats
	{
		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uptime")]
		public string Uptime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uptime_in_millis")]
		public long UptimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeOperatingSystemInfo
	{
		[JsonPropertyName("arch")]
		public string Arch
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_processors")]
		public int AvailableProcessors
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("refresh_interval_in_millis")]
		public int RefreshIntervalInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodePackagingType
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("flavor")]
		public string Flavor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeProcessInfo
	{
		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mlockall")]
		public bool Mlockall
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("refresh_interval_in_millis")]
		public long RefreshIntervalInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeReloadException
	{
	}

	public class NodeReloadExceptionCausedBy
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeStatistics
	{
		[JsonPropertyName("failed")]
		public int Failed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public int Successful
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeStats
	{
		[JsonPropertyName("host")]
		public string Host
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeThreadPoolInfo
	{
		[JsonPropertyName("core")]
		public int Core
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_alive")]
		public string KeepAlive
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public int Max
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("queue_size")]
		public int QueueSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NodeUsageInformation
	{
	}

	public class NoriPartOfSpeechTokenFilter : TokenFilterBase
	{
	}

	public class NoriTokenizer : TokenizerBase
	{
		[JsonPropertyName("decompound_mode")]
		public NoriDecompoundMode DecompoundMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discard_punctuation")]
		public bool DiscardPunctuation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_dictionary")]
		public string UserDictionary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NumberProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public NumberType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class NumericDecayFunction : DecayFunctionBase
	{
	}

	public class NumericFielddata
	{
		[JsonPropertyName("format")]
		public NumericFielddataFormat Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ObjectProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class OperatingSystemMemoryInfo
	{
		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_percent")]
		public int FreePercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_in_bytes")]
		public long UsedInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_percent")]
		public int UsedPercent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class OperatingSystemStats
	{
		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class OverallBucket
	{
		[JsonPropertyName("bucket_span")]
		public long BucketSpan
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_interim")]
		public bool IsInterim
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("overall_score")]
		public double OverallScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("result_type")]
		public string ResultType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class OverallBucketJobInfo
	{
		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_anomaly_score")]
		public double MaxAnomalyScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Page
	{
		[JsonPropertyName("from")]
		public int From { get; set; }

		[JsonPropertyName("size")]
		public int Size { get; set; }
	}

	public class PagerDutyActionEventResult
	{
		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PagerDutyActionResult
	{
	}

	public class PagerDutyContext
	{
		[JsonPropertyName("href")]
		public string Href
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("src")]
		public string Src
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public PagerDutyContextType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PagerDutyEvent
	{
		[JsonPropertyName("account")]
		public string Account
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("attach_payload")]
		public bool AttachPayload
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("client")]
		public string Client
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("client_url")]
		public string ClientUrl
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("event_type")]
		public PagerDutyEventType EventType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("incident_key")]
		public string IncidentKey
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PainlessContextSetup
	{
	}

	public class PainlessExecutionPosition
	{
		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start")]
		public int Start
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("end")]
		public int End
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ParentIdQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }
	}

	public class PartitionScore
	{
		[JsonPropertyName("initial_record_score")]
		public double InitialRecordScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partition_field_name")]
		public string PartitionFieldName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partition_field_value")]
		public string PartitionFieldValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("probability")]
		public double Probability
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("record_score")]
		public double RecordScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PathHierarchyTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reverse")]
		public bool Reverse
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip")]
		public int Skip
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PatternCaptureTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PatternReplaceTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("flags")]
		public string Flags
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PendingTask
	{
		[JsonPropertyName("insert_order")]
		public int InsertOrder
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("priority")]
		public string Priority
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue")]
		public string TimeInQueue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue_millis")]
		public int TimeInQueueMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PerPartitionCategorization
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonPropertyName("stop_on_warn")]
		public bool? StopOnWarn { get; set; }
	}

	public class PercentageScoreHeuristic
	{
	}

	public class PercentileItem
	{
		[JsonPropertyName("percentile")]
		public double Percentile
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PercolateQuery : QueryBase
	{
		[JsonPropertyName("preference")]
		public string? Preference { get; set; }
	}

	public class PercolatorProperty : PropertyBase
	{
	}

	public class Phase
	{
	}

	public class Phases
	{
	}

	public class PhraseSuggestCollate
	{
		[JsonPropertyName("prune")]
		public bool? Prune
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PhraseSuggestCollateQuery
	{
		[JsonPropertyName("source")]
		public string? Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PhraseSuggestHighlight
	{
		[JsonPropertyName("post_tag")]
		public string PostTag
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pre_tag")]
		public string PreTag
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PhraseSuggestOption
	{
		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlighted")]
		public string Highlighted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score")]
		public double Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PhraseSuggester : SuggesterBase
	{
		[JsonPropertyName("confidence")]
		public double? Confidence
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("force_unigrams")]
		public bool? ForceUnigrams
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gram_size")]
		public int? GramSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_errors")]
		public double? MaxErrors
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("real_word_error_likelihood")]
		public double? RealWordErrorLikelihood
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string? Separator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_size")]
		public int? ShardSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string? Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_limit")]
		public int? TokenLimit
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PinnedQuery : QueryBase
	{
	}

	public class Pipeline
	{
		[JsonPropertyName("description")]
		public string? Description { get; set; }
	}

	public class PipelineProcessor : ProcessorBase
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PipelineSimulation
	{
		[JsonPropertyName("tag")]
		public string? Tag
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_type")]
		public string? ProcessorType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Status? Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PluginStats
	{
		[JsonPropertyName("classname")]
		public string Classname
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("has_native_controller")]
		public bool HasNativeController
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed")]
		public bool Licensed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PointInTimeReference
	{
	}

	public class PointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Policy
	{
		[JsonPropertyName("name")]
		public string? Name { get; set; }
	}

	public class PorterStemTokenFilter : TokenFilterBase
	{
	}

	public class PredicateTokenFilter : TokenFilterBase
	{
	}

	public class PrefixQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PrivilegesActions
	{
		[JsonPropertyName("application")]
		public string? Application
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string? Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ProcessStats
	{
		[JsonPropertyName("open_file_descriptors")]
		public int OpenFileDescriptors
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ProcessorBase
	{
		[JsonPropertyName("if")]
		public string? If
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tag")]
		public string? Tag
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ProcessorContainer
	{
	}

	public class Profile
	{
	}

	public class PropertyBase
	{
		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PutPrivilegesStatus
	{
		[JsonPropertyName("created")]
		public bool Created
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PutRoleMappingStatus
	{
		[JsonPropertyName("created")]
		public bool Created
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class PutRoleStatus
	{
		[JsonPropertyName("created")]
		public bool Created
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryBase
	{
		[JsonPropertyName("_name")]
		public string? Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryBreakdown
	{
		[JsonPropertyName("advance")]
		public long Advance
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("advance_count")]
		public long AdvanceCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_scorer")]
		public long BuildScorer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_scorer_count")]
		public long BuildScorerCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("create_weight")]
		public long CreateWeight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("create_weight_count")]
		public long CreateWeightCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match")]
		public long Match
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match_count")]
		public long MatchCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shallow_advance")]
		public long ShallowAdvance
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shallow_advance_count")]
		public long ShallowAdvanceCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_doc")]
		public long NextDoc
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_doc_count")]
		public long NextDocCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score")]
		public long Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score_count")]
		public long ScoreCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compute_max_score")]
		public long ComputeMaxScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compute_max_score_count")]
		public long ComputeMaxScoreCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_min_competitive_score")]
		public long SetMinCompetitiveScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_min_competitive_score_count")]
		public long SetMinCompetitiveScoreCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryCacheStats
	{
		[JsonPropertyName("cache_count")]
		public long CacheCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size")]
		public long CacheSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("evictions")]
		public long Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public long HitCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public long MissCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_count")]
		public long TotalCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryContainer
	{
		[JsonPropertyName("is_conditionless")]
		public bool? IsConditionless { get; set; }

		[JsonPropertyName("is_strict")]
		public bool? IsStrict { get; set; }

		[JsonPropertyName("is_verbatim")]
		public bool? IsVerbatim { get; set; }

		[JsonPropertyName("is_writable")]
		public bool? IsWritable { get; set; }
	}

	public class QueryProfile
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryStringQuery : QueryBase
	{
		[JsonPropertyName("allow_leading_wildcard")]
		public bool? AllowLeadingWildcard { get; set; }

		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("default_operator")]
		public Operator? DefaultOperator { get; set; }

		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; set; }

		[JsonPropertyName("escape")]
		public bool? Escape { get; set; }

		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates { get; set; }

		[JsonPropertyName("phrase_slop")]
		public double? PhraseSlop { get; set; }

		[JsonPropertyName("query")]
		public string? Query { get; set; }

		[JsonPropertyName("quote_analyzer")]
		public string? QuoteAnalyzer { get; set; }

		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }

		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		[JsonPropertyName("type")]
		public TextQueryType? Type { get; set; }
	}

	public class QueryTemplate
	{
		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	public class QueryUsage
	{
		[JsonPropertyName("count")]
		public int? Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public int? Failed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("paging")]
		public int? Paging
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int? Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class QueryUserPrivileges
	{
	}

	public class RandomScoreFunction : ScoreFunctionBase
	{
	}

	public class RangeBucket
	{
	}

	public class RangePropertyBase : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RangeQuery : QueryBase
	{
		[JsonPropertyName("relation")]
		public RangeRelation? Relation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_zone")]
		public string? TimeZone
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RankFeatureFunction
	{
	}

	public class RankFeatureProperty : PropertyBase
	{
		[JsonPropertyName("positive_score_impact")]
		public bool? PositiveScoreImpact
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RankFeatureQuery : QueryBase
	{
	}

	public class RankFeaturesProperty : PropertyBase
	{
	}

	public class RareTermsBucket<TKey>
	{
	}

	public class RealmCacheUsage
	{
		[JsonPropertyName("size")]
		public long Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RealmInfo
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RealmUsage : XPackUsage
	{
	}

	public class RecoveryBytes
	{
	}

	public class RecoveryFileDetails
	{
		[JsonPropertyName("length")]
		public long Length
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("recovered")]
		public long Recovered
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryFiles
	{
		[JsonPropertyName("recovered")]
		public long Recovered
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reused")]
		public long Reused
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryIndexStatus
	{
	}

	public class RecoveryOrigin
	{
		[JsonPropertyName("hostname")]
		public string? Hostname
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("host")]
		public string? Host
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string? TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public string? Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ip")]
		public string? Ip
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string? Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bootstrap_new_history_uuid")]
		public bool? BootstrapNewHistoryUuid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryStartStatus
	{
		[JsonPropertyName("check_index_time")]
		public long CheckIndexTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public string TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryStats
	{
		[JsonPropertyName("current_as_source")]
		public long CurrentAsSource
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_as_target")]
		public long CurrentAsTarget
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryStatus
	{
	}

	public class RecoveryTranslogStatus
	{
		[JsonPropertyName("recovered")]
		public long Recovered
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_on_start")]
		public long TotalOnStart
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public string? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RecoveryVerifyIndex
	{
	}

	public class RefreshStats
	{
		[JsonPropertyName("external_total")]
		public long ExternalTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("external_total_time_in_millis")]
		public long ExternalTotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("listeners")]
		public long Listeners
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public string? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RegexpQuery : QueryBase
	{
		[JsonPropertyName("flags")]
		public string? Flags
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public string? Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RegressionInferenceOptions
	{
		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReindexDestination
	{
		[JsonPropertyName("op_type")]
		public OpType? OpType { get; set; }

		[JsonPropertyName("pipeline")]
		public string? Pipeline { get; set; }

		[JsonPropertyName("version_type")]
		public VersionType? VersionType { get; set; }
	}

	public class ReindexNode
	{
		[JsonPropertyName("host")]
		public string Host
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ip")]
		public string Ip
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReindexRouting
	{
	}

	public class ReindexSource
	{
		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public class ReindexStatus
	{
		[JsonPropertyName("batches")]
		public long Batches
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("created")]
		public long Created
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("noops")]
		public long Noops
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttled_millis")]
		public long ThrottledMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttled_until_millis")]
		public long ThrottledUntilMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updated")]
		public long Updated
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_conflicts")]
		public long VersionConflicts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReindexTask
	{
		[JsonPropertyName("action")]
		public string Action
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cancellable")]
		public bool Cancellable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("running_time_in_nanos")]
		public long RunningTimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReloadDetails
	{
		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RemoteInfo
	{
		[JsonPropertyName("connected")]
		public bool Connected
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_connections_per_cluster")]
		public int MaxConnectionsPerCluster
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_nodes_connected")]
		public long NumNodesConnected
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip_unavailable")]
		public bool SkipUnavailable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RemoteSource
	{
		[JsonPropertyName("password")]
		public string Password { get; set; }

		[JsonPropertyName("username")]
		public string Username { get; set; }
	}

	public class RemoveDuplicatesTokenFilter : TokenFilterBase
	{
	}

	public class RemoveProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RenameProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RequestBase
	{
	}

	public class RequestCacheStats
	{
		[JsonPropertyName("evictions")]
		public long Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public long HitCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size")]
		public string? MemorySize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public long MissCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Rescore
	{
		[JsonPropertyName("window_size")]
		public int? WindowSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RescoreQuery
	{
		[JsonPropertyName("query_weight")]
		public double? QueryWeight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rescore_query_weight")]
		public double? RescoreQueryWeight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score_mode")]
		public ScoreMode? ScoreMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReservedSize
	{
		[JsonPropertyName("node_id")]
		public string NodeId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ResultBucket
	{
		[JsonPropertyName("anomaly_score")]
		public double AnomalyScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("event_count")]
		public long EventCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initial_anomaly_score")]
		public double InitialAnomalyScore
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_interim")]
		public bool IsInterim
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processing_time_ms")]
		public double ProcessingTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("result_type")]
		public string ResultType
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Retries
	{
		[JsonPropertyName("bulk")]
		public long Bulk
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search")]
		public long Search
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ReverseTokenFilter : TokenFilterBase
	{
	}

	public class RoleMappingRuleBase
	{
	}

	public class RoleMappingUsage
	{
		[JsonPropertyName("enabled")]
		public int Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RolloverConditions
	{
		[JsonPropertyName("max_docs")]
		public long? MaxDocs { get; set; }

		[JsonPropertyName("max_size")]
		public string? MaxSize { get; set; }
	}

	public class RollupCapabilities
	{
	}

	public class RollupCapabilitiesJob
	{
		[JsonPropertyName("index_pattern")]
		public string IndexPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rollup_index")]
		public string RollupIndex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupFieldMetric
	{
	}

	public class RollupGroupings
	{
	}

	public class RollupIndexCapabilities
	{
	}

	public class RollupIndexCapabilitiesJob
	{
		[JsonPropertyName("index_pattern")]
		public string IndexPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupIndexCapabilitiesJobField
	{
		[JsonPropertyName("agg")]
		public string Agg
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_zone")]
		public string? TimeZone
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupJobConfiguration
	{
		[JsonPropertyName("cron")]
		public string Cron
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_pattern")]
		public string IndexPattern
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("page_size")]
		public long PageSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupJobInformation
	{
	}

	public class RollupJobStats
	{
		[JsonPropertyName("documents_processed")]
		public long DocumentsProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_failures")]
		public long IndexFailures
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_time_in_ms")]
		public long IndexTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_total")]
		public long IndexTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pages_processed")]
		public long PagesProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rollups_indexed")]
		public long RollupsIndexed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_failures")]
		public long SearchFailures
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_time_in_ms")]
		public long SearchTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_total")]
		public long SearchTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trigger_count")]
		public long TriggerCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processing_time_in_ms")]
		public long ProcessingTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processing_total")]
		public long ProcessingTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupJobStatus
	{
		[JsonPropertyName("job_state")]
		public IndexingJobState JobState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upgraded_doc_id")]
		public bool UpgradedDocId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupJobTaskFailure
	{
		[JsonPropertyName("status")]
		public string Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RollupJobTaskFailureReason
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RoutingField
	{
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	public class RuleCondition
	{
		[JsonPropertyName("applies_to")]
		public AppliesTo AppliesTo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operator")]
		public ConditionOperator Operator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RuntimeField
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public FieldType Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RuntimeFieldTypesStats
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scriptless_count")]
		public int ScriptlessCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shadowed_count")]
		public int ShadowedCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_max")]
		public int LinesMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_total")]
		public int LinesTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("chars_max")]
		public int CharsMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("chars_total")]
		public int CharsTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_max")]
		public int SourceMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_total")]
		public int SourceTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_max")]
		public int DocMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_total")]
		public int DocTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RuntimeFieldsTypeUsage
	{
		[JsonPropertyName("chars_max")]
		public long CharsMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("chars_total")]
		public long CharsTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_max")]
		public long DocMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_total")]
		public long DocTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public long IndexCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_max")]
		public long LinesMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_total")]
		public long LinesTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scriptless_count")]
		public long ScriptlessCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shadowed_count")]
		public long ShadowedCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_max")]
		public long SourceMax
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_total")]
		public long SourceTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class RuntimeFieldsUsage : XPackUsage
	{
	}

	public class SampleDiversity
	{
		[JsonPropertyName("max_docs_per_value")]
		public int MaxDocsPerValue { get; set; }
	}

	public class ScheduleBase
	{
	}

	public class ScheduleContainer
	{
	}

	public class ScheduleTriggerEvent
	{
	}

	public class ScheduledEvent
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("end_time")]
		public DateTimeOffset EndTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time")]
		public DateTimeOffset StartTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScoreFunctionBase
	{
		[JsonPropertyName("weight")]
		public double? Weight
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScoreSort
	{
		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScriptBase
	{
		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScriptCondition
	{
		[JsonPropertyName("lang")]
		public string Lang { get; set; }

		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	public class ScriptField
	{
	}

	public class ScriptProcessor : ProcessorBase
	{
		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScriptQuery : QueryBase
	{
	}

	public class ScriptScoreFunction : ScoreFunctionBase
	{
	}

	public class ScriptScoreQuery : QueryBase
	{
	}

	public class ScriptSort
	{
		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string? Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScriptStats
	{
		[JsonPropertyName("cache_evictions")]
		public long CacheEvictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compilations")]
		public long Compilations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScriptTransform
	{
		[JsonPropertyName("lang")]
		public string Lang { get; set; }
	}

	public class ScriptedHeuristic
	{
	}

	public class ScrollResponseErrorReason
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ScrollResponseFailedShard
	{
		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchAsYouTypeProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchInput
	{
	}

	public class SearchInputRequestDefinition
	{
		[JsonPropertyName("search_type")]
		public SearchType? SearchType { get; set; }
	}

	public class SearchNode
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchProfile
	{
		[JsonPropertyName("rewrite_time")]
		public long RewriteTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchShard
	{
		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_node")]
		public string RelocatingNode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchStats
	{
		[JsonPropertyName("fetch_current")]
		public long FetchCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fetch_time_in_millis")]
		public long FetchTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fetch_total")]
		public long FetchTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("open_contexts")]
		public long? OpenContexts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_current")]
		public long QueryCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_time_in_millis")]
		public long QueryTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_total")]
		public long QueryTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_current")]
		public long ScrollCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_time_in_millis")]
		public long ScrollTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_total")]
		public long ScrollTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_current")]
		public long SuggestCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_time_in_millis")]
		public long SuggestTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_total")]
		public long SuggestTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SearchTransform
	{
	}

	public class SearchableSnapshotsMountSnapshot
	{
	}

	public class SearchableSnapshotsUsage : XPackUsage
	{
		[JsonPropertyName("indices_count")]
		public int IndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("full_copy_indices_count")]
		public int? FullCopyIndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shared_cache_indices_count")]
		public int? SharedCacheIndicesCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityFeatureToggle
	{
		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityNode
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityRolesDlsBitSetCacheUsage
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityRolesDlsUsage
	{
	}

	public class SecurityRolesFileUsage
	{
		[JsonPropertyName("dls")]
		public bool Dls
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fls")]
		public bool Fls
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public long Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityRolesNativeUsage
	{
		[JsonPropertyName("dls")]
		public bool Dls
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fls")]
		public bool Fls
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public long Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SecurityRolesUsage
	{
	}

	public class SecurityUsage : XPackUsage
	{
	}

	public class Segment
	{
		[JsonPropertyName("committed")]
		public bool Committed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compound")]
		public bool Compound
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted_docs")]
		public long DeletedDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generation")]
		public int Generation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_in_bytes")]
		public double MemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search")]
		public bool Search
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public double SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_docs")]
		public long NumDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SegmentsStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory_in_bytes")]
		public long DocValuesMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public long FixedBitSetMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_max_memory_in_bytes")]
		public long? IndexWriterMaxMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory_in_bytes")]
		public long IndexWriterMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public long MaxUnsafeAutoIdTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_in_bytes")]
		public long MemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory_in_bytes")]
		public long NormsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory_in_bytes")]
		public long PointsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public long StoredFieldsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory_in_bytes")]
		public long TermsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public long TermVectorsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory_in_bytes")]
		public long VersionMapMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SetProcessor : ProcessorBase
	{
		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SetSecurityUserProcessor : ProcessorBase
	{
	}

	public class ShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public ShapeOrientation? Orientation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShapeQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relation")]
		public ShapeRelation? Relation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardCommit
	{
		[JsonPropertyName("generation")]
		public int Generation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_docs")]
		public long NumDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardCompletion
	{
		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardDocs
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardFailure
	{
		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public string? Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardFielddata
	{
		[JsonPropertyName("evictions")]
		public long Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardFileSizeInfo
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardFlush
	{
		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("periodic")]
		public long Periodic
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardGet
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exists_time_in_millis")]
		public long ExistsTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exists_total")]
		public long ExistsTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_time_in_millis")]
		public long MissingTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("missing_total")]
		public long MissingTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardHealthStats
	{
		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_active")]
		public bool PrimaryActive
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Health Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardIndexing
	{
		[JsonPropertyName("delete_current")]
		public long DeleteCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_time_in_millis")]
		public long DeleteTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_total")]
		public long DeleteTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_current")]
		public long IndexCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_failed")]
		public long IndexFailed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_time_in_millis")]
		public long IndexTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_total")]
		public long IndexTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_throttled")]
		public bool IsThrottled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("noop_update_total")]
		public long NoopUpdateTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardLease
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retaining_seq_no")]
		public long RetainingSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public long Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardMerges
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_docs")]
		public long CurrentDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_size_in_bytes")]
		public long CurrentSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_auto_throttle_in_bytes")]
		public long TotalAutoThrottleInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_docs")]
		public long TotalDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_size_in_bytes")]
		public long TotalSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_stopped_time_in_millis")]
		public long TotalStoppedTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_throttled_time_in_millis")]
		public long TotalThrottledTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardPath
	{
		[JsonPropertyName("data_path")]
		public string DataPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_custom_data_path")]
		public bool IsCustomDataPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state_path")]
		public string StatePath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardProfile
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardQueryCache
	{
		[JsonPropertyName("cache_count")]
		public long CacheCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size")]
		public long CacheSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("evictions")]
		public long Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public long HitCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public long MissCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_count")]
		public long TotalCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardRecovery
	{
		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stage")]
		public string Stage
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time")]
		public DateTimeOffset? StartTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stop_time")]
		public DateTimeOffset? StopTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public DateTimeOffset? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardRefresh
	{
		[JsonPropertyName("listeners")]
		public long Listeners
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("external_total")]
		public long ExternalTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("external_total_time_in_millis")]
		public long ExternalTotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardRequestCache
	{
		[JsonPropertyName("evictions")]
		public long Evictions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public long HitCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public long MissCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardRetentionLeases
	{
		[JsonPropertyName("primary_term")]
		public long PrimaryTerm
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardRouting
	{
		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_node")]
		public string? RelocatingNode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public ShardRoutingState State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardSearch
	{
		[JsonPropertyName("fetch_current")]
		public long FetchCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fetch_time_in_millis")]
		public long FetchTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fetch_total")]
		public long FetchTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("open_contexts")]
		public long OpenContexts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_current")]
		public long QueryCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_time_in_millis")]
		public long QueryTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_total")]
		public long QueryTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_current")]
		public long ScrollCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_time_in_millis")]
		public long ScrollTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scroll_total")]
		public long ScrollTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_current")]
		public long SuggestCurrent
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_time_in_millis")]
		public long SuggestTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_total")]
		public long SuggestTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardSegmentRouting
	{
		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardSegments
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory_in_bytes")]
		public long DocValuesMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public long FixedBitSetMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory_in_bytes")]
		public long IndexWriterMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public long MaxUnsafeAutoIdTimestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_in_bytes")]
		public long MemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory_in_bytes")]
		public long NormsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory_in_bytes")]
		public long PointsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public long StoredFieldsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory_in_bytes")]
		public long TermsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public long TermVectorsMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory_in_bytes")]
		public long VersionMapMemoryInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardSequenceNumber
	{
		[JsonPropertyName("global_checkpoint")]
		public long GlobalCheckpoint
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("local_checkpoint")]
		public long LocalCheckpoint
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_seq_no")]
		public long MaxSeqNo
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardStatistics
	{
	}

	public class ShardStats
	{
	}

	public class ShardStatsRecovery
	{
		[JsonPropertyName("current_as_source")]
		public long CurrentAsSource
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current_as_target")]
		public long CurrentAsTarget
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardStatsStore
	{
		[JsonPropertyName("reserved_in_bytes")]
		public long ReservedInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardStore
	{
		[JsonPropertyName("allocation")]
		public ShardStoreAllocation Allocation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardStoreException
	{
		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardStoreWrapper
	{
	}

	public class ShardTransactionLog
	{
		[JsonPropertyName("earliest_last_modified_age")]
		public long EarliestLastModifiedAge
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operations")]
		public long Operations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uncommitted_operations")]
		public long UncommittedOperations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uncommitted_size_in_bytes")]
		public long UncommittedSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardWarmer
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShardsSegment
	{
		[JsonPropertyName("num_committed_segments")]
		public int NumCommittedSegments
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_search_segments")]
		public int NumSearchSegments
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ShingleTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filler_token")]
		public string FillerToken
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int MaxShingleSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_shingle_size")]
		public int MinShingleSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams")]
		public bool OutputUnigrams
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams_if_no_shingles")]
		public bool OutputUnigramsIfNoShingles
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_separator")]
		public string TokenSeparator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SignificantTermsBucket<TKey>
	{
	}

	public class SimpleInput
	{
	}

	public class SimpleQueryStringQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("default_operator")]
		public Operator? DefaultOperator { get; set; }

		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("query")]
		public string? Query { get; set; }

		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }
	}

	public class SimulatePipelineDocument
	{
	}

	public class SimulatedActions
	{
		[JsonPropertyName("use_all")]
		public bool UseAll { get; set; }
	}

	public class SingleGroupSource
	{
	}

	public class SizeField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class SlackActionResult
	{
		[JsonPropertyName("account")]
		public string? Account
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SlackAttachment
	{
		[JsonPropertyName("author_icon")]
		public string? AuthorIcon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("author_link")]
		public string? AuthorLink
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("author_name")]
		public string AuthorName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("color")]
		public string? Color
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fallback")]
		public string? Fallback
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("footer")]
		public string? Footer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("footer_icon")]
		public string? FooterIcon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("image_url")]
		public string? ImageUrl
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretext")]
		public string? Pretext
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string? Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("thumb_url")]
		public string? ThumbUrl
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("title")]
		public string Title
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("title_link")]
		public string? TitleLink
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ts")]
		public DateTimeOffset? Ts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SlackAttachmentField
	{
		[JsonPropertyName("short")]
		public bool Short
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("title")]
		public string Title
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public string Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SlackDynamicAttachment
	{
		[JsonPropertyName("list_path")]
		public string ListPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SlackMessage
	{
		[JsonPropertyName("from")]
		public string From
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("icon")]
		public string? Icon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SlicedScroll
	{
		[JsonPropertyName("id")]
		public int Id { get; set; }

		[JsonPropertyName("max")]
		public int Max { get; set; }
	}

	public class SlmUsage : XPackUsage
	{
		[JsonPropertyName("policy_count")]
		public int? PolicyCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SmoothingModelContainer
	{
	}

	public class SnapshotIndexStats
	{
	}

	public class SnapshotInfo
	{
		[JsonPropertyName("end_time")]
		public DateTimeOffset? EndTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_global_state")]
		public bool? IncludeGlobalState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string? Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot")]
		public string Snapshot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time")]
		public DateTimeOffset? StartTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string? State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotInfoFeatureState
	{
		[JsonPropertyName("feature_name")]
		public string FeatureName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotLifecycleConfig
	{
		[JsonPropertyName("ignore_unavailable")]
		public bool? IgnoreUnavailable { get; set; }

		[JsonPropertyName("include_global_state")]
		public bool? IncludeGlobalState { get; set; }
	}

	public class SnapshotLifecycleInProgress
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_millis")]
		public DateTimeOffset StartTimeMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uuid")]
		public string Uuid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotLifecyclePolicy
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repository")]
		public string Repository
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotLifecyclePolicyMetadata
	{
		[JsonPropertyName("modified_date")]
		public DateTimeOffset? ModifiedDate
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_execution")]
		public DateTimeOffset? NextExecution
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotLifecycleStats
	{
		[JsonPropertyName("retention_deletion_time")]
		public DateTimeOffset? RetentionDeletionTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retention_failed")]
		public long? RetentionFailed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retention_runs")]
		public long? RetentionRuns
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retention_timed_out")]
		public long? RetentionTimedOut
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_snapshots_deleted")]
		public long? TotalSnapshotsDeleted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_snapshot_deletion_failures")]
		public long? TotalSnapshotDeletionFailures
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_snapshots_failed")]
		public long? TotalSnapshotsFailed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_snapshots_taken")]
		public long? TotalSnapshotsTaken
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotRepository
	{
		[JsonPropertyName("type")]
		public string Type { get; set; }
	}

	public class SnapshotRepositorySettings
	{
		[JsonPropertyName("chunk_size")]
		public string? ChunkSize { get; set; }

		[JsonPropertyName("location")]
		public string Location { get; set; }
	}

	public class SnapshotRestore
	{
		[JsonPropertyName("snapshot")]
		public string Snapshot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotRetentionConfiguration
	{
		[JsonPropertyName("max_count")]
		public int MaxCount { get; set; }

		[JsonPropertyName("min_count")]
		public int MinCount { get; set; }
	}

	public class SnapshotShardFailure
	{
		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_id")]
		public string NodeId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_id")]
		public string ShardId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public string Status
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotShardsStats
	{
		[JsonPropertyName("done")]
		public long Done
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("finalizing")]
		public long Finalizing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing")]
		public long Initializing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("started")]
		public long Started
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotStats
	{
		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnapshotStatus
	{
		[JsonPropertyName("include_global_state")]
		public bool IncludeGlobalState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repository")]
		public string Repository
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot")]
		public string Snapshot
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SnowballTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public SnowballLanguage Language
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SortContainer
	{
	}

	public class SortProcessor : ProcessorBase
	{
		[JsonPropertyName("order")]
		public SortOrder Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SourceField
	{
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class SourceFilter
	{
	}

	public class SpanContainingQuery : QueryBase
	{
	}

	public class SpanFieldMaskingQuery : QueryBase
	{
	}

	public class SpanFirstQuery : QueryBase
	{
		[JsonPropertyName("end")]
		public int? End { get; set; }
	}

	public class SpanGapQuery : QueryBase
	{
		[JsonPropertyName("width")]
		public int? Width
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SpanMultiTermQuery : QueryBase
	{
	}

	public class SpanNearQuery : QueryBase
	{
		[JsonPropertyName("in_order")]
		public bool? InOrder { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }
	}

	public class SpanNotQuery : QueryBase
	{
		[JsonPropertyName("dist")]
		public int? Dist { get; set; }

		[JsonPropertyName("post")]
		public int? Post { get; set; }

		[JsonPropertyName("pre")]
		public int? Pre { get; set; }
	}

	public class SpanOrQuery : QueryBase
	{
	}

	public class SpanQuery : QueryBase
	{
	}

	public class SpanTermQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SpanWithinQuery : QueryBase
	{
	}

	public class SplitProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_trailing")]
		public bool? PreserveTrailing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SqlColumn
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SqlUsage : XPackUsage
	{
	}

	public class SslUsage
	{
	}

	public class StandardDeviationBounds
	{
		[JsonPropertyName("lower")]
		public double? Lower
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper")]
		public double? Upper
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_population")]
		public double? LowerPopulation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_population")]
		public double? UpperPopulation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_sampling")]
		public double? LowerSampling
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_sampling")]
		public double? UpperSampling
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StandardTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StemmerOverrideTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("rules_path")]
		public string RulesPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StemmerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StepKey
	{
		[JsonPropertyName("action")]
		public string Action { get; set; }

		[JsonPropertyName("name")]
		public string Name { get; set; }

		[JsonPropertyName("phase")]
		public string Phase { get; set; }
	}

	public class StopTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool? IgnoreCase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remove_trailing")]
		public bool? RemoveTrailing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stopwords_path")]
		public string? StopwordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StoreStats
	{
		[JsonPropertyName("size")]
		public string? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public double SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reserved_in_bytes")]
		public double ReservedInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StoredRoleTemplate
	{
		[JsonPropertyName("format")]
		public RoleTemplateFormat? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StoredRoleTemplateId
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StoredScript
	{
		[JsonPropertyName("lang")]
		public string? Lang { get; set; }

		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	public class StringFielddata
	{
		[JsonPropertyName("format")]
		public StringFielddataFormat Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class StupidBackoffSmoothingModel
	{
		[JsonPropertyName("discount")]
		public double Discount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Suggest<T>
	{
		[JsonPropertyName("length")]
		public int Length
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SuggestContainer
	{
		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex")]
		public string? Regex
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string? Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SuggestContext
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SuggestContextQuery
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix")]
		public bool? Prefix
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SuggestFuzziness
	{
		[JsonPropertyName("min_length")]
		public int MinLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transpositions")]
		public bool Transpositions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unicode_aware")]
		public bool UnicodeAware
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SuggesterBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public int? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SynonymGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class SynonymTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TDigest
	{
		[JsonPropertyName("compression")]
		public int? Compression
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TaskExecutingNode
	{
		[JsonPropertyName("host")]
		public string Host
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ip")]
		public string Ip
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public string TransportAddress
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TaskInfo
	{
		[JsonPropertyName("action")]
		public string Action
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cancellable")]
		public bool Cancellable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("running_time_in_nanos")]
		public long RunningTimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TaskRetries
	{
		[JsonPropertyName("bulk")]
		public int Bulk
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search")]
		public int Search
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TaskState
	{
		[JsonPropertyName("action")]
		public string Action
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cancellable")]
		public bool Cancellable
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public long Id
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string Node
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("running_time_in_nanos")]
		public long RunningTimeInNanos
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TaskStatus
	{
		[JsonPropertyName("batches")]
		public long Batches
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("canceled")]
		public string? Canceled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("created")]
		public long Created
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("noops")]
		public long Noops
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttled_millis")]
		public long ThrottledMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("throttled_until_millis")]
		public long ThrottledUntilMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timed_out")]
		public bool? TimedOut
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("took")]
		public long? Took
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updated")]
		public long Updated
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_conflicts")]
		public long VersionConflicts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TemplateMapping
	{
		[JsonPropertyName("order")]
		public int Order
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermQuery : QueryBase
	{
	}

	public class TermSuggestOption
	{
		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("freq")]
		public long Freq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score")]
		public double Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermSuggester : SuggesterBase
	{
		[JsonPropertyName("lowercase_terms")]
		public bool? LowercaseTerms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_edits")]
		public int? MaxEdits
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_inspections")]
		public int? MaxInspections
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_size")]
		public int? ShardSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public SuggestSort? Sort
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("string_distance")]
		public StringDistance? StringDistance
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("suggest_mode")]
		public SuggestMode? SuggestMode
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string? Text
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermUserPrivileges
	{
		[JsonPropertyName("apps")]
		public bool Apps
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermVector
	{
	}

	public class TermVectorFilter
	{
		[JsonPropertyName("max_doc_freq")]
		public int? MaxDocFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_num_terms")]
		public int? MaxNumTerms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_term_freq")]
		public int? MaxTermFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_word_length")]
		public int? MaxWordLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_doc_freq")]
		public int? MinDocFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_term_freq")]
		public int? MinTermFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermVectorTerm
	{
		[JsonPropertyName("doc_freq")]
		public int? DocFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score")]
		public double? Score
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_freq")]
		public int TermFreq
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ttf")]
		public int? Ttf
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermVectorsResult
	{
		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("took")]
		public long Took
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermsInclude
	{
		[JsonPropertyName("num_partitions")]
		public long NumPartitions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("partition")]
		public long Partition
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermsQuery : QueryBase
	{
		[JsonPropertyName("path")]
		public string? Path
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TermsRollupGrouping
	{
	}

	public class TermsSetQuery : QueryBase
	{
	}

	public class TestPopulation
	{
	}

	public class TextIndexPrefixes
	{
		[JsonPropertyName("max_chars")]
		public int MaxChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_chars")]
		public int MinChars
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TextProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public bool? Fielddata
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ThreadCountStats
	{
		[JsonPropertyName("active")]
		public long Active
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("completed")]
		public long Completed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("largest")]
		public long Largest
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("queue")]
		public long Queue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rejected")]
		public long Rejected
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("threads")]
		public long Threads
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ThreadStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("peak_count")]
		public long PeakCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ThreeDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("z")]
		public double? z
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ThrottleState
	{
		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TimeOfDay
	{
	}

	public class TimeOfMonth
	{
	}

	public class TimeOfWeek
	{
	}

	public class TimeOfYear
	{
	}

	public class TimingStats
	{
		[JsonPropertyName("average_bucket_processing_time_ms")]
		public double AverageBucketProcessingTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bucket_count")]
		public long BucketCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_average_bucket_processing_time_ms")]
		public double ExponentialAverageBucketProcessingTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_average_bucket_processing_time_per_hour_ms")]
		public double ExponentialAverageBucketProcessingTimePerHourMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("job_id")]
		public string JobId
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("maximum_bucket_processing_time_ms")]
		public double MaximumBucketProcessingTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("minimum_bucket_processing_time_ms")]
		public double MinimumBucketProcessingTimeMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Token
	{
		[JsonPropertyName("end_offset")]
		public int? EndOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("payload")]
		public string? Payload
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public int Position
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_offset")]
		public int? StartOffset
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TokenCountProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TokenDetail
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TokenFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TokenizerBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TopHit
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TopMetrics
	{
	}

	public class TopMetricsValue
	{
	}

	public class TotalFileSystemStats
	{
		[JsonPropertyName("available")]
		public string Available
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_in_bytes")]
		public long AvailableInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free")]
		public string Free
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public string Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TotalHits
	{
		[JsonPropertyName("relation")]
		public TotalHitsRelation Relation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public long Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Transform
	{
	}

	public class TransformCheckpointStats
	{
		[JsonPropertyName("checkpoint")]
		public long Checkpoint
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateTimeOffset? Timestamp
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_upper_bound")]
		public DateTimeOffset? TimeUpperBound
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransformCheckpointingInfo
	{
		[JsonPropertyName("changes_last_detected_at")]
		public long ChangesLastDetectedAt
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("changes_last_detected_at_date_time")]
		public DateTimeOffset? ChangesLastDetectedAtDateTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operations_behind")]
		public long? OperationsBehind
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransformContainer
	{
	}

	public class TransformDestination
	{
		[JsonPropertyName("pipeline")]
		public string? Pipeline { get; set; }
	}

	public class TransformIndexerStats
	{
		[JsonPropertyName("documents_indexed")]
		public long DocumentsIndexed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("documents_processed")]
		public long DocumentsProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_avg_checkpoint_duration_ms")]
		public double ExponentialAvgCheckpointDurationMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_avg_documents_indexed")]
		public double ExponentialAvgDocumentsIndexed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("exponential_avg_documents_processed")]
		public double ExponentialAvgDocumentsProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_failures")]
		public long IndexFailures
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_time_in_ms")]
		public long IndexTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_total")]
		public long IndexTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pages_processed")]
		public long PagesProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processing_time_in_ms")]
		public long ProcessingTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processing_total")]
		public long ProcessingTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_failures")]
		public long SearchFailures
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_time_in_ms")]
		public long SearchTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_total")]
		public long SearchTotal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trigger_count")]
		public long TriggerCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransformPivot
	{
		[JsonPropertyName("max_page_search_size")]
		public int? MaxPageSearchSize { get; set; }
	}

	public class TransformProgress
	{
		[JsonPropertyName("docs_indexed")]
		public long DocsIndexed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("docs_processed")]
		public long DocsProcessed
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("docs_remaining")]
		public long DocsRemaining
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("percent_complete")]
		public double PercentComplete
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_docs")]
		public long TotalDocs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransformSource
	{
	}

	public class TransformStats
	{
		[JsonPropertyName("reason")]
		public string? Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransformSyncContainer
	{
	}

	public class TransformTimeSync
	{
	}

	public class TransientMetadata
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public class TranslogStats
	{
		[JsonPropertyName("earliest_last_modified_age")]
		public long EarliestLastModifiedAge
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("operations")]
		public long Operations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public string? Size
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uncommitted_operations")]
		public int UncommittedOperations
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uncommitted_size")]
		public string? UncommittedSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uncommitted_size_in_bytes")]
		public long UncommittedSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TransportStats
	{
		[JsonPropertyName("rx_count")]
		public long RxCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rx_size")]
		public string RxSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rx_size_in_bytes")]
		public long RxSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("server_open")]
		public int ServerOpen
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tx_count")]
		public long TxCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tx_size")]
		public string TxSize
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tx_size_in_bytes")]
		public long TxSizeInBytes
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TriggerContainer
	{
	}

	public class TriggerEventContainer
	{
	}

	public class TriggerEventResult
	{
		[JsonPropertyName("triggered_time")]
		public DateTimeOffset TriggeredTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TrimProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TrimTokenFilter : TokenFilterBase
	{
	}

	public class TruncateTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("length")]
		public int Length
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TwoDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class TypeFieldMappings
	{
	}

	public class TypeMapping
	{
		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }
	}

	public class TypeQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public class UaxEmailUrlTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UnassignedInformation
	{
		[JsonPropertyName("at")]
		public DateTimeOffset At
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_allocation_status")]
		public string LastAllocationStatus
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public UnassignedInformationReason Reason
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public string? Details
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_allocation_attempts")]
		public int? FailedAllocationAttempts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UniqueTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("only_on_same_position")]
		public bool OnlyOnSamePosition
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UppercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UppercaseTokenFilter : TokenFilterBase
	{
	}

	public class UrlDecodeProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UsageCount
	{
		[JsonPropertyName("active")]
		public long Active
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UserAgentProcessor : ProcessorBase
	{
		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex_file")]
		public string RegexFile
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UserIndicesPrivileges
	{
		[JsonPropertyName("allow_restricted_indices")]
		public bool AllowRestrictedIndices
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class UserRealm
	{
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class ValidationExplanation
	{
		[JsonPropertyName("error")]
		public string Error
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public string Index
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("valid")]
		public bool Valid
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class VectorUsage : XPackUsage
	{
		[JsonPropertyName("dense_vector_dims_avg_count")]
		public int DenseVectorDimsAvgCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dense_vector_fields_count")]
		public int DenseVectorFieldsCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sparse_vector_fields_count")]
		public int? SparseVectorFieldsCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class VersionProperty : DocValuesPropertyBase
	{
	}

	public class WarmerStats
	{
		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time")]
		public string? TotalTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class Watch
	{
		[JsonPropertyName("throttle_period")]
		public string? ThrottlePeriod { get; set; }
	}

	public class WatchRecordQueuedStats
	{
		[JsonPropertyName("execution_time")]
		public DateTimeOffset ExecutionTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WatchRecordStats : WatchRecordQueuedStats
	{
		[JsonPropertyName("execution_phase")]
		public ExecutionPhase ExecutionPhase
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("triggered_time")]
		public DateTimeOffset TriggeredTime
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WatchStatus
	{
		[JsonPropertyName("last_checked")]
		public DateTimeOffset? LastChecked { get; set; }

		[JsonPropertyName("last_met_condition")]
		public DateTimeOffset? LastMetCondition { get; set; }

		[JsonPropertyName("execution_state")]
		public string? ExecutionState { get; set; }
	}

	public class WatcherActionTotalsUsage
	{
		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_time_in_ms")]
		public long TotalTimeInMs
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WatcherActionsUsage
	{
	}

	public class WatcherNodeStats
	{
		[JsonPropertyName("watch_count")]
		public long WatchCount
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("watcher_state")]
		public WatcherState WatcherState
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WatcherUsage : XPackUsage
	{
	}

	public class WatcherWatchTriggerScheduleUsage : UsageCount
	{
	}

	public class WatcherWatchTriggerUsage
	{
	}

	public class WatcherWatchUsage
	{
	}

	public class WebhookActionResult
	{
	}

	public class WeightedAverageValue
	{
		[JsonPropertyName("missing")]
		public double? Missing
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WhitespaceTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WildcardProperty : DocValuesPropertyBase
	{
	}

	public class WildcardQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WordDelimiterGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("adjust_offsets")]
		public bool AdjustOffsets
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class WordDelimiterTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class XPackBuildInformation
	{
		[JsonPropertyName("date")]
		public DateTimeOffset Date
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hash")]
		public string Hash
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class XPackFeature
	{
		[JsonPropertyName("available")]
		public bool Available
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class XPackFeatures
	{
	}

	public class XPackRole
	{
	}

	public class XPackRoleMapping
	{
		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class XPackUsage
	{
		[JsonPropertyName("available")]
		public bool Available
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class XPackUser
	{
		[JsonPropertyName("email")]
		public string? Email
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("full_name")]
		public string? FullName
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("username")]
		public string Username
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enabled")]
		public bool Enabled
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class CommonCatQueryParameters
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("help")]
		public bool? Help
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("local")]
		public bool? Local
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("v")]
		public bool? v
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}

	public class AdditionalProperties<TKey, TValue>
	{
	}

	public class CommonQueryParameters
	{
		[JsonPropertyName("error_trace")]
		public bool? ErrorTrace
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("human")]
		public bool? Human
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretty")]
		public bool? Pretty
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_query_string")]
		public string? SourceQueryString
		{
			get;
#if NET5_0
            init;
#else
			internal set;
#endif
		}
	}
}