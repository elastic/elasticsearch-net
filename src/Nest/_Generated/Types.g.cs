// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest
{
	public partial class Explanation
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail> Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExplanationDetail
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail>? Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PainlessExecutionPosition
	{
		[JsonPropertyName("end")]
		public int End
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start")]
		public int Start
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AggregationBreakdown
	{
		[JsonPropertyName("build_aggregation")]
		public long BuildAggregation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_aggregation_count")]
		public long BuildAggregationCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_leaf_collector")]
		public long BuildLeafCollector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_leaf_collector_count")]
		public long BuildLeafCollectorCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collect")]
		public long Collect
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("collect_count")]
		public long CollectCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initialize")]
		public long Initialize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initialize_count")]
		public long InitializeCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_collection")]
		public long? PostCollection
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("post_collection_count")]
		public long? PostCollectionCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reduce")]
		public long Reduce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reduce_count")]
		public long ReduceCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AggregationProfile
	{
		[JsonPropertyName("breakdown")]
		public AggregationBreakdown Breakdown
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("children")]
		public IReadOnlyCollection<AggregationProfileDebug>? Children
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("debug")]
		public AggregationProfileDebug? Debug
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AggregationProfileDebug
	{
	}

	public partial class Collector
	{
		[JsonPropertyName("children")]
		public IReadOnlyCollection<Collector>? Children
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompletionSuggester : SuggesterBase
	{
		[JsonPropertyName("contexts")]
		public Dictionary<string, OneOf<string, IReadOnlyCollection<string>, GeoLocation, IReadOnlyCollection<SuggestContextQuery>>>? Contexts { get; set; }

		[JsonPropertyName("fuzzy")]
		public SuggestFuzziness? Fuzzy { get; set; }

		[JsonPropertyName("prefix")]
		public string? Prefix { get; set; }

		[JsonPropertyName("regex")]
		public string? Regex { get; set; }

		[JsonPropertyName("skip_duplicates")]
		public bool? SkipDuplicates { get; set; }
	}

	public partial class DirectGenerator
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("max_edits")]
		public int? MaxEdits { get; set; }

		[JsonPropertyName("max_inspections")]
		public float? MaxInspections { get; set; }

		[JsonPropertyName("max_term_freq")]
		public float? MaxTermFreq { get; set; }

		[JsonPropertyName("min_doc_freq")]
		public float? MinDocFreq { get; set; }

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength { get; set; }

		[JsonPropertyName("post_filter")]
		public string? PostFilter { get; set; }

		[JsonPropertyName("pre_filter")]
		public string? PreFilter { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("suggest_mode")]
		public SuggestMode? SuggestMode { get; set; }
	}

	public partial class FieldAndFormat
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("include_unmapped")]
		public bool? IncludeUnmapped { get; set; }
	}

	public partial class FieldCollapse
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("inner_hits")]
		public Union<InnerHits, IReadOnlyCollection<InnerHits>>? InnerHits { get; set; }

		[JsonPropertyName("max_concurrent_group_searches")]
		public int? MaxConcurrentGroupSearches { get; set; }
	}

	public partial class GeoDistanceSort
	{
		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unit")]
		public DistanceUnit? Unit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Highlight
	{
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonPropertyName("boundary_scanner")]
		public BoundaryScanner? BoundaryScanner { get; set; }

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonPropertyName("encoder")]
		public HighlighterEncoder? Encoder { get; set; }

		[JsonPropertyName("fields")]
		public Dictionary<Field, HighlightField> Fields { get; set; }

		[JsonPropertyName("fragmenter")]
		public HighlighterFragmenter? Fragmenter { get; set; }

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonPropertyName("highlight_query")]
		public QueryContainer? HighlightQuery { get; set; }

		[JsonPropertyName("max_analyzed_offset")]
		public Union<string, int>? MaxAnalyzedOffset { get; set; }

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonPropertyName("order")]
		public HighlighterOrder? Order { get; set; }

		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonPropertyName("tags_schema")]
		public HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonPropertyName("type")]
		public HighlighterType? Type { get; set; }
	}

	public partial class HighlightField
	{
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonPropertyName("boundary_scanner")]
		public BoundaryScanner? BoundaryScanner { get; set; }

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("force_source")]
		public bool? ForceSource { get; set; }

		[JsonPropertyName("fragmenter")]
		public HighlighterFragmenter? Fragmenter { get; set; }

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonPropertyName("highlight_query")]
		public QueryContainer? HighlightQuery { get; set; }

		[JsonPropertyName("matched_fields")]
		public Fields? MatchedFields { get; set; }

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonPropertyName("order")]
		public HighlighterOrder? Order { get; set; }

		[JsonPropertyName("phrase_limit")]
		public int? PhraseLimit { get; set; }

		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonPropertyName("tags_schema")]
		public HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonPropertyName("type")]
		public Union<HighlighterType, string>? Type { get; set; }
	}

	public partial class Hit<TDocument>
	{
		[JsonPropertyName("_explanation")]
		public Explanation? Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlight")]
		public Dictionary<string, IReadOnlyCollection<string>>? Highlight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_ignored")]
		public IReadOnlyCollection<string>? Ignored
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inner_hits")]
		public Dictionary<string, InnerHitsResult>? InnerHits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matched_queries")]
		public IReadOnlyCollection<string>? MatchedQueries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_routing")]
		public string? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public double? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public SequenceNumber? SeqNo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_shard")]
		public string? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public SortResults? Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_source")]
		public TDocument? Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public DocType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HitsMetadata<T>
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<T>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHits
	{
		[JsonPropertyName("collapse")]
		public FieldCollapse? Collapse { get; set; }

		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<FieldAndFormat>? DocvalueFields { get; set; }

		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonPropertyName("fields")]
		public Fields? Fields { get; set; }

		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonPropertyName("highlight")]
		public Highlight? Highlight { get; set; }

		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("name")]
		public Name? Name { get; set; }

		[JsonPropertyName("script_fields")]
		public Dictionary<Field, ScriptField>? ScriptFields { get; set; }

		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }

		[JsonPropertyName("_source")]
		public Union<bool, SourceFilter>? Source { get; set; }

		[JsonPropertyName("stored_field")]
		public Fields? StoredField { get; set; }

		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public partial class InnerHitsMetadata
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<Dictionary<string, object>>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHitsResult
	{
		[JsonPropertyName("hits")]
		public InnerHitsMetadata Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LaplaceSmoothingModel
	{
		[JsonPropertyName("alpha")]
		public double Alpha { get; set; }
	}

	public partial class LinearInterpolationSmoothingModel
	{
		[JsonPropertyName("bigram_lambda")]
		public double BigramLambda { get; set; }

		[JsonPropertyName("trigram_lambda")]
		public double TrigramLambda { get; set; }

		[JsonPropertyName("unigram_lambda")]
		public double UnigramLambda { get; set; }
	}

	public partial class NestedIdentity
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PhraseSuggestCollate
	{
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonPropertyName("prune")]
		public bool? Prune { get; set; }

		[JsonPropertyName("query")]
		public PhraseSuggestCollateQuery Query { get; set; }
	}

	public partial class PhraseSuggestCollateQuery
	{
		[JsonPropertyName("id")]
		public Id? Id { get; set; }

		[JsonPropertyName("source")]
		public string? Source { get; set; }
	}

	public partial class PhraseSuggestHighlight
	{
		[JsonPropertyName("post_tag")]
		public string PostTag { get; set; }

		[JsonPropertyName("pre_tag")]
		public string PreTag { get; set; }
	}

	public partial class PhraseSuggester : SuggesterBase
	{
		[JsonPropertyName("collate")]
		public PhraseSuggestCollate? Collate { get; set; }

		[JsonPropertyName("confidence")]
		public double? Confidence { get; set; }

		[JsonPropertyName("direct_generator")]
		public IEnumerable<DirectGenerator>? DirectGenerator { get; set; }

		[JsonPropertyName("force_unigrams")]
		public bool? ForceUnigrams { get; set; }

		[JsonPropertyName("gram_size")]
		public int? GramSize { get; set; }

		[JsonPropertyName("highlight")]
		public PhraseSuggestHighlight? Highlight { get; set; }

		[JsonPropertyName("max_errors")]
		public double? MaxErrors { get; set; }

		[JsonPropertyName("real_word_error_likelihood")]
		public double? RealWordErrorLikelihood { get; set; }

		[JsonPropertyName("separator")]
		public string? Separator { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("smoothing")]
		public SmoothingModelContainer? Smoothing { get; set; }

		[JsonPropertyName("text")]
		public string? Text { get; set; }

		[JsonPropertyName("token_limit")]
		public int? TokenLimit { get; set; }
	}

	public partial class PointInTimeReference
	{
		[JsonPropertyName("id")]
		public Id Id { get; set; }

		[JsonPropertyName("keep_alive")]
		public Time? KeepAlive { get; set; }
	}

	public partial class Profile
	{
		[JsonPropertyName("shards")]
		public IReadOnlyCollection<ShardProfile> Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class QueryBreakdown
	{
		[JsonPropertyName("advance")]
		public long Advance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("advance_count")]
		public long AdvanceCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_scorer")]
		public long BuildScorer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("build_scorer_count")]
		public long BuildScorerCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compute_max_score")]
		public long ComputeMaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("compute_max_score_count")]
		public long ComputeMaxScoreCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("create_weight")]
		public long CreateWeight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("create_weight_count")]
		public long CreateWeightCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match")]
		public long Match
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("match_count")]
		public long MatchCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_doc")]
		public long NextDoc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("next_doc_count")]
		public long NextDocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score")]
		public long Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("score_count")]
		public long ScoreCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_min_competitive_score")]
		public long SetMinCompetitiveScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_min_competitive_score_count")]
		public long SetMinCompetitiveScoreCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shallow_advance")]
		public long ShallowAdvance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shallow_advance_count")]
		public long ShallowAdvanceCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class QueryProfile
	{
		[JsonPropertyName("breakdown")]
		public QueryBreakdown Breakdown
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("children")]
		public IReadOnlyCollection<QueryProfile>? Children
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Rescore
	{
		[JsonPropertyName("query")]
		public RescoreQuery Query { get; set; }

		[JsonPropertyName("window_size")]
		public int? WindowSize { get; set; }
	}

	public partial class RescoreQuery
	{
		[JsonPropertyName("rescore_query")]
		public QueryContainer Query { get; set; }

		[JsonPropertyName("query_weight")]
		public double? QueryWeight { get; set; }

		[JsonPropertyName("rescore_query_weight")]
		public double? RescoreQueryWeight { get; set; }

		[JsonPropertyName("score_mode")]
		public ScoreMode? ScoreMode { get; set; }
	}

	public partial class ScoreSort
	{
		[JsonPropertyName("mode")]
		public SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptSort
	{
		[JsonPropertyName("order")]
		public SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SearchProfile
	{
		[JsonPropertyName("collector")]
		public IReadOnlyCollection<Collector> Collector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query")]
		public IReadOnlyCollection<QueryProfile> Query
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rewrite_time")]
		public long RewriteTime
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardProfile
	{
		[JsonPropertyName("aggregations")]
		public IReadOnlyCollection<AggregationProfile> Aggregations
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("searches")]
		public IReadOnlyCollection<SearchProfile> Searches
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SmoothingModelContainer
	{
		[JsonPropertyName("laplace")]
		public LaplaceSmoothingModel? Laplace { get; set; }

		[JsonPropertyName("linear_interpolation")]
		public LinearInterpolationSmoothingModel? LinearInterpolation { get; set; }

		[JsonPropertyName("stupid_backoff")]
		public StupidBackoffSmoothingModel? StupidBackoff { get; set; }
	}

	public partial class SortContainer
	{
		[JsonPropertyName("_doc")]
		public ScoreSort? Doc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_geo_distance")]
		public GeoDistanceSort? GeoDistance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public ScoreSort? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_script")]
		public ScriptSort? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SourceFilter
	{
		[JsonPropertyName("exclude")]
		public Fields? Exclude { get; set; }

		[JsonPropertyName("excludes")]
		public Fields? Excludes { get; set; }

		[JsonPropertyName("include")]
		public Fields? Include { get; set; }

		[JsonPropertyName("includes")]
		public Fields? Includes { get; set; }
	}

	public partial class StupidBackoffSmoothingModel
	{
		[JsonPropertyName("discount")]
		public double Discount { get; set; }
	}

	public partial class Suggest<T>
	{
		[JsonPropertyName("length")]
		public int Length
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("options")]
		public IReadOnlyCollection<SuggestOption<T>> Options
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("text")]
		public string Text
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SuggestContainer
	{
		[JsonPropertyName("completion")]
		public CompletionSuggester? Completion { get; set; }

		[JsonPropertyName("phrase")]
		public PhraseSuggester? Phrase { get; set; }

		[JsonPropertyName("prefix")]
		public string? Prefix { get; set; }

		[JsonPropertyName("regex")]
		public string? Regex { get; set; }

		[JsonPropertyName("term")]
		public TermSuggester? Term { get; set; }

		[JsonPropertyName("text")]
		public string? Text { get; set; }
	}

	public partial class SuggestContextQuery
	{
		[JsonPropertyName("boost")]
		public double? Boost { get; set; }

		[JsonPropertyName("context")]
		public Context Context { get; set; }

		[JsonPropertyName("neighbours")]
		public Union<IReadOnlyCollection<Distance>, IReadOnlyCollection<int>>? Neighbours { get; set; }

		[JsonPropertyName("precision")]
		public Union<Distance, int>? Precision { get; set; }

		[JsonPropertyName("prefix")]
		public bool? Prefix { get; set; }
	}

	public partial class SuggestFuzziness
	{
		[JsonPropertyName("fuzziness")]
		public Fuzziness Fuzziness { get; set; }

		[JsonPropertyName("min_length")]
		public int MinLength { get; set; }

		[JsonPropertyName("prefix_length")]
		public int PrefixLength { get; set; }

		[JsonPropertyName("transpositions")]
		public bool Transpositions { get; set; }

		[JsonPropertyName("unicode_aware")]
		public bool UnicodeAware { get; set; }
	}

	public partial class SuggesterBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public partial class TermSuggester : SuggesterBase
	{
		[JsonPropertyName("lowercase_terms")]
		public bool? LowercaseTerms { get; set; }

		[JsonPropertyName("max_edits")]
		public int? MaxEdits { get; set; }

		[JsonPropertyName("max_inspections")]
		public int? MaxInspections { get; set; }

		[JsonPropertyName("max_term_freq")]
		public float? MaxTermFreq { get; set; }

		[JsonPropertyName("min_doc_freq")]
		public float? MinDocFreq { get; set; }

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("sort")]
		public SuggestSort? Sort { get; set; }

		[JsonPropertyName("string_distance")]
		public StringDistance? StringDistance { get; set; }

		[JsonPropertyName("suggest_mode")]
		public SuggestMode? SuggestMode { get; set; }

		[JsonPropertyName("text")]
		public string? Text { get; set; }
	}

	public partial class TotalHits
	{
		[JsonPropertyName("relation")]
		public TotalHitsRelation Relation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public long Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStatistics
	{
		[JsonPropertyName("skipped")]
		public int Skipped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public int Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompletionStats
	{
		[JsonPropertyName("fields")]
		public Dictionary<Field, FieldSizeUsage>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateField
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("include_unmapped")]
		public bool? IncludeUnmapped { get; set; }
	}

	public partial class DocStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EmptyObject
	{
	}

	public partial class ErrorCause
	{
		[JsonPropertyName("bytes_limit")]
		public long? BytesLimit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes_wanted")]
		public long? BytesWanted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("caused_by")]
		public ErrorCause? CausedBy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("col")]
		public int? Col
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("column")]
		public int? Column
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_shards")]
		public IReadOnlyCollection<ShardFailure>? FailedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grouped")]
		public bool? Grouped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("header")]
		public HttpHeaders? Header
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_uuid")]
		public Uuid? IndexUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("language")]
		public string? Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed_expired_feature")]
		public string? LicensedExpiredFeature
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("line")]
		public int? Line
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_buckets")]
		public int? MaxBuckets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase")]
		public string? Phase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public PainlessExecutionPosition? Position
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_type")]
		public string? ProcessorType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("property_name")]
		public string? PropertyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_id")]
		public Ids? ResourceId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_type")]
		public string? ResourceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("root_cause")]
		public IReadOnlyCollection<ErrorCause>? RootCause
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public string? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script_stack")]
		public IReadOnlyCollection<string>? ScriptStack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public Union<int, string>? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stack_trace")]
		public string? StackTrace
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldMemoryUsage
	{
		[JsonPropertyName("memory_size")]
		public ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldSizeUsage
	{
		[JsonPropertyName("size")]
		public ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FielddataStats
	{
		[JsonPropertyName("evictions")]
		public long? Evictions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Dictionary<Field, FieldMemoryUsage>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size")]
		public ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexedScript : ScriptBase
	{
		[JsonPropertyName("id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineScript : ScriptBase
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LatLon
	{
		[JsonPropertyName("lat")]
		public double Lat { get; set; }

		[JsonPropertyName("lon")]
		public double Lon { get; set; }
	}

	public partial class NodeAttributes
	{
		[JsonPropertyName("attributes")]
		public Dictionary<string, string> Attributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ephemeral_id")]
		public Id EphemeralId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Id? Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public NodeName Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("roles")]
		public NodeRoles? Roles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeShard
	{
		[JsonPropertyName("allocation_id")]
		public Dictionary<string, Id>? AllocationId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public NodeName? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("recovery_source")]
		public Dictionary<string, Id>? RecoverySource
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public ShardRoutingState State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_info")]
		public UnassignedInformation? UnassignedInfo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeStatistics
	{
		[JsonPropertyName("failed")]
		public int Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failures")]
		public IReadOnlyCollection<ErrorCause>? Failures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public int Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PluginStats
	{
		[JsonPropertyName("classname")]
		public string Classname
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("elasticsearch_version")]
		public VersionString ElasticsearchVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("extended_plugins")]
		public IReadOnlyCollection<string> ExtendedPlugins
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("has_native_controller")]
		public bool HasNativeController
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("java_version")]
		public VersionString JavaVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed")]
		public bool Licensed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class QueryCacheStats
	{
		[JsonPropertyName("cache_count")]
		public int CacheCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size")]
		public int CacheSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("evictions")]
		public int Evictions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public int HitCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size")]
		public ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public int MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public int MissCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_count")]
		public int TotalCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptBase
	{
		[JsonPropertyName("lang")]
		public ScriptLanguage? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptField
	{
		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure { get; set; }

		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class SegmentsStats
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory")]
		public ByteSize? DocValuesMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory_in_bytes")]
		public int DocValuesMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("file_sizes")]
		public Dictionary<string, ShardFileSizeInfo> FileSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set")]
		public ByteSize? FixedBitSet
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public int FixedBitSetMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_max_memory_in_bytes")]
		public int? IndexWriterMaxMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory")]
		public ByteSize? IndexWriterMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory_in_bytes")]
		public int IndexWriterMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public int MaxUnsafeAutoIdTimestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory")]
		public ByteSize? Memory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_in_bytes")]
		public int MemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory")]
		public ByteSize? NormsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory_in_bytes")]
		public int NormsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory")]
		public ByteSize? PointsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory_in_bytes")]
		public int PointsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public int StoredFieldsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_memory")]
		public ByteSize? StoredMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory")]
		public ByteSize? TermsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory_in_bytes")]
		public int TermsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public int TermVectorsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectory_memory")]
		public ByteSize? TermVectoryMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory")]
		public ByteSize? VersionMapMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory_in_bytes")]
		public int VersionMapMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardFailure
	{
		[JsonPropertyName("index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public ErrorCause Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public string? Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardStatistics
	{
		[JsonPropertyName("failed")]
		public uint Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failures")]
		public IReadOnlyCollection<ShardFailure>? Failures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skipped")]
		public uint? Skipped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public uint Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public uint Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SlicedScroll
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("id")]
		public int Id { get; set; }

		[JsonPropertyName("max")]
		public int Max { get; set; }
	}

	public partial class StoreStats
	{
		[JsonPropertyName("reserved")]
		public ByteSize? Reserved
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reserved_in_bytes")]
		public int ReservedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public int SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_data_set_size")]
		public ByteSize? TotalDataSetSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_data_set_size_in_bytes")]
		public int? TotalDataSetSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AdjacencyMatrixAggregation : BucketAggregationBase
	{
		[JsonPropertyName("filters")]
		public Dictionary<string, QueryContainer>? Filters { get; set; }
	}

	public partial class AggregateBase
	{
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Aggregation
	{
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonPropertyName("name")]
		public string? Name { get; set; }
	}

	public partial class AggregationContainer
	{
		[JsonPropertyName("adjacency_matrix")]
		public AdjacencyMatrixAggregation? AdjacencyMatrix { get; set; }

		[JsonPropertyName("aggregations")]
		public Dictionary<string, AggregationContainer>? Aggregations { get; set; }

		[JsonPropertyName("aggs")]
		public Dictionary<string, AggregationContainer>? Aggs { get; set; }

		[JsonPropertyName("auto_date_histogram")]
		public AutoDateHistogramAggregation? AutoDateHistogram { get; set; }

		[JsonPropertyName("avg")]
		public AverageAggregation? Avg { get; set; }

		[JsonPropertyName("avg_bucket")]
		public AverageBucketAggregation? AvgBucket { get; set; }

		[JsonPropertyName("boxplot")]
		public BoxplotAggregation? Boxplot { get; set; }

		[JsonPropertyName("bucket_script")]
		public BucketScriptAggregation? BucketScript { get; set; }

		[JsonPropertyName("bucket_selector")]
		public BucketSelectorAggregation? BucketSelector { get; set; }

		[JsonPropertyName("bucket_sort")]
		public BucketSortAggregation? BucketSort { get; set; }

		[JsonPropertyName("cardinality")]
		public CardinalityAggregation? Cardinality { get; set; }

		[JsonPropertyName("children")]
		public ChildrenAggregation? Children { get; set; }

		[JsonPropertyName("composite")]
		public CompositeAggregation? Composite { get; set; }

		[JsonPropertyName("cumulative_cardinality")]
		public CumulativeCardinalityAggregation? CumulativeCardinality { get; set; }

		[JsonPropertyName("cumulative_sum")]
		public CumulativeSumAggregation? CumulativeSum { get; set; }

		[JsonPropertyName("date_histogram")]
		public DateHistogramAggregation? DateHistogram { get; set; }

		[JsonPropertyName("date_range")]
		public DateRangeAggregation? DateRange { get; set; }

		[JsonPropertyName("derivative")]
		public DerivativeAggregation? Derivative { get; set; }

		[JsonPropertyName("diversified_sampler")]
		public DiversifiedSamplerAggregation? DiversifiedSampler { get; set; }

		[JsonPropertyName("extended_stats")]
		public ExtendedStatsAggregation? ExtendedStats { get; set; }

		[JsonPropertyName("extended_stats_bucket")]
		public ExtendedStatsBucketAggregation? ExtendedStatsBucket { get; set; }

		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("filters")]
		public FiltersAggregation? Filters { get; set; }

		[JsonPropertyName("geo_bounds")]
		public GeoBoundsAggregation? GeoBounds { get; set; }

		[JsonPropertyName("geo_centroid")]
		public GeoCentroidAggregation? GeoCentroid { get; set; }

		[JsonPropertyName("geo_distance")]
		public GeoDistanceAggregation? GeoDistance { get; set; }

		[JsonPropertyName("geohash_grid")]
		public GeoHashGridAggregation? GeohashGrid { get; set; }

		[JsonPropertyName("geo_line")]
		public GeoLineAggregation? GeoLine { get; set; }

		[JsonPropertyName("geotile_grid")]
		public GeoTileGridAggregation? GeotileGrid { get; set; }

		[JsonPropertyName("global")]
		public GlobalAggregation? Global { get; set; }

		[JsonPropertyName("histogram")]
		public HistogramAggregation? Histogram { get; set; }

		[JsonPropertyName("inference")]
		public InferenceAggregation? Inference { get; set; }

		[JsonPropertyName("ip_range")]
		public IpRangeAggregation? IpRange { get; set; }

		[JsonPropertyName("line")]
		public GeoLineAggregation? Line { get; set; }

		[JsonPropertyName("matrix_stats")]
		public MatrixStatsAggregation? MatrixStats { get; set; }

		[JsonPropertyName("max")]
		public MaxAggregation? Max { get; set; }

		[JsonPropertyName("max_bucket")]
		public MaxBucketAggregation? MaxBucket { get; set; }

		[JsonPropertyName("median_absolute_deviation")]
		public MedianAbsoluteDeviationAggregation? MedianAbsoluteDeviation { get; set; }

		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonPropertyName("min")]
		public MinAggregation? Min { get; set; }

		[JsonPropertyName("min_bucket")]
		public MinBucketAggregation? MinBucket { get; set; }

		[JsonPropertyName("missing")]
		public MissingAggregation? Missing { get; set; }

		[JsonPropertyName("moving_avg")]
		public MovingAverageAggregation? MovingAvg { get; set; }

		[JsonPropertyName("moving_fn")]
		public MovingFunctionAggregation? MovingFn { get; set; }

		[JsonPropertyName("moving_percentiles")]
		public MovingPercentilesAggregation? MovingPercentiles { get; set; }

		[JsonPropertyName("multi_terms")]
		public MultiTermsAggregation? MultiTerms { get; set; }

		[JsonPropertyName("nested")]
		public NestedAggregation? Nested { get; set; }

		[JsonPropertyName("normalize")]
		public NormalizeAggregation? Normalize { get; set; }

		[JsonPropertyName("parent")]
		public ParentAggregation? Parent { get; set; }

		[JsonPropertyName("percentile_ranks")]
		public PercentileRanksAggregation? PercentileRanks { get; set; }

		[JsonPropertyName("percentiles")]
		public PercentilesAggregation? Percentiles { get; set; }

		[JsonPropertyName("percentiles_bucket")]
		public PercentilesBucketAggregation? PercentilesBucket { get; set; }

		[JsonPropertyName("range")]
		public RangeAggregation? Range { get; set; }

		[JsonPropertyName("rare_terms")]
		public RareTermsAggregation? RareTerms { get; set; }

		[JsonPropertyName("rate")]
		public RateAggregation? Rate { get; set; }

		[JsonPropertyName("reverse_nested")]
		public ReverseNestedAggregation? ReverseNested { get; set; }

		[JsonPropertyName("sampler")]
		public SamplerAggregation? Sampler { get; set; }

		[JsonPropertyName("scripted_metric")]
		public ScriptedMetricAggregation? ScriptedMetric { get; set; }

		[JsonPropertyName("serial_diff")]
		public SerialDifferencingAggregation? SerialDiff { get; set; }

		[JsonPropertyName("significant_terms")]
		public SignificantTermsAggregation? SignificantTerms { get; set; }

		[JsonPropertyName("significant_text")]
		public SignificantTextAggregation? SignificantText { get; set; }

		[JsonPropertyName("stats")]
		public StatsAggregation? Stats { get; set; }

		[JsonPropertyName("stats_bucket")]
		public StatsBucketAggregation? StatsBucket { get; set; }

		[JsonPropertyName("string_stats")]
		public StringStatsAggregation? StringStats { get; set; }

		[JsonPropertyName("sum")]
		public SumAggregation? Sum { get; set; }

		[JsonPropertyName("sum_bucket")]
		public SumBucketAggregation? SumBucket { get; set; }

		[JsonPropertyName("terms")]
		public TermsAggregation? Terms { get; set; }

		[JsonPropertyName("top_hits")]
		public TopHitsAggregation? TopHits { get; set; }

		[JsonPropertyName("top_metrics")]
		public TopMetricsAggregation? TopMetrics { get; set; }

		[JsonPropertyName("t_test")]
		public TTestAggregation? TTest { get; set; }

		[JsonPropertyName("value_count")]
		public ValueCountAggregation? ValueCount { get; set; }

		[JsonPropertyName("variable_width_histogram")]
		public VariableWidthHistogramAggregation? VariableWidthHistogram { get; set; }

		[JsonPropertyName("weighted_avg")]
		public WeightedAverageAggregation? WeightedAvg { get; set; }
	}

	public partial class AggregationRange
	{
		[JsonPropertyName("from")]
		public Union<double, string>? From { get; set; }

		[JsonPropertyName("key")]
		public string? Key { get; set; }

		[JsonPropertyName("to")]
		public Union<double, string>? To { get; set; }
	}

	public partial class AutoDateHistogramAggregation : BucketAggregationBase
	{
		[JsonPropertyName("buckets")]
		public int? Buckets { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("minimum_interval")]
		public MinimumInterval? MinimumInterval { get; set; }

		[JsonPropertyName("missing")]
		public DateString? Missing { get; set; }

		[JsonPropertyName("offset")]
		public string? Offset { get; set; }

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }
	}

	public partial class AverageAggregation : FormatMetricAggregationBase
	{
	}

	public partial class AverageBucketAggregation : PipelineAggregationBase
	{
	}

	public partial class BoxPlotAggregate : AggregateBase
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q1")]
		public double Q1
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q2")]
		public double Q2
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("q3")]
		public double Q3
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BoxplotAggregation : MetricAggregationBase
	{
		[JsonPropertyName("compression")]
		public double? Compression { get; set; }
	}

	public partial class BucketAggregationBase : Aggregation
	{
		[JsonPropertyName("aggregations")]
		public Dictionary<string, AggregationContainer>? Aggregations { get; set; }
	}

	public partial class BucketScriptAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class BucketSelectorAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class BucketSortAggregation : Aggregation
	{
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonPropertyName("gap_policy")]
		public GapPolicy? GapPolicy { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }
	}

	public partial class BucketsPath
	{
	}

	public partial class CardinalityAggregation : MetricAggregationBase
	{
		[JsonPropertyName("precision_threshold")]
		public int? PrecisionThreshold { get; set; }

		[JsonPropertyName("rehash")]
		public bool? Rehash { get; set; }
	}

	public partial class ChiSquareHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset { get; set; }

		[JsonPropertyName("include_negatives")]
		public bool IncludeNegatives { get; set; }
	}

	public partial class ChildrenAggregation : BucketAggregationBase
	{
		[JsonPropertyName("type")]
		public RelationName? Type { get; set; }
	}

	public partial class ClassificationInferenceOptions
	{
		[JsonPropertyName("num_top_classes")]
		public int? NumTopClasses { get; set; }

		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues { get; set; }

		[JsonPropertyName("prediction_field_type")]
		public string? PredictionFieldType { get; set; }

		[JsonPropertyName("results_field")]
		public string? ResultsField { get; set; }

		[JsonPropertyName("top_classes_results_field")]
		public string? TopClassesResultsField { get; set; }
	}

	public partial class CompositeAggregation : BucketAggregationBase
	{
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sources")]
		public IEnumerable<Dictionary<string, CompositeAggregationSource>>? Sources { get; set; }
	}

	public partial class CompositeAggregationSource
	{
		[JsonPropertyName("date_histogram")]
		public DateHistogramAggregation? DateHistogram { get; set; }

		[JsonPropertyName("geotile_grid")]
		public GeoTileGridAggregation? GeotileGrid { get; set; }

		[JsonPropertyName("histogram")]
		public HistogramAggregation? Histogram { get; set; }

		[JsonPropertyName("terms")]
		public TermsAggregation? Terms { get; set; }
	}

	public partial class CompositeBucket
	{
	}

	public partial class CumulativeCardinalityAggregation : PipelineAggregationBase
	{
	}

	public partial class CumulativeSumAggregation : PipelineAggregationBase
	{
	}

	public partial class DateHistogramAggregation : BucketAggregationBase
	{
		[JsonPropertyName("calendar_interval")]
		public Union<DateInterval, Time>? CalendarInterval { get; set; }

		[JsonPropertyName("extended_bounds")]
		public ExtendedBounds<Union<DateMath, long>>? ExtendedBounds { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("fixed_interval")]
		public Union<DateInterval, Time>? FixedInterval { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("hard_bounds")]
		public ExtendedBounds<Union<DateMath, long>>? HardBounds { get; set; }

		[JsonPropertyName("interval")]
		public Union<DateInterval, Time>? Interval { get; set; }

		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonPropertyName("missing")]
		public DateString? Missing { get; set; }

		[JsonPropertyName("offset")]
		public Time? Offset { get; set; }

		[JsonPropertyName("order")]
		public HistogramOrder? Order { get; set; }

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }
	}

	public partial class DateHistogramBucket
	{
	}

	public partial class DateRangeAggregation : BucketAggregationBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("missing")]
		public Missing? Missing { get; set; }

		[JsonPropertyName("ranges")]
		public IEnumerable<DateRangeExpression>? Ranges { get; set; }

		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }
	}

	public partial class DateRangeExpression
	{
		[JsonPropertyName("doc_count")]
		public long? DocCount { get; set; }

		[JsonPropertyName("from")]
		public Union<DateMath, float>? From { get; set; }

		[JsonPropertyName("from_as_string")]
		public string? FromAsString { get; set; }

		[JsonPropertyName("key")]
		public string? Key { get; set; }

		[JsonPropertyName("to")]
		public Union<DateMath, float>? To { get; set; }

		[JsonPropertyName("to_as_string")]
		public string? ToAsString { get; set; }
	}

	public partial class DerivativeAggregation : PipelineAggregationBase
	{
	}

	public partial class DiversifiedSamplerAggregation : BucketAggregationBase
	{
		[JsonPropertyName("execution_hint")]
		public SamplerAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("max_docs_per_value")]
		public int? MaxDocsPerValue { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }
	}

	public partial class EwmaModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExtendedBounds<T>
	{
		[JsonPropertyName("max")]
		public T Max { get; set; }

		[JsonPropertyName("min")]
		public T Min { get; set; }
	}

	public partial class ExtendedStatsAggregate : StatsAggregate
	{
		[JsonPropertyName("std_deviation")]
		public double? StdDeviation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_bounds")]
		public StandardDeviationBounds StdDeviationBounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_population")]
		public double? StdDeviationPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("std_deviation_sampling")]
		public double? StdDeviationSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum_of_squares")]
		public double? SumOfSquares
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance")]
		public double? Variance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_population")]
		public double? VariancePopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("variance_sampling")]
		public double? VarianceSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExtendedStatsAggregation : FormatMetricAggregationBase
	{
		[JsonPropertyName("sigma")]
		public double? Sigma { get; set; }
	}

	public partial class ExtendedStatsBucketAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("sigma")]
		public double? Sigma { get; set; }
	}

	public partial class FiltersAggregation : BucketAggregationBase
	{
		[JsonPropertyName("filters")]
		public Union<Dictionary<string, QueryContainer>, IReadOnlyCollection<QueryContainer>>? Filters { get; set; }

		[JsonPropertyName("other_bucket")]
		public bool? OtherBucket { get; set; }

		[JsonPropertyName("other_bucket_key")]
		public string? OtherBucketKey { get; set; }
	}

	public partial class FiltersBucketItem
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FormatMetricAggregationBase : MetricAggregationBase
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }
	}

	public partial class FormattableMetricAggregation : MetricAggregationBase
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }
	}

	public partial class GeoBounds
	{
		[JsonPropertyName("bottom_right")]
		public LatLon BottomRight { get; set; }

		[JsonPropertyName("top_left")]
		public LatLon TopLeft { get; set; }
	}

	public partial class GeoBoundsAggregate : AggregateBase
	{
		[JsonPropertyName("bounds")]
		public GeoBounds Bounds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoBoundsAggregation : MetricAggregationBase
	{
		[JsonPropertyName("wrap_longitude")]
		public bool? WrapLongitude { get; set; }
	}

	public partial class GeoCentroidAggregate : AggregateBase
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("location")]
		public GeoLocation Location
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoCentroidAggregation : MetricAggregationBase
	{
		[JsonPropertyName("count")]
		public long? Count { get; set; }

		[JsonPropertyName("location")]
		public GeoLocation? Location { get; set; }
	}

	public partial class GeoDistanceAggregation : BucketAggregationBase
	{
		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("origin")]
		public Union<GeoLocation, string>? Origin { get; set; }

		[JsonPropertyName("ranges")]
		public IEnumerable<AggregationRange>? Ranges { get; set; }

		[JsonPropertyName("unit")]
		public DistanceUnit? Unit { get; set; }
	}

	public partial class GeoHashGridAggregation : BucketAggregationBase
	{
		[JsonPropertyName("bounds")]
		public BoundingBox? Bounds { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("precision")]
		public GeoHashPrecision? Precision { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public partial class GeoLineAggregate : AggregateBase
	{
		[JsonPropertyName("geometry")]
		public LineStringGeoShape Geometry
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public GeoLineProperties Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineAggregation
	{
		[JsonPropertyName("include_sort")]
		public bool? IncludeSort { get; set; }

		[JsonPropertyName("point")]
		public GeoLinePoint Point { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public GeoLineSort Sort { get; set; }

		[JsonPropertyName("sort_order")]
		public SortOrder? SortOrder { get; set; }
	}

	public partial class GeoLinePoint
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }
	}

	public partial class GeoLineProperties
	{
		[JsonPropertyName("complete")]
		public bool Complete
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort_values")]
		public IReadOnlyCollection<double> SortValues
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoLineSort
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }
	}

	public partial class GeoTileGridAggregation : BucketAggregationBase
	{
		[JsonPropertyName("bounds")]
		public GeoBounds? Bounds { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("precision")]
		public GeoTilePrecision? Precision { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public partial class GlobalAggregation : BucketAggregationBase
	{
	}

	public partial class GoogleNormalizedDistanceHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset { get; set; }
	}

	public partial class HdrMethod
	{
		[JsonPropertyName("number_of_significant_value_digits")]
		public int? NumberOfSignificantValueDigits { get; set; }
	}

	public partial class HdrPercentileItem
	{
		[JsonPropertyName("key")]
		public double Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("values")]
		public IReadOnlyCollection<HdrPercentileItem> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HistogramAggregation : BucketAggregationBase
	{
		[JsonPropertyName("extended_bounds")]
		public ExtendedBounds<double>? ExtendedBounds { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("hard_bounds")]
		public ExtendedBounds<double>? HardBounds { get; set; }

		[JsonPropertyName("interval")]
		public double? Interval { get; set; }

		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonPropertyName("offset")]
		public double? Offset { get; set; }

		[JsonPropertyName("order")]
		public HistogramOrder? Order { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class HistogramOrder
	{
		[JsonPropertyName("_count")]
		public SortOrder? Count { get; set; }

		[JsonPropertyName("_key")]
		public SortOrder? Key { get; set; }
	}

	public partial class HoltLinearModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltWintersModelSettings
	{
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gamma")]
		public float? Gamma
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pad")]
		public bool? Pad
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("period")]
		public int? Period
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public HoltWintersType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("inference_config")]
		public InferenceConfigContainer? InferenceConfig { get; set; }

		[JsonPropertyName("model_id")]
		public Name ModelId { get; set; }
	}

	public partial class InferenceConfigContainer
	{
		[JsonPropertyName("classification")]
		public ClassificationInferenceOptions? Classification { get; set; }

		[JsonPropertyName("regression")]
		public RegressionInferenceOptions? Regression { get; set; }
	}

	public partial class IpRangeAggregation : BucketAggregationBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("ranges")]
		public IEnumerable<IpRangeAggregationRange>? Ranges { get; set; }
	}

	public partial class IpRangeAggregationRange
	{
		[JsonPropertyName("from")]
		public string? From { get; set; }

		[JsonPropertyName("mask")]
		public string? Mask { get; set; }

		[JsonPropertyName("to")]
		public string? To { get; set; }
	}

	public partial class IpRangeBucket
	{
	}

	public partial class KeyedBucket<TKey>
	{
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key")]
		public TKey Key
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("key_as_string")]
		public string KeyAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LineStringGeoShape
	{
		[JsonPropertyName("coordinates")]
		public IReadOnlyCollection<GeoCoordinate> Coordinates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MatrixAggregation : Aggregation
	{
		[JsonPropertyName("fields")]
		public Fields? Fields { get; set; }

		[JsonPropertyName("missing")]
		public Dictionary<Field, double>? Missing { get; set; }
	}

	public partial class MatrixStatsAggregation : MatrixAggregation
	{
		[JsonPropertyName("mode")]
		public MatrixStatsMode? Mode { get; set; }
	}

	public partial class MaxAggregation : FormatMetricAggregationBase
	{
	}

	public partial class MaxBucketAggregation : PipelineAggregationBase
	{
	}

	public partial class MedianAbsoluteDeviationAggregation : FormatMetricAggregationBase
	{
		[JsonPropertyName("compression")]
		public double? Compression { get; set; }
	}

	public partial class MetricAggregationBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("missing")]
		public Missing? Missing { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class MinAggregation : FormatMetricAggregationBase
	{
	}

	public partial class MinBucketAggregation : PipelineAggregationBase
	{
	}

	public partial class MissingAggregation : BucketAggregationBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("missing")]
		public Missing? Missing { get; set; }
	}

	public partial class MovingAverageAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("minimize")]
		public bool? Minimize { get; set; }

		[JsonPropertyName("model")]
		public MovingAverageModel? Model { get; set; }

		[JsonPropertyName("predict")]
		public int? Predict { get; set; }

		[JsonPropertyName("settings")]
		public MovingAverageSettings Settings { get; set; }

		[JsonPropertyName("window")]
		public int? Window { get; set; }
	}

	public partial class MovingFunctionAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("script")]
		public string? Script { get; set; }

		[JsonPropertyName("shift")]
		public int? Shift { get; set; }

		[JsonPropertyName("window")]
		public int? Window { get; set; }
	}

	public partial class MovingPercentilesAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("shift")]
		public int? Shift { get; set; }

		[JsonPropertyName("window")]
		public int? Window { get; set; }
	}

	public partial class MultiTermLookup
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }
	}

	public partial class MultiTermsAggregation : BucketAggregationBase
	{
		[JsonPropertyName("terms")]
		public IEnumerable<MultiTermLookup> Terms { get; set; }
	}

	public partial class MutualInformationHeuristic
	{
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset { get; set; }

		[JsonPropertyName("include_negatives")]
		public bool IncludeNegatives { get; set; }
	}

	public partial class NestedAggregation : BucketAggregationBase
	{
		[JsonPropertyName("path")]
		public Field? Path { get; set; }
	}

	public partial class NormalizeAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("method")]
		public NormalizeMethod? Method { get; set; }
	}

	public partial class ParentAggregation : BucketAggregationBase
	{
		[JsonPropertyName("type")]
		public RelationName? Type { get; set; }
	}

	public partial class PercentageScoreHeuristic
	{
	}

	public partial class PercentileItem
	{
		[JsonPropertyName("percentile")]
		public double Percentile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentileRanksAggregation : FormatMetricAggregationBase
	{
		[JsonPropertyName("hdr")]
		public HdrMethod? Hdr { get; set; }

		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		[JsonPropertyName("tdigest")]
		public TDigest? Tdigest { get; set; }

		[JsonPropertyName("values")]
		public IEnumerable<double>? Values { get; set; }
	}

	public partial class PercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("items")]
		public IReadOnlyCollection<PercentileItem> Items
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PercentilesAggregation : FormatMetricAggregationBase
	{
		[JsonPropertyName("hdr")]
		public HdrMethod? Hdr { get; set; }

		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		[JsonPropertyName("percents")]
		public IEnumerable<double>? Percents { get; set; }

		[JsonPropertyName("tdigest")]
		public TDigest? Tdigest { get; set; }
	}

	public partial class PercentilesBucketAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("percents")]
		public IEnumerable<double>? Percents { get; set; }
	}

	public partial class PipelineAggregationBase : Aggregation
	{
		[JsonPropertyName("buckets_path")]
		public BucketsPath? BucketsPath { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("gap_policy")]
		public GapPolicy? GapPolicy { get; set; }
	}

	public partial class RangeAggregation : BucketAggregationBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("ranges")]
		public IEnumerable<AggregationRange>? Ranges { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class RangeBucket
	{
	}

	public partial class RareTermsAggregation : BucketAggregationBase
	{
		[JsonPropertyName("exclude")]
		public Union<string, IReadOnlyCollection<string>>? Exclude { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("include")]
		public OneOf<string, IReadOnlyCollection<string>, TermsInclude>? Include { get; set; }

		[JsonPropertyName("max_doc_count")]
		public long? MaxDocCount { get; set; }

		[JsonPropertyName("missing")]
		public Missing? Missing { get; set; }

		[JsonPropertyName("precision")]
		public double? Precision { get; set; }

		[JsonPropertyName("value_type")]
		public string? ValueType { get; set; }
	}

	public partial class RareTermsBucket<TKey>
	{
	}

	public partial class RateAggregation : FormatMetricAggregationBase
	{
		[JsonPropertyName("mode")]
		public RateMode? Mode { get; set; }

		[JsonPropertyName("unit")]
		public DateInterval? Unit { get; set; }
	}

	public partial class RegressionInferenceOptions
	{
		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues { get; set; }

		[JsonPropertyName("results_field")]
		public Field ResultsField { get; set; }
	}

	public partial class ReverseNestedAggregation : BucketAggregationBase
	{
		[JsonPropertyName("path")]
		public Field? Path { get; set; }
	}

	public partial class SamplerAggregation : BucketAggregationBase
	{
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }
	}

	public partial class ScriptedHeuristic
	{
		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class ScriptedMetricAggregate : AggregateBase
	{
		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptedMetricAggregation : MetricAggregationBase
	{
		[JsonPropertyName("combine_script")]
		public Script? CombineScript { get; set; }

		[JsonPropertyName("init_script")]
		public Script? InitScript { get; set; }

		[JsonPropertyName("map_script")]
		public Script? MapScript { get; set; }

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonPropertyName("reduce_script")]
		public Script? ReduceScript { get; set; }
	}

	public partial class SerialDifferencingAggregation : PipelineAggregationBase
	{
		[JsonPropertyName("lag")]
		public int? Lag { get; set; }
	}

	public partial class SignificantTermsAggregation : BucketAggregationBase
	{
		[JsonPropertyName("background_filter")]
		public QueryContainer? BackgroundFilter { get; set; }

		[JsonPropertyName("chi_square")]
		public ChiSquareHeuristic? ChiSquare { get; set; }

		[JsonPropertyName("exclude")]
		public Union<string, IReadOnlyCollection<string>>? Exclude { get; set; }

		[JsonPropertyName("execution_hint")]
		public TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("gnd")]
		public GoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		[JsonPropertyName("include")]
		public Union<string, IReadOnlyCollection<string>>? Include { get; set; }

		[JsonPropertyName("min_doc_count")]
		public long? MinDocCount { get; set; }

		[JsonPropertyName("mutual_information")]
		public MutualInformationHeuristic? MutualInformation { get; set; }

		[JsonPropertyName("percentage")]
		public PercentageScoreHeuristic? Percentage { get; set; }

		[JsonPropertyName("script_heuristic")]
		public ScriptedHeuristic? ScriptHeuristic { get; set; }

		[JsonPropertyName("shard_min_doc_count")]
		public long? ShardMinDocCount { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public partial class SignificantTermsBucket<TKey>
	{
	}

	public partial class SignificantTextAggregation : BucketAggregationBase
	{
		[JsonPropertyName("background_filter")]
		public QueryContainer? BackgroundFilter { get; set; }

		[JsonPropertyName("chi_square")]
		public ChiSquareHeuristic? ChiSquare { get; set; }

		[JsonPropertyName("exclude")]
		public Union<string, IReadOnlyCollection<string>>? Exclude { get; set; }

		[JsonPropertyName("execution_hint")]
		public TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("filter_duplicate_text")]
		public bool? FilterDuplicateText { get; set; }

		[JsonPropertyName("gnd")]
		public GoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		[JsonPropertyName("include")]
		public Union<string, IReadOnlyCollection<string>>? Include { get; set; }

		[JsonPropertyName("min_doc_count")]
		public long? MinDocCount { get; set; }

		[JsonPropertyName("mutual_information")]
		public MutualInformationHeuristic? MutualInformation { get; set; }

		[JsonPropertyName("percentage")]
		public PercentageScoreHeuristic? Percentage { get; set; }

		[JsonPropertyName("script_heuristic")]
		public ScriptedHeuristic? ScriptHeuristic { get; set; }

		[JsonPropertyName("shard_min_doc_count")]
		public long? ShardMinDocCount { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("source_fields")]
		public Fields? SourceFields { get; set; }
	}

	public partial class StandardDeviationBounds
	{
		[JsonPropertyName("lower")]
		public double? Lower
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_population")]
		public double? LowerPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lower_sampling")]
		public double? LowerSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper")]
		public double? Upper
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_population")]
		public double? UpperPopulation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("upper_sampling")]
		public double? UpperSampling
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StatsAggregate : AggregateBase
	{
		[JsonPropertyName("avg")]
		public double? Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public double Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double? Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double? Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sum")]
		public double Sum
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StatsAggregation : FormatMetricAggregationBase
	{
	}

	public partial class StatsBucketAggregation : PipelineAggregationBase
	{
	}

	public partial class StringStatsAggregate : AggregateBase
	{
		[JsonPropertyName("avg_length")]
		public double AvgLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("distribution")]
		public Dictionary<string, double>? Distribution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("entropy")]
		public double Entropy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_length")]
		public int MaxLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_length")]
		public int MinLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringStatsAggregation : MetricAggregationBase
	{
		[JsonPropertyName("show_distribution")]
		public bool? ShowDistribution { get; set; }
	}

	public partial class SumAggregation : FormatMetricAggregationBase
	{
	}

	public partial class SumBucketAggregation : PipelineAggregationBase
	{
	}

	public partial class TDigest
	{
		[JsonPropertyName("compression")]
		public int? Compression { get; set; }
	}

	public partial class TDigestPercentilesAggregate : AggregateBase
	{
		[JsonPropertyName("values")]
		public Dictionary<string, double> Values
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TTestAggregation : Aggregation
	{
		[JsonPropertyName("a")]
		public TestPopulation? a { get; set; }

		[JsonPropertyName("b")]
		public TestPopulation? b { get; set; }

		[JsonPropertyName("type")]
		public TTestType? Type { get; set; }
	}

	public partial class TermsAggregation : BucketAggregationBase
	{
		[JsonPropertyName("collect_mode")]
		public TermsAggregationCollectMode? CollectMode { get; set; }

		[JsonPropertyName("exclude")]
		public Union<string, IReadOnlyCollection<string>>? Exclude { get; set; }

		[JsonPropertyName("execution_hint")]
		public TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("include")]
		public OneOf<string, IReadOnlyCollection<string>, TermsInclude>? Include { get; set; }

		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonPropertyName("missing")]
		public Missing? Missing { get; set; }

		[JsonPropertyName("missing_bucket")]
		public bool? MissingBucket { get; set; }

		[JsonPropertyName("order")]
		public TermsAggregationOrder? Order { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonPropertyName("show_term_doc_count_error")]
		public bool? ShowTermDocCountError { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("value_type")]
		public string? ValueType { get; set; }
	}

	public partial class TermsInclude
	{
		[JsonPropertyName("num_partitions")]
		public long NumPartitions { get; set; }

		[JsonPropertyName("partition")]
		public long Partition { get; set; }
	}

	public partial class TestPopulation
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class TopHitsAggregate : AggregateBase
	{
		[JsonPropertyName("hits")]
		public HitsMetadata<Dictionary<string, object>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopHitsAggregation : MetricAggregationBase
	{
		[JsonPropertyName("docvalue_fields")]
		public Fields? DocvalueFields { get; set; }

		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonPropertyName("highlight")]
		public Highlight? Highlight { get; set; }

		[JsonPropertyName("script_fields")]
		public Dictionary<string, ScriptField>? ScriptFields { get; set; }

		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }

		[JsonPropertyName("_source")]
		public OneOf<bool, SourceFilter, Fields>? Source { get; set; }

		[JsonPropertyName("stored_fields")]
		public Fields? StoredFields { get; set; }

		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public partial class TopMetrics
	{
		[JsonPropertyName("metrics")]
		public Dictionary<string, OneOf<long, double, string>> Metrics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public IReadOnlyCollection<OneOf<long, double, string>> Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetricsAggregate : AggregateBase
	{
		[JsonPropertyName("top")]
		public IReadOnlyCollection<TopMetrics> Top
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TopMetricsAggregation : MetricAggregationBase
	{
		[JsonPropertyName("metrics")]
		public Union<TopMetricsValue, IReadOnlyCollection<TopMetricsValue>>? Metrics { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }
	}

	public partial class TopMetricsValue
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }
	}

	public partial class ValueAggregate : AggregateBase
	{
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_as_string")]
		public string? ValueAsString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ValueCountAggregation : FormattableMetricAggregation
	{
	}

	public partial class VariableWidthHistogramAggregation
	{
		[JsonPropertyName("buckets")]
		public int? Buckets { get; set; }

		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("initial_buffer")]
		public int? InitialBuffer { get; set; }

		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }
	}

	public partial class WeightedAverageAggregation : Aggregation
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("value")]
		public WeightedAverageValue? Value { get; set; }

		[JsonPropertyName("value_type")]
		public ValueType? ValueType { get; set; }

		[JsonPropertyName("weight")]
		public WeightedAverageValue? Weight { get; set; }
	}

	public partial class WeightedAverageValue
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class AsciiFoldingTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharGroupTokenizer : TokenizerBase
	{
		[JsonPropertyName("tokenize_on_chars")]
		public IReadOnlyCollection<string> TokenizeOnChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CommonGramsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("common_words")]
		public IReadOnlyCollection<string> CommonWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("common_words_path")]
		public string CommonWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_mode")]
		public bool QueryMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompoundWordTokenFilterBase : TokenFilterBase
	{
		[JsonPropertyName("hyphenation_patterns_path")]
		public string HyphenationPatternsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_subword_size")]
		public int MaxSubwordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_subword_size")]
		public int MinSubwordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_word_size")]
		public int MinWordSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("only_longest_match")]
		public bool OnlyLongestMatch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("word_list")]
		public IReadOnlyCollection<string> WordList
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("word_list_path")]
		public string WordListPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConditionTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filter")]
		public IReadOnlyCollection<string> Filter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DelimitedPayloadTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("encoding")]
		public DelimitedPayloadEncoding Encoding
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EdgeNGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("side")]
		public EdgeNGramSide Side
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EdgeNGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_chars")]
		public IReadOnlyCollection<TokenChar> TokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ElisionTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("articles")]
		public IReadOnlyCollection<string> Articles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("articles_case")]
		public bool ArticlesCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FingerprintTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_output_size")]
		public int MaxOutputSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HtmlStripCharFilter : CharFilterBase
	{
	}

	public partial class HunspellTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("dedup")]
		public bool Dedup
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dictionary")]
		public string Dictionary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("longest_only")]
		public bool LongestOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HyphenationDecompounderTokenFilter : CompoundWordTokenFilterBase
	{
	}

	public partial class KStemTokenFilter : TokenFilterBase
	{
	}

	public partial class KeepTypesTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("mode")]
		public KeepTypesMode Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("types")]
		public IReadOnlyCollection<string> Types
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeepWordsTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("keep_words")]
		public IReadOnlyCollection<string> KeepWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_words_case")]
		public bool KeepWordsCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keep_words_path")]
		public string KeepWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeywordMarkerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords")]
		public IReadOnlyCollection<string> Keywords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_path")]
		public string KeywordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("keywords_pattern")]
		public string KeywordsPattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeywordTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LengthTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max")]
		public int Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public int Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LetterTokenizer : TokenizerBase
	{
	}

	public partial class LimitTokenCountTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("consume_all_tokens")]
		public bool ConsumeAllTokens
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_token_count")]
		public int MaxTokenCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseTokenizer : TokenizerBase
	{
	}

	public partial class MappingCharFilter : CharFilterBase
	{
		[JsonPropertyName("mappings")]
		public IReadOnlyCollection<string> Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings_path")]
		public string MappingsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MultiplexerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filters")]
		public IReadOnlyCollection<string> Filters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NGramTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NGramTokenizer : TokenizerBase
	{
		[JsonPropertyName("custom_token_chars")]
		public string CustomTokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_gram")]
		public int MaxGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_gram")]
		public int MinGram
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_chars")]
		public IReadOnlyCollection<TokenChar> TokenChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NoriPartOfSpeechTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("stoptags")]
		public IReadOnlyCollection<string> Stoptags
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NoriTokenizer : TokenizerBase
	{
		[JsonPropertyName("decompound_mode")]
		public NoriDecompoundMode DecompoundMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discard_punctuation")]
		public bool DiscardPunctuation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_dictionary")]
		public string UserDictionary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_dictionary_rules")]
		public IReadOnlyCollection<string> UserDictionaryRules
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PathHierarchyTokenizer : TokenizerBase
	{
		[JsonPropertyName("buffer_size")]
		public int BufferSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delimiter")]
		public string Delimiter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reverse")]
		public bool Reverse
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip")]
		public int Skip
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PatternCaptureTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("patterns")]
		public IReadOnlyCollection<string> Patterns
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PatternReplaceTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("flags")]
		public string Flags
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PorterStemTokenFilter : TokenFilterBase
	{
	}

	public partial class PredicateTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("script")]
		public Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RemoveDuplicatesTokenFilter : TokenFilterBase
	{
	}

	public partial class ReverseTokenFilter : TokenFilterBase
	{
	}

	public partial class ShingleTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("filler_token")]
		public string FillerToken
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int MaxShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_shingle_size")]
		public int MinShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams")]
		public bool OutputUnigrams
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("output_unigrams_if_no_shingles")]
		public bool OutputUnigramsIfNoShingles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("token_separator")]
		public string TokenSeparator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SnowballTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public SnowballLanguage Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StandardTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StemmerOverrideTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("rules")]
		public IReadOnlyCollection<string> Rules
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rules_path")]
		public string RulesPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StemmerTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("language")]
		public string Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StopTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("ignore_case")]
		public bool? IgnoreCase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remove_trailing")]
		public bool? RemoveTrailing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stopwords")]
		public StopWords Stopwords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stopwords_path")]
		public string? StopwordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SynonymGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms")]
		public IReadOnlyCollection<string> Synonyms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SynonymTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("expand")]
		public bool Expand
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public SynonymFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lenient")]
		public bool Lenient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms")]
		public IReadOnlyCollection<string> Synonyms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("synonyms_path")]
		public string SynonymsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer")]
		public string Tokenizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("updateable")]
		public bool Updateable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TokenFilterBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TokenizerBase
	{
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TrimTokenFilter : TokenFilterBase
	{
	}

	public partial class TruncateTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("length")]
		public int Length
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UaxEmailUrlTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UniqueTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("only_on_same_position")]
		public bool OnlyOnSamePosition
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UppercaseTokenFilter : TokenFilterBase
	{
	}

	public partial class WhitespaceTokenizer : TokenizerBase
	{
		[JsonPropertyName("max_token_length")]
		public int MaxTokenLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class WordDelimiterGraphTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("adjust_offsets")]
		public bool AdjustOffsets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words")]
		public IReadOnlyCollection<string> ProtectedWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table")]
		public IReadOnlyCollection<string> TypeTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class WordDelimiterTokenFilter : TokenFilterBase
	{
		[JsonPropertyName("catenate_all")]
		public bool CatenateAll
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_numbers")]
		public bool CatenateNumbers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("catenate_words")]
		public bool CatenateWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_number_parts")]
		public bool GenerateNumberParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("generate_word_parts")]
		public bool GenerateWordParts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_original")]
		public bool PreserveOriginal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words")]
		public IReadOnlyCollection<string> ProtectedWords
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("protected_words_path")]
		public string ProtectedWordsPath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_case_change")]
		public bool SplitOnCaseChange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_on_numerics")]
		public bool SplitOnNumerics
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stem_english_possessive")]
		public bool StemEnglishPossessive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table")]
		public IReadOnlyCollection<string> TypeTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type_table_path")]
		public string TypeTablePath
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AllField
	{
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	public partial class BinaryProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "binary";
	}

	public partial class BooleanProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public bool? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "boolean";
	}

	public partial class CompletionProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<SuggestContext>? Contexts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "completion";
	}

	public partial class CorePropertyBase : PropertyBase
	{
		[JsonPropertyName("copy_to")]
		public Fields? CopyTo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("similarity")]
		public string? Similarity
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public bool? Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateNanosProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateString? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "date_nanos";
	}

	public partial class DateProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public DateString? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision_step")]
		public int? PrecisionStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "date";
	}

	public partial class DateRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("format")]
		public string? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "date_range";
	}

	public partial class DocValuesPropertyBase : CorePropertyBase
	{
		[JsonPropertyName("doc_values")]
		public bool? DocValues
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DoubleRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "double_range";
	}

	public partial class DynamicTemplate
	{
		[JsonPropertyName("mapping")]
		public PropertyBase? Mapping { get; set; }

		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonPropertyName("match_pattern")]
		public MatchType? MatchPattern { get; set; }

		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	public partial class FieldNamesField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class FloatRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "float_range";
	}

	public partial class GenericProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public StringFielddata Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoPointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public GeoLocation? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "geo_point";
	}

	public partial class GeoShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public GeoOrientation? Orientation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strategy")]
		public GeoStrategy? Strategy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "geo_shape";
	}

	public partial class IndexField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class IntegerRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "integer_range";
	}

	public partial class IpProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "ip";
	}

	public partial class IpRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "ip_range";
	}

	public partial class KeywordProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("normalizer")]
		public string? Normalizer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "keyword";
	}

	public partial class LongRangeProperty : RangePropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "long_range";
	}

	public partial class Murmur3HashProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "murmur3";
	}

	public partial class NestedProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "nested";
	}

	public partial class NumberProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public NumericFielddata? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public NumberType Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ObjectProperty : CorePropertyBase
	{
		[JsonPropertyName("enabled")]
		public bool? Enabled
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "object";
	}

	public partial class PointProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public string? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "point";
	}

	public partial class PropertyBase
	{
		[JsonPropertyName("dynamic")]
		public Union<bool, DynamicMapping>? Dynamic { get; set; }

		[JsonPropertyName("fields")]
		public Dictionary<PropertyName, PropertyBase>? Fields { get; set; }

		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove { get; set; }

		[JsonPropertyName("local_metadata")]
		public Metadata? LocalMetadata { get; set; }

		[JsonPropertyName("meta")]
		public Dictionary<string, string>? Meta { get; set; }

		[JsonPropertyName("name")]
		public PropertyName? Name { get; set; }

		[JsonPropertyName("properties")]
		public Dictionary<PropertyName, PropertyBase>? Properties { get; set; }
	}

	public partial class RangePropertyBase : DocValuesPropertyBase
	{
		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RoutingField
	{
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	public partial class RuntimeField
	{
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonPropertyName("type")]
		public RuntimeFieldType Type { get; set; }
	}

	public partial class SearchAsYouTypeProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "search_as_you_type";
	}

	public partial class ShapeProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("coerce")]
		public bool? Coerce
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("orientation")]
		public ShapeOrientation? Orientation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "shape";
	}

	public partial class SizeField
	{
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class SourceField
	{
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonPropertyName("excludes")]
		public IEnumerable<string>? Excludes { get; set; }

		[JsonPropertyName("includes")]
		public IEnumerable<string>? Includes { get; set; }
	}

	public partial class SuggestContext
	{
		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public Field? Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision")]
		public int? Precision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TextIndexPrefixes
	{
		[JsonPropertyName("max_chars")]
		public int MaxChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_chars")]
		public int MinChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TextProperty : CorePropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public bool? Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata_frequency_filter")]
		public FielddataFrequencyFilter? FielddataFrequencyFilter
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_options")]
		public IndexOptions? IndexOptions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_prefixes")]
		public TextIndexPrefixes? IndexPrefixes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms")]
		public bool? Norms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vector")]
		public TermVectorOption? TermVector
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "text";
	}

	public partial class TokenCountProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("boost")]
		public double? Boost
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public bool? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("null_value")]
		public double? NullValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type => "token_count";
	}

	public partial class TypeMapping
	{
		[JsonPropertyName("all_field")]
		public AllField? AllField { get; set; }

		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonPropertyName("dynamic")]
		public Union<bool, DynamicMapping>? Dynamic { get; set; }

		[JsonPropertyName("dynamic_date_formats")]
		public IEnumerable<string>? DynamicDateFormats { get; set; }

		[JsonPropertyName("dynamic_templates")]
		public Union<Dictionary<string, DynamicTemplate>, IReadOnlyCollection<Dictionary<string, DynamicTemplate>>>? DynamicTemplates { get; set; }

		[JsonPropertyName("_field_names")]
		public FieldNamesField? FieldNames { get; set; }

		[JsonPropertyName("index_field")]
		public IndexField? IndexField { get; set; }

		[JsonPropertyName("_meta")]
		public Metadata? Meta { get; set; }

		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }

		[JsonPropertyName("properties")]
		public Dictionary<PropertyName, PropertyBase>? Properties { get; set; }

		[JsonPropertyName("_routing")]
		public RoutingField? Routing { get; set; }

		[JsonPropertyName("runtime")]
		public Dictionary<string, RuntimeField>? Runtime { get; set; }

		[JsonPropertyName("_size")]
		public SizeField? Size { get; set; }

		[JsonPropertyName("_source")]
		public SourceField? Source { get; set; }
	}

	public partial class VersionProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "version";
	}

	public partial class WildcardProperty : DocValuesPropertyBase
	{
		[JsonPropertyName("type")]
		public string Type => "wildcard";
	}

	public partial class BoolQuery : QueryBase
	{
		[JsonPropertyName("filter")]
		public Union<QueryContainer, IReadOnlyCollection<QueryContainer>>? Filter { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("must")]
		public Union<QueryContainer, IReadOnlyCollection<QueryContainer>>? Must { get; set; }

		[JsonPropertyName("must_not")]
		public Union<QueryContainer, IReadOnlyCollection<QueryContainer>>? MustNot { get; set; }

		[JsonPropertyName("should")]
		public Union<QueryContainer, IReadOnlyCollection<QueryContainer>>? Should { get; set; }
	}

	public partial class BoostingQuery : QueryBase
	{
		[JsonPropertyName("negative")]
		public QueryContainer Negative { get; set; }

		[JsonPropertyName("negative_boost")]
		public double NegativeBoost { get; set; }

		[JsonPropertyName("positive")]
		public QueryContainer Positive { get; set; }
	}

	public partial class BoundingBox
	{
		[JsonPropertyName("bottom")]
		public double? Bottom { get; set; }

		[JsonPropertyName("bottom_left")]
		public GeoLocation? BottomLeft { get; set; }

		[JsonPropertyName("bottom_right")]
		public GeoLocation? BottomRight { get; set; }

		[JsonPropertyName("left")]
		public double? Left { get; set; }

		[JsonPropertyName("right")]
		public double? Right { get; set; }

		[JsonPropertyName("top")]
		public double? Top { get; set; }

		[JsonPropertyName("top_left")]
		public GeoLocation? TopLeft { get; set; }

		[JsonPropertyName("top_right")]
		public GeoLocation? TopRight { get; set; }

		[JsonPropertyName("wkt")]
		public string? Wkt { get; set; }
	}

	public partial class CombinedFieldsQuery : QueryBase
	{
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("fields")]
		public IEnumerable<Field> Fields { get; set; }

		[JsonPropertyName("mimimum_should_match")]
		public MinimumShouldMatch? MimimumShouldMatch { get; set; }

		[JsonPropertyName("operator")]
		public CombinedFieldsOperator? Operator { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public CombinedFieldsZeroTerms? ZeroTermsQuery { get; set; }
	}

	public partial class CommonTermsQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency { get; set; }

		[JsonPropertyName("high_freq_operator")]
		public Operator? HighFreqOperator { get; set; }

		[JsonPropertyName("low_freq_operator")]
		public Operator? LowFreqOperator { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }
	}

	public partial class ConstantScoreQuery : QueryBase
	{
		[JsonPropertyName("filter")]
		public QueryContainer Filter { get; set; }
	}

	public partial class DateDecayFunction : DecayFunctionBase
	{
	}

	public partial class DateDistanceFeatureQuery : DistanceFeatureQueryBase
	{
	}

	public partial class DateRangeQuery : RangeQueryBase
	{
		[JsonPropertyName("format")]
		public DateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gt")]
		public DateMath? Gt
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gte")]
		public DateMath? Gte
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lt")]
		public DateMath? Lt
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lte")]
		public DateMath? Lte
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_zone")]
		public TimeZone? TimeZone
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DecayFunctionBase : ScoreFunctionBase
	{
		[JsonPropertyName("multi_value_mode")]
		public MultiValueMode? MultiValueMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DisMaxQuery : QueryBase
	{
		[JsonPropertyName("queries")]
		public IEnumerable<QueryContainer> Queries { get; set; }

		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }
	}

	public partial class DistanceFeatureQueryBase<TOrigin, TDistance> : QueryBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("origin")]
		public TOrigin Origin
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pivot")]
		public TDistance Pivot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExistsQuery : QueryBase
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }
	}

	public partial class FieldValueFactorScoreFunction : ScoreFunctionBase
	{
		[JsonPropertyName("factor")]
		public double? Factor { get; set; }

		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonPropertyName("modifier")]
		public FieldValueFactorModifier? Modifier { get; set; }
	}

	public partial class FunctionScoreContainer
	{
		[JsonPropertyName("exp")]
		public DecayFunction? Exp { get; set; }

		[JsonPropertyName("field_value_factor")]
		public FieldValueFactorScoreFunction? FieldValueFactor { get; set; }

		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("gauss")]
		public DecayFunction? Gauss { get; set; }

		[JsonPropertyName("linear")]
		public DecayFunction? Linear { get; set; }

		[JsonPropertyName("random_score")]
		public RandomScoreFunction? RandomScore { get; set; }

		[JsonPropertyName("script_score")]
		public ScriptScoreFunction? ScriptScore { get; set; }

		[JsonPropertyName("weight")]
		public double? Weight { get; set; }
	}

	public partial class FunctionScoreQuery : QueryBase
	{
		[JsonPropertyName("boost_mode")]
		public FunctionBoostMode? BoostMode { get; set; }

		[JsonPropertyName("functions")]
		public IEnumerable<FunctionScoreContainer>? Functions { get; set; }

		[JsonPropertyName("max_boost")]
		public double? MaxBoost { get; set; }

		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonPropertyName("query")]
		public QueryContainer? Query { get; set; }

		[JsonPropertyName("score_mode")]
		public FunctionScoreMode? ScoreMode { get; set; }
	}

	public partial class FuzzyQuery : QueryBase
	{
		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("rewrite")]
		public MultiTermQueryRewrite? Rewrite { get; set; }

		[JsonPropertyName("transpositions")]
		public bool? Transpositions { get; set; }

		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class GeoBoundingBoxQuery : QueryBase
	{
		[JsonPropertyName("type")]
		public GeoExecution? Type { get; set; }

		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod { get; set; }
	}

	public partial class GeoDecayFunction : DecayFunctionBase
	{
	}

	public partial class GeoDistanceFeatureQuery : DistanceFeatureQueryBase
	{
	}

	public partial class GeoDistanceQuery : QueryBase
	{
		[JsonPropertyName("distance")]
		public Distance? Distance { get; set; }

		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType { get; set; }

		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod { get; set; }
	}

	public partial class GeoPolygonQuery : QueryBase
	{
		[JsonPropertyName("validation_method")]
		public GeoValidationMethod? ValidationMethod { get; set; }
	}

	public partial class GeoShapeQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }
	}

	public partial class HasChildQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("inner_hits")]
		public InnerHits? InnerHits { get; set; }

		[JsonPropertyName("max_children")]
		public int? MaxChildren { get; set; }

		[JsonPropertyName("min_children")]
		public int? MinChildren { get; set; }

		[JsonPropertyName("query")]
		public QueryContainer Query { get; set; }

		[JsonPropertyName("score_mode")]
		public ChildScoreMode? ScoreMode { get; set; }

		[JsonPropertyName("type")]
		public RelationName Type { get; set; }
	}

	public partial class HasParentQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("inner_hits")]
		public InnerHits? InnerHits { get; set; }

		[JsonPropertyName("parent_type")]
		public RelationName ParentType { get; set; }

		[JsonPropertyName("query")]
		public QueryContainer Query { get; set; }

		[JsonPropertyName("score")]
		public bool? Score { get; set; }
	}

	public partial class IdsQuery : QueryBase
	{
		[JsonPropertyName("values")]
		public Ids? Values { get; set; }
	}

	public partial class IntervalsAllOf
	{
		[JsonPropertyName("filter")]
		public IntervalsFilter? Filter { get; set; }

		[JsonPropertyName("intervals")]
		public IEnumerable<IntervalsContainer> Intervals { get; set; }

		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }
	}

	public partial class IntervalsAnyOf
	{
		[JsonPropertyName("filter")]
		public IntervalsFilter? Filter { get; set; }

		[JsonPropertyName("intervals")]
		public IEnumerable<IntervalsContainer> Intervals { get; set; }
	}

	public partial class IntervalsContainer
	{
		[JsonPropertyName("all_of")]
		public IntervalsAllOf? AllOf { get; set; }

		[JsonPropertyName("any_of")]
		public IntervalsAnyOf? AnyOf { get; set; }

		[JsonPropertyName("fuzzy")]
		public IntervalsFuzzy? Fuzzy { get; set; }

		[JsonPropertyName("match")]
		public IntervalsMatch? Match { get; set; }

		[JsonPropertyName("prefix")]
		public IntervalsPrefix? Prefix { get; set; }

		[JsonPropertyName("wildcard")]
		public IntervalsWildcard? Wildcard { get; set; }
	}

	public partial class IntervalsFilter
	{
		[JsonPropertyName("after")]
		public IntervalsContainer? After { get; set; }

		[JsonPropertyName("before")]
		public IntervalsContainer? Before { get; set; }

		[JsonPropertyName("contained_by")]
		public IntervalsContainer? ContainedBy { get; set; }

		[JsonPropertyName("containing")]
		public IntervalsContainer? Containing { get; set; }

		[JsonPropertyName("not_contained_by")]
		public IntervalsContainer? NotContainedBy { get; set; }

		[JsonPropertyName("not_containing")]
		public IntervalsContainer? NotContaining { get; set; }

		[JsonPropertyName("not_overlapping")]
		public IntervalsContainer? NotOverlapping { get; set; }

		[JsonPropertyName("overlapping")]
		public IntervalsContainer? Overlapping { get; set; }

		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class IntervalsFuzzy
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("term")]
		public string Term { get; set; }

		[JsonPropertyName("transpositions")]
		public bool? Transpositions { get; set; }

		[JsonPropertyName("use_field")]
		public Field? UseField { get; set; }
	}

	public partial class IntervalsMatch
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("filter")]
		public IntervalsFilter? Filter { get; set; }

		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("use_field")]
		public Field? UseField { get; set; }
	}

	public partial class IntervalsPrefix
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("prefix")]
		public string Prefix { get; set; }

		[JsonPropertyName("use_field")]
		public Field? UseField { get; set; }
	}

	public partial class IntervalsQuery : QueryBase
	{
		[JsonPropertyName("all_of")]
		public IntervalsAllOf? AllOf { get; set; }

		[JsonPropertyName("any_of")]
		public IntervalsAnyOf? AnyOf { get; set; }

		[JsonPropertyName("fuzzy")]
		public IntervalsFuzzy? Fuzzy { get; set; }

		[JsonPropertyName("match")]
		public IntervalsMatch? Match { get; set; }

		[JsonPropertyName("prefix")]
		public IntervalsPrefix? Prefix { get; set; }

		[JsonPropertyName("wildcard")]
		public IntervalsWildcard? Wildcard { get; set; }
	}

	public partial class IntervalsWildcard
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("pattern")]
		public string Pattern { get; set; }

		[JsonPropertyName("use_field")]
		public Field? UseField { get; set; }
	}

	public partial class LikeDocument
	{
		[JsonPropertyName("doc")]
		public object? Doc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public IReadOnlyCollection<Field>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public Id? Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<Field, string>? PerFieldAnalyzer
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing")]
		public Routing? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public DocType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_type")]
		public VersionType? VersionType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class MatchAllQuery : QueryBase
	{
	}

	public partial class MatchBoolPrefixQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("fuzzy_rewrite")]
		public MultiTermQueryRewrite? FuzzyRewrite { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("operator")]
		public Operator? Operator { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }
	}

	public partial class MatchNoneQuery : QueryBase
	{
	}

	public partial class MatchPhrasePrefixQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MatchPhraseQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MatchQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency { get; set; }

		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("fuzzy_rewrite")]
		public MultiTermQueryRewrite? FuzzyRewrite { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("operator")]
		public Operator? Operator { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("query")]
		public OneOf<string, float, bool> Query { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MoreLikeThisQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("boost_terms")]
		public double? BoostTerms { get; set; }

		[JsonPropertyName("fail_on_unsupported_field")]
		public bool? FailOnUnsupportedField { get; set; }

		[JsonPropertyName("fields")]
		public IEnumerable<Field>? Fields { get; set; }

		[JsonPropertyName("include")]
		public bool? Include { get; set; }

		[JsonPropertyName("like")]
		public Union<Like, IReadOnlyCollection<Like>> Like { get; set; }

		[JsonPropertyName("max_doc_freq")]
		public int? MaxDocFreq { get; set; }

		[JsonPropertyName("max_query_terms")]
		public int? MaxQueryTerms { get; set; }

		[JsonPropertyName("max_word_length")]
		public int? MaxWordLength { get; set; }

		[JsonPropertyName("min_doc_freq")]
		public int? MinDocFreq { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("min_term_freq")]
		public int? MinTermFreq { get; set; }

		[JsonPropertyName("min_word_length")]
		public int? MinWordLength { get; set; }

		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<Field, string>? PerFieldAnalyzer { get; set; }

		[JsonPropertyName("routing")]
		public Routing? Routing { get; set; }

		[JsonPropertyName("stop_words")]
		public StopWords? StopWords { get; set; }

		[JsonPropertyName("unlike")]
		public Union<Like, IReadOnlyCollection<Like>>? Unlike { get; set; }

		[JsonPropertyName("version")]
		public VersionNumber? Version { get; set; }

		[JsonPropertyName("version_type")]
		public VersionType? VersionType { get; set; }
	}

	public partial class MultiMatchQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency { get; set; }

		[JsonPropertyName("fields")]
		public Fields? Fields { get; set; }

		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("fuzzy_rewrite")]
		public MultiTermQueryRewrite? FuzzyRewrite { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("operator")]
		public Operator? Operator { get; set; }

		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonPropertyName("type")]
		public TextQueryType? Type { get; set; }

		[JsonPropertyName("zero_terms_query")]
		public ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class NestedQuery : QueryBase
	{
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("inner_hits")]
		public InnerHits? InnerHits { get; set; }

		[JsonPropertyName("path")]
		public Field Path { get; set; }

		[JsonPropertyName("query")]
		public QueryContainer Query { get; set; }

		[JsonPropertyName("score_mode")]
		public NestedScoreMode? ScoreMode { get; set; }
	}

	public partial class NumberRangeQuery : RangeQueryBase
	{
		[JsonPropertyName("gt")]
		public double? Gt
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gte")]
		public double? Gte
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lt")]
		public double? Lt
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lte")]
		public double? Lte
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumericDecayFunction : DecayFunctionBase
	{
	}

	public partial class ParentIdQuery : QueryBase
	{
		[JsonPropertyName("id")]
		public Id? Id { get; set; }

		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("type")]
		public RelationName? Type { get; set; }
	}

	public partial class PercolateQuery : QueryBase
	{
		[JsonPropertyName("document")]
		public object? Document { get; set; }

		[JsonPropertyName("documents")]
		public IEnumerable<object>? Documents { get; set; }

		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("id")]
		public Id? Id { get; set; }

		[JsonPropertyName("index")]
		public IndexName? Index { get; set; }

		[JsonPropertyName("name")]
		public string? Name { get; set; }

		[JsonPropertyName("preference")]
		public string? Preference { get; set; }

		[JsonPropertyName("routing")]
		public Routing? Routing { get; set; }

		[JsonPropertyName("version")]
		public VersionNumber? Version { get; set; }
	}

	public partial class PinnedQuery : QueryBase
	{
		[JsonPropertyName("ids")]
		public IEnumerable<Id> Ids { get; set; }

		[JsonPropertyName("organic")]
		public QueryContainer Organic { get; set; }
	}

	public partial class PrefixQuery : QueryBase
	{
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonPropertyName("rewrite")]
		public MultiTermQueryRewrite? Rewrite { get; set; }

		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class QueryContainer
	{
		[JsonPropertyName("bool")]
		public BoolQuery? Bool { get; set; }

		[JsonPropertyName("boosting")]
		public BoostingQuery? Boosting { get; set; }

		[JsonPropertyName("combined_fields")]
		public CombinedFieldsQuery? CombinedFields { get; set; }

		[JsonPropertyName("common")]
		public Dictionary<Field, CommonTermsQuery>? Common { get; set; }

		[JsonPropertyName("constant_score")]
		public ConstantScoreQuery? ConstantScore { get; set; }

		[JsonPropertyName("dis_max")]
		public DisMaxQuery? DisMax { get; set; }

		[JsonPropertyName("distance_feature")]
		public DistanceFeatureQuery? DistanceFeature { get; set; }

		[JsonPropertyName("exists")]
		public ExistsQuery? Exists { get; set; }

		[JsonPropertyName("field_masking_span")]
		public SpanFieldMaskingQuery? FieldMaskingSpan { get; set; }

		[JsonPropertyName("function_score")]
		public FunctionScoreQuery? FunctionScore { get; set; }

		[JsonPropertyName("fuzzy")]
		public Dictionary<Field, FuzzyQuery>? Fuzzy { get; set; }

		[JsonPropertyName("geo_bounding_box")]
		public GeoBoundingBoxQuery? GeoBoundingBox { get; set; }

		[JsonPropertyName("geo_distance")]
		public GeoDistanceQuery? GeoDistance { get; set; }

		[JsonPropertyName("geo_polygon")]
		public GeoPolygonQuery? GeoPolygon { get; set; }

		[JsonPropertyName("geo_shape")]
		public GeoShapeQuery? GeoShape { get; set; }

		[JsonPropertyName("has_child")]
		public HasChildQuery? HasChild { get; set; }

		[JsonPropertyName("has_parent")]
		public HasParentQuery? HasParent { get; set; }

		[JsonPropertyName("ids")]
		public IdsQuery? Ids { get; set; }

		[JsonPropertyName("intervals")]
		public Dictionary<Field, IntervalsQuery>? Intervals { get; set; }

		[JsonPropertyName("match")]
		public Dictionary<Field, MatchQuery>? Match { get; set; }

		[JsonPropertyName("match_all")]
		public MatchAllQuery? MatchAll { get; set; }

		[JsonPropertyName("match_bool_prefix")]
		public Dictionary<Field, MatchBoolPrefixQuery>? MatchBoolPrefix { get; set; }

		[JsonPropertyName("match_none")]
		public MatchNoneQuery? MatchNone { get; set; }

		[JsonPropertyName("match_phrase")]
		public Dictionary<Field, MatchPhraseQuery>? MatchPhrase { get; set; }

		[JsonPropertyName("match_phrase_prefix")]
		public Dictionary<Field, MatchPhrasePrefixQuery>? MatchPhrasePrefix { get; set; }

		[JsonPropertyName("more_like_this")]
		public MoreLikeThisQuery? MoreLikeThis { get; set; }

		[JsonPropertyName("multi_match")]
		public MultiMatchQuery? MultiMatch { get; set; }

		[JsonPropertyName("nested")]
		public NestedQuery? Nested { get; set; }

		[JsonPropertyName("parent_id")]
		public ParentIdQuery? ParentId { get; set; }

		[JsonPropertyName("percolate")]
		public PercolateQuery? Percolate { get; set; }

		[JsonPropertyName("pinned")]
		public PinnedQuery? Pinned { get; set; }

		[JsonPropertyName("prefix")]
		public Dictionary<Field, PrefixQuery>? Prefix { get; set; }

		[JsonPropertyName("query_string")]
		public QueryStringQuery? QueryString { get; set; }

		[JsonPropertyName("range")]
		public Dictionary<Field, RangeQuery>? Range { get; set; }

		[JsonPropertyName("rank_feature")]
		public RankFeatureQuery? RankFeature { get; set; }

		[JsonPropertyName("regexp")]
		public Dictionary<Field, RegexpQuery>? Regexp { get; set; }

		[JsonPropertyName("script")]
		public ScriptQuery? Script { get; set; }

		[JsonPropertyName("script_score")]
		public ScriptScoreQuery? ScriptScore { get; set; }

		[JsonPropertyName("shape")]
		public ShapeQuery? Shape { get; set; }

		[JsonPropertyName("simple_query_string")]
		public SimpleQueryStringQuery? SimpleQueryString { get; set; }

		[JsonPropertyName("span_containing")]
		public SpanContainingQuery? SpanContaining { get; set; }

		[JsonPropertyName("span_first")]
		public SpanFirstQuery? SpanFirst { get; set; }

		[JsonPropertyName("span_multi")]
		public SpanMultiTermQuery? SpanMulti { get; set; }

		[JsonPropertyName("span_near")]
		public SpanNearQuery? SpanNear { get; set; }

		[JsonPropertyName("span_not")]
		public SpanNotQuery? SpanNot { get; set; }

		[JsonPropertyName("span_or")]
		public SpanOrQuery? SpanOr { get; set; }

		[JsonPropertyName("span_term")]
		public Dictionary<Field, SpanTermQuery>? SpanTerm { get; set; }

		[JsonPropertyName("span_within")]
		public SpanWithinQuery? SpanWithin { get; set; }

		[JsonPropertyName("term")]
		public Dictionary<Field, TermQuery>? Term { get; set; }

		[JsonPropertyName("terms")]
		public TermsQuery? Terms { get; set; }

		[JsonPropertyName("terms_set")]
		public Dictionary<Field, TermsSetQuery>? TermsSet { get; set; }

		[JsonPropertyName("type")]
		public TypeQuery? Type { get; set; }

		[JsonPropertyName("wildcard")]
		public Dictionary<Field, WildcardQuery>? Wildcard { get; set; }
	}

	public partial class QueryStringQuery : QueryBase
	{
		[JsonPropertyName("allow_leading_wildcard")]
		public bool? AllowLeadingWildcard { get; set; }

		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("default_field")]
		public Field? DefaultField { get; set; }

		[JsonPropertyName("default_operator")]
		public Operator? DefaultOperator { get; set; }

		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; set; }

		[JsonPropertyName("escape")]
		public bool? Escape { get; set; }

		[JsonPropertyName("fields")]
		public IEnumerable<Field>? Fields { get; set; }

		[JsonPropertyName("fuzziness")]
		public Fuzziness? Fuzziness { get; set; }

		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonPropertyName("fuzzy_rewrite")]
		public MultiTermQueryRewrite? FuzzyRewrite { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("phrase_slop")]
		public double? PhraseSlop { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("quote_analyzer")]
		public string? QuoteAnalyzer { get; set; }

		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }

		[JsonPropertyName("rewrite")]
		public MultiTermQueryRewrite? Rewrite { get; set; }

		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonPropertyName("time_zone")]
		public TimeZone? TimeZone { get; set; }

		[JsonPropertyName("type")]
		public TextQueryType? Type { get; set; }
	}

	public partial class RandomScoreFunction : ScoreFunctionBase
	{
		[JsonPropertyName("field")]
		public Field? Field { get; set; }

		[JsonPropertyName("seed")]
		public Union<long, string>? Seed { get; set; }
	}

	public partial class RangeQueryBase : QueryBase
	{
		[JsonPropertyName("relation")]
		public RangeRelation? Relation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RankFeatureFunction
	{
	}

	public partial class RankFeatureFunctionLinear : RankFeatureFunction
	{
	}

	public partial class RankFeatureFunctionLogarithm : RankFeatureFunction
	{
		[JsonPropertyName("scaling_factor")]
		public float ScalingFactor { get; set; }
	}

	public partial class RankFeatureFunctionSaturation : RankFeatureFunction
	{
		[JsonPropertyName("pivot")]
		public float? Pivot { get; set; }
	}

	public partial class RankFeatureFunctionSigmoid : RankFeatureFunction
	{
		[JsonPropertyName("exponent")]
		public float Exponent { get; set; }

		[JsonPropertyName("pivot")]
		public float Pivot { get; set; }
	}

	public partial class RankFeatureQuery : QueryBase
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("linear")]
		public RankFeatureFunctionLinear? Linear { get; set; }

		[JsonPropertyName("log")]
		public RankFeatureFunctionLogarithm? Log { get; set; }

		[JsonPropertyName("saturation")]
		public RankFeatureFunctionSaturation? Saturation { get; set; }

		[JsonPropertyName("sigmoid")]
		public RankFeatureFunctionSigmoid? Sigmoid { get; set; }
	}

	public partial class RegexpQuery : QueryBase
	{
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonPropertyName("flags")]
		public string? Flags { get; set; }

		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates { get; set; }

		[JsonPropertyName("rewrite")]
		public MultiTermQueryRewrite? Rewrite { get; set; }

		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class ScoreFunctionBase
	{
		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("weight")]
		public double? Weight { get; set; }
	}

	public partial class ScriptQuery : QueryBase
	{
		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class ScriptScoreFunction : ScoreFunctionBase
	{
		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class ScriptScoreQuery : QueryBase
	{
		[JsonPropertyName("min_score")]
		public float? MinScore { get; set; }

		[JsonPropertyName("query")]
		public QueryContainer Query { get; set; }

		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class ShapeQuery : QueryBase
	{
	}

	public partial class SimpleQueryStringQuery : QueryBase
	{
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonPropertyName("default_operator")]
		public Operator? DefaultOperator { get; set; }

		[JsonPropertyName("fields")]
		public IEnumerable<Field>? Fields { get; set; }

		[JsonPropertyName("flags")]
		public Union<SimpleQueryStringFlags, string>? Flags { get; set; }

		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonPropertyName("minimum_should_match")]
		public MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }
	}

	public partial class SpanContainingQuery : QueryBase
	{
		[JsonPropertyName("big")]
		public SpanQuery Big { get; set; }

		[JsonPropertyName("little")]
		public SpanQuery Little { get; set; }
	}

	public partial class SpanFieldMaskingQuery : QueryBase
	{
		[JsonPropertyName("field")]
		public Field Field { get; set; }

		[JsonPropertyName("query")]
		public SpanQuery Query { get; set; }
	}

	public partial class SpanFirstQuery : QueryBase
	{
		[JsonPropertyName("end")]
		public int End { get; set; }

		[JsonPropertyName("match")]
		public SpanQuery Match { get; set; }
	}

	public partial class SpanMultiTermQuery : QueryBase
	{
		[JsonPropertyName("match")]
		public QueryContainer Match { get; set; }
	}

	public partial class SpanNearQuery : QueryBase
	{
		[JsonPropertyName("clauses")]
		public IEnumerable<SpanQuery> Clauses { get; set; }

		[JsonPropertyName("in_order")]
		public bool? InOrder { get; set; }

		[JsonPropertyName("slop")]
		public int? Slop { get; set; }
	}

	public partial class SpanNotQuery : QueryBase
	{
		[JsonPropertyName("dist")]
		public int? Dist { get; set; }

		[JsonPropertyName("exclude")]
		public SpanQuery Exclude { get; set; }

		[JsonPropertyName("include")]
		public SpanQuery Include { get; set; }

		[JsonPropertyName("post")]
		public int? Post { get; set; }

		[JsonPropertyName("pre")]
		public int? Pre { get; set; }
	}

	public partial class SpanOrQuery : QueryBase
	{
		[JsonPropertyName("clauses")]
		public IEnumerable<SpanQuery> Clauses { get; set; }
	}

	public partial class SpanQuery
	{
		[JsonPropertyName("field_masking_span")]
		public SpanFieldMaskingQuery? FieldMaskingSpan { get; set; }

		[JsonPropertyName("span_containing")]
		public SpanContainingQuery? SpanContaining { get; set; }

		[JsonPropertyName("span_first")]
		public SpanFirstQuery? SpanFirst { get; set; }

		[JsonPropertyName("span_gap")]
		public Dictionary<Field, int>? SpanGap { get; set; }

		[JsonPropertyName("span_multi")]
		public SpanMultiTermQuery? SpanMulti { get; set; }

		[JsonPropertyName("span_near")]
		public SpanNearQuery? SpanNear { get; set; }

		[JsonPropertyName("span_not")]
		public SpanNotQuery? SpanNot { get; set; }

		[JsonPropertyName("span_or")]
		public SpanOrQuery? SpanOr { get; set; }

		[JsonPropertyName("span_term")]
		public Dictionary<Field, SpanTermQuery>? SpanTerm { get; set; }

		[JsonPropertyName("span_within")]
		public SpanWithinQuery? SpanWithin { get; set; }
	}

	public partial class SpanTermQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class SpanWithinQuery : QueryBase
	{
		[JsonPropertyName("big")]
		public SpanQuery Big { get; set; }

		[JsonPropertyName("little")]
		public SpanQuery Little { get; set; }
	}

	public partial class TermQuery : QueryBase
	{
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonPropertyName("value")]
		public OneOf<string, float, bool> Value { get; set; }
	}

	public partial class TermsQuery : QueryBase
	{
	}

	public partial class TermsSetQuery : QueryBase
	{
	}

	public partial class ThreeDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("z")]
		public double? z
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TwoDimensionalPoint
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TypeQuery : QueryBase
	{
		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class WildcardQuery : QueryBase
	{
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonPropertyName("rewrite")]
		public MultiTermQueryRewrite? Rewrite { get; set; }

		[JsonPropertyName("value")]
		public string Value { get; set; }
	}

	public partial class ClusterStateBlockIndex
	{
		[JsonPropertyName("aliases")]
		public IReadOnlyCollection<IndexAlias>? Aliases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("aliases_version")]
		public VersionNumber? AliasesVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("in_sync_allocations")]
		public Dictionary<string, IReadOnlyCollection<string>>? InSyncAllocations
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("levels")]
		public IReadOnlyCollection<string>? Levels
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings")]
		public Dictionary<string, TypeMapping>? Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mapping_version")]
		public VersionNumber? MappingVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_terms")]
		public Dictionary<string, int>? PrimaryTerms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retryable")]
		public bool? Retryable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rollover_info")]
		public Dictionary<string, RolloverConditions>? RolloverInfo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_num_shards")]
		public VersionNumber? RoutingNumShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings")]
		public Dictionary<IndexName, IndexSettings>? Settings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings_version")]
		public VersionNumber? SettingsVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string? State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("system")]
		public bool? System
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp_range")]
		public Dictionary<string, object>? TimestampRange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateDeletedSnapshots
	{
		[JsonPropertyName("snapshot_deletions")]
		public IReadOnlyCollection<string> SnapshotDeletions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecycle
	{
		[JsonPropertyName("operation_mode")]
		public LifecycleOperationMode OperationMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policies")]
		public Dictionary<IndexName, ClusterStateIndexLifecycleSummary> Policies
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecyclePolicy
	{
		[JsonPropertyName("phases")]
		public Phases Phases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecycleSummary
	{
		[JsonPropertyName("headers")]
		public HttpHeaders Headers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modified_date")]
		public long ModifiedDate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modified_date_string")]
		public DateString ModifiedDateString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy")]
		public ClusterStateIndexLifecyclePolicy Policy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngest
	{
		[JsonPropertyName("pipeline")]
		public IReadOnlyCollection<ClusterStateIngestPipeline> Pipeline
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngestPipeline
	{
		[JsonPropertyName("config")]
		public ClusterStateIngestPipelineConfig Config
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngestPipelineConfig
	{
		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processors")]
		public IReadOnlyCollection<ProcessorContainer> Processors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadata
	{
		[JsonPropertyName("cluster_coordination")]
		public ClusterStateMetadataClusterCoordination ClusterCoordination
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid")]
		public Uuid ClusterUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid_committed")]
		public bool ClusterUuidCommitted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("component_template")]
		public Dictionary<string, object>? ComponentTemplate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index-graveyard")]
		public ClusterStateMetadataIndexGraveyard IndexGraveyard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_lifecycle")]
		public ClusterStateIndexLifecycle? IndexLifecycle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_template")]
		public Dictionary<string, object>? IndexTemplate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indices")]
		public Dictionary<IndexName, ClusterStateBlockIndex>? Indices
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public ClusterStateIngest? Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repositories")]
		public Dictionary<string, string>? Repositories
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("templates")]
		public ClusterStateMetadataTemplate Templates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataClusterCoordination
	{
		[JsonPropertyName("last_accepted_config")]
		public IReadOnlyCollection<string> LastAcceptedConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_committed_config")]
		public IReadOnlyCollection<string> LastCommittedConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term")]
		public int Term
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("voting_config_exclusions")]
		public IReadOnlyCollection<VotingConfigExclusionsItem> VotingConfigExclusions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataIndexGraveyard
	{
		[JsonPropertyName("tombstones")]
		public IReadOnlyCollection<Tombstone> Tombstones
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataTemplate
	{
	}

	public partial class ClusterStateRoutingNodes
	{
		[JsonPropertyName("nodes")]
		public Dictionary<string, IReadOnlyCollection<NodeShard>> Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned")]
		public IReadOnlyCollection<NodeShard> Unassigned
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateSnapshots
	{
		[JsonPropertyName("snapshots")]
		public IReadOnlyCollection<Status> Snapshots
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ComponentTemplate
	{
		[JsonPropertyName("component_template")]
		public ComponentTemplateNode ComponentTemplate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ComponentTemplateNode
	{
		[JsonPropertyName("_meta")]
		public Metadata? Meta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public ComponentTemplateSummary Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ComponentTemplateSummary
	{
		[JsonPropertyName("aliases")]
		public Dictionary<string, AliasDefinition>? Aliases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings")]
		public TypeMapping? Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_meta")]
		public Metadata? Meta
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings")]
		public Dictionary<IndexName, IndexSettings> Settings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Tombstone
	{
		[JsonPropertyName("delete_date")]
		public DateString? DeleteDate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_date_in_millis")]
		public long DeleteDateInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public TombstoneIndex Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TombstoneIndex
	{
		[JsonPropertyName("index_name")]
		public Name IndexName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_uuid")]
		public Uuid IndexUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class VotingConfigExclusionsItem
	{
		[JsonPropertyName("node_id")]
		public Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AllocationDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public AllocationExplainDecision Decision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AllocationStore
	{
		[JsonPropertyName("allocation_id")]
		public string AllocationId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("in_sync")]
		public bool InSync
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_size_in_bytes")]
		public long MatchingSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_sync_id")]
		public bool MatchingSyncId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store_exception")]
		public string StoreException
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterInfo
	{
		[JsonPropertyName("nodes")]
		public Dictionary<string, NodeDiskUsage> Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reserved_sizes")]
		public IReadOnlyCollection<ReservedSize> ReservedSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_data_set_sizes")]
		public Dictionary<string, string>? ShardDataSetSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_paths")]
		public Dictionary<string, string> ShardPaths
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_sizes")]
		public Dictionary<string, long> ShardSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CurrentNode
	{
		[JsonPropertyName("attributes")]
		public Dictionary<string, string> Attributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DiskUsage
	{
		[JsonPropertyName("free_bytes")]
		public long FreeBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_disk_percent")]
		public double FreeDiskPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_bytes")]
		public long TotalBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_bytes")]
		public long UsedBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_disk_percent")]
		public double UsedDiskPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeAllocationExplanation
	{
		[JsonPropertyName("deciders")]
		public IReadOnlyCollection<AllocationDecision> Deciders
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_attributes")]
		public Dictionary<string, string> NodeAttributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_decision")]
		public Decision NodeDecision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_id")]
		public Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public AllocationStore? Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeDiskUsage
	{
		[JsonPropertyName("least_available")]
		public DiskUsage LeastAvailable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("most_available")]
		public DiskUsage MostAvailable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ReservedSize
	{
		[JsonPropertyName("node_id")]
		public Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public IReadOnlyCollection<string> Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UnassignedInformation
	{
		[JsonPropertyName("allocation_status")]
		public string? AllocationStatus
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("at")]
		public DateString At
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delayed")]
		public bool? Delayed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public string? Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_allocation_attempts")]
		public int? FailedAllocationAttempts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_allocation_status")]
		public string? LastAllocationStatus
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public UnassignedInformationReason Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexHealthStats
	{
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_replicas")]
		public int NumberOfReplicas
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_shards")]
		public int NumberOfShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public Dictionary<string, ShardHealthStats>? Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Health Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardHealthStats
	{
		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_active")]
		public bool PrimaryActive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Health Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PendingTask
	{
		[JsonPropertyName("insert_order")]
		public int InsertOrder
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("priority")]
		public string Priority
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue")]
		public string TimeInQueue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue_millis")]
		public int TimeInQueueMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Command
	{
		[JsonPropertyName("allocate_empty_primary")]
		public CommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }

		[JsonPropertyName("allocate_replica")]
		public CommandAllocateReplicaAction? AllocateReplica { get; set; }

		[JsonPropertyName("allocate_stale_primary")]
		public CommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		[JsonPropertyName("cancel")]
		public CommandCancelAction? Cancel { get; set; }

		[JsonPropertyName("move")]
		public CommandMoveAction? Move { get; set; }
	}

	public partial class CommandAllocatePrimaryAction
	{
		[JsonPropertyName("accept_data_loss")]
		public bool AcceptDataLoss { get; set; }

		[JsonPropertyName("index")]
		public IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandAllocateReplicaAction
	{
		[JsonPropertyName("index")]
		public IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandCancelAction
	{
		[JsonPropertyName("allow_primary")]
		public bool? AllowPrimary { get; set; }

		[JsonPropertyName("index")]
		public IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandMoveAction
	{
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonPropertyName("index")]
		public IndexName Index { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	public partial class RerouteDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public string Decision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteExplanation
	{
		[JsonPropertyName("command")]
		public string Command
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decisions")]
		public IReadOnlyCollection<RerouteDecision> Decisions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("parameters")]
		public RerouteParameters Parameters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteParameters
	{
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("from_node")]
		public NodeName? FromNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public NodeName Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("to_node")]
		public NodeName? ToNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteState
	{
		[JsonPropertyName("blocks")]
		public EmptyObject? Blocks
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid")]
		public Uuid ClusterUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("master_node")]
		public string? MasterNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("metadata")]
		public ClusterStateMetadata? Metadata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("nodes")]
		public Dictionary<NodeName, NodeAttributes>? Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_nodes")]
		public ClusterStateRoutingNodes? RoutingNodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_table")]
		public Dictionary<string, EmptyObject>? RoutingTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("security_tokens")]
		public Dictionary<string, string>? SecurityTokens
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot_deletions")]
		public ClusterStateDeletedSnapshots? SnapshotDeletions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshots")]
		public ClusterStateSnapshots? Snapshots
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state_uuid")]
		public Uuid? StateUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateBlocks
	{
		[JsonPropertyName("indices")]
		public Dictionary<IndexName, Dictionary<string, ClusterStateBlockIndex>>? Indices
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharFilterTypes
	{
		[JsonPropertyName("analyzer_types")]
		public IReadOnlyCollection<FieldTypes> AnalyzerTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_analyzers")]
		public IReadOnlyCollection<FieldTypes> BuiltInAnalyzers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_char_filters")]
		public IReadOnlyCollection<FieldTypes> BuiltInCharFilters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_filters")]
		public IReadOnlyCollection<FieldTypes> BuiltInFilters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_tokenizers")]
		public IReadOnlyCollection<FieldTypes> BuiltInTokenizers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("char_filter_types")]
		public IReadOnlyCollection<FieldTypes> CharFilterTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("filter_types")]
		public IReadOnlyCollection<FieldTypes> FilterTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer_types")]
		public IReadOnlyCollection<FieldTypes> TokenizerTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterFileSystem
	{
		[JsonPropertyName("available_in_bytes")]
		public long AvailableInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndices
	{
		[JsonPropertyName("analysis")]
		public CharFilterTypes Analysis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("completion")]
		public CompletionStats Completion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("docs")]
		public DocStats Docs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public FielddataStats Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings")]
		public FieldTypesMappings Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_cache")]
		public QueryCacheStats QueryCache
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("segments")]
		public SegmentsStats Segments
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public ClusterIndicesShards Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public StoreStats Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<IndicesVersions>? Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndicesShards
	{
		[JsonPropertyName("index")]
		public ClusterIndicesShardsIndex? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primaries")]
		public double? Primaries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replication")]
		public double? Replication
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public double? Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndicesShardsIndex
	{
		[JsonPropertyName("primaries")]
		public ClusterShardMetrics Primaries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replication")]
		public ClusterShardMetrics Replication
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public ClusterShardMetrics Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIngest
	{
		[JsonPropertyName("number_of_pipelines")]
		public int NumberOfPipelines
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_stats")]
		public Dictionary<string, ClusterProcessor> ProcessorStats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvm
	{
		[JsonPropertyName("max_uptime_in_millis")]
		public long MaxUptimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public ClusterJvmMemory Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("threads")]
		public long Threads
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<ClusterJvmVersion> Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvmMemory
	{
		[JsonPropertyName("heap_max_in_bytes")]
		public long HeapMaxInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_used_in_bytes")]
		public long HeapUsedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvmVersion
	{
		[JsonPropertyName("bundled_jdk")]
		public bool BundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("using_bundled_jdk")]
		public bool UsingBundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_name")]
		public string VmName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_vendor")]
		public string VmVendor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_version")]
		public VersionString VmVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNetworkTypes
	{
		[JsonPropertyName("http_types")]
		public Dictionary<string, int> HttpTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_types")]
		public Dictionary<string, int> TransportTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNodeCount
	{
		[JsonPropertyName("coordinating_only")]
		public int CoordinatingOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data")]
		public int Data
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_cold")]
		public int DataCold
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_content")]
		public int DataContent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_frozen")]
		public int? DataFrozen
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_hot")]
		public int DataHot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_warm")]
		public int DataWarm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public int Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("master")]
		public int Master
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ml")]
		public int Ml
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_cluster_client")]
		public int RemoteClusterClient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transform")]
		public int Transform
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("voting_only")]
		public int VotingOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNodes
	{
		[JsonPropertyName("count")]
		public ClusterNodeCount Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discovery_types")]
		public Dictionary<string, int> DiscoveryTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fs")]
		public ClusterFileSystem Fs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public ClusterIngest Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("jvm")]
		public ClusterJvm Jvm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("network_types")]
		public ClusterNetworkTypes NetworkTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("os")]
		public ClusterOperatingSystem Os
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("packaging_types")]
		public IReadOnlyCollection<NodePackagingType> PackagingTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("plugins")]
		public IReadOnlyCollection<PluginStats> Plugins
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("process")]
		public ClusterProcess Process
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<VersionString> Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystem
	{
		[JsonPropertyName("allocated_processors")]
		public int AllocatedProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("architectures")]
		public IReadOnlyCollection<ClusterOperatingSystemArchitecture>? Architectures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_processors")]
		public int AvailableProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public OperatingSystemMemoryInfo Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("names")]
		public IReadOnlyCollection<ClusterOperatingSystemName> Names
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretty_names")]
		public IReadOnlyCollection<ClusterOperatingSystemName> PrettyNames
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystemArchitecture
	{
		[JsonPropertyName("arch")]
		public string Arch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystemName
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcess
	{
		[JsonPropertyName("cpu")]
		public ClusterProcessCpu Cpu
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("open_file_descriptors")]
		public ClusterProcessOpenFileDescriptors OpenFileDescriptors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessCpu
	{
		[JsonPropertyName("percent")]
		public int Percent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessOpenFileDescriptors
	{
		[JsonPropertyName("avg")]
		public long Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public long Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public long Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessor
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterShardMetrics
	{
		[JsonPropertyName("avg")]
		public double Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldTypes
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script_count")]
		public int? ScriptCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldTypesMappings
	{
		[JsonPropertyName("field_types")]
		public IReadOnlyCollection<FieldTypes> FieldTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("runtime_field_types")]
		public IReadOnlyCollection<RuntimeFieldTypes>? RuntimeFieldTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndicesVersions
	{
		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_count")]
		public int PrimaryShardCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_primary_bytes")]
		public long TotalPrimaryBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodePackagingType
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("flavor")]
		public string Flavor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class OperatingSystemMemoryInfo
	{
		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_percent")]
		public int FreePercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_in_bytes")]
		public long UsedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_percent")]
		public int UsedPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RuntimeFieldTypes
	{
		[JsonPropertyName("chars_max")]
		public int CharsMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("chars_total")]
		public int CharsTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_max")]
		public int DocMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_total")]
		public int DocTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public IReadOnlyCollection<string> Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_max")]
		public int LinesMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_total")]
		public int LinesTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scriptless_count")]
		public int ScriptlessCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shadowed_count")]
		public int ShadowedCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_max")]
		public int SourceMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_total")]
		public int SourceTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Action
	{
	}

	public partial class Phase
	{
		[JsonPropertyName("actions")]
		public Union<Dictionary<string, Action>, IReadOnlyCollection<string>> Actions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_age")]
		public Time? MinAge
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Phases
	{
		[JsonPropertyName("cold")]
		public Phase? Cold
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete")]
		public Phase? Delete
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hot")]
		public Phase? Hot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("warm")]
		public Phase? Warm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LifecycleExplain
	{
		[JsonPropertyName("action")]
		public Name Action
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("action_time_millis")]
		public EpochMillis ActionTimeMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("age")]
		public Time Age
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_step")]
		public Name? FailedStep
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_step_retry_count")]
		public int? FailedStepRetryCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("is_auto_retryable_error")]
		public bool? IsAutoRetryableError
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lifecycle_date_millis")]
		public EpochMillis LifecycleDateMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("managed")]
		public bool Managed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase")]
		public Name Phase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase_execution")]
		public LifecycleExplainPhaseExecution PhaseExecution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase_time_millis")]
		public EpochMillis PhaseTimeMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy")]
		public Name Policy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("step")]
		public Name Step
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("step_info")]
		public Dictionary<string, object>? StepInfo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("step_time_millis")]
		public EpochMillis StepTimeMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LifecycleExplainPhaseExecution
	{
		[JsonPropertyName("modified_date_in_millis")]
		public EpochMillis ModifiedDateInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy")]
		public Name Policy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public VersionNumber Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LifecycleExplainProject
	{
		[JsonPropertyName("project")]
		public LifecycleExplainProjectSummary Project
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LifecycleExplainProjectSummary
	{
		[JsonPropertyName("index")]
		public IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("managed")]
		public bool Managed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StepKey
	{
		[JsonPropertyName("action")]
		public string Action { get; set; }

		[JsonPropertyName("name")]
		public string Name { get; set; }

		[JsonPropertyName("phase")]
		public string Phase { get; set; }
	}

	public partial class Alias
	{
		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("index_routing")]
		public Routing? IndexRouting { get; set; }

		[JsonPropertyName("is_hidden")]
		public bool? IsHidden { get; set; }

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonPropertyName("routing")]
		public Routing? Routing { get; set; }

		[JsonPropertyName("search_routing")]
		public Routing? SearchRouting { get; set; }
	}

	public partial class AliasDefinition
	{
		[JsonPropertyName("filter")]
		public QueryContainer? Filter { get; set; }

		[JsonPropertyName("index_routing")]
		public string? IndexRouting { get; set; }

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonPropertyName("search_routing")]
		public string? SearchRouting { get; set; }
	}

	public partial class FielddataFrequencyFilter
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_segment_size")]
		public int MinSegmentSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexRouting
	{
		[JsonPropertyName("allocation")]
		public IndexRoutingAllocation? Allocation { get; set; }

		[JsonPropertyName("rebalance")]
		public IndexRoutingRebalance? Rebalance { get; set; }
	}

	public partial class IndexRoutingAllocation
	{
		[JsonPropertyName("disk")]
		public IndexRoutingAllocationDisk? Disk { get; set; }

		[JsonPropertyName("enable")]
		public IndexRoutingAllocationOptions? Enable { get; set; }

		[JsonPropertyName("include")]
		public IndexRoutingAllocationInclude? Include { get; set; }

		[JsonPropertyName("initial_recovery")]
		public IndexRoutingAllocationInitialRecovery? InitialRecovery { get; set; }
	}

	public partial class IndexRoutingAllocationDisk
	{
		[JsonPropertyName("threshold_enabled")]
		public Union<bool, string> ThresholdEnabled { get; set; }
	}

	public partial class IndexRoutingAllocationInclude
	{
		[JsonPropertyName("_id")]
		public Id? Id { get; set; }

		[JsonPropertyName("_tier_preference")]
		public string? TierPreference { get; set; }
	}

	public partial class IndexRoutingAllocationInitialRecovery
	{
		[JsonPropertyName("_id")]
		public Id? Id { get; set; }
	}

	public partial class IndexRoutingRebalance
	{
		[JsonPropertyName("enable")]
		public IndexRoutingRebalanceOptions Enable { get; set; }
	}

	public partial class IndexSettingBlocks
	{
		[JsonPropertyName("metadata")]
		public bool? Metadata { get; set; }

		[JsonPropertyName("read")]
		public bool? Read { get; set; }

		[JsonPropertyName("read_only")]
		public bool? ReadOnly { get; set; }

		[JsonPropertyName("read_only_allow_delete")]
		public bool? ReadOnlyAllowDelete { get; set; }

		[JsonPropertyName("write")]
		public Union<bool, string>? Write { get; set; }
	}

	public partial class IndexSettings
	{
		[JsonPropertyName("analysis")]
		public IndexSettingsAnalysis? Analysis { get; set; }

		[JsonPropertyName("analyze.max_token_count")]
		public int? AnalyzeMaxTokenCount { get; set; }

		[JsonPropertyName("auto_expand_replicas")]
		public string? AutoExpandReplicas { get; set; }

		[JsonPropertyName("blocks")]
		public IndexSettingBlocks? Blocks { get; set; }

		[JsonPropertyName("check_on_startup")]
		public IndexCheckOnStartup? CheckOnStartup { get; set; }

		[JsonPropertyName("codec")]
		public string? Codec { get; set; }

		[JsonPropertyName("creation_date")]
		public DateString? CreationDate { get; set; }

		[JsonPropertyName("default_pipeline")]
		public PipelineName? DefaultPipeline { get; set; }

		[JsonPropertyName("final_pipeline")]
		public PipelineName? FinalPipeline { get; set; }

		[JsonPropertyName("format")]
		public Union<string, int>? Format { get; set; }

		[JsonPropertyName("gc_deletes")]
		public Time? GcDeletes { get; set; }

		[JsonPropertyName("hidden")]
		public Union<bool, string>? Hidden { get; set; }

		[JsonPropertyName("highlight.max_analyzed_offset")]
		public int? HighlightMaxAnalyzedOffset { get; set; }

		[JsonPropertyName("lifecycle")]
		public IndexSettingsLifecycle? Lifecycle { get; set; }

		[JsonPropertyName("load_fixed_bitset_filters_eagerly")]
		public bool? LoadFixedBitsetFiltersEagerly { get; set; }

		[JsonPropertyName("max_docvalue_fields_search")]
		public int? MaxDocvalueFieldsSearch { get; set; }

		[JsonPropertyName("max_inner_result_window")]
		public int? MaxInnerResultWindow { get; set; }

		[JsonPropertyName("max_ngram_diff")]
		public int? MaxNgramDiff { get; set; }

		[JsonPropertyName("max_refresh_listeners")]
		public int? MaxRefreshListeners { get; set; }

		[JsonPropertyName("max_regex_length")]
		public int? MaxRegexLength { get; set; }

		[JsonPropertyName("max_rescore_window")]
		public int? MaxRescoreWindow { get; set; }

		[JsonPropertyName("max_result_window")]
		public int? MaxResultWindow { get; set; }

		[JsonPropertyName("max_script_fields")]
		public int? MaxScriptFields { get; set; }

		[JsonPropertyName("max_shingle_diff")]
		public int? MaxShingleDiff { get; set; }

		[JsonPropertyName("max_slices_per_scroll")]
		public int? MaxSlicesPerScroll { get; set; }

		[JsonPropertyName("max_terms_count")]
		public int? MaxTermsCount { get; set; }

		[JsonPropertyName("number_of_replicas")]
		public Union<int, string>? NumberOfReplicas { get; set; }

		[JsonPropertyName("number_of_routing_shards")]
		public int? NumberOfRoutingShards { get; set; }

		[JsonPropertyName("number_of_shards")]
		public Union<int, string>? NumberOfShards { get; set; }

		[JsonPropertyName("priority")]
		public Union<int, string>? Priority { get; set; }

		[JsonPropertyName("provided_name")]
		public Name? ProvidedName { get; set; }

		[JsonPropertyName("query_string.lenient")]
		public Union<bool, string>? QueryStringLenient { get; set; }

		[JsonPropertyName("refresh_interval")]
		public Time? RefreshInterval { get; set; }

		[JsonPropertyName("routing")]
		public IndexRouting? Routing { get; set; }

		[JsonPropertyName("routing_partition_size")]
		public Union<int, string>? RoutingPartitionSize { get; set; }

		[JsonPropertyName("search.idle.after")]
		public Time? SearchIdleAfter { get; set; }

		[JsonPropertyName("soft_deletes.retention_lease.period")]
		public Time? SoftDeletesRetentionLeasePeriod { get; set; }

		[JsonPropertyName("top_metrics_max_size")]
		public int? TopMetricsMaxSize { get; set; }

		[JsonPropertyName("translog.durability")]
		public string? TranslogDurability { get; set; }

		[JsonPropertyName("uuid")]
		public Uuid? Uuid { get; set; }

		[JsonPropertyName("verified_before_close")]
		public Union<bool, string>? VerifiedBeforeClose { get; set; }

		[JsonPropertyName("version")]
		public IndexVersioning? Version { get; set; }
	}

	public partial class IndexSettingsAnalysis
	{
		[JsonPropertyName("char_filter")]
		public Dictionary<string, CharFilter>? CharFilter { get; set; }
	}

	public partial class IndexSettingsLifecycle
	{
		[JsonPropertyName("name")]
		public Name Name { get; set; }
	}

	public partial class IndexState
	{
		[JsonPropertyName("aliases")]
		public Dictionary<IndexName, Alias>? Aliases { get; set; }

		[JsonPropertyName("mappings")]
		public TypeMapping? Mappings { get; set; }

		[JsonPropertyName("settings")]
		public Union<IndexSettings, IndexStatePrefixedSettings> Settings { get; set; }
	}

	public partial class IndexStatePrefixedSettings
	{
		[JsonPropertyName("index")]
		public IndexSettings Index { get; set; }
	}

	public partial class IndexVersioning
	{
		[JsonPropertyName("created")]
		public VersionString Created { get; set; }
	}

	public partial class NumericFielddata
	{
		[JsonPropertyName("format")]
		public NumericFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringFielddata
	{
		[JsonPropertyName("format")]
		public StringFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RolloverConditions
	{
		[JsonPropertyName("max_age")]
		public Time? MaxAge
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_docs")]
		public long? MaxDocs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_primary_shard_size")]
		public ByteSize? MaxPrimaryShardSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_size")]
		public string? MaxSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardFileSizeInfo
	{
		[JsonPropertyName("average_size_in_bytes")]
		public long? AverageSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long? Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_size_in_bytes")]
		public long? MaxSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_size_in_bytes")]
		public long? MinSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AppendProcessor : ProcessorBase
	{
		[JsonPropertyName("allow_duplicates")]
		public bool? AllowDuplicates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public IReadOnlyCollection<object> Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AttachmentProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indexed_chars")]
		public long? IndexedChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indexed_chars_field")]
		public Field? IndexedCharsField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string>? Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_name")]
		public string? ResourceName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BytesProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CircleProcessor : ProcessorBase
	{
		[JsonPropertyName("error_distance")]
		public double ErrorDistance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_type")]
		public ShapeType ShapeType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConvertProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public ConvertType Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CsvProcessor : ProcessorBase
	{
		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("empty_value")]
		public object EmptyValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("quote")]
		public string? Quote
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string? Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_fields")]
		public Fields TargetFields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim")]
		public bool Trim
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateIndexNameProcessor : ProcessorBase
	{
		[JsonPropertyName("date_formats")]
		public IReadOnlyCollection<string> DateFormats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date_rounding")]
		public Union<string, DateRounding> DateRounding
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_format")]
		public string IndexNameFormat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_prefix")]
		public string IndexNamePrefix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string Timezone
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("formats")]
		public IReadOnlyCollection<string> Formats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string? Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string? Timezone
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DissectProcessor : ProcessorBase
	{
		[JsonPropertyName("append_separator")]
		public string AppendSeparator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DotExpanderProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string? Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DropProcessor : ProcessorBase
	{
	}

	public partial class EnrichProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_matches")]
		public int? MaxMatches
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy_name")]
		public string PolicyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_relation")]
		public GeoShapeRelation? ShapeRelation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FailProcessor : ProcessorBase
	{
		[JsonPropertyName("message")]
		public string Message
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ForeachProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor")]
		public ProcessorContainer Processor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoIpProcessor : ProcessorBase
	{
		[JsonPropertyName("database_file")]
		public string DatabaseFile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("first_only")]
		public bool FirstOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string> Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GrokProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern_definitions")]
		public Dictionary<string, string> PatternDefinitions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("patterns")]
		public IReadOnlyCollection<string> Patterns
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trace_match")]
		public bool? TraceMatch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GsubProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceConfig
	{
		[JsonPropertyName("regression")]
		public InferenceConfigRegression? Regression
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceConfigRegression
	{
		[JsonPropertyName("results_field")]
		public string ResultsField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceProcessor : ProcessorBase
	{
		[JsonPropertyName("field_map")]
		public Dictionary<Field, object>? FieldMap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inference_config")]
		public InferenceConfig? InferenceConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_id")]
		public Id ModelId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class JoinProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class JsonProcessor : ProcessorBase
	{
		[JsonPropertyName("add_to_root")]
		public bool AddToRoot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeyValueProcessor : ProcessorBase
	{
		[JsonPropertyName("exclude_keys")]
		public IReadOnlyCollection<string>? ExcludeKeys
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field_split")]
		public string FieldSplit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_keys")]
		public IReadOnlyCollection<string>? IncludeKeys
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strip_brackets")]
		public bool? StripBrackets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_key")]
		public string? TrimKey
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_value")]
		public string? TrimValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_split")]
		public string ValueSplit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PipelineProcessor : ProcessorBase
	{
		[JsonPropertyName("name")]
		public Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ProcessorBase
	{
		[JsonPropertyName("if")]
		public string? If
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("on_failure")]
		public IReadOnlyCollection<ProcessorContainer>? OnFailure
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tag")]
		public string? Tag
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ProcessorContainer
	{
		[JsonPropertyName("append")]
		public AppendProcessor? Append
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("attachment")]
		public AttachmentProcessor? Attachment
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes")]
		public BytesProcessor? Bytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("circle")]
		public CircleProcessor? Circle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("convert")]
		public ConvertProcessor? Convert
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("csv")]
		public CsvProcessor? Csv
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date")]
		public DateProcessor? Date
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date_index_name")]
		public DateIndexNameProcessor? DateIndexName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dissect")]
		public DissectProcessor? Dissect
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dot_expander")]
		public DotExpanderProcessor? DotExpander
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("drop")]
		public DropProcessor? Drop
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enrich")]
		public EnrichProcessor? Enrich
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fail")]
		public FailProcessor? Fail
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("foreach")]
		public ForeachProcessor? Foreach
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("geoip")]
		public GeoIpProcessor? Geoip
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grok")]
		public GrokProcessor? Grok
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gsub")]
		public GsubProcessor? Gsub
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inference")]
		public InferenceProcessor? Inference
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("join")]
		public JoinProcessor? Join
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("json")]
		public JsonProcessor? Json
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("kv")]
		public KeyValueProcessor? Kv
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lowercase")]
		public LowercaseProcessor? Lowercase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pipeline")]
		public PipelineProcessor? Pipeline
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remove")]
		public RemoveProcessor? Remove
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rename")]
		public RenameProcessor? Rename
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Script? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set")]
		public SetProcessor? Set
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_security_user")]
		public SetSecurityUserProcessor? SetSecurityUser
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public SortProcessor? Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split")]
		public SplitProcessor? Split
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim")]
		public TrimProcessor? Trim
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uppercase")]
		public UppercaseProcessor? Uppercase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("urldecode")]
		public UrlDecodeProcessor? Urldecode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_agent")]
		public UserAgentProcessor? UserAgent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RemoveProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Fields Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RenameProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SetProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SetSecurityUserProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string>? Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SortProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public SortOrder Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SplitProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_trailing")]
		public bool? PreserveTrailing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TrimProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UppercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UrlDecodeProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UserAgentProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("options")]
		public IReadOnlyCollection<UserAgentProperty> Options
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex_file")]
		public string RegexFile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeAnalysisAnalyzedFieldsIncludeExclude
	{
		[JsonPropertyName("excludes")]
		public IReadOnlyCollection<string> Excludes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("includes")]
		public IReadOnlyCollection<string> Includes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public InlineRoleTemplateSource Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineRoleTemplateSource
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InvalidRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public string Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StoredRoleTemplate
	{
		[JsonPropertyName("format")]
		public TemplateFormat? Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("template")]
		public StoredRoleTemplateId Template
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StoredRoleTemplateId
	{
		[JsonPropertyName("id")]
		public string Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FileCountSnapshotStats
	{
		[JsonPropertyName("file_count")]
		public int FileCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardsStats
	{
		[JsonPropertyName("done")]
		public long Done
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("finalizing")]
		public long Finalizing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing")]
		public long Initializing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("started")]
		public long Started
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardsStatsSummary
	{
		[JsonPropertyName("incremental")]
		public ShardsStatsSummaryItem Incremental
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public ShardsStatsSummaryItem Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardsStatsSummaryItem
	{
		[JsonPropertyName("file_count")]
		public long FileCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SnapshotIndexStats
	{
		[JsonPropertyName("shards")]
		public Dictionary<string, SnapshotShardsStatus> Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards_stats")]
		public ShardsStats ShardsStats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stats")]
		public SnapshotStats Stats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SnapshotShardsStatus
	{
		[JsonPropertyName("stage")]
		public ShardsStatsStage Stage
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stats")]
		public ShardsStatsSummary Stats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SnapshotStats
	{
		[JsonPropertyName("incremental")]
		public FileCountSnapshotStats Incremental
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start_time_in_millis")]
		public long StartTimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public FileCountSnapshotStats Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Status
	{
		[JsonPropertyName("include_global_state")]
		public bool IncludeGlobalState
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indices")]
		public Dictionary<string, SnapshotIndexStats> Indices
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repository")]
		public string Repository
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards_stats")]
		public ShardsStats ShardsStats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot")]
		public string Snapshot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stats")]
		public SnapshotStats Stats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uuid")]
		public Uuid Uuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AcknowledgeState
	{
		[JsonPropertyName("state")]
		public AcknowledgementOptions State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateString Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ActionStatus
	{
		[JsonPropertyName("ack")]
		public AcknowledgeState Ack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_execution")]
		public ExecutionState? LastExecution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_successful_execution")]
		public ExecutionState? LastSuccessfulExecution
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_throttle")]
		public ThrottleState? LastThrottle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExecutionState
	{
		[JsonPropertyName("successful")]
		public bool Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateString Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ThrottleState
	{
		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp")]
		public DateString Timestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BaseUrlConfig
	{
		[JsonPropertyName("url_name")]
		public string UrlName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("url_value")]
		public string UrlValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KibanaUrlConfig : BaseUrlConfig
	{
		[JsonPropertyName("time_range")]
		public string? TimeRange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}