// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class ClusterNamespace : NamespacedClientProxy
	{
		internal ClusterNamespace(ElasticClient client) : base(client)
		{
		}

		public ClusterAllocationExplainResponse AllocationExplain(IClusterAllocationExplainRequest request)
		{
			return DoRequest<IClusterAllocationExplainRequest, ClusterAllocationExplainResponse>(request, request.RequestParameters);
		}

		public Task<ClusterAllocationExplainResponse> AllocationExplainAsync(IClusterAllocationExplainRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterAllocationExplainRequest, ClusterAllocationExplainResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterAllocationExplainResponse AllocationExplain(Func<ClusterAllocationExplainDescriptor, IClusterAllocationExplainRequest> selector = null)
		{
			return AllocationExplain(selector.InvokeOrDefault(new ClusterAllocationExplainDescriptor()));
		}

		public Task<ClusterAllocationExplainResponse> AllocationExplainAsync(Func<ClusterAllocationExplainDescriptor, IClusterAllocationExplainRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return AllocationExplainAsync(selector.InvokeOrDefault(new ClusterAllocationExplainDescriptor()), cancellationToken);
		}

		public ClusterDeleteComponentTemplateResponse DeleteComponentTemplate(IClusterDeleteComponentTemplateRequest request)
		{
			return DoRequest<IClusterDeleteComponentTemplateRequest, ClusterDeleteComponentTemplateResponse>(request, request.RequestParameters);
		}

		public Task<ClusterDeleteComponentTemplateResponse> DeleteComponentTemplateAsync(IClusterDeleteComponentTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterDeleteComponentTemplateRequest, ClusterDeleteComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterDeleteComponentTemplateResponse DeleteComponentTemplate(Name name, Func<ClusterDeleteComponentTemplateDescriptor, IClusterDeleteComponentTemplateRequest> selector = null)
		{
			return DeleteComponentTemplate(selector.InvokeOrDefault(new ClusterDeleteComponentTemplateDescriptor(name)));
		}

		public Task<ClusterDeleteComponentTemplateResponse> DeleteComponentTemplateAsync(Name name, Func<ClusterDeleteComponentTemplateDescriptor, IClusterDeleteComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteComponentTemplateAsync(selector.InvokeOrDefault(new ClusterDeleteComponentTemplateDescriptor(name)), cancellationToken);
		}

		public ClusterDeleteVotingConfigExclusionsResponse DeleteVotingConfigExclusions(IClusterDeleteVotingConfigExclusionsRequest request)
		{
			return DoRequest<IClusterDeleteVotingConfigExclusionsRequest, ClusterDeleteVotingConfigExclusionsResponse>(request, request.RequestParameters);
		}

		public Task<ClusterDeleteVotingConfigExclusionsResponse> DeleteVotingConfigExclusionsAsync(IClusterDeleteVotingConfigExclusionsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterDeleteVotingConfigExclusionsRequest, ClusterDeleteVotingConfigExclusionsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterDeleteVotingConfigExclusionsResponse DeleteVotingConfigExclusions(Func<ClusterDeleteVotingConfigExclusionsDescriptor, IClusterDeleteVotingConfigExclusionsRequest> selector = null)
		{
			return DeleteVotingConfigExclusions(selector.InvokeOrDefault(new ClusterDeleteVotingConfigExclusionsDescriptor()));
		}

		public Task<ClusterDeleteVotingConfigExclusionsResponse> DeleteVotingConfigExclusionsAsync(Func<ClusterDeleteVotingConfigExclusionsDescriptor, IClusterDeleteVotingConfigExclusionsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteVotingConfigExclusionsAsync(selector.InvokeOrDefault(new ClusterDeleteVotingConfigExclusionsDescriptor()), cancellationToken);
		}

		public ClusterGetComponentTemplateResponse GetComponentTemplate(IClusterGetComponentTemplateRequest request)
		{
			return DoRequest<IClusterGetComponentTemplateRequest, ClusterGetComponentTemplateResponse>(request, request.RequestParameters);
		}

		public Task<ClusterGetComponentTemplateResponse> GetComponentTemplateAsync(IClusterGetComponentTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterGetComponentTemplateRequest, ClusterGetComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterGetComponentTemplateResponse GetComponentTemplate(Func<ClusterGetComponentTemplateDescriptor, IClusterGetComponentTemplateRequest> selector = null)
		{
			return GetComponentTemplate(selector.InvokeOrDefault(new ClusterGetComponentTemplateDescriptor()));
		}

		public Task<ClusterGetComponentTemplateResponse> GetComponentTemplateAsync(Func<ClusterGetComponentTemplateDescriptor, IClusterGetComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetComponentTemplateAsync(selector.InvokeOrDefault(new ClusterGetComponentTemplateDescriptor()), cancellationToken);
		}

		public ClusterGetSettingsResponse GetSettings(IClusterGetSettingsRequest request)
		{
			return DoRequest<IClusterGetSettingsRequest, ClusterGetSettingsResponse>(request, request.RequestParameters);
		}

		public Task<ClusterGetSettingsResponse> GetSettingsAsync(IClusterGetSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterGetSettingsRequest, ClusterGetSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterGetSettingsResponse GetSettings(Func<ClusterGetSettingsDescriptor, IClusterGetSettingsRequest> selector = null)
		{
			return GetSettings(selector.InvokeOrDefault(new ClusterGetSettingsDescriptor()));
		}

		public Task<ClusterGetSettingsResponse> GetSettingsAsync(Func<ClusterGetSettingsDescriptor, IClusterGetSettingsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetSettingsAsync(selector.InvokeOrDefault(new ClusterGetSettingsDescriptor()), cancellationToken);
		}

		public ClusterHealthResponse Health(IClusterHealthRequest request)
		{
			return DoRequest<IClusterHealthRequest, ClusterHealthResponse>(request, request.RequestParameters);
		}

		public Task<ClusterHealthResponse> HealthAsync(IClusterHealthRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterHealthRequest, ClusterHealthResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterHealthResponse Health(Func<ClusterHealthDescriptor, IClusterHealthRequest> selector = null)
		{
			return Health(selector.InvokeOrDefault(new ClusterHealthDescriptor()));
		}

		public Task<ClusterHealthResponse> HealthAsync(Func<ClusterHealthDescriptor, IClusterHealthRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return HealthAsync(selector.InvokeOrDefault(new ClusterHealthDescriptor()), cancellationToken);
		}

		public ClusterPendingTasksResponse PendingTasks(IClusterPendingTasksRequest request)
		{
			return DoRequest<IClusterPendingTasksRequest, ClusterPendingTasksResponse>(request, request.RequestParameters);
		}

		public Task<ClusterPendingTasksResponse> PendingTasksAsync(IClusterPendingTasksRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterPendingTasksRequest, ClusterPendingTasksResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterPendingTasksResponse PendingTasks(Func<ClusterPendingTasksDescriptor, IClusterPendingTasksRequest> selector = null)
		{
			return PendingTasks(selector.InvokeOrDefault(new ClusterPendingTasksDescriptor()));
		}

		public Task<ClusterPendingTasksResponse> PendingTasksAsync(Func<ClusterPendingTasksDescriptor, IClusterPendingTasksRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PendingTasksAsync(selector.InvokeOrDefault(new ClusterPendingTasksDescriptor()), cancellationToken);
		}

		public ClusterPutVotingConfigExclusionsResponse PutVotingConfigExclusions(IClusterPutVotingConfigExclusionsRequest request)
		{
			return DoRequest<IClusterPutVotingConfigExclusionsRequest, ClusterPutVotingConfigExclusionsResponse>(request, request.RequestParameters);
		}

		public Task<ClusterPutVotingConfigExclusionsResponse> PutVotingConfigExclusionsAsync(IClusterPutVotingConfigExclusionsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterPutVotingConfigExclusionsRequest, ClusterPutVotingConfigExclusionsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterPutVotingConfigExclusionsResponse PutVotingConfigExclusions(Func<ClusterPutVotingConfigExclusionsDescriptor, IClusterPutVotingConfigExclusionsRequest> selector = null)
		{
			return PutVotingConfigExclusions(selector.InvokeOrDefault(new ClusterPutVotingConfigExclusionsDescriptor()));
		}

		public Task<ClusterPutVotingConfigExclusionsResponse> PutVotingConfigExclusionsAsync(Func<ClusterPutVotingConfigExclusionsDescriptor, IClusterPutVotingConfigExclusionsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutVotingConfigExclusionsAsync(selector.InvokeOrDefault(new ClusterPutVotingConfigExclusionsDescriptor()), cancellationToken);
		}

		public ClusterPutComponentTemplateResponse PutComponentTemplate(IClusterPutComponentTemplateRequest request)
		{
			return DoRequest<IClusterPutComponentTemplateRequest, ClusterPutComponentTemplateResponse>(request, request.RequestParameters);
		}

		public Task<ClusterPutComponentTemplateResponse> PutComponentTemplateAsync(IClusterPutComponentTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterPutComponentTemplateRequest, ClusterPutComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterPutComponentTemplateResponse PutComponentTemplate(Name name, Func<ClusterPutComponentTemplateDescriptor, IClusterPutComponentTemplateRequest> selector = null)
		{
			return PutComponentTemplate(selector.InvokeOrDefault(new ClusterPutComponentTemplateDescriptor(name)));
		}

		public Task<ClusterPutComponentTemplateResponse> PutComponentTemplateAsync(Name name, Func<ClusterPutComponentTemplateDescriptor, IClusterPutComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutComponentTemplateAsync(selector.InvokeOrDefault(new ClusterPutComponentTemplateDescriptor(name)), cancellationToken);
		}

		public ClusterPutSettingsResponse PutSettings(IClusterPutSettingsRequest request)
		{
			return DoRequest<IClusterPutSettingsRequest, ClusterPutSettingsResponse>(request, request.RequestParameters);
		}

		public Task<ClusterPutSettingsResponse> PutSettingsAsync(IClusterPutSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterPutSettingsRequest, ClusterPutSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterPutSettingsResponse PutSettings(Func<ClusterPutSettingsDescriptor, IClusterPutSettingsRequest> selector = null)
		{
			return PutSettings(selector.InvokeOrDefault(new ClusterPutSettingsDescriptor()));
		}

		public Task<ClusterPutSettingsResponse> PutSettingsAsync(Func<ClusterPutSettingsDescriptor, IClusterPutSettingsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutSettingsAsync(selector.InvokeOrDefault(new ClusterPutSettingsDescriptor()), cancellationToken);
		}

		public ClusterRemoteInfoResponse RemoteInfo(IClusterRemoteInfoRequest request)
		{
			return DoRequest<IClusterRemoteInfoRequest, ClusterRemoteInfoResponse>(request, request.RequestParameters);
		}

		public Task<ClusterRemoteInfoResponse> RemoteInfoAsync(IClusterRemoteInfoRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterRemoteInfoRequest, ClusterRemoteInfoResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterRemoteInfoResponse RemoteInfo(Func<ClusterRemoteInfoDescriptor, IClusterRemoteInfoRequest> selector = null)
		{
			return RemoteInfo(selector.InvokeOrDefault(new ClusterRemoteInfoDescriptor()));
		}

		public Task<ClusterRemoteInfoResponse> RemoteInfoAsync(Func<ClusterRemoteInfoDescriptor, IClusterRemoteInfoRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RemoteInfoAsync(selector.InvokeOrDefault(new ClusterRemoteInfoDescriptor()), cancellationToken);
		}

		public ClusterRerouteResponse Reroute(IClusterRerouteRequest request)
		{
			return DoRequest<IClusterRerouteRequest, ClusterRerouteResponse>(request, request.RequestParameters);
		}

		public Task<ClusterRerouteResponse> RerouteAsync(IClusterRerouteRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterRerouteRequest, ClusterRerouteResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterRerouteResponse Reroute(Func<ClusterRerouteDescriptor, IClusterRerouteRequest> selector = null)
		{
			return Reroute(selector.InvokeOrDefault(new ClusterRerouteDescriptor()));
		}

		public Task<ClusterRerouteResponse> RerouteAsync(Func<ClusterRerouteDescriptor, IClusterRerouteRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RerouteAsync(selector.InvokeOrDefault(new ClusterRerouteDescriptor()), cancellationToken);
		}

		public ClusterStateResponse State(IClusterStateRequest request)
		{
			return DoRequest<IClusterStateRequest, ClusterStateResponse>(request, request.RequestParameters);
		}

		public Task<ClusterStateResponse> StateAsync(IClusterStateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterStateRequest, ClusterStateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterStateResponse State(Func<ClusterStateDescriptor, IClusterStateRequest> selector = null)
		{
			return State(selector.InvokeOrDefault(new ClusterStateDescriptor()));
		}

		public Task<ClusterStateResponse> StateAsync(Func<ClusterStateDescriptor, IClusterStateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StateAsync(selector.InvokeOrDefault(new ClusterStateDescriptor()), cancellationToken);
		}

		public ClusterStatsResponse Stats(IClusterStatsRequest request)
		{
			return DoRequest<IClusterStatsRequest, ClusterStatsResponse>(request, request.RequestParameters);
		}

		public Task<ClusterStatsResponse> StatsAsync(IClusterStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClusterStatsRequest, ClusterStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClusterStatsResponse Stats(Func<ClusterStatsDescriptor, IClusterStatsRequest> selector = null)
		{
			return Stats(selector.InvokeOrDefault(new ClusterStatsDescriptor()));
		}

		public Task<ClusterStatsResponse> StatsAsync(Func<ClusterStatsDescriptor, IClusterStatsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StatsAsync(selector.InvokeOrDefault(new ClusterStatsDescriptor()), cancellationToken);
		}
	}
}