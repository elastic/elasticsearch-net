// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class TransformNamespace : NamespacedClientProxy
	{
		internal TransformNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteTransformResponse DeleteTransform(IDeleteTransformRequest request)
		{
			return DoRequest<IDeleteTransformRequest, DeleteTransformResponse>(request, request.RequestParameters);
		}

		public Task<DeleteTransformResponse> DeleteTransformAsync(IDeleteTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteTransformRequest, DeleteTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetTransformResponse GetTransform(IGetTransformRequest request)
		{
			return DoRequest<IGetTransformRequest, GetTransformResponse>(request, request.RequestParameters);
		}

		public Task<GetTransformResponse> GetTransformAsync(IGetTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetTransformRequest, GetTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetTransformStatsResponse GetTransformStats(IGetTransformStatsRequest request)
		{
			return DoRequest<IGetTransformStatsRequest, GetTransformStatsResponse>(request, request.RequestParameters);
		}

		public Task<GetTransformStatsResponse> GetTransformStatsAsync(IGetTransformStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetTransformStatsRequest, GetTransformStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PreviewTransformResponse PreviewTransform(IPreviewTransformRequest request)
		{
			return DoRequest<IPreviewTransformRequest, PreviewTransformResponse>(request, request.RequestParameters);
		}

		public Task<PreviewTransformResponse> PreviewTransformAsync(IPreviewTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPreviewTransformRequest, PreviewTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutTransformResponse PutTransform(IPutTransformRequest request)
		{
			return DoRequest<IPutTransformRequest, PutTransformResponse>(request, request.RequestParameters);
		}

		public Task<PutTransformResponse> PutTransformAsync(IPutTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutTransformRequest, PutTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartTransformResponse StartTransform(IStartTransformRequest request)
		{
			return DoRequest<IStartTransformRequest, StartTransformResponse>(request, request.RequestParameters);
		}

		public Task<StartTransformResponse> StartTransformAsync(IStartTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartTransformRequest, StartTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StopTransformResponse StopTransform(IStopTransformRequest request)
		{
			return DoRequest<IStopTransformRequest, StopTransformResponse>(request, request.RequestParameters);
		}

		public Task<StopTransformResponse> StopTransformAsync(IStopTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStopTransformRequest, StopTransformResponse>(request, request.RequestParameters, cancellationToken);
		}

		public UpdateTransformResponse UpdateTransform(IUpdateTransformRequest request)
		{
			return DoRequest<IUpdateTransformRequest, UpdateTransformResponse>(request, request.RequestParameters);
		}

		public Task<UpdateTransformResponse> UpdateTransformAsync(IUpdateTransformRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUpdateTransformRequest, UpdateTransformResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}