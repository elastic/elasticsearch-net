// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Globalization;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest
{
	[JsonConverter(typeof(NumericAliasConverter<GeoHashPrecision>))]
	public readonly partial struct GeoHashPrecision : IComparable<GeoHashPrecision>, IEquatable<GeoHashPrecision>
	{
		public GeoHashPrecision(long geoHashPrecision) => Value = geoHashPrecision;
		public long Value { get; }

		public override int GetHashCode() => Value.GetHashCode();
		public override string ToString() => Value.ToString(CultureInfo.InvariantCulture);
		public override bool Equals(object obj) => ReferenceEquals(null, obj) ? false : obj is GeoHashPrecision other && Equals(other);
		public bool Equals(GeoHashPrecision other) => this.Value.Equals(other.Value);
		public int CompareTo(GeoHashPrecision other) => Value.CompareTo(other.Value);
		public static bool operator ==(GeoHashPrecision a, GeoHashPrecision b) => a.CompareTo(b) == 0;
		public static bool operator !=(GeoHashPrecision a, GeoHashPrecision b) => !(a == b);
	}

	[JsonConverter(typeof(NumericAliasConverter<GeoTilePrecision>))]
	public readonly partial struct GeoTilePrecision : IComparable<GeoTilePrecision>, IEquatable<GeoTilePrecision>
	{
		public GeoTilePrecision(long geoTilePrecision) => Value = geoTilePrecision;
		public long Value { get; }

		public override int GetHashCode() => Value.GetHashCode();
		public override string ToString() => Value.ToString(CultureInfo.InvariantCulture);
		public override bool Equals(object obj) => ReferenceEquals(null, obj) ? false : obj is GeoTilePrecision other && Equals(other);
		public bool Equals(GeoTilePrecision other) => this.Value.Equals(other.Value);
		public int CompareTo(GeoTilePrecision other) => Value.CompareTo(other.Value);
		public static bool operator ==(GeoTilePrecision a, GeoTilePrecision b) => a.CompareTo(b) == 0;
		public static bool operator !=(GeoTilePrecision a, GeoTilePrecision b) => !(a == b);
	}
}