// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

namespace Nest
{
	public class ByteSize : Union<long, string>
	{
		public ByteSize(long item) : base(item)
		{
		}

		public ByteSize(string item) : base(item)
		{
		}
	}

	public class EpochMillis : Union<string, long>
	{
		public EpochMillis(string item) : base(item)
		{
		}

		public EpochMillis(long item) : base(item)
		{
		}
	}

	public class Fuzziness : Union<string, int>
	{
		public Fuzziness(string item) : base(item)
		{
		}

		public Fuzziness(int item) : base(item)
		{
		}
	}

	public class MinimumShouldMatch : Union<int, string>
	{
		public MinimumShouldMatch(int item) : base(item)
		{
		}

		public MinimumShouldMatch(string item) : base(item)
		{
		}
	}

	public class MultiGetId : Union<string, int>
	{
		public MultiGetId(string item) : base(item)
		{
		}

		public MultiGetId(int item) : base(item)
		{
		}
	}

	public class Percentage : Union<string, float>
	{
		public Percentage(string item) : base(item)
		{
		}

		public Percentage(float item) : base(item)
		{
		}
	}

	public class Refresh : Union<bool, RefreshOptions>
	{
		public Refresh(bool item) : base(item)
		{
		}

		public Refresh(RefreshOptions item) : base(item)
		{
		}
	}

	public class Time : Union<string, int>
	{
		public Time(string item) : base(item)
		{
		}

		public Time(int item) : base(item)
		{
		}
	}

	public class WaitForActiveShards : Union<int, WaitForActiveShardOptions>
	{
		public WaitForActiveShards(int item) : base(item)
		{
		}

		public WaitForActiveShards(WaitForActiveShardOptions item) : base(item)
		{
		}
	}
}