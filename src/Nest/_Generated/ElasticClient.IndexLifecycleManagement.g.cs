// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class IndexLifecycleManagementNamespace : NamespacedClientProxy
	{
		internal IndexLifecycleManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public IndexLifecycleManagementDeleteLifecycleResponse DeleteLifecycle(IIndexLifecycleManagementDeleteLifecycleRequest request)
		{
			return DoRequest<IIndexLifecycleManagementDeleteLifecycleRequest, IndexLifecycleManagementDeleteLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementDeleteLifecycleResponse> DeleteLifecycleAsync(IIndexLifecycleManagementDeleteLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementDeleteLifecycleRequest, IndexLifecycleManagementDeleteLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementExplainLifecycleResponse ExplainLifecycle(IIndexLifecycleManagementExplainLifecycleRequest request)
		{
			return DoRequest<IIndexLifecycleManagementExplainLifecycleRequest, IndexLifecycleManagementExplainLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementExplainLifecycleResponse> ExplainLifecycleAsync(IIndexLifecycleManagementExplainLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementExplainLifecycleRequest, IndexLifecycleManagementExplainLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementExplainLifecycleResponse ExplainLifecycle(IndexName index, Func<IndexLifecycleManagementExplainLifecycleDescriptor, IIndexLifecycleManagementExplainLifecycleRequest> selector = null)
		{
			return ExplainLifecycle(selector.InvokeOrDefault(new IndexLifecycleManagementExplainLifecycleDescriptor(index)));
		}

		public Task<IndexLifecycleManagementExplainLifecycleResponse> ExplainLifecycleAsync(IndexName index, Func<IndexLifecycleManagementExplainLifecycleDescriptor, IIndexLifecycleManagementExplainLifecycleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExplainLifecycleAsync(selector.InvokeOrDefault(new IndexLifecycleManagementExplainLifecycleDescriptor(index)), cancellationToken);
		}

		public IndexLifecycleManagementGetLifecycleResponse GetLifecycle(IIndexLifecycleManagementGetLifecycleRequest request)
		{
			return DoRequest<IIndexLifecycleManagementGetLifecycleRequest, IndexLifecycleManagementGetLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementGetLifecycleResponse> GetLifecycleAsync(IIndexLifecycleManagementGetLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementGetLifecycleRequest, IndexLifecycleManagementGetLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementGetLifecycleResponse GetLifecycle(Func<IndexLifecycleManagementGetLifecycleDescriptor, IIndexLifecycleManagementGetLifecycleRequest> selector = null)
		{
			return GetLifecycle(selector.InvokeOrDefault(new IndexLifecycleManagementGetLifecycleDescriptor()));
		}

		public Task<IndexLifecycleManagementGetLifecycleResponse> GetLifecycleAsync(Func<IndexLifecycleManagementGetLifecycleDescriptor, IIndexLifecycleManagementGetLifecycleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetLifecycleAsync(selector.InvokeOrDefault(new IndexLifecycleManagementGetLifecycleDescriptor()), cancellationToken);
		}

		public IndexLifecycleManagementGetStatusResponse GetStatus(IIndexLifecycleManagementGetStatusRequest request)
		{
			return DoRequest<IIndexLifecycleManagementGetStatusRequest, IndexLifecycleManagementGetStatusResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementGetStatusResponse> GetStatusAsync(IIndexLifecycleManagementGetStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementGetStatusRequest, IndexLifecycleManagementGetStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementGetStatusResponse GetStatus(Func<IndexLifecycleManagementGetStatusDescriptor, IIndexLifecycleManagementGetStatusRequest> selector = null)
		{
			return GetStatus(selector.InvokeOrDefault(new IndexLifecycleManagementGetStatusDescriptor()));
		}

		public Task<IndexLifecycleManagementGetStatusResponse> GetStatusAsync(Func<IndexLifecycleManagementGetStatusDescriptor, IIndexLifecycleManagementGetStatusRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetStatusAsync(selector.InvokeOrDefault(new IndexLifecycleManagementGetStatusDescriptor()), cancellationToken);
		}

		public IndexLifecycleManagementMoveToStepResponse MoveToStep(IIndexLifecycleManagementMoveToStepRequest request)
		{
			return DoRequest<IIndexLifecycleManagementMoveToStepRequest, IndexLifecycleManagementMoveToStepResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementMoveToStepResponse> MoveToStepAsync(IIndexLifecycleManagementMoveToStepRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementMoveToStepRequest, IndexLifecycleManagementMoveToStepResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementMoveToStepResponse MoveToStep(IndexName index, Func<IndexLifecycleManagementMoveToStepDescriptor, IIndexLifecycleManagementMoveToStepRequest> selector = null)
		{
			return MoveToStep(selector.InvokeOrDefault(new IndexLifecycleManagementMoveToStepDescriptor(index)));
		}

		public Task<IndexLifecycleManagementMoveToStepResponse> MoveToStepAsync(IndexName index, Func<IndexLifecycleManagementMoveToStepDescriptor, IIndexLifecycleManagementMoveToStepRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return MoveToStepAsync(selector.InvokeOrDefault(new IndexLifecycleManagementMoveToStepDescriptor(index)), cancellationToken);
		}

		public IndexLifecycleManagementPutLifecycleResponse PutLifecycle(IIndexLifecycleManagementPutLifecycleRequest request)
		{
			return DoRequest<IIndexLifecycleManagementPutLifecycleRequest, IndexLifecycleManagementPutLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementPutLifecycleResponse> PutLifecycleAsync(IIndexLifecycleManagementPutLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementPutLifecycleRequest, IndexLifecycleManagementPutLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementRemovePolicyResponse RemovePolicy(IIndexLifecycleManagementRemovePolicyRequest request)
		{
			return DoRequest<IIndexLifecycleManagementRemovePolicyRequest, IndexLifecycleManagementRemovePolicyResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementRemovePolicyResponse> RemovePolicyAsync(IIndexLifecycleManagementRemovePolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementRemovePolicyRequest, IndexLifecycleManagementRemovePolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementRemovePolicyResponse RemovePolicy(IndexName index, Func<IndexLifecycleManagementRemovePolicyDescriptor, IIndexLifecycleManagementRemovePolicyRequest> selector = null)
		{
			return RemovePolicy(selector.InvokeOrDefault(new IndexLifecycleManagementRemovePolicyDescriptor(index)));
		}

		public Task<IndexLifecycleManagementRemovePolicyResponse> RemovePolicyAsync(IndexName index, Func<IndexLifecycleManagementRemovePolicyDescriptor, IIndexLifecycleManagementRemovePolicyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RemovePolicyAsync(selector.InvokeOrDefault(new IndexLifecycleManagementRemovePolicyDescriptor(index)), cancellationToken);
		}

		public IndexLifecycleManagementRetryResponse Retry(IIndexLifecycleManagementRetryRequest request)
		{
			return DoRequest<IIndexLifecycleManagementRetryRequest, IndexLifecycleManagementRetryResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementRetryResponse> RetryAsync(IIndexLifecycleManagementRetryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementRetryRequest, IndexLifecycleManagementRetryResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementRetryResponse Retry(IndexName index, Func<IndexLifecycleManagementRetryDescriptor, IIndexLifecycleManagementRetryRequest> selector = null)
		{
			return Retry(selector.InvokeOrDefault(new IndexLifecycleManagementRetryDescriptor(index)));
		}

		public Task<IndexLifecycleManagementRetryResponse> RetryAsync(IndexName index, Func<IndexLifecycleManagementRetryDescriptor, IIndexLifecycleManagementRetryRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RetryAsync(selector.InvokeOrDefault(new IndexLifecycleManagementRetryDescriptor(index)), cancellationToken);
		}

		public IndexLifecycleManagementStartResponse Start(IIndexLifecycleManagementStartRequest request)
		{
			return DoRequest<IIndexLifecycleManagementStartRequest, IndexLifecycleManagementStartResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementStartResponse> StartAsync(IIndexLifecycleManagementStartRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementStartRequest, IndexLifecycleManagementStartResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementStartResponse Start(Func<IndexLifecycleManagementStartDescriptor, IIndexLifecycleManagementStartRequest> selector = null)
		{
			return Start(selector.InvokeOrDefault(new IndexLifecycleManagementStartDescriptor()));
		}

		public Task<IndexLifecycleManagementStartResponse> StartAsync(Func<IndexLifecycleManagementStartDescriptor, IIndexLifecycleManagementStartRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StartAsync(selector.InvokeOrDefault(new IndexLifecycleManagementStartDescriptor()), cancellationToken);
		}

		public IndexLifecycleManagementStopResponse Stop(IIndexLifecycleManagementStopRequest request)
		{
			return DoRequest<IIndexLifecycleManagementStopRequest, IndexLifecycleManagementStopResponse>(request, request.RequestParameters);
		}

		public Task<IndexLifecycleManagementStopResponse> StopAsync(IIndexLifecycleManagementStopRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexLifecycleManagementStopRequest, IndexLifecycleManagementStopResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexLifecycleManagementStopResponse Stop(Func<IndexLifecycleManagementStopDescriptor, IIndexLifecycleManagementStopRequest> selector = null)
		{
			return Stop(selector.InvokeOrDefault(new IndexLifecycleManagementStopDescriptor()));
		}

		public Task<IndexLifecycleManagementStopResponse> StopAsync(Func<IndexLifecycleManagementStopDescriptor, IIndexLifecycleManagementStopRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StopAsync(selector.InvokeOrDefault(new IndexLifecycleManagementStopDescriptor()), cancellationToken);
		}
	}
}