// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class IndexLifecycleManagementNamespace : NamespacedClientProxy
	{
		internal IndexLifecycleManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteLifecycleResponse DeleteLifecycle(IDeleteLifecycleRequest request)
		{
			return DoRequest<IDeleteLifecycleRequest, DeleteLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<DeleteLifecycleResponse> DeleteLifecycleAsync(IDeleteLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteLifecycleRequest, DeleteLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExplainLifecycleResponse ExplainLifecycle(IExplainLifecycleRequest request)
		{
			return DoRequest<IExplainLifecycleRequest, ExplainLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<ExplainLifecycleResponse> ExplainLifecycleAsync(IExplainLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExplainLifecycleRequest, ExplainLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetLifecycleResponse GetLifecycle(IGetLifecycleRequest request)
		{
			return DoRequest<IGetLifecycleRequest, GetLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<GetLifecycleResponse> GetLifecycleAsync(IGetLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetLifecycleRequest, GetLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetIlmStatusResponse GetIlmStatus(IGetIlmStatusRequest request)
		{
			return DoRequest<IGetIlmStatusRequest, GetIlmStatusResponse>(request, request.RequestParameters);
		}

		public Task<GetIlmStatusResponse> GetIlmStatusAsync(IGetIlmStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetIlmStatusRequest, GetIlmStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public MoveToStepResponse MoveToStep(IMoveToStepRequest request)
		{
			return DoRequest<IMoveToStepRequest, MoveToStepResponse>(request, request.RequestParameters);
		}

		public Task<MoveToStepResponse> MoveToStepAsync(IMoveToStepRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IMoveToStepRequest, MoveToStepResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutLifecycleResponse PutLifecycle(IPutLifecycleRequest request)
		{
			return DoRequest<IPutLifecycleRequest, PutLifecycleResponse>(request, request.RequestParameters);
		}

		public Task<PutLifecycleResponse> PutLifecycleAsync(IPutLifecycleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutLifecycleRequest, PutLifecycleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RemovePolicyResponse RemovePolicy(IRemovePolicyRequest request)
		{
			return DoRequest<IRemovePolicyRequest, RemovePolicyResponse>(request, request.RequestParameters);
		}

		public Task<RemovePolicyResponse> RemovePolicyAsync(IRemovePolicyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRemovePolicyRequest, RemovePolicyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RetryIlmResponse RetryIlm(IRetryIlmRequest request)
		{
			return DoRequest<IRetryIlmRequest, RetryIlmResponse>(request, request.RequestParameters);
		}

		public Task<RetryIlmResponse> RetryIlmAsync(IRetryIlmRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRetryIlmRequest, RetryIlmResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartIlmResponse StartIlm(IStartIlmRequest request)
		{
			return DoRequest<IStartIlmRequest, StartIlmResponse>(request, request.RequestParameters);
		}

		public Task<StartIlmResponse> StartIlmAsync(IStartIlmRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartIlmRequest, StartIlmResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StopIlmResponse StopIlm(IStopIlmRequest request)
		{
			return DoRequest<IStopIlmRequest, StopIlmResponse>(request, request.RequestParameters);
		}

		public Task<StopIlmResponse> StopIlmAsync(IStopIlmRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStopIlmRequest, StopIlmResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}