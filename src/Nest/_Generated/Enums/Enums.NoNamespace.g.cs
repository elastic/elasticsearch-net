// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public enum Bytes
	{
		[EnumMember(Value = "b")]
		b,
		[EnumMember(Value = "k")]
		k,
		[EnumMember(Value = "kb")]
		Kb,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "mb")]
		Mb,
		[EnumMember(Value = "g")]
		g,
		[EnumMember(Value = "gb")]
		Gb,
		[EnumMember(Value = "t")]
		t,
		[EnumMember(Value = "tb")]
		Tb,
		[EnumMember(Value = "p")]
		p,
		[EnumMember(Value = "pb")]
		Pb
	}

	public enum ClusterStatus
	{
		[EnumMember(Value = "green")]
		Green,
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red
	}

	public enum Conflicts
	{
		[EnumMember(Value = "abort")]
		Abort,
		[EnumMember(Value = "proceed")]
		Proceed
	}

	public enum DefaultOperator
	{
		[EnumMember(Value = "AND")]
		And,
		[EnumMember(Value = "OR")]
		Or
	}

	public enum DynamicMapping
	{
		[EnumMember(Value = "strict")]
		Strict
	}

	public enum ExpandWildcardOptions
	{
		[EnumMember(Value = "open")]
		Open,
		[EnumMember(Value = "closed")]
		Closed,
		[EnumMember(Value = "hidden")]
		Hidden,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "all")]
		All
	}

	public enum GroupBy
	{
		[EnumMember(Value = "nodes")]
		Nodes,
		[EnumMember(Value = "parents")]
		Parents,
		[EnumMember(Value = "none")]
		None
	}

	public enum Health
	{
		[EnumMember(Value = "green")]
		Green,
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red
	}

	public enum Level
	{
		[EnumMember(Value = "cluster")]
		Cluster,
		[EnumMember(Value = "indices")]
		Indices,
		[EnumMember(Value = "shards")]
		Shards
	}

	public enum Operator
	{
		[EnumMember(Value = "and")]
		And,
		[EnumMember(Value = "or")]
		Or
	}

	public enum OpType
	{
		[EnumMember(Value = "index")]
		Index,
		[EnumMember(Value = "create")]
		Create
	}

	public enum RefreshOptions
	{
		[EnumMember(Value = "wait_for")]
		WaitFor
	}

	public enum Result
	{
		[EnumMember(Value = "Error")]
		Error,
		[EnumMember(Value = "created")]
		Created,
		[EnumMember(Value = "updated")]
		Updated,
		[EnumMember(Value = "deleted")]
		Deleted,
		[EnumMember(Value = "not_found")]
		NotFound,
		[EnumMember(Value = "noop")]
		Noop
	}

	public enum SearchType
	{
		[EnumMember(Value = "query_then_fetch")]
		QueryThenFetch,
		[EnumMember(Value = "dfs_query_then_fetch")]
		DfsQueryThenFetch
	}

	public enum Size
	{
		[EnumMember(Value = "Raw")]
		Raw,
		[EnumMember(Value = "k")]
		k,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "g")]
		g,
		[EnumMember(Value = "t")]
		t,
		[EnumMember(Value = "p")]
		p
	}

	public enum SuggestMode
	{
		[EnumMember(Value = "missing")]
		Missing,
		[EnumMember(Value = "popular")]
		Popular,
		[EnumMember(Value = "always")]
		Always
	}

	public enum ThreadType
	{
		[EnumMember(Value = "cpu")]
		Cpu,
		[EnumMember(Value = "wait")]
		Wait,
		[EnumMember(Value = "block")]
		Block
	}

	public enum VersionType
	{
		[EnumMember(Value = "internal")]
		Internal,
		[EnumMember(Value = "external")]
		External,
		[EnumMember(Value = "external_gte")]
		ExternalGte,
		[EnumMember(Value = "force")]
		Force
	}

	public enum WaitForActiveShardOptions
	{
		[EnumMember(Value = "all")]
		All
	}

	public enum WaitForEvents
	{
		[EnumMember(Value = "immediate")]
		Immediate,
		[EnumMember(Value = "urgent")]
		Urgent,
		[EnumMember(Value = "high")]
		High,
		[EnumMember(Value = "normal")]
		Normal,
		[EnumMember(Value = "low")]
		Low,
		[EnumMember(Value = "languid")]
		Languid
	}

	public enum WaitForStatus
	{
		[EnumMember(Value = "green")]
		Green,
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red
	}
}