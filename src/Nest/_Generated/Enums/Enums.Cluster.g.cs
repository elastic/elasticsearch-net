// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public enum AllocationExplainDecision
	{
		[EnumMember(Value = "YES")]
		Yes,
		[EnumMember(Value = "THROTTLE")]
		Throttle,
		[EnumMember(Value = "NO")]
		No,
		[EnumMember(Value = "ALWAYS")]
		Always
	}

	public enum ClusterStatus
	{
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red,
		[EnumMember(Value = "green")]
		Green
	}

	public enum Decision
	{
		[EnumMember(Value = "yes")]
		Yes,
		[EnumMember(Value = "worse_balance")]
		WorseBalance,
		[EnumMember(Value = "throttled")]
		Throttled,
		[EnumMember(Value = "no_valid_shard_copy")]
		NoValidShardCopy,
		[EnumMember(Value = "no_attempt")]
		NoAttempt,
		[EnumMember(Value = "no")]
		No,
		[EnumMember(Value = "awaiting_info")]
		AwaitingInfo,
		[EnumMember(Value = "allocation_delayed")]
		AllocationDelayed
	}

	public enum UnassignedInformationReason
	{
		[EnumMember(Value = "REROUTE_CANCELLED")]
		RerouteCancelled,
		[EnumMember(Value = "REPLICA_ADDED")]
		ReplicaAdded,
		[EnumMember(Value = "REINITIALIZED")]
		Reinitialized,
		[EnumMember(Value = "REALLOCATED_REPLICA")]
		ReallocatedReplica,
		[EnumMember(Value = "PRIMARY_FAILED")]
		PrimaryFailed,
		[EnumMember(Value = "NODE_LEFT")]
		NodeLeft,
		[EnumMember(Value = "NEW_INDEX_RESTORED")]
		NewIndexRestored,
		[EnumMember(Value = "MANUAL_ALLOCATION")]
		ManualAllocation,
		[EnumMember(Value = "INDEX_REOPENED")]
		IndexReopened,
		[EnumMember(Value = "INDEX_CREATED")]
		IndexCreated,
		[EnumMember(Value = "FORCED_EMPTY_PRIMARY")]
		ForcedEmptyPrimary,
		[EnumMember(Value = "EXISTING_INDEX_RESTORED")]
		ExistingIndexRestored,
		[EnumMember(Value = "DANGLING_INDEX_IMPORTED")]
		DanglingIndexImported,
		[EnumMember(Value = "CLUSTER_RECOVERED")]
		ClusterRecovered,
		[EnumMember(Value = "ALLOCATION_FAILED")]
		AllocationFailed
	}
}