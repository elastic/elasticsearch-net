// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Runtime.Serialization;

#nullable restore
namespace Nest
{
	public enum ChildScoreMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum CombinedFieldsOperator
	{
		[EnumMember(Value = "or")]
		Or,
		[EnumMember(Value = "and")]
		And
	}

	public enum CombinedFieldsZeroTerms
	{
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "all")]
		All
	}

	public enum DateInterval
	{
		[EnumMember(Value = "year")]
		Year,
		[EnumMember(Value = "week")]
		Week,
		[EnumMember(Value = "second")]
		Second,
		[EnumMember(Value = "quarter")]
		Quarter,
		[EnumMember(Value = "month")]
		Month,
		[EnumMember(Value = "minute")]
		Minute,
		[EnumMember(Value = "hour")]
		Hour,
		[EnumMember(Value = "day")]
		Day
	}

	public enum DelimitedPayloadEncoding
	{
		[EnumMember(Value = "int")]
		Integer,
		[EnumMember(Value = "identity")]
		Identity,
		[EnumMember(Value = "float")]
		Float
	}

	public enum DynamicMapping
	{
		[EnumMember(Value = "true")]
		True,
		[EnumMember(Value = "strict")]
		Strict,
		[EnumMember(Value = "runtime")]
		Runtime,
		[EnumMember(Value = "false")]
		False
	}

	public enum EdgeNGramSide
	{
		[EnumMember(Value = "front")]
		Front,
		[EnumMember(Value = "back")]
		Back
	}

	public enum FieldType
	{
		[EnumMember(Value = "token_count")]
		TokenCount,
		[EnumMember(Value = "text")]
		Text,
		[EnumMember(Value = "short")]
		Short,
		[EnumMember(Value = "shape")]
		Shape,
		[EnumMember(Value = "search_as_you_type")]
		SearchAsYouType,
		[EnumMember(Value = "scaled_float")]
		ScaledFloat,
		[EnumMember(Value = "rank_features")]
		RankFeatures,
		[EnumMember(Value = "rank_feature")]
		RankFeature,
		[EnumMember(Value = "percolator")]
		Percolator,
		[EnumMember(Value = "object")]
		Object,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "nested")]
		Nested,
		[EnumMember(Value = "murmur3")]
		Murmur3,
		[EnumMember(Value = "long_range")]
		LongRange,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "keyword")]
		Keyword,
		[EnumMember(Value = "join")]
		Join,
		[EnumMember(Value = "ip_range")]
		IpRange,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "integer_range")]
		IntegerRange,
		[EnumMember(Value = "integer")]
		Integer,
		[EnumMember(Value = "histogram")]
		Histogram,
		[EnumMember(Value = "half_float")]
		HalfFloat,
		[EnumMember(Value = "geo_shape")]
		GeoShape,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "float_range")]
		FloatRange,
		[EnumMember(Value = "float")]
		Float,
		[EnumMember(Value = "flattened")]
		Flattened,
		[EnumMember(Value = "double_range")]
		DoubleRange,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "date_range")]
		DateRange,
		[EnumMember(Value = "date_nanos")]
		DateNanos,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "constant_keyword")]
		ConstantKeyword,
		[EnumMember(Value = "completion")]
		Completion,
		[EnumMember(Value = "byte")]
		Byte,
		[EnumMember(Value = "boolean")]
		Boolean,
		[EnumMember(Value = "binary")]
		Binary,
		[EnumMember(Value = "alias")]
		Alias
	}

	public enum FieldValueFactorModifier
	{
		[EnumMember(Value = "square")]
		Square,
		[EnumMember(Value = "sqrt")]
		Sqrt,
		[EnumMember(Value = "reciprocal")]
		Reciprocal,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "log2p")]
		Log2p,
		[EnumMember(Value = "log1p")]
		Log1p,
		[EnumMember(Value = "log")]
		Log,
		[EnumMember(Value = "ln2p")]
		Ln2p,
		[EnumMember(Value = "ln1p")]
		Ln1p,
		[EnumMember(Value = "ln")]
		Ln
	}

	public enum FunctionBoostMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "replace")]
		Replace,
		[EnumMember(Value = "multiply")]
		Multiply,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum FunctionScoreMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "multiply")]
		Multiply,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "first")]
		First,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum GapPolicy
	{
		[EnumMember(Value = "skip")]
		Skip,
		[EnumMember(Value = "insert_zeros")]
		InsertZeros
	}

	public enum GeoExecution
	{
		[EnumMember(Value = "memory")]
		Memory,
		[EnumMember(Value = "indexed")]
		Indexed
	}

	public enum GeoOrientation
	{
		[EnumMember(Value = "right")]
		Right,
		[EnumMember(Value = "left")]
		Left,
		[EnumMember(Value = "cw")]
		Cw,
		[EnumMember(Value = "counterclockwise")]
		Counterclockwise,
		[EnumMember(Value = "clockwise")]
		Clockwise,
		[EnumMember(Value = "ccw")]
		Ccw
	}

	public enum GeoStrategy
	{
		[EnumMember(Value = "term")]
		Term,
		[EnumMember(Value = "recursive")]
		Recursive
	}

	public enum GeoValidationMethod
	{
		[EnumMember(Value = "strict")]
		Strict,
		[EnumMember(Value = "ignore_malformed")]
		IgnoreMalformed,
		[EnumMember(Value = "coerce")]
		Coerce
	}

	public enum HoltWintersType
	{
		[EnumMember(Value = "mult")]
		Multiplicative,
		[EnumMember(Value = "add")]
		Additive
	}

	public enum IndexOptions
	{
		[EnumMember(Value = "positions")]
		Positions,
		[EnumMember(Value = "offsets")]
		Offsets,
		[EnumMember(Value = "freqs")]
		Freqs,
		[EnumMember(Value = "docs")]
		Docs
	}

	public enum KeepTypesMode
	{
		[EnumMember(Value = "include")]
		Include,
		[EnumMember(Value = "exclude")]
		Exclude
	}

	public enum MatchType
	{
		[EnumMember(Value = "simple")]
		Simple,
		[EnumMember(Value = "regex")]
		Regex
	}

	public enum MatrixStatsMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "median")]
		Median,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum MinimumInterval
	{
		[EnumMember(Value = "year")]
		Year,
		[EnumMember(Value = "second")]
		Second,
		[EnumMember(Value = "month")]
		Month,
		[EnumMember(Value = "minute")]
		Minute,
		[EnumMember(Value = "hour")]
		Hour,
		[EnumMember(Value = "day")]
		Day
	}

	public enum MovingAverageModel
	{
		[EnumMember(Value = "simple")]
		Simple,
		[EnumMember(Value = "linear")]
		Linear,
		[EnumMember(Value = "holt_winters")]
		HoltWinters,
		[EnumMember(Value = "holt")]
		Holt,
		[EnumMember(Value = "ewma")]
		Ewma
	}

	public enum MultiValueMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum NestedScoreMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum NoriDecompoundMode
	{
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "mixed")]
		Mixed,
		[EnumMember(Value = "discard")]
		Discard
	}

	public enum NormalizeMethod
	{
		[EnumMember(Value = "zscore")]
		Zscore,
		[EnumMember(Value = "softmax")]
		Softmax,
		[EnumMember(Value = "rescale_0_100")]
		Rescale0100,
		[EnumMember(Value = "rescale_0_1")]
		Rescale01,
		[EnumMember(Value = "percent_of_sum")]
		PercentOfSum,
		[EnumMember(Value = "mean")]
		Mean
	}

	public enum NumberType
	{
		[EnumMember(Value = "unsigned_long")]
		UnsignedLong,
		[EnumMember(Value = "short")]
		Short,
		[EnumMember(Value = "scaled_float")]
		ScaledFloat,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "integer")]
		Integer,
		[EnumMember(Value = "half_float")]
		HalfFloat,
		[EnumMember(Value = "float")]
		Float,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "byte")]
		Byte
	}

	public enum Operator
	{
		[EnumMember(Value = "or")]
		Or,
		[EnumMember(Value = "and")]
		And
	}

	public enum RangeRelation
	{
		[EnumMember(Value = "within")]
		Within,
		[EnumMember(Value = "intersects")]
		Intersects,
		[EnumMember(Value = "contains")]
		Contains
	}

	public enum RateMode
	{
		[EnumMember(Value = "value_count")]
		ValueCount,
		[EnumMember(Value = "sum")]
		Sum
	}

	public enum RuntimeFieldType
	{
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "keyword")]
		Keyword,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "boolean")]
		Boolean
	}

	public enum SamplerAggregationExecutionHint
	{
		[EnumMember(Value = "map")]
		Map,
		[EnumMember(Value = "global_ordinals")]
		GlobalOrdinals,
		[EnumMember(Value = "bytes_hash")]
		BytesHash
	}

	public enum ShapeOrientation
	{
		[EnumMember(Value = "right")]
		Right,
		[EnumMember(Value = "left")]
		Left,
		[EnumMember(Value = "cw")]
		Cw,
		[EnumMember(Value = "counterclockwise")]
		Counterclockwise,
		[EnumMember(Value = "clockwise")]
		Clockwise,
		[EnumMember(Value = "ccw")]
		Ccw
	}

	public enum SimpleQueryStringFlags
	{
		[EnumMember(Value = "WHITESPACE")]
		Whitespace,
		[EnumMember(Value = "SLOP")]
		Slop,
		[EnumMember(Value = "PREFIX")]
		Prefix,
		[EnumMember(Value = "PRECEDENCE")]
		Precedence,
		[EnumMember(Value = "PHRASE")]
		Phrase,
		[EnumMember(Value = "OR")]
		Or,
		[EnumMember(Value = "NOT")]
		Not,
		[EnumMember(Value = "NONE")]
		None,
		[EnumMember(Value = "NEAR")]
		Near,
		[EnumMember(Value = "FUZZY")]
		Fuzzy,
		[EnumMember(Value = "ESCAPE")]
		Escape,
		[EnumMember(Value = "AND")]
		And,
		[EnumMember(Value = "ALL")]
		All
	}

	public enum SnowballLanguage
	{
		[EnumMember(Value = "Turkish")]
		Turkish,
		[EnumMember(Value = "Swedish")]
		Swedish,
		[EnumMember(Value = "Spanish")]
		Spanish,
		[EnumMember(Value = "Russian")]
		Russian,
		[EnumMember(Value = "Romanian")]
		Romanian,
		[EnumMember(Value = "Portuguese")]
		Portuguese,
		[EnumMember(Value = "Porter")]
		Porter,
		[EnumMember(Value = "Norwegian")]
		Norwegian,
		[EnumMember(Value = "Lovins")]
		Lovins,
		[EnumMember(Value = "Kp")]
		Kp,
		[EnumMember(Value = "Italian")]
		Italian,
		[EnumMember(Value = "Hungarian")]
		Hungarian,
		[EnumMember(Value = "German2")]
		German2,
		[EnumMember(Value = "German")]
		German,
		[EnumMember(Value = "French")]
		French,
		[EnumMember(Value = "Finnish")]
		Finnish,
		[EnumMember(Value = "English")]
		English,
		[EnumMember(Value = "Dutch")]
		Dutch,
		[EnumMember(Value = "Danish")]
		Danish,
		[EnumMember(Value = "Catalan")]
		Catalan,
		[EnumMember(Value = "Basque")]
		Basque,
		[EnumMember(Value = "Armenian")]
		Armenian
	}

	public enum SynonymFormat
	{
		[EnumMember(Value = "wordnet")]
		Wordnet,
		[EnumMember(Value = "solr")]
		Solr
	}

	public enum TermsAggregationCollectMode
	{
		[EnumMember(Value = "depth_first")]
		DepthFirst,
		[EnumMember(Value = "breadth_first")]
		BreadthFirst
	}

	public enum TermsAggregationExecutionHint
	{
		[EnumMember(Value = "map")]
		Map,
		[EnumMember(Value = "global_ordinals_low_cardinality")]
		GlobalOrdinalsLowCardinality,
		[EnumMember(Value = "global_ordinals_hash")]
		GlobalOrdinalsHash,
		[EnumMember(Value = "global_ordinals")]
		GlobalOrdinals
	}

	public enum TermVectorOption
	{
		[EnumMember(Value = "yes")]
		Yes,
		[EnumMember(Value = "with_positions_offsets_payloads")]
		WithPositionsOffsetsPayloads,
		[EnumMember(Value = "with_positions_offsets")]
		WithPositionsOffsets,
		[EnumMember(Value = "with_positions")]
		WithPositions,
		[EnumMember(Value = "with_offsets")]
		WithOffsets,
		[EnumMember(Value = "no")]
		No
	}

	public enum TextQueryType
	{
		[EnumMember(Value = "phrase_prefix")]
		PhrasePrefix,
		[EnumMember(Value = "phrase")]
		Phrase,
		[EnumMember(Value = "most_fields")]
		MostFields,
		[EnumMember(Value = "cross_fields")]
		CrossFields,
		[EnumMember(Value = "bool_prefix")]
		BoolPrefix,
		[EnumMember(Value = "best_fields")]
		BestFields
	}

	public enum TokenChar
	{
		[EnumMember(Value = "whitespace")]
		Whitespace,
		[EnumMember(Value = "symbol")]
		Symbol,
		[EnumMember(Value = "punctuation")]
		Punctuation,
		[EnumMember(Value = "letter")]
		Letter,
		[EnumMember(Value = "digit")]
		Digit,
		[EnumMember(Value = "custom")]
		Custom
	}

	public enum TTestType
	{
		[EnumMember(Value = "paired")]
		Paired,
		[EnumMember(Value = "homoscedastic")]
		Homoscedastic,
		[EnumMember(Value = "heteroscedastic")]
		Heteroscedastic
	}

	public enum ValueType
	{
		[EnumMember(Value = "string")]
		String,
		[EnumMember(Value = "numeric")]
		Numeric,
		[EnumMember(Value = "number")]
		Number,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "date_nanos")]
		DateNanos,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "boolean")]
		Boolean
	}

	public enum ZeroTermsQuery
	{
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "all")]
		All
	}
}