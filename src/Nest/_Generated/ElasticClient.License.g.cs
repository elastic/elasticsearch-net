// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class LicenseNamespace : NamespacedClientProxy
	{
		internal LicenseNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteLicenseResponse DeleteLicense(IDeleteLicenseRequest request)
		{
			return DoRequest<IDeleteLicenseRequest, DeleteLicenseResponse>(request, request.RequestParameters);
		}

		public Task<DeleteLicenseResponse> DeleteLicenseAsync(IDeleteLicenseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteLicenseRequest, DeleteLicenseResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetLicenseResponse GetLicense(IGetLicenseRequest request)
		{
			return DoRequest<IGetLicenseRequest, GetLicenseResponse>(request, request.RequestParameters);
		}

		public Task<GetLicenseResponse> GetLicenseAsync(IGetLicenseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetLicenseRequest, GetLicenseResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetBasicLicenseStatusResponse GetBasicLicenseStatus(IGetBasicLicenseStatusRequest request)
		{
			return DoRequest<IGetBasicLicenseStatusRequest, GetBasicLicenseStatusResponse>(request, request.RequestParameters);
		}

		public Task<GetBasicLicenseStatusResponse> GetBasicLicenseStatusAsync(IGetBasicLicenseStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetBasicLicenseStatusRequest, GetBasicLicenseStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetTrialLicenseStatusResponse GetTrialLicenseStatus(IGetTrialLicenseStatusRequest request)
		{
			return DoRequest<IGetTrialLicenseStatusRequest, GetTrialLicenseStatusResponse>(request, request.RequestParameters);
		}

		public Task<GetTrialLicenseStatusResponse> GetTrialLicenseStatusAsync(IGetTrialLicenseStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetTrialLicenseStatusRequest, GetTrialLicenseStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PostLicenseResponse PostLicense(IPostLicenseRequest request)
		{
			return DoRequest<IPostLicenseRequest, PostLicenseResponse>(request, request.RequestParameters);
		}

		public Task<PostLicenseResponse> PostLicenseAsync(IPostLicenseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPostLicenseRequest, PostLicenseResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartBasicLicenseResponse StartBasicLicense(IStartBasicLicenseRequest request)
		{
			return DoRequest<IStartBasicLicenseRequest, StartBasicLicenseResponse>(request, request.RequestParameters);
		}

		public Task<StartBasicLicenseResponse> StartBasicLicenseAsync(IStartBasicLicenseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartBasicLicenseRequest, StartBasicLicenseResponse>(request, request.RequestParameters, cancellationToken);
		}

		public StartTrialLicenseResponse StartTrialLicense(IStartTrialLicenseRequest request)
		{
			return DoRequest<IStartTrialLicenseRequest, StartTrialLicenseResponse>(request, request.RequestParameters);
		}

		public Task<StartTrialLicenseResponse> StartTrialLicenseAsync(IStartTrialLicenseRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStartTrialLicenseRequest, StartTrialLicenseResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}