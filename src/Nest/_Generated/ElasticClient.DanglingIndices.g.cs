// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.DanglingIndices
{
	public class DanglingIndicesNamespace : NamespacedClientProxy
	{
		internal DanglingIndicesNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteDanglingIndexResponse DeleteDanglingIndex(IDeleteDanglingIndexRequest request) => DoRequest<IDeleteDanglingIndexRequest, DeleteDanglingIndexResponse>(request, request.RequestParameters);
		public Task<DeleteDanglingIndexResponse> DeleteDanglingIndexAsync(IDeleteDanglingIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteDanglingIndexRequest, DeleteDanglingIndexResponse>(request, request.RequestParameters, cancellationToken);
		//public DeleteDanglingIndexResponse DeleteDanglingIndex(string index_uuid, Func<DeleteDanglingIndexDescriptor, IDeleteDanglingIndexRequest> selector = null) => DeleteDanglingIndex(selector.InvokeOrDefault(new DeleteDanglingIndexDescriptor(index_uuid)));
		//public Task<DeleteDanglingIndexResponse> DeleteDanglingIndexAsync(string index_uuid, Func<DeleteDanglingIndexDescriptor, IDeleteDanglingIndexRequest> selector = null, CancellationToken cancellationToken = default) => DeleteDanglingIndexAsync(selector.InvokeOrDefault(new DeleteDanglingIndexDescriptor(index_uuid)), cancellationToken);
		public ImportDanglingIndexResponse ImportDanglingIndex(IImportDanglingIndexRequest request) => DoRequest<IImportDanglingIndexRequest, ImportDanglingIndexResponse>(request, request.RequestParameters);
		public Task<ImportDanglingIndexResponse> ImportDanglingIndexAsync(IImportDanglingIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IImportDanglingIndexRequest, ImportDanglingIndexResponse>(request, request.RequestParameters, cancellationToken);
		//public ImportDanglingIndexResponse ImportDanglingIndex(string index_uuid, Func<ImportDanglingIndexDescriptor, IImportDanglingIndexRequest> selector = null) => ImportDanglingIndex(selector.InvokeOrDefault(new ImportDanglingIndexDescriptor(index_uuid)));
		//public Task<ImportDanglingIndexResponse> ImportDanglingIndexAsync(string index_uuid, Func<ImportDanglingIndexDescriptor, IImportDanglingIndexRequest> selector = null, CancellationToken cancellationToken = default) => ImportDanglingIndexAsync(selector.InvokeOrDefault(new ImportDanglingIndexDescriptor(index_uuid)), cancellationToken);
		public ListDanglingIndicesResponse List(IListDanglingIndicesRequest request) => DoRequest<IListDanglingIndicesRequest, ListDanglingIndicesResponse>(request, request.RequestParameters);
		public Task<ListDanglingIndicesResponse> ListAsync(IListDanglingIndicesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IListDanglingIndicesRequest, ListDanglingIndicesResponse>(request, request.RequestParameters, cancellationToken);
		public ListDanglingIndicesResponse List(Func<ListDanglingIndicesDescriptor, IListDanglingIndicesRequest> selector = null) => List(selector.InvokeOrDefault(new ListDanglingIndicesDescriptor()));
		public Task<ListDanglingIndicesResponse> ListAsync(Func<ListDanglingIndicesDescriptor, IListDanglingIndicesRequest> selector = null, CancellationToken cancellationToken = default) => ListAsync(selector.InvokeOrDefault(new ListDanglingIndicesDescriptor()), cancellationToken);
	}
}
