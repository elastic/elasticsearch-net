// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.AsyncSearch
{
	public class AsyncSearchNamespace : NamespacedClientProxy
	{
		internal AsyncSearchNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteResponse Delete(IDeleteRequest request)
		{
			return DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		}

		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteResponse Delete(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null)
		{
			return Delete(selector.InvokeOrDefault(new DeleteDescriptor(id)));
		}

		public Task<DeleteResponse> DeleteAsync(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(id)), cancellationToken);
		}

		public GetResponse<TDocument> Get<TDocument>(IGetRequest request)
		{
			return DoRequest<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(IGetRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public GetResponse<TDocument> Get<TDocument>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null)
		{
			return Get<TDocument>(selector.InvokeOrDefault(new GetDescriptor(id)));
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetAsync<TDocument>(selector.InvokeOrDefault(new GetDescriptor(id)), cancellationToken);
		}

		public StatusResponse<TDocument> Status<TDocument>(IStatusRequest request)
		{
			return DoRequest<IStatusRequest, StatusResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<StatusResponse<TDocument>> StatusAsync<TDocument>(IStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IStatusRequest, StatusResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public StatusResponse<TDocument> Status<TDocument>(Nest.Id id, Func<StatusDescriptor, IStatusRequest> selector = null)
		{
			return Status<TDocument>(selector.InvokeOrDefault(new StatusDescriptor(id)));
		}

		public Task<StatusResponse<TDocument>> StatusAsync<TDocument>(Nest.Id id, Func<StatusDescriptor, IStatusRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return StatusAsync<TDocument>(selector.InvokeOrDefault(new StatusDescriptor(id)), cancellationToken);
		}

		public SubmitResponse<TDocument> Submit<TDocument>(ISubmitRequest request)
		{
			return DoRequest<ISubmitRequest, SubmitResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<SubmitResponse<TDocument>> SubmitAsync<TDocument>(ISubmitRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISubmitRequest, SubmitResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public SubmitResponse<TDocument> Submit<TDocument>(Func<SubmitDescriptor, ISubmitRequest> selector = null)
		{
			return Submit<TDocument>(selector.InvokeOrDefault(new SubmitDescriptor()));
		}

		public Task<SubmitResponse<TDocument>> SubmitAsync<TDocument>(Func<SubmitDescriptor, ISubmitRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SubmitAsync<TDocument>(selector.InvokeOrDefault(new SubmitDescriptor()), cancellationToken);
		}
	}
}