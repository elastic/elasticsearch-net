// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Nodes
{
	public class NodesNamespace : NamespacedClientProxy
	{
		internal NodesNamespace(ElasticClient client) : base(client)
		{
		}

		public HotThreadsResponse HotThreads(IHotThreadsRequest request) => DoRequest<IHotThreadsRequest, HotThreadsResponse>(request, request.RequestParameters);
		public Task<HotThreadsResponse> HotThreadsAsync(IHotThreadsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IHotThreadsRequest, HotThreadsResponse>(request, request.RequestParameters, cancellationToken);
		public HotThreadsResponse HotThreads(Func<HotThreadsDescriptor, IHotThreadsRequest> selector = null) => HotThreads(selector.InvokeOrDefault(new HotThreadsDescriptor()));
		public Task<HotThreadsResponse> HotThreadsAsync(Func<HotThreadsDescriptor, IHotThreadsRequest> selector = null, CancellationToken cancellationToken = default) => HotThreadsAsync(selector.InvokeOrDefault(new HotThreadsDescriptor()), cancellationToken);
		public InfoResponse Info(IInfoRequest request) => DoRequest<IInfoRequest, InfoResponse>(request, request.RequestParameters);
		public Task<InfoResponse> InfoAsync(IInfoRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IInfoRequest, InfoResponse>(request, request.RequestParameters, cancellationToken);
		public InfoResponse Info(Func<InfoDescriptor, IInfoRequest> selector = null) => Info(selector.InvokeOrDefault(new InfoDescriptor()));
		public Task<InfoResponse> InfoAsync(Func<InfoDescriptor, IInfoRequest> selector = null, CancellationToken cancellationToken = default) => InfoAsync(selector.InvokeOrDefault(new InfoDescriptor()), cancellationToken);
		public ReloadSecureSettingsResponse ReloadSecureSettings(IReloadSecureSettingsRequest request) => DoRequest<IReloadSecureSettingsRequest, ReloadSecureSettingsResponse>(request, request.RequestParameters);
		public Task<ReloadSecureSettingsResponse> ReloadSecureSettingsAsync(IReloadSecureSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IReloadSecureSettingsRequest, ReloadSecureSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public ReloadSecureSettingsResponse ReloadSecureSettings(Func<ReloadSecureSettingsDescriptor, IReloadSecureSettingsRequest> selector = null) => ReloadSecureSettings(selector.InvokeOrDefault(new ReloadSecureSettingsDescriptor()));
		public Task<ReloadSecureSettingsResponse> ReloadSecureSettingsAsync(Func<ReloadSecureSettingsDescriptor, IReloadSecureSettingsRequest> selector = null, CancellationToken cancellationToken = default) => ReloadSecureSettingsAsync(selector.InvokeOrDefault(new ReloadSecureSettingsDescriptor()), cancellationToken);
		public StatsResponse Stats(IStatsRequest request) => DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null) => Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default) => StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
		public UsageResponse Usage(IUsageRequest request) => DoRequest<IUsageRequest, UsageResponse>(request, request.RequestParameters);
		public Task<UsageResponse> UsageAsync(IUsageRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUsageRequest, UsageResponse>(request, request.RequestParameters, cancellationToken);
		public UsageResponse Usage(Func<UsageDescriptor, IUsageRequest> selector = null) => Usage(selector.InvokeOrDefault(new UsageDescriptor()));
		public Task<UsageResponse> UsageAsync(Func<UsageDescriptor, IUsageRequest> selector = null, CancellationToken cancellationToken = default) => UsageAsync(selector.InvokeOrDefault(new UsageDescriptor()), cancellationToken);
	}
}