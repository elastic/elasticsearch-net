// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class NodesNamespace : NamespacedClientProxy
	{
		internal NodesNamespace(ElasticClient client) : base(client)
		{
		}

		public NodesHotThreadsResponse HotThreads(INodesHotThreadsRequest request)
		{
			return DoRequest<INodesHotThreadsRequest, NodesHotThreadsResponse>(request, request.RequestParameters);
		}

		public Task<NodesHotThreadsResponse> HotThreadsAsync(INodesHotThreadsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<INodesHotThreadsRequest, NodesHotThreadsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public NodesInfoResponse Info(INodesInfoRequest request)
		{
			return DoRequest<INodesInfoRequest, NodesInfoResponse>(request, request.RequestParameters);
		}

		public Task<NodesInfoResponse> InfoAsync(INodesInfoRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<INodesInfoRequest, NodesInfoResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ReloadSecureSettingsResponse ReloadSecureSettings(IReloadSecureSettingsRequest request)
		{
			return DoRequest<IReloadSecureSettingsRequest, ReloadSecureSettingsResponse>(request, request.RequestParameters);
		}

		public Task<ReloadSecureSettingsResponse> ReloadSecureSettingsAsync(IReloadSecureSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IReloadSecureSettingsRequest, ReloadSecureSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public NodesStatsResponse Stats(INodesStatsRequest request)
		{
			return DoRequest<INodesStatsRequest, NodesStatsResponse>(request, request.RequestParameters);
		}

		public Task<NodesStatsResponse> StatsAsync(INodesStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<INodesStatsRequest, NodesStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public NodesUsageResponse Usage(INodesUsageRequest request)
		{
			return DoRequest<INodesUsageRequest, NodesUsageResponse>(request, request.RequestParameters);
		}

		public Task<NodesUsageResponse> UsageAsync(INodesUsageRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<INodesUsageRequest, NodesUsageResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}