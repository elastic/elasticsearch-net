// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Nest.AsyncSearch;
using Nest.Cluster;
using Nest.CrossClusterReplication;
using Nest.Enrich;
using Nest.Eql;
using Nest.Graph;
using Nest.IndexLifecycleManagement;
using Nest.IndexManagement;
using Nest.Ingest;
using Nest.License;
using Nest.Migration;
using Nest.Nodes;
using Nest.SearchableSnapshots;
using Nest.Security;
using Nest.Shutdown;
using Nest.Snapshot;
using Nest.SnapshotLifecycleManagement;
using Nest.Sql;
using Nest.TextStructure;
using Nest.Watcher;
using Nest.Xpack;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public partial class ElasticClient : IElasticClient
	{
		public AsyncSearchNamespace AsyncSearch { get; private set; }

		public CrossClusterReplicationNamespace CrossClusterReplication { get; private set; }

		public ClusterNamespace Cluster { get; private set; }

		public EnrichNamespace Enrich { get; private set; }

		public EqlNamespace Eql { get; private set; }

		public GraphNamespace Graph { get; private set; }

		public IndexLifecycleManagementNamespace IndexLifecycleManagement { get; private set; }

		public IndexManagementNamespace IndexManagement { get; private set; }

		public IngestNamespace Ingest { get; private set; }

		public LicenseNamespace License { get; private set; }

		public MigrationNamespace Migration { get; private set; }

		public NodesNamespace Nodes { get; private set; }

		public SearchableSnapshotsNamespace SearchableSnapshots { get; private set; }

		public SecurityNamespace Security { get; private set; }

		public ShutdownNamespace Shutdown { get; private set; }

		public SnapshotLifecycleManagementNamespace SnapshotLifecycleManagement { get; private set; }

		public SnapshotNamespace Snapshot { get; private set; }

		public SqlNamespace Sql { get; private set; }

		public TextStructureNamespace TextStructure { get; private set; }

		public WatcherNamespace Watcher { get; private set; }

		public XpackNamespace Xpack { get; private set; }

		private partial void SetupNamespaces()
		{
			AsyncSearch = new AsyncSearchNamespace(this);
			CrossClusterReplication = new CrossClusterReplicationNamespace(this);
			Cluster = new ClusterNamespace(this);
			Enrich = new EnrichNamespace(this);
			Eql = new EqlNamespace(this);
			Graph = new GraphNamespace(this);
			IndexLifecycleManagement = new IndexLifecycleManagementNamespace(this);
			IndexManagement = new IndexManagementNamespace(this);
			Ingest = new IngestNamespace(this);
			License = new LicenseNamespace(this);
			Migration = new MigrationNamespace(this);
			Nodes = new NodesNamespace(this);
			SearchableSnapshots = new SearchableSnapshotsNamespace(this);
			Security = new SecurityNamespace(this);
			Shutdown = new ShutdownNamespace(this);
			SnapshotLifecycleManagement = new SnapshotLifecycleManagementNamespace(this);
			Snapshot = new SnapshotNamespace(this);
			Sql = new SqlNamespace(this);
			TextStructure = new TextStructureNamespace(this);
			Watcher = new WatcherNamespace(this);
			Xpack = new XpackNamespace(this);
		}

		public ClearScrollResponse ClearScroll(IClearScrollRequest request)
		{
			return DoRequest<IClearScrollRequest, ClearScrollResponse>(request, request.RequestParameters);
		}

		public Task<ClearScrollResponse> ClearScrollAsync(IClearScrollRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearScrollRequest, ClearScrollResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearScrollResponse ClearScroll(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null)
		{
			return ClearScroll(selector.InvokeOrDefault(new ClearScrollDescriptor()));
		}

		public Task<ClearScrollResponse> ClearScrollAsync(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearScrollAsync(selector.InvokeOrDefault(new ClearScrollDescriptor()), cancellationToken);
		}

		public ClosePointInTimeResponse ClosePointInTime(IClosePointInTimeRequest request)
		{
			return DoRequest<IClosePointInTimeRequest, ClosePointInTimeResponse>(request, request.RequestParameters);
		}

		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(IClosePointInTimeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClosePointInTimeRequest, ClosePointInTimeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClosePointInTimeResponse ClosePointInTime(Func<ClosePointInTimeDescriptor, IClosePointInTimeRequest> selector = null)
		{
			return ClosePointInTime(selector.InvokeOrDefault(new ClosePointInTimeDescriptor()));
		}

		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(Func<ClosePointInTimeDescriptor, IClosePointInTimeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClosePointInTimeAsync(selector.InvokeOrDefault(new ClosePointInTimeDescriptor()), cancellationToken);
		}

		public CountResponse Count(ICountRequest request)
		{
			return DoRequest<ICountRequest, CountResponse>(request, request.RequestParameters);
		}

		public Task<CountResponse> CountAsync(ICountRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICountRequest, CountResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CountResponse Count(Func<CountDescriptor, ICountRequest> selector = null)
		{
			return Count(selector.InvokeOrDefault(new CountDescriptor()));
		}

		public Task<CountResponse> CountAsync(Func<CountDescriptor, ICountRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CountAsync(selector.InvokeOrDefault(new CountDescriptor()), cancellationToken);
		}

		public CreateResponse Create<TDocument>(ICreateRequest<TDocument> request)
		{
			return DoRequest<ICreateRequest<TDocument>, CreateResponse>(request, request.RequestParameters);
		}

		public Task<CreateResponse> CreateAsync<TDocument>(ICreateRequest<TDocument> request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateRequest<TDocument>, CreateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateResponse Create<TDocument>(TDocument document, Nest.IndexName index, Nest.Id id, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector = null)
		{
			return Create<TDocument>(selector.InvokeOrDefault(new CreateDescriptor<TDocument>(index, id)));
		}

		public Task<CreateResponse> CreateAsync<TDocument>(TDocument document, Nest.IndexName index, Nest.Id id, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateAsync<TDocument>(selector.InvokeOrDefault(new CreateDescriptor<TDocument>(index, id)), cancellationToken);
		}

		public DeleteResponse Delete(IDeleteRequest request)
		{
			return DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		}

		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteResponse Delete(Nest.IndexName index, Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null)
		{
			return Delete(selector.InvokeOrDefault(new DeleteDescriptor(index, id)));
		}

		public Task<DeleteResponse> DeleteAsync(Nest.IndexName index, Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(index, id)), cancellationToken);
		}

		public DeleteByQueryResponse DeleteByQuery(IDeleteByQueryRequest request)
		{
			return DoRequest<IDeleteByQueryRequest, DeleteByQueryResponse>(request, request.RequestParameters);
		}

		public Task<DeleteByQueryResponse> DeleteByQueryAsync(IDeleteByQueryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteByQueryRequest, DeleteByQueryResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteByQueryResponse DeleteByQuery(Nest.Indices index, Func<DeleteByQueryDescriptor, IDeleteByQueryRequest> selector = null)
		{
			return DeleteByQuery(selector.InvokeOrDefault(new DeleteByQueryDescriptor(index)));
		}

		public Task<DeleteByQueryResponse> DeleteByQueryAsync(Nest.Indices index, Func<DeleteByQueryDescriptor, IDeleteByQueryRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteByQueryAsync(selector.InvokeOrDefault(new DeleteByQueryDescriptor(index)), cancellationToken);
		}

		public ExistsResponse Exists(IExistsRequest request)
		{
			return DoRequest<IExistsRequest, ExistsResponse>(request, request.RequestParameters);
		}

		public Task<ExistsResponse> ExistsAsync(IExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsRequest, ExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsResponse Exists(Nest.IndexName index, Nest.Id id, Func<ExistsDescriptor, IExistsRequest> selector = null)
		{
			return Exists(selector.InvokeOrDefault(new ExistsDescriptor(index, id)));
		}

		public Task<ExistsResponse> ExistsAsync(Nest.IndexName index, Nest.Id id, Func<ExistsDescriptor, IExistsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsAsync(selector.InvokeOrDefault(new ExistsDescriptor(index, id)), cancellationToken);
		}

		public ExistsSourceResponse ExistsSource(IExistsSourceRequest request)
		{
			return DoRequest<IExistsSourceRequest, ExistsSourceResponse>(request, request.RequestParameters);
		}

		public Task<ExistsSourceResponse> ExistsSourceAsync(IExistsSourceRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExistsSourceRequest, ExistsSourceResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ExistsSourceResponse ExistsSource(Nest.IndexName index, Nest.Id id, Func<ExistsSourceDescriptor, IExistsSourceRequest> selector = null)
		{
			return ExistsSource(selector.InvokeOrDefault(new ExistsSourceDescriptor(index, id)));
		}

		public Task<ExistsSourceResponse> ExistsSourceAsync(Nest.IndexName index, Nest.Id id, Func<ExistsSourceDescriptor, IExistsSourceRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExistsSourceAsync(selector.InvokeOrDefault(new ExistsSourceDescriptor(index, id)), cancellationToken);
		}

		public ExplainResponse<TDocument> Explain<TDocument>(IExplainRequest request)
		{
			return DoRequest<IExplainRequest, ExplainResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(IExplainRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IExplainRequest, ExplainResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public ExplainResponse<TDocument> Explain<TDocument>(Nest.IndexName index, Nest.Id id, Func<ExplainDescriptor, IExplainRequest> selector = null)
		{
			return Explain<TDocument>(selector.InvokeOrDefault(new ExplainDescriptor(index, id)));
		}

		public Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(Nest.IndexName index, Nest.Id id, Func<ExplainDescriptor, IExplainRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ExplainAsync<TDocument>(selector.InvokeOrDefault(new ExplainDescriptor(index, id)), cancellationToken);
		}

		public FieldCapsResponse FieldCaps(IFieldCapsRequest request)
		{
			return DoRequest<IFieldCapsRequest, FieldCapsResponse>(request, request.RequestParameters);
		}

		public Task<FieldCapsResponse> FieldCapsAsync(IFieldCapsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFieldCapsRequest, FieldCapsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FieldCapsResponse FieldCaps(Func<FieldCapsDescriptor, IFieldCapsRequest> selector = null)
		{
			return FieldCaps(selector.InvokeOrDefault(new FieldCapsDescriptor()));
		}

		public Task<FieldCapsResponse> FieldCapsAsync(Func<FieldCapsDescriptor, IFieldCapsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return FieldCapsAsync(selector.InvokeOrDefault(new FieldCapsDescriptor()), cancellationToken);
		}

		public GetResponse<TDocument> Get<TDocument>(IGetRequest request)
		{
			return DoRequest<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(IGetRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public GetResponse<TDocument> Get<TDocument>(Nest.IndexName index, Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null)
		{
			return Get<TDocument>(selector.InvokeOrDefault(new GetDescriptor(index, id)));
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(Nest.IndexName index, Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetAsync<TDocument>(selector.InvokeOrDefault(new GetDescriptor(index, id)), cancellationToken);
		}

		public GetScriptResponse GetScript(IGetScriptRequest request)
		{
			return DoRequest<IGetScriptRequest, GetScriptResponse>(request, request.RequestParameters);
		}

		public Task<GetScriptResponse> GetScriptAsync(IGetScriptRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetScriptRequest, GetScriptResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetScriptResponse GetScript(Nest.Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null)
		{
			return GetScript(selector.InvokeOrDefault(new GetScriptDescriptor(id)));
		}

		public Task<GetScriptResponse> GetScriptAsync(Nest.Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetScriptAsync(selector.InvokeOrDefault(new GetScriptDescriptor(id)), cancellationToken);
		}

		public GetScriptContextResponse GetScriptContext(IGetScriptContextRequest request)
		{
			return DoRequest<IGetScriptContextRequest, GetScriptContextResponse>(request, request.RequestParameters);
		}

		public Task<GetScriptContextResponse> GetScriptContextAsync(IGetScriptContextRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetScriptContextRequest, GetScriptContextResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetScriptContextResponse GetScriptContext(Func<GetScriptContextDescriptor, IGetScriptContextRequest> selector = null)
		{
			return GetScriptContext(selector.InvokeOrDefault(new GetScriptContextDescriptor()));
		}

		public Task<GetScriptContextResponse> GetScriptContextAsync(Func<GetScriptContextDescriptor, IGetScriptContextRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetScriptContextAsync(selector.InvokeOrDefault(new GetScriptContextDescriptor()), cancellationToken);
		}

		public GetScriptLanguagesResponse GetScriptLanguages(IGetScriptLanguagesRequest request)
		{
			return DoRequest<IGetScriptLanguagesRequest, GetScriptLanguagesResponse>(request, request.RequestParameters);
		}

		public Task<GetScriptLanguagesResponse> GetScriptLanguagesAsync(IGetScriptLanguagesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetScriptLanguagesRequest, GetScriptLanguagesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetScriptLanguagesResponse GetScriptLanguages(Func<GetScriptLanguagesDescriptor, IGetScriptLanguagesRequest> selector = null)
		{
			return GetScriptLanguages(selector.InvokeOrDefault(new GetScriptLanguagesDescriptor()));
		}

		public Task<GetScriptLanguagesResponse> GetScriptLanguagesAsync(Func<GetScriptLanguagesDescriptor, IGetScriptLanguagesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetScriptLanguagesAsync(selector.InvokeOrDefault(new GetScriptLanguagesDescriptor()), cancellationToken);
		}

		public IndexResponse Index<TDocument>(IIndexRequest<TDocument> request)
		{
			return DoRequest<IIndexRequest<TDocument>, IndexResponse>(request, request.RequestParameters);
		}

		public Task<IndexResponse> IndexAsync<TDocument>(IIndexRequest<TDocument> request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexRequest<TDocument>, IndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexResponse Index<TDocument>(TDocument document, Nest.IndexName index, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector = null)
		{
			return Index<TDocument>(selector.InvokeOrDefault(new IndexDescriptor<TDocument>(index)));
		}

		public Task<IndexResponse> IndexAsync<TDocument>(TDocument document, Nest.IndexName index, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector = null, CancellationToken cancellationToken = default)
		{
			return IndexAsync<TDocument>(selector.InvokeOrDefault(new IndexDescriptor<TDocument>(index)), cancellationToken);
		}

		public InfoResponse Info(IInfoRequest request)
		{
			return DoRequest<IInfoRequest, InfoResponse>(request, request.RequestParameters);
		}

		public Task<InfoResponse> InfoAsync(IInfoRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IInfoRequest, InfoResponse>(request, request.RequestParameters, cancellationToken);
		}

		public InfoResponse Info(Func<InfoDescriptor, IInfoRequest> selector = null)
		{
			return Info(selector.InvokeOrDefault(new InfoDescriptor()));
		}

		public Task<InfoResponse> InfoAsync(Func<InfoDescriptor, IInfoRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return InfoAsync(selector.InvokeOrDefault(new InfoDescriptor()), cancellationToken);
		}

		public OpenPointInTimeResponse OpenPointInTime(IOpenPointInTimeRequest request)
		{
			return DoRequest<IOpenPointInTimeRequest, OpenPointInTimeResponse>(request, request.RequestParameters);
		}

		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(IOpenPointInTimeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IOpenPointInTimeRequest, OpenPointInTimeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public OpenPointInTimeResponse OpenPointInTime(Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null)
		{
			return OpenPointInTime(selector.InvokeOrDefault(new OpenPointInTimeDescriptor()));
		}

		public OpenPointInTimeResponse OpenPointInTime(Nest.Indices index, Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null)
		{
			return OpenPointInTime(selector.InvokeOrDefault(new OpenPointInTimeDescriptor(index)));
		}

		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return OpenPointInTimeAsync(selector.InvokeOrDefault(new OpenPointInTimeDescriptor()), cancellationToken);
		}

		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Nest.Indices index, Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return OpenPointInTimeAsync(selector.InvokeOrDefault(new OpenPointInTimeDescriptor(index)), cancellationToken);
		}

		public PingResponse Ping(IPingRequest request)
		{
			return DoRequest<IPingRequest, PingResponse>(request, request.RequestParameters);
		}

		public Task<PingResponse> PingAsync(IPingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPingRequest, PingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PingResponse Ping(Func<PingDescriptor, IPingRequest> selector = null)
		{
			return Ping(selector.InvokeOrDefault(new PingDescriptor()));
		}

		public Task<PingResponse> PingAsync(Func<PingDescriptor, IPingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PingAsync(selector.InvokeOrDefault(new PingDescriptor()), cancellationToken);
		}

		public PutScriptResponse PutScript(IPutScriptRequest request)
		{
			return DoRequest<IPutScriptRequest, PutScriptResponse>(request, request.RequestParameters);
		}

		public Task<PutScriptResponse> PutScriptAsync(IPutScriptRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutScriptRequest, PutScriptResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutScriptResponse PutScript(Nest.Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector = null)
		{
			return PutScript(selector.InvokeOrDefault(new PutScriptDescriptor(id)));
		}

		public Task<PutScriptResponse> PutScriptAsync(Nest.Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutScriptAsync(selector.InvokeOrDefault(new PutScriptDescriptor(id)), cancellationToken);
		}

		public ReindexResponse Reindex(IReindexRequest request)
		{
			return DoRequest<IReindexRequest, ReindexResponse>(request, request.RequestParameters);
		}

		public Task<ReindexResponse> ReindexAsync(IReindexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IReindexRequest, ReindexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ReindexResponse Reindex(Func<ReindexDescriptor, IReindexRequest> selector = null)
		{
			return Reindex(selector.InvokeOrDefault(new ReindexDescriptor()));
		}

		public Task<ReindexResponse> ReindexAsync(Func<ReindexDescriptor, IReindexRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ReindexAsync(selector.InvokeOrDefault(new ReindexDescriptor()), cancellationToken);
		}

		public ReindexRethrottleResponse ReindexRethrottle(IReindexRethrottleRequest request)
		{
			return DoRequest<IReindexRethrottleRequest, ReindexRethrottleResponse>(request, request.RequestParameters);
		}

		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(IReindexRethrottleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IReindexRethrottleRequest, ReindexRethrottleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ReindexRethrottleResponse ReindexRethrottle(Nest.Id task_id, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null)
		{
			return ReindexRethrottle(selector.InvokeOrDefault(new ReindexRethrottleDescriptor(task_id)));
		}

		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(Nest.Id task_id, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ReindexRethrottleAsync(selector.InvokeOrDefault(new ReindexRethrottleDescriptor(task_id)), cancellationToken);
		}

		public RenderSearchTemplateResponse RenderSearchTemplate(IRenderSearchTemplateRequest request)
		{
			return DoRequest<IRenderSearchTemplateRequest, RenderSearchTemplateResponse>(request, request.RequestParameters);
		}

		public Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(IRenderSearchTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRenderSearchTemplateRequest, RenderSearchTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RenderSearchTemplateResponse RenderSearchTemplate(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null)
		{
			return RenderSearchTemplate(selector.InvokeOrDefault(new RenderSearchTemplateDescriptor()));
		}

		public Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return RenderSearchTemplateAsync(selector.InvokeOrDefault(new RenderSearchTemplateDescriptor()), cancellationToken);
		}

		public ScrollResponse<TDocument> Scroll<TDocument>(IScrollRequest request)
		{
			return DoRequest<IScrollRequest, ScrollResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<ScrollResponse<TDocument>> ScrollAsync<TDocument>(IScrollRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IScrollRequest, ScrollResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public ScrollResponse<TDocument> Scroll<TDocument>(Func<ScrollDescriptor, IScrollRequest> selector = null)
		{
			return Scroll<TDocument>(selector.InvokeOrDefault(new ScrollDescriptor()));
		}

		public Task<ScrollResponse<TDocument>> ScrollAsync<TDocument>(Func<ScrollDescriptor, IScrollRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ScrollAsync<TDocument>(selector.InvokeOrDefault(new ScrollDescriptor()), cancellationToken);
		}

		public SearchResponse<TDocument> Search<TDocument>(ISearchRequest request)
		{
			return DoRequest<ISearchRequest, SearchResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(ISearchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISearchRequest, SearchResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public SearchResponse<TDocument> Search<TDocument>(Func<SearchDescriptor, ISearchRequest> selector = null)
		{
			return Search<TDocument>(selector.InvokeOrDefault(new SearchDescriptor()));
		}

		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Func<SearchDescriptor, ISearchRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SearchAsync<TDocument>(selector.InvokeOrDefault(new SearchDescriptor()), cancellationToken);
		}

		public SearchShardsResponse SearchShards(ISearchShardsRequest request)
		{
			return DoRequest<ISearchShardsRequest, SearchShardsResponse>(request, request.RequestParameters);
		}

		public Task<SearchShardsResponse> SearchShardsAsync(ISearchShardsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISearchShardsRequest, SearchShardsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SearchShardsResponse SearchShards(Func<SearchShardsDescriptor, ISearchShardsRequest> selector = null)
		{
			return SearchShards(selector.InvokeOrDefault(new SearchShardsDescriptor()));
		}

		public Task<SearchShardsResponse> SearchShardsAsync(Func<SearchShardsDescriptor, ISearchShardsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SearchShardsAsync(selector.InvokeOrDefault(new SearchShardsDescriptor()), cancellationToken);
		}

		public SearchTemplateResponse<TDocument> SearchTemplate<TDocument>(ISearchTemplateRequest request)
		{
			return DoRequest<ISearchTemplateRequest, SearchTemplateResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<SearchTemplateResponse<TDocument>> SearchTemplateAsync<TDocument>(ISearchTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISearchTemplateRequest, SearchTemplateResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public SearchTemplateResponse<TDocument> SearchTemplate<TDocument>(Func<SearchTemplateDescriptor, ISearchTemplateRequest> selector = null)
		{
			return SearchTemplate<TDocument>(selector.InvokeOrDefault(new SearchTemplateDescriptor()));
		}

		public Task<SearchTemplateResponse<TDocument>> SearchTemplateAsync<TDocument>(Func<SearchTemplateDescriptor, ISearchTemplateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SearchTemplateAsync<TDocument>(selector.InvokeOrDefault(new SearchTemplateDescriptor()), cancellationToken);
		}

		public TermsEnumResponse TermsEnum(ITermsEnumRequest request)
		{
			return DoRequest<ITermsEnumRequest, TermsEnumResponse>(request, request.RequestParameters);
		}

		public Task<TermsEnumResponse> TermsEnumAsync(ITermsEnumRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ITermsEnumRequest, TermsEnumResponse>(request, request.RequestParameters, cancellationToken);
		}

		public TermsEnumResponse TermsEnum(Nest.IndexName index, Func<TermsEnumDescriptor, ITermsEnumRequest> selector = null)
		{
			return TermsEnum(selector.InvokeOrDefault(new TermsEnumDescriptor(index)));
		}

		public Task<TermsEnumResponse> TermsEnumAsync(Nest.IndexName index, Func<TermsEnumDescriptor, ITermsEnumRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return TermsEnumAsync(selector.InvokeOrDefault(new TermsEnumDescriptor(index)), cancellationToken);
		}

		public TermvectorsResponse Termvectors<TDocument>(ITermvectorsRequest<TDocument> request)
		{
			return DoRequest<ITermvectorsRequest<TDocument>, TermvectorsResponse>(request, request.RequestParameters);
		}

		public Task<TermvectorsResponse> TermvectorsAsync<TDocument>(ITermvectorsRequest<TDocument> request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ITermvectorsRequest<TDocument>, TermvectorsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public TermvectorsResponse Termvectors<TDocument>(TDocument document, Nest.IndexName index, Func<TermvectorsDescriptor<TDocument>, ITermvectorsRequest<TDocument>> selector = null)
		{
			return Termvectors<TDocument>(selector.InvokeOrDefault(new TermvectorsDescriptor<TDocument>(index)));
		}

		public Task<TermvectorsResponse> TermvectorsAsync<TDocument>(TDocument document, Nest.IndexName index, Func<TermvectorsDescriptor<TDocument>, ITermvectorsRequest<TDocument>> selector = null, CancellationToken cancellationToken = default)
		{
			return TermvectorsAsync<TDocument>(selector.InvokeOrDefault(new TermvectorsDescriptor<TDocument>(index)), cancellationToken);
		}

		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request)
		{
			return DoRequest<IUpdateRequest<TDocument,TPartialDocument>, UpdateResponse<TDocument>>(request, request.RequestParameters);
		}

		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUpdateRequest<TDocument,TPartialDocument>, UpdateResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		}

		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Nest.IndexName index, Nest.Id id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument,TPartialDocument>> selector = null)
		{
			return Update<TDocument, TPartialDocument>(selector.InvokeOrDefault(new UpdateDescriptor<TDocument, TPartialDocument>(index, id)));
		}

		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Nest.IndexName index, Nest.Id id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument,TPartialDocument>> selector = null, CancellationToken cancellationToken = default)
		{
			return UpdateAsync<TDocument, TPartialDocument>(selector.InvokeOrDefault(new UpdateDescriptor<TDocument, TPartialDocument>(index, id)), cancellationToken);
		}
	}
}