// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Nest.Cluster;
using Nest.Global.Ping;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public partial class ElasticClient : IElasticClient
	{
		public ClusterNamespace Cluster { get; private set; }

		private partial void SetupNamespaces()
		{
			Cluster = new ClusterNamespace(this);
		}

		public Global.Ping.PingResponse Ping(IPingRequest request)
		{
			return DoRequest<IPingRequest, PingResponse>(request, request.RequestParameters);
		}

		public Task<Global.Ping.PingResponse> PingAsync(IPingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPingRequest, PingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PingResponse Ping(Func<PingDescriptor, IPingRequest> selector = null)
		{
			return Ping(selector.InvokeOrDefault(new PingDescriptor()));
		}

		public Task<PingResponse> PingAsync(Func<PingDescriptor, IPingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PingAsync(selector.InvokeOrDefault(new PingDescriptor()), cancellationToken);
		}
	}
}