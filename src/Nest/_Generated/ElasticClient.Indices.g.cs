// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class IndicesNamespace : NamespacedClientProxy
	{
		internal IndicesNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteIndexResponse DeleteIndex(IDeleteIndexRequest request)
		{
			return DoRequest<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters);
		}

		public Task<DeleteIndexResponse> DeleteIndexAsync(IDeleteIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteAliasResponse DeleteAlias(IDeleteAliasRequest request)
		{
			return DoRequest<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters);
		}

		public Task<DeleteAliasResponse> DeleteAliasAsync(IDeleteAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndicesDeleteDataStreamResponse DeleteDataStream(IIndicesDeleteDataStreamRequest request)
		{
			return DoRequest<IIndicesDeleteDataStreamRequest, IndicesDeleteDataStreamResponse>(request, request.RequestParameters);
		}

		public Task<IndicesDeleteDataStreamResponse> DeleteDataStreamAsync(IIndicesDeleteDataStreamRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndicesDeleteDataStreamRequest, IndicesDeleteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteIndexTemplateResponse DeleteIndexTemplate(IDeleteIndexTemplateRequest request)
		{
			return DoRequest<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(IDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexTemplateExistsResponse IndexTemplateExists(IIndexTemplateExistsRequest request)
		{
			return DoRequest<IIndexTemplateExistsRequest, IndexTemplateExistsResponse>(request, request.RequestParameters);
		}

		public Task<IndexTemplateExistsResponse> IndexTemplateExistsAsync(IIndexTemplateExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexTemplateExistsRequest, IndexTemplateExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetFieldMappingResponse GetFieldMapping(IGetFieldMappingRequest request)
		{
			return DoRequest<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetFieldMappingResponse> GetFieldMappingAsync(IGetFieldMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetMappingResponse GetMapping(IGetMappingRequest request)
		{
			return DoRequest<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetMappingResponse> GetMappingAsync(IGetMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutMappingResponse PutMapping(IPutMappingRequest request)
		{
			return DoRequest<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters);
		}

		public Task<PutMappingResponse> PutMappingAsync(IPutMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}