// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class IndicesNamespace : NamespacedClientProxy
	{
		internal IndicesNamespace(ElasticClient client) : base(client)
		{
		}

		public AnalyzeResponse Analyze(IAnalyzeRequest request)
		{
			return DoRequest<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters);
		}

		public Task<AnalyzeResponse> AnalyzeAsync(IAnalyzeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCacheResponse ClearCache(IClearCacheRequest request)
		{
			return DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);
		}

		public Task<ClearCacheResponse> ClearCacheAsync(IClearCacheRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CloneIndexResponse CloneIndex(ICloneIndexRequest request)
		{
			return DoRequest<ICloneIndexRequest, CloneIndexResponse>(request, request.RequestParameters);
		}

		public Task<CloneIndexResponse> CloneIndexAsync(ICloneIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICloneIndexRequest, CloneIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CloseIndexResponse CloseIndex(ICloseIndexRequest request)
		{
			return DoRequest<ICloseIndexRequest, CloseIndexResponse>(request, request.RequestParameters);
		}

		public Task<CloseIndexResponse> CloseIndexAsync(ICloseIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICloseIndexRequest, CloseIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateIndexResponse CreateIndex(ICreateIndexRequest request)
		{
			return DoRequest<ICreateIndexRequest, CreateIndexResponse>(request, request.RequestParameters);
		}

		public Task<CreateIndexResponse> CreateIndexAsync(ICreateIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateIndexRequest, CreateIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteIndexResponse DeleteIndex(IDeleteIndexRequest request)
		{
			return DoRequest<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters);
		}

		public Task<DeleteIndexResponse> DeleteIndexAsync(IDeleteIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteAliasResponse DeleteAlias(IDeleteAliasRequest request)
		{
			return DoRequest<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters);
		}

		public Task<DeleteAliasResponse> DeleteAliasAsync(IDeleteAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteIndexTemplateResponse DeleteIndexTemplate(IDeleteIndexTemplateRequest request)
		{
			return DoRequest<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(IDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexExistsResponse IndexExists(IIndexExistsRequest request)
		{
			return DoRequest<IIndexExistsRequest, IndexExistsResponse>(request, request.RequestParameters);
		}

		public Task<IndexExistsResponse> IndexExistsAsync(IIndexExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexExistsRequest, IndexExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public AliasExistsResponse AliasExists(IAliasExistsRequest request)
		{
			return DoRequest<IAliasExistsRequest, AliasExistsResponse>(request, request.RequestParameters);
		}

		public Task<AliasExistsResponse> AliasExistsAsync(IAliasExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAliasExistsRequest, AliasExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndexTemplateExistsResponse IndexTemplateExists(IIndexTemplateExistsRequest request)
		{
			return DoRequest<IIndexTemplateExistsRequest, IndexTemplateExistsResponse>(request, request.RequestParameters);
		}

		public Task<IndexTemplateExistsResponse> IndexTemplateExistsAsync(IIndexTemplateExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndexTemplateExistsRequest, IndexTemplateExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public TypeExistsResponse TypeExists(ITypeExistsRequest request)
		{
			return DoRequest<ITypeExistsRequest, TypeExistsResponse>(request, request.RequestParameters);
		}

		public Task<TypeExistsResponse> TypeExistsAsync(ITypeExistsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ITypeExistsRequest, TypeExistsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FlushResponse Flush(IFlushRequest request)
		{
			return DoRequest<IFlushRequest, FlushResponse>(request, request.RequestParameters);
		}

		public Task<FlushResponse> FlushAsync(IFlushRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFlushRequest, FlushResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ForceMergeResponse ForceMerge(IForceMergeRequest request)
		{
			return DoRequest<IForceMergeRequest, ForceMergeResponse>(request, request.RequestParameters);
		}

		public Task<ForceMergeResponse> ForceMergeAsync(IForceMergeRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IForceMergeRequest, ForceMergeResponse>(request, request.RequestParameters, cancellationToken);
		}

		public FreezeIndexResponse FreezeIndex(IFreezeIndexRequest request)
		{
			return DoRequest<IFreezeIndexRequest, FreezeIndexResponse>(request, request.RequestParameters);
		}

		public Task<FreezeIndexResponse> FreezeIndexAsync(IFreezeIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IFreezeIndexRequest, FreezeIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetIndexResponse GetIndex(IGetIndexRequest request)
		{
			return DoRequest<IGetIndexRequest, GetIndexResponse>(request, request.RequestParameters);
		}

		public Task<GetIndexResponse> GetIndexAsync(IGetIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetIndexRequest, GetIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetAliasResponse GetAlias(IGetAliasRequest request)
		{
			return DoRequest<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters);
		}

		public Task<GetAliasResponse> GetAliasAsync(IGetAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetFieldMappingResponse GetFieldMapping(IGetFieldMappingRequest request)
		{
			return DoRequest<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetFieldMappingResponse> GetFieldMappingAsync(IGetFieldMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetMappingResponse GetMapping(IGetMappingRequest request)
		{
			return DoRequest<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetMappingResponse> GetMappingAsync(IGetMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetIndexSettingsResponse GetIndexSettings(IGetIndexSettingsRequest request)
		{
			return DoRequest<IGetIndexSettingsRequest, GetIndexSettingsResponse>(request, request.RequestParameters);
		}

		public Task<GetIndexSettingsResponse> GetIndexSettingsAsync(IGetIndexSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetIndexSettingsRequest, GetIndexSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetIndexTemplateResponse GetIndexTemplate(IGetIndexTemplateRequest request)
		{
			return DoRequest<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<GetIndexTemplateResponse> GetIndexTemplateAsync(IGetIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public OpenIndexResponse OpenIndex(IOpenIndexRequest request)
		{
			return DoRequest<IOpenIndexRequest, OpenIndexResponse>(request, request.RequestParameters);
		}

		public Task<OpenIndexResponse> OpenIndexAsync(IOpenIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IOpenIndexRequest, OpenIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutAliasResponse PutAlias(IPutAliasRequest request)
		{
			return DoRequest<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters);
		}

		public Task<PutAliasResponse> PutAliasAsync(IPutAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutMappingResponse PutMapping(IPutMappingRequest request)
		{
			return DoRequest<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters);
		}

		public Task<PutMappingResponse> PutMappingAsync(IPutMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public UpdateIndexSettingsResponse UpdateIndexSettings(IUpdateIndexSettingsRequest request)
		{
			return DoRequest<IUpdateIndexSettingsRequest, UpdateIndexSettingsResponse>(request, request.RequestParameters);
		}

		public Task<UpdateIndexSettingsResponse> UpdateIndexSettingsAsync(IUpdateIndexSettingsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUpdateIndexSettingsRequest, UpdateIndexSettingsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutIndexTemplateResponse PutIndexTemplate(IPutIndexTemplateRequest request)
		{
			return DoRequest<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters);
		}

		public Task<PutIndexTemplateResponse> PutIndexTemplateAsync(IPutIndexTemplateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RecoveryStatusResponse RecoveryStatus(IRecoveryStatusRequest request)
		{
			return DoRequest<IRecoveryStatusRequest, RecoveryStatusResponse>(request, request.RequestParameters);
		}

		public Task<RecoveryStatusResponse> RecoveryStatusAsync(IRecoveryStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRecoveryStatusRequest, RecoveryStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RefreshResponse Refresh(IRefreshRequest request)
		{
			return DoRequest<IRefreshRequest, RefreshResponse>(request, request.RequestParameters);
		}

		public Task<RefreshResponse> RefreshAsync(IRefreshRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRefreshRequest, RefreshResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ReloadSearchAnalyzersResponse ReloadSearchAnalyzers(IReloadSearchAnalyzersRequest request)
		{
			return DoRequest<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters);
		}

		public Task<ReloadSearchAnalyzersResponse> ReloadSearchAnalyzersAsync(IReloadSearchAnalyzersRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters, cancellationToken);
		}

		public RolloverIndexResponse RolloverIndex(IRolloverIndexRequest request)
		{
			return DoRequest<IRolloverIndexRequest, RolloverIndexResponse>(request, request.RequestParameters);
		}

		public Task<RolloverIndexResponse> RolloverIndexAsync(IRolloverIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IRolloverIndexRequest, RolloverIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SegmentsResponse Segments(ISegmentsRequest request)
		{
			return DoRequest<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters);
		}

		public Task<SegmentsResponse> SegmentsAsync(ISegmentsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndicesShardStoresResponse ShardStores(IIndicesShardStoresRequest request)
		{
			return DoRequest<IIndicesShardStoresRequest, IndicesShardStoresResponse>(request, request.RequestParameters);
		}

		public Task<IndicesShardStoresResponse> ShardStoresAsync(IIndicesShardStoresRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndicesShardStoresRequest, IndicesShardStoresResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ShrinkIndexResponse ShrinkIndex(IShrinkIndexRequest request)
		{
			return DoRequest<IShrinkIndexRequest, ShrinkIndexResponse>(request, request.RequestParameters);
		}

		public Task<ShrinkIndexResponse> ShrinkIndexAsync(IShrinkIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IShrinkIndexRequest, ShrinkIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public SplitIndexResponse SplitIndex(ISplitIndexRequest request)
		{
			return DoRequest<ISplitIndexRequest, SplitIndexResponse>(request, request.RequestParameters);
		}

		public Task<SplitIndexResponse> SplitIndexAsync(ISplitIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISplitIndexRequest, SplitIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public IndicesStatsResponse Stats(IIndicesStatsRequest request)
		{
			return DoRequest<IIndicesStatsRequest, IndicesStatsResponse>(request, request.RequestParameters);
		}

		public Task<IndicesStatsResponse> StatsAsync(IIndicesStatsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IIndicesStatsRequest, IndicesStatsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public UnfreezeIndexResponse UnfreezeIndex(IUnfreezeIndexRequest request)
		{
			return DoRequest<IUnfreezeIndexRequest, UnfreezeIndexResponse>(request, request.RequestParameters);
		}

		public Task<UnfreezeIndexResponse> UnfreezeIndexAsync(IUnfreezeIndexRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IUnfreezeIndexRequest, UnfreezeIndexResponse>(request, request.RequestParameters, cancellationToken);
		}

		public BulkAliasResponse BulkAlias(IBulkAliasRequest request)
		{
			return DoRequest<IBulkAliasRequest, BulkAliasResponse>(request, request.RequestParameters);
		}

		public Task<BulkAliasResponse> BulkAliasAsync(IBulkAliasRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IBulkAliasRequest, BulkAliasResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ValidateQueryResponse ValidateQuery(IValidateQueryRequest request)
		{
			return DoRequest<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters);
		}

		public Task<ValidateQueryResponse> ValidateQueryAsync(IValidateQueryRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}