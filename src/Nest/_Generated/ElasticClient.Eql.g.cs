// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Eql
{
	public class EqlNamespace : NamespacedClientProxy
	{
		internal EqlNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteResponse Delete(IDeleteRequest request) => DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteResponse Delete(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null) => Delete(selector.InvokeOrDefault(new DeleteDescriptor(id)));
		public Task<DeleteResponse> DeleteAsync(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(id)), cancellationToken);
		public GetResponse<TEvent> Get<TEvent>(IGetRequest request) => DoRequest<IGetRequest, GetResponse<TEvent>>(request, request.RequestParameters);
		public Task<GetResponse<TEvent>> GetAsync<TEvent>(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse<TEvent>>(request, request.RequestParameters, cancellationToken);
		public GetResponse<TEvent> Get<TEvent>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null) => Get<TEvent>(selector.InvokeOrDefault(new GetDescriptor(id)));
		public Task<GetResponse<TEvent>> GetAsync<TEvent>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync<TEvent>(selector.InvokeOrDefault(new GetDescriptor(id)), cancellationToken);
		public GetStatusResponse GetStatus(IGetStatusRequest request) => DoRequest<IGetStatusRequest, GetStatusResponse>(request, request.RequestParameters);
		public Task<GetStatusResponse> GetStatusAsync(IGetStatusRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetStatusRequest, GetStatusResponse>(request, request.RequestParameters, cancellationToken);
		public GetStatusResponse GetStatus(Nest.Id id, Func<GetStatusDescriptor, IGetStatusRequest> selector = null) => GetStatus(selector.InvokeOrDefault(new GetStatusDescriptor(id)));
		public Task<GetStatusResponse> GetStatusAsync(Nest.Id id, Func<GetStatusDescriptor, IGetStatusRequest> selector = null, CancellationToken cancellationToken = default) => GetStatusAsync(selector.InvokeOrDefault(new GetStatusDescriptor(id)), cancellationToken);
	}
}