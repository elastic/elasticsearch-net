// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Eql
{
	public class EqlNamespace : NamespacedClientProxy
	{
		internal EqlNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteResponse Delete(IDeleteRequest request)
		{
			return DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		}

		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteResponse Delete(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null)
		{
			return Delete(selector.InvokeOrDefault(new DeleteDescriptor(id)));
		}

		public Task<DeleteResponse> DeleteAsync(Nest.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(id)), cancellationToken);
		}

		public GetResponse<TEvent> Get<TEvent>(IGetRequest request)
		{
			return DoRequest<IGetRequest, GetResponse<TEvent>>(request, request.RequestParameters);
		}

		public Task<GetResponse<TEvent>> GetAsync<TEvent>(IGetRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRequest, GetResponse<TEvent>>(request, request.RequestParameters, cancellationToken);
		}

		public GetResponse<TEvent> Get<TEvent>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null)
		{
			return Get<TEvent>(selector.InvokeOrDefault(new GetDescriptor(id)));
		}

		public Task<GetResponse<TEvent>> GetAsync<TEvent>(Nest.Id id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetAsync<TEvent>(selector.InvokeOrDefault(new GetDescriptor(id)), cancellationToken);
		}

		public GetStatusResponse GetStatus(IGetStatusRequest request)
		{
			return DoRequest<IGetStatusRequest, GetStatusResponse>(request, request.RequestParameters);
		}

		public Task<GetStatusResponse> GetStatusAsync(IGetStatusRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetStatusRequest, GetStatusResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetStatusResponse GetStatus(Nest.Id id, Func<GetStatusDescriptor, IGetStatusRequest> selector = null)
		{
			return GetStatus(selector.InvokeOrDefault(new GetStatusDescriptor(id)));
		}

		public Task<GetStatusResponse> GetStatusAsync(Nest.Id id, Func<GetStatusDescriptor, IGetStatusRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetStatusAsync(selector.InvokeOrDefault(new GetStatusDescriptor(id)), cancellationToken);
		}

		public SearchResponse<TEvent> Search<TEvent>(ISearchRequest request)
		{
			return DoRequest<ISearchRequest, SearchResponse<TEvent>>(request, request.RequestParameters);
		}

		public Task<SearchResponse<TEvent>> SearchAsync<TEvent>(ISearchRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ISearchRequest, SearchResponse<TEvent>>(request, request.RequestParameters, cancellationToken);
		}

		public SearchResponse<TEvent> Search<TEvent>(Nest.IndexName index, Func<SearchDescriptor, ISearchRequest> selector = null)
		{
			return Search<TEvent>(selector.InvokeOrDefault(new SearchDescriptor(index)));
		}

		public Task<SearchResponse<TEvent>> SearchAsync<TEvent>(Nest.IndexName index, Func<SearchDescriptor, ISearchRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return SearchAsync<TEvent>(selector.InvokeOrDefault(new SearchDescriptor(index)), cancellationToken);
		}
	}
}