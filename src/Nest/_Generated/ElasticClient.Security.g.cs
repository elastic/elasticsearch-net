// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Nest.Ssl;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest.Security
{
	public class SecurityNamespace : NamespacedClientProxy
	{
		internal SecurityNamespace(ElasticClient client) : base(client)
		{
		}

		public AuthenticateResponse Authenticate(IAuthenticateRequest request)
		{
			return DoRequest<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters);
		}

		public Task<AuthenticateResponse> AuthenticateAsync(IAuthenticateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public AuthenticateResponse Authenticate(Func<AuthenticateDescriptor, IAuthenticateRequest> selector = null)
		{
			return Authenticate(selector.InvokeOrDefault(new AuthenticateDescriptor()));
		}

		public Task<AuthenticateResponse> AuthenticateAsync(Func<AuthenticateDescriptor, IAuthenticateRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return AuthenticateAsync(selector.InvokeOrDefault(new AuthenticateDescriptor()), cancellationToken);
		}

		public CertificatesResponse Certificates(ICertificatesRequest request)
		{
			return DoRequest<ICertificatesRequest, CertificatesResponse>(request, request.RequestParameters);
		}

		public Task<CertificatesResponse> CertificatesAsync(ICertificatesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICertificatesRequest, CertificatesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CertificatesResponse Certificates(Func<CertificatesDescriptor, ICertificatesRequest> selector = null)
		{
			return Certificates(selector.InvokeOrDefault(new CertificatesDescriptor()));
		}

		public Task<CertificatesResponse> CertificatesAsync(Func<CertificatesDescriptor, ICertificatesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CertificatesAsync(selector.InvokeOrDefault(new CertificatesDescriptor()), cancellationToken);
		}

		public ChangePasswordResponse ChangePassword(IChangePasswordRequest request)
		{
			return DoRequest<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters);
		}

		public Task<ChangePasswordResponse> ChangePasswordAsync(IChangePasswordRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ChangePasswordResponse ChangePassword(Func<ChangePasswordDescriptor, IChangePasswordRequest> selector = null)
		{
			return ChangePassword(selector.InvokeOrDefault(new ChangePasswordDescriptor()));
		}

		public Task<ChangePasswordResponse> ChangePasswordAsync(Func<ChangePasswordDescriptor, IChangePasswordRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ChangePasswordAsync(selector.InvokeOrDefault(new ChangePasswordDescriptor()), cancellationToken);
		}

		public ClearApiKeyCacheResponse ClearApiKeyCache(IClearApiKeyCacheRequest request)
		{
			return DoRequest<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters);
		}

		public Task<ClearApiKeyCacheResponse> ClearApiKeyCacheAsync(IClearApiKeyCacheRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedPrivilegesResponse ClearCachedPrivileges(IClearCachedPrivilegesRequest request)
		{
			return DoRequest<IClearCachedPrivilegesRequest, ClearCachedPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedPrivilegesResponse> ClearCachedPrivilegesAsync(IClearCachedPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedPrivilegesRequest, ClearCachedPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedPrivilegesResponse ClearCachedPrivileges(Nest.Name application, Func<ClearCachedPrivilegesDescriptor, IClearCachedPrivilegesRequest> selector = null)
		{
			return ClearCachedPrivileges(selector.InvokeOrDefault(new ClearCachedPrivilegesDescriptor(application)));
		}

		public Task<ClearCachedPrivilegesResponse> ClearCachedPrivilegesAsync(Nest.Name application, Func<ClearCachedPrivilegesDescriptor, IClearCachedPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCachedPrivilegesAsync(selector.InvokeOrDefault(new ClearCachedPrivilegesDescriptor(application)), cancellationToken);
		}

		public ClearCachedRealmsResponse ClearCachedRealms(IClearCachedRealmsRequest request)
		{
			return DoRequest<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedRealmsResponse> ClearCachedRealmsAsync(IClearCachedRealmsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedRealmsResponse ClearCachedRealms(Nest.Names realms, Func<ClearCachedRealmsDescriptor, IClearCachedRealmsRequest> selector = null)
		{
			return ClearCachedRealms(selector.InvokeOrDefault(new ClearCachedRealmsDescriptor(realms)));
		}

		public Task<ClearCachedRealmsResponse> ClearCachedRealmsAsync(Nest.Names realms, Func<ClearCachedRealmsDescriptor, IClearCachedRealmsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCachedRealmsAsync(selector.InvokeOrDefault(new ClearCachedRealmsDescriptor(realms)), cancellationToken);
		}

		public ClearCachedRolesResponse ClearCachedRoles(IClearCachedRolesRequest request)
		{
			return DoRequest<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedRolesResponse> ClearCachedRolesAsync(IClearCachedRolesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedRolesResponse ClearCachedRoles(Nest.Names name, Func<ClearCachedRolesDescriptor, IClearCachedRolesRequest> selector = null)
		{
			return ClearCachedRoles(selector.InvokeOrDefault(new ClearCachedRolesDescriptor(name)));
		}

		public Task<ClearCachedRolesResponse> ClearCachedRolesAsync(Nest.Names name, Func<ClearCachedRolesDescriptor, IClearCachedRolesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCachedRolesAsync(selector.InvokeOrDefault(new ClearCachedRolesDescriptor(name)), cancellationToken);
		}

		public ClearCachedServiceTokensResponse ClearCachedServiceTokens(IClearCachedServiceTokensRequest request)
		{
			return DoRequest<IClearCachedServiceTokensRequest, ClearCachedServiceTokensResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedServiceTokensResponse> ClearCachedServiceTokensAsync(IClearCachedServiceTokensRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedServiceTokensRequest, ClearCachedServiceTokensResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedServiceTokensResponse ClearCachedServiceTokens(Nest.Namespace ns, Nest.Service service, Nest.Names name, Func<ClearCachedServiceTokensDescriptor, IClearCachedServiceTokensRequest> selector = null)
		{
			return ClearCachedServiceTokens(selector.InvokeOrDefault(new ClearCachedServiceTokensDescriptor(ns, service, name)));
		}

		public Task<ClearCachedServiceTokensResponse> ClearCachedServiceTokensAsync(Nest.Namespace ns, Nest.Service service, Nest.Names name, Func<ClearCachedServiceTokensDescriptor, IClearCachedServiceTokensRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return ClearCachedServiceTokensAsync(selector.InvokeOrDefault(new ClearCachedServiceTokensDescriptor(ns, service, name)), cancellationToken);
		}

		public CreateApiKeyResponse CreateApiKey(ICreateApiKeyRequest request)
		{
			return DoRequest<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<CreateApiKeyResponse> CreateApiKeyAsync(ICreateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateApiKeyResponse CreateApiKey(Func<CreateApiKeyDescriptor, ICreateApiKeyRequest> selector = null)
		{
			return CreateApiKey(selector.InvokeOrDefault(new CreateApiKeyDescriptor()));
		}

		public Task<CreateApiKeyResponse> CreateApiKeyAsync(Func<CreateApiKeyDescriptor, ICreateApiKeyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateApiKeyAsync(selector.InvokeOrDefault(new CreateApiKeyDescriptor()), cancellationToken);
		}

		public CreateServiceTokenResponse CreateServiceToken(ICreateServiceTokenRequest request)
		{
			return DoRequest<ICreateServiceTokenRequest, CreateServiceTokenResponse>(request, request.RequestParameters);
		}

		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(ICreateServiceTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateServiceTokenRequest, CreateServiceTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateServiceTokenResponse CreateServiceToken(Nest.Namespace ns, Nest.Service service, Nest.Name name, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null)
		{
			return CreateServiceToken(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service, name)));
		}

		public CreateServiceTokenResponse CreateServiceToken(Nest.Namespace ns, Nest.Service service, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null)
		{
			return CreateServiceToken(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service)));
		}

		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(Nest.Namespace ns, Nest.Service service, Nest.Name name, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateServiceTokenAsync(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service, name)), cancellationToken);
		}

		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(Nest.Namespace ns, Nest.Service service, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return CreateServiceTokenAsync(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service)), cancellationToken);
		}

		public DeletePrivilegesResponse DeletePrivileges(IDeletePrivilegesRequest request)
		{
			return DoRequest<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<DeletePrivilegesResponse> DeletePrivilegesAsync(IDeletePrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeletePrivilegesResponse DeletePrivileges(Nest.Name application, Nest.Name name, Func<DeletePrivilegesDescriptor, IDeletePrivilegesRequest> selector = null)
		{
			return DeletePrivileges(selector.InvokeOrDefault(new DeletePrivilegesDescriptor(application, name)));
		}

		public Task<DeletePrivilegesResponse> DeletePrivilegesAsync(Nest.Name application, Nest.Name name, Func<DeletePrivilegesDescriptor, IDeletePrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeletePrivilegesAsync(selector.InvokeOrDefault(new DeletePrivilegesDescriptor(application, name)), cancellationToken);
		}

		public DeleteRoleResponse DeleteRole(IDeleteRoleRequest request)
		{
			return DoRequest<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters);
		}

		public Task<DeleteRoleResponse> DeleteRoleAsync(IDeleteRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteRoleResponse DeleteRole(Nest.Name name, Func<DeleteRoleDescriptor, IDeleteRoleRequest> selector = null)
		{
			return DeleteRole(selector.InvokeOrDefault(new DeleteRoleDescriptor(name)));
		}

		public Task<DeleteRoleResponse> DeleteRoleAsync(Nest.Name name, Func<DeleteRoleDescriptor, IDeleteRoleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteRoleAsync(selector.InvokeOrDefault(new DeleteRoleDescriptor(name)), cancellationToken);
		}

		public DeleteRoleMappingResponse DeleteRoleMapping(IDeleteRoleMappingRequest request)
		{
			return DoRequest<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<DeleteRoleMappingResponse> DeleteRoleMappingAsync(IDeleteRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteRoleMappingResponse DeleteRoleMapping(Nest.Name name, Func<DeleteRoleMappingDescriptor, IDeleteRoleMappingRequest> selector = null)
		{
			return DeleteRoleMapping(selector.InvokeOrDefault(new DeleteRoleMappingDescriptor(name)));
		}

		public Task<DeleteRoleMappingResponse> DeleteRoleMappingAsync(Nest.Name name, Func<DeleteRoleMappingDescriptor, IDeleteRoleMappingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteRoleMappingAsync(selector.InvokeOrDefault(new DeleteRoleMappingDescriptor(name)), cancellationToken);
		}

		public DeleteServiceTokenResponse DeleteServiceToken(IDeleteServiceTokenRequest request)
		{
			return DoRequest<IDeleteServiceTokenRequest, DeleteServiceTokenResponse>(request, request.RequestParameters);
		}

		public Task<DeleteServiceTokenResponse> DeleteServiceTokenAsync(IDeleteServiceTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteServiceTokenRequest, DeleteServiceTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteServiceTokenResponse DeleteServiceToken(Nest.Namespace ns, Nest.Service service, Nest.Name name, Func<DeleteServiceTokenDescriptor, IDeleteServiceTokenRequest> selector = null)
		{
			return DeleteServiceToken(selector.InvokeOrDefault(new DeleteServiceTokenDescriptor(ns, service, name)));
		}

		public Task<DeleteServiceTokenResponse> DeleteServiceTokenAsync(Nest.Namespace ns, Nest.Service service, Nest.Name name, Func<DeleteServiceTokenDescriptor, IDeleteServiceTokenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteServiceTokenAsync(selector.InvokeOrDefault(new DeleteServiceTokenDescriptor(ns, service, name)), cancellationToken);
		}

		public DeleteUserResponse DeleteUser(IDeleteUserRequest request)
		{
			return DoRequest<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters);
		}

		public Task<DeleteUserResponse> DeleteUserAsync(IDeleteUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteUserResponse DeleteUser(Nest.Username username, Func<DeleteUserDescriptor, IDeleteUserRequest> selector = null)
		{
			return DeleteUser(selector.InvokeOrDefault(new DeleteUserDescriptor(username)));
		}

		public Task<DeleteUserResponse> DeleteUserAsync(Nest.Username username, Func<DeleteUserDescriptor, IDeleteUserRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DeleteUserAsync(selector.InvokeOrDefault(new DeleteUserDescriptor(username)), cancellationToken);
		}

		public DisableUserResponse DisableUser(IDisableUserRequest request)
		{
			return DoRequest<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters);
		}

		public Task<DisableUserResponse> DisableUserAsync(IDisableUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DisableUserResponse DisableUser(Nest.Username username, Func<DisableUserDescriptor, IDisableUserRequest> selector = null)
		{
			return DisableUser(selector.InvokeOrDefault(new DisableUserDescriptor(username)));
		}

		public Task<DisableUserResponse> DisableUserAsync(Nest.Username username, Func<DisableUserDescriptor, IDisableUserRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return DisableUserAsync(selector.InvokeOrDefault(new DisableUserDescriptor(username)), cancellationToken);
		}

		public EnableUserResponse EnableUser(IEnableUserRequest request)
		{
			return DoRequest<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters);
		}

		public Task<EnableUserResponse> EnableUserAsync(IEnableUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public EnableUserResponse EnableUser(Nest.Username username, Func<EnableUserDescriptor, IEnableUserRequest> selector = null)
		{
			return EnableUser(selector.InvokeOrDefault(new EnableUserDescriptor(username)));
		}

		public Task<EnableUserResponse> EnableUserAsync(Nest.Username username, Func<EnableUserDescriptor, IEnableUserRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return EnableUserAsync(selector.InvokeOrDefault(new EnableUserDescriptor(username)), cancellationToken);
		}

		public GetApiKeyResponse GetApiKey(IGetApiKeyRequest request)
		{
			return DoRequest<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<GetApiKeyResponse> GetApiKeyAsync(IGetApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetApiKeyResponse GetApiKey(Func<GetApiKeyDescriptor, IGetApiKeyRequest> selector = null)
		{
			return GetApiKey(selector.InvokeOrDefault(new GetApiKeyDescriptor()));
		}

		public Task<GetApiKeyResponse> GetApiKeyAsync(Func<GetApiKeyDescriptor, IGetApiKeyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetApiKeyAsync(selector.InvokeOrDefault(new GetApiKeyDescriptor()), cancellationToken);
		}

		public GetBuiltinPrivilegesResponse GetBuiltinPrivileges(IGetBuiltinPrivilegesRequest request)
		{
			return DoRequest<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetBuiltinPrivilegesResponse> GetBuiltinPrivilegesAsync(IGetBuiltinPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetBuiltinPrivilegesResponse GetBuiltinPrivileges(Func<GetBuiltinPrivilegesDescriptor, IGetBuiltinPrivilegesRequest> selector = null)
		{
			return GetBuiltinPrivileges(selector.InvokeOrDefault(new GetBuiltinPrivilegesDescriptor()));
		}

		public Task<GetBuiltinPrivilegesResponse> GetBuiltinPrivilegesAsync(Func<GetBuiltinPrivilegesDescriptor, IGetBuiltinPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetBuiltinPrivilegesAsync(selector.InvokeOrDefault(new GetBuiltinPrivilegesDescriptor()), cancellationToken);
		}

		public GetPrivilegesResponse GetPrivileges(IGetPrivilegesRequest request)
		{
			return DoRequest<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetPrivilegesResponse> GetPrivilegesAsync(IGetPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetPrivilegesResponse GetPrivileges(Func<GetPrivilegesDescriptor, IGetPrivilegesRequest> selector = null)
		{
			return GetPrivileges(selector.InvokeOrDefault(new GetPrivilegesDescriptor()));
		}

		public Task<GetPrivilegesResponse> GetPrivilegesAsync(Func<GetPrivilegesDescriptor, IGetPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetPrivilegesAsync(selector.InvokeOrDefault(new GetPrivilegesDescriptor()), cancellationToken);
		}

		public GetRoleResponse GetRole(IGetRoleRequest request)
		{
			return DoRequest<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters);
		}

		public Task<GetRoleResponse> GetRoleAsync(IGetRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRoleResponse GetRole(Func<GetRoleDescriptor, IGetRoleRequest> selector = null)
		{
			return GetRole(selector.InvokeOrDefault(new GetRoleDescriptor()));
		}

		public Task<GetRoleResponse> GetRoleAsync(Func<GetRoleDescriptor, IGetRoleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetRoleAsync(selector.InvokeOrDefault(new GetRoleDescriptor()), cancellationToken);
		}

		public GetRoleMappingResponse GetRoleMapping(IGetRoleMappingRequest request)
		{
			return DoRequest<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetRoleMappingResponse> GetRoleMappingAsync(IGetRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRoleMappingResponse GetRoleMapping(Func<GetRoleMappingDescriptor, IGetRoleMappingRequest> selector = null)
		{
			return GetRoleMapping(selector.InvokeOrDefault(new GetRoleMappingDescriptor()));
		}

		public Task<GetRoleMappingResponse> GetRoleMappingAsync(Func<GetRoleMappingDescriptor, IGetRoleMappingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetRoleMappingAsync(selector.InvokeOrDefault(new GetRoleMappingDescriptor()), cancellationToken);
		}

		public GetServiceAccountsResponse GetServiceAccounts(IGetServiceAccountsRequest request)
		{
			return DoRequest<IGetServiceAccountsRequest, GetServiceAccountsResponse>(request, request.RequestParameters);
		}

		public Task<GetServiceAccountsResponse> GetServiceAccountsAsync(IGetServiceAccountsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetServiceAccountsRequest, GetServiceAccountsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetServiceAccountsResponse GetServiceAccounts(Func<GetServiceAccountsDescriptor, IGetServiceAccountsRequest> selector = null)
		{
			return GetServiceAccounts(selector.InvokeOrDefault(new GetServiceAccountsDescriptor()));
		}

		public Task<GetServiceAccountsResponse> GetServiceAccountsAsync(Func<GetServiceAccountsDescriptor, IGetServiceAccountsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetServiceAccountsAsync(selector.InvokeOrDefault(new GetServiceAccountsDescriptor()), cancellationToken);
		}

		public GetServiceCredentialsResponse GetServiceCredentials(IGetServiceCredentialsRequest request)
		{
			return DoRequest<IGetServiceCredentialsRequest, GetServiceCredentialsResponse>(request, request.RequestParameters);
		}

		public Task<GetServiceCredentialsResponse> GetServiceCredentialsAsync(IGetServiceCredentialsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetServiceCredentialsRequest, GetServiceCredentialsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetServiceCredentialsResponse GetServiceCredentials(Nest.Namespace ns, Nest.Service service, Func<GetServiceCredentialsDescriptor, IGetServiceCredentialsRequest> selector = null)
		{
			return GetServiceCredentials(selector.InvokeOrDefault(new GetServiceCredentialsDescriptor(ns, service)));
		}

		public Task<GetServiceCredentialsResponse> GetServiceCredentialsAsync(Nest.Namespace ns, Nest.Service service, Func<GetServiceCredentialsDescriptor, IGetServiceCredentialsRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetServiceCredentialsAsync(selector.InvokeOrDefault(new GetServiceCredentialsDescriptor(ns, service)), cancellationToken);
		}

		public GetTokenResponse GetToken(IGetTokenRequest request)
		{
			return DoRequest<IGetTokenRequest, GetTokenResponse>(request, request.RequestParameters);
		}

		public Task<GetTokenResponse> GetTokenAsync(IGetTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetTokenRequest, GetTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetTokenResponse GetToken(Func<GetTokenDescriptor, IGetTokenRequest> selector = null)
		{
			return GetToken(selector.InvokeOrDefault(new GetTokenDescriptor()));
		}

		public Task<GetTokenResponse> GetTokenAsync(Func<GetTokenDescriptor, IGetTokenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetTokenAsync(selector.InvokeOrDefault(new GetTokenDescriptor()), cancellationToken);
		}

		public GetUserResponse GetUser(IGetUserRequest request)
		{
			return DoRequest<IGetUserRequest, GetUserResponse>(request, request.RequestParameters);
		}

		public Task<GetUserResponse> GetUserAsync(IGetUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetUserRequest, GetUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetUserResponse GetUser(Func<GetUserDescriptor, IGetUserRequest> selector = null)
		{
			return GetUser(selector.InvokeOrDefault(new GetUserDescriptor()));
		}

		public Task<GetUserResponse> GetUserAsync(Func<GetUserDescriptor, IGetUserRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetUserAsync(selector.InvokeOrDefault(new GetUserDescriptor()), cancellationToken);
		}

		public GetUserPrivilegesResponse GetUserPrivileges(IGetUserPrivilegesRequest request)
		{
			return DoRequest<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetUserPrivilegesResponse> GetUserPrivilegesAsync(IGetUserPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetUserPrivilegesResponse GetUserPrivileges(Func<GetUserPrivilegesDescriptor, IGetUserPrivilegesRequest> selector = null)
		{
			return GetUserPrivileges(selector.InvokeOrDefault(new GetUserPrivilegesDescriptor()));
		}

		public Task<GetUserPrivilegesResponse> GetUserPrivilegesAsync(Func<GetUserPrivilegesDescriptor, IGetUserPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GetUserPrivilegesAsync(selector.InvokeOrDefault(new GetUserPrivilegesDescriptor()), cancellationToken);
		}

		public GrantApiKeyResponse GrantApiKey(IGrantApiKeyRequest request)
		{
			return DoRequest<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<GrantApiKeyResponse> GrantApiKeyAsync(IGrantApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GrantApiKeyResponse GrantApiKey(Func<GrantApiKeyDescriptor, IGrantApiKeyRequest> selector = null)
		{
			return GrantApiKey(selector.InvokeOrDefault(new GrantApiKeyDescriptor()));
		}

		public Task<GrantApiKeyResponse> GrantApiKeyAsync(Func<GrantApiKeyDescriptor, IGrantApiKeyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return GrantApiKeyAsync(selector.InvokeOrDefault(new GrantApiKeyDescriptor()), cancellationToken);
		}

		public HasPrivilegesResponse HasPrivileges(IHasPrivilegesRequest request)
		{
			return DoRequest<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<HasPrivilegesResponse> HasPrivilegesAsync(IHasPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public HasPrivilegesResponse HasPrivileges(Func<HasPrivilegesDescriptor, IHasPrivilegesRequest> selector = null)
		{
			return HasPrivileges(selector.InvokeOrDefault(new HasPrivilegesDescriptor()));
		}

		public Task<HasPrivilegesResponse> HasPrivilegesAsync(Func<HasPrivilegesDescriptor, IHasPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return HasPrivilegesAsync(selector.InvokeOrDefault(new HasPrivilegesDescriptor()), cancellationToken);
		}

		public InvalidateApiKeyResponse InvalidateApiKey(IInvalidateApiKeyRequest request)
		{
			return DoRequest<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<InvalidateApiKeyResponse> InvalidateApiKeyAsync(IInvalidateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public InvalidateApiKeyResponse InvalidateApiKey(Func<InvalidateApiKeyDescriptor, IInvalidateApiKeyRequest> selector = null)
		{
			return InvalidateApiKey(selector.InvokeOrDefault(new InvalidateApiKeyDescriptor()));
		}

		public Task<InvalidateApiKeyResponse> InvalidateApiKeyAsync(Func<InvalidateApiKeyDescriptor, IInvalidateApiKeyRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return InvalidateApiKeyAsync(selector.InvokeOrDefault(new InvalidateApiKeyDescriptor()), cancellationToken);
		}

		public InvalidateTokenResponse InvalidateToken(IInvalidateTokenRequest request)
		{
			return DoRequest<IInvalidateTokenRequest, InvalidateTokenResponse>(request, request.RequestParameters);
		}

		public Task<InvalidateTokenResponse> InvalidateTokenAsync(IInvalidateTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IInvalidateTokenRequest, InvalidateTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public InvalidateTokenResponse InvalidateToken(Func<InvalidateTokenDescriptor, IInvalidateTokenRequest> selector = null)
		{
			return InvalidateToken(selector.InvokeOrDefault(new InvalidateTokenDescriptor()));
		}

		public Task<InvalidateTokenResponse> InvalidateTokenAsync(Func<InvalidateTokenDescriptor, IInvalidateTokenRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return InvalidateTokenAsync(selector.InvokeOrDefault(new InvalidateTokenDescriptor()), cancellationToken);
		}

		public PutPrivilegesResponse PutPrivileges(IPutPrivilegesRequest request)
		{
			return DoRequest<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<PutPrivilegesResponse> PutPrivilegesAsync(IPutPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutPrivilegesResponse PutPrivileges(Func<PutPrivilegesDescriptor, IPutPrivilegesRequest> selector = null)
		{
			return PutPrivileges(selector.InvokeOrDefault(new PutPrivilegesDescriptor()));
		}

		public Task<PutPrivilegesResponse> PutPrivilegesAsync(Func<PutPrivilegesDescriptor, IPutPrivilegesRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutPrivilegesAsync(selector.InvokeOrDefault(new PutPrivilegesDescriptor()), cancellationToken);
		}

		public PutRoleResponse PutRole(IPutRoleRequest request)
		{
			return DoRequest<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters);
		}

		public Task<PutRoleResponse> PutRoleAsync(IPutRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutRoleResponse PutRole(Nest.Name name, Func<PutRoleDescriptor, IPutRoleRequest> selector = null)
		{
			return PutRole(selector.InvokeOrDefault(new PutRoleDescriptor(name)));
		}

		public Task<PutRoleResponse> PutRoleAsync(Nest.Name name, Func<PutRoleDescriptor, IPutRoleRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutRoleAsync(selector.InvokeOrDefault(new PutRoleDescriptor(name)), cancellationToken);
		}

		public PutRoleMappingResponse PutRoleMapping(IPutRoleMappingRequest request)
		{
			return DoRequest<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<PutRoleMappingResponse> PutRoleMappingAsync(IPutRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutRoleMappingResponse PutRoleMapping(Nest.Name name, Func<PutRoleMappingDescriptor, IPutRoleMappingRequest> selector = null)
		{
			return PutRoleMapping(selector.InvokeOrDefault(new PutRoleMappingDescriptor(name)));
		}

		public Task<PutRoleMappingResponse> PutRoleMappingAsync(Nest.Name name, Func<PutRoleMappingDescriptor, IPutRoleMappingRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutRoleMappingAsync(selector.InvokeOrDefault(new PutRoleMappingDescriptor(name)), cancellationToken);
		}

		public PutUserResponse PutUser(IPutUserRequest request)
		{
			return DoRequest<IPutUserRequest, PutUserResponse>(request, request.RequestParameters);
		}

		public Task<PutUserResponse> PutUserAsync(IPutUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutUserRequest, PutUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutUserResponse PutUser(Nest.Username username, Func<PutUserDescriptor, IPutUserRequest> selector = null)
		{
			return PutUser(selector.InvokeOrDefault(new PutUserDescriptor(username)));
		}

		public Task<PutUserResponse> PutUserAsync(Nest.Username username, Func<PutUserDescriptor, IPutUserRequest> selector = null, CancellationToken cancellationToken = default)
		{
			return PutUserAsync(selector.InvokeOrDefault(new PutUserDescriptor(username)), cancellationToken);
		}
	}
}