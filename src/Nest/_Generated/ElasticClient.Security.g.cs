// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// TODO - RUN INSTRUCTIONS
//
// ------------------------------------------------

using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Nest
{
	public class SecurityNamespace : NamespacedClientProxy
	{
		internal SecurityNamespace(ElasticClient client) : base(client)
		{
		}

		public AuthenticateResponse Authenticate(IAuthenticateRequest request)
		{
			return DoRequest<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters);
		}

		public Task<AuthenticateResponse> AuthenticateAsync(IAuthenticateRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetCertificatesResponse GetCertificates(IGetCertificatesRequest request)
		{
			return DoRequest<IGetCertificatesRequest, GetCertificatesResponse>(request, request.RequestParameters);
		}

		public Task<GetCertificatesResponse> GetCertificatesAsync(IGetCertificatesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetCertificatesRequest, GetCertificatesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ChangePasswordResponse ChangePassword(IChangePasswordRequest request)
		{
			return DoRequest<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters);
		}

		public Task<ChangePasswordResponse> ChangePasswordAsync(IChangePasswordRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearApiKeyCacheResponse ClearApiKeyCache(IClearApiKeyCacheRequest request)
		{
			return DoRequest<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters);
		}

		public Task<ClearApiKeyCacheResponse> ClearApiKeyCacheAsync(IClearApiKeyCacheRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedRealmsResponse ClearCachedRealms(IClearCachedRealmsRequest request)
		{
			return DoRequest<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedRealmsResponse> ClearCachedRealmsAsync(IClearCachedRealmsRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters, cancellationToken);
		}

		public ClearCachedRolesResponse ClearCachedRoles(IClearCachedRolesRequest request)
		{
			return DoRequest<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters);
		}

		public Task<ClearCachedRolesResponse> ClearCachedRolesAsync(IClearCachedRolesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public CreateApiKeyResponse CreateApiKey(ICreateApiKeyRequest request)
		{
			return DoRequest<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<CreateApiKeyResponse> CreateApiKeyAsync(ICreateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeletePrivilegesResponse DeletePrivileges(IDeletePrivilegesRequest request)
		{
			return DoRequest<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<DeletePrivilegesResponse> DeletePrivilegesAsync(IDeletePrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteRoleResponse DeleteRole(IDeleteRoleRequest request)
		{
			return DoRequest<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters);
		}

		public Task<DeleteRoleResponse> DeleteRoleAsync(IDeleteRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteRoleMappingResponse DeleteRoleMapping(IDeleteRoleMappingRequest request)
		{
			return DoRequest<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<DeleteRoleMappingResponse> DeleteRoleMappingAsync(IDeleteRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DeleteUserResponse DeleteUser(IDeleteUserRequest request)
		{
			return DoRequest<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters);
		}

		public Task<DeleteUserResponse> DeleteUserAsync(IDeleteUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public DisableUserResponse DisableUser(IDisableUserRequest request)
		{
			return DoRequest<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters);
		}

		public Task<DisableUserResponse> DisableUserAsync(IDisableUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public EnableUserResponse EnableUser(IEnableUserRequest request)
		{
			return DoRequest<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters);
		}

		public Task<EnableUserResponse> EnableUserAsync(IEnableUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetApiKeyResponse GetApiKey(IGetApiKeyRequest request)
		{
			return DoRequest<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<GetApiKeyResponse> GetApiKeyAsync(IGetApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetBuiltinPrivilegesResponse GetBuiltinPrivileges(IGetBuiltinPrivilegesRequest request)
		{
			return DoRequest<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetBuiltinPrivilegesResponse> GetBuiltinPrivilegesAsync(IGetBuiltinPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetPrivilegesResponse GetPrivileges(IGetPrivilegesRequest request)
		{
			return DoRequest<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetPrivilegesResponse> GetPrivilegesAsync(IGetPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRoleResponse GetRole(IGetRoleRequest request)
		{
			return DoRequest<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters);
		}

		public Task<GetRoleResponse> GetRoleAsync(IGetRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetRoleMappingResponse GetRoleMapping(IGetRoleMappingRequest request)
		{
			return DoRequest<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<GetRoleMappingResponse> GetRoleMappingAsync(IGetRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetUserAccessTokenResponse GetUserAccessToken(IGetUserAccessTokenRequest request)
		{
			return DoRequest<IGetUserAccessTokenRequest, GetUserAccessTokenResponse>(request, request.RequestParameters);
		}

		public Task<GetUserAccessTokenResponse> GetUserAccessTokenAsync(IGetUserAccessTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetUserAccessTokenRequest, GetUserAccessTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetUserResponse GetUser(IGetUserRequest request)
		{
			return DoRequest<IGetUserRequest, GetUserResponse>(request, request.RequestParameters);
		}

		public Task<GetUserResponse> GetUserAsync(IGetUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetUserRequest, GetUserResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GetUserPrivilegesResponse GetUserPrivileges(IGetUserPrivilegesRequest request)
		{
			return DoRequest<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<GetUserPrivilegesResponse> GetUserPrivilegesAsync(IGetUserPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public GrantApiKeyResponse GrantApiKey(IGrantApiKeyRequest request)
		{
			return DoRequest<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<GrantApiKeyResponse> GrantApiKeyAsync(IGrantApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public HasPrivilegesResponse HasPrivileges(IHasPrivilegesRequest request)
		{
			return DoRequest<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<HasPrivilegesResponse> HasPrivilegesAsync(IHasPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public InvalidateApiKeyResponse InvalidateApiKey(IInvalidateApiKeyRequest request)
		{
			return DoRequest<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters);
		}

		public Task<InvalidateApiKeyResponse> InvalidateApiKeyAsync(IInvalidateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		}

		public InvalidateUserAccessTokenResponse InvalidateUserAccessToken(IInvalidateUserAccessTokenRequest request)
		{
			return DoRequest<IInvalidateUserAccessTokenRequest, InvalidateUserAccessTokenResponse>(request, request.RequestParameters);
		}

		public Task<InvalidateUserAccessTokenResponse> InvalidateUserAccessTokenAsync(IInvalidateUserAccessTokenRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IInvalidateUserAccessTokenRequest, InvalidateUserAccessTokenResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutPrivilegesResponse PutPrivileges(IPutPrivilegesRequest request)
		{
			return DoRequest<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters);
		}

		public Task<PutPrivilegesResponse> PutPrivilegesAsync(IPutPrivilegesRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutRoleResponse PutRole(IPutRoleRequest request)
		{
			return DoRequest<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters);
		}

		public Task<PutRoleResponse> PutRoleAsync(IPutRoleRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutRoleMappingResponse PutRoleMapping(IPutRoleMappingRequest request)
		{
			return DoRequest<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters);
		}

		public Task<PutRoleMappingResponse> PutRoleMappingAsync(IPutRoleMappingRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		}

		public PutUserResponse PutUser(IPutUserRequest request)
		{
			return DoRequest<IPutUserRequest, PutUserResponse>(request, request.RequestParameters);
		}

		public Task<PutUserResponse> PutUserAsync(IPutUserRequest request, CancellationToken cancellationToken = default)
		{
			return DoRequestAsync<IPutUserRequest, PutUserResponse>(request, request.RequestParameters, cancellationToken);
		}
	}
}