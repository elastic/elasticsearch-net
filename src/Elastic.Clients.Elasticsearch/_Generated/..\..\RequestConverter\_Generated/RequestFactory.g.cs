// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace RequestConverter;

internal static partial class RequestFactory
{
	private static readonly System.Collections.Frozen.FrozenDictionary<string, System.Func<Elastic.Transport.Serializer, System.Collections.Generic.IReadOnlyDictionary<string, string>?, System.Collections.Generic.IReadOnlyDictionary<string, string>?, string, Elastic.Clients.Elasticsearch.Requests.Request?>> Lookup = new System.Collections.Generic.Dictionary<string, System.Func<Elastic.Transport.Serializer, System.Collections.Generic.IReadOnlyDictionary<string, string>?, System.Collections.Generic.IReadOnlyDictionary<string, string>?, string, Elastic.Clients.Elasticsearch.Requests.Request?>>
	{
		{
			"bulk",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.BulkRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "include_source_on_error", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSourceOnError = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "list_executed_pipelines", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ListExecutedPipelines = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "pipeline", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Pipeline = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireAlias = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_data_stream", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireDataStream = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"clear_scroll",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ClearScrollRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"close_point_in_time",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ClosePointInTimeRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"count",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CountRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "min_score", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MinScore = double.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "terminate_after", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TerminateAfter = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"create",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CreateRequest<System.Text.Json.JsonElement>>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_primary_term", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfPrimaryTerm = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "if_seq_no", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfSeqNo = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "include_source_on_error", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSourceOnError = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "op_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.OpType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.OpType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "pipeline", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Pipeline = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireAlias = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_data_stream", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireDataStream = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.DeleteRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_primary_term", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfPrimaryTerm = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "if_seq_no", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfSeqNo = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"delete_by_query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.DeleteByQueryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "conflicts", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Conflicts = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Conflicts>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "request_cache", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestCache = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Scroll = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ScrollSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "slices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Slices = Elastic.Clients.Elasticsearch.Slices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "sort", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Sort = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "stats", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Stats = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "terminate_after", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TerminateAfter = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"delete_by_query_rethrottle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.DeleteByQueryRethrottleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskId = Elastic.Clients.Elasticsearch.TaskId.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"delete_script",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.DeleteScriptRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"exists",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ExistsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "stored_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.StoredFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"exists_source",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ExistsSourceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"explain",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ExplainRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "stored_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.StoredFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"field_caps",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.FieldCapsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "filters", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Filters = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_empty_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeEmptyFields = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_unmapped", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeUnmapped = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "types", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Types = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.GetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force_synthetic_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ForceSyntheticSource = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "stored_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.StoredFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"get_script",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.GetScriptRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"get_script_context",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.GetScriptContextRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"get_script_languages",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.GetScriptLanguagesRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"get_source",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.GetSourceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "stored_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.StoredFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"health_report",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.HealthReportRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "feature", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Feature = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"index",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexRequest<System.Text.Json.JsonElement>>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_primary_term", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfPrimaryTerm = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "if_seq_no", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfSeqNo = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "include_source_on_error", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSourceOnError = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "op_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.OpType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.OpType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "pipeline", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Pipeline = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireAlias = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.InfoRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"mget",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MultiGetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force_synthetic_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ForceSyntheticSource = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Source = Elastic.Clients.Elasticsearch.Core.Search.SourceConfigParam.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "stored_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.StoredFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"msearch",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MultiSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ccs_minimize_roundtrips", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CcsMinimizeRoundtrips = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreThrottled = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_named_queries_score", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeNamedQueriesScore = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_searches", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentSearches = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_shard_requests", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentShardRequests = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "pre_filter_shard_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.PreFilterShardSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"msearch_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MultiSearchTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "ccs_minimize_roundtrips", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CcsMinimizeRoundtrips = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_searches", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentSearches = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"mtermvectors",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MultiTermVectorsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "field_statistics", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FieldStatistics = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "offsets", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Offsets = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "payloads", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Payloads = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "positions", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Positions = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "term_statistics", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TermStatistics = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.VersionType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"open_point_in_time",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.OpenPointInTimeRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_partial_search_results", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowPartialSearchResults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_shard_requests", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentShardRequests = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.PingRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"put_script",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.PutScriptRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "context", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Context = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rank_eval",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.RankEvalRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"reindex",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ReindexRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "require_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireAlias = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Scroll = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "slices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Slices = Elastic.Clients.Elasticsearch.Slices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"reindex_rethrottle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ReindexRethrottleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"render_search_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.RenderSearchTemplateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"scripts_painless_execute",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ScriptsPainlessExecuteRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"scroll",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.ScrollRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "allow_partial_search_results", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowPartialSearchResults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "batched_reduce_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.BatchedReduceSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ccs_minimize_roundtrips", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CcsMinimizeRoundtrips = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "force_synthetic_source", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ForceSyntheticSource = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_named_queries_score", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeNamedQueriesScore = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_shard_requests", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentShardRequests = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "min_compatible_shard_node", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MinCompatibleShardNode = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "pre_filter_shard_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.PreFilterShardSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "request_cache", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestCache = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Scroll = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_field", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestField = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_mode", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestMode = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SuggestMode>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_text", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestText = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_mvt",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchMvtRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "field", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Field = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "x", System.StringComparison.OrdinalIgnoreCase))
						{
							request.X = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "y", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Y = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "zoom", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Zoom = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_shards",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchShardsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ccs_minimize_roundtrips", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CcsMinimizeRoundtrips = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Scroll = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"terms_enum",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TermsEnumRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"termvectors",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TermVectorsRequest<System.Text.Json.JsonElement>>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "realtime", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Realtime = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"update",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.UpdateRequest<System.Text.Json.JsonElement, System.Text.Json.JsonElement>>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_primary_term", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfPrimaryTerm = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "if_seq_no", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfSeqNo = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "include_source_on_error", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSourceOnError = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lang", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lang = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "require_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequireAlias = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "retry_on_conflict", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RetryOnConflict = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"update_by_query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.UpdateByQueryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "pipeline", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Pipeline = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "request_cache", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestCache = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Scroll = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "scroll_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ScrollSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "slices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Slices = Elastic.Clients.Elasticsearch.Slices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "sort", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Sort = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "stats", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Stats = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "terminate_after", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TerminateAfter = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Version = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "version_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VersionType = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"update_by_query_rethrottle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.UpdateByQueryRethrottleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "requests_per_second", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestsPerSecond = float.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"async_search.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.AsyncSearch.DeleteAsyncSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"async_search.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.AsyncSearch.GetAsyncSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletionTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"async_search.status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.AsyncSearch.AsyncSearchStatusRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"async_search.submit",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.AsyncSearch.SubmitAsyncSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "allow_partial_search_results", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowPartialSearchResults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "batched_reduce_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.BatchedReduceSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ccs_minimize_roundtrips", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CcsMinimizeRoundtrips = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreThrottled = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "keep_on_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepOnCompletion = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "max_concurrent_shard_requests", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxConcurrentShardRequests = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "min_compatible_shard_node", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MinCompatibleShardNode = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "preference", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Preference = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "request_cache", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RequestCache = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "search_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SearchType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_excludes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceExcludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "_source_includes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SourceIncludes = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_field", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestField = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_mode", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestMode = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SuggestMode>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestSize = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "suggest_text", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SuggestText = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletionTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.delete_auto_follow_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.DeleteAutoFollowPatternRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.follow",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.FollowRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.follow_info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.FollowInfoRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.follow_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.FollowStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.forget_follower",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.ForgetFollowerRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.get_auto_follow_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.GetAutoFollowPatternRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.pause_auto_follow_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.PauseAutoFollowPatternRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.pause_follow",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.PauseFollowRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.put_auto_follow_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.PutAutoFollowPatternRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.resume_auto_follow_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.ResumeAutoFollowPatternRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.resume_follow",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.ResumeFollowRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.CcrStatsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ccr.unfollow",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.CrossClusterReplication.UnfollowRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.allocation_explain",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.AllocationExplainRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "include_disk_info", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDiskInfo = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_yes_decisions", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeYesDecisions = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.delete_component_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.DeleteComponentTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.delete_voting_config_exclusions",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.DeleteVotingConfigExclusionsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_removal", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForRemoval = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.exists_component_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.ExistsComponentTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.get_component_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.GetComponentTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.get_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.GetClusterSettingsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.health",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.HealthRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "level", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Level = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Level>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_events", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForEvents = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.WaitForEvents>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_nodes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForNodes = Elastic.Clients.Elasticsearch.Cluster.WaitForNodes.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_no_initializing_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForNoInitializingShards = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_no_relocating_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForNoRelocatingShards = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_status", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForStatus = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.HealthStatus>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.ClusterInfoRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "target", System.StringComparison.OrdinalIgnoreCase))
						{
							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Target = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ClusterInfoTarget>.Parse(x)).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.pending_tasks",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.PendingTasksRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.post_voting_config_exclusions",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.PostVotingConfigExclusionsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_ids", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeIds = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_names", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeNames = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.put_component_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.PutComponentTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"cluster.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Cluster.ClusterStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "include_remotes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeRemotes = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"dangling_indices.list_dangling_indices",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.DanglingIndices.ListDanglingIndicesRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"enrich.delete_policy",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"enrich.execute_policy",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"enrich.get_policy",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"enrich.put_policy",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"enrich.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"eql.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Eql.EqlDeleteRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"eql.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Eql.EqlGetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletionTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"eql.get_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Eql.GetEqlStatusRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"eql.search",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Eql.EqlSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"esql.async_query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Esql.AsyncQueryRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_partial_results", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowPartialResults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "delimiter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Delimiter = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "drop_null_columns", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DropNullColumns = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Esql.EsqlFormat>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"esql.async_query_delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Esql.AsyncQueryDeleteRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"esql.async_query_get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Esql.AsyncQueryGetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "drop_null_columns", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DropNullColumns = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletionTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"esql.async_query_stop",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Esql.AsyncQueryStopRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "drop_null_columns", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DropNullColumns = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"esql.query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Esql.EsqlQueryRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_partial_results", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowPartialResults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "delimiter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Delimiter = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "drop_null_columns", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DropNullColumns = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Esql.EsqlFormat>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"features.get_features",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"features.reset_features",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"graph.explore",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Graph.ExploreRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "routing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Routing = Elastic.Clients.Elasticsearch.Routing.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.delete_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.get_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.GetLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.get_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.GetIlmStatusRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ilm.migrate_to_data_tiers",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateToDataTiersRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "dry_run", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DryRun = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.move_to_step",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MoveToStepRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.put_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.PutLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.remove_policy",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RemovePolicyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.retry",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RetryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.start",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.StartIlmRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ilm.stop",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.StopIlmRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.analyze",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.AnalyzeIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.cancel_migrate_reindex",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CancelMigrateReindexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.clear_cache",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ClearCacheRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "fielddata", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fielddata = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "query", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Query = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "request", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Request = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.clone",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CloneIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "target", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Target = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.close",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CloseIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.create",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CreateIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.create_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CreateDataStreamRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.DataStreamName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.create_from",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.CreateFromRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "dest", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Dest = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "source", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Source = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.data_streams_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DataStreamsStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete_data_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteDataLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.DataStreamNames.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteDataStreamRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.DataStreamNames.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete_index_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteIndexTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.delete_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DeleteTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.disk_usage",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DiskUsageRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flush", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Flush = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "run_expensive_tasks", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RunExpensiveTasks = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.downsample",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "target_index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TargetIndex = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.exists",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ExistsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.exists_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ExistsAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.Local = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.exists_index_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ExistsIndexTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.exists_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ExistsTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.explain_data_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ExplainDataLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.field_usage_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.FieldUsageStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.flush",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.FlushRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_if_ongoing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitIfOngoing = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.forcemerge",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ForcemergeRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flush", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Flush = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "max_num_segments", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxNumSegments = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "only_expunge_deletes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.OnlyExpungeDeletes = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "features", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Features = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.IndexManagement.Feature>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.Local = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_data_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetDataLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.DataStreamNames.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_data_lifecycle_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetDataLifecycleStatsRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"indices.get_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetDataStreamRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.DataStreamNames.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_field_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetFieldMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_index_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetIndexTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.Local = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_migrate_reindex_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetMigrateReindexStatusRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetIndicesSettingsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.get_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.GetTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.migrate_reindex",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindexRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"indices.migrate_to_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.MigrateToDataStreamRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.modify_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ModifyDataStreamRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"indices.open",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.OpenIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.promote_data_stream",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PromoteDataStreamRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_data_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutDataLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.DataStreamNames.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_index_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutIndexTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "cause", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Cause = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "write_index_only", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WriteIndexOnly = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutIndicesSettingsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "preserve_existing", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.PreserveExisting = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "reopen", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Reopen = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.put_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.PutTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "cause", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Cause = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.recovery",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.RecoveryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "active_only", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ActiveOnly = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "detailed", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Detailed = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.refresh",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.RefreshRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.reload_search_analyzers",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ReloadSearchAnalyzersRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "resource", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Resource = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.resolve_cluster",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ResolveClusterRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.resolve_index",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ResolveIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.rollover",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.RolloverRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "alias", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Alias = Elastic.Clients.Elasticsearch.IndexAlias.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "new_index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NewIndex = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "dry_run", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DryRun = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lazy", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lazy = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.segments",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.shard_stores",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ShardStoresRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "status", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Status = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreStatus>.Parse(x)).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.shrink",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ShrinkIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "target", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Target = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.simulate_index_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.SimulateIndexTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "cause", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Cause = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.simulate_template",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.SimulateTemplateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "cause", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Cause = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_defaults", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeDefaults = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.split",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.SplitIndexRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "target", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Target = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_active_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForActiveShards = Elastic.Clients.Elasticsearch.WaitForActiveShards.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.IndicesStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "metric", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Metric = Elastic.Clients.Elasticsearch.Metrics.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "completion_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CompletionFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "fielddata_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FielddataFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "forbid_closed_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ForbidClosedIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "groups", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Groups = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "include_segment_file_sizes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSegmentFileSizes = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_unloaded_segments", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeUnloadedSegments = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "level", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Level = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Level>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.update_aliases",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliasesRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"indices.validate_query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.ValidateQueryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "all_shards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllShards = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "analyzer", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Analyzer = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "analyze_wildcard", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AnalyzeWildcard = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "default_operator", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DefaultOperator = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "df", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Df = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "explain", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Explain = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "lenient", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Lenient = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "rewrite", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Rewrite = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.chat_completion_unified",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.ChatCompletionUnifiedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.completion",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.CompletionRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.DeleteInferenceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.TaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "dry_run", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DryRun = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.GetInferenceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.TaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.inference",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.InferenceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.TaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutInferenceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.TaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_alibabacloud",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutAlibabacloudRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "alibabacloud_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.AlibabacloudInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.AlibabaCloudTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_amazonbedrock",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutAmazonbedrockRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "amazonbedrock_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.AmazonbedrockInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_anthropic",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutAnthropicRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "anthropic_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.AnthropicInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.AnthropicTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_azureaistudio",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutAzureaistudioRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "azureaistudio_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.AzureaistudioInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.AzureAiStudioTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_azureopenai",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutAzureopenaiRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "azureopenai_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.AzureopenaiInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.AzureOpenAITaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_cohere",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutCohereRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "cohere_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CohereInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.CohereTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_elasticsearch",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutElasticsearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "elasticsearch_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ElasticsearchInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.ElasticsearchTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_elser",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutElserRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "elser_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ElserInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.ElserTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_googleaistudio",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutGoogleaistudioRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "googleaistudio_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.GoogleaistudioInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.GoogleAiStudioTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_googlevertexai",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutGooglevertexaiRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "googlevertexai_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.GooglevertexaiInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.GoogleVertexAITaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_hugging_face",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutHuggingFaceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "huggingface_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.HuggingfaceInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.HuggingFaceTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_jinaai",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutJinaaiRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "jinaai_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JinaaiInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.JinaAITaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_mistral",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutMistralRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "mistral_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.MistralInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.MistralTaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_openai",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutOpenaiRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "openai_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.OpenaiInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.OpenAITaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_voyageai",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutVoyageaiRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.VoyageAITaskType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "voyageai_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.VoyageaiInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.put_watsonx",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.PutWatsonxRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.WatsonxTaskType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "watsonx_inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.WatsonxInferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.rerank",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.RerankRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.sparse_embedding",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.SparseEmbeddingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.stream_completion",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.StreamCompletionRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.text_embedding",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.TextEmbeddingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"inference.update",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Inference.UpdateInferenceRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "inference_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.InferenceId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "task_type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Inference.TaskType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.delete_geoip_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DeleteGeoipDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.delete_ip_location_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DeleteIpLocationDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.delete_pipeline",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DeletePipelineRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.geo_ip_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GeoIpStatsRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ingest.get_geoip_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GetGeoipDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.get_ip_location_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GetIpLocationDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.get_pipeline",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GetPipelineRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "summary", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Summary = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.processor_grok",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.ProcessorGrokRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ingest.put_geoip_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.PutGeoipDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.put_ip_location_database",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.PutIpLocationDatabaseRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.put_pipeline",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.PutPipelineRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_version", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfVersion = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ingest.simulate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Ingest.SimulateRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"license.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.DeleteLicenseRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"license.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.GetLicenseRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "accept_enterprise", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.AcceptEnterprise = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"license.get_basic_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.GetBasicStatusRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"license.get_trial_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.GetTrialStatusRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"license.post",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.PostRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "acknowledge", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Acknowledge = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"license.post_start_basic",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.PostStartBasicRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "acknowledge", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Acknowledge = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"license.post_start_trial",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.LicenseManagement.PostStartTrialRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "acknowledge", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Acknowledge = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "type_query_string", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypeQueryString = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.clear_trained_model_deployment_cache",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ClearTrainedModelDeploymentCacheRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.close_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.CloseJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_calendar",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteCalendarRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_calendar_event",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteCalendarEventRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "event_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.EventId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_calendar_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteCalendarJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_datafeed",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteDatafeedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.DatafeedId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_expired_data",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteExpiredDataRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_filter",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteFilterRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "filter_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.FilterId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_forecast",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteForecastRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "forecast_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ForecastId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_forecasts", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoForecasts = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "delete_user_annotations", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeleteUserAnnotations = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_model_snapshot",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteModelSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_trained_model",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteTrainedModelRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.delete_trained_model_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.DeleteTrainedModelAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelAlias = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.estimate_model_memory",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.EstimateModelMemoryRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ml.evaluate_data_frame",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.EvaluateDataFrameRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ml.explain_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ExplainDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.flush_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.FlushJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.forecast",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ForecastRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_buckets",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetBucketsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timestamp", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timestamp = System.DateTimeOffset.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_calendar_events",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetCalendarEventsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "end", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.End = System.DateTimeOffset.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "start", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Start = System.DateTimeOffset.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_calendars",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetCalendarsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_categories",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetCategoriesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "category_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CategoryId = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "partition_field_value", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.PartitionFieldValue = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_generated", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeGenerated = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_data_frame_analytics_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetDataFrameAnalyticsStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_datafeed_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetDatafeedStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DatafeedId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_datafeeds",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetDatafeedsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DatafeedId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_generated", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeGenerated = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_filters",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetFiltersRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "filter_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FilterId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_influencers",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetInfluencersRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "desc", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Desc = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "end", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.End = System.DateTimeOffset.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_interim", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeInterim = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "influencer_score", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.InfluencerScore = double.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "sort", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Sort = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "start", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Start = System.DateTimeOffset.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_job_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetJobStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_jobs",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetJobsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.JobId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_generated", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeGenerated = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_memory_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetMemoryStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_model_snapshot_upgrade_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetModelSnapshotUpgradeStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_model_snapshots",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetModelSnapshotsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_overall_buckets",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetOverallBucketsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_records",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetRecordsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_trained_models",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetTrainedModelsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ModelId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "decompress_definition", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DecompressDefinition = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_generated", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeGenerated = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "include", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Include = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.MachineLearning.Include>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_model_definition", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IncludeModelDefinition = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "tags", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Tags = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.get_trained_models_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.GetTrainedModelsStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ModelId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.infer_trained_model",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.InferTrainedModelRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.MlInfoRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ml.open_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.OpenJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.post_calendar_events",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PostCalendarEventsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.preview_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PreviewDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_calendar",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutCalendarRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_calendar_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutCalendarJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "calendar_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CalendarId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_datafeed",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutDatafeedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.DatafeedId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_filter",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutFilterRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "filter_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.FilterId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutJobRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_trained_model",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutTrainedModelRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "defer_definition_decompression", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeferDefinitionDecompression = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_trained_model_alias",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutTrainedModelAliasRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_alias", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelAlias = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "reassign", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Reassign = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_trained_model_definition_part",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutTrainedModelDefinitionPartRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "part", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Part = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.put_trained_model_vocabulary",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.PutTrainedModelVocabularyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.reset_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ResetJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "delete_user_annotations", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeleteUserAnnotations = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.revert_model_snapshot",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.RevertModelSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.set_upgrade_mode",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.SetUpgradeModeRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "enabled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Enabled = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.start_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StartDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.start_datafeed",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StartDatafeedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.DatafeedId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.start_trained_model_deployment",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StartTrainedModelDeploymentRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "cache_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CacheSize = Elastic.Clients.Elasticsearch.ByteSize.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "deployment_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeploymentId = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "number_of_allocations", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NumberOfAllocations = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "priority", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Priority = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.MachineLearning.TrainingPriority>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "queue_capacity", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueueCapacity = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "threads_per_allocation", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ThreadsPerAllocation = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitFor = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.MachineLearning.DeploymentAllocationState>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.stop_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StopDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.stop_datafeed",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StopDatafeedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.DatafeedId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.stop_trained_model_deployment",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.StopTrainedModelDeploymentRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_data_frame_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateDataFrameAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_datafeed",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateDatafeedRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "datafeed_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.DatafeedId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_throttled", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}
#pragma warning disable CS0618
							request.IgnoreThrottled = bool.Parse(parameter.Value);
#pragma warning restore CS0618
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_filter",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateFilterRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "filter_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.FilterId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_model_snapshot",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateModelSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.update_trained_model_deployment",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpdateTrainedModelDeploymentRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "model_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.ModelId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.upgrade_job_snapshot",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.UpgradeJobSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "job_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.JobId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SnapshotId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"ml.validate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ValidateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"ml.validate_detector",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.MachineLearning.ValidateDetectorRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"nodes.clear_repositories_metering_archive",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.ClearRepositoriesMeteringArchiveRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "max_archive_version", System.StringComparison.OrdinalIgnoreCase))
						{
							request.MaxArchiveVersion = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.get_repositories_metering_info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.GetRepositoriesMeteringInfoRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.hot_threads",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.HotThreadsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "ignore_idle_threads", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreIdleThreads = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "interval", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Interval = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshots", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Snapshots = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "sort", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Sort = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ThreadType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "threads", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Threads = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "type", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Type = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ThreadType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.NodesInfoRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "metric", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Metric = Elastic.Clients.Elasticsearch.Metrics.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "flat_settings", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FlatSettings = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.reload_secure_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.ReloadSecureSettingsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.NodesStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index_metric", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IndexMetric = Elastic.Clients.Elasticsearch.Metrics.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "metric", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Metric = Elastic.Clients.Elasticsearch.Metrics.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "completion_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.CompletionFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "fielddata_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FielddataFields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Fields = Elastic.Clients.Elasticsearch.Fields.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "groups", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Groups = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_segment_file_sizes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeSegmentFileSizes = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_unloaded_segments", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeUnloadedSegments = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "level", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Level = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Level>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "types", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Types = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"nodes.usage",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Nodes.NodesUsageRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "metric", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Metric = Elastic.Clients.Elasticsearch.Metrics.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.delete_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.DeleteRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.delete_ruleset",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.DeleteRulesetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.get_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.GetRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.get_ruleset",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.GetRulesetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.list_rulesets",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.ListRulesetsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.put_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.PutRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.put_ruleset",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.PutRulesetRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"query_rules.test",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.QueryRules.TestRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "ruleset_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RulesetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.delete_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.DeleteJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.get_jobs",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.GetJobsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.get_rollup_caps",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.GetRollupCapsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.get_rollup_index_caps",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.GetRollupIndexCapsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Index = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.put_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.PutJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.rollup_search",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.RollupSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "rest_total_hits_as_int", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RestTotalHitsAsInt = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.start_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.StartJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"rollup.stop_job",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Rollup.StopJobRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.DeleteSearchApplicationRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.delete_behavioral_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.DeleteBehavioralAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.GetSearchApplicationRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.get_behavioral_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.GetBehavioralAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Name = list.Select(x => Elastic.Clients.Elasticsearch.Name.Parse(x, System.Globalization.CultureInfo.InvariantCulture)).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.list",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.ListRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "q", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.QueryLuceneSyntax = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.post_behavioral_analytics_event",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.PostBehavioralAnalyticsEventRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "collection_name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.CollectionName = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "event_type", System.StringComparison.OrdinalIgnoreCase))
						{
							request.EventType = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchApplication.EventType>.Parse(parameter.Value);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "debug", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Debug = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.put",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.PutSearchApplicationRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "create", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Create = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.put_behavioral_analytics",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.PutBehavioralAnalyticsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.render_query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.RenderQueryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"search_application.search",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationSearchRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"searchable_snapshots.cache_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchableSnapshots.CacheStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "node_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.NodeId = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"searchable_snapshots.clear_cache",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchableSnapshots.ClearCacheRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_indices", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoIndices = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "expand_wildcards", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.ExpandWildcards = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.ExpandWildcard>.Parse(x)).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"searchable_snapshots.mount",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchableSnapshots.MountRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "storage", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Storage = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"searchable_snapshots.stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SearchableSnapshots.SearchableSnapshotsStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Indices = Elastic.Clients.Elasticsearch.Indices.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "level", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Level = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SearchableSnapshots.StatsLevel>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.activate_user_profile",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ActivateUserProfileRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.authenticate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.AuthenticateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.bulk_delete_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.BulkDeleteRoleRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.bulk_put_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.BulkPutRoleRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.bulk_update_api_keys",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.BulkUpdateApiKeysRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.change_password",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ChangePasswordRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Username = Elastic.Clients.Elasticsearch.Username.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.clear_api_key_cache",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ClearApiKeyCacheRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "ids", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Ids = Elastic.Clients.Elasticsearch.Ids.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.clear_cached_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ClearCachedPrivilegesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "application", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Application = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.clear_cached_realms",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ClearCachedRealmsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "realms", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Realms = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "usernames", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Usernames = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.clear_cached_roles",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ClearCachedRolesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.clear_cached_service_tokens",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.ClearCachedServiceTokensRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "namespace", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Namespace = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "service", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Service = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.create_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.CreateApiKeyRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.create_cross_cluster_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.CreateCrossClusterApiKeyRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.create_service_token",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.CreateServiceTokenRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "namespace", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Namespace = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "service", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Service = parameter.Value;
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.delegate_pki",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DelegatePkiRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.delete_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DeletePrivilegesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "application", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Application = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.delete_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DeleteRoleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.delete_role_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DeleteRoleMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.delete_service_token",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DeleteServiceTokenRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "namespace", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Namespace = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "service", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Service = parameter.Value;
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.delete_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DeleteUserRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Username = Elastic.Clients.Elasticsearch.Username.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.disable_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DisableUserRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Username = Elastic.Clients.Elasticsearch.Username.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.disable_user_profile",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.DisableUserProfileRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "uid", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Uid = parameter.Value;
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.enable_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.EnableUserRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Username = Elastic.Clients.Elasticsearch.Username.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.enable_user_profile",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.EnableUserProfileRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "uid", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Uid = parameter.Value;
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.enroll_kibana",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.EnrollKibanaRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.enroll_node",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.EnrollNodeRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.get_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetApiKeyRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "active_only", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ActiveOnly = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "owner", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Owner = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "realm_name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RealmName = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Username = Elastic.Clients.Elasticsearch.Username.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "with_limited_by", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithLimitedBy = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "with_profile_uid", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithProfileUid = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_builtin_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetBuiltinPrivilegesRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.get_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetPrivilegesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "application", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Application = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetRoleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_role_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetRoleMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_service_accounts",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetServiceAccountsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "namespace", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Namespace = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "service", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Service = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_service_credentials",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetServiceCredentialsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "namespace", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Namespace = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "service", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Service = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetSecuritySettingsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_token",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetTokenRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.get_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetUserRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Username = list.Select(x => Elastic.Clients.Elasticsearch.Username.Parse(x, System.Globalization.CultureInfo.InvariantCulture)).ToList();
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "with_profile_uid", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithProfileUid = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_user_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetUserPrivilegesRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "application", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Application = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "priviledge", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Priviledge = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "username", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Username = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.get_user_profile",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GetUserProfileRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "uid", System.StringComparison.OrdinalIgnoreCase))
						{
							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Uid = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "data", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Data = list.Select(x => x).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.grant_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.GrantApiKeyRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.has_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.HasPrivilegesRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "user", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.User = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.has_privileges_user_profile",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.HasPrivilegesUserProfileRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.invalidate_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.InvalidateApiKeyRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.invalidate_token",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.InvalidateTokenRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.oidc_authenticate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.OidcAuthenticateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.oidc_logout",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.OidcLogoutRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.oidc_prepare_authentication",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.OidcPrepareAuthenticationRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.put_privileges",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.PutPrivilegesRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.put_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.PutRoleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.put_role_mapping",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.PutRoleMappingRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.put_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.PutUserRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.query_api_keys",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.QueryApiKeysRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "typed_keys", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TypedKeys = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "with_limited_by", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithLimitedBy = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "with_profile_uid", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithProfileUid = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.query_role",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.QueryRoleRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.query_user",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.QueryUserRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "with_profile_uid", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WithProfileUid = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.saml_authenticate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlAuthenticateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.saml_complete_logout",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlCompleteLogoutRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.saml_invalidate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlInvalidateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.saml_logout",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlLogoutRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.saml_prepare_authentication",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlPrepareAuthenticationRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.saml_service_provider_metadata",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SamlServiceProviderMetadataRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "realm_name", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RealmName = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.suggest_user_profiles",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.SuggestUserProfilesRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"security.update_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.UpdateApiKeyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.update_cross_cluster_api_key",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.UpdateCrossClusterApiKeyRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.update_settings",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.UpdateSettingsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"security.update_user_profile_data",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Security.UpdateUserProfileDataRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "uid", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Uid = parameter.Value;
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "if_primary_term", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfPrimaryTerm = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "if_seq_no", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IfSeqNo = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "refresh", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Refresh = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Refresh>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"simulate.ingest",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Simulate.IngestRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "pipeline", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Pipeline = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.delete_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.DeleteLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.PolicyId = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.execute_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.ExecuteLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.PolicyId = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.execute_retention",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.ExecuteRetentionRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.get_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.GetLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.PolicyId = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.get_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.GetStatsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.get_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.GetSlmStatusRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.put_lifecycle",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.PutLifecycleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "policy_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.PolicyId = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.start",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.StartSlmRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"slm.stop",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement.StopSlmRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.cleanup_repository",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.CleanupRepositoryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.clone",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.CloneSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "target_snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TargetSnapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.create",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.CreateSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.create_repository",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.CreateRepositoryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "verify", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verify = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.delete",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.DeleteSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.delete_repository",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.DeleteRepositoryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.GetSnapshotRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "after", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.After = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "from_sort_value", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.FromSortValue = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "include_repository", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IncludeRepository = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "index_details", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IndexDetails = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "index_names", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IndexNames = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "offset", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Offset = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "order", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Order = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.SortOrder>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "slm_policy_filter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SlmPolicyFilter = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "sort", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Sort = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Snapshot.SnapshotSort>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "verbose", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Verbose = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.get_repository",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.GetRepositoryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "local", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Local = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.repository_analyze",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.RepositoryAnalyzeRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "blob_count", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.BlobCount = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Concurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "detailed", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Detailed = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "early_read_node_count", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.EarlyReadNodeCount = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "max_blob_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxBlobSize = Elastic.Clients.Elasticsearch.ByteSize.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "max_total_data_size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxTotalDataSize = Elastic.Clients.Elasticsearch.ByteSize.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "rare_action_probability", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RareActionProbability = double.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "rarely_abort_writes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RarelyAbortWrites = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "read_node_count", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ReadNodeCount = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "register_operation_count", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.RegisterOperationCount = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "seed", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Seed = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.repository_verify_integrity",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.RepositoryVerifyIntegrityRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "blob_thread_pool_concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.BlobThreadPoolConcurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index_snapshot_verification_concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IndexSnapshotVerificationConcurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "index_verification_concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IndexVerificationConcurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "max_bytes_per_sec", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxBytesPerSec = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "max_failed_shard_snapshots", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MaxFailedShardSnapshots = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "meta_thread_pool_concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MetaThreadPoolConcurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot_verification_concurrency", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.SnapshotVerificationConcurrency = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "verify_blob_contents", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.VerifyBlobContents = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.restore",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.RestoreRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Snapshot = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.SnapshotStatusRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Repository = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "snapshot", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Snapshot = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "ignore_unavailable", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.IgnoreUnavailable = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"snapshot.verify_repository",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Snapshot.VerifyRepositoryRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "repository", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Name = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"sql.clear_cursor",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.ClearCursorRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"sql.delete_async",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.DeleteAsyncRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"sql.get_async",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.GetAsyncRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "delimiter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Delimiter = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "keep_alive", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.KeepAlive = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletionTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"sql.get_async_status",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.GetAsyncStatusRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"sql.query",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.QueryRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Sql.SqlFormat>.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"sql.translate",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Sql.TranslateRequest>(serializer, body);
				return request;
			}
		}
,
		{
			"synonyms.delete_synonym",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.delete_synonym_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "set_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.get_synonym",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.get_synonym_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "set_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.get_synonyms_sets",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.put_synonym",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.Id = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"synonyms.put_synonym_rule",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "rule_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.RuleId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "set_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.SetId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"tasks.cancel",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Tasks.CancelRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TaskId = Elastic.Clients.Elasticsearch.TaskId.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "actions", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Actions = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "nodes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Nodes = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "parent_task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ParentTaskId = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"tasks.get",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Tasks.GetTasksRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TaskId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"tasks.list",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Tasks.ListRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "actions", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Actions = list.Select(x => x).ToList();
							continue;
						}

						if (string.Equals(parameter.Key, "detailed", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Detailed = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "group_by", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.GroupBy = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Tasks.GroupBy>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "nodes", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Nodes = Elastic.Clients.Elasticsearch.NodeIds.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "parent_task_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ParentTaskId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"text_structure.find_field_structure",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TextStructure.FindFieldStructureRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "column_names", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ColumnNames = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "delimiter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Delimiter = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "documents_to_sample", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DocumentsToSample = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "ecs_compatibility", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.EcsCompatibility = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.TextStructure.EcsCompatibilityType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "explain", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Explain = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "field", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Field = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.TextStructure.FormatType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "grok_pattern", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.GrokPattern = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Index = Elastic.Clients.Elasticsearch.IndexName.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "quote", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Quote = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "should_trim_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ShouldTrimFields = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timestamp_field", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TimestampField = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timestamp_format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TimestampFormat = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"text_structure.find_message_structure",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TextStructure.FindMessageStructureRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "column_names", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ColumnNames = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "delimiter", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Delimiter = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "ecs_compatibility", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.EcsCompatibility = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.TextStructure.EcsCompatibilityType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "explain", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Explain = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Format = Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.TextStructure.FormatType>.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "grok_pattern", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.GrokPattern = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "quote", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Quote = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "should_trim_fields", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ShouldTrimFields = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timestamp_field", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TimestampField = Elastic.Clients.Elasticsearch.Field.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timestamp_format", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TimestampFormat = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"text_structure.test_grok_pattern",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TextStructure.TestGrokPatternRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "ecs_compatibility", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.EcsCompatibility = parameter.Value;
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.delete_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.DeleteTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "delete_dest_index", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeleteDestIndex = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.get_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.GetTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TransformId = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "exclude_generated", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.ExcludeGenerated = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = int.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.get_transform_stats",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.GetTransformStatsRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Names.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "size", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Size = long.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.preview_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.PreviewTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.put_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				if (string.IsNullOrEmpty(body))
				{
					throw new System.InvalidOperationException("Body is required.");
				}

				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.PutTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "defer_validation", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeferValidation = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.reset_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.ResetTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.schedule_now_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.ScheduleNowTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.start_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.StartTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "from", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.From = parameter.Value;
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.stop_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.StopTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Name.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "allow_no_match", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AllowNoMatch = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "force", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Force = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_checkpoint", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCheckpoint = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "wait_for_completion", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.WaitForCompletion = bool.Parse(parameter.Value);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.update_transform",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.UpdateTransformRequest>(serializer, body);
				if (pathParameters is not null)
				{
					foreach (var parameter in pathParameters)
					{
						if (string.Equals(parameter.Key, "transform_id", System.StringComparison.OrdinalIgnoreCase))
						{
							request.TransformId = Elastic.Clients.Elasticsearch.Id.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "defer_validation", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DeferValidation = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"transform.upgrade_transforms",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.TransformManagement.UpgradeTransformsRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "dry_run", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.DryRun = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.Timeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"xpack.info",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Xpack.XpackInfoRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "accept_enterprise", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.AcceptEnterprise = bool.Parse(parameter.Value);
							continue;
						}

						if (string.Equals(parameter.Key, "categories", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							if (Elastic.Clients.Elasticsearch.Extensions.IsNullOrEmptyCommaSeparatedList(parameter.Value, out var list))
							{
								continue;
							}

							request.Categories = list.Select(x => Elastic.Clients.Elasticsearch.EnumValue<Elastic.Clients.Elasticsearch.Xpack.XPackCategory>.Parse(x)).ToList();
							continue;
						}
					}
				}

				return request;
			}
		}
,
		{
			"xpack.usage",
			(serializer, pathParameters, queryParameters, body) =>
			{
				var request = Elastic.Transport.Extensions.TransportSerializerExtensions.Deserialize<Elastic.Clients.Elasticsearch.Xpack.XpackUsageRequest>(serializer, body);
				if (queryParameters is not null)
				{
					foreach (var parameter in queryParameters)
					{
						if (string.Equals(parameter.Key, "master_timeout", System.StringComparison.OrdinalIgnoreCase))
						{
							if (parameter.Value is null)
							{
								continue;
							}

							request.MasterTimeout = Elastic.Clients.Elasticsearch.Duration.Parse(parameter.Value, System.Globalization.CultureInfo.InvariantCulture);
							continue;
						}
					}
				}

				return request;
			}
		}
	}.ToFrozenDictionary();
}