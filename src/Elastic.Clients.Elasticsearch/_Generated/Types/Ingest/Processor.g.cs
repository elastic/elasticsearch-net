// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Ingest;

[JsonConverter(typeof(ProcessorConverter))]
public sealed partial class Processor
{
	internal Processor(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantName = variantName;
		Variant = variant;
	}

	internal object Variant { get; }
	internal string VariantName { get; }

	public static Processor Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => new Processor("append", appendProcessor);
	public static Processor Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => new Processor("attachment", attachmentProcessor);
	public static Processor Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => new Processor("bytes", bytesProcessor);
	public static Processor Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => new Processor("circle", circleProcessor);
	public static Processor CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => new Processor("community_id", communityIDProcessor);
	public static Processor Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => new Processor("convert", convertProcessor);
	public static Processor Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => new Processor("csv", csvProcessor);
	public static Processor Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => new Processor("date", dateProcessor);
	public static Processor DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => new Processor("date_index_name", dateIndexNameProcessor);
	public static Processor Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => new Processor("dissect", dissectProcessor);
	public static Processor DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => new Processor("dot_expander", dotExpanderProcessor);
	public static Processor Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => new Processor("drop", dropProcessor);
	public static Processor Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => new Processor("enrich", enrichProcessor);
	public static Processor Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => new Processor("fail", failProcessor);
	public static Processor Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => new Processor("fingerprint", fingerprintProcessor);
	public static Processor Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => new Processor("foreach", foreachProcessor);
	public static Processor GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => new Processor("geo_grid", geoGridProcessor);
	public static Processor Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => new Processor("geoip", geoIpProcessor);
	public static Processor Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => new Processor("grok", grokProcessor);
	public static Processor Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => new Processor("gsub", gsubProcessor);
	public static Processor HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => new Processor("html_strip", htmlStripProcessor);
	public static Processor Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => new Processor("inference", inferenceProcessor);
	public static Processor IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => new Processor("ip_location", ipLocationProcessor);
	public static Processor Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => new Processor("join", joinProcessor);
	public static Processor Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => new Processor("json", jsonProcessor);
	public static Processor Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => new Processor("kv", keyValueProcessor);
	public static Processor Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => new Processor("lowercase", lowercaseProcessor);
	public static Processor NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => new Processor("network_direction", networkDirectionProcessor);
	public static Processor Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => new Processor("pipeline", pipelineProcessor);
	public static Processor Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => new Processor("redact", redactProcessor);
	public static Processor RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => new Processor("registered_domain", registeredDomainProcessor);
	public static Processor Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => new Processor("remove", removeProcessor);
	public static Processor Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => new Processor("rename", renameProcessor);
	public static Processor Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => new Processor("reroute", rerouteProcessor);
	public static Processor Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => new Processor("script", scriptProcessor);
	public static Processor Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => new Processor("set", setProcessor);
	public static Processor SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => new Processor("set_security_user", setSecurityUserProcessor);
	public static Processor Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => new Processor("sort", sortProcessor);
	public static Processor Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => new Processor("split", splitProcessor);
	public static Processor Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => new Processor("terminate", terminateProcessor);
	public static Processor Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => new Processor("trim", trimProcessor);
	public static Processor Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => new Processor("uppercase", uppercaseProcessor);
	public static Processor UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => new Processor("uri_parts", uriPartsProcessor);
	public static Processor UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => new Processor("urldecode", urlDecodeProcessor);
	public static Processor UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => new Processor("user_agent", userAgentProcessor);

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class ProcessorConverter : JsonConverter<Processor>
{
	public override Processor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
		{
			throw new JsonException("Expected start token.");
		}

		object? variantValue = default;
		string? variantNameValue = default;
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException("Expected a property name token.");
			}

			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException("Expected a property name token representing the name of an Elasticsearch field.");
			}

			var propertyName = reader.GetString();
			reader.Read();
			if (propertyName == "append")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.AppendProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "attachment")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "bytes")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.BytesProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "circle")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.CircleProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "community_id")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "convert")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "csv")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.CsvProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "date")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DateProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "date_index_name")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "dissect")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DissectProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "dot_expander")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "drop")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.DropProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "enrich")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "fail")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.FailProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "fingerprint")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "foreach")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "geo_grid")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "geoip")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "grok")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GrokProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "gsub")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.GsubProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "html_strip")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "inference")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "ip_location")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "join")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.JoinProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "json")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.JsonProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "kv")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "lowercase")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "network_direction")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "pipeline")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "redact")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.RedactProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "registered_domain")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "remove")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "rename")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.RenameProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "reroute")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "script")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "set")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.SetProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "set_security_user")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "sort")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.SortProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "split")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.SplitProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "terminate")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "trim")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.TrimProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "uppercase")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "uri_parts")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "urldecode")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "user_agent")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			throw new JsonException($"Unknown property name '{propertyName}' received while deserializing the 'Processor' from the response.");
		}

		var result = new Processor(variantNameValue, variantValue);
		return result;
	}

	public override void Write(Utf8JsonWriter writer, Processor value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		if (value.VariantName is not null && value.Variant is not null)
		{
			writer.WritePropertyName(value.VariantName);
			switch (value.VariantName)
			{
				case "append":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.AppendProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.AppendProcessor)value.Variant, options);
					break;
				case "attachment":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor)value.Variant, options);
					break;
				case "bytes":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.BytesProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.BytesProcessor)value.Variant, options);
					break;
				case "circle":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.CircleProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.CircleProcessor)value.Variant, options);
					break;
				case "community_id":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor)value.Variant, options);
					break;
				case "convert":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor)value.Variant, options);
					break;
				case "csv":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.CsvProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.CsvProcessor)value.Variant, options);
					break;
				case "date":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.DateProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.DateProcessor)value.Variant, options);
					break;
				case "date_index_name":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor)value.Variant, options);
					break;
				case "dissect":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.DissectProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.DissectProcessor)value.Variant, options);
					break;
				case "dot_expander":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor)value.Variant, options);
					break;
				case "drop":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.DropProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.DropProcessor)value.Variant, options);
					break;
				case "enrich":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor)value.Variant, options);
					break;
				case "fail":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.FailProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.FailProcessor)value.Variant, options);
					break;
				case "fingerprint":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor)value.Variant, options);
					break;
				case "foreach":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor)value.Variant, options);
					break;
				case "geo_grid":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor)value.Variant, options);
					break;
				case "geoip":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor)value.Variant, options);
					break;
				case "grok":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.GrokProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.GrokProcessor)value.Variant, options);
					break;
				case "gsub":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.GsubProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.GsubProcessor)value.Variant, options);
					break;
				case "html_strip":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor)value.Variant, options);
					break;
				case "inference":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor)value.Variant, options);
					break;
				case "ip_location":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor)value.Variant, options);
					break;
				case "join":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.JoinProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.JoinProcessor)value.Variant, options);
					break;
				case "json":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.JsonProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.JsonProcessor)value.Variant, options);
					break;
				case "kv":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor)value.Variant, options);
					break;
				case "lowercase":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor)value.Variant, options);
					break;
				case "network_direction":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor)value.Variant, options);
					break;
				case "pipeline":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor)value.Variant, options);
					break;
				case "redact":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.RedactProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.RedactProcessor)value.Variant, options);
					break;
				case "registered_domain":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor)value.Variant, options);
					break;
				case "remove":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor)value.Variant, options);
					break;
				case "rename":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.RenameProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.RenameProcessor)value.Variant, options);
					break;
				case "reroute":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor)value.Variant, options);
					break;
				case "script":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor)value.Variant, options);
					break;
				case "set":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.SetProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.SetProcessor)value.Variant, options);
					break;
				case "set_security_user":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor)value.Variant, options);
					break;
				case "sort":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.SortProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.SortProcessor)value.Variant, options);
					break;
				case "split":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.SplitProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.SplitProcessor)value.Variant, options);
					break;
				case "terminate":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor)value.Variant, options);
					break;
				case "trim":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.TrimProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.TrimProcessor)value.Variant, options);
					break;
				case "uppercase":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor)value.Variant, options);
					break;
				case "uri_parts":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor)value.Variant, options);
					break;
				case "urldecode":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor)value.Variant, options);
					break;
				case "user_agent":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor>(writer, (Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor)value.Variant, options);
					break;
			}
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ProcessorDescriptor<TDocument> : SerializableDescriptor<ProcessorDescriptor<TDocument>>
{
	internal ProcessorDescriptor(Action<ProcessorDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ProcessorDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ProcessorDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ProcessorDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ProcessorDescriptor<TDocument> Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => Set(appendProcessor, "append");
	public ProcessorDescriptor<TDocument> Append(Action<Elastic.Clients.Elasticsearch.Ingest.AppendProcessorDescriptor<TDocument>> configure) => Set(configure, "append");
	public ProcessorDescriptor<TDocument> Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => Set(attachmentProcessor, "attachment");
	public ProcessorDescriptor<TDocument> Attachment(Action<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessorDescriptor<TDocument>> configure) => Set(configure, "attachment");
	public ProcessorDescriptor<TDocument> Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => Set(bytesProcessor, "bytes");
	public ProcessorDescriptor<TDocument> Bytes(Action<Elastic.Clients.Elasticsearch.Ingest.BytesProcessorDescriptor<TDocument>> configure) => Set(configure, "bytes");
	public ProcessorDescriptor<TDocument> Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => Set(circleProcessor, "circle");
	public ProcessorDescriptor<TDocument> Circle(Action<Elastic.Clients.Elasticsearch.Ingest.CircleProcessorDescriptor<TDocument>> configure) => Set(configure, "circle");
	public ProcessorDescriptor<TDocument> CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => Set(communityIDProcessor, "community_id");
	public ProcessorDescriptor<TDocument> CommunityId(Action<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessorDescriptor<TDocument>> configure) => Set(configure, "community_id");
	public ProcessorDescriptor<TDocument> Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => Set(convertProcessor, "convert");
	public ProcessorDescriptor<TDocument> Convert(Action<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessorDescriptor<TDocument>> configure) => Set(configure, "convert");
	public ProcessorDescriptor<TDocument> Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => Set(csvProcessor, "csv");
	public ProcessorDescriptor<TDocument> Csv(Action<Elastic.Clients.Elasticsearch.Ingest.CsvProcessorDescriptor<TDocument>> configure) => Set(configure, "csv");
	public ProcessorDescriptor<TDocument> Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => Set(dateProcessor, "date");
	public ProcessorDescriptor<TDocument> Date(Action<Elastic.Clients.Elasticsearch.Ingest.DateProcessorDescriptor<TDocument>> configure) => Set(configure, "date");
	public ProcessorDescriptor<TDocument> DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => Set(dateIndexNameProcessor, "date_index_name");
	public ProcessorDescriptor<TDocument> DateIndexName(Action<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessorDescriptor<TDocument>> configure) => Set(configure, "date_index_name");
	public ProcessorDescriptor<TDocument> Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => Set(dissectProcessor, "dissect");
	public ProcessorDescriptor<TDocument> Dissect(Action<Elastic.Clients.Elasticsearch.Ingest.DissectProcessorDescriptor<TDocument>> configure) => Set(configure, "dissect");
	public ProcessorDescriptor<TDocument> DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => Set(dotExpanderProcessor, "dot_expander");
	public ProcessorDescriptor<TDocument> DotExpander(Action<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessorDescriptor<TDocument>> configure) => Set(configure, "dot_expander");
	public ProcessorDescriptor<TDocument> Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => Set(dropProcessor, "drop");
	public ProcessorDescriptor<TDocument> Drop(Action<Elastic.Clients.Elasticsearch.Ingest.DropProcessorDescriptor<TDocument>> configure) => Set(configure, "drop");
	public ProcessorDescriptor<TDocument> Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => Set(enrichProcessor, "enrich");
	public ProcessorDescriptor<TDocument> Enrich(Action<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessorDescriptor<TDocument>> configure) => Set(configure, "enrich");
	public ProcessorDescriptor<TDocument> Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => Set(failProcessor, "fail");
	public ProcessorDescriptor<TDocument> Fail(Action<Elastic.Clients.Elasticsearch.Ingest.FailProcessorDescriptor<TDocument>> configure) => Set(configure, "fail");
	public ProcessorDescriptor<TDocument> Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => Set(fingerprintProcessor, "fingerprint");
	public ProcessorDescriptor<TDocument> Fingerprint(Action<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessorDescriptor<TDocument>> configure) => Set(configure, "fingerprint");
	public ProcessorDescriptor<TDocument> Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => Set(foreachProcessor, "foreach");
	public ProcessorDescriptor<TDocument> Foreach(Action<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessorDescriptor<TDocument>> configure) => Set(configure, "foreach");
	public ProcessorDescriptor<TDocument> GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => Set(geoGridProcessor, "geo_grid");
	public ProcessorDescriptor<TDocument> GeoGrid(Action<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessorDescriptor<TDocument>> configure) => Set(configure, "geo_grid");
	public ProcessorDescriptor<TDocument> Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => Set(geoIpProcessor, "geoip");
	public ProcessorDescriptor<TDocument> Geoip(Action<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessorDescriptor<TDocument>> configure) => Set(configure, "geoip");
	public ProcessorDescriptor<TDocument> Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => Set(grokProcessor, "grok");
	public ProcessorDescriptor<TDocument> Grok(Action<Elastic.Clients.Elasticsearch.Ingest.GrokProcessorDescriptor<TDocument>> configure) => Set(configure, "grok");
	public ProcessorDescriptor<TDocument> Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => Set(gsubProcessor, "gsub");
	public ProcessorDescriptor<TDocument> Gsub(Action<Elastic.Clients.Elasticsearch.Ingest.GsubProcessorDescriptor<TDocument>> configure) => Set(configure, "gsub");
	public ProcessorDescriptor<TDocument> HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => Set(htmlStripProcessor, "html_strip");
	public ProcessorDescriptor<TDocument> HtmlStrip(Action<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessorDescriptor<TDocument>> configure) => Set(configure, "html_strip");
	public ProcessorDescriptor<TDocument> Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => Set(inferenceProcessor, "inference");
	public ProcessorDescriptor<TDocument> Inference(Action<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessorDescriptor<TDocument>> configure) => Set(configure, "inference");
	public ProcessorDescriptor<TDocument> IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => Set(ipLocationProcessor, "ip_location");
	public ProcessorDescriptor<TDocument> IpLocation(Action<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessorDescriptor<TDocument>> configure) => Set(configure, "ip_location");
	public ProcessorDescriptor<TDocument> Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => Set(joinProcessor, "join");
	public ProcessorDescriptor<TDocument> Join(Action<Elastic.Clients.Elasticsearch.Ingest.JoinProcessorDescriptor<TDocument>> configure) => Set(configure, "join");
	public ProcessorDescriptor<TDocument> Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => Set(jsonProcessor, "json");
	public ProcessorDescriptor<TDocument> Json(Action<Elastic.Clients.Elasticsearch.Ingest.JsonProcessorDescriptor<TDocument>> configure) => Set(configure, "json");
	public ProcessorDescriptor<TDocument> Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => Set(keyValueProcessor, "kv");
	public ProcessorDescriptor<TDocument> Kv(Action<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessorDescriptor<TDocument>> configure) => Set(configure, "kv");
	public ProcessorDescriptor<TDocument> Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => Set(lowercaseProcessor, "lowercase");
	public ProcessorDescriptor<TDocument> Lowercase(Action<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessorDescriptor<TDocument>> configure) => Set(configure, "lowercase");
	public ProcessorDescriptor<TDocument> NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => Set(networkDirectionProcessor, "network_direction");
	public ProcessorDescriptor<TDocument> NetworkDirection(Action<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessorDescriptor<TDocument>> configure) => Set(configure, "network_direction");
	public ProcessorDescriptor<TDocument> Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => Set(pipelineProcessor, "pipeline");
	public ProcessorDescriptor<TDocument> Pipeline(Action<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessorDescriptor<TDocument>> configure) => Set(configure, "pipeline");
	public ProcessorDescriptor<TDocument> Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => Set(redactProcessor, "redact");
	public ProcessorDescriptor<TDocument> Redact(Action<Elastic.Clients.Elasticsearch.Ingest.RedactProcessorDescriptor<TDocument>> configure) => Set(configure, "redact");
	public ProcessorDescriptor<TDocument> RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => Set(registeredDomainProcessor, "registered_domain");
	public ProcessorDescriptor<TDocument> RegisteredDomain(Action<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessorDescriptor<TDocument>> configure) => Set(configure, "registered_domain");
	public ProcessorDescriptor<TDocument> Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => Set(removeProcessor, "remove");
	public ProcessorDescriptor<TDocument> Remove(Action<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessorDescriptor<TDocument>> configure) => Set(configure, "remove");
	public ProcessorDescriptor<TDocument> Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => Set(renameProcessor, "rename");
	public ProcessorDescriptor<TDocument> Rename(Action<Elastic.Clients.Elasticsearch.Ingest.RenameProcessorDescriptor<TDocument>> configure) => Set(configure, "rename");
	public ProcessorDescriptor<TDocument> Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => Set(rerouteProcessor, "reroute");
	public ProcessorDescriptor<TDocument> Reroute(Action<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessorDescriptor<TDocument>> configure) => Set(configure, "reroute");
	public ProcessorDescriptor<TDocument> Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => Set(scriptProcessor, "script");
	public ProcessorDescriptor<TDocument> Script(Action<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessorDescriptor<TDocument>> configure) => Set(configure, "script");
	public ProcessorDescriptor<TDocument> Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => Set(setProcessor, "set");
	public ProcessorDescriptor<TDocument> Set(Action<Elastic.Clients.Elasticsearch.Ingest.SetProcessorDescriptor<TDocument>> configure) => Set(configure, "set");
	public ProcessorDescriptor<TDocument> SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => Set(setSecurityUserProcessor, "set_security_user");
	public ProcessorDescriptor<TDocument> SetSecurityUser(Action<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessorDescriptor<TDocument>> configure) => Set(configure, "set_security_user");
	public ProcessorDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => Set(sortProcessor, "sort");
	public ProcessorDescriptor<TDocument> Sort(Action<Elastic.Clients.Elasticsearch.Ingest.SortProcessorDescriptor<TDocument>> configure) => Set(configure, "sort");
	public ProcessorDescriptor<TDocument> Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => Set(splitProcessor, "split");
	public ProcessorDescriptor<TDocument> Split(Action<Elastic.Clients.Elasticsearch.Ingest.SplitProcessorDescriptor<TDocument>> configure) => Set(configure, "split");
	public ProcessorDescriptor<TDocument> Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => Set(terminateProcessor, "terminate");
	public ProcessorDescriptor<TDocument> Terminate(Action<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessorDescriptor<TDocument>> configure) => Set(configure, "terminate");
	public ProcessorDescriptor<TDocument> Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => Set(trimProcessor, "trim");
	public ProcessorDescriptor<TDocument> Trim(Action<Elastic.Clients.Elasticsearch.Ingest.TrimProcessorDescriptor<TDocument>> configure) => Set(configure, "trim");
	public ProcessorDescriptor<TDocument> Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => Set(uppercaseProcessor, "uppercase");
	public ProcessorDescriptor<TDocument> Uppercase(Action<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessorDescriptor<TDocument>> configure) => Set(configure, "uppercase");
	public ProcessorDescriptor<TDocument> UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => Set(uriPartsProcessor, "uri_parts");
	public ProcessorDescriptor<TDocument> UriParts(Action<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessorDescriptor<TDocument>> configure) => Set(configure, "uri_parts");
	public ProcessorDescriptor<TDocument> UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => Set(urlDecodeProcessor, "urldecode");
	public ProcessorDescriptor<TDocument> UrlDecode(Action<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessorDescriptor<TDocument>> configure) => Set(configure, "urldecode");
	public ProcessorDescriptor<TDocument> UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => Set(userAgentProcessor, "user_agent");
	public ProcessorDescriptor<TDocument> UserAgent(Action<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessorDescriptor<TDocument>> configure) => Set(configure, "user_agent");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ProcessorDescriptor : SerializableDescriptor<ProcessorDescriptor>
{
	internal ProcessorDescriptor(Action<ProcessorDescriptor> configure) => configure.Invoke(this);

	public ProcessorDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ProcessorDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ProcessorDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ProcessorDescriptor Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => Set(appendProcessor, "append");
	public ProcessorDescriptor Append<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.AppendProcessorDescriptor> configure) => Set(configure, "append");
	public ProcessorDescriptor Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => Set(attachmentProcessor, "attachment");
	public ProcessorDescriptor Attachment<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessorDescriptor> configure) => Set(configure, "attachment");
	public ProcessorDescriptor Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => Set(bytesProcessor, "bytes");
	public ProcessorDescriptor Bytes<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.BytesProcessorDescriptor> configure) => Set(configure, "bytes");
	public ProcessorDescriptor Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => Set(circleProcessor, "circle");
	public ProcessorDescriptor Circle<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CircleProcessorDescriptor> configure) => Set(configure, "circle");
	public ProcessorDescriptor CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => Set(communityIDProcessor, "community_id");
	public ProcessorDescriptor CommunityId<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessorDescriptor> configure) => Set(configure, "community_id");
	public ProcessorDescriptor Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => Set(convertProcessor, "convert");
	public ProcessorDescriptor Convert<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessorDescriptor> configure) => Set(configure, "convert");
	public ProcessorDescriptor Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => Set(csvProcessor, "csv");
	public ProcessorDescriptor Csv<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CsvProcessorDescriptor> configure) => Set(configure, "csv");
	public ProcessorDescriptor Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => Set(dateProcessor, "date");
	public ProcessorDescriptor Date<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DateProcessorDescriptor> configure) => Set(configure, "date");
	public ProcessorDescriptor DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => Set(dateIndexNameProcessor, "date_index_name");
	public ProcessorDescriptor DateIndexName<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessorDescriptor> configure) => Set(configure, "date_index_name");
	public ProcessorDescriptor Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => Set(dissectProcessor, "dissect");
	public ProcessorDescriptor Dissect<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DissectProcessorDescriptor> configure) => Set(configure, "dissect");
	public ProcessorDescriptor DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => Set(dotExpanderProcessor, "dot_expander");
	public ProcessorDescriptor DotExpander<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessorDescriptor> configure) => Set(configure, "dot_expander");
	public ProcessorDescriptor Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => Set(dropProcessor, "drop");
	public ProcessorDescriptor Drop<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DropProcessorDescriptor> configure) => Set(configure, "drop");
	public ProcessorDescriptor Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => Set(enrichProcessor, "enrich");
	public ProcessorDescriptor Enrich<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessorDescriptor> configure) => Set(configure, "enrich");
	public ProcessorDescriptor Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => Set(failProcessor, "fail");
	public ProcessorDescriptor Fail<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.FailProcessorDescriptor> configure) => Set(configure, "fail");
	public ProcessorDescriptor Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => Set(fingerprintProcessor, "fingerprint");
	public ProcessorDescriptor Fingerprint<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessorDescriptor> configure) => Set(configure, "fingerprint");
	public ProcessorDescriptor Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => Set(foreachProcessor, "foreach");
	public ProcessorDescriptor Foreach<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessorDescriptor> configure) => Set(configure, "foreach");
	public ProcessorDescriptor GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => Set(geoGridProcessor, "geo_grid");
	public ProcessorDescriptor GeoGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessorDescriptor> configure) => Set(configure, "geo_grid");
	public ProcessorDescriptor Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => Set(geoIpProcessor, "geoip");
	public ProcessorDescriptor Geoip<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessorDescriptor> configure) => Set(configure, "geoip");
	public ProcessorDescriptor Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => Set(grokProcessor, "grok");
	public ProcessorDescriptor Grok<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GrokProcessorDescriptor> configure) => Set(configure, "grok");
	public ProcessorDescriptor Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => Set(gsubProcessor, "gsub");
	public ProcessorDescriptor Gsub<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GsubProcessorDescriptor> configure) => Set(configure, "gsub");
	public ProcessorDescriptor HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => Set(htmlStripProcessor, "html_strip");
	public ProcessorDescriptor HtmlStrip<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessorDescriptor> configure) => Set(configure, "html_strip");
	public ProcessorDescriptor Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => Set(inferenceProcessor, "inference");
	public ProcessorDescriptor Inference<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessorDescriptor> configure) => Set(configure, "inference");
	public ProcessorDescriptor IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => Set(ipLocationProcessor, "ip_location");
	public ProcessorDescriptor IpLocation<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessorDescriptor> configure) => Set(configure, "ip_location");
	public ProcessorDescriptor Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => Set(joinProcessor, "join");
	public ProcessorDescriptor Join<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.JoinProcessorDescriptor> configure) => Set(configure, "join");
	public ProcessorDescriptor Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => Set(jsonProcessor, "json");
	public ProcessorDescriptor Json<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.JsonProcessorDescriptor> configure) => Set(configure, "json");
	public ProcessorDescriptor Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => Set(keyValueProcessor, "kv");
	public ProcessorDescriptor Kv<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessorDescriptor> configure) => Set(configure, "kv");
	public ProcessorDescriptor Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => Set(lowercaseProcessor, "lowercase");
	public ProcessorDescriptor Lowercase<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessorDescriptor> configure) => Set(configure, "lowercase");
	public ProcessorDescriptor NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => Set(networkDirectionProcessor, "network_direction");
	public ProcessorDescriptor NetworkDirection<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessorDescriptor> configure) => Set(configure, "network_direction");
	public ProcessorDescriptor Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => Set(pipelineProcessor, "pipeline");
	public ProcessorDescriptor Pipeline<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessorDescriptor> configure) => Set(configure, "pipeline");
	public ProcessorDescriptor Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => Set(redactProcessor, "redact");
	public ProcessorDescriptor Redact<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RedactProcessorDescriptor> configure) => Set(configure, "redact");
	public ProcessorDescriptor RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => Set(registeredDomainProcessor, "registered_domain");
	public ProcessorDescriptor RegisteredDomain<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessorDescriptor> configure) => Set(configure, "registered_domain");
	public ProcessorDescriptor Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => Set(removeProcessor, "remove");
	public ProcessorDescriptor Remove<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessorDescriptor> configure) => Set(configure, "remove");
	public ProcessorDescriptor Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => Set(renameProcessor, "rename");
	public ProcessorDescriptor Rename<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RenameProcessorDescriptor> configure) => Set(configure, "rename");
	public ProcessorDescriptor Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => Set(rerouteProcessor, "reroute");
	public ProcessorDescriptor Reroute<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessorDescriptor> configure) => Set(configure, "reroute");
	public ProcessorDescriptor Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => Set(scriptProcessor, "script");
	public ProcessorDescriptor Script<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessorDescriptor> configure) => Set(configure, "script");
	public ProcessorDescriptor Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => Set(setProcessor, "set");
	public ProcessorDescriptor Set<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SetProcessorDescriptor> configure) => Set(configure, "set");
	public ProcessorDescriptor SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => Set(setSecurityUserProcessor, "set_security_user");
	public ProcessorDescriptor SetSecurityUser<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessorDescriptor> configure) => Set(configure, "set_security_user");
	public ProcessorDescriptor Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => Set(sortProcessor, "sort");
	public ProcessorDescriptor Sort<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SortProcessorDescriptor> configure) => Set(configure, "sort");
	public ProcessorDescriptor Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => Set(splitProcessor, "split");
	public ProcessorDescriptor Split<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SplitProcessorDescriptor> configure) => Set(configure, "split");
	public ProcessorDescriptor Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => Set(terminateProcessor, "terminate");
	public ProcessorDescriptor Terminate<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessorDescriptor> configure) => Set(configure, "terminate");
	public ProcessorDescriptor Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => Set(trimProcessor, "trim");
	public ProcessorDescriptor Trim<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.TrimProcessorDescriptor> configure) => Set(configure, "trim");
	public ProcessorDescriptor Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => Set(uppercaseProcessor, "uppercase");
	public ProcessorDescriptor Uppercase<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessorDescriptor> configure) => Set(configure, "uppercase");
	public ProcessorDescriptor UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => Set(uriPartsProcessor, "uri_parts");
	public ProcessorDescriptor UriParts<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessorDescriptor> configure) => Set(configure, "uri_parts");
	public ProcessorDescriptor UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => Set(urlDecodeProcessor, "urldecode");
	public ProcessorDescriptor UrlDecode<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessorDescriptor> configure) => Set(configure, "urldecode");
	public ProcessorDescriptor UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => Set(userAgentProcessor, "user_agent");
	public ProcessorDescriptor UserAgent<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessorDescriptor> configure) => Set(configure, "user_agent");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}