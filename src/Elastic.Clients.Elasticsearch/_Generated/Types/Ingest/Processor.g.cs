// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Ingest;

[JsonConverter(typeof(ProcessorConverter))]
public sealed partial class Processor
{
	internal Processor(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantType = variantName;
		Variant = variant;
	}

	internal Processor()
	{
	}

	public object Variant { get; internal set; }
	public string VariantType { get; internal set; }

	public static Processor Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => new Processor("append", appendProcessor);
	public static Processor Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => new Processor("attachment", attachmentProcessor);
	public static Processor Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => new Processor("bytes", bytesProcessor);
	public static Processor Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => new Processor("circle", circleProcessor);
	public static Processor CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => new Processor("community_id", communityIDProcessor);
	public static Processor Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => new Processor("convert", convertProcessor);
	public static Processor Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => new Processor("csv", csvProcessor);
	public static Processor Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => new Processor("date", dateProcessor);
	public static Processor DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => new Processor("date_index_name", dateIndexNameProcessor);
	public static Processor Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => new Processor("dissect", dissectProcessor);
	public static Processor DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => new Processor("dot_expander", dotExpanderProcessor);
	public static Processor Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => new Processor("drop", dropProcessor);
	public static Processor Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => new Processor("enrich", enrichProcessor);
	public static Processor Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => new Processor("fail", failProcessor);
	public static Processor Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => new Processor("fingerprint", fingerprintProcessor);
	public static Processor Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => new Processor("foreach", foreachProcessor);
	public static Processor GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => new Processor("geo_grid", geoGridProcessor);
	public static Processor Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => new Processor("geoip", geoIpProcessor);
	public static Processor Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => new Processor("grok", grokProcessor);
	public static Processor Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => new Processor("gsub", gsubProcessor);
	public static Processor HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => new Processor("html_strip", htmlStripProcessor);
	public static Processor Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => new Processor("inference", inferenceProcessor);
	public static Processor IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => new Processor("ip_location", ipLocationProcessor);
	public static Processor Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => new Processor("join", joinProcessor);
	public static Processor Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => new Processor("json", jsonProcessor);
	public static Processor Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => new Processor("kv", keyValueProcessor);
	public static Processor Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => new Processor("lowercase", lowercaseProcessor);
	public static Processor NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => new Processor("network_direction", networkDirectionProcessor);
	public static Processor Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => new Processor("pipeline", pipelineProcessor);
	public static Processor Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => new Processor("redact", redactProcessor);
	public static Processor RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => new Processor("registered_domain", registeredDomainProcessor);
	public static Processor Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => new Processor("remove", removeProcessor);
	public static Processor Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => new Processor("rename", renameProcessor);
	public static Processor Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => new Processor("reroute", rerouteProcessor);
	public static Processor Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => new Processor("script", scriptProcessor);
	public static Processor Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => new Processor("set", setProcessor);
	public static Processor SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => new Processor("set_security_user", setSecurityUserProcessor);
	public static Processor Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => new Processor("sort", sortProcessor);
	public static Processor Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => new Processor("split", splitProcessor);
	public static Processor Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => new Processor("terminate", terminateProcessor);
	public static Processor Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => new Processor("trim", trimProcessor);
	public static Processor Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => new Processor("uppercase", uppercaseProcessor);
	public static Processor UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => new Processor("uri_parts", uriPartsProcessor);
	public static Processor UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => new Processor("urldecode", urlDecodeProcessor);
	public static Processor UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => new Processor("user_agent", userAgentProcessor);

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class ProcessorConverter : System.Text.Json.Serialization.JsonConverter<Processor>
{
	private static readonly System.Text.Json.JsonEncodedText VariantAppend = System.Text.Json.JsonEncodedText.Encode("append");
	private static readonly System.Text.Json.JsonEncodedText VariantAttachment = System.Text.Json.JsonEncodedText.Encode("attachment");
	private static readonly System.Text.Json.JsonEncodedText VariantBytes = System.Text.Json.JsonEncodedText.Encode("bytes");
	private static readonly System.Text.Json.JsonEncodedText VariantCircle = System.Text.Json.JsonEncodedText.Encode("circle");
	private static readonly System.Text.Json.JsonEncodedText VariantCommunityId = System.Text.Json.JsonEncodedText.Encode("community_id");
	private static readonly System.Text.Json.JsonEncodedText VariantConvert = System.Text.Json.JsonEncodedText.Encode("convert");
	private static readonly System.Text.Json.JsonEncodedText VariantCsv = System.Text.Json.JsonEncodedText.Encode("csv");
	private static readonly System.Text.Json.JsonEncodedText VariantDate = System.Text.Json.JsonEncodedText.Encode("date");
	private static readonly System.Text.Json.JsonEncodedText VariantDateIndexName = System.Text.Json.JsonEncodedText.Encode("date_index_name");
	private static readonly System.Text.Json.JsonEncodedText VariantDissect = System.Text.Json.JsonEncodedText.Encode("dissect");
	private static readonly System.Text.Json.JsonEncodedText VariantDotExpander = System.Text.Json.JsonEncodedText.Encode("dot_expander");
	private static readonly System.Text.Json.JsonEncodedText VariantDrop = System.Text.Json.JsonEncodedText.Encode("drop");
	private static readonly System.Text.Json.JsonEncodedText VariantEnrich = System.Text.Json.JsonEncodedText.Encode("enrich");
	private static readonly System.Text.Json.JsonEncodedText VariantFail = System.Text.Json.JsonEncodedText.Encode("fail");
	private static readonly System.Text.Json.JsonEncodedText VariantFingerprint = System.Text.Json.JsonEncodedText.Encode("fingerprint");
	private static readonly System.Text.Json.JsonEncodedText VariantForeach = System.Text.Json.JsonEncodedText.Encode("foreach");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoGrid = System.Text.Json.JsonEncodedText.Encode("geo_grid");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoip = System.Text.Json.JsonEncodedText.Encode("geoip");
	private static readonly System.Text.Json.JsonEncodedText VariantGrok = System.Text.Json.JsonEncodedText.Encode("grok");
	private static readonly System.Text.Json.JsonEncodedText VariantGsub = System.Text.Json.JsonEncodedText.Encode("gsub");
	private static readonly System.Text.Json.JsonEncodedText VariantHtmlStrip = System.Text.Json.JsonEncodedText.Encode("html_strip");
	private static readonly System.Text.Json.JsonEncodedText VariantInference = System.Text.Json.JsonEncodedText.Encode("inference");
	private static readonly System.Text.Json.JsonEncodedText VariantIpLocation = System.Text.Json.JsonEncodedText.Encode("ip_location");
	private static readonly System.Text.Json.JsonEncodedText VariantJoin = System.Text.Json.JsonEncodedText.Encode("join");
	private static readonly System.Text.Json.JsonEncodedText VariantJson = System.Text.Json.JsonEncodedText.Encode("json");
	private static readonly System.Text.Json.JsonEncodedText VariantKv = System.Text.Json.JsonEncodedText.Encode("kv");
	private static readonly System.Text.Json.JsonEncodedText VariantLowercase = System.Text.Json.JsonEncodedText.Encode("lowercase");
	private static readonly System.Text.Json.JsonEncodedText VariantNetworkDirection = System.Text.Json.JsonEncodedText.Encode("network_direction");
	private static readonly System.Text.Json.JsonEncodedText VariantPipeline = System.Text.Json.JsonEncodedText.Encode("pipeline");
	private static readonly System.Text.Json.JsonEncodedText VariantRedact = System.Text.Json.JsonEncodedText.Encode("redact");
	private static readonly System.Text.Json.JsonEncodedText VariantRegisteredDomain = System.Text.Json.JsonEncodedText.Encode("registered_domain");
	private static readonly System.Text.Json.JsonEncodedText VariantRemove = System.Text.Json.JsonEncodedText.Encode("remove");
	private static readonly System.Text.Json.JsonEncodedText VariantRename = System.Text.Json.JsonEncodedText.Encode("rename");
	private static readonly System.Text.Json.JsonEncodedText VariantReroute = System.Text.Json.JsonEncodedText.Encode("reroute");
	private static readonly System.Text.Json.JsonEncodedText VariantScript = System.Text.Json.JsonEncodedText.Encode("script");
	private static readonly System.Text.Json.JsonEncodedText VariantSet = System.Text.Json.JsonEncodedText.Encode("set");
	private static readonly System.Text.Json.JsonEncodedText VariantSetSecurityUser = System.Text.Json.JsonEncodedText.Encode("set_security_user");
	private static readonly System.Text.Json.JsonEncodedText VariantSort = System.Text.Json.JsonEncodedText.Encode("sort");
	private static readonly System.Text.Json.JsonEncodedText VariantSplit = System.Text.Json.JsonEncodedText.Encode("split");
	private static readonly System.Text.Json.JsonEncodedText VariantTerminate = System.Text.Json.JsonEncodedText.Encode("terminate");
	private static readonly System.Text.Json.JsonEncodedText VariantTrim = System.Text.Json.JsonEncodedText.Encode("trim");
	private static readonly System.Text.Json.JsonEncodedText VariantUppercase = System.Text.Json.JsonEncodedText.Encode("uppercase");
	private static readonly System.Text.Json.JsonEncodedText VariantUriParts = System.Text.Json.JsonEncodedText.Encode("uri_parts");
	private static readonly System.Text.Json.JsonEncodedText VariantUrlDecode = System.Text.Json.JsonEncodedText.Encode("urldecode");
	private static readonly System.Text.Json.JsonEncodedText VariantUserAgent = System.Text.Json.JsonEncodedText.Encode("user_agent");

	public override Processor Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var variantType = string.Empty;
		object? variant = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.ValueTextEquals(VariantAppend))
			{
				variantType = VariantAppend.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.AppendProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantAttachment))
			{
				variantType = VariantAttachment.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBytes))
			{
				variantType = VariantBytes.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.BytesProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCircle))
			{
				variantType = VariantCircle.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.CircleProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCommunityId))
			{
				variantType = VariantCommunityId.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantConvert))
			{
				variantType = VariantConvert.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCsv))
			{
				variantType = VariantCsv.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.CsvProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDate))
			{
				variantType = VariantDate.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DateProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDateIndexName))
			{
				variantType = VariantDateIndexName.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDissect))
			{
				variantType = VariantDissect.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DissectProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDotExpander))
			{
				variantType = VariantDotExpander.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDrop))
			{
				variantType = VariantDrop.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DropProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantEnrich))
			{
				variantType = VariantEnrich.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantFail))
			{
				variantType = VariantFail.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.FailProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantFingerprint))
			{
				variantType = VariantFingerprint.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantForeach))
			{
				variantType = VariantForeach.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoGrid))
			{
				variantType = VariantGeoGrid.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoip))
			{
				variantType = VariantGeoip.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGrok))
			{
				variantType = VariantGrok.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.GrokProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGsub))
			{
				variantType = VariantGsub.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.GsubProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantHtmlStrip))
			{
				variantType = VariantHtmlStrip.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantInference))
			{
				variantType = VariantInference.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantIpLocation))
			{
				variantType = VariantIpLocation.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantJoin))
			{
				variantType = VariantJoin.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.JoinProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantJson))
			{
				variantType = VariantJson.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.JsonProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantKv))
			{
				variantType = VariantKv.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantLowercase))
			{
				variantType = VariantLowercase.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantNetworkDirection))
			{
				variantType = VariantNetworkDirection.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantPipeline))
			{
				variantType = VariantPipeline.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRedact))
			{
				variantType = VariantRedact.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.RedactProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRegisteredDomain))
			{
				variantType = VariantRegisteredDomain.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRemove))
			{
				variantType = VariantRemove.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRename))
			{
				variantType = VariantRename.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.RenameProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantReroute))
			{
				variantType = VariantReroute.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantScript))
			{
				variantType = VariantScript.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSet))
			{
				variantType = VariantSet.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.SetProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSetSecurityUser))
			{
				variantType = VariantSetSecurityUser.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSort))
			{
				variantType = VariantSort.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.SortProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSplit))
			{
				variantType = VariantSplit.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.SplitProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTerminate))
			{
				variantType = VariantTerminate.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTrim))
			{
				variantType = VariantTrim.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.TrimProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantUppercase))
			{
				variantType = VariantUppercase.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantUriParts))
			{
				variantType = VariantUriParts.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantUrlDecode))
			{
				variantType = VariantUrlDecode.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantUserAgent))
			{
				variantType = VariantUserAgent.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor?>(options, null);
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Processor { VariantType = variantType, Variant = variant };
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Processor value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		switch (value.VariantType)
		{
			case "":
				break;
			case "append":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.AppendProcessor?)value.Variant, null, null);
				break;
			case "attachment":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor?)value.Variant, null, null);
				break;
			case "bytes":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.BytesProcessor?)value.Variant, null, null);
				break;
			case "circle":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.CircleProcessor?)value.Variant, null, null);
				break;
			case "community_id":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor?)value.Variant, null, null);
				break;
			case "convert":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor?)value.Variant, null, null);
				break;
			case "csv":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.CsvProcessor?)value.Variant, null, null);
				break;
			case "date":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.DateProcessor?)value.Variant, null, null);
				break;
			case "date_index_name":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor?)value.Variant, null, null);
				break;
			case "dissect":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.DissectProcessor?)value.Variant, null, null);
				break;
			case "dot_expander":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor?)value.Variant, null, null);
				break;
			case "drop":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.DropProcessor?)value.Variant, null, null);
				break;
			case "enrich":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor?)value.Variant, null, null);
				break;
			case "fail":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.FailProcessor?)value.Variant, null, null);
				break;
			case "fingerprint":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor?)value.Variant, null, null);
				break;
			case "foreach":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor?)value.Variant, null, null);
				break;
			case "geo_grid":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor?)value.Variant, null, null);
				break;
			case "geoip":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor?)value.Variant, null, null);
				break;
			case "grok":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.GrokProcessor?)value.Variant, null, null);
				break;
			case "gsub":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.GsubProcessor?)value.Variant, null, null);
				break;
			case "html_strip":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor?)value.Variant, null, null);
				break;
			case "inference":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor?)value.Variant, null, null);
				break;
			case "ip_location":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor?)value.Variant, null, null);
				break;
			case "join":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.JoinProcessor?)value.Variant, null, null);
				break;
			case "json":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.JsonProcessor?)value.Variant, null, null);
				break;
			case "kv":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor?)value.Variant, null, null);
				break;
			case "lowercase":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor?)value.Variant, null, null);
				break;
			case "network_direction":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor?)value.Variant, null, null);
				break;
			case "pipeline":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor?)value.Variant, null, null);
				break;
			case "redact":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.RedactProcessor?)value.Variant, null, null);
				break;
			case "registered_domain":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor?)value.Variant, null, null);
				break;
			case "remove":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor?)value.Variant, null, null);
				break;
			case "rename":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.RenameProcessor?)value.Variant, null, null);
				break;
			case "reroute":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor?)value.Variant, null, null);
				break;
			case "script":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor?)value.Variant, null, null);
				break;
			case "set":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.SetProcessor?)value.Variant, null, null);
				break;
			case "set_security_user":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor?)value.Variant, null, null);
				break;
			case "sort":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.SortProcessor?)value.Variant, null, null);
				break;
			case "split":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.SplitProcessor?)value.Variant, null, null);
				break;
			case "terminate":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor?)value.Variant, null, null);
				break;
			case "trim":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.TrimProcessor?)value.Variant, null, null);
				break;
			case "uppercase":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor?)value.Variant, null, null);
				break;
			case "uri_parts":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor?)value.Variant, null, null);
				break;
			case "urldecode":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor?)value.Variant, null, null);
				break;
			case "user_agent":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor?)value.Variant, null, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.VariantType}' is not supported for type '{nameof(Processor)}'.");
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ProcessorDescriptor<TDocument> : SerializableDescriptor<ProcessorDescriptor<TDocument>>
{
	internal ProcessorDescriptor(Action<ProcessorDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ProcessorDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ProcessorDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ProcessorDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ProcessorDescriptor<TDocument> Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => Set(appendProcessor, "append");
	public ProcessorDescriptor<TDocument> Append(Action<Elastic.Clients.Elasticsearch.Ingest.AppendProcessorDescriptor<TDocument>> configure) => Set(configure, "append");
	public ProcessorDescriptor<TDocument> Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => Set(attachmentProcessor, "attachment");
	public ProcessorDescriptor<TDocument> Attachment(Action<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessorDescriptor<TDocument>> configure) => Set(configure, "attachment");
	public ProcessorDescriptor<TDocument> Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => Set(bytesProcessor, "bytes");
	public ProcessorDescriptor<TDocument> Bytes(Action<Elastic.Clients.Elasticsearch.Ingest.BytesProcessorDescriptor<TDocument>> configure) => Set(configure, "bytes");
	public ProcessorDescriptor<TDocument> Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => Set(circleProcessor, "circle");
	public ProcessorDescriptor<TDocument> Circle(Action<Elastic.Clients.Elasticsearch.Ingest.CircleProcessorDescriptor<TDocument>> configure) => Set(configure, "circle");
	public ProcessorDescriptor<TDocument> CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => Set(communityIDProcessor, "community_id");
	public ProcessorDescriptor<TDocument> CommunityId(Action<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessorDescriptor<TDocument>> configure) => Set(configure, "community_id");
	public ProcessorDescriptor<TDocument> Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => Set(convertProcessor, "convert");
	public ProcessorDescriptor<TDocument> Convert(Action<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessorDescriptor<TDocument>> configure) => Set(configure, "convert");
	public ProcessorDescriptor<TDocument> Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => Set(csvProcessor, "csv");
	public ProcessorDescriptor<TDocument> Csv(Action<Elastic.Clients.Elasticsearch.Ingest.CsvProcessorDescriptor<TDocument>> configure) => Set(configure, "csv");
	public ProcessorDescriptor<TDocument> Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => Set(dateProcessor, "date");
	public ProcessorDescriptor<TDocument> Date(Action<Elastic.Clients.Elasticsearch.Ingest.DateProcessorDescriptor<TDocument>> configure) => Set(configure, "date");
	public ProcessorDescriptor<TDocument> DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => Set(dateIndexNameProcessor, "date_index_name");
	public ProcessorDescriptor<TDocument> DateIndexName(Action<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessorDescriptor<TDocument>> configure) => Set(configure, "date_index_name");
	public ProcessorDescriptor<TDocument> Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => Set(dissectProcessor, "dissect");
	public ProcessorDescriptor<TDocument> Dissect(Action<Elastic.Clients.Elasticsearch.Ingest.DissectProcessorDescriptor<TDocument>> configure) => Set(configure, "dissect");
	public ProcessorDescriptor<TDocument> DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => Set(dotExpanderProcessor, "dot_expander");
	public ProcessorDescriptor<TDocument> DotExpander(Action<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessorDescriptor<TDocument>> configure) => Set(configure, "dot_expander");
	public ProcessorDescriptor<TDocument> Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => Set(dropProcessor, "drop");
	public ProcessorDescriptor<TDocument> Drop(Action<Elastic.Clients.Elasticsearch.Ingest.DropProcessorDescriptor<TDocument>> configure) => Set(configure, "drop");
	public ProcessorDescriptor<TDocument> Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => Set(enrichProcessor, "enrich");
	public ProcessorDescriptor<TDocument> Enrich(Action<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessorDescriptor<TDocument>> configure) => Set(configure, "enrich");
	public ProcessorDescriptor<TDocument> Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => Set(failProcessor, "fail");
	public ProcessorDescriptor<TDocument> Fail(Action<Elastic.Clients.Elasticsearch.Ingest.FailProcessorDescriptor<TDocument>> configure) => Set(configure, "fail");
	public ProcessorDescriptor<TDocument> Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => Set(fingerprintProcessor, "fingerprint");
	public ProcessorDescriptor<TDocument> Fingerprint(Action<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessorDescriptor<TDocument>> configure) => Set(configure, "fingerprint");
	public ProcessorDescriptor<TDocument> Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => Set(foreachProcessor, "foreach");
	public ProcessorDescriptor<TDocument> Foreach(Action<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessorDescriptor<TDocument>> configure) => Set(configure, "foreach");
	public ProcessorDescriptor<TDocument> GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => Set(geoGridProcessor, "geo_grid");
	public ProcessorDescriptor<TDocument> GeoGrid(Action<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessorDescriptor<TDocument>> configure) => Set(configure, "geo_grid");
	public ProcessorDescriptor<TDocument> Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => Set(geoIpProcessor, "geoip");
	public ProcessorDescriptor<TDocument> Geoip(Action<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessorDescriptor<TDocument>> configure) => Set(configure, "geoip");
	public ProcessorDescriptor<TDocument> Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => Set(grokProcessor, "grok");
	public ProcessorDescriptor<TDocument> Grok(Action<Elastic.Clients.Elasticsearch.Ingest.GrokProcessorDescriptor<TDocument>> configure) => Set(configure, "grok");
	public ProcessorDescriptor<TDocument> Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => Set(gsubProcessor, "gsub");
	public ProcessorDescriptor<TDocument> Gsub(Action<Elastic.Clients.Elasticsearch.Ingest.GsubProcessorDescriptor<TDocument>> configure) => Set(configure, "gsub");
	public ProcessorDescriptor<TDocument> HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => Set(htmlStripProcessor, "html_strip");
	public ProcessorDescriptor<TDocument> HtmlStrip(Action<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessorDescriptor<TDocument>> configure) => Set(configure, "html_strip");
	public ProcessorDescriptor<TDocument> Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => Set(inferenceProcessor, "inference");
	public ProcessorDescriptor<TDocument> Inference(Action<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessorDescriptor<TDocument>> configure) => Set(configure, "inference");
	public ProcessorDescriptor<TDocument> IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => Set(ipLocationProcessor, "ip_location");
	public ProcessorDescriptor<TDocument> IpLocation(Action<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessorDescriptor<TDocument>> configure) => Set(configure, "ip_location");
	public ProcessorDescriptor<TDocument> Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => Set(joinProcessor, "join");
	public ProcessorDescriptor<TDocument> Join(Action<Elastic.Clients.Elasticsearch.Ingest.JoinProcessorDescriptor<TDocument>> configure) => Set(configure, "join");
	public ProcessorDescriptor<TDocument> Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => Set(jsonProcessor, "json");
	public ProcessorDescriptor<TDocument> Json(Action<Elastic.Clients.Elasticsearch.Ingest.JsonProcessorDescriptor<TDocument>> configure) => Set(configure, "json");
	public ProcessorDescriptor<TDocument> Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => Set(keyValueProcessor, "kv");
	public ProcessorDescriptor<TDocument> Kv(Action<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessorDescriptor<TDocument>> configure) => Set(configure, "kv");
	public ProcessorDescriptor<TDocument> Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => Set(lowercaseProcessor, "lowercase");
	public ProcessorDescriptor<TDocument> Lowercase(Action<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessorDescriptor<TDocument>> configure) => Set(configure, "lowercase");
	public ProcessorDescriptor<TDocument> NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => Set(networkDirectionProcessor, "network_direction");
	public ProcessorDescriptor<TDocument> NetworkDirection(Action<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessorDescriptor<TDocument>> configure) => Set(configure, "network_direction");
	public ProcessorDescriptor<TDocument> Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => Set(pipelineProcessor, "pipeline");
	public ProcessorDescriptor<TDocument> Pipeline(Action<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessorDescriptor<TDocument>> configure) => Set(configure, "pipeline");
	public ProcessorDescriptor<TDocument> Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => Set(redactProcessor, "redact");
	public ProcessorDescriptor<TDocument> Redact(Action<Elastic.Clients.Elasticsearch.Ingest.RedactProcessorDescriptor<TDocument>> configure) => Set(configure, "redact");
	public ProcessorDescriptor<TDocument> RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => Set(registeredDomainProcessor, "registered_domain");
	public ProcessorDescriptor<TDocument> RegisteredDomain(Action<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessorDescriptor<TDocument>> configure) => Set(configure, "registered_domain");
	public ProcessorDescriptor<TDocument> Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => Set(removeProcessor, "remove");
	public ProcessorDescriptor<TDocument> Remove(Action<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessorDescriptor<TDocument>> configure) => Set(configure, "remove");
	public ProcessorDescriptor<TDocument> Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => Set(renameProcessor, "rename");
	public ProcessorDescriptor<TDocument> Rename(Action<Elastic.Clients.Elasticsearch.Ingest.RenameProcessorDescriptor<TDocument>> configure) => Set(configure, "rename");
	public ProcessorDescriptor<TDocument> Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => Set(rerouteProcessor, "reroute");
	public ProcessorDescriptor<TDocument> Reroute(Action<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessorDescriptor<TDocument>> configure) => Set(configure, "reroute");
	public ProcessorDescriptor<TDocument> Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => Set(scriptProcessor, "script");
	public ProcessorDescriptor<TDocument> Script(Action<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessorDescriptor<TDocument>> configure) => Set(configure, "script");
	public ProcessorDescriptor<TDocument> Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => Set(setProcessor, "set");
	public ProcessorDescriptor<TDocument> Set(Action<Elastic.Clients.Elasticsearch.Ingest.SetProcessorDescriptor<TDocument>> configure) => Set(configure, "set");
	public ProcessorDescriptor<TDocument> SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => Set(setSecurityUserProcessor, "set_security_user");
	public ProcessorDescriptor<TDocument> SetSecurityUser(Action<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessorDescriptor<TDocument>> configure) => Set(configure, "set_security_user");
	public ProcessorDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => Set(sortProcessor, "sort");
	public ProcessorDescriptor<TDocument> Sort(Action<Elastic.Clients.Elasticsearch.Ingest.SortProcessorDescriptor<TDocument>> configure) => Set(configure, "sort");
	public ProcessorDescriptor<TDocument> Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => Set(splitProcessor, "split");
	public ProcessorDescriptor<TDocument> Split(Action<Elastic.Clients.Elasticsearch.Ingest.SplitProcessorDescriptor<TDocument>> configure) => Set(configure, "split");
	public ProcessorDescriptor<TDocument> Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => Set(terminateProcessor, "terminate");
	public ProcessorDescriptor<TDocument> Terminate(Action<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessorDescriptor<TDocument>> configure) => Set(configure, "terminate");
	public ProcessorDescriptor<TDocument> Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => Set(trimProcessor, "trim");
	public ProcessorDescriptor<TDocument> Trim(Action<Elastic.Clients.Elasticsearch.Ingest.TrimProcessorDescriptor<TDocument>> configure) => Set(configure, "trim");
	public ProcessorDescriptor<TDocument> Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => Set(uppercaseProcessor, "uppercase");
	public ProcessorDescriptor<TDocument> Uppercase(Action<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessorDescriptor<TDocument>> configure) => Set(configure, "uppercase");
	public ProcessorDescriptor<TDocument> UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => Set(uriPartsProcessor, "uri_parts");
	public ProcessorDescriptor<TDocument> UriParts(Action<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessorDescriptor<TDocument>> configure) => Set(configure, "uri_parts");
	public ProcessorDescriptor<TDocument> UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => Set(urlDecodeProcessor, "urldecode");
	public ProcessorDescriptor<TDocument> UrlDecode(Action<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessorDescriptor<TDocument>> configure) => Set(configure, "urldecode");
	public ProcessorDescriptor<TDocument> UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => Set(userAgentProcessor, "user_agent");
	public ProcessorDescriptor<TDocument> UserAgent(Action<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessorDescriptor<TDocument>> configure) => Set(configure, "user_agent");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ProcessorDescriptor : SerializableDescriptor<ProcessorDescriptor>
{
	internal ProcessorDescriptor(Action<ProcessorDescriptor> configure) => configure.Invoke(this);

	public ProcessorDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ProcessorDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ProcessorDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ProcessorDescriptor Append(Elastic.Clients.Elasticsearch.Ingest.AppendProcessor appendProcessor) => Set(appendProcessor, "append");
	public ProcessorDescriptor Append<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.AppendProcessorDescriptor> configure) => Set(configure, "append");
	public ProcessorDescriptor Attachment(Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessor attachmentProcessor) => Set(attachmentProcessor, "attachment");
	public ProcessorDescriptor Attachment<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.AttachmentProcessorDescriptor> configure) => Set(configure, "attachment");
	public ProcessorDescriptor Bytes(Elastic.Clients.Elasticsearch.Ingest.BytesProcessor bytesProcessor) => Set(bytesProcessor, "bytes");
	public ProcessorDescriptor Bytes<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.BytesProcessorDescriptor> configure) => Set(configure, "bytes");
	public ProcessorDescriptor Circle(Elastic.Clients.Elasticsearch.Ingest.CircleProcessor circleProcessor) => Set(circleProcessor, "circle");
	public ProcessorDescriptor Circle<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CircleProcessorDescriptor> configure) => Set(configure, "circle");
	public ProcessorDescriptor CommunityId(Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessor communityIDProcessor) => Set(communityIDProcessor, "community_id");
	public ProcessorDescriptor CommunityId<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CommunityIDProcessorDescriptor> configure) => Set(configure, "community_id");
	public ProcessorDescriptor Convert(Elastic.Clients.Elasticsearch.Ingest.ConvertProcessor convertProcessor) => Set(convertProcessor, "convert");
	public ProcessorDescriptor Convert<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ConvertProcessorDescriptor> configure) => Set(configure, "convert");
	public ProcessorDescriptor Csv(Elastic.Clients.Elasticsearch.Ingest.CsvProcessor csvProcessor) => Set(csvProcessor, "csv");
	public ProcessorDescriptor Csv<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.CsvProcessorDescriptor> configure) => Set(configure, "csv");
	public ProcessorDescriptor Date(Elastic.Clients.Elasticsearch.Ingest.DateProcessor dateProcessor) => Set(dateProcessor, "date");
	public ProcessorDescriptor Date<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DateProcessorDescriptor> configure) => Set(configure, "date");
	public ProcessorDescriptor DateIndexName(Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessor dateIndexNameProcessor) => Set(dateIndexNameProcessor, "date_index_name");
	public ProcessorDescriptor DateIndexName<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DateIndexNameProcessorDescriptor> configure) => Set(configure, "date_index_name");
	public ProcessorDescriptor Dissect(Elastic.Clients.Elasticsearch.Ingest.DissectProcessor dissectProcessor) => Set(dissectProcessor, "dissect");
	public ProcessorDescriptor Dissect<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DissectProcessorDescriptor> configure) => Set(configure, "dissect");
	public ProcessorDescriptor DotExpander(Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessor dotExpanderProcessor) => Set(dotExpanderProcessor, "dot_expander");
	public ProcessorDescriptor DotExpander<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DotExpanderProcessorDescriptor> configure) => Set(configure, "dot_expander");
	public ProcessorDescriptor Drop(Elastic.Clients.Elasticsearch.Ingest.DropProcessor dropProcessor) => Set(dropProcessor, "drop");
	public ProcessorDescriptor Drop<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.DropProcessorDescriptor> configure) => Set(configure, "drop");
	public ProcessorDescriptor Enrich(Elastic.Clients.Elasticsearch.Ingest.EnrichProcessor enrichProcessor) => Set(enrichProcessor, "enrich");
	public ProcessorDescriptor Enrich<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.EnrichProcessorDescriptor> configure) => Set(configure, "enrich");
	public ProcessorDescriptor Fail(Elastic.Clients.Elasticsearch.Ingest.FailProcessor failProcessor) => Set(failProcessor, "fail");
	public ProcessorDescriptor Fail<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.FailProcessorDescriptor> configure) => Set(configure, "fail");
	public ProcessorDescriptor Fingerprint(Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessor fingerprintProcessor) => Set(fingerprintProcessor, "fingerprint");
	public ProcessorDescriptor Fingerprint<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.FingerprintProcessorDescriptor> configure) => Set(configure, "fingerprint");
	public ProcessorDescriptor Foreach(Elastic.Clients.Elasticsearch.Ingest.ForeachProcessor foreachProcessor) => Set(foreachProcessor, "foreach");
	public ProcessorDescriptor Foreach<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ForeachProcessorDescriptor> configure) => Set(configure, "foreach");
	public ProcessorDescriptor GeoGrid(Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessor geoGridProcessor) => Set(geoGridProcessor, "geo_grid");
	public ProcessorDescriptor GeoGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GeoGridProcessorDescriptor> configure) => Set(configure, "geo_grid");
	public ProcessorDescriptor Geoip(Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessor geoIpProcessor) => Set(geoIpProcessor, "geoip");
	public ProcessorDescriptor Geoip<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GeoIpProcessorDescriptor> configure) => Set(configure, "geoip");
	public ProcessorDescriptor Grok(Elastic.Clients.Elasticsearch.Ingest.GrokProcessor grokProcessor) => Set(grokProcessor, "grok");
	public ProcessorDescriptor Grok<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GrokProcessorDescriptor> configure) => Set(configure, "grok");
	public ProcessorDescriptor Gsub(Elastic.Clients.Elasticsearch.Ingest.GsubProcessor gsubProcessor) => Set(gsubProcessor, "gsub");
	public ProcessorDescriptor Gsub<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.GsubProcessorDescriptor> configure) => Set(configure, "gsub");
	public ProcessorDescriptor HtmlStrip(Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessor htmlStripProcessor) => Set(htmlStripProcessor, "html_strip");
	public ProcessorDescriptor HtmlStrip<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.HtmlStripProcessorDescriptor> configure) => Set(configure, "html_strip");
	public ProcessorDescriptor Inference(Elastic.Clients.Elasticsearch.Ingest.InferenceProcessor inferenceProcessor) => Set(inferenceProcessor, "inference");
	public ProcessorDescriptor Inference<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.InferenceProcessorDescriptor> configure) => Set(configure, "inference");
	public ProcessorDescriptor IpLocation(Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessor ipLocationProcessor) => Set(ipLocationProcessor, "ip_location");
	public ProcessorDescriptor IpLocation<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.IpLocationProcessorDescriptor> configure) => Set(configure, "ip_location");
	public ProcessorDescriptor Join(Elastic.Clients.Elasticsearch.Ingest.JoinProcessor joinProcessor) => Set(joinProcessor, "join");
	public ProcessorDescriptor Join<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.JoinProcessorDescriptor> configure) => Set(configure, "join");
	public ProcessorDescriptor Json(Elastic.Clients.Elasticsearch.Ingest.JsonProcessor jsonProcessor) => Set(jsonProcessor, "json");
	public ProcessorDescriptor Json<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.JsonProcessorDescriptor> configure) => Set(configure, "json");
	public ProcessorDescriptor Kv(Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessor keyValueProcessor) => Set(keyValueProcessor, "kv");
	public ProcessorDescriptor Kv<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.KeyValueProcessorDescriptor> configure) => Set(configure, "kv");
	public ProcessorDescriptor Lowercase(Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessor lowercaseProcessor) => Set(lowercaseProcessor, "lowercase");
	public ProcessorDescriptor Lowercase<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.LowercaseProcessorDescriptor> configure) => Set(configure, "lowercase");
	public ProcessorDescriptor NetworkDirection(Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessor networkDirectionProcessor) => Set(networkDirectionProcessor, "network_direction");
	public ProcessorDescriptor NetworkDirection<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.NetworkDirectionProcessorDescriptor> configure) => Set(configure, "network_direction");
	public ProcessorDescriptor Pipeline(Elastic.Clients.Elasticsearch.Ingest.PipelineProcessor pipelineProcessor) => Set(pipelineProcessor, "pipeline");
	public ProcessorDescriptor Pipeline<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.PipelineProcessorDescriptor> configure) => Set(configure, "pipeline");
	public ProcessorDescriptor Redact(Elastic.Clients.Elasticsearch.Ingest.RedactProcessor redactProcessor) => Set(redactProcessor, "redact");
	public ProcessorDescriptor Redact<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RedactProcessorDescriptor> configure) => Set(configure, "redact");
	public ProcessorDescriptor RegisteredDomain(Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessor registeredDomainProcessor) => Set(registeredDomainProcessor, "registered_domain");
	public ProcessorDescriptor RegisteredDomain<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RegisteredDomainProcessorDescriptor> configure) => Set(configure, "registered_domain");
	public ProcessorDescriptor Remove(Elastic.Clients.Elasticsearch.Ingest.RemoveProcessor removeProcessor) => Set(removeProcessor, "remove");
	public ProcessorDescriptor Remove<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RemoveProcessorDescriptor> configure) => Set(configure, "remove");
	public ProcessorDescriptor Rename(Elastic.Clients.Elasticsearch.Ingest.RenameProcessor renameProcessor) => Set(renameProcessor, "rename");
	public ProcessorDescriptor Rename<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RenameProcessorDescriptor> configure) => Set(configure, "rename");
	public ProcessorDescriptor Reroute(Elastic.Clients.Elasticsearch.Ingest.RerouteProcessor rerouteProcessor) => Set(rerouteProcessor, "reroute");
	public ProcessorDescriptor Reroute<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.RerouteProcessorDescriptor> configure) => Set(configure, "reroute");
	public ProcessorDescriptor Script(Elastic.Clients.Elasticsearch.Ingest.ScriptProcessor scriptProcessor) => Set(scriptProcessor, "script");
	public ProcessorDescriptor Script<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.ScriptProcessorDescriptor> configure) => Set(configure, "script");
	public ProcessorDescriptor Set(Elastic.Clients.Elasticsearch.Ingest.SetProcessor setProcessor) => Set(setProcessor, "set");
	public ProcessorDescriptor Set<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SetProcessorDescriptor> configure) => Set(configure, "set");
	public ProcessorDescriptor SetSecurityUser(Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessor setSecurityUserProcessor) => Set(setSecurityUserProcessor, "set_security_user");
	public ProcessorDescriptor SetSecurityUser<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SetSecurityUserProcessorDescriptor> configure) => Set(configure, "set_security_user");
	public ProcessorDescriptor Sort(Elastic.Clients.Elasticsearch.Ingest.SortProcessor sortProcessor) => Set(sortProcessor, "sort");
	public ProcessorDescriptor Sort<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SortProcessorDescriptor> configure) => Set(configure, "sort");
	public ProcessorDescriptor Split(Elastic.Clients.Elasticsearch.Ingest.SplitProcessor splitProcessor) => Set(splitProcessor, "split");
	public ProcessorDescriptor Split<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.SplitProcessorDescriptor> configure) => Set(configure, "split");
	public ProcessorDescriptor Terminate(Elastic.Clients.Elasticsearch.Ingest.TerminateProcessor terminateProcessor) => Set(terminateProcessor, "terminate");
	public ProcessorDescriptor Terminate<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.TerminateProcessorDescriptor> configure) => Set(configure, "terminate");
	public ProcessorDescriptor Trim(Elastic.Clients.Elasticsearch.Ingest.TrimProcessor trimProcessor) => Set(trimProcessor, "trim");
	public ProcessorDescriptor Trim<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.TrimProcessorDescriptor> configure) => Set(configure, "trim");
	public ProcessorDescriptor Uppercase(Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessor uppercaseProcessor) => Set(uppercaseProcessor, "uppercase");
	public ProcessorDescriptor Uppercase<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UppercaseProcessorDescriptor> configure) => Set(configure, "uppercase");
	public ProcessorDescriptor UriParts(Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessor uriPartsProcessor) => Set(uriPartsProcessor, "uri_parts");
	public ProcessorDescriptor UriParts<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UriPartsProcessorDescriptor> configure) => Set(configure, "uri_parts");
	public ProcessorDescriptor UrlDecode(Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessor urlDecodeProcessor) => Set(urlDecodeProcessor, "urldecode");
	public ProcessorDescriptor UrlDecode<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UrlDecodeProcessorDescriptor> configure) => Set(configure, "urldecode");
	public ProcessorDescriptor UserAgent(Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessor userAgentProcessor) => Set(userAgentProcessor, "user_agent");
	public ProcessorDescriptor UserAgent<TDocument>(Action<Elastic.Clients.Elasticsearch.Ingest.UserAgentProcessorDescriptor> configure) => Set(configure, "user_agent");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}