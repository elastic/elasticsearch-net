// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class MistralServiceSettings
{
	/// <summary>
	/// <para>
	/// A valid API key of your Mistral account.
	/// You can find your Mistral API keys or you can create a new one on the API Keys page.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("api_key")]
	public string ApiKey { get; set; }

	/// <summary>
	/// <para>
	/// The maximum number of tokens per input before chunking occurs.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_input_tokens")]
	public int? MaxInputTokens { get; set; }

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the Mistral models documentation for the list of available text embedding models.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model")]
	public string Model { get; set; }

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from the Mistral API.
	/// By default, the <c>mistral</c> service sets the number of requests allowed per minute to 240.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rate_limit")]
	public Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimit { get; set; }
}

public sealed partial class MistralServiceSettingsDescriptor : SerializableDescriptor<MistralServiceSettingsDescriptor>
{
	internal MistralServiceSettingsDescriptor(Action<MistralServiceSettingsDescriptor> configure) => configure.Invoke(this);

	public MistralServiceSettingsDescriptor() : base()
	{
	}

	private string ApiKeyValue { get; set; }
	private int? MaxInputTokensValue { get; set; }
	private string ModelValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimitValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor RateLimitDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> RateLimitDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// A valid API key of your Mistral account.
	/// You can find your Mistral API keys or you can create a new one on the API Keys page.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	public MistralServiceSettingsDescriptor ApiKey(string apiKey)
	{
		ApiKeyValue = apiKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The maximum number of tokens per input before chunking occurs.
	/// </para>
	/// </summary>
	public MistralServiceSettingsDescriptor MaxInputTokens(int? maxInputTokens)
	{
		MaxInputTokensValue = maxInputTokens;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the Mistral models documentation for the list of available text embedding models.
	/// </para>
	/// </summary>
	public MistralServiceSettingsDescriptor Model(string model)
	{
		ModelValue = model;
		return Self;
	}

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from the Mistral API.
	/// By default, the <c>mistral</c> service sets the number of requests allowed per minute to 240.
	/// </para>
	/// </summary>
	public MistralServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? rateLimit)
	{
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = null;
		RateLimitValue = rateLimit;
		return Self;
	}

	public MistralServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor descriptor)
	{
		RateLimitValue = null;
		RateLimitDescriptorAction = null;
		RateLimitDescriptor = descriptor;
		return Self;
	}

	public MistralServiceSettingsDescriptor RateLimit(Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> configure)
	{
		RateLimitValue = null;
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("api_key");
		writer.WriteStringValue(ApiKeyValue);
		if (MaxInputTokensValue.HasValue)
		{
			writer.WritePropertyName("max_input_tokens");
			writer.WriteNumberValue(MaxInputTokensValue.Value);
		}

		writer.WritePropertyName("model");
		writer.WriteStringValue(ModelValue);
		if (RateLimitDescriptor is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitDescriptor, options);
		}
		else if (RateLimitDescriptorAction is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor(RateLimitDescriptorAction), options);
		}
		else if (RateLimitValue is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitValue, options);
		}

		writer.WriteEndObject();
	}
}