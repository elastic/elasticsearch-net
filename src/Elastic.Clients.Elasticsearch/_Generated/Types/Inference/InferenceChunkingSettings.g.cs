// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

/// <summary>
/// <para>
/// Chunking configuration object
/// </para>
/// </summary>
public sealed partial class InferenceChunkingSettings
{
	/// <summary>
	/// <para>
	/// The maximum size of a chunk in words.
	/// This value cannot be higher than <c>300</c> or lower than <c>20</c> (for <c>sentence</c> strategy) or <c>10</c> (for <c>word</c> strategy).
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_chunk_size")]
	public int? MaxChunkSize { get; set; }

	/// <summary>
	/// <para>
	/// The number of overlapping words for chunks.
	/// It is applicable only to a <c>word</c> chunking strategy.
	/// This value cannot be higher than half the <c>max_chunk_size</c> value.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("overlap")]
	public int? Overlap { get; set; }

	/// <summary>
	/// <para>
	/// The number of overlapping sentences for chunks.
	/// It is applicable only for a <c>sentence</c> chunking strategy.
	/// It can be either <c>1</c> or <c>0</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("sentence_overlap")]
	public int? SentenceOverlap { get; set; }

	/// <summary>
	/// <para>
	/// The chunking strategy: <c>sentence</c> or <c>word</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("strategy")]
	public string? Strategy { get; set; }
}

/// <summary>
/// <para>
/// Chunking configuration object
/// </para>
/// </summary>
public sealed partial class InferenceChunkingSettingsDescriptor : SerializableDescriptor<InferenceChunkingSettingsDescriptor>
{
	internal InferenceChunkingSettingsDescriptor(Action<InferenceChunkingSettingsDescriptor> configure) => configure.Invoke(this);

	public InferenceChunkingSettingsDescriptor() : base()
	{
	}

	private int? MaxChunkSizeValue { get; set; }
	private int? OverlapValue { get; set; }
	private int? SentenceOverlapValue { get; set; }
	private string? StrategyValue { get; set; }

	/// <summary>
	/// <para>
	/// The maximum size of a chunk in words.
	/// This value cannot be higher than <c>300</c> or lower than <c>20</c> (for <c>sentence</c> strategy) or <c>10</c> (for <c>word</c> strategy).
	/// </para>
	/// </summary>
	public InferenceChunkingSettingsDescriptor MaxChunkSize(int? maxChunkSize)
	{
		MaxChunkSizeValue = maxChunkSize;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of overlapping words for chunks.
	/// It is applicable only to a <c>word</c> chunking strategy.
	/// This value cannot be higher than half the <c>max_chunk_size</c> value.
	/// </para>
	/// </summary>
	public InferenceChunkingSettingsDescriptor Overlap(int? overlap)
	{
		OverlapValue = overlap;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of overlapping sentences for chunks.
	/// It is applicable only for a <c>sentence</c> chunking strategy.
	/// It can be either <c>1</c> or <c>0</c>.
	/// </para>
	/// </summary>
	public InferenceChunkingSettingsDescriptor SentenceOverlap(int? sentenceOverlap)
	{
		SentenceOverlapValue = sentenceOverlap;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The chunking strategy: <c>sentence</c> or <c>word</c>.
	/// </para>
	/// </summary>
	public InferenceChunkingSettingsDescriptor Strategy(string? strategy)
	{
		StrategyValue = strategy;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MaxChunkSizeValue.HasValue)
		{
			writer.WritePropertyName("max_chunk_size");
			writer.WriteNumberValue(MaxChunkSizeValue.Value);
		}

		if (OverlapValue.HasValue)
		{
			writer.WritePropertyName("overlap");
			writer.WriteNumberValue(OverlapValue.Value);
		}

		if (SentenceOverlapValue.HasValue)
		{
			writer.WritePropertyName("sentence_overlap");
			writer.WriteNumberValue(SentenceOverlapValue.Value);
		}

		if (!string.IsNullOrEmpty(StrategyValue))
		{
			writer.WritePropertyName("strategy");
			writer.WriteStringValue(StrategyValue);
		}

		writer.WriteEndObject();
	}
}