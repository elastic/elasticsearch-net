// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class GoogleVertexAIServiceSettings
{
	/// <summary>
	/// <para>
	/// The name of the location to use for the inference task.
	/// Refer to the Google documentation for the list of supported locations.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("location")]
	public string Location { get; set; }

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the Google documentation for the list of supported models.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model_id")]
	public string ModelId { get; set; }

	/// <summary>
	/// <para>
	/// The name of the project to use for the inference task.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("project_id")]
	public string ProjectId { get; set; }

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Google Vertex AI.
	/// By default, the <c>googlevertexai</c> service sets the number of requests allowed per minute to 30.000.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rate_limit")]
	public Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimit { get; set; }

	/// <summary>
	/// <para>
	/// A valid service account in JSON format for the Google Vertex AI API.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service_account_json")]
	public string ServiceAccountJson { get; set; }
}

public sealed partial class GoogleVertexAIServiceSettingsDescriptor : SerializableDescriptor<GoogleVertexAIServiceSettingsDescriptor>
{
	internal GoogleVertexAIServiceSettingsDescriptor(Action<GoogleVertexAIServiceSettingsDescriptor> configure) => configure.Invoke(this);

	public GoogleVertexAIServiceSettingsDescriptor() : base()
	{
	}

	private string LocationValue { get; set; }
	private string ModelIdValue { get; set; }
	private string ProjectIdValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimitValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor RateLimitDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> RateLimitDescriptorAction { get; set; }
	private string ServiceAccountJsonValue { get; set; }

	/// <summary>
	/// <para>
	/// The name of the location to use for the inference task.
	/// Refer to the Google documentation for the list of supported locations.
	/// </para>
	/// </summary>
	public GoogleVertexAIServiceSettingsDescriptor Location(string location)
	{
		LocationValue = location;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the Google documentation for the list of supported models.
	/// </para>
	/// </summary>
	public GoogleVertexAIServiceSettingsDescriptor ModelId(string modelId)
	{
		ModelIdValue = modelId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the project to use for the inference task.
	/// </para>
	/// </summary>
	public GoogleVertexAIServiceSettingsDescriptor ProjectId(string projectId)
	{
		ProjectIdValue = projectId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Google Vertex AI.
	/// By default, the <c>googlevertexai</c> service sets the number of requests allowed per minute to 30.000.
	/// </para>
	/// </summary>
	public GoogleVertexAIServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? rateLimit)
	{
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = null;
		RateLimitValue = rateLimit;
		return Self;
	}

	public GoogleVertexAIServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor descriptor)
	{
		RateLimitValue = null;
		RateLimitDescriptorAction = null;
		RateLimitDescriptor = descriptor;
		return Self;
	}

	public GoogleVertexAIServiceSettingsDescriptor RateLimit(Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> configure)
	{
		RateLimitValue = null;
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A valid service account in JSON format for the Google Vertex AI API.
	/// </para>
	/// </summary>
	public GoogleVertexAIServiceSettingsDescriptor ServiceAccountJson(string serviceAccountJson)
	{
		ServiceAccountJsonValue = serviceAccountJson;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("location");
		writer.WriteStringValue(LocationValue);
		writer.WritePropertyName("model_id");
		writer.WriteStringValue(ModelIdValue);
		writer.WritePropertyName("project_id");
		writer.WriteStringValue(ProjectIdValue);
		if (RateLimitDescriptor is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitDescriptor, options);
		}
		else if (RateLimitDescriptorAction is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor(RateLimitDescriptorAction), options);
		}
		else if (RateLimitValue is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitValue, options);
		}

		writer.WritePropertyName("service_account_json");
		writer.WriteStringValue(ServiceAccountJsonValue);
		writer.WriteEndObject();
	}
}