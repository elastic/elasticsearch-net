// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

internal sealed partial class RequestChatCompletionConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion>
{
	private static readonly System.Text.Json.JsonEncodedText PropMaxCompletionTokens = System.Text.Json.JsonEncodedText.Encode("max_completion_tokens");
	private static readonly System.Text.Json.JsonEncodedText PropMessages = System.Text.Json.JsonEncodedText.Encode("messages");
	private static readonly System.Text.Json.JsonEncodedText PropModel = System.Text.Json.JsonEncodedText.Encode("model");
	private static readonly System.Text.Json.JsonEncodedText PropStop = System.Text.Json.JsonEncodedText.Encode("stop");
	private static readonly System.Text.Json.JsonEncodedText PropTemperature = System.Text.Json.JsonEncodedText.Encode("temperature");
	private static readonly System.Text.Json.JsonEncodedText PropToolChoice = System.Text.Json.JsonEncodedText.Encode("tool_choice");
	private static readonly System.Text.Json.JsonEncodedText PropTools = System.Text.Json.JsonEncodedText.Encode("tools");
	private static readonly System.Text.Json.JsonEncodedText PropTopP = System.Text.Json.JsonEncodedText.Encode("top_p");

	public override Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<long?> propMaxCompletionTokens = default;
		LocalJsonValue<System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message>> propMessages = default;
		LocalJsonValue<string?> propModel = default;
		LocalJsonValue<System.Collections.Generic.ICollection<string>?> propStop = default;
		LocalJsonValue<float?> propTemperature = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Union<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>?> propToolChoice = default;
		LocalJsonValue<System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.CompletionTool>?> propTools = default;
		LocalJsonValue<float?> propTopP = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propMaxCompletionTokens.TryReadProperty(ref reader, options, PropMaxCompletionTokens, null))
			{
				continue;
			}

			if (propMessages.TryReadProperty(ref reader, options, PropMessages, static System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message> (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Inference.Message>(o, null)!))
			{
				continue;
			}

			if (propModel.TryReadProperty(ref reader, options, PropModel, null))
			{
				continue;
			}

			if (propStop.TryReadProperty(ref reader, options, PropStop, static System.Collections.Generic.ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propTemperature.TryReadProperty(ref reader, options, PropTemperature, null))
			{
				continue;
			}

			if (propToolChoice.TryReadProperty(ref reader, options, PropToolChoice, static Elastic.Clients.Elasticsearch.Union<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadUnionValue<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>(o, static (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => JsonUnionSelector.ByTokenType(ref r, o, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.String, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.StartObject), null, null)))
			{
				continue;
			}

			if (propTools.TryReadProperty(ref reader, options, PropTools, static System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.CompletionTool>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Inference.CompletionTool>(o, null)))
			{
				continue;
			}

			if (propTopP.TryReadProperty(ref reader, options, PropTopP, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			MaxCompletionTokens = propMaxCompletionTokens.Value,
			Messages = propMessages.Value,
			Model = propModel.Value,
			Stop = propStop.Value,
			Temperature = propTemperature.Value,
			ToolChoice = propToolChoice.Value,
			Tools = propTools.Value,
			TopP = propTopP.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropMaxCompletionTokens, value.MaxCompletionTokens, null, null);
		writer.WriteProperty(options, PropMessages, value.Messages, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message> v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Inference.Message>(o, v, null));
		writer.WriteProperty(options, PropModel, value.Model, null, null);
		writer.WriteProperty(options, PropStop, value.Stop, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.Collections.Generic.ICollection<string>? v) => w.WriteCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropTemperature, value.Temperature, null, null);
		writer.WriteProperty(options, PropToolChoice, value.ToolChoice, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Union<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>? v) => w.WriteUnionValue<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>(o, v, null, null));
		writer.WriteProperty(options, PropTools, value.Tools, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.CompletionTool>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Inference.CompletionTool>(o, v, null));
		writer.WriteProperty(options, PropTopP, value.TopP, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionConverter))]
public sealed partial class RequestChatCompletion
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public RequestChatCompletion(System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message> messages)
	{
		Messages = messages;
	}
#if NET7_0_OR_GREATER
	public RequestChatCompletion()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public RequestChatCompletion()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal RequestChatCompletion(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// The upper bound limit for the number of tokens that can be generated for a completion request.
	/// </para>
	/// </summary>
	public long? MaxCompletionTokens { get; set; }

	/// <summary>
	/// <para>
	/// A list of objects representing the conversation.
	/// Requests should generally only add new messages from the user (role <c>user</c>).
	/// The other message roles (<c>assistant</c>, <c>system</c>, or <c>tool</c>) should generally only be copied from the response to a previous completion request, such that the messages array is built up throughout a conversation.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message> Messages { get; set; }

	/// <summary>
	/// <para>
	/// The ID of the model to use.
	/// </para>
	/// </summary>
	public string? Model { get; set; }

	/// <summary>
	/// <para>
	/// A sequence of strings to control when the model should stop generating additional tokens.
	/// </para>
	/// </summary>
	public System.Collections.Generic.ICollection<string>? Stop { get; set; }

	/// <summary>
	/// <para>
	/// The sampling temperature to use.
	/// </para>
	/// </summary>
	public float? Temperature { get; set; }

	/// <summary>
	/// <para>
	/// Controls which tool is called by the model.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Union<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>? ToolChoice { get; set; }

	/// <summary>
	/// <para>
	/// A list of tools that the model can call.
	/// </para>
	/// </summary>
	public System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.CompletionTool>? Tools { get; set; }

	/// <summary>
	/// <para>
	/// Nucleus sampling, an alternative to sampling with temperature.
	/// </para>
	/// </summary>
	public float? TopP { get; set; }
}

public readonly partial struct RequestChatCompletionDescriptor
{
	internal Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public RequestChatCompletionDescriptor(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public RequestChatCompletionDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion instance) => new Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// The upper bound limit for the number of tokens that can be generated for a completion request.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor MaxCompletionTokens(long? value)
	{
		Instance.MaxCompletionTokens = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of objects representing the conversation.
	/// Requests should generally only add new messages from the user (role <c>user</c>).
	/// The other message roles (<c>assistant</c>, <c>system</c>, or <c>tool</c>) should generally only be copied from the response to a previous completion request, such that the messages array is built up throughout a conversation.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Messages(System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.Message> value)
	{
		Instance.Messages = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of objects representing the conversation.
	/// Requests should generally only add new messages from the user (role <c>user</c>).
	/// The other message roles (<c>assistant</c>, <c>system</c>, or <c>tool</c>) should generally only be copied from the response to a previous completion request, such that the messages array is built up throughout a conversation.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Messages(params Elastic.Clients.Elasticsearch.Inference.Message[] values)
	{
		Instance.Messages = [.. values];
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of objects representing the conversation.
	/// Requests should generally only add new messages from the user (role <c>user</c>).
	/// The other message roles (<c>assistant</c>, <c>system</c>, or <c>tool</c>) should generally only be copied from the response to a previous completion request, such that the messages array is built up throughout a conversation.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Messages(params System.Action<Elastic.Clients.Elasticsearch.Inference.MessageDescriptor>[] actions)
	{
		var items = new System.Collections.Generic.List<Elastic.Clients.Elasticsearch.Inference.Message>();
		foreach (var action in actions)
		{
			items.Add(Elastic.Clients.Elasticsearch.Inference.MessageDescriptor.Build(action));
		}

		Instance.Messages = items;
		return this;
	}

	/// <summary>
	/// <para>
	/// The ID of the model to use.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Model(string? value)
	{
		Instance.Model = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A sequence of strings to control when the model should stop generating additional tokens.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Stop(System.Collections.Generic.ICollection<string>? value)
	{
		Instance.Stop = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A sequence of strings to control when the model should stop generating additional tokens.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Stop(params string[] values)
	{
		Instance.Stop = [.. values];
		return this;
	}

	/// <summary>
	/// <para>
	/// The sampling temperature to use.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Temperature(float? value)
	{
		Instance.Temperature = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Controls which tool is called by the model.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor ToolChoice(Elastic.Clients.Elasticsearch.Union<string, Elastic.Clients.Elasticsearch.Inference.CompletionToolChoice>? value)
	{
		Instance.ToolChoice = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of tools that the model can call.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Tools(System.Collections.Generic.ICollection<Elastic.Clients.Elasticsearch.Inference.CompletionTool>? value)
	{
		Instance.Tools = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of tools that the model can call.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Tools(params Elastic.Clients.Elasticsearch.Inference.CompletionTool[] values)
	{
		Instance.Tools = [.. values];
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of tools that the model can call.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor Tools(params System.Action<Elastic.Clients.Elasticsearch.Inference.CompletionToolDescriptor>[] actions)
	{
		var items = new System.Collections.Generic.List<Elastic.Clients.Elasticsearch.Inference.CompletionTool>();
		foreach (var action in actions)
		{
			items.Add(Elastic.Clients.Elasticsearch.Inference.CompletionToolDescriptor.Build(action));
		}

		Instance.Tools = items;
		return this;
	}

	/// <summary>
	/// <para>
	/// Nucleus sampling, an alternative to sampling with temperature.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor TopP(float? value)
	{
		Instance.TopP = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion Build(System.Action<Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor(new Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}