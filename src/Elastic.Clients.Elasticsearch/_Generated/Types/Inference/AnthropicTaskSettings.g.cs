// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class AnthropicTaskSettings
{
	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it is the maximum number of tokens to generate before stopping.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_tokens")]
	public int MaxTokens { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it is the amount of randomness injected into the response.
	/// For more details about the supported range, refer to Anthropic documentation.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("temperature")]
	public float? Temperature { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it specifies to only sample from the top K options for each subsequent token.
	/// It is recommended for advanced use cases only.
	/// You usually only need to use <c>temperature</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("top_k")]
	public int? TopK { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it specifies to use Anthropic's nucleus sampling.
	/// In nucleus sampling, Anthropic computes the cumulative distribution over all the options for each subsequent token in decreasing probability order and cuts it off once it reaches the specified probability.
	/// You should either alter <c>temperature</c> or <c>top_p</c>, but not both.
	/// It is recommended for advanced use cases only.
	/// You usually only need to use <c>temperature</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("top_p")]
	public float? TopP { get; set; }
}

public sealed partial class AnthropicTaskSettingsDescriptor : SerializableDescriptor<AnthropicTaskSettingsDescriptor>
{
	internal AnthropicTaskSettingsDescriptor(Action<AnthropicTaskSettingsDescriptor> configure) => configure.Invoke(this);

	public AnthropicTaskSettingsDescriptor() : base()
	{
	}

	private int MaxTokensValue { get; set; }
	private float? TemperatureValue { get; set; }
	private int? TopKValue { get; set; }
	private float? TopPValue { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it is the maximum number of tokens to generate before stopping.
	/// </para>
	/// </summary>
	public AnthropicTaskSettingsDescriptor MaxTokens(int maxTokens)
	{
		MaxTokensValue = maxTokens;
		return Self;
	}

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it is the amount of randomness injected into the response.
	/// For more details about the supported range, refer to Anthropic documentation.
	/// </para>
	/// </summary>
	public AnthropicTaskSettingsDescriptor Temperature(float? temperature)
	{
		TemperatureValue = temperature;
		return Self;
	}

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it specifies to only sample from the top K options for each subsequent token.
	/// It is recommended for advanced use cases only.
	/// You usually only need to use <c>temperature</c>.
	/// </para>
	/// </summary>
	public AnthropicTaskSettingsDescriptor TopK(int? topK)
	{
		TopKValue = topK;
		return Self;
	}

	/// <summary>
	/// <para>
	/// For a <c>completion</c> task, it specifies to use Anthropic's nucleus sampling.
	/// In nucleus sampling, Anthropic computes the cumulative distribution over all the options for each subsequent token in decreasing probability order and cuts it off once it reaches the specified probability.
	/// You should either alter <c>temperature</c> or <c>top_p</c>, but not both.
	/// It is recommended for advanced use cases only.
	/// You usually only need to use <c>temperature</c>.
	/// </para>
	/// </summary>
	public AnthropicTaskSettingsDescriptor TopP(float? topP)
	{
		TopPValue = topP;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("max_tokens");
		writer.WriteNumberValue(MaxTokensValue);
		if (TemperatureValue.HasValue)
		{
			writer.WritePropertyName("temperature");
			writer.WriteNumberValue(TemperatureValue.Value);
		}

		if (TopKValue.HasValue)
		{
			writer.WritePropertyName("top_k");
			writer.WriteNumberValue(TopKValue.Value);
		}

		if (TopPValue.HasValue)
		{
			writer.WritePropertyName("top_p");
			writer.WriteNumberValue(TopPValue.Value);
		}

		writer.WriteEndObject();
	}
}