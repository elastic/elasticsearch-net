// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

/// <summary>
/// <para>
/// The completion tool function definition.
/// </para>
/// </summary>
public sealed partial class CompletionToolFunction
{
	/// <summary>
	/// <para>
	/// A description of what the function does.
	/// This is used by the model to choose when and how to call the function.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("description")]
	public string? Description { get; set; }

	/// <summary>
	/// <para>
	/// The name of the function.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("name")]
	public string Name { get; set; }

	/// <summary>
	/// <para>
	/// The parameters the functional accepts. This should be formatted as a JSON object.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("parameters")]
	public object? Parameters { get; set; }

	/// <summary>
	/// <para>
	/// Whether to enable schema adherence when generating the function call.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("strict")]
	public bool? Strict { get; set; }
}

/// <summary>
/// <para>
/// The completion tool function definition.
/// </para>
/// </summary>
public sealed partial class CompletionToolFunctionDescriptor : SerializableDescriptor<CompletionToolFunctionDescriptor>
{
	internal CompletionToolFunctionDescriptor(Action<CompletionToolFunctionDescriptor> configure) => configure.Invoke(this);

	public CompletionToolFunctionDescriptor() : base()
	{
	}

	private string? DescriptionValue { get; set; }
	private string NameValue { get; set; }
	private object? ParametersValue { get; set; }
	private bool? StrictValue { get; set; }

	/// <summary>
	/// <para>
	/// A description of what the function does.
	/// This is used by the model to choose when and how to call the function.
	/// </para>
	/// </summary>
	public CompletionToolFunctionDescriptor Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the function.
	/// </para>
	/// </summary>
	public CompletionToolFunctionDescriptor Name(string name)
	{
		NameValue = name;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The parameters the functional accepts. This should be formatted as a JSON object.
	/// </para>
	/// </summary>
	public CompletionToolFunctionDescriptor Parameters(object? parameters)
	{
		ParametersValue = parameters;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether to enable schema adherence when generating the function call.
	/// </para>
	/// </summary>
	public CompletionToolFunctionDescriptor Strict(bool? strict = true)
	{
		StrictValue = strict;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		writer.WritePropertyName("name");
		writer.WriteStringValue(NameValue);
		if (ParametersValue is not null)
		{
			writer.WritePropertyName("parameters");
			JsonSerializer.Serialize(writer, ParametersValue, options);
		}

		if (StrictValue.HasValue)
		{
			writer.WritePropertyName("strict");
			writer.WriteBooleanValue(StrictValue.Value);
		}

		writer.WriteEndObject();
	}
}