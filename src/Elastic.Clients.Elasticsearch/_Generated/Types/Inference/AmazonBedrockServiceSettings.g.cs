// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class AmazonBedrockServiceSettings
{
	/// <summary>
	/// <para>
	/// A valid AWS access key that has permissions to use Amazon Bedrock and access to models for inference requests.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("access_key")]
	public string AccessKey { get; set; }

	/// <summary>
	/// <para>
	/// The base model ID or an ARN to a custom model based on a foundational model.
	/// The base model IDs can be found in the Amazon Bedrock documentation.
	/// Note that the model ID must be available for the provider chosen and your IAM user must have access to the model.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model")]
	public string Model { get; set; }

	/// <summary>
	/// <para>
	/// The model provider for your deployment.
	/// Note that some providers may support only certain task types.
	/// Supported providers include:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>amazontitan</c> - available for <c>text_embedding</c> and <c>completion</c> task types
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>anthropic</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>ai21labs</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>cohere</c> - available for <c>text_embedding</c> and <c>completion</c> task types
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>meta</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>mistral</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// </list>
	/// </summary>
	[JsonInclude, JsonPropertyName("provider")]
	public string? Provider { get; set; }

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Watsonx.
	/// By default, the <c>watsonxai</c> service sets the number of requests allowed per minute to 120.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rate_limit")]
	public Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimit { get; set; }

	/// <summary>
	/// <para>
	/// The region that your model or ARN is deployed in.
	/// The list of available regions per model can be found in the Amazon Bedrock documentation.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("region")]
	public string Region { get; set; }

	/// <summary>
	/// <para>
	/// A valid AWS secret key that is paired with the <c>access_key</c>.
	/// For informationg about creating and managing access and secret keys, refer to the AWS documentation.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("secret_key")]
	public string SecretKey { get; set; }
}

public sealed partial class AmazonBedrockServiceSettingsDescriptor : SerializableDescriptor<AmazonBedrockServiceSettingsDescriptor>
{
	internal AmazonBedrockServiceSettingsDescriptor(Action<AmazonBedrockServiceSettingsDescriptor> configure) => configure.Invoke(this);

	public AmazonBedrockServiceSettingsDescriptor() : base()
	{
	}

	private string AccessKeyValue { get; set; }
	private string ModelValue { get; set; }
	private string? ProviderValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimitValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor RateLimitDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> RateLimitDescriptorAction { get; set; }
	private string RegionValue { get; set; }
	private string SecretKeyValue { get; set; }

	/// <summary>
	/// <para>
	/// A valid AWS access key that has permissions to use Amazon Bedrock and access to models for inference requests.
	/// </para>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor AccessKey(string accessKey)
	{
		AccessKeyValue = accessKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The base model ID or an ARN to a custom model based on a foundational model.
	/// The base model IDs can be found in the Amazon Bedrock documentation.
	/// Note that the model ID must be available for the provider chosen and your IAM user must have access to the model.
	/// </para>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor Model(string model)
	{
		ModelValue = model;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The model provider for your deployment.
	/// Note that some providers may support only certain task types.
	/// Supported providers include:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>amazontitan</c> - available for <c>text_embedding</c> and <c>completion</c> task types
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>anthropic</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>ai21labs</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>cohere</c> - available for <c>text_embedding</c> and <c>completion</c> task types
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>meta</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>mistral</c> - available for <c>completion</c> task type only
	/// </para>
	/// </item>
	/// </list>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor Provider(string? provider)
	{
		ProviderValue = provider;
		return Self;
	}

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Watsonx.
	/// By default, the <c>watsonxai</c> service sets the number of requests allowed per minute to 120.
	/// </para>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? rateLimit)
	{
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = null;
		RateLimitValue = rateLimit;
		return Self;
	}

	public AmazonBedrockServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor descriptor)
	{
		RateLimitValue = null;
		RateLimitDescriptorAction = null;
		RateLimitDescriptor = descriptor;
		return Self;
	}

	public AmazonBedrockServiceSettingsDescriptor RateLimit(Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> configure)
	{
		RateLimitValue = null;
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The region that your model or ARN is deployed in.
	/// The list of available regions per model can be found in the Amazon Bedrock documentation.
	/// </para>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor Region(string region)
	{
		RegionValue = region;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A valid AWS secret key that is paired with the <c>access_key</c>.
	/// For informationg about creating and managing access and secret keys, refer to the AWS documentation.
	/// </para>
	/// </summary>
	public AmazonBedrockServiceSettingsDescriptor SecretKey(string secretKey)
	{
		SecretKeyValue = secretKey;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("access_key");
		writer.WriteStringValue(AccessKeyValue);
		writer.WritePropertyName("model");
		writer.WriteStringValue(ModelValue);
		if (!string.IsNullOrEmpty(ProviderValue))
		{
			writer.WritePropertyName("provider");
			writer.WriteStringValue(ProviderValue);
		}

		if (RateLimitDescriptor is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitDescriptor, options);
		}
		else if (RateLimitDescriptorAction is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor(RateLimitDescriptorAction), options);
		}
		else if (RateLimitValue is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitValue, options);
		}

		writer.WritePropertyName("region");
		writer.WriteStringValue(RegionValue);
		writer.WritePropertyName("secret_key");
		writer.WriteStringValue(SecretKeyValue);
		writer.WriteEndObject();
	}
}