// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

/// <summary>
/// <para>
/// An object representing part of the conversation.
/// </para>
/// </summary>
public sealed partial class Message
{
	/// <summary>
	/// <para>
	/// The content of the message.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("content")]
	public Elastic.Clients.Elasticsearch.Inference.MessageContent? Content { get; set; }

	/// <summary>
	/// <para>
	/// The role of the message author.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("role")]
	public string Role { get; set; }

	/// <summary>
	/// <para>
	/// The tool call that this message is responding to.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("tool_call_id")]
	public Elastic.Clients.Elasticsearch.Id? ToolCallId { get; set; }

	/// <summary>
	/// <para>
	/// The tool calls generated by the model.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("tool_calls")]
	public ICollection<Elastic.Clients.Elasticsearch.Inference.ToolCall>? ToolCalls { get; set; }
}

/// <summary>
/// <para>
/// An object representing part of the conversation.
/// </para>
/// </summary>
public sealed partial class MessageDescriptor : SerializableDescriptor<MessageDescriptor>
{
	internal MessageDescriptor(Action<MessageDescriptor> configure) => configure.Invoke(this);

	public MessageDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Inference.MessageContent? ContentValue { get; set; }
	private string RoleValue { get; set; }
	private Elastic.Clients.Elasticsearch.Id? ToolCallIdValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Inference.ToolCall>? ToolCallsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor ToolCallsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor> ToolCallsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor>[] ToolCallsDescriptorActions { get; set; }

	/// <summary>
	/// <para>
	/// The content of the message.
	/// </para>
	/// </summary>
	public MessageDescriptor Content(Elastic.Clients.Elasticsearch.Inference.MessageContent? content)
	{
		ContentValue = content;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The role of the message author.
	/// </para>
	/// </summary>
	public MessageDescriptor Role(string role)
	{
		RoleValue = role;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The tool call that this message is responding to.
	/// </para>
	/// </summary>
	public MessageDescriptor ToolCallId(Elastic.Clients.Elasticsearch.Id? toolCallId)
	{
		ToolCallIdValue = toolCallId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The tool calls generated by the model.
	/// </para>
	/// </summary>
	public MessageDescriptor ToolCalls(ICollection<Elastic.Clients.Elasticsearch.Inference.ToolCall>? toolCalls)
	{
		ToolCallsDescriptor = null;
		ToolCallsDescriptorAction = null;
		ToolCallsDescriptorActions = null;
		ToolCallsValue = toolCalls;
		return Self;
	}

	public MessageDescriptor ToolCalls(Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor descriptor)
	{
		ToolCallsValue = null;
		ToolCallsDescriptorAction = null;
		ToolCallsDescriptorActions = null;
		ToolCallsDescriptor = descriptor;
		return Self;
	}

	public MessageDescriptor ToolCalls(Action<Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor> configure)
	{
		ToolCallsValue = null;
		ToolCallsDescriptor = null;
		ToolCallsDescriptorActions = null;
		ToolCallsDescriptorAction = configure;
		return Self;
	}

	public MessageDescriptor ToolCalls(params Action<Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor>[] configure)
	{
		ToolCallsValue = null;
		ToolCallsDescriptor = null;
		ToolCallsDescriptorAction = null;
		ToolCallsDescriptorActions = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ContentValue is not null)
		{
			writer.WritePropertyName("content");
			JsonSerializer.Serialize(writer, ContentValue, options);
		}

		writer.WritePropertyName("role");
		writer.WriteStringValue(RoleValue);
		if (ToolCallIdValue is not null)
		{
			writer.WritePropertyName("tool_call_id");
			JsonSerializer.Serialize(writer, ToolCallIdValue, options);
		}

		if (ToolCallsDescriptor is not null)
		{
			writer.WritePropertyName("tool_calls");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ToolCallsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ToolCallsDescriptorAction is not null)
		{
			writer.WritePropertyName("tool_calls");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor(ToolCallsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ToolCallsDescriptorActions is not null)
		{
			writer.WritePropertyName("tool_calls");
			writer.WriteStartArray();
			foreach (var action in ToolCallsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.ToolCallDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ToolCallsValue is not null)
		{
			writer.WritePropertyName("tool_calls");
			JsonSerializer.Serialize(writer, ToolCallsValue, options);
		}

		writer.WriteEndObject();
	}
}