// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class OpenAIServiceSettings
{
	/// <summary>
	/// <para>
	/// A valid API key of your OpenAI account.
	/// You can find your OpenAI API keys in your OpenAI account under the API keys section.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("api_key")]
	public string ApiKey { get; set; }

	/// <summary>
	/// <para>
	/// The number of dimensions the resulting output embeddings should have.
	/// It is supported only in <c>text-embedding-3</c> and later models.
	/// If it is not set, the OpenAI defined default for the model is used.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("dimensions")]
	public int? Dimensions { get; set; }

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the OpenAI documentation for the list of available text embedding models.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model_id")]
	public string ModelId { get; set; }

	/// <summary>
	/// <para>
	/// The unique identifier for your organization.
	/// You can find the Organization ID in your OpenAI account under <em>Settings > Organizations</em>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("organization_id")]
	public string? OrganizationId { get; set; }

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from OpenAI.
	/// The <c>openai</c> service sets a default number of requests allowed per minute depending on the task type.
	/// For <c>text_embedding</c>, it is set to <c>3000</c>.
	/// For <c>completion</c>, it is set to <c>500</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rate_limit")]
	public Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimit { get; set; }

	/// <summary>
	/// <para>
	/// The URL endpoint to use for the requests.
	/// It can be changed for testing purposes.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("url")]
	public string? Url { get; set; }
}

public sealed partial class OpenAIServiceSettingsDescriptor : SerializableDescriptor<OpenAIServiceSettingsDescriptor>
{
	internal OpenAIServiceSettingsDescriptor(Action<OpenAIServiceSettingsDescriptor> configure) => configure.Invoke(this);

	public OpenAIServiceSettingsDescriptor() : base()
	{
	}

	private string ApiKeyValue { get; set; }
	private int? DimensionsValue { get; set; }
	private string ModelIdValue { get; set; }
	private string? OrganizationIdValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimitValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor RateLimitDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> RateLimitDescriptorAction { get; set; }
	private string? UrlValue { get; set; }

	/// <summary>
	/// <para>
	/// A valid API key of your OpenAI account.
	/// You can find your OpenAI API keys in your OpenAI account under the API keys section.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor ApiKey(string apiKey)
	{
		ApiKeyValue = apiKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of dimensions the resulting output embeddings should have.
	/// It is supported only in <c>text-embedding-3</c> and later models.
	/// If it is not set, the OpenAI defined default for the model is used.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor Dimensions(int? dimensions)
	{
		DimensionsValue = dimensions;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the model to use for the inference task.
	/// Refer to the OpenAI documentation for the list of available text embedding models.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor ModelId(string modelId)
	{
		ModelIdValue = modelId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The unique identifier for your organization.
	/// You can find the Organization ID in your OpenAI account under <em>Settings > Organizations</em>.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor OrganizationId(string? organizationId)
	{
		OrganizationIdValue = organizationId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from OpenAI.
	/// The <c>openai</c> service sets a default number of requests allowed per minute depending on the task type.
	/// For <c>text_embedding</c>, it is set to <c>3000</c>.
	/// For <c>completion</c>, it is set to <c>500</c>.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? rateLimit)
	{
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = null;
		RateLimitValue = rateLimit;
		return Self;
	}

	public OpenAIServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor descriptor)
	{
		RateLimitValue = null;
		RateLimitDescriptorAction = null;
		RateLimitDescriptor = descriptor;
		return Self;
	}

	public OpenAIServiceSettingsDescriptor RateLimit(Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> configure)
	{
		RateLimitValue = null;
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The URL endpoint to use for the requests.
	/// It can be changed for testing purposes.
	/// </para>
	/// </summary>
	public OpenAIServiceSettingsDescriptor Url(string? url)
	{
		UrlValue = url;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("api_key");
		writer.WriteStringValue(ApiKeyValue);
		if (DimensionsValue.HasValue)
		{
			writer.WritePropertyName("dimensions");
			writer.WriteNumberValue(DimensionsValue.Value);
		}

		writer.WritePropertyName("model_id");
		writer.WriteStringValue(ModelIdValue);
		if (!string.IsNullOrEmpty(OrganizationIdValue))
		{
			writer.WritePropertyName("organization_id");
			writer.WriteStringValue(OrganizationIdValue);
		}

		if (RateLimitDescriptor is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitDescriptor, options);
		}
		else if (RateLimitDescriptorAction is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor(RateLimitDescriptorAction), options);
		}
		else if (RateLimitValue is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitValue, options);
		}

		if (!string.IsNullOrEmpty(UrlValue))
		{
			writer.WritePropertyName("url");
			writer.WriteStringValue(UrlValue);
		}

		writer.WriteEndObject();
	}
}