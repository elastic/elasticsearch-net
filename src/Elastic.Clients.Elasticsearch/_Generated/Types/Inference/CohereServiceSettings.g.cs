// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class CohereServiceSettings
{
	/// <summary>
	/// <para>
	/// A valid API key for your Cohere account.
	/// You can find or create your Cohere API keys on the Cohere API key settings page.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("api_key")]
	public string ApiKey { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>text_embedding</c> task, the types of embeddings you want to get back.
	/// Use <c>byte</c> for signed int8 embeddings (this is a synonym of <c>int8</c>).
	/// Use <c>float</c> for the default float embeddings.
	/// Use <c>int8</c> for signed int8 embeddings.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("embedding_type")]
	public Elastic.Clients.Elasticsearch.Inference.CohereEmbeddingType? EmbeddingType { get; set; }

	/// <summary>
	/// <para>
	/// For a <c>completion</c>, <c>rerank</c>, or <c>text_embedding</c> task, the name of the model to use for the inference task.
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// For the available <c>completion</c> models, refer to the <a href="https://docs.cohere.com/docs/models#command">Cohere command docs</a>.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// For the available <c>rerank</c> models, refer to the <a href="https://docs.cohere.com/reference/rerank-1">Cohere rerank docs</a>.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// For the available <c>text_embedding</c> models, refer to <a href="https://docs.cohere.com/reference/embed">Cohere embed docs</a>.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// The default value for a text embedding task is <c>embed-english-v2.0</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model_id")]
	public string? ModelId { get; set; }

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Cohere.
	/// By default, the <c>cohere</c> service sets the number of requests allowed per minute to 10000.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rate_limit")]
	public Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimit { get; set; }

	/// <summary>
	/// <para>
	/// The similarity measure.
	/// If the <c>embedding_type</c> is <c>float</c>, the default value is <c>dot_product</c>.
	/// If the <c>embedding_type</c> is <c>int8</c> or <c>byte</c>, the default value is <c>cosine</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("similarity")]
	public Elastic.Clients.Elasticsearch.Inference.CohereSimilarityType? Similarity { get; set; }
}

public sealed partial class CohereServiceSettingsDescriptor : SerializableDescriptor<CohereServiceSettingsDescriptor>
{
	internal CohereServiceSettingsDescriptor(Action<CohereServiceSettingsDescriptor> configure) => configure.Invoke(this);

	public CohereServiceSettingsDescriptor() : base()
	{
	}

	private string ApiKeyValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.CohereEmbeddingType? EmbeddingTypeValue { get; set; }
	private string? ModelIdValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? RateLimitValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor RateLimitDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> RateLimitDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.CohereSimilarityType? SimilarityValue { get; set; }

	/// <summary>
	/// <para>
	/// A valid API key for your Cohere account.
	/// You can find or create your Cohere API keys on the Cohere API key settings page.
	/// </para>
	/// <para>
	/// IMPORTANT: You need to provide the API key only once, during the inference model creation.
	/// The get inference endpoint API does not retrieve your API key.
	/// After creating the inference model, you cannot change the associated API key.
	/// If you want to use a different API key, delete the inference model and recreate it with the same name and the updated API key.
	/// </para>
	/// </summary>
	public CohereServiceSettingsDescriptor ApiKey(string apiKey)
	{
		ApiKeyValue = apiKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// For a <c>text_embedding</c> task, the types of embeddings you want to get back.
	/// Use <c>byte</c> for signed int8 embeddings (this is a synonym of <c>int8</c>).
	/// Use <c>float</c> for the default float embeddings.
	/// Use <c>int8</c> for signed int8 embeddings.
	/// </para>
	/// </summary>
	public CohereServiceSettingsDescriptor EmbeddingType(Elastic.Clients.Elasticsearch.Inference.CohereEmbeddingType? embeddingType)
	{
		EmbeddingTypeValue = embeddingType;
		return Self;
	}

	/// <summary>
	/// <para>
	/// For a <c>completion</c>, <c>rerank</c>, or <c>text_embedding</c> task, the name of the model to use for the inference task.
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// For the available <c>completion</c> models, refer to the <a href="https://docs.cohere.com/docs/models#command">Cohere command docs</a>.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// For the available <c>rerank</c> models, refer to the <a href="https://docs.cohere.com/reference/rerank-1">Cohere rerank docs</a>.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// For the available <c>text_embedding</c> models, refer to <a href="https://docs.cohere.com/reference/embed">Cohere embed docs</a>.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// The default value for a text embedding task is <c>embed-english-v2.0</c>.
	/// </para>
	/// </summary>
	public CohereServiceSettingsDescriptor ModelId(string? modelId)
	{
		ModelIdValue = modelId;
		return Self;
	}

	/// <summary>
	/// <para>
	/// This setting helps to minimize the number of rate limit errors returned from Cohere.
	/// By default, the <c>cohere</c> service sets the number of requests allowed per minute to 10000.
	/// </para>
	/// </summary>
	public CohereServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSetting? rateLimit)
	{
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = null;
		RateLimitValue = rateLimit;
		return Self;
	}

	public CohereServiceSettingsDescriptor RateLimit(Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor descriptor)
	{
		RateLimitValue = null;
		RateLimitDescriptorAction = null;
		RateLimitDescriptor = descriptor;
		return Self;
	}

	public CohereServiceSettingsDescriptor RateLimit(Action<Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor> configure)
	{
		RateLimitValue = null;
		RateLimitDescriptor = null;
		RateLimitDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The similarity measure.
	/// If the <c>embedding_type</c> is <c>float</c>, the default value is <c>dot_product</c>.
	/// If the <c>embedding_type</c> is <c>int8</c> or <c>byte</c>, the default value is <c>cosine</c>.
	/// </para>
	/// </summary>
	public CohereServiceSettingsDescriptor Similarity(Elastic.Clients.Elasticsearch.Inference.CohereSimilarityType? similarity)
	{
		SimilarityValue = similarity;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("api_key");
		writer.WriteStringValue(ApiKeyValue);
		if (EmbeddingTypeValue is not null)
		{
			writer.WritePropertyName("embedding_type");
			JsonSerializer.Serialize(writer, EmbeddingTypeValue, options);
		}

		if (!string.IsNullOrEmpty(ModelIdValue))
		{
			writer.WritePropertyName("model_id");
			writer.WriteStringValue(ModelIdValue);
		}

		if (RateLimitDescriptor is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitDescriptor, options);
		}
		else if (RateLimitDescriptorAction is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.RateLimitSettingDescriptor(RateLimitDescriptorAction), options);
		}
		else if (RateLimitValue is not null)
		{
			writer.WritePropertyName("rate_limit");
			JsonSerializer.Serialize(writer, RateLimitValue, options);
		}

		if (SimilarityValue is not null)
		{
			writer.WritePropertyName("similarity");
			JsonSerializer.Serialize(writer, SimilarityValue, options);
		}

		writer.WriteEndObject();
	}
}