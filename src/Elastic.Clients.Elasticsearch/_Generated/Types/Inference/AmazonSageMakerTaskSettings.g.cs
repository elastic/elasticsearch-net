// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

internal sealed partial class AmazonSageMakerTaskSettingsConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings>
{
	private static readonly System.Text.Json.JsonEncodedText PropCustomAttributes = System.Text.Json.JsonEncodedText.Encode("custom_attributes");
	private static readonly System.Text.Json.JsonEncodedText PropEnableExplanations = System.Text.Json.JsonEncodedText.Encode("enable_explanations");
	private static readonly System.Text.Json.JsonEncodedText PropInferenceId = System.Text.Json.JsonEncodedText.Encode("inference_id");
	private static readonly System.Text.Json.JsonEncodedText PropSessionId = System.Text.Json.JsonEncodedText.Encode("session_id");
	private static readonly System.Text.Json.JsonEncodedText PropTargetVariant = System.Text.Json.JsonEncodedText.Encode("target_variant");

	public override Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propCustomAttributes = default;
		LocalJsonValue<string?> propEnableExplanations = default;
		LocalJsonValue<string?> propInferenceId = default;
		LocalJsonValue<string?> propSessionId = default;
		LocalJsonValue<string?> propTargetVariant = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propCustomAttributes.TryReadProperty(ref reader, options, PropCustomAttributes, null))
			{
				continue;
			}

			if (propEnableExplanations.TryReadProperty(ref reader, options, PropEnableExplanations, null))
			{
				continue;
			}

			if (propInferenceId.TryReadProperty(ref reader, options, PropInferenceId, null))
			{
				continue;
			}

			if (propSessionId.TryReadProperty(ref reader, options, PropSessionId, null))
			{
				continue;
			}

			if (propTargetVariant.TryReadProperty(ref reader, options, PropTargetVariant, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			CustomAttributes = propCustomAttributes.Value,
			EnableExplanations = propEnableExplanations.Value,
			InferenceId = propInferenceId.Value,
			SessionId = propSessionId.Value,
			TargetVariant = propTargetVariant.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropCustomAttributes, value.CustomAttributes, null, null);
		writer.WriteProperty(options, PropEnableExplanations, value.EnableExplanations, null, null);
		writer.WriteProperty(options, PropInferenceId, value.InferenceId, null, null);
		writer.WriteProperty(options, PropSessionId, value.SessionId, null, null);
		writer.WriteProperty(options, PropTargetVariant, value.TargetVariant, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsConverter))]
public sealed partial class AmazonSageMakerTaskSettings
{
#if NET7_0_OR_GREATER
	public AmazonSageMakerTaskSettings()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	public AmazonSageMakerTaskSettings()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// The AWS custom attributes passed verbatim through to the model running in the SageMaker Endpoint.
	/// Values will be returned in the <c>X-elastic-sagemaker-custom-attributes</c> header.
	/// </para>
	/// </summary>
	public string? CustomAttributes { get; set; }

	/// <summary>
	/// <para>
	/// The optional JMESPath expression used to override the EnableExplanations provided during endpoint creation.
	/// </para>
	/// </summary>
	public string? EnableExplanations { get; set; }

	/// <summary>
	/// <para>
	/// The capture data ID when enabled in the endpoint.
	/// </para>
	/// </summary>
	public string? InferenceId { get; set; }

	/// <summary>
	/// <para>
	/// The stateful session identifier for a new or existing session.
	/// New sessions will be returned in the <c>X-elastic-sagemaker-new-session-id</c> header.
	/// Closed sessions will be returned in the <c>X-elastic-sagemaker-closed-session-id</c> header.
	/// </para>
	/// </summary>
	public string? SessionId { get; set; }

	/// <summary>
	/// <para>
	/// Specifies the variant when running with multi-variant Endpoints.
	/// </para>
	/// </summary>
	public string? TargetVariant { get; set; }
}

public readonly partial struct AmazonSageMakerTaskSettingsDescriptor
{
	internal Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public AmazonSageMakerTaskSettingsDescriptor(Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public AmazonSageMakerTaskSettingsDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor(Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings instance) => new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// The AWS custom attributes passed verbatim through to the model running in the SageMaker Endpoint.
	/// Values will be returned in the <c>X-elastic-sagemaker-custom-attributes</c> header.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor CustomAttributes(string? value)
	{
		Instance.CustomAttributes = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The optional JMESPath expression used to override the EnableExplanations provided during endpoint creation.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor EnableExplanations(string? value)
	{
		Instance.EnableExplanations = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The capture data ID when enabled in the endpoint.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor InferenceId(string? value)
	{
		Instance.InferenceId = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The stateful session identifier for a new or existing session.
	/// New sessions will be returned in the <c>X-elastic-sagemaker-new-session-id</c> header.
	/// Closed sessions will be returned in the <c>X-elastic-sagemaker-closed-session-id</c> header.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor SessionId(string? value)
	{
		Instance.SessionId = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Specifies the variant when running with multi-variant Endpoints.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor TargetVariant(string? value)
	{
		Instance.TargetVariant = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings Build(System.Action<Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor>? action)
	{
		if (action is null)
		{
			return new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
		}

		var builder = new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettingsDescriptor(new Elastic.Clients.Elasticsearch.Inference.AmazonSageMakerTaskSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}