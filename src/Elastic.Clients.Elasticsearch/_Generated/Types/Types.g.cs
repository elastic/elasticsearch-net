// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public abstract partial class AcknowledgedResponseBase : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("acknowledged")]
		public bool Acknowledged { get; init; }
	}

	public partial class BulkStats
	{
		[JsonInclude]
		[JsonPropertyName("total_operations")]
		public object TotalOperations { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public object TotalTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? TotalSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size_in_bytes")]
		public object TotalSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_time")]
		public string? AvgTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_time_in_millis")]
		public object AvgTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? AvgSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_size_in_bytes")]
		public object AvgSizeInBytes { get; init; }
	}

	public partial class CompletionStats
	{
		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public object SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.FieldSizeUsage>? Fields { get; init; }
	}

	public abstract partial class DictionaryResponseBase<TKey, TValue> : ResponseBase
	{
	}

	public partial class DocStats
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public object Count { get; init; }

		[JsonInclude]
		[JsonPropertyName("deleted")]
		public object Deleted { get; init; }
	}

	public partial class ErrorCause
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("reason")]
		public string Reason { get; init; }

		[JsonInclude]
		[JsonPropertyName("stack_trace")]
		public string? StackTrace { get; init; }

		[JsonInclude]
		[JsonPropertyName("caused_by")]
		public Elastic.Clients.Elasticsearch.ErrorCause? CausedBy { get; init; }

		[JsonInclude]
		[JsonPropertyName("root_cause")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? RootCause { get; init; }

		[JsonInclude]
		[JsonPropertyName("suppressed")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? Suppressed { get; init; }
	}

	[InterfaceConverterAttribute(typeof(FieldAndFormatDescriptorConverter<FieldAndFormat>))]
	public partial interface IFieldAndFormat
	{
		string Field { get; set; }

		string? Format { get; set; }

		bool? IncludeUnmapped { get; set; }
	}

	public partial class FieldAndFormat : IFieldAndFormat
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("include_unmapped")]
		public bool? IncludeUnmapped { get; set; }
	}

	public partial class FieldAndFormatDescriptor : DescriptorBase<FieldAndFormatDescriptor, IFieldAndFormat>, IFieldAndFormat
	{
		string IFieldAndFormat.Field { get; set; }

		string? IFieldAndFormat.Format { get; set; }

		bool? IFieldAndFormat.IncludeUnmapped { get; set; }
	}

	internal sealed class FieldAndFormatDescriptorConverter<TReadAs> : JsonConverter<IFieldAndFormat> where TReadAs : class, IFieldAndFormat
	{
		public override IFieldAndFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IFieldAndFormat value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, value.Field, options);
			if (!string.IsNullOrEmpty(value.Format))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value.Format);
			}

			if (value.IncludeUnmapped.HasValue)
			{
				writer.WritePropertyName("include_unmapped");
				writer.WriteBooleanValue(value.IncludeUnmapped.Value);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(FieldCollapseDescriptorConverter<FieldCollapse>))]
	public partial interface IFieldCollapse
	{
		string Field { get; set; }

		IEnumerable<IInnerHits>? InnerHits { get; set; }

		int? MaxConcurrentGroupSearches { get; set; }
	}

	public partial class FieldCollapse : IFieldCollapse
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public IEnumerable<IInnerHits>? InnerHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_concurrent_group_searches")]
		public int? MaxConcurrentGroupSearches { get; set; }
	}

	public partial class FieldCollapseDescriptor : DescriptorBase<FieldCollapseDescriptor, IFieldCollapse>, IFieldCollapse
	{
		string IFieldCollapse.Field { get; set; }

		IEnumerable<IInnerHits>? IFieldCollapse.InnerHits { get; set; }

		int? IFieldCollapse.MaxConcurrentGroupSearches { get; set; }
	}

	internal sealed class FieldCollapseDescriptorConverter<TReadAs> : JsonConverter<IFieldCollapse> where TReadAs : class, IFieldCollapse
	{
		public override IFieldCollapse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IFieldCollapse value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, value.Field, options);
			if (value.InnerHits is not null)
			{
				writer.WritePropertyName("inner_hits");
				JsonSerializer.Serialize(writer, value.InnerHits, options);
			}

			if (value.MaxConcurrentGroupSearches.HasValue)
			{
				writer.WritePropertyName("max_concurrent_group_searches");
				writer.WriteNumberValue(value.MaxConcurrentGroupSearches.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FielddataStats
	{
		[JsonInclude]
		[JsonPropertyName("evictions")]
		public object? Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public object MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.FieldMemoryUsage>? Fields { get; init; }
	}

	public partial class FieldMemoryUsage
	{
		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public object MemorySizeInBytes { get; init; }
	}

	public partial class FieldSizeUsage
	{
		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public object SizeInBytes { get; init; }
	}

	public partial class FlushStats
	{
		[JsonInclude]
		[JsonPropertyName("periodic")]
		public object Periodic { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public object Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public object TotalTimeInMillis { get; init; }
	}

	public partial class GeoDistanceSort
	{
		[JsonInclude]
		[JsonPropertyName("mode")]
		public Elastic.Clients.Elasticsearch.SortMode? Mode { get; init; }

		[JsonInclude]
		[JsonPropertyName("distance_type")]
		public Elastic.Clients.Elasticsearch.GeoDistanceType? DistanceType { get; init; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }

		[JsonInclude]
		[JsonPropertyName("unit")]
		public Elastic.Clients.Elasticsearch.DistanceUnit? Unit { get; init; }
	}

	public partial class GetStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public object Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_time")]
		public string? ExistsTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_time_in_millis")]
		public object ExistsTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_total")]
		public object ExistsTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_time")]
		public string? MissingTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_time_in_millis")]
		public object MissingTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_total")]
		public object MissingTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("time")]
		public string? Time { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_millis")]
		public object TimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public object Total { get; init; }
	}

	[InterfaceConverterAttribute(typeof(HighlightDescriptorConverter<Highlight>))]
	public partial interface IHighlight
	{
		Dictionary<string, IHighlightField> Fields { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterType? Type { get; set; }

		string? BoundaryChars { get; set; }

		int? BoundaryMaxScan { get; set; }

		Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		string? BoundaryScannerLocale { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterEncoder? Encoder { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		int? FragmentOffset { get; set; }

		int? FragmentSize { get; set; }

		int? MaxFragmentLength { get; set; }

		int? NoMatchSize { get; set; }

		int? NumberOfFragments { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		IEnumerable<string>? PostTags { get; set; }

		IEnumerable<string>? PreTags { get; set; }

		bool? RequireFieldMatch { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		QueryDsl.IQueryContainer? HighlightQuery { get; set; }

		Union<string?, int?>? MaxAnalyzedOffset { get; set; }
	}

	public partial class Highlight : IHighlight
	{
		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, IHighlightField> Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.HighlighterType? Type { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner")]
		public Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonInclude]
		[JsonPropertyName("encoder")]
		public Elastic.Clients.Elasticsearch.HighlighterEncoder? Encoder { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragmenter")]
		public Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("tags_schema")]
		public Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight_query")]
		public QueryDsl.IQueryContainer? HighlightQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_analyzed_offset")]
		public Union<string?, int?>? MaxAnalyzedOffset { get; set; }
	}

	public partial class HighlightDescriptor : DescriptorBase<HighlightDescriptor, IHighlight>, IHighlight
	{
		Dictionary<string, IHighlightField> IHighlight.Fields { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterType? IHighlight.Type { get; set; }

		string? IHighlight.BoundaryChars { get; set; }

		int? IHighlight.BoundaryMaxScan { get; set; }

		Elastic.Clients.Elasticsearch.BoundaryScanner? IHighlight.BoundaryScanner { get; set; }

		string? IHighlight.BoundaryScannerLocale { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterEncoder? IHighlight.Encoder { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterFragmenter? IHighlight.Fragmenter { get; set; }

		int? IHighlight.FragmentOffset { get; set; }

		int? IHighlight.FragmentSize { get; set; }

		int? IHighlight.MaxFragmentLength { get; set; }

		int? IHighlight.NoMatchSize { get; set; }

		int? IHighlight.NumberOfFragments { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterOrder? IHighlight.Order { get; set; }

		IEnumerable<string>? IHighlight.PostTags { get; set; }

		IEnumerable<string>? IHighlight.PreTags { get; set; }

		bool? IHighlight.RequireFieldMatch { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterTagsSchema? IHighlight.TagsSchema { get; set; }

		QueryDsl.IQueryContainer? IHighlight.HighlightQuery { get; set; }

		Union<string?, int?>? IHighlight.MaxAnalyzedOffset { get; set; }
	}

	internal sealed class HighlightDescriptorConverter<TReadAs> : JsonConverter<IHighlight> where TReadAs : class, IHighlight
	{
		public override IHighlight Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IHighlight value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, value.Fields, options);
			if (value.Type is not null)
			{
				writer.WritePropertyName("type");
				JsonSerializer.Serialize(writer, value.Type, options);
			}

			if (!string.IsNullOrEmpty(value.BoundaryChars))
			{
				writer.WritePropertyName("boundary_chars");
				writer.WriteStringValue(value.BoundaryChars);
			}

			if (value.BoundaryMaxScan.HasValue)
			{
				writer.WritePropertyName("boundary_max_scan");
				writer.WriteNumberValue(value.BoundaryMaxScan.Value);
			}

			if (value.BoundaryScanner is not null)
			{
				writer.WritePropertyName("boundary_scanner");
				JsonSerializer.Serialize(writer, value.BoundaryScanner, options);
			}

			if (!string.IsNullOrEmpty(value.BoundaryScannerLocale))
			{
				writer.WritePropertyName("boundary_scanner_locale");
				writer.WriteStringValue(value.BoundaryScannerLocale);
			}

			if (value.Encoder is not null)
			{
				writer.WritePropertyName("encoder");
				JsonSerializer.Serialize(writer, value.Encoder, options);
			}

			if (value.Fragmenter is not null)
			{
				writer.WritePropertyName("fragmenter");
				JsonSerializer.Serialize(writer, value.Fragmenter, options);
			}

			if (value.FragmentOffset.HasValue)
			{
				writer.WritePropertyName("fragment_offset");
				writer.WriteNumberValue(value.FragmentOffset.Value);
			}

			if (value.FragmentSize.HasValue)
			{
				writer.WritePropertyName("fragment_size");
				writer.WriteNumberValue(value.FragmentSize.Value);
			}

			if (value.MaxFragmentLength.HasValue)
			{
				writer.WritePropertyName("max_fragment_length");
				writer.WriteNumberValue(value.MaxFragmentLength.Value);
			}

			if (value.NoMatchSize.HasValue)
			{
				writer.WritePropertyName("no_match_size");
				writer.WriteNumberValue(value.NoMatchSize.Value);
			}

			if (value.NumberOfFragments.HasValue)
			{
				writer.WritePropertyName("number_of_fragments");
				writer.WriteNumberValue(value.NumberOfFragments.Value);
			}

			if (value.Order is not null)
			{
				writer.WritePropertyName("order");
				JsonSerializer.Serialize(writer, value.Order, options);
			}

			if (value.PostTags is not null)
			{
				writer.WritePropertyName("post_tags");
				JsonSerializer.Serialize(writer, value.PostTags, options);
			}

			if (value.PreTags is not null)
			{
				writer.WritePropertyName("pre_tags");
				JsonSerializer.Serialize(writer, value.PreTags, options);
			}

			if (value.RequireFieldMatch.HasValue)
			{
				writer.WritePropertyName("require_field_match");
				writer.WriteBooleanValue(value.RequireFieldMatch.Value);
			}

			if (value.TagsSchema is not null)
			{
				writer.WritePropertyName("tags_schema");
				JsonSerializer.Serialize(writer, value.TagsSchema, options);
			}

			if (value.HighlightQuery is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, value.HighlightQuery, options);
			}

			if (value.MaxAnalyzedOffset is not null)
			{
				writer.WritePropertyName("max_analyzed_offset");
				JsonSerializer.Serialize(writer, value.MaxAnalyzedOffset, options);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(HighlightFieldDescriptorConverter<HighlightField>))]
	public partial interface IHighlightField
	{
		string? BoundaryChars { get; set; }

		int? BoundaryMaxScan { get; set; }

		Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		string? BoundaryScannerLocale { get; set; }

		string? Field { get; set; }

		bool? ForceSource { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		int? FragmentOffset { get; set; }

		int? FragmentSize { get; set; }

		QueryDsl.IQueryContainer? HighlightQuery { get; set; }

		Elastic.Clients.Elasticsearch.Fields? MatchedFields { get; set; }

		int? MaxFragmentLength { get; set; }

		int? NoMatchSize { get; set; }

		int? NumberOfFragments { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		int? PhraseLimit { get; set; }

		IEnumerable<string>? PostTags { get; set; }

		IEnumerable<string>? PreTags { get; set; }

		bool? RequireFieldMatch { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		Union<Elastic.Clients.Elasticsearch.HighlighterType?, string?>? Type { get; set; }
	}

	public partial class HighlightField : IHighlightField
	{
		[JsonInclude]
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner")]
		public Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("force_source")]
		public bool? ForceSource { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragmenter")]
		public Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight_query")]
		public QueryDsl.IQueryContainer? HighlightQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("matched_fields")]
		public Elastic.Clients.Elasticsearch.Fields? MatchedFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("phrase_limit")]
		public int? PhraseLimit { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("tags_schema")]
		public Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Union<Elastic.Clients.Elasticsearch.HighlighterType?, string?>? Type { get; set; }
	}

	public partial class HighlightFieldDescriptor : DescriptorBase<HighlightFieldDescriptor, IHighlightField>, IHighlightField
	{
		string? IHighlightField.BoundaryChars { get; set; }

		int? IHighlightField.BoundaryMaxScan { get; set; }

		Elastic.Clients.Elasticsearch.BoundaryScanner? IHighlightField.BoundaryScanner { get; set; }

		string? IHighlightField.BoundaryScannerLocale { get; set; }

		string? IHighlightField.Field { get; set; }

		bool? IHighlightField.ForceSource { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterFragmenter? IHighlightField.Fragmenter { get; set; }

		int? IHighlightField.FragmentOffset { get; set; }

		int? IHighlightField.FragmentSize { get; set; }

		QueryDsl.IQueryContainer? IHighlightField.HighlightQuery { get; set; }

		Elastic.Clients.Elasticsearch.Fields? IHighlightField.MatchedFields { get; set; }

		int? IHighlightField.MaxFragmentLength { get; set; }

		int? IHighlightField.NoMatchSize { get; set; }

		int? IHighlightField.NumberOfFragments { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterOrder? IHighlightField.Order { get; set; }

		int? IHighlightField.PhraseLimit { get; set; }

		IEnumerable<string>? IHighlightField.PostTags { get; set; }

		IEnumerable<string>? IHighlightField.PreTags { get; set; }

		bool? IHighlightField.RequireFieldMatch { get; set; }

		Elastic.Clients.Elasticsearch.HighlighterTagsSchema? IHighlightField.TagsSchema { get; set; }

		Union<Elastic.Clients.Elasticsearch.HighlighterType?, string?>? IHighlightField.Type { get; set; }
	}

	internal sealed class HighlightFieldDescriptorConverter<TReadAs> : JsonConverter<IHighlightField> where TReadAs : class, IHighlightField
	{
		public override IHighlightField Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IHighlightField value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value.BoundaryChars))
			{
				writer.WritePropertyName("boundary_chars");
				writer.WriteStringValue(value.BoundaryChars);
			}

			if (value.BoundaryMaxScan.HasValue)
			{
				writer.WritePropertyName("boundary_max_scan");
				writer.WriteNumberValue(value.BoundaryMaxScan.Value);
			}

			if (value.BoundaryScanner is not null)
			{
				writer.WritePropertyName("boundary_scanner");
				JsonSerializer.Serialize(writer, value.BoundaryScanner, options);
			}

			if (!string.IsNullOrEmpty(value.BoundaryScannerLocale))
			{
				writer.WritePropertyName("boundary_scanner_locale");
				writer.WriteStringValue(value.BoundaryScannerLocale);
			}

			if (value.Field is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, value.Field, options);
			}

			if (value.ForceSource.HasValue)
			{
				writer.WritePropertyName("force_source");
				writer.WriteBooleanValue(value.ForceSource.Value);
			}

			if (value.Fragmenter is not null)
			{
				writer.WritePropertyName("fragmenter");
				JsonSerializer.Serialize(writer, value.Fragmenter, options);
			}

			if (value.FragmentOffset.HasValue)
			{
				writer.WritePropertyName("fragment_offset");
				writer.WriteNumberValue(value.FragmentOffset.Value);
			}

			if (value.FragmentSize.HasValue)
			{
				writer.WritePropertyName("fragment_size");
				writer.WriteNumberValue(value.FragmentSize.Value);
			}

			if (value.HighlightQuery is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, value.HighlightQuery, options);
			}

			if (value.MatchedFields is not null)
			{
				writer.WritePropertyName("matched_fields");
				JsonSerializer.Serialize(writer, value.MatchedFields, options);
			}

			if (value.MaxFragmentLength.HasValue)
			{
				writer.WritePropertyName("max_fragment_length");
				writer.WriteNumberValue(value.MaxFragmentLength.Value);
			}

			if (value.NoMatchSize.HasValue)
			{
				writer.WritePropertyName("no_match_size");
				writer.WriteNumberValue(value.NoMatchSize.Value);
			}

			if (value.NumberOfFragments.HasValue)
			{
				writer.WritePropertyName("number_of_fragments");
				writer.WriteNumberValue(value.NumberOfFragments.Value);
			}

			if (value.Order is not null)
			{
				writer.WritePropertyName("order");
				JsonSerializer.Serialize(writer, value.Order, options);
			}

			if (value.PhraseLimit.HasValue)
			{
				writer.WritePropertyName("phrase_limit");
				writer.WriteNumberValue(value.PhraseLimit.Value);
			}

			if (value.PostTags is not null)
			{
				writer.WritePropertyName("post_tags");
				JsonSerializer.Serialize(writer, value.PostTags, options);
			}

			if (value.PreTags is not null)
			{
				writer.WritePropertyName("pre_tags");
				JsonSerializer.Serialize(writer, value.PreTags, options);
			}

			if (value.RequireFieldMatch.HasValue)
			{
				writer.WritePropertyName("require_field_match");
				writer.WriteBooleanValue(value.RequireFieldMatch.Value);
			}

			if (value.TagsSchema is not null)
			{
				writer.WritePropertyName("tags_schema");
				JsonSerializer.Serialize(writer, value.TagsSchema, options);
			}

			if (value.Type is not null)
			{
				writer.WritePropertyName("type");
				JsonSerializer.Serialize(writer, value.Type, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class IndexedScript : ScriptBase
	{
		[JsonInclude]
		[JsonPropertyName("id")]
		public string Id { get; init; }
	}

	public partial class IndexingStats
	{
		[JsonInclude]
		[JsonPropertyName("index_current")]
		public object IndexCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_current")]
		public object DeleteCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_time")]
		public string? DeleteTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_time_in_millis")]
		public object DeleteTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_total")]
		public object DeleteTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("is_throttled")]
		public bool IsThrottled { get; init; }

		[JsonInclude]
		[JsonPropertyName("noop_update_total")]
		public object NoopUpdateTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time_in_millis")]
		public object ThrottleTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_time")]
		public string? IndexTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_time_in_millis")]
		public object IndexTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_total")]
		public object IndexTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_failed")]
		public object IndexFailed { get; init; }

		[JsonInclude]
		[JsonPropertyName("types")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.IndexingStats>? Types { get; init; }
	}

	public abstract partial class IndicesResponseBase : AcknowledgedResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics? Shards { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IInlineScript, InlineScript>))]
	public partial interface IInlineScript
	{
		string Source { get; set; }
	}

	public partial class InlineScript : ScriptBase, IInlineScript
	{
		[JsonInclude]
		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	[InterfaceConverterAttribute(typeof(InnerHitsDescriptorConverter<InnerHits>))]
	public partial interface IInnerHits
	{
		Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		int? Size { get; set; }

		int? From { get; set; }

		IFieldCollapse? Collapse { get; set; }

		IEnumerable<IFieldAndFormat>? DocvalueFields { get; set; }

		bool? Explain { get; set; }

		IHighlight? Highlight { get; set; }

		bool? IgnoreUnmapped { get; set; }

		Dictionary<string, IScriptField>? ScriptFields { get; set; }

		bool? SeqNoPrimaryTerm { get; set; }

		Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		Elastic.Clients.Elasticsearch.Sort? Sort { get; set; }

		Union<bool?, ISourceFilter?>? Source { get; set; }

		Elastic.Clients.Elasticsearch.Fields? StoredField { get; set; }

		bool? TrackScores { get; set; }

		bool? Version { get; set; }
	}

	public partial class InnerHits : IInnerHits
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("collapse")]
		public IFieldCollapse? Collapse { get; set; }

		[JsonInclude]
		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<IFieldAndFormat>? DocvalueFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public IHighlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, IScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Elastic.Clients.Elasticsearch.Sort? Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Union<bool?, ISourceFilter?>? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("stored_field")]
		public Elastic.Clients.Elasticsearch.Fields? StoredField { get; set; }

		[JsonInclude]
		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public partial class InnerHitsDescriptor : DescriptorBase<InnerHitsDescriptor, IInnerHits>, IInnerHits
	{
		Elastic.Clients.Elasticsearch.Name? IInnerHits.Name { get; set; }

		int? IInnerHits.Size { get; set; }

		int? IInnerHits.From { get; set; }

		IFieldCollapse? IInnerHits.Collapse { get; set; }

		IEnumerable<IFieldAndFormat>? IInnerHits.DocvalueFields { get; set; }

		bool? IInnerHits.Explain { get; set; }

		IHighlight? IInnerHits.Highlight { get; set; }

		bool? IInnerHits.IgnoreUnmapped { get; set; }

		Dictionary<string, IScriptField>? IInnerHits.ScriptFields { get; set; }

		bool? IInnerHits.SeqNoPrimaryTerm { get; set; }

		Elastic.Clients.Elasticsearch.Fields? IInnerHits.Fields { get; set; }

		Elastic.Clients.Elasticsearch.Sort? IInnerHits.Sort { get; set; }

		Union<bool?, ISourceFilter?>? IInnerHits.Source { get; set; }

		Elastic.Clients.Elasticsearch.Fields? IInnerHits.StoredField { get; set; }

		bool? IInnerHits.TrackScores { get; set; }

		bool? IInnerHits.Version { get; set; }
	}

	internal sealed class InnerHitsDescriptorConverter<TReadAs> : JsonConverter<IInnerHits> where TReadAs : class, IInnerHits
	{
		public override IInnerHits Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IInnerHits value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Name is not null)
			{
				writer.WritePropertyName("name");
				JsonSerializer.Serialize(writer, value.Name, options);
			}

			if (value.Size.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(value.Size.Value);
			}

			if (value.From.HasValue)
			{
				writer.WritePropertyName("from");
				writer.WriteNumberValue(value.From.Value);
			}

			if (value.Collapse is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, value.Collapse, options);
			}

			if (value.DocvalueFields is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, value.DocvalueFields, options);
			}

			if (value.Explain.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(value.Explain.Value);
			}

			if (value.Highlight is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, value.Highlight, options);
			}

			if (value.IgnoreUnmapped.HasValue)
			{
				writer.WritePropertyName("ignore_unmapped");
				writer.WriteBooleanValue(value.IgnoreUnmapped.Value);
			}

			if (value.ScriptFields is not null)
			{
				writer.WritePropertyName("script_fields");
				JsonSerializer.Serialize(writer, value.ScriptFields, options);
			}

			if (value.SeqNoPrimaryTerm.HasValue)
			{
				writer.WritePropertyName("seq_no_primary_term");
				writer.WriteBooleanValue(value.SeqNoPrimaryTerm.Value);
			}

			if (value.Fields is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, value.Fields, options);
			}

			if (value.Sort is not null)
			{
				writer.WritePropertyName("sort");
				JsonSerializer.Serialize(writer, value.Sort, options);
			}

			if (value.Source is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value.Source, options);
			}

			if (value.StoredField is not null)
			{
				writer.WritePropertyName("stored_field");
				JsonSerializer.Serialize(writer, value.StoredField, options);
			}

			if (value.TrackScores.HasValue)
			{
				writer.WritePropertyName("track_scores");
				writer.WriteBooleanValue(value.TrackScores.Value);
			}

			if (value.Version.HasValue)
			{
				writer.WritePropertyName("version");
				writer.WriteBooleanValue(value.Version.Value);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ILatLon, LatLon>))]
	public partial interface ILatLon
	{
		double Lat { get; set; }

		double Lon { get; set; }
	}

	public partial class LatLon : ILatLon
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat { get; set; }

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon { get; set; }
	}

	public partial class MergesStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public object Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_docs")]
		public object CurrentDocs { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_size")]
		public string? CurrentSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_size_in_bytes")]
		public object CurrentSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public object Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_auto_throttle")]
		public string? TotalAutoThrottle { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_auto_throttle_in_bytes")]
		public object TotalAutoThrottleInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_docs")]
		public object TotalDocs { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size")]
		public string? TotalSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size_in_bytes")]
		public object TotalSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_stopped_time")]
		public string? TotalStoppedTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_stopped_time_in_millis")]
		public object TotalStoppedTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_throttled_time")]
		public string? TotalThrottledTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_throttled_time_in_millis")]
		public object TotalThrottledTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public object TotalTimeInMillis { get; init; }
	}

	public partial class NodeStatistics
	{
		[JsonInclude]
		[JsonPropertyName("failures")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? Failures { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public int Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("successful")]
		public int Successful { get; init; }

		[JsonInclude]
		[JsonPropertyName("failed")]
		public int Failed { get; init; }
	}

	public partial class PluginStats
	{
		[JsonInclude]
		[JsonPropertyName("classname")]
		public string Classname { get; init; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("elasticsearch_version")]
		public string ElasticsearchVersion { get; init; }

		[JsonInclude]
		[JsonPropertyName("extended_plugins")]
		public IReadOnlyCollection<string> ExtendedPlugins { get; init; }

		[JsonInclude]
		[JsonPropertyName("has_native_controller")]
		public bool HasNativeController { get; init; }

		[JsonInclude]
		[JsonPropertyName("java_version")]
		public string JavaVersion { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public string Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("licensed")]
		public bool Licensed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class QueryCacheStats
	{
		[JsonInclude]
		[JsonPropertyName("cache_count")]
		public int CacheCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("cache_size")]
		public int CacheSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("evictions")]
		public int Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("hit_count")]
		public int HitCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public int MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("miss_count")]
		public int MissCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_count")]
		public int TotalCount { get; init; }
	}

	public partial class RecoveryStats
	{
		[JsonInclude]
		[JsonPropertyName("current_as_source")]
		public object CurrentAsSource { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_as_target")]
		public object CurrentAsTarget { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time_in_millis")]
		public object ThrottleTimeInMillis { get; init; }
	}

	public partial class RefreshStats
	{
		[JsonInclude]
		[JsonPropertyName("external_total")]
		public object ExternalTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("external_total_time_in_millis")]
		public object ExternalTotalTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("listeners")]
		public object Listeners { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public object Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public object TotalTimeInMillis { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRequestBase, RequestBase>))]
	public partial interface IRequestBase
	{
	}

	public abstract partial class RequestBase : IRequestBase
	{
	}

	public partial class RequestCacheStats
	{
		[JsonInclude]
		[JsonPropertyName("evictions")]
		public object Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("hit_count")]
		public object HitCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public string? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public object MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("miss_count")]
		public object MissCount { get; init; }
	}

	public partial class ScoreSort
	{
		[JsonInclude]
		[JsonPropertyName("mode")]
		public Elastic.Clients.Elasticsearch.SortMode? Mode { get; init; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScriptBase, ScriptBase>))]
	public partial interface IScriptBase
	{
		Union<Elastic.Clients.Elasticsearch.ScriptLanguage?, string?>? Lang { get; set; }

		Dictionary<string, object>? Params { get; set; }
	}

	public abstract partial class ScriptBase : IScriptBase
	{
		[JsonInclude]
		[JsonPropertyName("lang")]
		public Union<Elastic.Clients.Elasticsearch.ScriptLanguage?, string?>? Lang { get; set; }

		[JsonInclude]
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScriptField, ScriptField>))]
	public partial interface IScriptField
	{
		Elastic.Clients.Elasticsearch.Script Script { get; set; }

		bool? IgnoreFailure { get; set; }
	}

	public partial class ScriptField : IScriptField
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure { get; set; }
	}

	public partial class ScriptSort
	{
		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string? Type { get; init; }
	}

	public partial class SearchStats
	{
		[JsonInclude]
		[JsonPropertyName("fetch_current")]
		public object FetchCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("fetch_time_in_millis")]
		public object FetchTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("fetch_total")]
		public object FetchTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("open_contexts")]
		public object? OpenContexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_current")]
		public object QueryCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_time_in_millis")]
		public object QueryTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_total")]
		public object QueryTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_current")]
		public object ScrollCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_time_in_millis")]
		public object ScrollTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_total")]
		public object ScrollTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_current")]
		public object SuggestCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_time_in_millis")]
		public object SuggestTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_total")]
		public object SuggestTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("groups")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.SearchStats>? Groups { get; init; }
	}

	public partial class SegmentsStats
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public int Count { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? DocValuesMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values_memory_in_bytes")]
		public int DocValuesMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("file_sizes")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.IndexManagement.Stats.ShardFileSizeInfo> FileSizes { get; init; }

		[JsonInclude]
		[JsonPropertyName("fixed_bit_set")]
		public Elastic.Clients.Elasticsearch.ByteSize? FixedBitSet { get; init; }

		[JsonInclude]
		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public int FixedBitSetMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? IndexWriterMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_max_memory_in_bytes")]
		public int? IndexWriterMaxMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_memory_in_bytes")]
		public int IndexWriterMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public int MaxUnsafeAutoIdTimestamp { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? Memory { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_in_bytes")]
		public int MemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? NormsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms_memory_in_bytes")]
		public int NormsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("points_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? PointsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("points_memory_in_bytes")]
		public int PointsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("stored_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? StoredMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public int StoredFieldsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("terms_memory_in_bytes")]
		public int TermsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("terms_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? TermsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vectory_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? TermVectoryMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public int TermVectorsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("version_map_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? VersionMapMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("version_map_memory_in_bytes")]
		public int VersionMapMemoryInBytes { get; init; }
	}

	public partial class ShardFailure
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string? Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("reason")]
		public Elastic.Clients.Elasticsearch.ErrorCause Reason { get; init; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public string? Status { get; init; }
	}

	public abstract partial class ShardsOperationResponseBase : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics Shards { get; init; }
	}

	public partial class ShardStatistics
	{
		[JsonInclude]
		[JsonPropertyName("failed")]
		public int Failed { get; init; }

		[JsonInclude]
		[JsonPropertyName("successful")]
		public int Successful { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public int Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("failures")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ShardFailure>? Failures { get; init; }

		[JsonInclude]
		[JsonPropertyName("skipped")]
		public int? Skipped { get; init; }
	}

	public partial class SortContainer
	{
		[JsonInclude]
		[JsonPropertyName("_score")]
		public Elastic.Clients.Elasticsearch.ScoreSort? Score { get; init; }

		[JsonInclude]
		[JsonPropertyName("_doc")]
		public Elastic.Clients.Elasticsearch.ScoreSort? Doc { get; init; }

		[JsonInclude]
		[JsonPropertyName("_geo_distance")]
		public Elastic.Clients.Elasticsearch.GeoDistanceSort? GeoDistance { get; init; }

		[JsonInclude]
		[JsonPropertyName("_script")]
		public Elastic.Clients.Elasticsearch.ScriptSort? Script { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SourceFilterDescriptorConverter<SourceFilter>))]
	public partial interface ISourceFilter
	{
		Elastic.Clients.Elasticsearch.Fields? Excludes { get; set; }

		Elastic.Clients.Elasticsearch.Fields? Includes { get; set; }

		Elastic.Clients.Elasticsearch.Fields? Exclude { get; set; }

		Elastic.Clients.Elasticsearch.Fields? Include { get; set; }
	}

	public partial class SourceFilter : ISourceFilter
	{
		[JsonInclude]
		[JsonPropertyName("excludes")]
		public Elastic.Clients.Elasticsearch.Fields? Excludes { get; set; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public Elastic.Clients.Elasticsearch.Fields? Includes { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public Elastic.Clients.Elasticsearch.Fields? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public Elastic.Clients.Elasticsearch.Fields? Include { get; set; }
	}

	public partial class SourceFilterDescriptor : DescriptorBase<SourceFilterDescriptor, ISourceFilter>, ISourceFilter
	{
		Elastic.Clients.Elasticsearch.Fields? ISourceFilter.Excludes { get; set; }

		Elastic.Clients.Elasticsearch.Fields? ISourceFilter.Includes { get; set; }

		Elastic.Clients.Elasticsearch.Fields? ISourceFilter.Exclude { get; set; }

		Elastic.Clients.Elasticsearch.Fields? ISourceFilter.Include { get; set; }
	}

	internal sealed class SourceFilterDescriptorConverter<TReadAs> : JsonConverter<ISourceFilter> where TReadAs : class, ISourceFilter
	{
		public override ISourceFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ISourceFilter value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Excludes is not null)
			{
				writer.WritePropertyName("excludes");
				JsonSerializer.Serialize(writer, value.Excludes, options);
			}

			if (value.Includes is not null)
			{
				writer.WritePropertyName("includes");
				JsonSerializer.Serialize(writer, value.Includes, options);
			}

			if (value.Exclude is not null)
			{
				writer.WritePropertyName("exclude");
				JsonSerializer.Serialize(writer, value.Exclude, options);
			}

			if (value.Include is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, value.Include, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class StoreStats
	{
		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public int SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("reserved")]
		public Elastic.Clients.Elasticsearch.ByteSize? Reserved { get; init; }

		[JsonInclude]
		[JsonPropertyName("reserved_in_bytes")]
		public int ReservedInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_data_set_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? TotalDataSetSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_data_set_size_in_bytes")]
		public int? TotalDataSetSizeInBytes { get; init; }
	}

	public partial class TranslogStats
	{
		[JsonInclude]
		[JsonPropertyName("earliest_last_modified_age")]
		public object EarliestLastModifiedAge { get; init; }

		[JsonInclude]
		[JsonPropertyName("operations")]
		public object Operations { get; init; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public string? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public object SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_operations")]
		public int UncommittedOperations { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_size")]
		public string? UncommittedSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_size_in_bytes")]
		public object UncommittedSizeInBytes { get; init; }
	}

	public partial class WarmerStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public object Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public object Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public object TotalTimeInMillis { get; init; }
	}
}