// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public abstract partial class AcknowledgedResponseBase : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("acknowledged")]
		public bool Acknowledged { get; init; }
	}

	public partial class AggregationBreakdown
	{
		[JsonInclude]
		[JsonPropertyName("build_aggregation")]
		public long BuildAggregation { get; init; }

		[JsonInclude]
		[JsonPropertyName("build_aggregation_count")]
		public long BuildAggregationCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("build_leaf_collector")]
		public long BuildLeafCollector { get; init; }

		[JsonInclude]
		[JsonPropertyName("build_leaf_collector_count")]
		public long BuildLeafCollectorCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("collect")]
		public long Collect { get; init; }

		[JsonInclude]
		[JsonPropertyName("collect_count")]
		public long CollectCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("initialize")]
		public long Initialize { get; init; }

		[JsonInclude]
		[JsonPropertyName("initialize_count")]
		public long InitializeCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("post_collection")]
		public long? PostCollection { get; init; }

		[JsonInclude]
		[JsonPropertyName("post_collection_count")]
		public long? PostCollectionCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("reduce")]
		public long Reduce { get; init; }

		[JsonInclude]
		[JsonPropertyName("reduce_count")]
		public long ReduceCount { get; init; }
	}

	public partial class AggregationProfile
	{
		[JsonInclude]
		[JsonPropertyName("breakdown")]
		public Elastic.Clients.Elasticsearch.AggregationBreakdown Breakdown { get; init; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("debug")]
		public Elastic.Clients.Elasticsearch.AggregationProfileDebug? Debug { get; init; }

		[JsonInclude]
		[JsonPropertyName("children")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.AggregationProfile>? Children { get; init; }
	}

	public partial class AggregationProfileDebug
	{
		[JsonInclude]
		[JsonPropertyName("segments_with_multi_valued_ords")]
		public int? SegmentsWithMultiValuedOrds { get; init; }

		[JsonInclude]
		[JsonPropertyName("collection_strategy")]
		public string? CollectionStrategy { get; init; }

		[JsonInclude]
		[JsonPropertyName("segments_with_single_valued_ords")]
		public int? SegmentsWithSingleValuedOrds { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_buckets")]
		public int? TotalBuckets { get; init; }

		[JsonInclude]
		[JsonPropertyName("built_buckets")]
		public int? BuiltBuckets { get; init; }

		[JsonInclude]
		[JsonPropertyName("result_strategy")]
		public string? ResultStrategy { get; init; }

		[JsonInclude]
		[JsonPropertyName("has_filter")]
		public bool? HasFilter { get; init; }

		[JsonInclude]
		[JsonPropertyName("delegate")]
		public string? Delegate { get; init; }

		[JsonInclude]
		[JsonPropertyName("delegate_debug")]
		public Elastic.Clients.Elasticsearch.AggregationProfileDelegateDebug? DelegateDebug { get; init; }

		[JsonInclude]
		[JsonPropertyName("chars_fetched")]
		public int? CharsFetched { get; init; }

		[JsonInclude]
		[JsonPropertyName("extract_count")]
		public int? ExtractCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("extract_ns")]
		public int? ExtractNs { get; init; }

		[JsonInclude]
		[JsonPropertyName("values_fetched")]
		public int? ValuesFetched { get; init; }

		[JsonInclude]
		[JsonPropertyName("collect_analyzed_ns")]
		public int? CollectAnalyzedNs { get; init; }

		[JsonInclude]
		[JsonPropertyName("collect_analyzed_count")]
		public int? CollectAnalyzedCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("surviving_buckets")]
		public int? SurvivingBuckets { get; init; }

		[JsonInclude]
		[JsonPropertyName("ordinals_collectors_used")]
		public int? OrdinalsCollectorsUsed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ordinals_collectors_overhead_too_high")]
		public int? OrdinalsCollectorsOverheadTooHigh { get; init; }

		[JsonInclude]
		[JsonPropertyName("string_hashing_collectors_used")]
		public int? StringHashingCollectorsUsed { get; init; }

		[JsonInclude]
		[JsonPropertyName("numeric_collectors_used")]
		public int? NumericCollectorsUsed { get; init; }

		[JsonInclude]
		[JsonPropertyName("empty_collectors_used")]
		public int? EmptyCollectorsUsed { get; init; }

		[JsonInclude]
		[JsonPropertyName("deferred_aggregators")]
		public IReadOnlyCollection<string>? DeferredAggregators { get; init; }
	}

	public partial class AggregationProfileDelegateDebug
	{
		[JsonInclude]
		[JsonPropertyName("segments_with_doc_count_field")]
		public int? SegmentsWithDocCountField { get; init; }

		[JsonInclude]
		[JsonPropertyName("segments_with_deleted_docs")]
		public int? SegmentsWithDeletedDocs { get; init; }

		[JsonInclude]
		[JsonPropertyName("filters")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.AggregationProfileDelegateDebugFilter>? Filters { get; init; }

		[JsonInclude]
		[JsonPropertyName("segments_counted")]
		public int? SegmentsCounted { get; init; }

		[JsonInclude]
		[JsonPropertyName("segments_collected")]
		public int? SegmentsCollected { get; init; }
	}

	public partial class AggregationProfileDelegateDebugFilter
	{
		[JsonInclude]
		[JsonPropertyName("results_from_metadata")]
		public int? ResultsFromMetadata { get; init; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string? Query { get; init; }

		[JsonInclude]
		[JsonPropertyName("specialized_for")]
		public string? SpecializedFor { get; init; }
	}

	public partial class BulkIndexByScrollFailure
	{
		[JsonInclude]
		[JsonPropertyName("cause")]
		public Elastic.Clients.Elasticsearch.ErrorCause Cause { get; init; }

		[JsonInclude]
		[JsonPropertyName("id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public int Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class BulkStats
	{
		[JsonInclude]
		[JsonPropertyName("total_operations")]
		public long TotalOperations { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? TotalSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size_in_bytes")]
		public long TotalSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_time")]
		public string? AvgTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_time_in_millis")]
		public long AvgTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? AvgSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("avg_size_in_bytes")]
		public long AvgSizeInBytes { get; init; }
	}

	public partial class ClusterStatistics
	{
		[JsonInclude]
		[JsonPropertyName("skipped")]
		public int Skipped { get; init; }

		[JsonInclude]
		[JsonPropertyName("successful")]
		public int Successful { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public int Total { get; init; }
	}

	public partial class Collector
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public string Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("reason")]
		public string Reason { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos { get; init; }

		[JsonInclude]
		[JsonPropertyName("children")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Collector>? Children { get; init; }
	}

	public partial class CompletionStats
	{
		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.FieldSizeUsage>? Fields { get; init; }
	}

	public partial class CompletionSuggestOption<TDocument>
	{
		[JsonInclude]
		[JsonPropertyName("collate_match")]
		public bool? CollateMatch { get; init; }

		[JsonInclude]
		[JsonPropertyName("contexts")]
		public Dictionary<string, IReadOnlyCollection<Elastic.Clients.Elasticsearch.Context>>? Contexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields { get; init; }

		[JsonInclude]
		[JsonPropertyName("_id")]
		public string Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("_type")]
		public string? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public string? Routing { get; init; }

		[JsonInclude]
		[JsonPropertyName("_score")]
		public double Score { get; init; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public TDocument Source { get; init; }

		[JsonInclude]
		[JsonPropertyName("text")]
		public string Text { get; init; }
	}

	public partial class CoordsGeoBounds
	{
		[JsonInclude]
		[JsonPropertyName("top")]
		public double Top { get; init; }

		[JsonInclude]
		[JsonPropertyName("bottom")]
		public double Bottom { get; init; }

		[JsonInclude]
		[JsonPropertyName("left")]
		public double Left { get; init; }

		[JsonInclude]
		[JsonPropertyName("right")]
		public double Right { get; init; }
	}

	public abstract partial class DictionaryResponseBase<TKey, TValue> : ResponseBase
	{
	}

	public partial class DocStats
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public long Count { get; init; }

		[JsonInclude]
		[JsonPropertyName("deleted")]
		public long Deleted { get; init; }
	}

	public partial class ErrorCause
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("reason")]
		public string Reason { get; init; }

		[JsonInclude]
		[JsonPropertyName("stack_trace")]
		public string? StackTrace { get; init; }

		[JsonInclude]
		[JsonPropertyName("caused_by")]
		public Elastic.Clients.Elasticsearch.ErrorCause? CausedBy { get; init; }

		[JsonInclude]
		[JsonPropertyName("root_cause")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? RootCause { get; init; }

		[JsonInclude]
		[JsonPropertyName("suppressed")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? Suppressed { get; init; }
	}

	public partial class Explanation
	{
		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("details")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ExplanationDetail> Details { get; init; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public float Value { get; init; }
	}

	public partial class ExplanationDetail
	{
		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("details")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ExplanationDetail>? Details { get; init; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public float Value { get; init; }
	}

	public partial class FetchProfile
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos { get; init; }

		[JsonInclude]
		[JsonPropertyName("breakdown")]
		public Elastic.Clients.Elasticsearch.FetchProfileBreakdown Breakdown { get; init; }

		[JsonInclude]
		[JsonPropertyName("debug")]
		public Elastic.Clients.Elasticsearch.FetchProfileDebug? Debug { get; init; }

		[JsonInclude]
		[JsonPropertyName("children")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.FetchProfile>? Children { get; init; }
	}

	public partial class FetchProfileBreakdown
	{
		[JsonInclude]
		[JsonPropertyName("load_stored_fields")]
		public int? LoadStoredFields { get; init; }

		[JsonInclude]
		[JsonPropertyName("load_stored_fields_count")]
		public int? LoadStoredFieldsCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("next_reader")]
		public int? NextReader { get; init; }

		[JsonInclude]
		[JsonPropertyName("next_reader_count")]
		public int? NextReaderCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("process_count")]
		public int? ProcessCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("process")]
		public int? Process { get; init; }
	}

	public partial class FetchProfileDebug
	{
		[JsonInclude]
		[JsonPropertyName("stored_fields")]
		public IReadOnlyCollection<string>? StoredFields { get; init; }

		[JsonInclude]
		[JsonPropertyName("fast_path")]
		public int? FastPath { get; init; }
	}

	public partial class FieldCollapse
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public Elastic.Clients.Elasticsearch.InnerHits? InnerHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_concurrent_group_searches")]
		public int? MaxConcurrentGroupSearches { get; set; }
	}

	public sealed partial class FieldCollapseDescriptor<T> : DescriptorBase<FieldCollapseDescriptor<T>>
	{
		public FieldCollapseDescriptor()
		{
		}

		internal FieldCollapseDescriptor(Action<FieldCollapseDescriptor<T>> configure) => configure.Invoke(this);
		internal string FieldValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.InnerHits? InnerHitsValue { get; private set; }

		internal int? MaxConcurrentGroupSearchesValue { get; private set; }

		internal InnerHitsDescriptor<T> InnerHitsDescriptor { get; private set; }

		internal Action<InnerHitsDescriptor<T>> InnerHitsDescriptorAction { get; private set; }

		public FieldCollapseDescriptor<T> Field(string field) => Assign(field, (a, v) => a.FieldValue = v);
		public FieldCollapseDescriptor<T> InnerHits(Elastic.Clients.Elasticsearch.InnerHits? innerHits)
		{
			InnerHitsDescriptor = null;
			InnerHitsDescriptorAction = null;
			return Assign(innerHits, (a, v) => a.InnerHitsValue = v);
		}

		public FieldCollapseDescriptor<T> InnerHits(Elastic.Clients.Elasticsearch.InnerHitsDescriptor<T> descriptor)
		{
			InnerHitsValue = null;
			InnerHitsDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.InnerHitsDescriptor = v);
		}

		public FieldCollapseDescriptor<T> InnerHits(Action<Elastic.Clients.Elasticsearch.InnerHitsDescriptor<T>> configure)
		{
			InnerHitsValue = null;
			InnerHitsDescriptorAction = null;
			return Assign(configure, (a, v) => a.InnerHitsDescriptorAction = v);
		}

		public FieldCollapseDescriptor<T> MaxConcurrentGroupSearches(int? maxConcurrentGroupSearches) => Assign(maxConcurrentGroupSearches, (a, v) => a.MaxConcurrentGroupSearchesValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
			if (InnerHitsDescriptor is not null)
			{
				writer.WritePropertyName("inner_hits");
				JsonSerializer.Serialize(writer, InnerHitsDescriptor, options);
			}
			else if (InnerHitsDescriptorAction is not null)
			{
				writer.WritePropertyName("inner_hits");
				JsonSerializer.Serialize(writer, new InnerHitsDescriptor<T>(InnerHitsDescriptorAction), options);
			}
			else if (InnerHitsValue is not null)
			{
				writer.WritePropertyName("inner_hits");
				JsonSerializer.Serialize(writer, InnerHitsValue, options);
			}

			if (MaxConcurrentGroupSearchesValue.HasValue)
			{
				writer.WritePropertyName("max_concurrent_group_searches");
				writer.WriteNumberValue(MaxConcurrentGroupSearchesValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FielddataStats
	{
		[JsonInclude]
		[JsonPropertyName("evictions")]
		public long? Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.FieldMemoryUsage>? Fields { get; init; }
	}

	public partial class FieldMemoryUsage
	{
		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes { get; init; }
	}

	public partial class FieldSizeUsage
	{
		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes { get; init; }
	}

	public partial class FlushStats
	{
		[JsonInclude]
		[JsonPropertyName("periodic")]
		public long Periodic { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public long Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis { get; init; }
	}

	public partial class GeoDistanceSort : ISortOptionsVariant
	{
		[JsonIgnore]
		string ISortOptionsVariant.SortOptionsVariantName => "_geo_distance";
		[JsonInclude]
		[JsonPropertyName("mode")]
		public Elastic.Clients.Elasticsearch.SortMode? Mode { get; init; }

		[JsonInclude]
		[JsonPropertyName("distance_type")]
		public Elastic.Clients.Elasticsearch.GeoDistanceType? DistanceType { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; init; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }

		[JsonInclude]
		[JsonPropertyName("unit")]
		public Elastic.Clients.Elasticsearch.DistanceUnit? Unit { get; init; }
	}

	public partial class GeoHashLocation
	{
		[JsonInclude]
		[JsonPropertyName("geohash")]
		public string Geohash { get; init; }
	}

	public partial class GeoLine
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("coordinates")]
		public IReadOnlyCollection<IReadOnlyCollection<double>> Coordinates { get; init; }
	}

	public partial class GetStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public long Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_time")]
		public string? ExistsTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_time_in_millis")]
		public long ExistsTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("exists_total")]
		public long ExistsTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_time")]
		public string? MissingTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_time_in_millis")]
		public long MissingTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("missing_total")]
		public long MissingTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("time")]
		public string? Time { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public long Total { get; init; }
	}

	public partial class Highlight
	{
		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.HighlightField> Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.HighlighterType? Type { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner")]
		public Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonInclude]
		[JsonPropertyName("encoder")]
		public Elastic.Clients.Elasticsearch.HighlighterEncoder? Encoder { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragmenter")]
		public Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("tags_schema")]
		public Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? HighlightQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_analyzed_offset")]
		public Union<string?, int?>? MaxAnalyzedOffset { get; set; }
	}

	public sealed partial class HighlightDescriptor<T> : DescriptorBase<HighlightDescriptor<T>>
	{
		public HighlightDescriptor()
		{
		}

		internal HighlightDescriptor(Action<HighlightDescriptor<T>> configure) => configure.Invoke(this);
		internal Dictionary<string, Elastic.Clients.Elasticsearch.HighlightField> FieldsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterType? TypeValue { get; private set; }

		internal string? BoundaryCharsValue { get; private set; }

		internal int? BoundaryMaxScanValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScannerValue { get; private set; }

		internal string? BoundaryScannerLocaleValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterEncoder? EncoderValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterFragmenter? FragmenterValue { get; private set; }

		internal int? FragmentOffsetValue { get; private set; }

		internal int? FragmentSizeValue { get; private set; }

		internal int? MaxFragmentLengthValue { get; private set; }

		internal int? NoMatchSizeValue { get; private set; }

		internal int? NumberOfFragmentsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterOrder? OrderValue { get; private set; }

		internal IEnumerable<string>? PostTagsValue { get; private set; }

		internal IEnumerable<string>? PreTagsValue { get; private set; }

		internal bool? RequireFieldMatchValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchemaValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? HighlightQueryValue { get; private set; }

		internal Union<string?, int?>? MaxAnalyzedOffsetValue { get; private set; }

		internal QueryDsl.QueryContainerDescriptor<T> HighlightQueryDescriptor { get; private set; }

		internal Action<QueryDsl.QueryContainerDescriptor<T>> HighlightQueryDescriptorAction { get; private set; }

		public HighlightDescriptor<T> Fields(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.HighlightField>, FluentDictionary<string, Elastic.Clients.Elasticsearch.HighlightField>> selector) => Assign(selector, (a, v) => a.FieldsValue = v?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.HighlightField>()));
		public HighlightDescriptor<T> Type(Elastic.Clients.Elasticsearch.HighlighterType? type) => Assign(type, (a, v) => a.TypeValue = v);
		public HighlightDescriptor<T> BoundaryChars(string? boundaryChars) => Assign(boundaryChars, (a, v) => a.BoundaryCharsValue = v);
		public HighlightDescriptor<T> BoundaryMaxScan(int? boundaryMaxScan) => Assign(boundaryMaxScan, (a, v) => a.BoundaryMaxScanValue = v);
		public HighlightDescriptor<T> BoundaryScanner(Elastic.Clients.Elasticsearch.BoundaryScanner? boundaryScanner) => Assign(boundaryScanner, (a, v) => a.BoundaryScannerValue = v);
		public HighlightDescriptor<T> BoundaryScannerLocale(string? boundaryScannerLocale) => Assign(boundaryScannerLocale, (a, v) => a.BoundaryScannerLocaleValue = v);
		public HighlightDescriptor<T> Encoder(Elastic.Clients.Elasticsearch.HighlighterEncoder? encoder) => Assign(encoder, (a, v) => a.EncoderValue = v);
		public HighlightDescriptor<T> Fragmenter(Elastic.Clients.Elasticsearch.HighlighterFragmenter? fragmenter) => Assign(fragmenter, (a, v) => a.FragmenterValue = v);
		public HighlightDescriptor<T> FragmentOffset(int? fragmentOffset) => Assign(fragmentOffset, (a, v) => a.FragmentOffsetValue = v);
		public HighlightDescriptor<T> FragmentSize(int? fragmentSize) => Assign(fragmentSize, (a, v) => a.FragmentSizeValue = v);
		public HighlightDescriptor<T> MaxFragmentLength(int? maxFragmentLength) => Assign(maxFragmentLength, (a, v) => a.MaxFragmentLengthValue = v);
		public HighlightDescriptor<T> NoMatchSize(int? noMatchSize) => Assign(noMatchSize, (a, v) => a.NoMatchSizeValue = v);
		public HighlightDescriptor<T> NumberOfFragments(int? numberOfFragments) => Assign(numberOfFragments, (a, v) => a.NumberOfFragmentsValue = v);
		public HighlightDescriptor<T> Order(Elastic.Clients.Elasticsearch.HighlighterOrder? order) => Assign(order, (a, v) => a.OrderValue = v);
		public HighlightDescriptor<T> PostTags(IEnumerable<string>? postTags) => Assign(postTags, (a, v) => a.PostTagsValue = v);
		public HighlightDescriptor<T> PreTags(IEnumerable<string>? preTags) => Assign(preTags, (a, v) => a.PreTagsValue = v);
		public HighlightDescriptor<T> RequireFieldMatch(bool? requireFieldMatch = true) => Assign(requireFieldMatch, (a, v) => a.RequireFieldMatchValue = v);
		public HighlightDescriptor<T> TagsSchema(Elastic.Clients.Elasticsearch.HighlighterTagsSchema? tagsSchema) => Assign(tagsSchema, (a, v) => a.TagsSchemaValue = v);
		public HighlightDescriptor<T> HighlightQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? highlightQuery)
		{
			HighlightQueryDescriptor = null;
			HighlightQueryDescriptorAction = null;
			return Assign(highlightQuery, (a, v) => a.HighlightQueryValue = v);
		}

		public HighlightDescriptor<T> HighlightQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			HighlightQueryValue = null;
			HighlightQueryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.HighlightQueryDescriptor = v);
		}

		public HighlightDescriptor<T> HighlightQuery(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			HighlightQueryValue = null;
			HighlightQueryDescriptorAction = null;
			return Assign(configure, (a, v) => a.HighlightQueryDescriptorAction = v);
		}

		public HighlightDescriptor<T> MaxAnalyzedOffset(Union<string?, int?>? maxAnalyzedOffset) => Assign(maxAnalyzedOffset, (a, v) => a.MaxAnalyzedOffsetValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
			if (TypeValue is not null)
			{
				writer.WritePropertyName("type");
				JsonSerializer.Serialize(writer, TypeValue, options);
			}

			if (!string.IsNullOrEmpty(BoundaryCharsValue))
			{
				writer.WritePropertyName("boundary_chars");
				writer.WriteStringValue(BoundaryCharsValue);
			}

			if (BoundaryMaxScanValue.HasValue)
			{
				writer.WritePropertyName("boundary_max_scan");
				writer.WriteNumberValue(BoundaryMaxScanValue.Value);
			}

			if (BoundaryScannerValue is not null)
			{
				writer.WritePropertyName("boundary_scanner");
				JsonSerializer.Serialize(writer, BoundaryScannerValue, options);
			}

			if (!string.IsNullOrEmpty(BoundaryScannerLocaleValue))
			{
				writer.WritePropertyName("boundary_scanner_locale");
				writer.WriteStringValue(BoundaryScannerLocaleValue);
			}

			if (EncoderValue is not null)
			{
				writer.WritePropertyName("encoder");
				JsonSerializer.Serialize(writer, EncoderValue, options);
			}

			if (FragmenterValue is not null)
			{
				writer.WritePropertyName("fragmenter");
				JsonSerializer.Serialize(writer, FragmenterValue, options);
			}

			if (FragmentOffsetValue.HasValue)
			{
				writer.WritePropertyName("fragment_offset");
				writer.WriteNumberValue(FragmentOffsetValue.Value);
			}

			if (FragmentSizeValue.HasValue)
			{
				writer.WritePropertyName("fragment_size");
				writer.WriteNumberValue(FragmentSizeValue.Value);
			}

			if (MaxFragmentLengthValue.HasValue)
			{
				writer.WritePropertyName("max_fragment_length");
				writer.WriteNumberValue(MaxFragmentLengthValue.Value);
			}

			if (NoMatchSizeValue.HasValue)
			{
				writer.WritePropertyName("no_match_size");
				writer.WriteNumberValue(NoMatchSizeValue.Value);
			}

			if (NumberOfFragmentsValue.HasValue)
			{
				writer.WritePropertyName("number_of_fragments");
				writer.WriteNumberValue(NumberOfFragmentsValue.Value);
			}

			if (OrderValue is not null)
			{
				writer.WritePropertyName("order");
				JsonSerializer.Serialize(writer, OrderValue, options);
			}

			if (PostTagsValue is not null)
			{
				writer.WritePropertyName("post_tags");
				JsonSerializer.Serialize(writer, PostTagsValue, options);
			}

			if (PreTagsValue is not null)
			{
				writer.WritePropertyName("pre_tags");
				JsonSerializer.Serialize(writer, PreTagsValue, options);
			}

			if (RequireFieldMatchValue.HasValue)
			{
				writer.WritePropertyName("require_field_match");
				writer.WriteBooleanValue(RequireFieldMatchValue.Value);
			}

			if (TagsSchemaValue is not null)
			{
				writer.WritePropertyName("tags_schema");
				JsonSerializer.Serialize(writer, TagsSchemaValue, options);
			}

			if (HighlightQueryDescriptor is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, HighlightQueryDescriptor, options);
			}
			else if (HighlightQueryDescriptorAction is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<T>(HighlightQueryDescriptorAction), options);
			}
			else if (HighlightQueryValue is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, HighlightQueryValue, options);
			}

			if (MaxAnalyzedOffsetValue is not null)
			{
				writer.WritePropertyName("max_analyzed_offset");
				JsonSerializer.Serialize(writer, MaxAnalyzedOffsetValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class HighlightField
	{
		[JsonInclude]
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner")]
		public Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonInclude]
		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("force_source")]
		public bool? ForceSource { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragmenter")]
		public Elastic.Clients.Elasticsearch.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonInclude]
		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? HighlightQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("matched_fields")]
		public Elastic.Clients.Elasticsearch.Fields? MatchedFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.HighlighterOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("phrase_limit")]
		public int? PhraseLimit { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonInclude]
		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("tags_schema")]
		public Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.HighlighterType? Type { get; set; }
	}

	public sealed partial class HighlightFieldDescriptor<T> : DescriptorBase<HighlightFieldDescriptor<T>>
	{
		public HighlightFieldDescriptor()
		{
		}

		internal HighlightFieldDescriptor(Action<HighlightFieldDescriptor<T>> configure) => configure.Invoke(this);
		internal string? BoundaryCharsValue { get; private set; }

		internal int? BoundaryMaxScanValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.BoundaryScanner? BoundaryScannerValue { get; private set; }

		internal string? BoundaryScannerLocaleValue { get; private set; }

		internal string? FieldValue { get; private set; }

		internal bool? ForceSourceValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterFragmenter? FragmenterValue { get; private set; }

		internal int? FragmentOffsetValue { get; private set; }

		internal int? FragmentSizeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? HighlightQueryValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Fields? MatchedFieldsValue { get; private set; }

		internal int? MaxFragmentLengthValue { get; private set; }

		internal int? NoMatchSizeValue { get; private set; }

		internal int? NumberOfFragmentsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterOrder? OrderValue { get; private set; }

		internal int? PhraseLimitValue { get; private set; }

		internal IEnumerable<string>? PostTagsValue { get; private set; }

		internal IEnumerable<string>? PreTagsValue { get; private set; }

		internal bool? RequireFieldMatchValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterTagsSchema? TagsSchemaValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.HighlighterType? TypeValue { get; private set; }

		internal QueryDsl.QueryContainerDescriptor<T> HighlightQueryDescriptor { get; private set; }

		internal Action<QueryDsl.QueryContainerDescriptor<T>> HighlightQueryDescriptorAction { get; private set; }

		public HighlightFieldDescriptor<T> BoundaryChars(string? boundaryChars) => Assign(boundaryChars, (a, v) => a.BoundaryCharsValue = v);
		public HighlightFieldDescriptor<T> BoundaryMaxScan(int? boundaryMaxScan) => Assign(boundaryMaxScan, (a, v) => a.BoundaryMaxScanValue = v);
		public HighlightFieldDescriptor<T> BoundaryScanner(Elastic.Clients.Elasticsearch.BoundaryScanner? boundaryScanner) => Assign(boundaryScanner, (a, v) => a.BoundaryScannerValue = v);
		public HighlightFieldDescriptor<T> BoundaryScannerLocale(string? boundaryScannerLocale) => Assign(boundaryScannerLocale, (a, v) => a.BoundaryScannerLocaleValue = v);
		public HighlightFieldDescriptor<T> Field(string? field) => Assign(field, (a, v) => a.FieldValue = v);
		public HighlightFieldDescriptor<T> ForceSource(bool? forceSource = true) => Assign(forceSource, (a, v) => a.ForceSourceValue = v);
		public HighlightFieldDescriptor<T> Fragmenter(Elastic.Clients.Elasticsearch.HighlighterFragmenter? fragmenter) => Assign(fragmenter, (a, v) => a.FragmenterValue = v);
		public HighlightFieldDescriptor<T> FragmentOffset(int? fragmentOffset) => Assign(fragmentOffset, (a, v) => a.FragmentOffsetValue = v);
		public HighlightFieldDescriptor<T> FragmentSize(int? fragmentSize) => Assign(fragmentSize, (a, v) => a.FragmentSizeValue = v);
		public HighlightFieldDescriptor<T> HighlightQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? highlightQuery)
		{
			HighlightQueryDescriptor = null;
			HighlightQueryDescriptorAction = null;
			return Assign(highlightQuery, (a, v) => a.HighlightQueryValue = v);
		}

		public HighlightFieldDescriptor<T> HighlightQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			HighlightQueryValue = null;
			HighlightQueryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.HighlightQueryDescriptor = v);
		}

		public HighlightFieldDescriptor<T> HighlightQuery(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			HighlightQueryValue = null;
			HighlightQueryDescriptorAction = null;
			return Assign(configure, (a, v) => a.HighlightQueryDescriptorAction = v);
		}

		public HighlightFieldDescriptor<T> MatchedFields(Elastic.Clients.Elasticsearch.Fields? matchedFields) => Assign(matchedFields, (a, v) => a.MatchedFieldsValue = v);
		public HighlightFieldDescriptor<T> MaxFragmentLength(int? maxFragmentLength) => Assign(maxFragmentLength, (a, v) => a.MaxFragmentLengthValue = v);
		public HighlightFieldDescriptor<T> NoMatchSize(int? noMatchSize) => Assign(noMatchSize, (a, v) => a.NoMatchSizeValue = v);
		public HighlightFieldDescriptor<T> NumberOfFragments(int? numberOfFragments) => Assign(numberOfFragments, (a, v) => a.NumberOfFragmentsValue = v);
		public HighlightFieldDescriptor<T> Order(Elastic.Clients.Elasticsearch.HighlighterOrder? order) => Assign(order, (a, v) => a.OrderValue = v);
		public HighlightFieldDescriptor<T> PhraseLimit(int? phraseLimit) => Assign(phraseLimit, (a, v) => a.PhraseLimitValue = v);
		public HighlightFieldDescriptor<T> PostTags(IEnumerable<string>? postTags) => Assign(postTags, (a, v) => a.PostTagsValue = v);
		public HighlightFieldDescriptor<T> PreTags(IEnumerable<string>? preTags) => Assign(preTags, (a, v) => a.PreTagsValue = v);
		public HighlightFieldDescriptor<T> RequireFieldMatch(bool? requireFieldMatch = true) => Assign(requireFieldMatch, (a, v) => a.RequireFieldMatchValue = v);
		public HighlightFieldDescriptor<T> TagsSchema(Elastic.Clients.Elasticsearch.HighlighterTagsSchema? tagsSchema) => Assign(tagsSchema, (a, v) => a.TagsSchemaValue = v);
		public HighlightFieldDescriptor<T> Type(Elastic.Clients.Elasticsearch.HighlighterType? type) => Assign(type, (a, v) => a.TypeValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(BoundaryCharsValue))
			{
				writer.WritePropertyName("boundary_chars");
				writer.WriteStringValue(BoundaryCharsValue);
			}

			if (BoundaryMaxScanValue.HasValue)
			{
				writer.WritePropertyName("boundary_max_scan");
				writer.WriteNumberValue(BoundaryMaxScanValue.Value);
			}

			if (BoundaryScannerValue is not null)
			{
				writer.WritePropertyName("boundary_scanner");
				JsonSerializer.Serialize(writer, BoundaryScannerValue, options);
			}

			if (!string.IsNullOrEmpty(BoundaryScannerLocaleValue))
			{
				writer.WritePropertyName("boundary_scanner_locale");
				writer.WriteStringValue(BoundaryScannerLocaleValue);
			}

			if (FieldValue is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, FieldValue, options);
			}

			if (ForceSourceValue.HasValue)
			{
				writer.WritePropertyName("force_source");
				writer.WriteBooleanValue(ForceSourceValue.Value);
			}

			if (FragmenterValue is not null)
			{
				writer.WritePropertyName("fragmenter");
				JsonSerializer.Serialize(writer, FragmenterValue, options);
			}

			if (FragmentOffsetValue.HasValue)
			{
				writer.WritePropertyName("fragment_offset");
				writer.WriteNumberValue(FragmentOffsetValue.Value);
			}

			if (FragmentSizeValue.HasValue)
			{
				writer.WritePropertyName("fragment_size");
				writer.WriteNumberValue(FragmentSizeValue.Value);
			}

			if (HighlightQueryDescriptor is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, HighlightQueryDescriptor, options);
			}
			else if (HighlightQueryDescriptorAction is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<T>(HighlightQueryDescriptorAction), options);
			}
			else if (HighlightQueryValue is not null)
			{
				writer.WritePropertyName("highlight_query");
				JsonSerializer.Serialize(writer, HighlightQueryValue, options);
			}

			if (MatchedFieldsValue is not null)
			{
				writer.WritePropertyName("matched_fields");
				JsonSerializer.Serialize(writer, MatchedFieldsValue, options);
			}

			if (MaxFragmentLengthValue.HasValue)
			{
				writer.WritePropertyName("max_fragment_length");
				writer.WriteNumberValue(MaxFragmentLengthValue.Value);
			}

			if (NoMatchSizeValue.HasValue)
			{
				writer.WritePropertyName("no_match_size");
				writer.WriteNumberValue(NoMatchSizeValue.Value);
			}

			if (NumberOfFragmentsValue.HasValue)
			{
				writer.WritePropertyName("number_of_fragments");
				writer.WriteNumberValue(NumberOfFragmentsValue.Value);
			}

			if (OrderValue is not null)
			{
				writer.WritePropertyName("order");
				JsonSerializer.Serialize(writer, OrderValue, options);
			}

			if (PhraseLimitValue.HasValue)
			{
				writer.WritePropertyName("phrase_limit");
				writer.WriteNumberValue(PhraseLimitValue.Value);
			}

			if (PostTagsValue is not null)
			{
				writer.WritePropertyName("post_tags");
				JsonSerializer.Serialize(writer, PostTagsValue, options);
			}

			if (PreTagsValue is not null)
			{
				writer.WritePropertyName("pre_tags");
				JsonSerializer.Serialize(writer, PreTagsValue, options);
			}

			if (RequireFieldMatchValue.HasValue)
			{
				writer.WritePropertyName("require_field_match");
				writer.WriteBooleanValue(RequireFieldMatchValue.Value);
			}

			if (TagsSchemaValue is not null)
			{
				writer.WritePropertyName("tags_schema");
				JsonSerializer.Serialize(writer, TagsSchemaValue, options);
			}

			if (TypeValue is not null)
			{
				writer.WritePropertyName("type");
				JsonSerializer.Serialize(writer, TypeValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class Hit<TDocument>
	{
		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("_score")]
		public double? Score { get; init; }

		[JsonInclude]
		[JsonPropertyName("_type")]
		public string? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("_explanation")]
		public Elastic.Clients.Elasticsearch.Explanation? Explanation { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields { get; init; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public Dictionary<string, IReadOnlyCollection<string>>? Highlight { get; init; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.InnerHitsResult>? InnerHits { get; init; }

		[JsonInclude]
		[JsonPropertyName("matched_queries")]
		public IReadOnlyCollection<string>? MatchedQueries { get; init; }

		[JsonInclude]
		[JsonPropertyName("_nested")]
		public Elastic.Clients.Elasticsearch.NestedIdentity? Nested { get; init; }

		[JsonInclude]
		[JsonPropertyName("_ignored")]
		public IReadOnlyCollection<string>? Ignored { get; init; }

		[JsonInclude]
		[JsonPropertyName("_shard")]
		public string? Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("_node")]
		public string? Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public string? Routing { get; init; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public TDocument? Source { get; init; }

		[JsonInclude]
		[JsonPropertyName("_seq_no")]
		public long? SeqNo { get; init; }

		[JsonInclude]
		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm { get; init; }

		[JsonInclude]
		[JsonPropertyName("_version")]
		public long? Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public IReadOnlyCollection<object>? Sort { get; init; }
	}

	public partial class HitsMetadata<T>
	{
		[JsonInclude]
		[JsonPropertyName("total")]
		public Union<Elastic.Clients.Elasticsearch.TotalHits, long> Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Hit<T>> Hits { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_score")]
		public double? MaxScore { get; init; }
	}

	public partial class IndexingStats
	{
		[JsonInclude]
		[JsonPropertyName("index_current")]
		public long IndexCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_current")]
		public long DeleteCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_time")]
		public string? DeleteTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_time_in_millis")]
		public long DeleteTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("delete_total")]
		public long DeleteTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("is_throttled")]
		public bool IsThrottled { get; init; }

		[JsonInclude]
		[JsonPropertyName("noop_update_total")]
		public long NoopUpdateTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_time")]
		public string? IndexTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_time_in_millis")]
		public long IndexTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_total")]
		public long IndexTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_failed")]
		public long IndexFailed { get; init; }

		[JsonInclude]
		[JsonPropertyName("types")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.IndexingStats>? Types { get; init; }
	}

	public abstract partial class IndicesResponseBase : AcknowledgedResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics? Shards { get; init; }
	}

	public partial class InlineGet<TDocument>
	{
		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields { get; init; }

		[JsonInclude]
		[JsonPropertyName("found")]
		public bool Found { get; init; }

		[JsonInclude]
		[JsonPropertyName("_seq_no")]
		public long? SeqNo { get; init; }

		[JsonInclude]
		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm { get; init; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public string? Routing { get; init; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public TDocument Source { get; init; }
	}

	public partial class InlineScript : ScriptBase
	{
		[JsonInclude]
		[JsonPropertyName("lang")]
		public Elastic.Clients.Elasticsearch.ScriptLanguage? Lang { get; set; }

		[JsonInclude]
		[JsonPropertyName("options")]
		public Dictionary<string, string>? Options { get; set; }

		[JsonInclude]
		[JsonPropertyName("source")]
		public string Source { get; set; }
	}

	public sealed partial class InlineScriptDescriptor : DescriptorBase<InlineScriptDescriptor>
	{
		public InlineScriptDescriptor()
		{
		}

		internal InlineScriptDescriptor(Action<InlineScriptDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.ScriptLanguage? LangValue { get; private set; }

		internal Dictionary<string, string>? OptionsValue { get; private set; }

		internal string SourceValue { get; private set; }

		public InlineScriptDescriptor Lang(Elastic.Clients.Elasticsearch.ScriptLanguage? lang) => Assign(lang, (a, v) => a.LangValue = v);
		public InlineScriptDescriptor Options(Func<FluentDictionary<string?, string?>, FluentDictionary<string?, string?>> selector) => Assign(selector, (a, v) => a.OptionsValue = v?.Invoke(new FluentDictionary<string?, string?>()));
		public InlineScriptDescriptor Source(string source) => Assign(source, (a, v) => a.SourceValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (LangValue is not null)
			{
				writer.WritePropertyName("lang");
				JsonSerializer.Serialize(writer, LangValue, options);
			}

			if (OptionsValue is not null)
			{
				writer.WritePropertyName("options");
				JsonSerializer.Serialize(writer, OptionsValue, options);
			}

			writer.WritePropertyName("source");
			writer.WriteStringValue(SourceValue);
			writer.WriteEndObject();
		}
	}

	public partial class InnerHits
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("collapse")]
		public Elastic.Clients.Elasticsearch.FieldCollapse? Collapse { get; set; }

		[JsonInclude]
		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public Elastic.Clients.Elasticsearch.Highlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Elastic.Clients.Elasticsearch.Sort? Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.SourceConfig? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("stored_field")]
		public Elastic.Clients.Elasticsearch.Fields? StoredField { get; set; }

		[JsonInclude]
		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public sealed partial class InnerHitsDescriptor<T> : DescriptorBase<InnerHitsDescriptor<T>>
	{
		public InnerHitsDescriptor()
		{
		}

		internal InnerHitsDescriptor(Action<InnerHitsDescriptor<T>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Name? NameValue { get; private set; }

		internal int? SizeValue { get; private set; }

		internal int? FromValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.FieldCollapse? CollapseValue { get; private set; }

		internal IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFieldsValue { get; private set; }

		internal bool? ExplainValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Highlight? HighlightValue { get; private set; }

		internal bool? IgnoreUnmappedValue { get; private set; }

		internal Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ScriptFieldsValue { get; private set; }

		internal bool? SeqNoPrimaryTermValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Sort? SortValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.SourceConfig? SourceValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Fields? StoredFieldValue { get; private set; }

		internal bool? TrackScoresValue { get; private set; }

		internal bool? VersionValue { get; private set; }

		internal FieldCollapseDescriptor<T> CollapseDescriptor { get; private set; }

		internal HighlightDescriptor<T> HighlightDescriptor { get; private set; }

		internal Action<FieldCollapseDescriptor<T>> CollapseDescriptorAction { get; private set; }

		internal Action<HighlightDescriptor<T>> HighlightDescriptorAction { get; private set; }

		public InnerHitsDescriptor<T> Name(Elastic.Clients.Elasticsearch.Name? name) => Assign(name, (a, v) => a.NameValue = v);
		public InnerHitsDescriptor<T> Size(int? size) => Assign(size, (a, v) => a.SizeValue = v);
		public InnerHitsDescriptor<T> From(int? from) => Assign(from, (a, v) => a.FromValue = v);
		public InnerHitsDescriptor<T> Collapse(Elastic.Clients.Elasticsearch.FieldCollapse? collapse)
		{
			CollapseDescriptor = null;
			CollapseDescriptorAction = null;
			return Assign(collapse, (a, v) => a.CollapseValue = v);
		}

		public InnerHitsDescriptor<T> Collapse(Elastic.Clients.Elasticsearch.FieldCollapseDescriptor<T> descriptor)
		{
			CollapseValue = null;
			CollapseDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.CollapseDescriptor = v);
		}

		public InnerHitsDescriptor<T> Collapse(Action<Elastic.Clients.Elasticsearch.FieldCollapseDescriptor<T>> configure)
		{
			CollapseValue = null;
			CollapseDescriptorAction = null;
			return Assign(configure, (a, v) => a.CollapseDescriptorAction = v);
		}

		public InnerHitsDescriptor<T> DocvalueFields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? docvalueFields) => Assign(docvalueFields, (a, v) => a.DocvalueFieldsValue = v);
		public InnerHitsDescriptor<T> Explain(bool? explain = true) => Assign(explain, (a, v) => a.ExplainValue = v);
		public InnerHitsDescriptor<T> Highlight(Elastic.Clients.Elasticsearch.Highlight? highlight)
		{
			HighlightDescriptor = null;
			HighlightDescriptorAction = null;
			return Assign(highlight, (a, v) => a.HighlightValue = v);
		}

		public InnerHitsDescriptor<T> Highlight(Elastic.Clients.Elasticsearch.HighlightDescriptor<T> descriptor)
		{
			HighlightValue = null;
			HighlightDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.HighlightDescriptor = v);
		}

		public InnerHitsDescriptor<T> Highlight(Action<Elastic.Clients.Elasticsearch.HighlightDescriptor<T>> configure)
		{
			HighlightValue = null;
			HighlightDescriptorAction = null;
			return Assign(configure, (a, v) => a.HighlightDescriptorAction = v);
		}

		public InnerHitsDescriptor<T> IgnoreUnmapped(bool? ignoreUnmapped = true) => Assign(ignoreUnmapped, (a, v) => a.IgnoreUnmappedValue = v);
		public InnerHitsDescriptor<T> ScriptFields(Func<FluentDictionary<string?, Elastic.Clients.Elasticsearch.ScriptField?>, FluentDictionary<string?, Elastic.Clients.Elasticsearch.ScriptField?>> selector) => Assign(selector, (a, v) => a.ScriptFieldsValue = v?.Invoke(new FluentDictionary<string?, Elastic.Clients.Elasticsearch.ScriptField?>()));
		public InnerHitsDescriptor<T> SeqNoPrimaryTerm(bool? seqNoPrimaryTerm = true) => Assign(seqNoPrimaryTerm, (a, v) => a.SeqNoPrimaryTermValue = v);
		public InnerHitsDescriptor<T> Fields(Elastic.Clients.Elasticsearch.Fields? fields) => Assign(fields, (a, v) => a.FieldsValue = v);
		public InnerHitsDescriptor<T> Sort(Elastic.Clients.Elasticsearch.Sort? sort) => Assign(sort, (a, v) => a.SortValue = v);
		public InnerHitsDescriptor<T> Source(Elastic.Clients.Elasticsearch.SourceConfig? source) => Assign(source, (a, v) => a.SourceValue = v);
		public InnerHitsDescriptor<T> StoredField(Elastic.Clients.Elasticsearch.Fields? storedField) => Assign(storedField, (a, v) => a.StoredFieldValue = v);
		public InnerHitsDescriptor<T> TrackScores(bool? trackScores = true) => Assign(trackScores, (a, v) => a.TrackScoresValue = v);
		public InnerHitsDescriptor<T> Version(bool? version = true) => Assign(version, (a, v) => a.VersionValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (NameValue is not null)
			{
				writer.WritePropertyName("name");
				JsonSerializer.Serialize(writer, NameValue, options);
			}

			if (SizeValue.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(SizeValue.Value);
			}

			if (FromValue.HasValue)
			{
				writer.WritePropertyName("from");
				writer.WriteNumberValue(FromValue.Value);
			}

			if (CollapseDescriptor is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseDescriptor, options);
			}
			else if (CollapseDescriptorAction is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, new FieldCollapseDescriptor<T>(CollapseDescriptorAction), options);
			}
			else if (CollapseValue is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseValue, options);
			}

			if (DocvalueFieldsValue is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, DocvalueFieldsValue, options);
			}

			if (ExplainValue.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(ExplainValue.Value);
			}

			if (HighlightDescriptor is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightDescriptor, options);
			}
			else if (HighlightDescriptorAction is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, new HighlightDescriptor<T>(HighlightDescriptorAction), options);
			}
			else if (HighlightValue is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightValue, options);
			}

			if (IgnoreUnmappedValue.HasValue)
			{
				writer.WritePropertyName("ignore_unmapped");
				writer.WriteBooleanValue(IgnoreUnmappedValue.Value);
			}

			if (ScriptFieldsValue is not null)
			{
				writer.WritePropertyName("script_fields");
				JsonSerializer.Serialize(writer, ScriptFieldsValue, options);
			}

			if (SeqNoPrimaryTermValue.HasValue)
			{
				writer.WritePropertyName("seq_no_primary_term");
				writer.WriteBooleanValue(SeqNoPrimaryTermValue.Value);
			}

			if (FieldsValue is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, FieldsValue, options);
			}

			if (SortValue is not null)
			{
				writer.WritePropertyName("sort");
				JsonSerializer.Serialize(writer, SortValue, options);
			}

			if (SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (StoredFieldValue is not null)
			{
				writer.WritePropertyName("stored_field");
				JsonSerializer.Serialize(writer, StoredFieldValue, options);
			}

			if (TrackScoresValue.HasValue)
			{
				writer.WritePropertyName("track_scores");
				writer.WriteBooleanValue(TrackScoresValue.Value);
			}

			if (VersionValue.HasValue)
			{
				writer.WritePropertyName("version");
				writer.WriteBooleanValue(VersionValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class InnerHitsResult
	{
		[JsonInclude]
		[JsonPropertyName("hits")]
		public Elastic.Clients.Elasticsearch.HitsMetadata<object> Hits { get; init; }
	}

	public partial class LatLonGeoLocation
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat { get; init; }

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon { get; init; }
	}

	public partial class MergesStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public long Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_docs")]
		public long CurrentDocs { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_size")]
		public string? CurrentSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_size_in_bytes")]
		public long CurrentSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public long Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_auto_throttle")]
		public string? TotalAutoThrottle { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_auto_throttle_in_bytes")]
		public long TotalAutoThrottleInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_docs")]
		public long TotalDocs { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size")]
		public string? TotalSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_size_in_bytes")]
		public long TotalSizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_stopped_time")]
		public string? TotalStoppedTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_stopped_time_in_millis")]
		public long TotalStoppedTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_throttled_time")]
		public string? TotalThrottledTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_throttled_time_in_millis")]
		public long TotalThrottledTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis { get; init; }
	}

	public partial class NestedIdentity
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; init; }

		[JsonInclude]
		[JsonPropertyName("offset")]
		public int Offset { get; init; }

		[JsonInclude]
		[JsonPropertyName("_nested")]
		public Elastic.Clients.Elasticsearch.NestedIdentity? Nested { get; init; }
	}

	public partial class NestedSortValue
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Filter { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_children")]
		public int? MaxChildren { get; init; }

		[JsonInclude]
		[JsonPropertyName("nested")]
		public Elastic.Clients.Elasticsearch.NestedSortValue? Nested { get; init; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string Path { get; init; }
	}

	public partial class NodeStatistics
	{
		[JsonInclude]
		[JsonPropertyName("failures")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ErrorCause>? Failures { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public int Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("successful")]
		public int Successful { get; init; }

		[JsonInclude]
		[JsonPropertyName("failed")]
		public int Failed { get; init; }
	}

	public partial class PhraseSuggestOption
	{
		[JsonInclude]
		[JsonPropertyName("text")]
		public string Text { get; init; }

		[JsonInclude]
		[JsonPropertyName("highlighted")]
		public string Highlighted { get; init; }

		[JsonInclude]
		[JsonPropertyName("score")]
		public double Score { get; init; }
	}

	public partial class PluginStats
	{
		[JsonInclude]
		[JsonPropertyName("classname")]
		public string Classname { get; init; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("elasticsearch_version")]
		public string ElasticsearchVersion { get; init; }

		[JsonInclude]
		[JsonPropertyName("extended_plugins")]
		public IReadOnlyCollection<string> ExtendedPlugins { get; init; }

		[JsonInclude]
		[JsonPropertyName("has_native_controller")]
		public bool HasNativeController { get; init; }

		[JsonInclude]
		[JsonPropertyName("java_version")]
		public string JavaVersion { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public string Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("licensed")]
		public bool Licensed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class PointInTimeReference
	{
		[JsonInclude]
		[JsonPropertyName("id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("keep_alive")]
		public Elastic.Clients.Elasticsearch.Time? KeepAlive { get; set; }
	}

	public sealed partial class PointInTimeReferenceDescriptor : DescriptorBase<PointInTimeReferenceDescriptor>
	{
		public PointInTimeReferenceDescriptor()
		{
		}

		internal PointInTimeReferenceDescriptor(Action<PointInTimeReferenceDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Id IdValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Time? KeepAliveValue { get; private set; }

		public PointInTimeReferenceDescriptor Id(Elastic.Clients.Elasticsearch.Id id) => Assign(id, (a, v) => a.IdValue = v);
		public PointInTimeReferenceDescriptor KeepAlive(Elastic.Clients.Elasticsearch.Time? keepAlive) => Assign(keepAlive, (a, v) => a.KeepAliveValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("id");
			JsonSerializer.Serialize(writer, IdValue, options);
			if (KeepAliveValue is not null)
			{
				writer.WritePropertyName("keep_alive");
				JsonSerializer.Serialize(writer, KeepAliveValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class Profile
	{
		[JsonInclude]
		[JsonPropertyName("shards")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ShardProfile> Shards { get; init; }
	}

	public partial class QueryBreakdown
	{
		[JsonInclude]
		[JsonPropertyName("advance")]
		public long Advance { get; init; }

		[JsonInclude]
		[JsonPropertyName("advance_count")]
		public long AdvanceCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("build_scorer")]
		public long BuildScorer { get; init; }

		[JsonInclude]
		[JsonPropertyName("build_scorer_count")]
		public long BuildScorerCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("create_weight")]
		public long CreateWeight { get; init; }

		[JsonInclude]
		[JsonPropertyName("create_weight_count")]
		public long CreateWeightCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public long Match { get; init; }

		[JsonInclude]
		[JsonPropertyName("match_count")]
		public long MatchCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("shallow_advance")]
		public long ShallowAdvance { get; init; }

		[JsonInclude]
		[JsonPropertyName("shallow_advance_count")]
		public long ShallowAdvanceCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("next_doc")]
		public long NextDoc { get; init; }

		[JsonInclude]
		[JsonPropertyName("next_doc_count")]
		public long NextDocCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("score")]
		public long Score { get; init; }

		[JsonInclude]
		[JsonPropertyName("score_count")]
		public long ScoreCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("compute_max_score")]
		public long ComputeMaxScore { get; init; }

		[JsonInclude]
		[JsonPropertyName("compute_max_score_count")]
		public long ComputeMaxScoreCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("set_min_competitive_score")]
		public long SetMinCompetitiveScore { get; init; }

		[JsonInclude]
		[JsonPropertyName("set_min_competitive_score_count")]
		public long SetMinCompetitiveScoreCount { get; init; }
	}

	public partial class QueryCacheStats
	{
		[JsonInclude]
		[JsonPropertyName("cache_count")]
		public int CacheCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("cache_size")]
		public int CacheSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("evictions")]
		public int Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("hit_count")]
		public int HitCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public int MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("miss_count")]
		public int MissCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_count")]
		public int TotalCount { get; init; }
	}

	public partial class QueryProfile
	{
		[JsonInclude]
		[JsonPropertyName("breakdown")]
		public Elastic.Clients.Elasticsearch.QueryBreakdown Breakdown { get; init; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string Description { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_in_nanos")]
		public long TimeInNanos { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("children")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.QueryProfile>? Children { get; init; }
	}

	public partial class RecoveryStats
	{
		[JsonInclude]
		[JsonPropertyName("current_as_source")]
		public long CurrentAsSource { get; init; }

		[JsonInclude]
		[JsonPropertyName("current_as_target")]
		public long CurrentAsTarget { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time")]
		public string? ThrottleTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("throttle_time_in_millis")]
		public long ThrottleTimeInMillis { get; init; }
	}

	public partial class RefreshStats
	{
		[JsonInclude]
		[JsonPropertyName("external_total")]
		public long ExternalTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("external_total_time_in_millis")]
		public long ExternalTotalTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("listeners")]
		public long Listeners { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public long Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis { get; init; }
	}

	public abstract partial class RequestBase
	{
	}

	public sealed partial class RequestBaseDescriptor : DescriptorBase<RequestBaseDescriptor>
	{
		public RequestBaseDescriptor()
		{
		}

		internal RequestBaseDescriptor(Action<RequestBaseDescriptor> configure) => configure.Invoke(this);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WriteEndObject();
		}
	}

	public partial class RequestCacheStats
	{
		[JsonInclude]
		[JsonPropertyName("evictions")]
		public long Evictions { get; init; }

		[JsonInclude]
		[JsonPropertyName("hit_count")]
		public long HitCount { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size")]
		public string? MemorySize { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("miss_count")]
		public long MissCount { get; init; }
	}

	public partial class Rescore
	{
		[JsonInclude]
		[JsonPropertyName("query")]
		public Elastic.Clients.Elasticsearch.RescoreQuery Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("window_size")]
		public int? WindowSize { get; set; }
	}

	public sealed partial class RescoreDescriptor<T> : DescriptorBase<RescoreDescriptor<T>>
	{
		public RescoreDescriptor()
		{
		}

		internal RescoreDescriptor(Action<RescoreDescriptor<T>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.RescoreQuery QueryValue { get; private set; }

		internal int? WindowSizeValue { get; private set; }

		internal RescoreQueryDescriptor<T> QueryDescriptor { get; private set; }

		internal Action<RescoreQueryDescriptor<T>> QueryDescriptorAction { get; private set; }

		public RescoreDescriptor<T> Query(Elastic.Clients.Elasticsearch.RescoreQuery query)
		{
			QueryDescriptor = null;
			QueryDescriptorAction = null;
			return Assign(query, (a, v) => a.QueryValue = v);
		}

		public RescoreDescriptor<T> Query(Elastic.Clients.Elasticsearch.RescoreQueryDescriptor<T> descriptor)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.QueryDescriptor = v);
		}

		public RescoreDescriptor<T> Query(Action<Elastic.Clients.Elasticsearch.RescoreQueryDescriptor<T>> configure)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			return Assign(configure, (a, v) => a.QueryDescriptorAction = v);
		}

		public RescoreDescriptor<T> WindowSize(int? windowSize) => Assign(windowSize, (a, v) => a.WindowSizeValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (QueryDescriptor is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryDescriptor, options);
			}
			else if (QueryDescriptorAction is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, new RescoreQueryDescriptor<T>(QueryDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryValue, options);
			}

			if (WindowSizeValue.HasValue)
			{
				writer.WritePropertyName("window_size");
				writer.WriteNumberValue(WindowSizeValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class RescoreQuery
	{
		[JsonInclude]
		[JsonPropertyName("rescore_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("query_weight")]
		public double? QueryWeight { get; set; }

		[JsonInclude]
		[JsonPropertyName("rescore_query_weight")]
		public double? RescoreQueryWeight { get; set; }

		[JsonInclude]
		[JsonPropertyName("score_mode")]
		public Elastic.Clients.Elasticsearch.ScoreMode? ScoreMode { get; set; }
	}

	public sealed partial class RescoreQueryDescriptor<T> : DescriptorBase<RescoreQueryDescriptor<T>>
	{
		public RescoreQueryDescriptor()
		{
		}

		internal RescoreQueryDescriptor(Action<RescoreQueryDescriptor<T>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer QueryValue { get; private set; }

		internal double? QueryWeightValue { get; private set; }

		internal double? RescoreQueryWeightValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.ScoreMode? ScoreModeValue { get; private set; }

		internal QueryDsl.QueryContainerDescriptor<T> QueryDescriptor { get; private set; }

		internal Action<QueryDsl.QueryContainerDescriptor<T>> QueryDescriptorAction { get; private set; }

		public RescoreQueryDescriptor<T> Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer query)
		{
			QueryDescriptor = null;
			QueryDescriptorAction = null;
			return Assign(query, (a, v) => a.QueryValue = v);
		}

		public RescoreQueryDescriptor<T> Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.QueryDescriptor = v);
		}

		public RescoreQueryDescriptor<T> Query(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			return Assign(configure, (a, v) => a.QueryDescriptorAction = v);
		}

		public RescoreQueryDescriptor<T> QueryWeight(double? queryWeight) => Assign(queryWeight, (a, v) => a.QueryWeightValue = v);
		public RescoreQueryDescriptor<T> RescoreQueryWeight(double? rescoreQueryWeight) => Assign(rescoreQueryWeight, (a, v) => a.RescoreQueryWeightValue = v);
		public RescoreQueryDescriptor<T> ScoreMode(Elastic.Clients.Elasticsearch.ScoreMode? scoreMode) => Assign(scoreMode, (a, v) => a.ScoreModeValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (QueryDescriptor is not null)
			{
				writer.WritePropertyName("rescore_query");
				JsonSerializer.Serialize(writer, QueryDescriptor, options);
			}
			else if (QueryDescriptorAction is not null)
			{
				writer.WritePropertyName("rescore_query");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<T>(QueryDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("rescore_query");
				JsonSerializer.Serialize(writer, QueryValue, options);
			}

			if (QueryWeightValue.HasValue)
			{
				writer.WritePropertyName("query_weight");
				writer.WriteNumberValue(QueryWeightValue.Value);
			}

			if (RescoreQueryWeightValue.HasValue)
			{
				writer.WritePropertyName("rescore_query_weight");
				writer.WriteNumberValue(RescoreQueryWeightValue.Value);
			}

			if (ScoreModeValue is not null)
			{
				writer.WritePropertyName("score_mode");
				JsonSerializer.Serialize(writer, ScoreModeValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class ResponseItem
	{
		[JsonInclude]
		[JsonPropertyName("_id")]
		public object? Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("_index")]
		public string Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public int Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("error")]
		public Elastic.Clients.Elasticsearch.ErrorCause? Error { get; init; }

		[JsonInclude]
		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm { get; init; }

		[JsonInclude]
		[JsonPropertyName("result")]
		public string? Result { get; init; }

		[JsonInclude]
		[JsonPropertyName("_seq_no")]
		public long? SeqNo { get; init; }

		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics? Shards { get; init; }

		[JsonInclude]
		[JsonPropertyName("_type")]
		public string? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("_version")]
		public long? Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("forced_refresh")]
		public bool? ForcedRefresh { get; init; }

		[JsonInclude]
		[JsonPropertyName("get")]
		public Elastic.Clients.Elasticsearch.InlineGet<Dictionary<string, object>>? Get { get; init; }
	}

	public partial class Retries
	{
		[JsonInclude]
		[JsonPropertyName("bulk")]
		public long Bulk { get; init; }

		[JsonInclude]
		[JsonPropertyName("search")]
		public long Search { get; init; }
	}

	public partial class ScoreSort : ISortOptionsVariant
	{
		[JsonIgnore]
		string ISortOptionsVariant.SortOptionsVariantName => "_score";
		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }
	}

	public abstract partial class ScriptBase
	{
		[JsonInclude]
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }
	}

	public sealed partial class ScriptBaseDescriptor : DescriptorBase<ScriptBaseDescriptor>
	{
		public ScriptBaseDescriptor()
		{
		}

		internal ScriptBaseDescriptor(Action<ScriptBaseDescriptor> configure) => configure.Invoke(this);
		internal Dictionary<string, object>? ParamsValue { get; private set; }

		public ScriptBaseDescriptor Params(Func<FluentDictionary<string?, object?>, FluentDictionary<string?, object?>> selector) => Assign(selector, (a, v) => a.ParamsValue = v?.Invoke(new FluentDictionary<string?, object?>()));
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ParamsValue is not null)
			{
				writer.WritePropertyName("params");
				JsonSerializer.Serialize(writer, ParamsValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class ScriptField
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure { get; set; }
	}

	public sealed partial class ScriptFieldDescriptor : DescriptorBase<ScriptFieldDescriptor>
	{
		public ScriptFieldDescriptor()
		{
		}

		internal ScriptFieldDescriptor(Action<ScriptFieldDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Script ScriptValue { get; private set; }

		internal bool? IgnoreFailureValue { get; private set; }

		public ScriptFieldDescriptor Script(Elastic.Clients.Elasticsearch.Script script) => Assign(script, (a, v) => a.ScriptValue = v);
		public ScriptFieldDescriptor IgnoreFailure(bool? ignoreFailure = true) => Assign(ignoreFailure, (a, v) => a.IgnoreFailureValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, ScriptValue, options);
			if (IgnoreFailureValue.HasValue)
			{
				writer.WritePropertyName("ignore_failure");
				writer.WriteBooleanValue(IgnoreFailureValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class ScriptSort : ISortOptionsVariant
	{
		[JsonIgnore]
		string ISortOptionsVariant.SortOptionsVariantName => "_script";
		[JsonInclude]
		[JsonPropertyName("order")]
		public Elastic.Clients.Elasticsearch.SortOrder? Order { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.ScriptSortType? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("mode")]
		public Elastic.Clients.Elasticsearch.SortMode? Mode { get; init; }

		[JsonInclude]
		[JsonPropertyName("nested")]
		public Elastic.Clients.Elasticsearch.NestedSortValue? Nested { get; init; }
	}

	public partial class SearchProfile
	{
		[JsonInclude]
		[JsonPropertyName("collector")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Collector> Collector { get; init; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.QueryProfile> Query { get; init; }

		[JsonInclude]
		[JsonPropertyName("rewrite_time")]
		public long RewriteTime { get; init; }
	}

	public partial class SearchStats
	{
		[JsonInclude]
		[JsonPropertyName("fetch_current")]
		public long FetchCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("fetch_time_in_millis")]
		public long FetchTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("fetch_total")]
		public long FetchTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("open_contexts")]
		public long? OpenContexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_current")]
		public long QueryCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_time_in_millis")]
		public long QueryTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("query_total")]
		public long QueryTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_current")]
		public long ScrollCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_time_in_millis")]
		public long ScrollTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("scroll_total")]
		public long ScrollTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_current")]
		public long SuggestCurrent { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_time_in_millis")]
		public long SuggestTimeInMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("suggest_total")]
		public long SuggestTotal { get; init; }

		[JsonInclude]
		[JsonPropertyName("groups")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.SearchStats>? Groups { get; init; }
	}

	public partial class SegmentsStats
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public int Count { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? DocValuesMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values_memory_in_bytes")]
		public int DocValuesMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("file_sizes")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.IndexManagement.Stats.ShardFileSizeInfo> FileSizes { get; init; }

		[JsonInclude]
		[JsonPropertyName("fixed_bit_set")]
		public Elastic.Clients.Elasticsearch.ByteSize? FixedBitSet { get; init; }

		[JsonInclude]
		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public int FixedBitSetMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? IndexWriterMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_max_memory_in_bytes")]
		public int? IndexWriterMaxMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_writer_memory_in_bytes")]
		public int IndexWriterMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public int MaxUnsafeAutoIdTimestamp { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? Memory { get; init; }

		[JsonInclude]
		[JsonPropertyName("memory_in_bytes")]
		public int MemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? NormsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms_memory_in_bytes")]
		public int NormsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("points_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? PointsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("points_memory_in_bytes")]
		public int PointsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("stored_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? StoredMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public int StoredFieldsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("terms_memory_in_bytes")]
		public int TermsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("terms_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? TermsMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vectory_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? TermVectoryMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public int TermVectorsMemoryInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("version_map_memory")]
		public Elastic.Clients.Elasticsearch.ByteSize? VersionMapMemory { get; init; }

		[JsonInclude]
		[JsonPropertyName("version_map_memory_in_bytes")]
		public int VersionMapMemoryInBytes { get; init; }
	}

	public partial class ShardFailure
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string? Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("reason")]
		public Elastic.Clients.Elasticsearch.ErrorCause Reason { get; init; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public string? Status { get; init; }
	}

	public partial class ShardProfile
	{
		[JsonInclude]
		[JsonPropertyName("aggregations")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.AggregationProfile> Aggregations { get; init; }

		[JsonInclude]
		[JsonPropertyName("id")]
		public string Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("searches")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.SearchProfile> Searches { get; init; }

		[JsonInclude]
		[JsonPropertyName("fetch")]
		public Elastic.Clients.Elasticsearch.FetchProfile? Fetch { get; init; }
	}

	public abstract partial class ShardsOperationResponseBase : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics Shards { get; init; }
	}

	public partial class ShardStatistics
	{
		[JsonInclude]
		[JsonPropertyName("failed")]
		public int Failed { get; init; }

		[JsonInclude]
		[JsonPropertyName("successful")]
		public int Successful { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public int Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("failures")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.ShardFailure>? Failures { get; init; }

		[JsonInclude]
		[JsonPropertyName("skipped")]
		public int? Skipped { get; init; }
	}

	public partial class SlicedScroll
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("id")]
		public int Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("max")]
		public int Max { get; set; }
	}

	public sealed partial class SlicedScrollDescriptor<T> : DescriptorBase<SlicedScrollDescriptor<T>>
	{
		public SlicedScrollDescriptor()
		{
		}

		internal SlicedScrollDescriptor(Action<SlicedScrollDescriptor<T>> configure) => configure.Invoke(this);
		internal string? FieldValue { get; private set; }

		internal int IdValue { get; private set; }

		internal int MaxValue { get; private set; }

		public SlicedScrollDescriptor<T> Field(string? field) => Assign(field, (a, v) => a.FieldValue = v);
		public SlicedScrollDescriptor<T> Id(int id) => Assign(id, (a, v) => a.IdValue = v);
		public SlicedScrollDescriptor<T> Max(int max) => Assign(max, (a, v) => a.MaxValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (FieldValue is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, FieldValue, options);
			}

			writer.WritePropertyName("id");
			writer.WriteNumberValue(IdValue);
			writer.WritePropertyName("max");
			writer.WriteNumberValue(MaxValue);
			writer.WriteEndObject();
		}
	}

	public interface ISortOptionsVariant
	{
		string SortOptionsVariantName { get; }
	}

	[JsonConverter(typeof(SortOptionsConverter))]
	public partial class SortOptions : IContainer
	{
		public SortOptions(ISortOptionsVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal ISortOptionsVariant Variant { get; }
	}

	internal sealed class SortOptionsConverter : JsonConverter<SortOptions>
	{
		public override SortOptions Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			reader.Read();
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = reader.GetString();
			if (propertyName == "_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScoreSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_doc")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScoreSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_geo_distance")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.GeoDistanceSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_script")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScriptSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, SortOptions value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.SortOptionsVariantName);
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.ScoreSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.GeoDistanceSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.ScriptSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}

	public partial class SourceFilter
	{
		[JsonInclude]
		[JsonPropertyName("excludes")]
		public Elastic.Clients.Elasticsearch.Fields? Excludes { get; init; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public Elastic.Clients.Elasticsearch.Fields? Includes { get; init; }
	}

	public partial class StoredScriptId : ScriptBase
	{
		[JsonInclude]
		[JsonPropertyName("id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; init; }
	}

	public partial class StoreStats
	{
		[JsonInclude]
		[JsonPropertyName("size")]
		public Elastic.Clients.Elasticsearch.ByteSize? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public int SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("reserved")]
		public Elastic.Clients.Elasticsearch.ByteSize? Reserved { get; init; }

		[JsonInclude]
		[JsonPropertyName("reserved_in_bytes")]
		public int ReservedInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_data_set_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? TotalDataSetSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_data_set_size_in_bytes")]
		public int? TotalDataSetSizeInBytes { get; init; }
	}

	public partial class Suggest<T>
	{
		[JsonInclude]
		[JsonPropertyName("length")]
		public int Length { get; init; }

		[JsonInclude]
		[JsonPropertyName("offset")]
		public int Offset { get; init; }

		[JsonInclude]
		[JsonPropertyName("options")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.SuggestOption<T>> Options { get; init; }

		[JsonInclude]
		[JsonPropertyName("text")]
		public string Text { get; init; }
	}

	public partial class Suggester
	{
		[JsonInclude]
		[JsonPropertyName("text")]
		public string? Text { get; set; }
	}

	public sealed partial class SuggesterDescriptor : DescriptorBase<SuggesterDescriptor>
	{
		public SuggesterDescriptor()
		{
		}

		internal SuggesterDescriptor(Action<SuggesterDescriptor> configure) => configure.Invoke(this);
		internal string? TextValue { get; private set; }

		public SuggesterDescriptor Text(string? text) => Assign(text, (a, v) => a.TextValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(TextValue))
			{
				writer.WritePropertyName("text");
				writer.WriteStringValue(TextValue);
			}

			writer.WriteEndObject();
		}
	}

	public partial class TermSuggestOption
	{
		[JsonInclude]
		[JsonPropertyName("text")]
		public string Text { get; init; }

		[JsonInclude]
		[JsonPropertyName("freq")]
		public long? Freq { get; init; }

		[JsonInclude]
		[JsonPropertyName("score")]
		public double Score { get; init; }
	}

	public partial class TopLeftBottomRightGeoBounds
	{
		[JsonInclude]
		[JsonPropertyName("top_left")]
		public Elastic.Clients.Elasticsearch.GeoLocation TopLeft { get; init; }

		[JsonInclude]
		[JsonPropertyName("bottom_right")]
		public Elastic.Clients.Elasticsearch.GeoLocation BottomRight { get; init; }
	}

	public partial class TopRightBottomLeftGeoBounds
	{
		[JsonInclude]
		[JsonPropertyName("top_right")]
		public Elastic.Clients.Elasticsearch.GeoLocation TopRight { get; init; }

		[JsonInclude]
		[JsonPropertyName("bottom_left")]
		public Elastic.Clients.Elasticsearch.GeoLocation BottomLeft { get; init; }
	}

	public partial class TotalHits
	{
		[JsonInclude]
		[JsonPropertyName("relation")]
		public Elastic.Clients.Elasticsearch.TotalHitsRelation Relation { get; init; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public long Value { get; init; }
	}

	public partial class TranslogStats
	{
		[JsonInclude]
		[JsonPropertyName("earliest_last_modified_age")]
		public long EarliestLastModifiedAge { get; init; }

		[JsonInclude]
		[JsonPropertyName("operations")]
		public long Operations { get; init; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public string? Size { get; init; }

		[JsonInclude]
		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_operations")]
		public int UncommittedOperations { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_size")]
		public string? UncommittedSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("uncommitted_size_in_bytes")]
		public long UncommittedSizeInBytes { get; init; }
	}

	public partial class WarmerStats
	{
		[JsonInclude]
		[JsonPropertyName("current")]
		public long Current { get; init; }

		[JsonInclude]
		[JsonPropertyName("total")]
		public long Total { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time")]
		public string? TotalTime { get; init; }

		[JsonInclude]
		[JsonPropertyName("total_time_in_millis")]
		public long TotalTimeInMillis { get; init; }
	}

	public partial class WktGeoBounds
	{
		[JsonInclude]
		[JsonPropertyName("wkt")]
		public string Wkt { get; init; }
	}

	public abstract partial class WriteResponseBase : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("_primary_term")]
		public long PrimaryTerm { get; init; }

		[JsonInclude]
		[JsonPropertyName("result")]
		public Elastic.Clients.Elasticsearch.Result Result { get; init; }

		[JsonInclude]
		[JsonPropertyName("_seq_no")]
		public long SeqNo { get; init; }

		[JsonInclude]
		[JsonPropertyName("_shards")]
		public Elastic.Clients.Elasticsearch.ShardStatistics Shards { get; init; }

		[JsonInclude]
		[JsonPropertyName("_type")]
		public string? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("_version")]
		public long Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("forced_refresh")]
		public bool? ForcedRefresh { get; init; }
	}
}
