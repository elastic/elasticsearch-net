// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.TextStructure;

[JsonConverter(typeof(EcsCompatibilityTypeConverter))]
public enum EcsCompatibilityType
{
	[EnumMember(Value = "v1")]
	V1,
	[EnumMember(Value = "disabled")]
	Disabled
}

internal sealed class EcsCompatibilityTypeConverter : JsonConverter<EcsCompatibilityType>
{
	public override EcsCompatibilityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var enumString = reader.GetString();
		switch (enumString)
		{
			case "v1":
				return EcsCompatibilityType.V1;
			case "disabled":
				return EcsCompatibilityType.Disabled;
		}

		ThrowHelper.ThrowJsonException();
		return default;
	}

	public override void Write(Utf8JsonWriter writer, EcsCompatibilityType value, JsonSerializerOptions options)
	{
		switch (value)
		{
			case EcsCompatibilityType.V1:
				writer.WriteStringValue("v1");
				return;
			case EcsCompatibilityType.Disabled:
				writer.WriteStringValue("disabled");
				return;
		}

		writer.WriteNullValue();
	}
}

[JsonConverter(typeof(FormatTypeConverter))]
public enum FormatType
{
	[EnumMember(Value = "xml")]
	Xml,
	[EnumMember(Value = "semi_structured_text")]
	SemiStructuredText,
	[EnumMember(Value = "ndjson")]
	Ndjson,
	[EnumMember(Value = "delimited")]
	Delimited
}

internal sealed class FormatTypeConverter : JsonConverter<FormatType>
{
	public override FormatType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var enumString = reader.GetString();
		switch (enumString)
		{
			case "xml":
				return FormatType.Xml;
			case "semi_structured_text":
				return FormatType.SemiStructuredText;
			case "ndjson":
				return FormatType.Ndjson;
			case "delimited":
				return FormatType.Delimited;
		}

		ThrowHelper.ThrowJsonException();
		return default;
	}

	public override void Write(Utf8JsonWriter writer, FormatType value, JsonSerializerOptions options)
	{
		switch (value)
		{
			case FormatType.Xml:
				writer.WriteStringValue("xml");
				return;
			case FormatType.SemiStructuredText:
				writer.WriteStringValue("semi_structured_text");
				return;
			case FormatType.Ndjson:
				writer.WriteStringValue("ndjson");
				return;
			case FormatType.Delimited:
				writer.WriteStringValue("delimited");
				return;
		}

		writer.WriteNullValue();
	}
}