// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.TextStructure;

[JsonConverter(typeof(EcsCompatibilityTypeConverter))]
public enum EcsCompatibilityType
{
	[EnumMember(Value = "v1")]
	V1,
	[EnumMember(Value = "disabled")]
	Disabled
}

internal sealed partial class EcsCompatibilityTypeConverter : System.Text.Json.Serialization.JsonConverter<EcsCompatibilityType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberV1 = System.Text.Json.JsonEncodedText.Encode("v1");
	private static readonly System.Text.Json.JsonEncodedText MemberDisabled = System.Text.Json.JsonEncodedText.Encode("disabled");

	public override EcsCompatibilityType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberV1))
		{
			return EcsCompatibilityType.V1;
		}

		if (reader.ValueTextEquals(MemberDisabled))
		{
			return EcsCompatibilityType.Disabled;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberV1.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return EcsCompatibilityType.V1;
		}

		if (string.Equals(value, MemberDisabled.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return EcsCompatibilityType.Disabled;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(EcsCompatibilityType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, EcsCompatibilityType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case EcsCompatibilityType.V1:
				writer.WriteStringValue(MemberV1);
				break;
			case EcsCompatibilityType.Disabled:
				writer.WriteStringValue(MemberDisabled);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(EcsCompatibilityType)}'.");
		}
	}
}

[JsonConverter(typeof(FormatTypeConverter))]
public enum FormatType
{
	[EnumMember(Value = "xml")]
	Xml,
	[EnumMember(Value = "semi_structured_text")]
	SemiStructuredText,
	[EnumMember(Value = "ndjson")]
	Ndjson,
	[EnumMember(Value = "delimited")]
	Delimited
}

internal sealed partial class FormatTypeConverter : System.Text.Json.Serialization.JsonConverter<FormatType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberXml = System.Text.Json.JsonEncodedText.Encode("xml");
	private static readonly System.Text.Json.JsonEncodedText MemberSemiStructuredText = System.Text.Json.JsonEncodedText.Encode("semi_structured_text");
	private static readonly System.Text.Json.JsonEncodedText MemberNdjson = System.Text.Json.JsonEncodedText.Encode("ndjson");
	private static readonly System.Text.Json.JsonEncodedText MemberDelimited = System.Text.Json.JsonEncodedText.Encode("delimited");

	public override FormatType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberXml))
		{
			return FormatType.Xml;
		}

		if (reader.ValueTextEquals(MemberSemiStructuredText))
		{
			return FormatType.SemiStructuredText;
		}

		if (reader.ValueTextEquals(MemberNdjson))
		{
			return FormatType.Ndjson;
		}

		if (reader.ValueTextEquals(MemberDelimited))
		{
			return FormatType.Delimited;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberXml.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FormatType.Xml;
		}

		if (string.Equals(value, MemberSemiStructuredText.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FormatType.SemiStructuredText;
		}

		if (string.Equals(value, MemberNdjson.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FormatType.Ndjson;
		}

		if (string.Equals(value, MemberDelimited.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FormatType.Delimited;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(FormatType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FormatType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case FormatType.Xml:
				writer.WriteStringValue(MemberXml);
				break;
			case FormatType.SemiStructuredText:
				writer.WriteStringValue(MemberSemiStructuredText);
				break;
			case FormatType.Ndjson:
				writer.WriteStringValue(MemberNdjson);
				break;
			case FormatType.Delimited:
				writer.WriteStringValue(MemberDelimited);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(FormatType)}'.");
		}
	}
}