// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

[JsonConverter(typeof(TaskTypeConverter))]
public enum TaskType
{
	[EnumMember(Value = "text_embedding")]
	TextEmbedding,
	[EnumMember(Value = "sparse_embedding")]
	SparseEmbedding,
	[EnumMember(Value = "rerank")]
	Rerank,
	[EnumMember(Value = "completion")]
	Completion
}

internal sealed partial class TaskTypeConverter : System.Text.Json.Serialization.JsonConverter<TaskType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberTextEmbedding = System.Text.Json.JsonEncodedText.Encode("text_embedding");
	private static readonly System.Text.Json.JsonEncodedText MemberSparseEmbedding = System.Text.Json.JsonEncodedText.Encode("sparse_embedding");
	private static readonly System.Text.Json.JsonEncodedText MemberRerank = System.Text.Json.JsonEncodedText.Encode("rerank");
	private static readonly System.Text.Json.JsonEncodedText MemberCompletion = System.Text.Json.JsonEncodedText.Encode("completion");

	public override TaskType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberTextEmbedding))
		{
			return TaskType.TextEmbedding;
		}

		if (reader.ValueTextEquals(MemberSparseEmbedding))
		{
			return TaskType.SparseEmbedding;
		}

		if (reader.ValueTextEquals(MemberRerank))
		{
			return TaskType.Rerank;
		}

		if (reader.ValueTextEquals(MemberCompletion))
		{
			return TaskType.Completion;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberTextEmbedding.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TaskType.TextEmbedding;
		}

		if (string.Equals(value, MemberSparseEmbedding.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TaskType.SparseEmbedding;
		}

		if (string.Equals(value, MemberRerank.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TaskType.Rerank;
		}

		if (string.Equals(value, MemberCompletion.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TaskType.Completion;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(TaskType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, TaskType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case TaskType.TextEmbedding:
				writer.WriteStringValue(MemberTextEmbedding);
				break;
			case TaskType.SparseEmbedding:
				writer.WriteStringValue(MemberSparseEmbedding);
				break;
			case TaskType.Rerank:
				writer.WriteStringValue(MemberRerank);
				break;
			case TaskType.Completion:
				writer.WriteStringValue(MemberCompletion);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(TaskType)}'.");
		}
	}
}