// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Xpack;

[JsonConverter(typeof(XPackCategoryConverter))]
public enum XPackCategory
{
	[EnumMember(Value = "license")]
	License,
	[EnumMember(Value = "features")]
	Features,
	[EnumMember(Value = "build")]
	Build
}

internal sealed partial class XPackCategoryConverter : System.Text.Json.Serialization.JsonConverter<XPackCategory>
{
	private static readonly System.Text.Json.JsonEncodedText MemberLicense = System.Text.Json.JsonEncodedText.Encode("license");
	private static readonly System.Text.Json.JsonEncodedText MemberFeatures = System.Text.Json.JsonEncodedText.Encode("features");
	private static readonly System.Text.Json.JsonEncodedText MemberBuild = System.Text.Json.JsonEncodedText.Encode("build");

	public override XPackCategory Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberLicense))
		{
			return XPackCategory.License;
		}

		if (reader.ValueTextEquals(MemberFeatures))
		{
			return XPackCategory.Features;
		}

		if (reader.ValueTextEquals(MemberBuild))
		{
			return XPackCategory.Build;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberLicense.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return XPackCategory.License;
		}

		if (string.Equals(value, MemberFeatures.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return XPackCategory.Features;
		}

		if (string.Equals(value, MemberBuild.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return XPackCategory.Build;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(XPackCategory)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, XPackCategory value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case XPackCategory.License:
				writer.WriteStringValue(MemberLicense);
				break;
			case XPackCategory.Features:
				writer.WriteStringValue(MemberFeatures);
				break;
			case XPackCategory.Build:
				writer.WriteStringValue(MemberBuild);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(XPackCategory)}'.");
		}
	}
}