// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Sql;

[JsonConverter(typeof(SqlFormatConverter))]
public enum SqlFormat
{
	[EnumMember(Value = "yaml")]
	Yaml,
	[EnumMember(Value = "txt")]
	Txt,
	[EnumMember(Value = "tsv")]
	Tsv,
	[EnumMember(Value = "smile")]
	Smile,
	[EnumMember(Value = "json")]
	Json,
	[EnumMember(Value = "csv")]
	Csv,
	[EnumMember(Value = "cbor")]
	Cbor
}

internal sealed partial class SqlFormatConverter : System.Text.Json.Serialization.JsonConverter<SqlFormat>
{
	private static readonly System.Text.Json.JsonEncodedText MemberYaml = System.Text.Json.JsonEncodedText.Encode("yaml");
	private static readonly System.Text.Json.JsonEncodedText MemberTxt = System.Text.Json.JsonEncodedText.Encode("txt");
	private static readonly System.Text.Json.JsonEncodedText MemberTsv = System.Text.Json.JsonEncodedText.Encode("tsv");
	private static readonly System.Text.Json.JsonEncodedText MemberSmile = System.Text.Json.JsonEncodedText.Encode("smile");
	private static readonly System.Text.Json.JsonEncodedText MemberJson = System.Text.Json.JsonEncodedText.Encode("json");
	private static readonly System.Text.Json.JsonEncodedText MemberCsv = System.Text.Json.JsonEncodedText.Encode("csv");
	private static readonly System.Text.Json.JsonEncodedText MemberCbor = System.Text.Json.JsonEncodedText.Encode("cbor");

	public override SqlFormat Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberYaml))
		{
			return SqlFormat.Yaml;
		}

		if (reader.ValueTextEquals(MemberTxt))
		{
			return SqlFormat.Txt;
		}

		if (reader.ValueTextEquals(MemberTsv))
		{
			return SqlFormat.Tsv;
		}

		if (reader.ValueTextEquals(MemberSmile))
		{
			return SqlFormat.Smile;
		}

		if (reader.ValueTextEquals(MemberJson))
		{
			return SqlFormat.Json;
		}

		if (reader.ValueTextEquals(MemberCsv))
		{
			return SqlFormat.Csv;
		}

		if (reader.ValueTextEquals(MemberCbor))
		{
			return SqlFormat.Cbor;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberYaml.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Yaml;
		}

		if (string.Equals(value, MemberTxt.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Txt;
		}

		if (string.Equals(value, MemberTsv.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Tsv;
		}

		if (string.Equals(value, MemberSmile.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Smile;
		}

		if (string.Equals(value, MemberJson.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Json;
		}

		if (string.Equals(value, MemberCsv.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Csv;
		}

		if (string.Equals(value, MemberCbor.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SqlFormat.Cbor;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(SqlFormat)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, SqlFormat value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case SqlFormat.Yaml:
				writer.WriteStringValue(MemberYaml);
				break;
			case SqlFormat.Txt:
				writer.WriteStringValue(MemberTxt);
				break;
			case SqlFormat.Tsv:
				writer.WriteStringValue(MemberTsv);
				break;
			case SqlFormat.Smile:
				writer.WriteStringValue(MemberSmile);
				break;
			case SqlFormat.Json:
				writer.WriteStringValue(MemberJson);
				break;
			case SqlFormat.Csv:
				writer.WriteStringValue(MemberCsv);
				break;
			case SqlFormat.Cbor:
				writer.WriteStringValue(MemberCbor);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(SqlFormat)}'.");
		}
	}
}