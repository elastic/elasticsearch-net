// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public enum Bytes
	{
		[EnumMember(Value = "tb")]
		Tb,
		[EnumMember(Value = "t")]
		t,
		[EnumMember(Value = "pb")]
		Pb,
		[EnumMember(Value = "p")]
		p,
		[EnumMember(Value = "mb")]
		Mb,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "kb")]
		Kb,
		[EnumMember(Value = "k")]
		k,
		[EnumMember(Value = "gb")]
		Gb,
		[EnumMember(Value = "g")]
		g,
		[EnumMember(Value = "b")]
		b
	}

	public enum Conflicts
	{
		[EnumMember(Value = "proceed")]
		Proceed,
		[EnumMember(Value = "abort")]
		Abort
	}

	public enum DefaultOperator
	{
		[EnumMember(Value = "OR")]
		Or,
		[EnumMember(Value = "AND")]
		And
	}

	public enum DistanceUnit
	{
		[EnumMember(Value = "yd")]
		Yd,
		[EnumMember(Value = "nmi")]
		Nmi,
		[EnumMember(Value = "mm")]
		Mm,
		[EnumMember(Value = "mi")]
		Mi,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "km")]
		Km,
		[EnumMember(Value = "in")]
		In,
		[EnumMember(Value = "ft")]
		Ft,
		[EnumMember(Value = "cm")]
		Cm
	}

	public enum ExpandWildcardOptions
	{
		[EnumMember(Value = "open")]
		Open,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "hidden")]
		Hidden,
		[EnumMember(Value = "closed")]
		Closed,
		[EnumMember(Value = "all")]
		All
	}

	public enum GeoDistanceType
	{
		[EnumMember(Value = "plane")]
		Plane,
		[EnumMember(Value = "arc")]
		Arc
	}

	public enum GeoShapeRelation
	{
		[EnumMember(Value = "within")]
		Within,
		[EnumMember(Value = "intersects")]
		Intersects,
		[EnumMember(Value = "disjoint")]
		Disjoint,
		[EnumMember(Value = "contains")]
		Contains
	}

	public enum GroupBy
	{
		[EnumMember(Value = "parents")]
		Parents,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "nodes")]
		Nodes
	}

	public enum Health
	{
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red,
		[EnumMember(Value = "green")]
		Green
	}

	public enum Level
	{
		[EnumMember(Value = "shards")]
		Shards,
		[EnumMember(Value = "indices")]
		Indices,
		[EnumMember(Value = "cluster")]
		Cluster
	}

	public enum LifecycleOperationMode
	{
		[EnumMember(Value = "STOPPING")]
		Stopping,
		[EnumMember(Value = "STOPPED")]
		Stopped,
		[EnumMember(Value = "RUNNING")]
		Running
	}

	public enum NodeRole
	{
		[EnumMember(Value = "voting_only")]
		VotingOnly,
		[EnumMember(Value = "transform")]
		Transform,
		[EnumMember(Value = "remote_cluster_client")]
		RemoteClusterClient,
		[EnumMember(Value = "ml")]
		Ml,
		[EnumMember(Value = "master")]
		Master,
		[EnumMember(Value = "ingest")]
		Ingest,
		[EnumMember(Value = "data_warm")]
		DataWarm,
		[EnumMember(Value = "data_hot")]
		DataHot,
		[EnumMember(Value = "data_frozen")]
		DataFrozen,
		[EnumMember(Value = "data_content")]
		DataContent,
		[EnumMember(Value = "data_cold")]
		DataCold,
		[EnumMember(Value = "data")]
		Data,
		[EnumMember(Value = "coordinating_only")]
		CoordinatingOnly,
		[EnumMember(Value = "client")]
		Client
	}

	public enum OpType
	{
		[EnumMember(Value = "index")]
		Index,
		[EnumMember(Value = "create")]
		Create
	}

	public enum RefreshOptions
	{
		[EnumMember(Value = "wait_for")]
		WaitFor
	}

	public enum Result
	{
		[EnumMember(Value = "updated")]
		Updated,
		[EnumMember(Value = "not_found")]
		NotFound,
		[EnumMember(Value = "noop")]
		Noop,
		[EnumMember(Value = "deleted")]
		Deleted,
		[EnumMember(Value = "created")]
		Created,
		[EnumMember(Value = "Error")]
		Error
	}

	public enum ScriptLanguage
	{
		[EnumMember(Value = "painless")]
		Painless,
		[EnumMember(Value = "mustache")]
		Mustache,
		[EnumMember(Value = "java")]
		Java,
		[EnumMember(Value = "expression")]
		Expression
	}

	public enum SearchType
	{
		[EnumMember(Value = "query_then_fetch")]
		QueryThenFetch,
		[EnumMember(Value = "dfs_query_then_fetch")]
		DfsQueryThenFetch
	}

	public enum ShapeRelation
	{
		[EnumMember(Value = "within")]
		Within,
		[EnumMember(Value = "intersects")]
		Intersects,
		[EnumMember(Value = "disjoint")]
		Disjoint
	}

	public enum Size
	{
		[EnumMember(Value = "t")]
		t,
		[EnumMember(Value = "p")]
		p,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "k")]
		k,
		[EnumMember(Value = "g")]
		g,
		[EnumMember(Value = "Raw")]
		Raw
	}

	public enum SuggestMode
	{
		[EnumMember(Value = "popular")]
		Popular,
		[EnumMember(Value = "missing")]
		Missing,
		[EnumMember(Value = "always")]
		Always
	}

	public enum ThreadType
	{
		[EnumMember(Value = "wait")]
		Wait,
		[EnumMember(Value = "cpu")]
		Cpu,
		[EnumMember(Value = "block")]
		Block
	}

	public enum TimeUnit
	{
		[EnumMember(Value = "s")]
		s,
		[EnumMember(Value = "nanos")]
		Nanos,
		[EnumMember(Value = "ms")]
		Ms,
		[EnumMember(Value = "micros")]
		Micros,
		[EnumMember(Value = "m")]
		m,
		[EnumMember(Value = "h")]
		h,
		[EnumMember(Value = "d")]
		d
	}

	public enum VersionType
	{
		[EnumMember(Value = "internal")]
		Internal,
		[EnumMember(Value = "force")]
		Force,
		[EnumMember(Value = "external_gte")]
		ExternalGte,
		[EnumMember(Value = "external")]
		External
	}

	public enum WaitForActiveShardOptions
	{
		[EnumMember(Value = "all")]
		All
	}

	public enum WaitForEvents
	{
		[EnumMember(Value = "urgent")]
		Urgent,
		[EnumMember(Value = "normal")]
		Normal,
		[EnumMember(Value = "low")]
		Low,
		[EnumMember(Value = "languid")]
		Languid,
		[EnumMember(Value = "immediate")]
		Immediate,
		[EnumMember(Value = "high")]
		High
	}

	public enum WaitForStatus
	{
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red,
		[EnumMember(Value = "green")]
		Green
	}
}