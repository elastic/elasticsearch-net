// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public enum TotalHitsRelation
	{
		[EnumMember(Value = "gte")]
		Gte,
		[EnumMember(Value = "eq")]
		Eq
	}

	public enum SuggestMode
	{
		[EnumMember(Value = "popular")]
		Popular,
		[EnumMember(Value = "missing")]
		Missing,
		[EnumMember(Value = "always")]
		Always
	}

	public enum SearchType
	{
		[EnumMember(Value = "query_then_fetch")]
		QueryThenFetch,
		[EnumMember(Value = "dfs_query_then_fetch")]
		DfsQueryThenFetch
	}

	public enum ExpandWildcardOptions
	{
		[EnumMember(Value = "open")]
		Open,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "hidden")]
		Hidden,
		[EnumMember(Value = "closed")]
		Closed,
		[EnumMember(Value = "all")]
		All
	}

	public enum DefaultOperator
	{
		[EnumMember(Value = "OR")]
		Or,
		[EnumMember(Value = "AND")]
		And
	}

	public enum ScriptLanguage
	{
		[EnumMember(Value = "painless")]
		Painless,
		[EnumMember(Value = "mustache")]
		Mustache,
		[EnumMember(Value = "java")]
		Java,
		[EnumMember(Value = "expression")]
		Expression
	}

	public enum StringDistance
	{
		[EnumMember(Value = "ngram")]
		Ngram,
		[EnumMember(Value = "levenshtein")]
		Levenshtein,
		[EnumMember(Value = "jaro_winkler")]
		JaroWinkler,
		[EnumMember(Value = "internal")]
		Internal,
		[EnumMember(Value = "damerau_levenshtein")]
		DamerauLevenshtein
	}

	public enum SuggestSort
	{
		[EnumMember(Value = "score")]
		Score,
		[EnumMember(Value = "frequency")]
		Frequency
	}

	public enum ScoreMode
	{
		[EnumMember(Value = "total")]
		Total,
		[EnumMember(Value = "multiply")]
		Multiply,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum SortOrder
	{
		[EnumMember(Value = "desc")]
		Desc,
		[EnumMember(Value = "asc")]
		Asc,
		[EnumMember(Value = "_doc")]
		Document
	}

	public enum DistanceUnit
	{
		[EnumMember(Value = "yd")]
		Yards,
		[EnumMember(Value = "nmi")]
		NauticMiles,
		[EnumMember(Value = "mm")]
		Millimeters,
		[EnumMember(Value = "mi")]
		Miles,
		[EnumMember(Value = "m")]
		Meters,
		[EnumMember(Value = "km")]
		Kilometers,
		[EnumMember(Value = "in")]
		Inches,
		[EnumMember(Value = "ft")]
		Feet,
		[EnumMember(Value = "cm")]
		Centimeters
	}

	public enum GeoDistanceType
	{
		[EnumMember(Value = "plane")]
		Plane,
		[EnumMember(Value = "arc")]
		Arc
	}

	public enum SortMode
	{
		[EnumMember(Value = "sum")]
		Sum,
		[EnumMember(Value = "min")]
		Min,
		[EnumMember(Value = "median")]
		Median,
		[EnumMember(Value = "max")]
		Max,
		[EnumMember(Value = "avg")]
		Avg
	}

	public enum HighlighterTagsSchema
	{
		[EnumMember(Value = "styled")]
		Styled
	}

	public enum HighlighterOrder
	{
		[EnumMember(Value = "score")]
		Score
	}

	public enum HighlighterFragmenter
	{
		[EnumMember(Value = "span")]
		Span,
		[EnumMember(Value = "simple")]
		Simple
	}

	public enum HighlighterEncoder
	{
		[EnumMember(Value = "html")]
		Html,
		[EnumMember(Value = "default")]
		Default
	}

	public enum BoundaryScanner
	{
		[EnumMember(Value = "word")]
		Word,
		[EnumMember(Value = "sentence")]
		Sentence,
		[EnumMember(Value = "chars")]
		Chars
	}

	public enum HighlighterType
	{
		[EnumMember(Value = "unified")]
		Unified,
		[EnumMember(Value = "plain")]
		Plain,
		[EnumMember(Value = "fvh")]
		Fvh
	}

	public enum VersionType
	{
		[EnumMember(Value = "internal")]
		Internal,
		[EnumMember(Value = "force")]
		Force,
		[EnumMember(Value = "external_gte")]
		ExternalGte,
		[EnumMember(Value = "external")]
		External
	}
}