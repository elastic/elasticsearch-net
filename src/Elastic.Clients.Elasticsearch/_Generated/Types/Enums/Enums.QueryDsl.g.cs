// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

[JsonConverter(typeof(ChildScoreModeConverter))]
public enum ChildScoreMode
{
	[EnumMember(Value = "sum")]
	Sum,
	[EnumMember(Value = "none")]
	None,
	[EnumMember(Value = "min")]
	Min,
	[EnumMember(Value = "max")]
	Max,
	[EnumMember(Value = "avg")]
	Avg
}

internal sealed partial class ChildScoreModeConverter : System.Text.Json.Serialization.JsonConverter<ChildScoreMode>
{
	private static readonly System.Text.Json.JsonEncodedText MemberSum = System.Text.Json.JsonEncodedText.Encode("sum");
	private static readonly System.Text.Json.JsonEncodedText MemberNone = System.Text.Json.JsonEncodedText.Encode("none");
	private static readonly System.Text.Json.JsonEncodedText MemberMin = System.Text.Json.JsonEncodedText.Encode("min");
	private static readonly System.Text.Json.JsonEncodedText MemberMax = System.Text.Json.JsonEncodedText.Encode("max");
	private static readonly System.Text.Json.JsonEncodedText MemberAvg = System.Text.Json.JsonEncodedText.Encode("avg");

	public override ChildScoreMode Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberSum))
		{
			return ChildScoreMode.Sum;
		}

		if (reader.ValueTextEquals(MemberNone))
		{
			return ChildScoreMode.None;
		}

		if (reader.ValueTextEquals(MemberMin))
		{
			return ChildScoreMode.Min;
		}

		if (reader.ValueTextEquals(MemberMax))
		{
			return ChildScoreMode.Max;
		}

		if (reader.ValueTextEquals(MemberAvg))
		{
			return ChildScoreMode.Avg;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberSum.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ChildScoreMode.Sum;
		}

		if (string.Equals(value, MemberNone.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ChildScoreMode.None;
		}

		if (string.Equals(value, MemberMin.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ChildScoreMode.Min;
		}

		if (string.Equals(value, MemberMax.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ChildScoreMode.Max;
		}

		if (string.Equals(value, MemberAvg.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ChildScoreMode.Avg;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(ChildScoreMode)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ChildScoreMode value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case ChildScoreMode.Sum:
				writer.WriteStringValue(MemberSum);
				break;
			case ChildScoreMode.None:
				writer.WriteStringValue(MemberNone);
				break;
			case ChildScoreMode.Min:
				writer.WriteStringValue(MemberMin);
				break;
			case ChildScoreMode.Max:
				writer.WriteStringValue(MemberMax);
				break;
			case ChildScoreMode.Avg:
				writer.WriteStringValue(MemberAvg);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(ChildScoreMode)}'.");
		}
	}
}

[JsonConverter(typeof(CombinedFieldsOperatorConverter))]
public enum CombinedFieldsOperator
{
	[EnumMember(Value = "or")]
	Or,
	[EnumMember(Value = "and")]
	And
}

internal sealed partial class CombinedFieldsOperatorConverter : System.Text.Json.Serialization.JsonConverter<CombinedFieldsOperator>
{
	private static readonly System.Text.Json.JsonEncodedText MemberOr = System.Text.Json.JsonEncodedText.Encode("or");
	private static readonly System.Text.Json.JsonEncodedText MemberAnd = System.Text.Json.JsonEncodedText.Encode("and");

	public override CombinedFieldsOperator Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberOr))
		{
			return CombinedFieldsOperator.Or;
		}

		if (reader.ValueTextEquals(MemberAnd))
		{
			return CombinedFieldsOperator.And;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberOr.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return CombinedFieldsOperator.Or;
		}

		if (string.Equals(value, MemberAnd.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return CombinedFieldsOperator.And;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(CombinedFieldsOperator)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CombinedFieldsOperator value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case CombinedFieldsOperator.Or:
				writer.WriteStringValue(MemberOr);
				break;
			case CombinedFieldsOperator.And:
				writer.WriteStringValue(MemberAnd);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(CombinedFieldsOperator)}'.");
		}
	}
}

[JsonConverter(typeof(CombinedFieldsZeroTermsConverter))]
public enum CombinedFieldsZeroTerms
{
	/// <summary>
	/// <para>
	/// No documents are returned if the analyzer removes all tokens.
	/// </para>
	/// </summary>
	[EnumMember(Value = "none")]
	None,
	/// <summary>
	/// <para>
	/// Returns all documents, similar to a <c>match_all</c> query.
	/// </para>
	/// </summary>
	[EnumMember(Value = "all")]
	All
}

internal sealed partial class CombinedFieldsZeroTermsConverter : System.Text.Json.Serialization.JsonConverter<CombinedFieldsZeroTerms>
{
	private static readonly System.Text.Json.JsonEncodedText MemberNone = System.Text.Json.JsonEncodedText.Encode("none");
	private static readonly System.Text.Json.JsonEncodedText MemberAll = System.Text.Json.JsonEncodedText.Encode("all");

	public override CombinedFieldsZeroTerms Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberNone))
		{
			return CombinedFieldsZeroTerms.None;
		}

		if (reader.ValueTextEquals(MemberAll))
		{
			return CombinedFieldsZeroTerms.All;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberNone.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return CombinedFieldsZeroTerms.None;
		}

		if (string.Equals(value, MemberAll.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return CombinedFieldsZeroTerms.All;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(CombinedFieldsZeroTerms)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CombinedFieldsZeroTerms value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case CombinedFieldsZeroTerms.None:
				writer.WriteStringValue(MemberNone);
				break;
			case CombinedFieldsZeroTerms.All:
				writer.WriteStringValue(MemberAll);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(CombinedFieldsZeroTerms)}'.");
		}
	}
}

[JsonConverter(typeof(FieldValueFactorModifierConverter))]
public enum FieldValueFactorModifier
{
	/// <summary>
	/// <para>
	/// Square the field value (multiply it by itself).
	/// </para>
	/// </summary>
	[EnumMember(Value = "square")]
	Square,
	/// <summary>
	/// <para>
	/// Take the square root of the field value.
	/// </para>
	/// </summary>
	[EnumMember(Value = "sqrt")]
	Sqrt,
	/// <summary>
	/// <para>
	/// Reciprocate the field value, same as <c>1/x</c> where <c>x</c> is the field’s value.
	/// </para>
	/// </summary>
	[EnumMember(Value = "reciprocal")]
	Reciprocal,
	/// <summary>
	/// <para>
	/// Do not apply any multiplier to the field value.
	/// </para>
	/// </summary>
	[EnumMember(Value = "none")]
	None,
	/// <summary>
	/// <para>
	/// Add 2 to the field value and take the common logarithm.
	/// </para>
	/// </summary>
	[EnumMember(Value = "log2p")]
	Log2p,
	/// <summary>
	/// <para>
	/// Add 1 to the field value and take the common logarithm.
	/// </para>
	/// </summary>
	[EnumMember(Value = "log1p")]
	Log1p,
	/// <summary>
	/// <para>
	/// Take the common logarithm of the field value.
	/// Because this function will return a negative value and cause an error if used on values between 0 and 1, it is recommended to use <c>log1p</c> instead.
	/// </para>
	/// </summary>
	[EnumMember(Value = "log")]
	Log,
	/// <summary>
	/// <para>
	/// Add 2 to the field value and take the natural logarithm.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ln2p")]
	Ln2p,
	/// <summary>
	/// <para>
	/// Add 1 to the field value and take the natural logarithm.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ln1p")]
	Ln1p,
	/// <summary>
	/// <para>
	/// Take the natural logarithm of the field value.
	/// Because this function will return a negative value and cause an error if used on values between 0 and 1, it is recommended to use <c>ln1p</c> instead.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ln")]
	Ln
}

internal sealed partial class FieldValueFactorModifierConverter : System.Text.Json.Serialization.JsonConverter<FieldValueFactorModifier>
{
	private static readonly System.Text.Json.JsonEncodedText MemberSquare = System.Text.Json.JsonEncodedText.Encode("square");
	private static readonly System.Text.Json.JsonEncodedText MemberSqrt = System.Text.Json.JsonEncodedText.Encode("sqrt");
	private static readonly System.Text.Json.JsonEncodedText MemberReciprocal = System.Text.Json.JsonEncodedText.Encode("reciprocal");
	private static readonly System.Text.Json.JsonEncodedText MemberNone = System.Text.Json.JsonEncodedText.Encode("none");
	private static readonly System.Text.Json.JsonEncodedText MemberLog2p = System.Text.Json.JsonEncodedText.Encode("log2p");
	private static readonly System.Text.Json.JsonEncodedText MemberLog1p = System.Text.Json.JsonEncodedText.Encode("log1p");
	private static readonly System.Text.Json.JsonEncodedText MemberLog = System.Text.Json.JsonEncodedText.Encode("log");
	private static readonly System.Text.Json.JsonEncodedText MemberLn2p = System.Text.Json.JsonEncodedText.Encode("ln2p");
	private static readonly System.Text.Json.JsonEncodedText MemberLn1p = System.Text.Json.JsonEncodedText.Encode("ln1p");
	private static readonly System.Text.Json.JsonEncodedText MemberLn = System.Text.Json.JsonEncodedText.Encode("ln");

	public override FieldValueFactorModifier Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberSquare))
		{
			return FieldValueFactorModifier.Square;
		}

		if (reader.ValueTextEquals(MemberSqrt))
		{
			return FieldValueFactorModifier.Sqrt;
		}

		if (reader.ValueTextEquals(MemberReciprocal))
		{
			return FieldValueFactorModifier.Reciprocal;
		}

		if (reader.ValueTextEquals(MemberNone))
		{
			return FieldValueFactorModifier.None;
		}

		if (reader.ValueTextEquals(MemberLog2p))
		{
			return FieldValueFactorModifier.Log2p;
		}

		if (reader.ValueTextEquals(MemberLog1p))
		{
			return FieldValueFactorModifier.Log1p;
		}

		if (reader.ValueTextEquals(MemberLog))
		{
			return FieldValueFactorModifier.Log;
		}

		if (reader.ValueTextEquals(MemberLn2p))
		{
			return FieldValueFactorModifier.Ln2p;
		}

		if (reader.ValueTextEquals(MemberLn1p))
		{
			return FieldValueFactorModifier.Ln1p;
		}

		if (reader.ValueTextEquals(MemberLn))
		{
			return FieldValueFactorModifier.Ln;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberSquare.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Square;
		}

		if (string.Equals(value, MemberSqrt.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Sqrt;
		}

		if (string.Equals(value, MemberReciprocal.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Reciprocal;
		}

		if (string.Equals(value, MemberNone.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.None;
		}

		if (string.Equals(value, MemberLog2p.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Log2p;
		}

		if (string.Equals(value, MemberLog1p.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Log1p;
		}

		if (string.Equals(value, MemberLog.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Log;
		}

		if (string.Equals(value, MemberLn2p.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Ln2p;
		}

		if (string.Equals(value, MemberLn1p.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Ln1p;
		}

		if (string.Equals(value, MemberLn.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FieldValueFactorModifier.Ln;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(FieldValueFactorModifier)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FieldValueFactorModifier value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case FieldValueFactorModifier.Square:
				writer.WriteStringValue(MemberSquare);
				break;
			case FieldValueFactorModifier.Sqrt:
				writer.WriteStringValue(MemberSqrt);
				break;
			case FieldValueFactorModifier.Reciprocal:
				writer.WriteStringValue(MemberReciprocal);
				break;
			case FieldValueFactorModifier.None:
				writer.WriteStringValue(MemberNone);
				break;
			case FieldValueFactorModifier.Log2p:
				writer.WriteStringValue(MemberLog2p);
				break;
			case FieldValueFactorModifier.Log1p:
				writer.WriteStringValue(MemberLog1p);
				break;
			case FieldValueFactorModifier.Log:
				writer.WriteStringValue(MemberLog);
				break;
			case FieldValueFactorModifier.Ln2p:
				writer.WriteStringValue(MemberLn2p);
				break;
			case FieldValueFactorModifier.Ln1p:
				writer.WriteStringValue(MemberLn1p);
				break;
			case FieldValueFactorModifier.Ln:
				writer.WriteStringValue(MemberLn);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(FieldValueFactorModifier)}'.");
		}
	}
}

[JsonConverter(typeof(FunctionBoostModeConverter))]
public enum FunctionBoostMode
{
	/// <summary>
	/// <para>
	/// Query score and function score are added
	/// </para>
	/// </summary>
	[EnumMember(Value = "sum")]
	Sum,
	/// <summary>
	/// <para>
	/// Only the function score is used.
	/// The query score is ignored.
	/// </para>
	/// </summary>
	[EnumMember(Value = "replace")]
	Replace,
	/// <summary>
	/// <para>
	/// Query score and function score are multiplied
	/// </para>
	/// </summary>
	[EnumMember(Value = "multiply")]
	Multiply,
	/// <summary>
	/// <para>
	/// Min of query score and function score
	/// </para>
	/// </summary>
	[EnumMember(Value = "min")]
	Min,
	/// <summary>
	/// <para>
	/// Max of query score and function score
	/// </para>
	/// </summary>
	[EnumMember(Value = "max")]
	Max,
	/// <summary>
	/// <para>
	/// Query score and function score are averaged
	/// </para>
	/// </summary>
	[EnumMember(Value = "avg")]
	Avg
}

internal sealed partial class FunctionBoostModeConverter : System.Text.Json.Serialization.JsonConverter<FunctionBoostMode>
{
	private static readonly System.Text.Json.JsonEncodedText MemberSum = System.Text.Json.JsonEncodedText.Encode("sum");
	private static readonly System.Text.Json.JsonEncodedText MemberReplace = System.Text.Json.JsonEncodedText.Encode("replace");
	private static readonly System.Text.Json.JsonEncodedText MemberMultiply = System.Text.Json.JsonEncodedText.Encode("multiply");
	private static readonly System.Text.Json.JsonEncodedText MemberMin = System.Text.Json.JsonEncodedText.Encode("min");
	private static readonly System.Text.Json.JsonEncodedText MemberMax = System.Text.Json.JsonEncodedText.Encode("max");
	private static readonly System.Text.Json.JsonEncodedText MemberAvg = System.Text.Json.JsonEncodedText.Encode("avg");

	public override FunctionBoostMode Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberSum))
		{
			return FunctionBoostMode.Sum;
		}

		if (reader.ValueTextEquals(MemberReplace))
		{
			return FunctionBoostMode.Replace;
		}

		if (reader.ValueTextEquals(MemberMultiply))
		{
			return FunctionBoostMode.Multiply;
		}

		if (reader.ValueTextEquals(MemberMin))
		{
			return FunctionBoostMode.Min;
		}

		if (reader.ValueTextEquals(MemberMax))
		{
			return FunctionBoostMode.Max;
		}

		if (reader.ValueTextEquals(MemberAvg))
		{
			return FunctionBoostMode.Avg;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberSum.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Sum;
		}

		if (string.Equals(value, MemberReplace.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Replace;
		}

		if (string.Equals(value, MemberMultiply.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Multiply;
		}

		if (string.Equals(value, MemberMin.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Min;
		}

		if (string.Equals(value, MemberMax.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Max;
		}

		if (string.Equals(value, MemberAvg.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionBoostMode.Avg;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(FunctionBoostMode)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FunctionBoostMode value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case FunctionBoostMode.Sum:
				writer.WriteStringValue(MemberSum);
				break;
			case FunctionBoostMode.Replace:
				writer.WriteStringValue(MemberReplace);
				break;
			case FunctionBoostMode.Multiply:
				writer.WriteStringValue(MemberMultiply);
				break;
			case FunctionBoostMode.Min:
				writer.WriteStringValue(MemberMin);
				break;
			case FunctionBoostMode.Max:
				writer.WriteStringValue(MemberMax);
				break;
			case FunctionBoostMode.Avg:
				writer.WriteStringValue(MemberAvg);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(FunctionBoostMode)}'.");
		}
	}
}

[JsonConverter(typeof(FunctionScoreModeConverter))]
public enum FunctionScoreMode
{
	/// <summary>
	/// <para>
	/// Scores are summed.
	/// </para>
	/// </summary>
	[EnumMember(Value = "sum")]
	Sum,
	/// <summary>
	/// <para>
	/// Scores are multiplied.
	/// </para>
	/// </summary>
	[EnumMember(Value = "multiply")]
	Multiply,
	/// <summary>
	/// <para>
	/// Minimum score is used.
	/// </para>
	/// </summary>
	[EnumMember(Value = "min")]
	Min,
	/// <summary>
	/// <para>
	/// Maximum score is used.
	/// </para>
	/// </summary>
	[EnumMember(Value = "max")]
	Max,
	/// <summary>
	/// <para>
	/// The first function that has a matching filter is applied.
	/// </para>
	/// </summary>
	[EnumMember(Value = "first")]
	First,
	/// <summary>
	/// <para>
	/// Scores are averaged.
	/// </para>
	/// </summary>
	[EnumMember(Value = "avg")]
	Avg
}

internal sealed partial class FunctionScoreModeConverter : System.Text.Json.Serialization.JsonConverter<FunctionScoreMode>
{
	private static readonly System.Text.Json.JsonEncodedText MemberSum = System.Text.Json.JsonEncodedText.Encode("sum");
	private static readonly System.Text.Json.JsonEncodedText MemberMultiply = System.Text.Json.JsonEncodedText.Encode("multiply");
	private static readonly System.Text.Json.JsonEncodedText MemberMin = System.Text.Json.JsonEncodedText.Encode("min");
	private static readonly System.Text.Json.JsonEncodedText MemberMax = System.Text.Json.JsonEncodedText.Encode("max");
	private static readonly System.Text.Json.JsonEncodedText MemberFirst = System.Text.Json.JsonEncodedText.Encode("first");
	private static readonly System.Text.Json.JsonEncodedText MemberAvg = System.Text.Json.JsonEncodedText.Encode("avg");

	public override FunctionScoreMode Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberSum))
		{
			return FunctionScoreMode.Sum;
		}

		if (reader.ValueTextEquals(MemberMultiply))
		{
			return FunctionScoreMode.Multiply;
		}

		if (reader.ValueTextEquals(MemberMin))
		{
			return FunctionScoreMode.Min;
		}

		if (reader.ValueTextEquals(MemberMax))
		{
			return FunctionScoreMode.Max;
		}

		if (reader.ValueTextEquals(MemberFirst))
		{
			return FunctionScoreMode.First;
		}

		if (reader.ValueTextEquals(MemberAvg))
		{
			return FunctionScoreMode.Avg;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberSum.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.Sum;
		}

		if (string.Equals(value, MemberMultiply.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.Multiply;
		}

		if (string.Equals(value, MemberMin.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.Min;
		}

		if (string.Equals(value, MemberMax.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.Max;
		}

		if (string.Equals(value, MemberFirst.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.First;
		}

		if (string.Equals(value, MemberAvg.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return FunctionScoreMode.Avg;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(FunctionScoreMode)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FunctionScoreMode value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case FunctionScoreMode.Sum:
				writer.WriteStringValue(MemberSum);
				break;
			case FunctionScoreMode.Multiply:
				writer.WriteStringValue(MemberMultiply);
				break;
			case FunctionScoreMode.Min:
				writer.WriteStringValue(MemberMin);
				break;
			case FunctionScoreMode.Max:
				writer.WriteStringValue(MemberMax);
				break;
			case FunctionScoreMode.First:
				writer.WriteStringValue(MemberFirst);
				break;
			case FunctionScoreMode.Avg:
				writer.WriteStringValue(MemberAvg);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(FunctionScoreMode)}'.");
		}
	}
}

[JsonConverter(typeof(GeoValidationMethodConverter))]
public enum GeoValidationMethod
{
	[EnumMember(Value = "strict")]
	Strict,
	/// <summary>
	/// <para>
	/// Accept geo points with invalid latitude or longitude.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ignore_malformed")]
	IgnoreMalformed,
	/// <summary>
	/// <para>
	/// Accept geo points with invalid latitude or longitude and additionally try and infer correct coordinates.
	/// </para>
	/// </summary>
	[EnumMember(Value = "coerce")]
	Coerce
}

internal sealed partial class GeoValidationMethodConverter : System.Text.Json.Serialization.JsonConverter<GeoValidationMethod>
{
	private static readonly System.Text.Json.JsonEncodedText MemberStrict = System.Text.Json.JsonEncodedText.Encode("strict");
	private static readonly System.Text.Json.JsonEncodedText MemberIgnoreMalformed = System.Text.Json.JsonEncodedText.Encode("ignore_malformed");
	private static readonly System.Text.Json.JsonEncodedText MemberCoerce = System.Text.Json.JsonEncodedText.Encode("coerce");

	public override GeoValidationMethod Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberStrict))
		{
			return GeoValidationMethod.Strict;
		}

		if (reader.ValueTextEquals(MemberIgnoreMalformed))
		{
			return GeoValidationMethod.IgnoreMalformed;
		}

		if (reader.ValueTextEquals(MemberCoerce))
		{
			return GeoValidationMethod.Coerce;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberStrict.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return GeoValidationMethod.Strict;
		}

		if (string.Equals(value, MemberIgnoreMalformed.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return GeoValidationMethod.IgnoreMalformed;
		}

		if (string.Equals(value, MemberCoerce.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return GeoValidationMethod.Coerce;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(GeoValidationMethod)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, GeoValidationMethod value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case GeoValidationMethod.Strict:
				writer.WriteStringValue(MemberStrict);
				break;
			case GeoValidationMethod.IgnoreMalformed:
				writer.WriteStringValue(MemberIgnoreMalformed);
				break;
			case GeoValidationMethod.Coerce:
				writer.WriteStringValue(MemberCoerce);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(GeoValidationMethod)}'.");
		}
	}
}

[JsonConverter(typeof(MultiValueModeConverter))]
public enum MultiValueMode
{
	/// <summary>
	/// <para>
	/// Distance is the sum of all distances.
	/// </para>
	/// </summary>
	[EnumMember(Value = "sum")]
	Sum,
	/// <summary>
	/// <para>
	/// Distance is the minimum distance.
	/// </para>
	/// </summary>
	[EnumMember(Value = "min")]
	Min,
	/// <summary>
	/// <para>
	/// Distance is the maximum distance.
	/// </para>
	/// </summary>
	[EnumMember(Value = "max")]
	Max,
	/// <summary>
	/// <para>
	/// Distance is the average distance.
	/// </para>
	/// </summary>
	[EnumMember(Value = "avg")]
	Avg
}

internal sealed partial class MultiValueModeConverter : System.Text.Json.Serialization.JsonConverter<MultiValueMode>
{
	private static readonly System.Text.Json.JsonEncodedText MemberSum = System.Text.Json.JsonEncodedText.Encode("sum");
	private static readonly System.Text.Json.JsonEncodedText MemberMin = System.Text.Json.JsonEncodedText.Encode("min");
	private static readonly System.Text.Json.JsonEncodedText MemberMax = System.Text.Json.JsonEncodedText.Encode("max");
	private static readonly System.Text.Json.JsonEncodedText MemberAvg = System.Text.Json.JsonEncodedText.Encode("avg");

	public override MultiValueMode Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberSum))
		{
			return MultiValueMode.Sum;
		}

		if (reader.ValueTextEquals(MemberMin))
		{
			return MultiValueMode.Min;
		}

		if (reader.ValueTextEquals(MemberMax))
		{
			return MultiValueMode.Max;
		}

		if (reader.ValueTextEquals(MemberAvg))
		{
			return MultiValueMode.Avg;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberSum.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return MultiValueMode.Sum;
		}

		if (string.Equals(value, MemberMin.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return MultiValueMode.Min;
		}

		if (string.Equals(value, MemberMax.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return MultiValueMode.Max;
		}

		if (string.Equals(value, MemberAvg.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return MultiValueMode.Avg;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(MultiValueMode)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, MultiValueMode value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case MultiValueMode.Sum:
				writer.WriteStringValue(MemberSum);
				break;
			case MultiValueMode.Min:
				writer.WriteStringValue(MemberMin);
				break;
			case MultiValueMode.Max:
				writer.WriteStringValue(MemberMax);
				break;
			case MultiValueMode.Avg:
				writer.WriteStringValue(MemberAvg);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(MultiValueMode)}'.");
		}
	}
}

[JsonConverter(typeof(OperatorConverter))]
public enum Operator
{
	[EnumMember(Value = "or")]
	Or,
	[EnumMember(Value = "and")]
	And
}

internal sealed partial class OperatorConverter : System.Text.Json.Serialization.JsonConverter<Operator>
{
	private static readonly System.Text.Json.JsonEncodedText MemberOr = System.Text.Json.JsonEncodedText.Encode("or");
	private static readonly System.Text.Json.JsonEncodedText MemberOr1 = System.Text.Json.JsonEncodedText.Encode("OR");
	private static readonly System.Text.Json.JsonEncodedText MemberAnd = System.Text.Json.JsonEncodedText.Encode("and");
	private static readonly System.Text.Json.JsonEncodedText MemberAnd1 = System.Text.Json.JsonEncodedText.Encode("AND");

	public override Operator Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberOr) || reader.ValueTextEquals(MemberOr1))
		{
			return Operator.Or;
		}

		if (reader.ValueTextEquals(MemberAnd) || reader.ValueTextEquals(MemberAnd1))
		{
			return Operator.And;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberOr.Value, System.StringComparison.OrdinalIgnoreCase) || string.Equals(value, MemberOr1.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Operator.Or;
		}

		if (string.Equals(value, MemberAnd.Value, System.StringComparison.OrdinalIgnoreCase) || string.Equals(value, MemberAnd1.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Operator.And;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Operator)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Operator value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Operator.Or:
				writer.WriteStringValue(MemberOr);
				break;
			case Operator.And:
				writer.WriteStringValue(MemberAnd);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Operator)}'.");
		}
	}
}

[JsonConverter(typeof(RangeRelationConverter))]
public enum RangeRelation
{
	/// <summary>
	/// <para>
	/// Matches documents with a range field value entirely within the query’s range.
	/// </para>
	/// </summary>
	[EnumMember(Value = "within")]
	Within,
	/// <summary>
	/// <para>
	/// Matches documents with a range field value that intersects the query’s range.
	/// </para>
	/// </summary>
	[EnumMember(Value = "intersects")]
	Intersects,
	/// <summary>
	/// <para>
	/// Matches documents with a range field value that entirely contains the query’s range.
	/// </para>
	/// </summary>
	[EnumMember(Value = "contains")]
	Contains
}

internal sealed partial class RangeRelationConverter : System.Text.Json.Serialization.JsonConverter<RangeRelation>
{
	private static readonly System.Text.Json.JsonEncodedText MemberWithin = System.Text.Json.JsonEncodedText.Encode("within");
	private static readonly System.Text.Json.JsonEncodedText MemberIntersects = System.Text.Json.JsonEncodedText.Encode("intersects");
	private static readonly System.Text.Json.JsonEncodedText MemberContains = System.Text.Json.JsonEncodedText.Encode("contains");

	public override RangeRelation Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberWithin))
		{
			return RangeRelation.Within;
		}

		if (reader.ValueTextEquals(MemberIntersects))
		{
			return RangeRelation.Intersects;
		}

		if (reader.ValueTextEquals(MemberContains))
		{
			return RangeRelation.Contains;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberWithin.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return RangeRelation.Within;
		}

		if (string.Equals(value, MemberIntersects.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return RangeRelation.Intersects;
		}

		if (string.Equals(value, MemberContains.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return RangeRelation.Contains;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(RangeRelation)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, RangeRelation value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case RangeRelation.Within:
				writer.WriteStringValue(MemberWithin);
				break;
			case RangeRelation.Intersects:
				writer.WriteStringValue(MemberIntersects);
				break;
			case RangeRelation.Contains:
				writer.WriteStringValue(MemberContains);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(RangeRelation)}'.");
		}
	}
}

[JsonConverter(typeof(SimpleQueryStringFlagConverter))]
[Flags]
public enum SimpleQueryStringFlag
{
	/// <summary>
	/// <para>
	/// Enables whitespace as split characters.
	/// </para>
	/// </summary>
	[EnumMember(Value = "WHITESPACE")]
	Whitespace = 1 << 0,
	/// <summary>
	/// <para>
	/// Enables the <c>~N</c> operator, after a phrase where <c>N</c> is maximum number of positions allowed between matching tokens.
	/// Synonymous to <c>NEAR</c>.
	/// </para>
	/// </summary>
	[EnumMember(Value = "SLOP")]
	Slop = 1 << 1,
	/// <summary>
	/// <para>
	/// Enables the <c>*</c> prefix operator.
	/// </para>
	/// </summary>
	[EnumMember(Value = "PREFIX")]
	Prefix = 1 << 2,
	/// <summary>
	/// <para>
	/// Enables the <c>(</c> and <c>)</c> operators to control operator precedence.
	/// </para>
	/// </summary>
	[EnumMember(Value = "PRECEDENCE")]
	Precedence = 1 << 3,
	/// <summary>
	/// <para>
	/// Enables the <c>"</c> quotes operator used to search for phrases.
	/// </para>
	/// </summary>
	[EnumMember(Value = "PHRASE")]
	Phrase = 1 << 4,
	/// <summary>
	/// <para>
	/// Enables the <c>\|</c> OR operator.
	/// </para>
	/// </summary>
	[EnumMember(Value = "OR")]
	Or = 1 << 5,
	/// <summary>
	/// <para>
	/// Enables the <c>-</c> NOT operator.
	/// </para>
	/// </summary>
	[EnumMember(Value = "NOT")]
	Not = 1 << 6,
	/// <summary>
	/// <para>
	/// Disables all operators.
	/// </para>
	/// </summary>
	[EnumMember(Value = "NONE")]
	None = 1 << 7,
	/// <summary>
	/// <para>
	/// Enables the <c>~N</c> operator, after a phrase where <c>N</c> is the maximum number of positions allowed between matching tokens.
	/// Synonymous to <c>SLOP</c>.
	/// </para>
	/// </summary>
	[EnumMember(Value = "NEAR")]
	Near = 1 << 8,
	/// <summary>
	/// <para>
	/// Enables the <c>~N</c> operator after a word, where <c>N</c> is an integer denoting the allowed edit distance for matching.
	/// </para>
	/// </summary>
	[EnumMember(Value = "FUZZY")]
	Fuzzy = 1 << 9,
	/// <summary>
	/// <para>
	/// Enables <c>\</c> as an escape character.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ESCAPE")]
	Escape = 1 << 10,
	/// <summary>
	/// <para>
	/// Enables the <c>+</c> AND operator.
	/// </para>
	/// </summary>
	[EnumMember(Value = "AND")]
	And = 1 << 11,
	/// <summary>
	/// <para>
	/// Enables all optional operators.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ALL")]
	All = 1 << 12
}

internal sealed class SimpleQueryStringFlagConverter : JsonConverter<SimpleQueryStringFlag>
{
	public override SimpleQueryStringFlag Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var s = reader.GetString();
		if (string.IsNullOrEmpty(s))
		{
			return default;
		}

		var flags = s.Split('|');
		var result = default(SimpleQueryStringFlag);
		foreach (var flag in flags)
		{
			result |= flag switch
			{
				"WHITESPACE" => SimpleQueryStringFlag.Whitespace,
				"SLOP" => SimpleQueryStringFlag.Slop,
				"PREFIX" => SimpleQueryStringFlag.Prefix,
				"PRECEDENCE" => SimpleQueryStringFlag.Precedence,
				"PHRASE" => SimpleQueryStringFlag.Phrase,
				"OR" => SimpleQueryStringFlag.Or,
				"NOT" => SimpleQueryStringFlag.Not,
				"NONE" => SimpleQueryStringFlag.None,
				"NEAR" => SimpleQueryStringFlag.Near,
				"FUZZY" => SimpleQueryStringFlag.Fuzzy,
				"ESCAPE" => SimpleQueryStringFlag.Escape,
				"AND" => SimpleQueryStringFlag.And,
				"ALL" => SimpleQueryStringFlag.All,
				_ => throw new JsonException($"Invalid flag value '{flag}' for type '{typeToConvert.Name}'.")
			};
		}

		return result;
	}

	public override void Write(Utf8JsonWriter writer, SimpleQueryStringFlag value, JsonSerializerOptions options)
	{
		if (value == default)
		{
			writer.WriteStringValue(string.Empty);
			return;
		}

		var sb = new StringBuilder();
		if (value.HasFlag(SimpleQueryStringFlag.Whitespace))
			sb.Append("WHITESPACE|");
		if (value.HasFlag(SimpleQueryStringFlag.Slop))
			sb.Append("SLOP|");
		if (value.HasFlag(SimpleQueryStringFlag.Prefix))
			sb.Append("PREFIX|");
		if (value.HasFlag(SimpleQueryStringFlag.Precedence))
			sb.Append("PRECEDENCE|");
		if (value.HasFlag(SimpleQueryStringFlag.Phrase))
			sb.Append("PHRASE|");
		if (value.HasFlag(SimpleQueryStringFlag.Or))
			sb.Append("OR|");
		if (value.HasFlag(SimpleQueryStringFlag.Not))
			sb.Append("NOT|");
		if (value.HasFlag(SimpleQueryStringFlag.None))
			sb.Append("NONE|");
		if (value.HasFlag(SimpleQueryStringFlag.Near))
			sb.Append("NEAR|");
		if (value.HasFlag(SimpleQueryStringFlag.Fuzzy))
			sb.Append("FUZZY|");
		if (value.HasFlag(SimpleQueryStringFlag.Escape))
			sb.Append("ESCAPE|");
		if (value.HasFlag(SimpleQueryStringFlag.And))
			sb.Append("AND|");
		if (value.HasFlag(SimpleQueryStringFlag.All))
			sb.Append("ALL|");
		if (sb.Length == 0)
		{
			writer.WriteStringValue(string.Empty);
			return;
		}

		sb.Remove(sb.Length - 1, 1);
		writer.WriteStringValue(sb.ToString());
	}
}

[JsonConverter(typeof(TextQueryTypeConverter))]
public enum TextQueryType
{
	/// <summary>
	/// <para>
	/// Runs a <c>match_phrase_prefix</c> query on each field and uses the <c>_score</c> from the best field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "phrase_prefix")]
	PhrasePrefix,
	/// <summary>
	/// <para>
	/// Runs a <c>match_phrase</c> query on each field and uses the <c>_score</c> from the best field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "phrase")]
	Phrase,
	/// <summary>
	/// <para>
	/// Finds documents that match any field and combines the <c>_score</c> from each field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "most_fields")]
	MostFields,
	/// <summary>
	/// <para>
	/// Treats fields with the same analyzer as though they were one big field.
	/// Looks for each word in any field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "cross_fields")]
	CrossFields,
	/// <summary>
	/// <para>
	/// Creates a <c>match_bool_prefix</c> query on each field and combines the <c>_score</c> from each field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "bool_prefix")]
	BoolPrefix,
	/// <summary>
	/// <para>
	/// Finds documents that match any field, but uses the <c>_score</c> from the best field.
	/// </para>
	/// </summary>
	[EnumMember(Value = "best_fields")]
	BestFields
}

internal sealed partial class TextQueryTypeConverter : System.Text.Json.Serialization.JsonConverter<TextQueryType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberPhrasePrefix = System.Text.Json.JsonEncodedText.Encode("phrase_prefix");
	private static readonly System.Text.Json.JsonEncodedText MemberPhrase = System.Text.Json.JsonEncodedText.Encode("phrase");
	private static readonly System.Text.Json.JsonEncodedText MemberMostFields = System.Text.Json.JsonEncodedText.Encode("most_fields");
	private static readonly System.Text.Json.JsonEncodedText MemberCrossFields = System.Text.Json.JsonEncodedText.Encode("cross_fields");
	private static readonly System.Text.Json.JsonEncodedText MemberBoolPrefix = System.Text.Json.JsonEncodedText.Encode("bool_prefix");
	private static readonly System.Text.Json.JsonEncodedText MemberBestFields = System.Text.Json.JsonEncodedText.Encode("best_fields");

	public override TextQueryType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberPhrasePrefix))
		{
			return TextQueryType.PhrasePrefix;
		}

		if (reader.ValueTextEquals(MemberPhrase))
		{
			return TextQueryType.Phrase;
		}

		if (reader.ValueTextEquals(MemberMostFields))
		{
			return TextQueryType.MostFields;
		}

		if (reader.ValueTextEquals(MemberCrossFields))
		{
			return TextQueryType.CrossFields;
		}

		if (reader.ValueTextEquals(MemberBoolPrefix))
		{
			return TextQueryType.BoolPrefix;
		}

		if (reader.ValueTextEquals(MemberBestFields))
		{
			return TextQueryType.BestFields;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberPhrasePrefix.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.PhrasePrefix;
		}

		if (string.Equals(value, MemberPhrase.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.Phrase;
		}

		if (string.Equals(value, MemberMostFields.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.MostFields;
		}

		if (string.Equals(value, MemberCrossFields.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.CrossFields;
		}

		if (string.Equals(value, MemberBoolPrefix.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.BoolPrefix;
		}

		if (string.Equals(value, MemberBestFields.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return TextQueryType.BestFields;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(TextQueryType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, TextQueryType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case TextQueryType.PhrasePrefix:
				writer.WriteStringValue(MemberPhrasePrefix);
				break;
			case TextQueryType.Phrase:
				writer.WriteStringValue(MemberPhrase);
				break;
			case TextQueryType.MostFields:
				writer.WriteStringValue(MemberMostFields);
				break;
			case TextQueryType.CrossFields:
				writer.WriteStringValue(MemberCrossFields);
				break;
			case TextQueryType.BoolPrefix:
				writer.WriteStringValue(MemberBoolPrefix);
				break;
			case TextQueryType.BestFields:
				writer.WriteStringValue(MemberBestFields);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(TextQueryType)}'.");
		}
	}
}

[JsonConverter(typeof(ZeroTermsQueryConverter))]
public enum ZeroTermsQuery
{
	/// <summary>
	/// <para>
	/// No documents are returned if the <c>analyzer</c> removes all tokens.
	/// </para>
	/// </summary>
	[EnumMember(Value = "none")]
	None,
	/// <summary>
	/// <para>
	/// Returns all documents, similar to a <c>match_all</c> query.
	/// </para>
	/// </summary>
	[EnumMember(Value = "all")]
	All
}

internal sealed partial class ZeroTermsQueryConverter : System.Text.Json.Serialization.JsonConverter<ZeroTermsQuery>
{
	private static readonly System.Text.Json.JsonEncodedText MemberNone = System.Text.Json.JsonEncodedText.Encode("none");
	private static readonly System.Text.Json.JsonEncodedText MemberAll = System.Text.Json.JsonEncodedText.Encode("all");

	public override ZeroTermsQuery Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberNone))
		{
			return ZeroTermsQuery.None;
		}

		if (reader.ValueTextEquals(MemberAll))
		{
			return ZeroTermsQuery.All;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberNone.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ZeroTermsQuery.None;
		}

		if (string.Equals(value, MemberAll.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ZeroTermsQuery.All;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(ZeroTermsQuery)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ZeroTermsQuery value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case ZeroTermsQuery.None:
				writer.WriteStringValue(MemberNone);
				break;
			case ZeroTermsQuery.All:
				writer.WriteStringValue(MemberAll);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(ZeroTermsQuery)}'.");
		}
	}
}