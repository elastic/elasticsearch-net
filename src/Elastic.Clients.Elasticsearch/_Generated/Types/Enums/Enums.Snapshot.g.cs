// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Snapshot;

[JsonConverter(typeof(ShardsStatsStageConverter))]
public enum ShardsStatsStage
{
	/// <summary>
	/// <para>
	/// Number of shards in the snapshot that are in the started stage of being stored in the repository.
	/// </para>
	/// </summary>
	[EnumMember(Value = "STARTED")]
	Started,
	/// <summary>
	/// <para>
	/// Number of shards in the snapshot that are in the initializing stage of being stored in the repository.
	/// </para>
	/// </summary>
	[EnumMember(Value = "INIT")]
	Init,
	/// <summary>
	/// <para>
	/// Number of shards in the snapshot that are in the finalizing stage of being stored in the repository.
	/// </para>
	/// </summary>
	[EnumMember(Value = "FINALIZE")]
	Finalize,
	/// <summary>
	/// <para>
	/// Number of shards in the snapshot that were not successfully stored in the repository.
	/// </para>
	/// </summary>
	[EnumMember(Value = "FAILURE")]
	Failure,
	/// <summary>
	/// <para>
	/// Number of shards in the snapshot that were successfully stored in the repository.
	/// </para>
	/// </summary>
	[EnumMember(Value = "DONE")]
	Done
}

internal sealed partial class ShardsStatsStageConverter : System.Text.Json.Serialization.JsonConverter<ShardsStatsStage>
{
	private static readonly System.Text.Json.JsonEncodedText MemberStarted = System.Text.Json.JsonEncodedText.Encode("STARTED");
	private static readonly System.Text.Json.JsonEncodedText MemberInit = System.Text.Json.JsonEncodedText.Encode("INIT");
	private static readonly System.Text.Json.JsonEncodedText MemberFinalize = System.Text.Json.JsonEncodedText.Encode("FINALIZE");
	private static readonly System.Text.Json.JsonEncodedText MemberFailure = System.Text.Json.JsonEncodedText.Encode("FAILURE");
	private static readonly System.Text.Json.JsonEncodedText MemberDone = System.Text.Json.JsonEncodedText.Encode("DONE");

	public override ShardsStatsStage Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberStarted))
		{
			return ShardsStatsStage.Started;
		}

		if (reader.ValueTextEquals(MemberInit))
		{
			return ShardsStatsStage.Init;
		}

		if (reader.ValueTextEquals(MemberFinalize))
		{
			return ShardsStatsStage.Finalize;
		}

		if (reader.ValueTextEquals(MemberFailure))
		{
			return ShardsStatsStage.Failure;
		}

		if (reader.ValueTextEquals(MemberDone))
		{
			return ShardsStatsStage.Done;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberStarted.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ShardsStatsStage.Started;
		}

		if (string.Equals(value, MemberInit.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ShardsStatsStage.Init;
		}

		if (string.Equals(value, MemberFinalize.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ShardsStatsStage.Finalize;
		}

		if (string.Equals(value, MemberFailure.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ShardsStatsStage.Failure;
		}

		if (string.Equals(value, MemberDone.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return ShardsStatsStage.Done;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(ShardsStatsStage)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ShardsStatsStage value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case ShardsStatsStage.Started:
				writer.WriteStringValue(MemberStarted);
				break;
			case ShardsStatsStage.Init:
				writer.WriteStringValue(MemberInit);
				break;
			case ShardsStatsStage.Finalize:
				writer.WriteStringValue(MemberFinalize);
				break;
			case ShardsStatsStage.Failure:
				writer.WriteStringValue(MemberFailure);
				break;
			case ShardsStatsStage.Done:
				writer.WriteStringValue(MemberDone);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(ShardsStatsStage)}'.");
		}
	}
}

[JsonConverter(typeof(SnapshotSortConverter))]
public enum SnapshotSort
{
	[EnumMember(Value = "start_time")]
	StartTime,
	[EnumMember(Value = "shard_count")]
	ShardCount,
	[EnumMember(Value = "repository")]
	Repository,
	[EnumMember(Value = "name")]
	Name,
	[EnumMember(Value = "index_count")]
	IndexCount,
	[EnumMember(Value = "failed_shard_count")]
	FailedShardCount,
	[EnumMember(Value = "duration")]
	Duration
}

internal sealed partial class SnapshotSortConverter : System.Text.Json.Serialization.JsonConverter<SnapshotSort>
{
	private static readonly System.Text.Json.JsonEncodedText MemberStartTime = System.Text.Json.JsonEncodedText.Encode("start_time");
	private static readonly System.Text.Json.JsonEncodedText MemberShardCount = System.Text.Json.JsonEncodedText.Encode("shard_count");
	private static readonly System.Text.Json.JsonEncodedText MemberRepository = System.Text.Json.JsonEncodedText.Encode("repository");
	private static readonly System.Text.Json.JsonEncodedText MemberName = System.Text.Json.JsonEncodedText.Encode("name");
	private static readonly System.Text.Json.JsonEncodedText MemberIndexCount = System.Text.Json.JsonEncodedText.Encode("index_count");
	private static readonly System.Text.Json.JsonEncodedText MemberFailedShardCount = System.Text.Json.JsonEncodedText.Encode("failed_shard_count");
	private static readonly System.Text.Json.JsonEncodedText MemberDuration = System.Text.Json.JsonEncodedText.Encode("duration");

	public override SnapshotSort Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.String);
		if (reader.ValueTextEquals(MemberStartTime))
		{
			return SnapshotSort.StartTime;
		}

		if (reader.ValueTextEquals(MemberShardCount))
		{
			return SnapshotSort.ShardCount;
		}

		if (reader.ValueTextEquals(MemberRepository))
		{
			return SnapshotSort.Repository;
		}

		if (reader.ValueTextEquals(MemberName))
		{
			return SnapshotSort.Name;
		}

		if (reader.ValueTextEquals(MemberIndexCount))
		{
			return SnapshotSort.IndexCount;
		}

		if (reader.ValueTextEquals(MemberFailedShardCount))
		{
			return SnapshotSort.FailedShardCount;
		}

		if (reader.ValueTextEquals(MemberDuration))
		{
			return SnapshotSort.Duration;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberStartTime.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.StartTime;
		}

		if (string.Equals(value, MemberShardCount.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.ShardCount;
		}

		if (string.Equals(value, MemberRepository.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.Repository;
		}

		if (string.Equals(value, MemberName.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.Name;
		}

		if (string.Equals(value, MemberIndexCount.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.IndexCount;
		}

		if (string.Equals(value, MemberFailedShardCount.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.FailedShardCount;
		}

		if (string.Equals(value, MemberDuration.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return SnapshotSort.Duration;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(SnapshotSort)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, SnapshotSort value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case SnapshotSort.StartTime:
				writer.WriteStringValue(MemberStartTime);
				break;
			case SnapshotSort.ShardCount:
				writer.WriteStringValue(MemberShardCount);
				break;
			case SnapshotSort.Repository:
				writer.WriteStringValue(MemberRepository);
				break;
			case SnapshotSort.Name:
				writer.WriteStringValue(MemberName);
				break;
			case SnapshotSort.IndexCount:
				writer.WriteStringValue(MemberIndexCount);
				break;
			case SnapshotSort.FailedShardCount:
				writer.WriteStringValue(MemberFailedShardCount);
				break;
			case SnapshotSort.Duration:
				writer.WriteStringValue(MemberDuration);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(SnapshotSort)}'.");
		}
	}
}