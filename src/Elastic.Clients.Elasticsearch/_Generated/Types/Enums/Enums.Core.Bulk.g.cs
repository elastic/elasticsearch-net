// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.Bulk;

[JsonConverter(typeof(FailureStoreStatusConverter))]
public enum FailureStoreStatus
{
	[EnumMember(Value = "used")]
	Used,
	[EnumMember(Value = "not_enabled")]
	NotEnabled,
	[EnumMember(Value = "not_applicable_or_unknown")]
	NotApplicableOrUnknown,
	[EnumMember(Value = "failed")]
	Failed
}

internal sealed class FailureStoreStatusConverter : JsonConverter<FailureStoreStatus>
{
	public override FailureStoreStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var enumString = reader.GetString();
		switch (enumString)
		{
			case "used":
				return FailureStoreStatus.Used;
			case "not_enabled":
				return FailureStoreStatus.NotEnabled;
			case "not_applicable_or_unknown":
				return FailureStoreStatus.NotApplicableOrUnknown;
			case "failed":
				return FailureStoreStatus.Failed;
		}

		ThrowHelper.ThrowJsonException();
		return default;
	}

	public override void Write(Utf8JsonWriter writer, FailureStoreStatus value, JsonSerializerOptions options)
	{
		switch (value)
		{
			case FailureStoreStatus.Used:
				writer.WriteStringValue("used");
				return;
			case FailureStoreStatus.NotEnabled:
				writer.WriteStringValue("not_enabled");
				return;
			case FailureStoreStatus.NotApplicableOrUnknown:
				writer.WriteStringValue("not_applicable_or_unknown");
				return;
			case FailureStoreStatus.Failed:
				writer.WriteStringValue("failed");
				return;
		}

		writer.WriteNullValue();
	}
}