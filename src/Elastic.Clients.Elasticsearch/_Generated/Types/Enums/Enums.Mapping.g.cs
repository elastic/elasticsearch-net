// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public enum DynamicMapping
	{
		[EnumMember(Value = "true")]
		True,
		[EnumMember(Value = "strict")]
		Strict,
		[EnumMember(Value = "runtime")]
		Runtime,
		[EnumMember(Value = "false")]
		False
	}

	public enum FieldType
	{
		[EnumMember(Value = "token_count")]
		TokenCount,
		[EnumMember(Value = "text")]
		Text,
		[EnumMember(Value = "short")]
		Short,
		[EnumMember(Value = "shape")]
		Shape,
		[EnumMember(Value = "search_as_you_type")]
		SearchAsYouType,
		[EnumMember(Value = "scaled_float")]
		ScaledFloat,
		[EnumMember(Value = "rank_features")]
		RankFeatures,
		[EnumMember(Value = "rank_feature")]
		RankFeature,
		[EnumMember(Value = "percolator")]
		Percolator,
		[EnumMember(Value = "object")]
		Object,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "nested")]
		Nested,
		[EnumMember(Value = "murmur3")]
		Murmur3,
		[EnumMember(Value = "long_range")]
		LongRange,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "keyword")]
		Keyword,
		[EnumMember(Value = "join")]
		Join,
		[EnumMember(Value = "ip_range")]
		IpRange,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "integer_range")]
		IntegerRange,
		[EnumMember(Value = "integer")]
		Integer,
		[EnumMember(Value = "histogram")]
		Histogram,
		[EnumMember(Value = "half_float")]
		HalfFloat,
		[EnumMember(Value = "geo_shape")]
		GeoShape,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "float_range")]
		FloatRange,
		[EnumMember(Value = "float")]
		Float,
		[EnumMember(Value = "flattened")]
		Flattened,
		[EnumMember(Value = "double_range")]
		DoubleRange,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "dense_vector")]
		DenseVector,
		[EnumMember(Value = "date_range")]
		DateRange,
		[EnumMember(Value = "date_nanos")]
		DateNanos,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "constant_keyword")]
		ConstantKeyword,
		[EnumMember(Value = "completion")]
		Completion,
		[EnumMember(Value = "byte")]
		Byte,
		[EnumMember(Value = "boolean")]
		Boolean,
		[EnumMember(Value = "binary")]
		Binary,
		[EnumMember(Value = "alias")]
		Alias,
		[EnumMember(Value = "aggregate_metric_double")]
		AggregateMetricDouble
	}

	public enum GeoOrientation
	{
		[EnumMember(Value = "right")]
		Right,
		[EnumMember(Value = "left")]
		Left,
		[EnumMember(Value = "cw")]
		Cw,
		[EnumMember(Value = "counterclockwise")]
		Counterclockwise,
		[EnumMember(Value = "clockwise")]
		Clockwise,
		[EnumMember(Value = "ccw")]
		Ccw
	}

	public enum GeoStrategy
	{
		[EnumMember(Value = "term")]
		Term,
		[EnumMember(Value = "recursive")]
		Recursive
	}

	public enum IndexOptions
	{
		[EnumMember(Value = "positions")]
		Positions,
		[EnumMember(Value = "offsets")]
		Offsets,
		[EnumMember(Value = "freqs")]
		Freqs,
		[EnumMember(Value = "docs")]
		Docs
	}

	public enum MatchType
	{
		[EnumMember(Value = "simple")]
		Simple,
		[EnumMember(Value = "regex")]
		Regex
	}

	public enum NumberType
	{
		[EnumMember(Value = "unsigned_long")]
		UnsignedLong,
		[EnumMember(Value = "short")]
		Short,
		[EnumMember(Value = "scaled_float")]
		ScaledFloat,
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "integer")]
		Integer,
		[EnumMember(Value = "half_float")]
		HalfFloat,
		[EnumMember(Value = "float")]
		Float,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "byte")]
		Byte
	}

	public enum RuntimeFieldType
	{
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "keyword")]
		Keyword,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "boolean")]
		Boolean
	}

	public enum ShapeOrientation
	{
		[EnumMember(Value = "right")]
		Right,
		[EnumMember(Value = "left")]
		Left,
		[EnumMember(Value = "cw")]
		Cw,
		[EnumMember(Value = "counterclockwise")]
		Counterclockwise,
		[EnumMember(Value = "clockwise")]
		Clockwise,
		[EnumMember(Value = "ccw")]
		Ccw
	}

	public enum TermVectorOption
	{
		[EnumMember(Value = "yes")]
		Yes,
		[EnumMember(Value = "with_positions_offsets_payloads")]
		WithPositionsOffsetsPayloads,
		[EnumMember(Value = "with_positions_offsets")]
		WithPositionsOffsets,
		[EnumMember(Value = "with_positions")]
		WithPositions,
		[EnumMember(Value = "with_offsets")]
		WithOffsets,
		[EnumMember(Value = "no")]
		No
	}
}