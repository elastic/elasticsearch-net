// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	[JsonConverter(typeof(RuntimeFieldTypeConverter))]
	public enum RuntimeFieldType
	{
		[EnumMember(Value = "long")]
		Long,
		[EnumMember(Value = "keyword")]
		Keyword,
		[EnumMember(Value = "ip")]
		Ip,
		[EnumMember(Value = "geo_point")]
		GeoPoint,
		[EnumMember(Value = "double")]
		Double,
		[EnumMember(Value = "date")]
		Date,
		[EnumMember(Value = "boolean")]
		Boolean
	}

	internal sealed class RuntimeFieldTypeConverter : JsonConverter<RuntimeFieldType>
	{
		public override RuntimeFieldType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var enumString = reader.GetString();
			switch (enumString)
			{
				case "long":
					return RuntimeFieldType.Long;
				case "keyword":
					return RuntimeFieldType.Keyword;
				case "ip":
					return RuntimeFieldType.Ip;
				case "geo_point":
					return RuntimeFieldType.GeoPoint;
				case "double":
					return RuntimeFieldType.Double;
				case "date":
					return RuntimeFieldType.Date;
				case "boolean":
					return RuntimeFieldType.Boolean;
			}

			ThrowHelper.ThrowJsonException();
			return default;
		}

		public override void Write(Utf8JsonWriter writer, RuntimeFieldType value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case RuntimeFieldType.Long:
					writer.WriteStringValue("long");
					return;
				case RuntimeFieldType.Keyword:
					writer.WriteStringValue("keyword");
					return;
				case RuntimeFieldType.Ip:
					writer.WriteStringValue("ip");
					return;
				case RuntimeFieldType.GeoPoint:
					writer.WriteStringValue("geo_point");
					return;
				case RuntimeFieldType.Double:
					writer.WriteStringValue("double");
					return;
				case RuntimeFieldType.Date:
					writer.WriteStringValue("date");
					return;
				case RuntimeFieldType.Boolean:
					writer.WriteStringValue("boolean");
					return;
			}

			writer.WriteNullValue();
		}
	}
}