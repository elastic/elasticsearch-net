// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class AccessTokenGrantTypeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberPassword = System.Text.Json.JsonEncodedText.Encode("password");
	private static readonly System.Text.Json.JsonEncodedText MemberClientCredentials = System.Text.Json.JsonEncodedText.Encode("client_credentials");
	private static readonly System.Text.Json.JsonEncodedText MemberKerberos = System.Text.Json.JsonEncodedText.Encode("_kerberos");
	private static readonly System.Text.Json.JsonEncodedText MemberRefreshToken = System.Text.Json.JsonEncodedText.Encode("refresh_token");

	public override Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberPassword))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Password;
		}

		if (reader.ValueTextEquals(MemberClientCredentials))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.ClientCredentials;
		}

		if (reader.ValueTextEquals(MemberKerberos))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Kerberos;
		}

		if (reader.ValueTextEquals(MemberRefreshToken))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.RefreshToken;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberPassword.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Password;
		}

		if (string.Equals(value, MemberClientCredentials.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.ClientCredentials;
		}

		if (string.Equals(value, MemberKerberos.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Kerberos;
		}

		if (string.Equals(value, MemberRefreshToken.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.RefreshToken;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Password:
				writer.WriteStringValue(MemberPassword);
				break;
			case Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.ClientCredentials:
				writer.WriteStringValue(MemberClientCredentials);
				break;
			case Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.Kerberos:
				writer.WriteStringValue(MemberKerberos);
				break;
			case Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType.RefreshToken:
				writer.WriteStringValue(MemberRefreshToken);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.AccessTokenGrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

internal sealed partial class ApiKeyGrantTypeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberAccessToken = System.Text.Json.JsonEncodedText.Encode("access_token");
	private static readonly System.Text.Json.JsonEncodedText MemberPassword = System.Text.Json.JsonEncodedText.Encode("password");

	public override Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberAccessToken))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.AccessToken;
		}

		if (reader.ValueTextEquals(MemberPassword))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.Password;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberAccessToken.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.AccessToken;
		}

		if (string.Equals(value, MemberPassword.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.Password;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.AccessToken:
				writer.WriteStringValue(MemberAccessToken);
				break;
			case Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType.Password:
				writer.WriteStringValue(MemberPassword);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.ApiKeyGrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

internal sealed partial class GrantTypeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.GrantType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberPassword = System.Text.Json.JsonEncodedText.Encode("password");
	private static readonly System.Text.Json.JsonEncodedText MemberAccessToken = System.Text.Json.JsonEncodedText.Encode("access_token");

	public override Elastic.Clients.Elasticsearch.Security.GrantType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberPassword))
		{
			return Elastic.Clients.Elasticsearch.Security.GrantType.Password;
		}

		if (reader.ValueTextEquals(MemberAccessToken))
		{
			return Elastic.Clients.Elasticsearch.Security.GrantType.AccessToken;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberPassword.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.GrantType.Password;
		}

		if (string.Equals(value, MemberAccessToken.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.GrantType.AccessToken;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.GrantType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.GrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.GrantType.Password:
				writer.WriteStringValue(MemberPassword);
				break;
			case Elastic.Clients.Elasticsearch.Security.GrantType.AccessToken:
				writer.WriteStringValue(MemberAccessToken);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.GrantType)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.GrantType ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.GrantType value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

internal sealed partial class ClusterPrivilegeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>
{
	public override Elastic.Clients.Elasticsearch.Security.ClusterPrivilege Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new Elastic.Clients.Elasticsearch.Security.ClusterPrivilege(reader.ReadValue<string?>(options, null));
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.ClusterPrivilege value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.Value, null);
	}
}

internal sealed partial class IndexPrivilegeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.IndexPrivilege>
{
	public override Elastic.Clients.Elasticsearch.Security.IndexPrivilege Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new Elastic.Clients.Elasticsearch.Security.IndexPrivilege(reader.ReadValue<string?>(options, null));
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.IndexPrivilege value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.Value, null);
	}
}

internal sealed partial class RemoteClusterPrivilegeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege>
{
	private static readonly System.Text.Json.JsonEncodedText MemberMonitorEnrich = System.Text.Json.JsonEncodedText.Encode("monitor_enrich");
	private static readonly System.Text.Json.JsonEncodedText MemberMonitorStats = System.Text.Json.JsonEncodedText.Encode("monitor_stats");

	public override Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberMonitorEnrich))
		{
			return Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorEnrich;
		}

		if (reader.ValueTextEquals(MemberMonitorStats))
		{
			return Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorStats;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberMonitorEnrich.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorEnrich;
		}

		if (string.Equals(value, MemberMonitorStats.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorStats;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorEnrich:
				writer.WriteStringValue(MemberMonitorEnrich);
				break;
			case Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege.MonitorStats:
				writer.WriteStringValue(MemberMonitorStats);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilege value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

internal sealed partial class TemplateFormatConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.TemplateFormat>
{
	private static readonly System.Text.Json.JsonEncodedText MemberString = System.Text.Json.JsonEncodedText.Encode("string");
	private static readonly System.Text.Json.JsonEncodedText MemberJson = System.Text.Json.JsonEncodedText.Encode("json");

	public override Elastic.Clients.Elasticsearch.Security.TemplateFormat Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberString))
		{
			return Elastic.Clients.Elasticsearch.Security.TemplateFormat.String;
		}

		if (reader.ValueTextEquals(MemberJson))
		{
			return Elastic.Clients.Elasticsearch.Security.TemplateFormat.Json;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberString.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.TemplateFormat.String;
		}

		if (string.Equals(value, MemberJson.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.TemplateFormat.Json;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.TemplateFormat)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.TemplateFormat value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.TemplateFormat.String:
				writer.WriteStringValue(MemberString);
				break;
			case Elastic.Clients.Elasticsearch.Security.TemplateFormat.Json:
				writer.WriteStringValue(MemberJson);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.TemplateFormat)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.TemplateFormat ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.TemplateFormat value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

internal sealed partial class RestrictionWorkflowConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.RestrictionWorkflow>
{
	public override Elastic.Clients.Elasticsearch.Security.RestrictionWorkflow Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new Elastic.Clients.Elasticsearch.Security.RestrictionWorkflow(reader.ReadValue<string?>(options, null));
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.RestrictionWorkflow value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.Value, null);
	}
}

internal sealed partial class ApiKeyTypeConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Security.ApiKeyType>
{
	private static readonly System.Text.Json.JsonEncodedText MemberRest = System.Text.Json.JsonEncodedText.Encode("rest");
	private static readonly System.Text.Json.JsonEncodedText MemberCrossCluster = System.Text.Json.JsonEncodedText.Encode("cross_cluster");

	public override Elastic.Clients.Elasticsearch.Security.ApiKeyType Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.ValueTextEquals(MemberRest))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyType.Rest;
		}

		if (reader.ValueTextEquals(MemberCrossCluster))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyType.CrossCluster;
		}

		var value = reader.GetString()!;
		if (string.Equals(value, MemberRest.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyType.Rest;
		}

		if (string.Equals(value, MemberCrossCluster.Value, System.StringComparison.OrdinalIgnoreCase))
		{
			return Elastic.Clients.Elasticsearch.Security.ApiKeyType.CrossCluster;
		}

		throw new System.Text.Json.JsonException($"Unknown member '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.ApiKeyType)}'.");
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.ApiKeyType value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value)
		{
			case Elastic.Clients.Elasticsearch.Security.ApiKeyType.Rest:
				writer.WriteStringValue(MemberRest);
				break;
			case Elastic.Clients.Elasticsearch.Security.ApiKeyType.CrossCluster:
				writer.WriteStringValue(MemberCrossCluster);
				break;
			default:
				throw new System.Text.Json.JsonException($"Invalid value '{value}' for enum '{nameof(Elastic.Clients.Elasticsearch.Security.ApiKeyType)}'.");
		}
	}

	public override Elastic.Clients.Elasticsearch.Security.ApiKeyType ReadAsPropertyName(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return Read(ref reader, typeToConvert, options);
	}

	public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Security.ApiKeyType value, System.Text.Json.JsonSerializerOptions options)
	{
		Write(writer, value, options);
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.AccessTokenGrantTypeConverter))]
public enum AccessTokenGrantType
{
	/// <summary>
	/// <para>
	/// This grant type implements the Resource Owner Password Credentials Grant of OAuth2.
	/// In this grant, a trusted client exchanges the end user's credentials for an access token and (possibly) a refresh token.
	/// The request needs to be made by an authenticated user but happens on behalf of another authenticated user (the one whose credentials are passed as request parameters).
	/// This grant type is not suitable or designed for the self-service user creation of tokens.
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "password")]
	Password,
	/// <summary>
	/// <para>
	/// This grant type implements the Client Credentials Grant of OAuth2.
	/// It is geared for machine to machine communication and is not suitable or designed for the self-service user creation of tokens.
	/// It generates only access tokens that cannot be refreshed.
	/// The premise is that the entity that uses <c>client_credentials</c> has constant access to a set of (client, not end-user) credentials and can authenticate itself at will.
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "client_credentials")]
	ClientCredentials,
	/// <summary>
	/// <para>
	/// This grant type is supported internally and implements SPNEGO based Kerberos support.
	/// The <c>_kerberos</c> grant type may change from version to version.
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "_kerberos")]
	Kerberos,
	/// <summary>
	/// <para>
	/// This grant type implements the Refresh Token Grant of OAuth2.
	/// In this grant a user exchanges a previously issued refresh token for a new access token and a new refresh token.
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "refresh_token")]
	RefreshToken
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.ApiKeyGrantTypeConverter))]
public enum ApiKeyGrantType
{
	[System.Runtime.Serialization.EnumMember(Value = "access_token")]
	AccessToken,
	[System.Runtime.Serialization.EnumMember(Value = "password")]
	Password
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.GrantTypeConverter))]
public enum GrantType
{
	/// <summary>
	/// <para>
	/// In this type of grant, you must supply the user ID and password for which you want to create the API key.
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "password")]
	Password,
	/// <summary>
	/// <para>
	/// In this type of grant, you must supply an access token that was created by the Elasticsearch token service.
	/// If you are activating a user profile, you can alternatively supply a JWT (either a JWT <c>access_token</c> or a JWT <c>id_token</c>).
	/// </para>
	/// </summary>
	[System.Runtime.Serialization.EnumMember(Value = "access_token")]
	AccessToken
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.ClusterPrivilegeConverter))]
public readonly partial struct ClusterPrivilege : Elastic.Clients.Elasticsearch.Serialization.IEnumStruct<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>
{
	public ClusterPrivilege(string value) => Value = value;
#if NET7_0_OR_GREATER
	static ClusterPrivilege IEnumStruct<ClusterPrivilege>.Create(string value) => value;
#else
	ClusterPrivilege IEnumStruct<ClusterPrivilege>.Create(string value) => value;
#endif
	public readonly string Value { get; }
	public static ClusterPrivilege All { get; } = new ClusterPrivilege("all");
	public static ClusterPrivilege CancelTask { get; } = new ClusterPrivilege("cancel_task");
	public static ClusterPrivilege CreateSnapshot { get; } = new ClusterPrivilege("create_snapshot");
	public static ClusterPrivilege CrossClusterReplication { get; } = new ClusterPrivilege("cross_cluster_replication");
	public static ClusterPrivilege CrossClusterSearch { get; } = new ClusterPrivilege("cross_cluster_search");
	public static ClusterPrivilege DelegatePki { get; } = new ClusterPrivilege("delegate_pki");
	public static ClusterPrivilege GrantApiKey { get; } = new ClusterPrivilege("grant_api_key");
	public static ClusterPrivilege Manage { get; } = new ClusterPrivilege("manage");
	public static ClusterPrivilege ManageApiKey { get; } = new ClusterPrivilege("manage_api_key");
	public static ClusterPrivilege ManageAutoscaling { get; } = new ClusterPrivilege("manage_autoscaling");
	public static ClusterPrivilege ManageBehavioralAnalytics { get; } = new ClusterPrivilege("manage_behavioral_analytics");
	public static ClusterPrivilege ManageCcr { get; } = new ClusterPrivilege("manage_ccr");
	public static ClusterPrivilege ManageDataFrameTransforms { get; } = new ClusterPrivilege("manage_data_frame_transforms");
	public static ClusterPrivilege ManageDataStreamGlobalRetention { get; } = new ClusterPrivilege("manage_data_stream_global_retention");
	public static ClusterPrivilege ManageEnrich { get; } = new ClusterPrivilege("manage_enrich");
	public static ClusterPrivilege ManageIlm { get; } = new ClusterPrivilege("manage_ilm");
	public static ClusterPrivilege ManageIndexTemplates { get; } = new ClusterPrivilege("manage_index_templates");
	public static ClusterPrivilege ManageInference { get; } = new ClusterPrivilege("manage_inference");
	public static ClusterPrivilege ManageIngestPipelines { get; } = new ClusterPrivilege("manage_ingest_pipelines");
	public static ClusterPrivilege ManageLogstashPipelines { get; } = new ClusterPrivilege("manage_logstash_pipelines");
	public static ClusterPrivilege ManageMl { get; } = new ClusterPrivilege("manage_ml");
	public static ClusterPrivilege ManageOidc { get; } = new ClusterPrivilege("manage_oidc");
	public static ClusterPrivilege ManageOwnApiKey { get; } = new ClusterPrivilege("manage_own_api_key");
	public static ClusterPrivilege ManagePipeline { get; } = new ClusterPrivilege("manage_pipeline");
	public static ClusterPrivilege ManageRollup { get; } = new ClusterPrivilege("manage_rollup");
	public static ClusterPrivilege ManageSaml { get; } = new ClusterPrivilege("manage_saml");
	public static ClusterPrivilege ManageSearchApplication { get; } = new ClusterPrivilege("manage_search_application");
	public static ClusterPrivilege ManageSearchQueryRules { get; } = new ClusterPrivilege("manage_search_query_rules");
	public static ClusterPrivilege ManageSearchSynonyms { get; } = new ClusterPrivilege("manage_search_synonyms");
	public static ClusterPrivilege ManageSecurity { get; } = new ClusterPrivilege("manage_security");
	public static ClusterPrivilege ManageServiceAccount { get; } = new ClusterPrivilege("manage_service_account");
	public static ClusterPrivilege ManageSlm { get; } = new ClusterPrivilege("manage_slm");
	public static ClusterPrivilege ManageToken { get; } = new ClusterPrivilege("manage_token");
	public static ClusterPrivilege ManageTransform { get; } = new ClusterPrivilege("manage_transform");
	public static ClusterPrivilege ManageUserProfile { get; } = new ClusterPrivilege("manage_user_profile");
	public static ClusterPrivilege ManageWatcher { get; } = new ClusterPrivilege("manage_watcher");
	public static ClusterPrivilege Monitor { get; } = new ClusterPrivilege("monitor");
	public static ClusterPrivilege MonitorDataFrameTransforms { get; } = new ClusterPrivilege("monitor_data_frame_transforms");
	public static ClusterPrivilege MonitorDataStreamGlobalRetention { get; } = new ClusterPrivilege("monitor_data_stream_global_retention");
	public static ClusterPrivilege MonitorEnrich { get; } = new ClusterPrivilege("monitor_enrich");
	public static ClusterPrivilege MonitorInference { get; } = new ClusterPrivilege("monitor_inference");
	public static ClusterPrivilege MonitorMl { get; } = new ClusterPrivilege("monitor_ml");
	public static ClusterPrivilege MonitorRollup { get; } = new ClusterPrivilege("monitor_rollup");
	public static ClusterPrivilege MonitorSnapshot { get; } = new ClusterPrivilege("monitor_snapshot");
	public static ClusterPrivilege MonitorStats { get; } = new ClusterPrivilege("monitor_stats");
	public static ClusterPrivilege MonitorTextStructure { get; } = new ClusterPrivilege("monitor_text_structure");
	public static ClusterPrivilege MonitorTransform { get; } = new ClusterPrivilege("monitor_transform");
	public static ClusterPrivilege MonitorWatcher { get; } = new ClusterPrivilege("monitor_watcher");
	public static ClusterPrivilege None { get; } = new ClusterPrivilege("none");
	public static ClusterPrivilege PostBehavioralAnalyticsEvent { get; } = new ClusterPrivilege("post_behavioral_analytics_event");
	public static ClusterPrivilege ReadCcr { get; } = new ClusterPrivilege("read_ccr");
	public static ClusterPrivilege ReadFleetSecrets { get; } = new ClusterPrivilege("read_fleet_secrets");
	public static ClusterPrivilege ReadIlm { get; } = new ClusterPrivilege("read_ilm");
	public static ClusterPrivilege ReadPipeline { get; } = new ClusterPrivilege("read_pipeline");
	public static ClusterPrivilege ReadSecurity { get; } = new ClusterPrivilege("read_security");
	public static ClusterPrivilege ReadSlm { get; } = new ClusterPrivilege("read_slm");
	public static ClusterPrivilege TransportClient { get; } = new ClusterPrivilege("transport_client");
	public static ClusterPrivilege WriteConnectorSecrets { get; } = new ClusterPrivilege("write_connector_secrets");
	public static ClusterPrivilege WriteFleetSecrets { get; } = new ClusterPrivilege("write_fleet_secrets");

	public override string ToString() => Value ?? string.Empty;

	public static implicit operator string(ClusterPrivilege @enum) => @enum.Value;
	public static implicit operator ClusterPrivilege(string value) => new(value);

	public override int GetHashCode() => Value.GetHashCode();
	public override bool Equals(object obj) => obj is ClusterPrivilege other && this.Equals(other);
	public bool Equals(ClusterPrivilege other) => Value == other.Value;

	public static bool operator ==(ClusterPrivilege a, ClusterPrivilege b) => a.Equals(b);
	public static bool operator !=(ClusterPrivilege a, ClusterPrivilege b) => !(a == b);
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.IndexPrivilegeConverter))]
public readonly partial struct IndexPrivilege : Elastic.Clients.Elasticsearch.Serialization.IEnumStruct<Elastic.Clients.Elasticsearch.Security.IndexPrivilege>
{
	public IndexPrivilege(string value) => Value = value;
#if NET7_0_OR_GREATER
	static IndexPrivilege IEnumStruct<IndexPrivilege>.Create(string value) => value;
#else
	IndexPrivilege IEnumStruct<IndexPrivilege>.Create(string value) => value;
#endif
	public readonly string Value { get; }
	public static IndexPrivilege All { get; } = new IndexPrivilege("all");
	public static IndexPrivilege AutoConfigure { get; } = new IndexPrivilege("auto_configure");
	public static IndexPrivilege Create { get; } = new IndexPrivilege("create");
	public static IndexPrivilege CreateDoc { get; } = new IndexPrivilege("create_doc");
	public static IndexPrivilege CreateIndex { get; } = new IndexPrivilege("create_index");
	public static IndexPrivilege CrossClusterReplication { get; } = new IndexPrivilege("cross_cluster_replication");
	public static IndexPrivilege CrossClusterReplicationInternal { get; } = new IndexPrivilege("cross_cluster_replication_internal");
	public static IndexPrivilege Delete { get; } = new IndexPrivilege("delete");
	public static IndexPrivilege DeleteIndex { get; } = new IndexPrivilege("delete_index");
	public static IndexPrivilege Index { get; } = new IndexPrivilege("index");
	public static IndexPrivilege Maintenance { get; } = new IndexPrivilege("maintenance");
	public static IndexPrivilege Manage { get; } = new IndexPrivilege("manage");
	public static IndexPrivilege ManageDataStreamLifecycle { get; } = new IndexPrivilege("manage_data_stream_lifecycle");
	public static IndexPrivilege ManageFollowIndex { get; } = new IndexPrivilege("manage_follow_index");
	public static IndexPrivilege ManageIlm { get; } = new IndexPrivilege("manage_ilm");
	public static IndexPrivilege ManageLeaderIndex { get; } = new IndexPrivilege("manage_leader_index");
	public static IndexPrivilege Monitor { get; } = new IndexPrivilege("monitor");
	public static IndexPrivilege None { get; } = new IndexPrivilege("none");
	public static IndexPrivilege Read { get; } = new IndexPrivilege("read");
	public static IndexPrivilege ReadCrossCluster { get; } = new IndexPrivilege("read_cross_cluster");
	public static IndexPrivilege ViewIndexMetadata { get; } = new IndexPrivilege("view_index_metadata");
	public static IndexPrivilege Write { get; } = new IndexPrivilege("write");

	public override string ToString() => Value ?? string.Empty;

	public static implicit operator string(IndexPrivilege @enum) => @enum.Value;
	public static implicit operator IndexPrivilege(string value) => new(value);

	public override int GetHashCode() => Value.GetHashCode();
	public override bool Equals(object obj) => obj is IndexPrivilege other && this.Equals(other);
	public bool Equals(IndexPrivilege other) => Value == other.Value;

	public static bool operator ==(IndexPrivilege a, IndexPrivilege b) => a.Equals(b);
	public static bool operator !=(IndexPrivilege a, IndexPrivilege b) => !(a == b);
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegeConverter))]
public enum RemoteClusterPrivilege
{
	[System.Runtime.Serialization.EnumMember(Value = "monitor_enrich")]
	MonitorEnrich,
	[System.Runtime.Serialization.EnumMember(Value = "monitor_stats")]
	MonitorStats
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.TemplateFormatConverter))]
public enum TemplateFormat
{
	[System.Runtime.Serialization.EnumMember(Value = "string")]
	String,
	[System.Runtime.Serialization.EnumMember(Value = "json")]
	Json
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.RestrictionWorkflowConverter))]
public readonly partial struct RestrictionWorkflow : Elastic.Clients.Elasticsearch.Serialization.IEnumStruct<Elastic.Clients.Elasticsearch.Security.RestrictionWorkflow>
{
	public RestrictionWorkflow(string value) => Value = value;
#if NET7_0_OR_GREATER
	static RestrictionWorkflow IEnumStruct<RestrictionWorkflow>.Create(string value) => value;
#else
	RestrictionWorkflow IEnumStruct<RestrictionWorkflow>.Create(string value) => value;
#endif
	public readonly string Value { get; }
	public static RestrictionWorkflow SearchApplicationQuery { get; } = new RestrictionWorkflow("search_application_query");

	public override string ToString() => Value ?? string.Empty;

	public static implicit operator string(RestrictionWorkflow @enum) => @enum.Value;
	public static implicit operator RestrictionWorkflow(string value) => new(value);

	public override int GetHashCode() => Value.GetHashCode();
	public override bool Equals(object obj) => obj is RestrictionWorkflow other && this.Equals(other);
	public bool Equals(RestrictionWorkflow other) => Value == other.Value;

	public static bool operator ==(RestrictionWorkflow a, RestrictionWorkflow b) => a.Equals(b);
	public static bool operator !=(RestrictionWorkflow a, RestrictionWorkflow b) => !(a == b);
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Security.ApiKeyTypeConverter))]
public enum ApiKeyType
{
	[System.Runtime.Serialization.EnumMember(Value = "rest")]
	Rest,
	[System.Runtime.Serialization.EnumMember(Value = "cross_cluster")]
	CrossCluster
}