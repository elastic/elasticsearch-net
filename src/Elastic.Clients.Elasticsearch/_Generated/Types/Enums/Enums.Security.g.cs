// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	[JsonConverter(typeof(ApiKeyGrantTypeConverter))]
	public enum ApiKeyGrantType
	{
		[EnumMember(Value = "password")]
		Password,
		[EnumMember(Value = "access_token")]
		AccessToken
	}

	internal sealed class ApiKeyGrantTypeConverter : JsonConverter<ApiKeyGrantType>
	{
		public override ApiKeyGrantType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var enumString = reader.GetString();
			switch (enumString)
			{
				case "password":
					return ApiKeyGrantType.Password;
				case "access_token":
					return ApiKeyGrantType.AccessToken;
			}

			ThrowHelper.ThrowJsonException();
			return default;
		}

		public override void Write(Utf8JsonWriter writer, ApiKeyGrantType value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case ApiKeyGrantType.Password:
					writer.WriteStringValue("password");
					return;
				case ApiKeyGrantType.AccessToken:
					writer.WriteStringValue("access_token");
					return;
			}

			writer.WriteNullValue();
		}
	}

	[JsonConverter(typeof(IndexPrivilegeConverter))]
	public enum IndexPrivilege
	{
		[EnumMember(Value = "write")]
		Write,
		[EnumMember(Value = "view_index_metadata")]
		ViewIndexMetadata,
		[EnumMember(Value = "read_cross_cluster")]
		ReadCrossCluster,
		[EnumMember(Value = "read")]
		Read,
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "monitor")]
		Monitor,
		[EnumMember(Value = "manage_leader_index")]
		ManageLeaderIndex,
		[EnumMember(Value = "manage_ilm")]
		ManageIlm,
		[EnumMember(Value = "manage_follow_index")]
		ManageFollowIndex,
		[EnumMember(Value = "manage")]
		Manage,
		[EnumMember(Value = "maintenance")]
		Maintenance,
		[EnumMember(Value = "index")]
		Index,
		[EnumMember(Value = "delete_index")]
		DeleteIndex,
		[EnumMember(Value = "delete")]
		Delete,
		[EnumMember(Value = "create_index")]
		CreateIndex,
		[EnumMember(Value = "create_doc")]
		CreateDoc,
		[EnumMember(Value = "create")]
		Create,
		[EnumMember(Value = "auto_configure")]
		AutoConfigure,
		[EnumMember(Value = "all")]
		All
	}

	internal sealed class IndexPrivilegeConverter : JsonConverter<IndexPrivilege>
	{
		public override IndexPrivilege Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var enumString = reader.GetString();
			switch (enumString)
			{
				case "write":
					return IndexPrivilege.Write;
				case "view_index_metadata":
					return IndexPrivilege.ViewIndexMetadata;
				case "read_cross_cluster":
					return IndexPrivilege.ReadCrossCluster;
				case "read":
					return IndexPrivilege.Read;
				case "none":
					return IndexPrivilege.None;
				case "monitor":
					return IndexPrivilege.Monitor;
				case "manage_leader_index":
					return IndexPrivilege.ManageLeaderIndex;
				case "manage_ilm":
					return IndexPrivilege.ManageIlm;
				case "manage_follow_index":
					return IndexPrivilege.ManageFollowIndex;
				case "manage":
					return IndexPrivilege.Manage;
				case "maintenance":
					return IndexPrivilege.Maintenance;
				case "index":
					return IndexPrivilege.Index;
				case "delete_index":
					return IndexPrivilege.DeleteIndex;
				case "delete":
					return IndexPrivilege.Delete;
				case "create_index":
					return IndexPrivilege.CreateIndex;
				case "create_doc":
					return IndexPrivilege.CreateDoc;
				case "create":
					return IndexPrivilege.Create;
				case "auto_configure":
					return IndexPrivilege.AutoConfigure;
				case "all":
					return IndexPrivilege.All;
			}

			ThrowHelper.ThrowJsonException();
			return default;
		}

		public override void Write(Utf8JsonWriter writer, IndexPrivilege value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case IndexPrivilege.Write:
					writer.WriteStringValue("write");
					return;
				case IndexPrivilege.ViewIndexMetadata:
					writer.WriteStringValue("view_index_metadata");
					return;
				case IndexPrivilege.ReadCrossCluster:
					writer.WriteStringValue("read_cross_cluster");
					return;
				case IndexPrivilege.Read:
					writer.WriteStringValue("read");
					return;
				case IndexPrivilege.None:
					writer.WriteStringValue("none");
					return;
				case IndexPrivilege.Monitor:
					writer.WriteStringValue("monitor");
					return;
				case IndexPrivilege.ManageLeaderIndex:
					writer.WriteStringValue("manage_leader_index");
					return;
				case IndexPrivilege.ManageIlm:
					writer.WriteStringValue("manage_ilm");
					return;
				case IndexPrivilege.ManageFollowIndex:
					writer.WriteStringValue("manage_follow_index");
					return;
				case IndexPrivilege.Manage:
					writer.WriteStringValue("manage");
					return;
				case IndexPrivilege.Maintenance:
					writer.WriteStringValue("maintenance");
					return;
				case IndexPrivilege.Index:
					writer.WriteStringValue("index");
					return;
				case IndexPrivilege.DeleteIndex:
					writer.WriteStringValue("delete_index");
					return;
				case IndexPrivilege.Delete:
					writer.WriteStringValue("delete");
					return;
				case IndexPrivilege.CreateIndex:
					writer.WriteStringValue("create_index");
					return;
				case IndexPrivilege.CreateDoc:
					writer.WriteStringValue("create_doc");
					return;
				case IndexPrivilege.Create:
					writer.WriteStringValue("create");
					return;
				case IndexPrivilege.AutoConfigure:
					writer.WriteStringValue("auto_configure");
					return;
				case IndexPrivilege.All:
					writer.WriteStringValue("all");
					return;
			}

			writer.WriteNullValue();
		}
	}
}