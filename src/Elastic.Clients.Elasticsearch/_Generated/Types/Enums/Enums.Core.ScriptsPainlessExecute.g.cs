// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.ScriptsPainlessExecute;

[JsonConverter(typeof(PainlessContextConverter))]
public enum PainlessContext
{
	/// <summary>
	/// <para>
	/// Treats scripts as if they were run inside a <c>script_score</c> function in a <c>function_score</c> query.
	/// </para>
	/// </summary>
	[EnumMember(Value = "score")]
	Score,
	/// <summary>
	/// <para>
	/// The default context if no other context is specified.
	/// </para>
	/// </summary>
	[EnumMember(Value = "painless_test")]
	PainlessTest,
	/// <summary>
	/// <para>
	/// The context for long numeric fields. The script returns a sorted list of long values.
	/// </para>
	/// </summary>
	[EnumMember(Value = "long_field")]
	LongField,
	/// <summary>
	/// <para>
	/// The context for keyword fields. The script returns a sorted list of string values.
	/// </para>
	/// </summary>
	[EnumMember(Value = "keyword_field")]
	KeywordField,
	/// <summary>
	/// <para>
	/// The context for <c>ip</c> fields. The script returns a sorted list of IP addresses.
	/// </para>
	/// </summary>
	[EnumMember(Value = "ip_field")]
	IpField,
	/// <summary>
	/// <para>
	/// The context for geo-point fields. <c>emit</c> takes two double parameters, the latitude and longitude values, and the script returns an object in GeoJSON format containing the coordinates for the geo point.
	/// </para>
	/// </summary>
	[EnumMember(Value = "geo_point_field")]
	GeoPointField,
	/// <summary>
	/// <para>
	/// Treats scripts as if they were run inside a script query.
	/// </para>
	/// </summary>
	[EnumMember(Value = "filter")]
	Filter,
	/// <summary>
	/// <para>
	/// The context for double numeric fields. The script returns a sorted list of double values.
	/// </para>
	/// </summary>
	[EnumMember(Value = "double_field")]
	DoubleField,
	/// <summary>
	/// <para>
	/// The context for date fields. <c>emit</c> takes a long value and the script returns a sorted list of dates.
	/// </para>
	/// </summary>
	[EnumMember(Value = "date_field")]
	DateField,
	/// <summary>
	/// <para>
	/// The context for composite runtime fields. The script returns a map of values.
	/// </para>
	/// </summary>
	[EnumMember(Value = "composite_field")]
	CompositeField,
	/// <summary>
	/// <para>
	/// The context for boolean fields. The script returns a <c>true</c> or <c>false</c> response.
	/// </para>
	/// </summary>
	[EnumMember(Value = "boolean_field")]
	BooleanField
}

internal sealed class PainlessContextConverter : JsonConverter<PainlessContext>
{
	public override PainlessContext Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var enumString = reader.GetString();
		switch (enumString)
		{
			case "score":
				return PainlessContext.Score;
			case "painless_test":
				return PainlessContext.PainlessTest;
			case "long_field":
				return PainlessContext.LongField;
			case "keyword_field":
				return PainlessContext.KeywordField;
			case "ip_field":
				return PainlessContext.IpField;
			case "geo_point_field":
				return PainlessContext.GeoPointField;
			case "filter":
				return PainlessContext.Filter;
			case "double_field":
				return PainlessContext.DoubleField;
			case "date_field":
				return PainlessContext.DateField;
			case "composite_field":
				return PainlessContext.CompositeField;
			case "boolean_field":
				return PainlessContext.BooleanField;
		}

		ThrowHelper.ThrowJsonException();
		return default;
	}

	public override void Write(Utf8JsonWriter writer, PainlessContext value, JsonSerializerOptions options)
	{
		switch (value)
		{
			case PainlessContext.Score:
				writer.WriteStringValue("score");
				return;
			case PainlessContext.PainlessTest:
				writer.WriteStringValue("painless_test");
				return;
			case PainlessContext.LongField:
				writer.WriteStringValue("long_field");
				return;
			case PainlessContext.KeywordField:
				writer.WriteStringValue("keyword_field");
				return;
			case PainlessContext.IpField:
				writer.WriteStringValue("ip_field");
				return;
			case PainlessContext.GeoPointField:
				writer.WriteStringValue("geo_point_field");
				return;
			case PainlessContext.Filter:
				writer.WriteStringValue("filter");
				return;
			case PainlessContext.DoubleField:
				writer.WriteStringValue("double_field");
				return;
			case PainlessContext.DateField:
				writer.WriteStringValue("date_field");
				return;
			case PainlessContext.CompositeField:
				writer.WriteStringValue("composite_field");
				return;
			case PainlessContext.BooleanField:
				writer.WriteStringValue("boolean_field");
				return;
		}

		writer.WriteNullValue();
	}
}