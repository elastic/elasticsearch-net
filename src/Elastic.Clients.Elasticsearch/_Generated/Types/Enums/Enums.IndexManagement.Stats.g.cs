// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.Stats
{
	[JsonConverter(typeof(ShardRoutingStateConverter))]
	public enum ShardRoutingState
	{
		Unassigned,
		Started,
		Relocating,
		Initializing
	}

	internal sealed class ShardRoutingStateConverter : JsonConverter<ShardRoutingState>
	{
		public override ShardRoutingState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var enumString = reader.GetString();
			switch (enumString)
			{
				case "UNASSIGNED":
					return ShardRoutingState.Unassigned;
				case "STARTED":
					return ShardRoutingState.Started;
				case "RELOCATING":
					return ShardRoutingState.Relocating;
				case "INITIALIZING":
					return ShardRoutingState.Initializing;
			}

			ThrowHelper.ThrowJsonException();
			return default;
		}

		public override void Write(Utf8JsonWriter writer, ShardRoutingState value, JsonSerializerOptions options)
		{
			switch (value)
			{
				case ShardRoutingState.Unassigned:
					writer.WriteStringValue("UNASSIGNED");
					return;
				case ShardRoutingState.Started:
					writer.WriteStringValue("STARTED");
					return;
				case ShardRoutingState.Relocating:
					writer.WriteStringValue("RELOCATING");
					return;
				case ShardRoutingState.Initializing:
					writer.WriteStringValue("INITIALIZING");
					return;
			}

			writer.WriteNullValue();
		}
	}
}