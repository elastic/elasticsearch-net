// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.TransformManagement;

internal sealed partial class PivotConverter : System.Text.Json.Serialization.JsonConverter<Pivot>
{
	private static readonly System.Text.Json.JsonEncodedText PropAggregations = System.Text.Json.JsonEncodedText.Encode("aggregations");
	private static readonly System.Text.Json.JsonEncodedText PropAggregations1 = System.Text.Json.JsonEncodedText.Encode("aggs");
	private static readonly System.Text.Json.JsonEncodedText PropGroupBy = System.Text.Json.JsonEncodedText.Encode("group_by");

	public override Pivot Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>?> propAggregations = default;
		LocalJsonValue<IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>?> propGroupBy = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAggregations.TryReadProperty(ref reader, options, PropAggregations, static IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, null, null)) || propAggregations.TryReadProperty(ref reader, options, PropAggregations1, static IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, null, null)))
			{
				continue;
			}

			if (propGroupBy.TryReadProperty(ref reader, options, PropGroupBy, static IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>(o, null, null)))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Pivot
		{
			Aggregations = propAggregations.Value
,
			GroupBy = propGroupBy.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Pivot value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAggregations, value.Aggregations, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? v) => w.WriteDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, v, null, null));
		writer.WriteProperty(options, PropGroupBy, value.GroupBy, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>? v) => w.WriteDictionaryValue<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>(o, v, null, null));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(PivotConverter))]
public sealed partial class Pivot
{
	/// <summary>
	/// <para>
	/// Defines how to aggregate the grouped data. The following aggregations are currently supported: average, bucket
	/// script, bucket selector, cardinality, filter, geo bounds, geo centroid, geo line, max, median absolute deviation,
	/// min, missing, percentiles, rare terms, scripted metric, stats, sum, terms, top metrics, value count, weighted
	/// average.
	/// </para>
	/// </summary>
	public IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? Aggregations { get; set; }

	/// <summary>
	/// <para>
	/// Defines how to group the data. More than one grouping can be defined per pivot. The following groupings are
	/// currently supported: date histogram, geotile grid, histogram, terms.
	/// </para>
	/// </summary>
	public IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy>? GroupBy { get; set; }
}

public sealed partial class PivotDescriptor<TDocument> : SerializableDescriptor<PivotDescriptor<TDocument>>
{
	internal PivotDescriptor(Action<PivotDescriptor<TDocument>> configure) => configure.Invoke(this);

	public PivotDescriptor() : base()
	{
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>> AggregationsValue { get; set; }
	private IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor<TDocument>> GroupByValue { get; set; }

	/// <summary>
	/// <para>
	/// Defines how to aggregate the grouped data. The following aggregations are currently supported: average, bucket
	/// script, bucket selector, cardinality, filter, geo bounds, geo centroid, geo line, max, median absolute deviation,
	/// min, missing, percentiles, rare terms, scripted metric, stats, sum, terms, top metrics, value count, weighted
	/// average.
	/// </para>
	/// </summary>
	public PivotDescriptor<TDocument> Aggregations(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>> selector)
	{
		AggregationsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines how to group the data. More than one grouping can be defined per pivot. The following groupings are
	/// currently supported: date histogram, geotile grid, histogram, terms.
	/// </para>
	/// </summary>
	public PivotDescriptor<TDocument> GroupBy(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor<TDocument>>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor<TDocument>>> selector)
	{
		GroupByValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor<TDocument>>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		if (GroupByValue is not null)
		{
			writer.WritePropertyName("group_by");
			JsonSerializer.Serialize(writer, GroupByValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class PivotDescriptor : SerializableDescriptor<PivotDescriptor>
{
	internal PivotDescriptor(Action<PivotDescriptor> configure) => configure.Invoke(this);

	public PivotDescriptor() : base()
	{
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor> AggregationsValue { get; set; }
	private IDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor> GroupByValue { get; set; }

	/// <summary>
	/// <para>
	/// Defines how to aggregate the grouped data. The following aggregations are currently supported: average, bucket
	/// script, bucket selector, cardinality, filter, geo bounds, geo centroid, geo line, max, median absolute deviation,
	/// min, missing, percentiles, rare terms, scripted metric, stats, sum, terms, top metrics, value count, weighted
	/// average.
	/// </para>
	/// </summary>
	public PivotDescriptor Aggregations(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>> selector)
	{
		AggregationsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines how to group the data. More than one grouping can be defined per pivot. The following groupings are
	/// currently supported: date histogram, geotile grid, histogram, terms.
	/// </para>
	/// </summary>
	public PivotDescriptor GroupBy(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor>> selector)
	{
		GroupByValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupByDescriptor>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		if (GroupByValue is not null)
		{
			writer.WritePropertyName("group_by");
			JsonSerializer.Serialize(writer, GroupByValue, options);
		}

		writer.WriteEndObject();
	}
}