// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Simulate;

internal sealed partial class IngestDocumentSimulationConverter : JsonConverter<IngestDocumentSimulation>
{
	public override IngestDocumentSimulation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		Elastic.Clients.Elasticsearch.ErrorCause? error = default;
		IReadOnlyCollection<string> executedPipelines = default;
		string id = default;
		IReadOnlyCollection<IReadOnlyDictionary<string, string>>? ignoredFields = default;
		string index = default;
		IReadOnlyDictionary<string, object> source = default;
		long version = default;
		Dictionary<string, string> additionalProperties = null;
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				var property = reader.GetString();
				if (property == "error")
				{
					error = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ErrorCause?>(ref reader, options);
					continue;
				}

				if (property == "executed_pipelines")
				{
					executedPipelines = JsonSerializer.Deserialize<IReadOnlyCollection<string>>(ref reader, options);
					continue;
				}

				if (property == "_id")
				{
					id = JsonSerializer.Deserialize<string>(ref reader, options);
					continue;
				}

				if (property == "ignored_fields")
				{
					ignoredFields = JsonSerializer.Deserialize<IReadOnlyCollection<IReadOnlyDictionary<string, string>>?>(ref reader, options);
					continue;
				}

				if (property == "_index")
				{
					index = JsonSerializer.Deserialize<string>(ref reader, options);
					continue;
				}

				if (property == "_source")
				{
					source = JsonSerializer.Deserialize<IReadOnlyDictionary<string, object>>(ref reader, options);
					continue;
				}

				if (property == "_version")
				{
					version = JsonSerializer.Deserialize<long>(ref reader, options);
					continue;
				}

				additionalProperties ??= new Dictionary<string, string>();
				var additionalValue = JsonSerializer.Deserialize<string>(ref reader, options);
				additionalProperties.Add(property, additionalValue);
			}
		}

		return new IngestDocumentSimulation { Error = error, ExecutedPipelines = executedPipelines, Id = id, IgnoredFields = ignoredFields, Index = index, Metadata = additionalProperties, Source = source, Version = version };
	}

	public override void Write(Utf8JsonWriter writer, IngestDocumentSimulation value, JsonSerializerOptions options)
	{
		throw new NotImplementedException("'IngestDocumentSimulation' is a readonly type, used only on responses and does not support being written to JSON.");
	}
}

/// <summary>
/// <para>
/// The results of ingest simulation on a single document. The _source of the document contains
/// the results after running all pipelines listed in executed_pipelines on the document. The
/// list of executed pipelines is derived from the pipelines that would be executed if this
/// document had been ingested into _index.
/// </para>
/// </summary>
[JsonConverter(typeof(IngestDocumentSimulationConverter))]
public sealed partial class IngestDocumentSimulation
{
	/// <summary>
	/// <para>
	/// Any error resulting from simulatng ingest on this doc. This can be an error generated by
	/// executing a processor, or a mapping validation error when simulating indexing the resulting
	/// doc.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.ErrorCause? Error { get; init; }

	/// <summary>
	/// <para>
	/// A list of the names of the pipelines executed on this document.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<string> ExecutedPipelines { get; init; }

	/// <summary>
	/// <para>
	/// Identifier for the document.
	/// </para>
	/// </summary>
	public string Id { get; init; }

	/// <summary>
	/// <para>
	/// A list of the fields that would be ignored at the indexing step. For example, a field whose
	/// value is larger than the allowed limit would make it through all of the pipelines, but
	/// would not be indexed into Elasticsearch.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<IReadOnlyDictionary<string, string>>? IgnoredFields { get; init; }

	/// <summary>
	/// <para>
	/// Name of the index that the document would be indexed into if this were not a simulation.
	/// </para>
	/// </summary>
	public string Index { get; init; }

	/// <summary>
	/// <para>
	/// Additional metadata
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, string> Metadata { get; init; }

	/// <summary>
	/// <para>
	/// JSON body for the document.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, object> Source { get; init; }
	public long Version { get; init; }
}