// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public sealed partial class MultisearchBody
	{
		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.SourceConfig? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("aggregations")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? Aggregations { get; set; }

		[JsonInclude]
		[JsonPropertyName("collapse")]
		public Elastic.Clients.Elasticsearch.FieldCollapse? Collapse { get; set; }

		[JsonInclude]
		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public Elastic.Clients.Elasticsearch.Highlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices_boost")]
		public IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? IndicesBoost { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("pit")]
		public Elastic.Clients.Elasticsearch.PointInTimeReference? Pit { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? PostFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("profile")]
		public bool? Profile { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("rescore")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Rescore>? Rescore { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime_mappings")]
		public Dictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>? RuntimeMappings { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_after")]
		public IEnumerable<object>? SearchAfter { get; set; }

		[JsonInclude]
		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		[JsonConverter(typeof(SortConverter))]
		public IEnumerable<Elastic.Clients.Elasticsearch.SortCombinations>? Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("stats")]
		public IEnumerable<string>? Stats { get; set; }

		[JsonInclude]
		[JsonPropertyName("stored_fields")]
		public Elastic.Clients.Elasticsearch.Fields? StoredFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("suggest")]
		public Elastic.Clients.Elasticsearch.Suggester? Suggest { get; set; }

		[JsonInclude]
		[JsonPropertyName("terminate_after")]
		public long? TerminateAfter { get; set; }

		[JsonInclude]
		[JsonPropertyName("timeout")]
		public string? Timeout { get; set; }

		[JsonInclude]
		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonInclude]
		[JsonPropertyName("track_total_hits")]
		public Elastic.Clients.Elasticsearch.TrackHits? TrackTotalHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public sealed partial class MultisearchBodyDescriptor<TDocument> : SerializableDescriptorBase<MultisearchBodyDescriptor<TDocument>>
	{
		internal MultisearchBodyDescriptor(Action<MultisearchBodyDescriptor<TDocument>> configure) => configure.Invoke(this);
		public MultisearchBodyDescriptor() : base()
		{
		}

		private Elastic.Clients.Elasticsearch.FieldCollapse? CollapseValue { get; set; }

		private FieldCollapseDescriptor<TDocument> CollapseDescriptor { get; set; }

		private Action<FieldCollapseDescriptor<TDocument>> CollapseDescriptorAction { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFieldsValue { get; set; }

		private QueryDsl.FieldAndFormatDescriptor<TDocument> DocvalueFieldsDescriptor { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor<TDocument>> DocvalueFieldsDescriptorAction { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor<TDocument>>[] DocvalueFieldsDescriptorActions { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? FieldsValue { get; set; }

		private QueryDsl.FieldAndFormatDescriptor<TDocument> FieldsDescriptor { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor<TDocument>> FieldsDescriptorAction { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor<TDocument>>[] FieldsDescriptorActions { get; set; }

		private Elastic.Clients.Elasticsearch.Highlight? HighlightValue { get; set; }

		private HighlightDescriptor<TDocument> HighlightDescriptor { get; set; }

		private Action<HighlightDescriptor<TDocument>> HighlightDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? PostFilterValue { get; set; }

		private QueryDsl.QueryContainerDescriptor<TDocument> PostFilterDescriptor { get; set; }

		private Action<QueryDsl.QueryContainerDescriptor<TDocument>> PostFilterDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? QueryValue { get; set; }

		private QueryDsl.QueryContainerDescriptor<TDocument> QueryDescriptor { get; set; }

		private Action<QueryDsl.QueryContainerDescriptor<TDocument>> QueryDescriptorAction { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Rescore>? RescoreValue { get; set; }

		private RescoreDescriptor<TDocument> RescoreDescriptor { get; set; }

		private Action<RescoreDescriptor<TDocument>> RescoreDescriptorAction { get; set; }

		private Action<RescoreDescriptor<TDocument>>[] RescoreDescriptorActions { get; set; }

		private Elastic.Clients.Elasticsearch.SourceConfig? SourceValue { get; set; }

		private Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? AggregationsValue { get; set; }

		private bool? ExplainValue { get; set; }

		private int? FromValue { get; set; }

		private IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? IndicesBoostValue { get; set; }

		private double? MinScoreValue { get; set; }

		private Elastic.Clients.Elasticsearch.PointInTimeReference? PitValue { get; set; }

		private PointInTimeReferenceDescriptor PitDescriptor { get; set; }

		private Action<PointInTimeReferenceDescriptor> PitDescriptorAction { get; set; }

		private bool? ProfileValue { get; set; }

		private Dictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>? RuntimeMappingsValue { get; set; }

		private Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ScriptFieldsValue { get; set; }

		private IEnumerable<object>? SearchAfterValue { get; set; }

		private bool? SeqNoPrimaryTermValue { get; set; }

		private int? SizeValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.SortCombinations>? SortValue { get; set; }

		private IEnumerable<string>? StatsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? StoredFieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Suggester? SuggestValue { get; set; }

		private SuggesterDescriptor SuggestDescriptor { get; set; }

		private Action<SuggesterDescriptor> SuggestDescriptorAction { get; set; }

		private long? TerminateAfterValue { get; set; }

		private string? TimeoutValue { get; set; }

		private bool? TrackScoresValue { get; set; }

		private Elastic.Clients.Elasticsearch.TrackHits? TrackTotalHitsValue { get; set; }

		private bool? VersionValue { get; set; }

		public MultisearchBodyDescriptor<TDocument> Collapse(Elastic.Clients.Elasticsearch.FieldCollapse? collapse)
		{
			CollapseDescriptor = null;
			CollapseDescriptorAction = null;
			CollapseValue = collapse;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Collapse(FieldCollapseDescriptor<TDocument> descriptor)
		{
			CollapseValue = null;
			CollapseDescriptorAction = null;
			CollapseDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Collapse(Action<FieldCollapseDescriptor<TDocument>> configure)
		{
			CollapseValue = null;
			CollapseDescriptor = null;
			CollapseDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> DocvalueFields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? docvalueFields)
		{
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsValue = docvalueFields;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> DocvalueFields(QueryDsl.FieldAndFormatDescriptor<TDocument> descriptor)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> DocvalueFields(Action<QueryDsl.FieldAndFormatDescriptor<TDocument>> configure)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> DocvalueFields(params Action<QueryDsl.FieldAndFormatDescriptor<TDocument>>[] configure)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Fields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? fields)
		{
			FieldsDescriptor = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = null;
			FieldsValue = fields;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Fields(QueryDsl.FieldAndFormatDescriptor<TDocument> descriptor)
		{
			FieldsValue = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = null;
			FieldsDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Fields(Action<QueryDsl.FieldAndFormatDescriptor<TDocument>> configure)
		{
			FieldsValue = null;
			FieldsDescriptor = null;
			FieldsDescriptorActions = null;
			FieldsDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Fields(params Action<QueryDsl.FieldAndFormatDescriptor<TDocument>>[] configure)
		{
			FieldsValue = null;
			FieldsDescriptor = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Highlight(Elastic.Clients.Elasticsearch.Highlight? highlight)
		{
			HighlightDescriptor = null;
			HighlightDescriptorAction = null;
			HighlightValue = highlight;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Highlight(HighlightDescriptor<TDocument> descriptor)
		{
			HighlightValue = null;
			HighlightDescriptorAction = null;
			HighlightDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Highlight(Action<HighlightDescriptor<TDocument>> configure)
		{
			HighlightValue = null;
			HighlightDescriptor = null;
			HighlightDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> PostFilter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? postFilter)
		{
			PostFilterDescriptor = null;
			PostFilterDescriptorAction = null;
			PostFilterValue = postFilter;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> PostFilter(QueryDsl.QueryContainerDescriptor<TDocument> descriptor)
		{
			PostFilterValue = null;
			PostFilterDescriptorAction = null;
			PostFilterDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> PostFilter(Action<QueryDsl.QueryContainerDescriptor<TDocument>> configure)
		{
			PostFilterValue = null;
			PostFilterDescriptor = null;
			PostFilterDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? query)
		{
			QueryDescriptor = null;
			QueryDescriptorAction = null;
			QueryValue = query;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Query(QueryDsl.QueryContainerDescriptor<TDocument> descriptor)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			QueryDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Query(Action<QueryDsl.QueryContainerDescriptor<TDocument>> configure)
		{
			QueryValue = null;
			QueryDescriptor = null;
			QueryDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Rescore(IEnumerable<Elastic.Clients.Elasticsearch.Rescore>? rescore)
		{
			RescoreDescriptor = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = null;
			RescoreValue = rescore;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Rescore(RescoreDescriptor<TDocument> descriptor)
		{
			RescoreValue = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = null;
			RescoreDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Rescore(Action<RescoreDescriptor<TDocument>> configure)
		{
			RescoreValue = null;
			RescoreDescriptor = null;
			RescoreDescriptorActions = null;
			RescoreDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Rescore(params Action<RescoreDescriptor<TDocument>>[] configure)
		{
			RescoreValue = null;
			RescoreDescriptor = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Source(Elastic.Clients.Elasticsearch.SourceConfig? source)
		{
			SourceValue = source;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Aggregations(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>> selector)
		{
			AggregationsValue = selector?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>());
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Explain(bool? explain = true)
		{
			ExplainValue = explain;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> From(int? from)
		{
			FromValue = from;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> IndicesBoost(IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? indicesBoost)
		{
			IndicesBoostValue = indicesBoost;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> MinScore(double? minScore)
		{
			MinScoreValue = minScore;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Pit(Elastic.Clients.Elasticsearch.PointInTimeReference? pit)
		{
			PitDescriptor = null;
			PitDescriptorAction = null;
			PitValue = pit;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Pit(PointInTimeReferenceDescriptor descriptor)
		{
			PitValue = null;
			PitDescriptorAction = null;
			PitDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Pit(Action<PointInTimeReferenceDescriptor> configure)
		{
			PitValue = null;
			PitDescriptor = null;
			PitDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Profile(bool? profile = true)
		{
			ProfileValue = profile;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> RuntimeMappings(Func<FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>, FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>> selector)
		{
			RuntimeMappingsValue = selector?.Invoke(new FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>());
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> ScriptFields(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>, FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>> selector)
		{
			ScriptFieldsValue = selector?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>());
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> SearchAfter(IEnumerable<object>? searchAfter)
		{
			SearchAfterValue = searchAfter;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> SeqNoPrimaryTerm(bool? seqNoPrimaryTerm = true)
		{
			SeqNoPrimaryTermValue = seqNoPrimaryTerm;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Size(int? size)
		{
			SizeValue = size;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Sort(IEnumerable<Elastic.Clients.Elasticsearch.SortCombinations>? sort)
		{
			SortValue = sort;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Stats(IEnumerable<string>? stats)
		{
			StatsValue = stats;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> StoredFields(Elastic.Clients.Elasticsearch.Fields? storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> StoredFields<TValue>(Expression<Func<TDocument, TValue>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Suggest(Elastic.Clients.Elasticsearch.Suggester? suggest)
		{
			SuggestDescriptor = null;
			SuggestDescriptorAction = null;
			SuggestValue = suggest;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Suggest(SuggesterDescriptor descriptor)
		{
			SuggestValue = null;
			SuggestDescriptorAction = null;
			SuggestDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Suggest(Action<SuggesterDescriptor> configure)
		{
			SuggestValue = null;
			SuggestDescriptor = null;
			SuggestDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> TerminateAfter(long? terminateAfter)
		{
			TerminateAfterValue = terminateAfter;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Timeout(string? timeout)
		{
			TimeoutValue = timeout;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> TrackScores(bool? trackScores = true)
		{
			TrackScoresValue = trackScores;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> TrackTotalHits(Elastic.Clients.Elasticsearch.TrackHits? trackTotalHits)
		{
			TrackTotalHitsValue = trackTotalHits;
			return Self;
		}

		public MultisearchBodyDescriptor<TDocument> Version(bool? version = true)
		{
			VersionValue = version;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (CollapseDescriptor is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseDescriptor, options);
			}
			else if (CollapseDescriptorAction is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, new FieldCollapseDescriptor<TDocument>(CollapseDescriptorAction), options);
			}
			else if (CollapseValue is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseValue, options);
			}

			if (DocvalueFieldsDescriptor is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, DocvalueFieldsDescriptor, options);
				writer.WriteEndArray();
			}
			else if (DocvalueFieldsDescriptorAction is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor<TDocument>(DocvalueFieldsDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (DocvalueFieldsDescriptorActions is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				foreach (var action in DocvalueFieldsDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor<TDocument>(action), options);
				}

				writer.WriteEndArray();
			}
			else if (DocvalueFieldsValue is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, DocvalueFieldsValue, options);
			}

			if (FieldsDescriptor is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, FieldsDescriptor, options);
				writer.WriteEndArray();
			}
			else if (FieldsDescriptorAction is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor<TDocument>(FieldsDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (FieldsDescriptorActions is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				foreach (var action in FieldsDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor<TDocument>(action), options);
				}

				writer.WriteEndArray();
			}
			else if (FieldsValue is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, FieldsValue, options);
			}

			if (HighlightDescriptor is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightDescriptor, options);
			}
			else if (HighlightDescriptorAction is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, new HighlightDescriptor<TDocument>(HighlightDescriptorAction), options);
			}
			else if (HighlightValue is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightValue, options);
			}

			if (PostFilterDescriptor is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, PostFilterDescriptor, options);
			}
			else if (PostFilterDescriptorAction is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<TDocument>(PostFilterDescriptorAction), options);
			}
			else if (PostFilterValue is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, PostFilterValue, options);
			}

			if (QueryDescriptor is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryDescriptor, options);
			}
			else if (QueryDescriptorAction is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<TDocument>(QueryDescriptorAction), options);
			}
			else if (QueryValue is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryValue, options);
			}

			if (RescoreDescriptor is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, RescoreDescriptor, options);
				writer.WriteEndArray();
			}
			else if (RescoreDescriptorAction is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new RescoreDescriptor<TDocument>(RescoreDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (RescoreDescriptorActions is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				foreach (var action in RescoreDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new RescoreDescriptor<TDocument>(action), options);
				}

				writer.WriteEndArray();
			}
			else if (RescoreValue is not null)
			{
				writer.WritePropertyName("rescore");
				JsonSerializer.Serialize(writer, RescoreValue, options);
			}

			if (SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (AggregationsValue is not null)
			{
				writer.WritePropertyName("aggregations");
				JsonSerializer.Serialize(writer, AggregationsValue, options);
			}

			if (ExplainValue.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(ExplainValue.Value);
			}

			if (FromValue.HasValue)
			{
				writer.WritePropertyName("from");
				writer.WriteNumberValue(FromValue.Value);
			}

			if (IndicesBoostValue is not null)
			{
				writer.WritePropertyName("indices_boost");
				JsonSerializer.Serialize(writer, IndicesBoostValue, options);
			}

			if (MinScoreValue.HasValue)
			{
				writer.WritePropertyName("min_score");
				writer.WriteNumberValue(MinScoreValue.Value);
			}

			if (PitDescriptor is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, PitDescriptor, options);
			}
			else if (PitDescriptorAction is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, new PointInTimeReferenceDescriptor(PitDescriptorAction), options);
			}
			else if (PitValue is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, PitValue, options);
			}

			if (ProfileValue.HasValue)
			{
				writer.WritePropertyName("profile");
				writer.WriteBooleanValue(ProfileValue.Value);
			}

			if (RuntimeMappingsValue is not null)
			{
				writer.WritePropertyName("runtime_mappings");
				JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
			}

			if (ScriptFieldsValue is not null)
			{
				writer.WritePropertyName("script_fields");
				JsonSerializer.Serialize(writer, ScriptFieldsValue, options);
			}

			if (SearchAfterValue is not null)
			{
				writer.WritePropertyName("search_after");
				JsonSerializer.Serialize(writer, SearchAfterValue, options);
			}

			if (SeqNoPrimaryTermValue.HasValue)
			{
				writer.WritePropertyName("seq_no_primary_term");
				writer.WriteBooleanValue(SeqNoPrimaryTermValue.Value);
			}

			if (SizeValue.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(SizeValue.Value);
			}

			if (SortValue is not null)
			{
				writer.WritePropertyName("sort");
				SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.SortCombinations>(SortValue, writer, options);
			}

			if (StatsValue is not null)
			{
				writer.WritePropertyName("stats");
				JsonSerializer.Serialize(writer, StatsValue, options);
			}

			if (StoredFieldsValue is not null)
			{
				writer.WritePropertyName("stored_fields");
				JsonSerializer.Serialize(writer, StoredFieldsValue, options);
			}

			if (SuggestDescriptor is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, SuggestDescriptor, options);
			}
			else if (SuggestDescriptorAction is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, new SuggesterDescriptor(SuggestDescriptorAction), options);
			}
			else if (SuggestValue is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, SuggestValue, options);
			}

			if (TerminateAfterValue.HasValue)
			{
				writer.WritePropertyName("terminate_after");
				writer.WriteNumberValue(TerminateAfterValue.Value);
			}

			if (!string.IsNullOrEmpty(TimeoutValue))
			{
				writer.WritePropertyName("timeout");
				writer.WriteStringValue(TimeoutValue);
			}

			if (TrackScoresValue.HasValue)
			{
				writer.WritePropertyName("track_scores");
				writer.WriteBooleanValue(TrackScoresValue.Value);
			}

			if (TrackTotalHitsValue is not null)
			{
				writer.WritePropertyName("track_total_hits");
				JsonSerializer.Serialize(writer, TrackTotalHitsValue, options);
			}

			if (VersionValue.HasValue)
			{
				writer.WritePropertyName("version");
				writer.WriteBooleanValue(VersionValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class MultisearchBodyDescriptor : SerializableDescriptorBase<MultisearchBodyDescriptor>
	{
		internal MultisearchBodyDescriptor(Action<MultisearchBodyDescriptor> configure) => configure.Invoke(this);
		public MultisearchBodyDescriptor() : base()
		{
		}

		private Elastic.Clients.Elasticsearch.FieldCollapse? CollapseValue { get; set; }

		private FieldCollapseDescriptor CollapseDescriptor { get; set; }

		private Action<FieldCollapseDescriptor> CollapseDescriptorAction { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFieldsValue { get; set; }

		private QueryDsl.FieldAndFormatDescriptor DocvalueFieldsDescriptor { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor> DocvalueFieldsDescriptorAction { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor>[] DocvalueFieldsDescriptorActions { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? FieldsValue { get; set; }

		private QueryDsl.FieldAndFormatDescriptor FieldsDescriptor { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor> FieldsDescriptorAction { get; set; }

		private Action<QueryDsl.FieldAndFormatDescriptor>[] FieldsDescriptorActions { get; set; }

		private Elastic.Clients.Elasticsearch.Highlight? HighlightValue { get; set; }

		private HighlightDescriptor HighlightDescriptor { get; set; }

		private Action<HighlightDescriptor> HighlightDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? PostFilterValue { get; set; }

		private QueryDsl.QueryContainerDescriptor PostFilterDescriptor { get; set; }

		private Action<QueryDsl.QueryContainerDescriptor> PostFilterDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? QueryValue { get; set; }

		private QueryDsl.QueryContainerDescriptor QueryDescriptor { get; set; }

		private Action<QueryDsl.QueryContainerDescriptor> QueryDescriptorAction { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Rescore>? RescoreValue { get; set; }

		private RescoreDescriptor RescoreDescriptor { get; set; }

		private Action<RescoreDescriptor> RescoreDescriptorAction { get; set; }

		private Action<RescoreDescriptor>[] RescoreDescriptorActions { get; set; }

		private Elastic.Clients.Elasticsearch.SourceConfig? SourceValue { get; set; }

		private Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? AggregationsValue { get; set; }

		private bool? ExplainValue { get; set; }

		private int? FromValue { get; set; }

		private IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? IndicesBoostValue { get; set; }

		private double? MinScoreValue { get; set; }

		private Elastic.Clients.Elasticsearch.PointInTimeReference? PitValue { get; set; }

		private PointInTimeReferenceDescriptor PitDescriptor { get; set; }

		private Action<PointInTimeReferenceDescriptor> PitDescriptorAction { get; set; }

		private bool? ProfileValue { get; set; }

		private Dictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>? RuntimeMappingsValue { get; set; }

		private Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ScriptFieldsValue { get; set; }

		private IEnumerable<object>? SearchAfterValue { get; set; }

		private bool? SeqNoPrimaryTermValue { get; set; }

		private int? SizeValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.SortCombinations>? SortValue { get; set; }

		private IEnumerable<string>? StatsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? StoredFieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Suggester? SuggestValue { get; set; }

		private SuggesterDescriptor SuggestDescriptor { get; set; }

		private Action<SuggesterDescriptor> SuggestDescriptorAction { get; set; }

		private long? TerminateAfterValue { get; set; }

		private string? TimeoutValue { get; set; }

		private bool? TrackScoresValue { get; set; }

		private Elastic.Clients.Elasticsearch.TrackHits? TrackTotalHitsValue { get; set; }

		private bool? VersionValue { get; set; }

		public MultisearchBodyDescriptor Collapse(Elastic.Clients.Elasticsearch.FieldCollapse? collapse)
		{
			CollapseDescriptor = null;
			CollapseDescriptorAction = null;
			CollapseValue = collapse;
			return Self;
		}

		public MultisearchBodyDescriptor Collapse(FieldCollapseDescriptor descriptor)
		{
			CollapseValue = null;
			CollapseDescriptorAction = null;
			CollapseDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Collapse(Action<FieldCollapseDescriptor> configure)
		{
			CollapseValue = null;
			CollapseDescriptor = null;
			CollapseDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor DocvalueFields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? docvalueFields)
		{
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsValue = docvalueFields;
			return Self;
		}

		public MultisearchBodyDescriptor DocvalueFields(QueryDsl.FieldAndFormatDescriptor descriptor)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor DocvalueFields(Action<QueryDsl.FieldAndFormatDescriptor> configure)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorActions = null;
			DocvalueFieldsDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor DocvalueFields(params Action<QueryDsl.FieldAndFormatDescriptor>[] configure)
		{
			DocvalueFieldsValue = null;
			DocvalueFieldsDescriptor = null;
			DocvalueFieldsDescriptorAction = null;
			DocvalueFieldsDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Fields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? fields)
		{
			FieldsDescriptor = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = null;
			FieldsValue = fields;
			return Self;
		}

		public MultisearchBodyDescriptor Fields(QueryDsl.FieldAndFormatDescriptor descriptor)
		{
			FieldsValue = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = null;
			FieldsDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Fields(Action<QueryDsl.FieldAndFormatDescriptor> configure)
		{
			FieldsValue = null;
			FieldsDescriptor = null;
			FieldsDescriptorActions = null;
			FieldsDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Fields(params Action<QueryDsl.FieldAndFormatDescriptor>[] configure)
		{
			FieldsValue = null;
			FieldsDescriptor = null;
			FieldsDescriptorAction = null;
			FieldsDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Highlight(Elastic.Clients.Elasticsearch.Highlight? highlight)
		{
			HighlightDescriptor = null;
			HighlightDescriptorAction = null;
			HighlightValue = highlight;
			return Self;
		}

		public MultisearchBodyDescriptor Highlight(HighlightDescriptor descriptor)
		{
			HighlightValue = null;
			HighlightDescriptorAction = null;
			HighlightDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Highlight(Action<HighlightDescriptor> configure)
		{
			HighlightValue = null;
			HighlightDescriptor = null;
			HighlightDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor PostFilter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? postFilter)
		{
			PostFilterDescriptor = null;
			PostFilterDescriptorAction = null;
			PostFilterValue = postFilter;
			return Self;
		}

		public MultisearchBodyDescriptor PostFilter(QueryDsl.QueryContainerDescriptor descriptor)
		{
			PostFilterValue = null;
			PostFilterDescriptorAction = null;
			PostFilterDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor PostFilter(Action<QueryDsl.QueryContainerDescriptor> configure)
		{
			PostFilterValue = null;
			PostFilterDescriptor = null;
			PostFilterDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? query)
		{
			QueryDescriptor = null;
			QueryDescriptorAction = null;
			QueryValue = query;
			return Self;
		}

		public MultisearchBodyDescriptor Query(QueryDsl.QueryContainerDescriptor descriptor)
		{
			QueryValue = null;
			QueryDescriptorAction = null;
			QueryDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Query(Action<QueryDsl.QueryContainerDescriptor> configure)
		{
			QueryValue = null;
			QueryDescriptor = null;
			QueryDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Rescore(IEnumerable<Elastic.Clients.Elasticsearch.Rescore>? rescore)
		{
			RescoreDescriptor = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = null;
			RescoreValue = rescore;
			return Self;
		}

		public MultisearchBodyDescriptor Rescore(RescoreDescriptor descriptor)
		{
			RescoreValue = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = null;
			RescoreDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Rescore(Action<RescoreDescriptor> configure)
		{
			RescoreValue = null;
			RescoreDescriptor = null;
			RescoreDescriptorActions = null;
			RescoreDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Rescore(params Action<RescoreDescriptor>[] configure)
		{
			RescoreValue = null;
			RescoreDescriptor = null;
			RescoreDescriptorAction = null;
			RescoreDescriptorActions = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Source(Elastic.Clients.Elasticsearch.SourceConfig? source)
		{
			SourceValue = source;
			return Self;
		}

		public MultisearchBodyDescriptor Aggregations(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>> selector)
		{
			AggregationsValue = selector?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>());
			return Self;
		}

		public MultisearchBodyDescriptor Explain(bool? explain = true)
		{
			ExplainValue = explain;
			return Self;
		}

		public MultisearchBodyDescriptor From(int? from)
		{
			FromValue = from;
			return Self;
		}

		public MultisearchBodyDescriptor IndicesBoost(IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? indicesBoost)
		{
			IndicesBoostValue = indicesBoost;
			return Self;
		}

		public MultisearchBodyDescriptor MinScore(double? minScore)
		{
			MinScoreValue = minScore;
			return Self;
		}

		public MultisearchBodyDescriptor Pit(Elastic.Clients.Elasticsearch.PointInTimeReference? pit)
		{
			PitDescriptor = null;
			PitDescriptorAction = null;
			PitValue = pit;
			return Self;
		}

		public MultisearchBodyDescriptor Pit(PointInTimeReferenceDescriptor descriptor)
		{
			PitValue = null;
			PitDescriptorAction = null;
			PitDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Pit(Action<PointInTimeReferenceDescriptor> configure)
		{
			PitValue = null;
			PitDescriptor = null;
			PitDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor Profile(bool? profile = true)
		{
			ProfileValue = profile;
			return Self;
		}

		public MultisearchBodyDescriptor RuntimeMappings(Func<FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>, FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>> selector)
		{
			RuntimeMappingsValue = selector?.Invoke(new FluentDictionary<Elastic.Clients.Elasticsearch.Field, IEnumerable<Elastic.Clients.Elasticsearch.Mapping.RuntimeField>>());
			return Self;
		}

		public MultisearchBodyDescriptor ScriptFields(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>, FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>> selector)
		{
			ScriptFieldsValue = selector?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.ScriptField>());
			return Self;
		}

		public MultisearchBodyDescriptor SearchAfter(IEnumerable<object>? searchAfter)
		{
			SearchAfterValue = searchAfter;
			return Self;
		}

		public MultisearchBodyDescriptor SeqNoPrimaryTerm(bool? seqNoPrimaryTerm = true)
		{
			SeqNoPrimaryTermValue = seqNoPrimaryTerm;
			return Self;
		}

		public MultisearchBodyDescriptor Size(int? size)
		{
			SizeValue = size;
			return Self;
		}

		public MultisearchBodyDescriptor Sort(IEnumerable<Elastic.Clients.Elasticsearch.SortCombinations>? sort)
		{
			SortValue = sort;
			return Self;
		}

		public MultisearchBodyDescriptor Stats(IEnumerable<string>? stats)
		{
			StatsValue = stats;
			return Self;
		}

		public MultisearchBodyDescriptor StoredFields(Elastic.Clients.Elasticsearch.Fields? storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public MultisearchBodyDescriptor StoredFields<TDocument, TValue>(Expression<Func<TDocument, TValue>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public MultisearchBodyDescriptor StoredFields<TDocument>(Expression<Func<TDocument, object>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public MultisearchBodyDescriptor Suggest(Elastic.Clients.Elasticsearch.Suggester? suggest)
		{
			SuggestDescriptor = null;
			SuggestDescriptorAction = null;
			SuggestValue = suggest;
			return Self;
		}

		public MultisearchBodyDescriptor Suggest(SuggesterDescriptor descriptor)
		{
			SuggestValue = null;
			SuggestDescriptorAction = null;
			SuggestDescriptor = descriptor;
			return Self;
		}

		public MultisearchBodyDescriptor Suggest(Action<SuggesterDescriptor> configure)
		{
			SuggestValue = null;
			SuggestDescriptor = null;
			SuggestDescriptorAction = configure;
			return Self;
		}

		public MultisearchBodyDescriptor TerminateAfter(long? terminateAfter)
		{
			TerminateAfterValue = terminateAfter;
			return Self;
		}

		public MultisearchBodyDescriptor Timeout(string? timeout)
		{
			TimeoutValue = timeout;
			return Self;
		}

		public MultisearchBodyDescriptor TrackScores(bool? trackScores = true)
		{
			TrackScoresValue = trackScores;
			return Self;
		}

		public MultisearchBodyDescriptor TrackTotalHits(Elastic.Clients.Elasticsearch.TrackHits? trackTotalHits)
		{
			TrackTotalHitsValue = trackTotalHits;
			return Self;
		}

		public MultisearchBodyDescriptor Version(bool? version = true)
		{
			VersionValue = version;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (CollapseDescriptor is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseDescriptor, options);
			}
			else if (CollapseDescriptorAction is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, new FieldCollapseDescriptor(CollapseDescriptorAction), options);
			}
			else if (CollapseValue is not null)
			{
				writer.WritePropertyName("collapse");
				JsonSerializer.Serialize(writer, CollapseValue, options);
			}

			if (DocvalueFieldsDescriptor is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, DocvalueFieldsDescriptor, options);
				writer.WriteEndArray();
			}
			else if (DocvalueFieldsDescriptorAction is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor(DocvalueFieldsDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (DocvalueFieldsDescriptorActions is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				writer.WriteStartArray();
				foreach (var action in DocvalueFieldsDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (DocvalueFieldsValue is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, DocvalueFieldsValue, options);
			}

			if (FieldsDescriptor is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, FieldsDescriptor, options);
				writer.WriteEndArray();
			}
			else if (FieldsDescriptorAction is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor(FieldsDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (FieldsDescriptorActions is not null)
			{
				writer.WritePropertyName("fields");
				writer.WriteStartArray();
				foreach (var action in FieldsDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new QueryDsl.FieldAndFormatDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (FieldsValue is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, FieldsValue, options);
			}

			if (HighlightDescriptor is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightDescriptor, options);
			}
			else if (HighlightDescriptorAction is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, new HighlightDescriptor(HighlightDescriptorAction), options);
			}
			else if (HighlightValue is not null)
			{
				writer.WritePropertyName("highlight");
				JsonSerializer.Serialize(writer, HighlightValue, options);
			}

			if (PostFilterDescriptor is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, PostFilterDescriptor, options);
			}
			else if (PostFilterDescriptorAction is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor(PostFilterDescriptorAction), options);
			}
			else if (PostFilterValue is not null)
			{
				writer.WritePropertyName("post_filter");
				JsonSerializer.Serialize(writer, PostFilterValue, options);
			}

			if (QueryDescriptor is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryDescriptor, options);
			}
			else if (QueryDescriptorAction is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor(QueryDescriptorAction), options);
			}
			else if (QueryValue is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryValue, options);
			}

			if (RescoreDescriptor is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, RescoreDescriptor, options);
				writer.WriteEndArray();
			}
			else if (RescoreDescriptorAction is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new RescoreDescriptor(RescoreDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (RescoreDescriptorActions is not null)
			{
				writer.WritePropertyName("rescore");
				writer.WriteStartArray();
				foreach (var action in RescoreDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new RescoreDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (RescoreValue is not null)
			{
				writer.WritePropertyName("rescore");
				JsonSerializer.Serialize(writer, RescoreValue, options);
			}

			if (SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (AggregationsValue is not null)
			{
				writer.WritePropertyName("aggregations");
				JsonSerializer.Serialize(writer, AggregationsValue, options);
			}

			if (ExplainValue.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(ExplainValue.Value);
			}

			if (FromValue.HasValue)
			{
				writer.WritePropertyName("from");
				writer.WriteNumberValue(FromValue.Value);
			}

			if (IndicesBoostValue is not null)
			{
				writer.WritePropertyName("indices_boost");
				JsonSerializer.Serialize(writer, IndicesBoostValue, options);
			}

			if (MinScoreValue.HasValue)
			{
				writer.WritePropertyName("min_score");
				writer.WriteNumberValue(MinScoreValue.Value);
			}

			if (PitDescriptor is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, PitDescriptor, options);
			}
			else if (PitDescriptorAction is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, new PointInTimeReferenceDescriptor(PitDescriptorAction), options);
			}
			else if (PitValue is not null)
			{
				writer.WritePropertyName("pit");
				JsonSerializer.Serialize(writer, PitValue, options);
			}

			if (ProfileValue.HasValue)
			{
				writer.WritePropertyName("profile");
				writer.WriteBooleanValue(ProfileValue.Value);
			}

			if (RuntimeMappingsValue is not null)
			{
				writer.WritePropertyName("runtime_mappings");
				JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
			}

			if (ScriptFieldsValue is not null)
			{
				writer.WritePropertyName("script_fields");
				JsonSerializer.Serialize(writer, ScriptFieldsValue, options);
			}

			if (SearchAfterValue is not null)
			{
				writer.WritePropertyName("search_after");
				JsonSerializer.Serialize(writer, SearchAfterValue, options);
			}

			if (SeqNoPrimaryTermValue.HasValue)
			{
				writer.WritePropertyName("seq_no_primary_term");
				writer.WriteBooleanValue(SeqNoPrimaryTermValue.Value);
			}

			if (SizeValue.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(SizeValue.Value);
			}

			if (SortValue is not null)
			{
				writer.WritePropertyName("sort");
				SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.SortCombinations>(SortValue, writer, options);
			}

			if (StatsValue is not null)
			{
				writer.WritePropertyName("stats");
				JsonSerializer.Serialize(writer, StatsValue, options);
			}

			if (StoredFieldsValue is not null)
			{
				writer.WritePropertyName("stored_fields");
				JsonSerializer.Serialize(writer, StoredFieldsValue, options);
			}

			if (SuggestDescriptor is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, SuggestDescriptor, options);
			}
			else if (SuggestDescriptorAction is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, new SuggesterDescriptor(SuggestDescriptorAction), options);
			}
			else if (SuggestValue is not null)
			{
				writer.WritePropertyName("suggest");
				JsonSerializer.Serialize(writer, SuggestValue, options);
			}

			if (TerminateAfterValue.HasValue)
			{
				writer.WritePropertyName("terminate_after");
				writer.WriteNumberValue(TerminateAfterValue.Value);
			}

			if (!string.IsNullOrEmpty(TimeoutValue))
			{
				writer.WritePropertyName("timeout");
				writer.WriteStringValue(TimeoutValue);
			}

			if (TrackScoresValue.HasValue)
			{
				writer.WritePropertyName("track_scores");
				writer.WriteBooleanValue(TrackScoresValue.Value);
			}

			if (TrackTotalHitsValue is not null)
			{
				writer.WritePropertyName("track_total_hits");
				JsonSerializer.Serialize(writer, TrackTotalHitsValue, options);
			}

			if (VersionValue.HasValue)
			{
				writer.WritePropertyName("version");
				writer.WriteBooleanValue(VersionValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}