// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	public sealed partial class IndicesPrivileges
	{
		[JsonInclude]
		[JsonPropertyName("allow_restricted_indices")]
		public bool? AllowRestrictedIndices { get; set; }

		[JsonInclude]
		[JsonPropertyName("field_security")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.FieldSecurity>? FieldSecurity { get; set; }

		[JsonInclude]
		[JsonPropertyName("names")]
		public Elastic.Clients.Elasticsearch.Indices Names { get; set; }

		[JsonInclude]
		[JsonPropertyName("privileges")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilege> Privileges { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesQuery? Query { get; set; }
	}

	public sealed partial class IndicesPrivilegesDescriptor : SerializableDescriptorBase<IndicesPrivilegesDescriptor>
	{
		internal IndicesPrivilegesDescriptor(Action<IndicesPrivilegesDescriptor> configure) => configure.Invoke(this);
		public IndicesPrivilegesDescriptor() : base()
		{
		}

		private bool? AllowRestrictedIndicesValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.FieldSecurity>? FieldSecurityValue { get; set; }

		private FieldSecurityDescriptor FieldSecurityDescriptor { get; set; }

		private Action<FieldSecurityDescriptor> FieldSecurityDescriptorAction { get; set; }

		private Action<FieldSecurityDescriptor>[] FieldSecurityDescriptorActions { get; set; }

		private Elastic.Clients.Elasticsearch.Indices NamesValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilege> PrivilegesValue { get; set; }

		private Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesQuery? QueryValue { get; set; }

		public IndicesPrivilegesDescriptor AllowRestrictedIndices(bool? allowRestrictedIndices = true)
		{
			AllowRestrictedIndicesValue = allowRestrictedIndices;
			return Self;
		}

		public IndicesPrivilegesDescriptor FieldSecurity(IEnumerable<Elastic.Clients.Elasticsearch.Security.FieldSecurity>? fieldSecurity)
		{
			FieldSecurityDescriptor = null;
			FieldSecurityDescriptorAction = null;
			FieldSecurityDescriptorActions = null;
			FieldSecurityValue = fieldSecurity;
			return Self;
		}

		public IndicesPrivilegesDescriptor FieldSecurity(FieldSecurityDescriptor descriptor)
		{
			FieldSecurityValue = null;
			FieldSecurityDescriptorAction = null;
			FieldSecurityDescriptorActions = null;
			FieldSecurityDescriptor = descriptor;
			return Self;
		}

		public IndicesPrivilegesDescriptor FieldSecurity(Action<FieldSecurityDescriptor> configure)
		{
			FieldSecurityValue = null;
			FieldSecurityDescriptor = null;
			FieldSecurityDescriptorActions = null;
			FieldSecurityDescriptorAction = configure;
			return Self;
		}

		public IndicesPrivilegesDescriptor FieldSecurity(params Action<FieldSecurityDescriptor>[] configure)
		{
			FieldSecurityValue = null;
			FieldSecurityDescriptor = null;
			FieldSecurityDescriptorAction = null;
			FieldSecurityDescriptorActions = configure;
			return Self;
		}

		public IndicesPrivilegesDescriptor Names(Elastic.Clients.Elasticsearch.Indices names)
		{
			NamesValue = names;
			return Self;
		}

		public IndicesPrivilegesDescriptor Privileges(IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilege> privileges)
		{
			PrivilegesValue = privileges;
			return Self;
		}

		public IndicesPrivilegesDescriptor Query(Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesQuery? query)
		{
			QueryValue = query;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (AllowRestrictedIndicesValue.HasValue)
			{
				writer.WritePropertyName("allow_restricted_indices");
				writer.WriteBooleanValue(AllowRestrictedIndicesValue.Value);
			}

			if (FieldSecurityDescriptor is not null)
			{
				writer.WritePropertyName("field_security");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, FieldSecurityDescriptor, options);
				writer.WriteEndArray();
			}
			else if (FieldSecurityDescriptorAction is not null)
			{
				writer.WritePropertyName("field_security");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new FieldSecurityDescriptor(FieldSecurityDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (FieldSecurityDescriptorActions is not null)
			{
				writer.WritePropertyName("field_security");
				writer.WriteStartArray();
				foreach (var action in FieldSecurityDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new FieldSecurityDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (FieldSecurityValue is not null)
			{
				writer.WritePropertyName("field_security");
				JsonSerializer.Serialize(writer, FieldSecurityValue, options);
			}

			writer.WritePropertyName("names");
			JsonSerializer.Serialize(writer, NamesValue, options);
			writer.WritePropertyName("privileges");
			JsonSerializer.Serialize(writer, PrivilegesValue, options);
			if (QueryValue is not null)
			{
				writer.WritePropertyName("query");
				JsonSerializer.Serialize(writer, QueryValue, options);
			}

			writer.WriteEndObject();
		}
	}
}