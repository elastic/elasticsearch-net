// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class RoleDescriptorReadConverter : System.Text.Json.Serialization.JsonConverter<RoleDescriptorRead>
{
	private static readonly System.Text.Json.JsonEncodedText PropApplications = System.Text.Json.JsonEncodedText.Encode("applications");
	private static readonly System.Text.Json.JsonEncodedText PropCluster = System.Text.Json.JsonEncodedText.Encode("cluster");
	private static readonly System.Text.Json.JsonEncodedText PropDescription = System.Text.Json.JsonEncodedText.Encode("description");
	private static readonly System.Text.Json.JsonEncodedText PropGlobal = System.Text.Json.JsonEncodedText.Encode("global");
	private static readonly System.Text.Json.JsonEncodedText PropIndices = System.Text.Json.JsonEncodedText.Encode("indices");
	private static readonly System.Text.Json.JsonEncodedText PropIndices1 = System.Text.Json.JsonEncodedText.Encode("index");
	private static readonly System.Text.Json.JsonEncodedText PropMetadata = System.Text.Json.JsonEncodedText.Encode("metadata");
	private static readonly System.Text.Json.JsonEncodedText PropRemoteCluster = System.Text.Json.JsonEncodedText.Encode("remote_cluster");
	private static readonly System.Text.Json.JsonEncodedText PropRemoteIndices = System.Text.Json.JsonEncodedText.Encode("remote_indices");
	private static readonly System.Text.Json.JsonEncodedText PropRestriction = System.Text.Json.JsonEncodedText.Encode("restriction");
	private static readonly System.Text.Json.JsonEncodedText PropRunAs = System.Text.Json.JsonEncodedText.Encode("run_as");
	private static readonly System.Text.Json.JsonEncodedText PropTransientMetadata = System.Text.Json.JsonEncodedText.Encode("transient_metadata");

	public override RoleDescriptorRead Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>?> propApplications = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>> propCluster = default;
		LocalJsonValue<string?> propDescription = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>?> propGlobal = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>> propIndices = default;
		LocalJsonValue<IReadOnlyDictionary<string, object>?> propMetadata = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>?> propRemoteCluster = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>?> propRemoteIndices = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Security.Restriction?> propRestriction = default;
		LocalJsonValue<IReadOnlyCollection<string>?> propRunAs = default;
		LocalJsonValue<IReadOnlyDictionary<string, object>?> propTransientMetadata = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propApplications.TryRead(ref reader, options, PropApplications))
			{
				continue;
			}

			if (propCluster.TryRead(ref reader, options, PropCluster))
			{
				continue;
			}

			if (propDescription.TryRead(ref reader, options, PropDescription))
			{
				continue;
			}

			if (propGlobal.TryRead(ref reader, options, PropGlobal, typeof(SingleOrManyMarker<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>?, Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>)))
			{
				continue;
			}

			if (propIndices.TryRead(ref reader, options, PropIndices) || propIndices.TryRead(ref reader, options, PropIndices1))
			{
				continue;
			}

			if (propMetadata.TryRead(ref reader, options, PropMetadata))
			{
				continue;
			}

			if (propRemoteCluster.TryRead(ref reader, options, PropRemoteCluster))
			{
				continue;
			}

			if (propRemoteIndices.TryRead(ref reader, options, PropRemoteIndices))
			{
				continue;
			}

			if (propRestriction.TryRead(ref reader, options, PropRestriction))
			{
				continue;
			}

			if (propRunAs.TryRead(ref reader, options, PropRunAs))
			{
				continue;
			}

			if (propTransientMetadata.TryRead(ref reader, options, PropTransientMetadata))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new RoleDescriptorRead
		{
			Applications = propApplications.Value
,
			Cluster = propCluster.Value
,
			Description = propDescription.Value
,
			Global = propGlobal.Value
,
			Indices = propIndices.Value
,
			Metadata = propMetadata.Value
,
			RemoteCluster = propRemoteCluster.Value
,
			RemoteIndices = propRemoteIndices.Value
,
			Restriction = propRestriction.Value
,
			RunAs = propRunAs.Value
,
			TransientMetadata = propTransientMetadata.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, RoleDescriptorRead value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropApplications, value.Applications);
		writer.WriteProperty(options, PropCluster, value.Cluster);
		writer.WriteProperty(options, PropDescription, value.Description);
		writer.WriteProperty(options, PropGlobal, value.Global, null, typeof(SingleOrManyMarker<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>?, Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>));
		writer.WriteProperty(options, PropIndices, value.Indices);
		writer.WriteProperty(options, PropMetadata, value.Metadata);
		writer.WriteProperty(options, PropRemoteCluster, value.RemoteCluster);
		writer.WriteProperty(options, PropRemoteIndices, value.RemoteIndices);
		writer.WriteProperty(options, PropRestriction, value.Restriction);
		writer.WriteProperty(options, PropRunAs, value.RunAs);
		writer.WriteProperty(options, PropTransientMetadata, value.TransientMetadata);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(RoleDescriptorReadConverter))]
public sealed partial class RoleDescriptorRead
{
	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; init; }

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege> Cluster { get; init; }

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public string? Description { get; init; }

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? Global { get; init; }

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges> Indices { get; init; }

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, object>? Metadata { get; init; }

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteCluster { get; init; }

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndices { get; init; }

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Security.Restriction? Restriction { get; init; }

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<string>? RunAs { get; init; }
	public IReadOnlyDictionary<string, object>? TransientMetadata { get; init; }
}