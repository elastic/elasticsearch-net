// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class RoleDescriptorReadConverter : JsonConverter<RoleDescriptorRead>
{
	public override RoleDescriptorRead Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege> cluster = default;
		string? description = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges> indices = default;
		IReadOnlyDictionary<string, object>? metadata = default;
		IReadOnlyCollection<string>? runAs = default;
		IReadOnlyDictionary<string, object>? transientMetadata = default;
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				var property = reader.GetString();
				if (property == "applications")
				{
					applications = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>?>(ref reader, options);
					continue;
				}

				if (property == "cluster")
				{
					cluster = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>>(ref reader, options);
					continue;
				}

				if (property == "description")
				{
					description = JsonSerializer.Deserialize<string?>(ref reader, options);
					continue;
				}

				if (property == "global")
				{
					global = SingleOrManySerializationHelper.Deserialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(ref reader, options);
					continue;
				}

				if (property == "indices" || property == "index")
				{
					indices = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>>(ref reader, options);
					continue;
				}

				if (property == "metadata")
				{
					metadata = JsonSerializer.Deserialize<IReadOnlyDictionary<string, object>?>(ref reader, options);
					continue;
				}

				if (property == "run_as")
				{
					runAs = JsonSerializer.Deserialize<IReadOnlyCollection<string>?>(ref reader, options);
					continue;
				}

				if (property == "transient_metadata")
				{
					transientMetadata = JsonSerializer.Deserialize<IReadOnlyDictionary<string, object>?>(ref reader, options);
					continue;
				}
			}
		}

		return new RoleDescriptorRead { Applications = applications, Cluster = cluster, Description = description, Global = global, Indices = indices, Metadata = metadata, RunAs = runAs, TransientMetadata = transientMetadata };
	}

	public override void Write(Utf8JsonWriter writer, RoleDescriptorRead value, JsonSerializerOptions options)
	{
		throw new NotImplementedException("'RoleDescriptorRead' is a readonly type, used only on responses and does not support being written to JSON.");
	}
}

[JsonConverter(typeof(RoleDescriptorReadConverter))]
public sealed partial class RoleDescriptorRead
{
	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; init; }

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege> Cluster { get; init; }

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public string? Description { get; init; }

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? Global { get; init; }

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges> Indices { get; init; }

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, object>? Metadata { get; init; }

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<string>? RunAs { get; init; }
	public IReadOnlyDictionary<string, object>? TransientMetadata { get; init; }
}