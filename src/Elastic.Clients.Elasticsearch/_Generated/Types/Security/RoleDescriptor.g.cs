// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class RoleDescriptorConverter : JsonConverter<RoleDescriptor>
{
	public override RoleDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		var variant = new RoleDescriptor();
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				var property = reader.GetString();
				if (property == "applications")
				{
					variant.Applications = JsonSerializer.Deserialize<ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>?>(ref reader, options);
					continue;
				}

				if (property == "cluster")
				{
					variant.Cluster = JsonSerializer.Deserialize<ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>?>(ref reader, options);
					continue;
				}

				if (property == "description")
				{
					variant.Description = JsonSerializer.Deserialize<string?>(ref reader, options);
					continue;
				}

				if (property == "global")
				{
					variant.Global = SingleOrManySerializationHelper.Deserialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(ref reader, options);
					continue;
				}

				if (property == "indices" || property == "index")
				{
					variant.Indices = JsonSerializer.Deserialize<ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>?>(ref reader, options);
					continue;
				}

				if (property == "metadata")
				{
					variant.Metadata = JsonSerializer.Deserialize<IDictionary<string, object>?>(ref reader, options);
					continue;
				}

				if (property == "remote_cluster")
				{
					variant.RemoteCluster = JsonSerializer.Deserialize<ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>?>(ref reader, options);
					continue;
				}

				if (property == "remote_indices")
				{
					variant.RemoteIndices = JsonSerializer.Deserialize<ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>?>(ref reader, options);
					continue;
				}

				if (property == "restriction")
				{
					variant.Restriction = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Security.Restriction?>(ref reader, options);
					continue;
				}

				if (property == "run_as")
				{
					variant.RunAs = JsonSerializer.Deserialize<ICollection<string>?>(ref reader, options);
					continue;
				}

				if (property == "transient_metadata")
				{
					variant.TransientMetadata = JsonSerializer.Deserialize<IDictionary<string, object>?>(ref reader, options);
					continue;
				}
			}
		}

		return variant;
	}

	public override void Write(Utf8JsonWriter writer, RoleDescriptor value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		if (value.Applications is not null)
		{
			writer.WritePropertyName("applications");
			JsonSerializer.Serialize(writer, value.Applications, options);
		}

		if (value.Cluster is not null)
		{
			writer.WritePropertyName("cluster");
			JsonSerializer.Serialize(writer, value.Cluster, options);
		}

		if (!string.IsNullOrEmpty(value.Description))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(value.Description);
		}

		if (value.Global is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, value.Global, options);
		}

		if (value.Indices is not null)
		{
			writer.WritePropertyName("indices");
			JsonSerializer.Serialize(writer, value.Indices, options);
		}

		if (value.Metadata is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, value.Metadata, options);
		}

		if (value.RemoteCluster is not null)
		{
			writer.WritePropertyName("remote_cluster");
			JsonSerializer.Serialize(writer, value.RemoteCluster, options);
		}

		if (value.RemoteIndices is not null)
		{
			writer.WritePropertyName("remote_indices");
			JsonSerializer.Serialize(writer, value.RemoteIndices, options);
		}

		if (value.Restriction is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, value.Restriction, options);
		}

		if (value.RunAs is not null)
		{
			writer.WritePropertyName("run_as");
			JsonSerializer.Serialize(writer, value.RunAs, options);
		}

		if (value.TransientMetadata is not null)
		{
			writer.WritePropertyName("transient_metadata");
			JsonSerializer.Serialize(writer, value.TransientMetadata, options);
		}

		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(RoleDescriptorConverter))]
public sealed partial class RoleDescriptor
{
	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; set; }

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? Cluster { get; set; }

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public string? Description { get; set; }

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? Global { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? Indices { get; set; }

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public IDictionary<string, object>? Metadata { get; set; }

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters.
	/// NOTE: This is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteCluster { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndices { get; set; }

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Security.Restriction? Restriction { get; set; }

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate.
	/// NOTE: In Elastic Cloud Serverless, the run-as feature is disabled.
	/// For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public ICollection<string>? RunAs { get; set; }
	public IDictionary<string, object>? TransientMetadata { get; set; }
}

public sealed partial class RoleDescriptorDescriptor<TDocument> : SerializableDescriptor<RoleDescriptorDescriptor<TDocument>>
{
	internal RoleDescriptorDescriptor(Action<RoleDescriptorDescriptor<TDocument>> configure) => configure.Invoke(this);

	public RoleDescriptorDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? ApplicationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor ApplicationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> ApplicationsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] ApplicationsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? ClusterValue { get; set; }
	private string? DescriptionValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? GlobalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor GlobalDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> GlobalDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] GlobalDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument> IndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>> IndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>>[] IndicesDescriptorActions { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor RemoteClusterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> RemoteClusterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] RemoteClusterDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument> RemoteIndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>> RemoteIndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>>[] RemoteIndicesDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Security.Restriction? RestrictionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor RestrictionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> RestrictionDescriptorAction { get; set; }
	private ICollection<string>? RunAsValue { get; set; }
	private IDictionary<string, object>? TransientMetadataValue { get; set; }

	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Applications(ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications)
	{
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsValue = applications;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor descriptor)
	{
		ApplicationsValue = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(params Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Cluster(ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? cluster)
	{
		ClusterValue = cluster;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Global(ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global)
	{
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalValue = global;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor descriptor)
	{
		GlobalValue = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorActions = null;
		GlobalDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(params Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Indices(ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices)
	{
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesValue = indices;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument> descriptor)
	{
		IndicesValue = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>> configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorActions = null;
		IndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(params Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>>[] configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters.
	/// NOTE: This is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RemoteCluster(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? remoteCluster)
	{
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterValue = remoteCluster;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor descriptor)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(params Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RemoteIndices(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? remoteIndices)
	{
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesValue = remoteIndices;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument> descriptor)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>> configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(params Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>>[] configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Restriction(Elastic.Clients.Elasticsearch.Security.Restriction? restriction)
	{
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = null;
		RestrictionValue = restriction;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Restriction(Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor descriptor)
	{
		RestrictionValue = null;
		RestrictionDescriptorAction = null;
		RestrictionDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Restriction(Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> configure)
	{
		RestrictionValue = null;
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate.
	/// NOTE: In Elastic Cloud Serverless, the run-as feature is disabled.
	/// For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RunAs(ICollection<string>? runAs)
	{
		RunAsValue = runAs;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> TransientMetadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		TransientMetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ApplicationsDescriptor is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ApplicationsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorAction is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(ApplicationsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorActions is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			foreach (var action in ApplicationsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ApplicationsValue is not null)
		{
			writer.WritePropertyName("applications");
			JsonSerializer.Serialize(writer, ApplicationsValue, options);
		}

		if (ClusterValue is not null)
		{
			writer.WritePropertyName("cluster");
			JsonSerializer.Serialize(writer, ClusterValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		if (GlobalDescriptor is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, GlobalDescriptor, options);
		}
		else if (GlobalDescriptorAction is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(GlobalDescriptorAction), options);
		}
		else if (GlobalDescriptorActions is not null)
		{
			writer.WritePropertyName("global");
			if (GlobalDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in GlobalDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(action), options);
			}

			if (GlobalDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (GlobalValue is not null)
		{
			writer.WritePropertyName("global");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(GlobalValue, writer, options);
		}

		if (IndicesDescriptor is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, IndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>(IndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			foreach (var action in IndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (IndicesValue is not null)
		{
			writer.WritePropertyName("indices");
			JsonSerializer.Serialize(writer, IndicesValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		if (RemoteClusterDescriptor is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteClusterDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(RemoteClusterDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			foreach (var action in RemoteClusterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteClusterValue is not null)
		{
			writer.WritePropertyName("remote_cluster");
			JsonSerializer.Serialize(writer, RemoteClusterValue, options);
		}

		if (RemoteIndicesDescriptor is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteIndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>(RemoteIndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			foreach (var action in RemoteIndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteIndicesValue is not null)
		{
			writer.WritePropertyName("remote_indices");
			JsonSerializer.Serialize(writer, RemoteIndicesValue, options);
		}

		if (RestrictionDescriptor is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionDescriptor, options);
		}
		else if (RestrictionDescriptorAction is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor(RestrictionDescriptorAction), options);
		}
		else if (RestrictionValue is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionValue, options);
		}

		if (RunAsValue is not null)
		{
			writer.WritePropertyName("run_as");
			JsonSerializer.Serialize(writer, RunAsValue, options);
		}

		if (TransientMetadataValue is not null)
		{
			writer.WritePropertyName("transient_metadata");
			JsonSerializer.Serialize(writer, TransientMetadataValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class RoleDescriptorDescriptor : SerializableDescriptor<RoleDescriptorDescriptor>
{
	internal RoleDescriptorDescriptor(Action<RoleDescriptorDescriptor> configure) => configure.Invoke(this);

	public RoleDescriptorDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? ApplicationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor ApplicationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> ApplicationsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] ApplicationsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? ClusterValue { get; set; }
	private string? DescriptionValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? GlobalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor GlobalDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> GlobalDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] GlobalDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor IndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor> IndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor>[] IndicesDescriptorActions { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor RemoteClusterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> RemoteClusterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] RemoteClusterDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor RemoteIndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor> RemoteIndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor>[] RemoteIndicesDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Security.Restriction? RestrictionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor RestrictionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> RestrictionDescriptorAction { get; set; }
	private ICollection<string>? RunAsValue { get; set; }
	private IDictionary<string, object>? TransientMetadataValue { get; set; }

	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Applications(ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications)
	{
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsValue = applications;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor descriptor)
	{
		ApplicationsValue = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(params Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Cluster(ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? cluster)
	{
		ClusterValue = cluster;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Global(ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global)
	{
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalValue = global;
		return Self;
	}

	public RoleDescriptorDescriptor Global(Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor descriptor)
	{
		GlobalValue = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Global(Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorActions = null;
		GlobalDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Global(params Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Indices(ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices)
	{
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesValue = indices;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor descriptor)
	{
		IndicesValue = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor> configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorActions = null;
		IndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(params Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor>[] configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters.
	/// NOTE: This is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RemoteCluster(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? remoteCluster)
	{
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterValue = remoteCluster;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor descriptor)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(params Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RemoteIndices(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? remoteIndices)
	{
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesValue = remoteIndices;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor descriptor)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor> configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(params Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor>[] configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Restriction(Elastic.Clients.Elasticsearch.Security.Restriction? restriction)
	{
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = null;
		RestrictionValue = restriction;
		return Self;
	}

	public RoleDescriptorDescriptor Restriction(Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor descriptor)
	{
		RestrictionValue = null;
		RestrictionDescriptorAction = null;
		RestrictionDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Restriction(Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> configure)
	{
		RestrictionValue = null;
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate.
	/// NOTE: In Elastic Cloud Serverless, the run-as feature is disabled.
	/// For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RunAs(ICollection<string>? runAs)
	{
		RunAsValue = runAs;
		return Self;
	}

	public RoleDescriptorDescriptor TransientMetadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		TransientMetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ApplicationsDescriptor is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ApplicationsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorAction is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(ApplicationsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorActions is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			foreach (var action in ApplicationsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ApplicationsValue is not null)
		{
			writer.WritePropertyName("applications");
			JsonSerializer.Serialize(writer, ApplicationsValue, options);
		}

		if (ClusterValue is not null)
		{
			writer.WritePropertyName("cluster");
			JsonSerializer.Serialize(writer, ClusterValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		if (GlobalDescriptor is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, GlobalDescriptor, options);
		}
		else if (GlobalDescriptorAction is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(GlobalDescriptorAction), options);
		}
		else if (GlobalDescriptorActions is not null)
		{
			writer.WritePropertyName("global");
			if (GlobalDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in GlobalDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(action), options);
			}

			if (GlobalDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (GlobalValue is not null)
		{
			writer.WritePropertyName("global");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(GlobalValue, writer, options);
		}

		if (IndicesDescriptor is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, IndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor(IndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			foreach (var action in IndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (IndicesValue is not null)
		{
			writer.WritePropertyName("indices");
			JsonSerializer.Serialize(writer, IndicesValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		if (RemoteClusterDescriptor is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteClusterDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(RemoteClusterDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			foreach (var action in RemoteClusterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteClusterValue is not null)
		{
			writer.WritePropertyName("remote_cluster");
			JsonSerializer.Serialize(writer, RemoteClusterValue, options);
		}

		if (RemoteIndicesDescriptor is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteIndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor(RemoteIndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			foreach (var action in RemoteIndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteIndicesValue is not null)
		{
			writer.WritePropertyName("remote_indices");
			JsonSerializer.Serialize(writer, RemoteIndicesValue, options);
		}

		if (RestrictionDescriptor is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionDescriptor, options);
		}
		else if (RestrictionDescriptorAction is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor(RestrictionDescriptorAction), options);
		}
		else if (RestrictionValue is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionValue, options);
		}

		if (RunAsValue is not null)
		{
			writer.WritePropertyName("run_as");
			JsonSerializer.Serialize(writer, RunAsValue, options);
		}

		if (TransientMetadataValue is not null)
		{
			writer.WritePropertyName("transient_metadata");
			JsonSerializer.Serialize(writer, TransientMetadataValue, options);
		}

		writer.WriteEndObject();
	}
}