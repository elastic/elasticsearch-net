// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class RoleDescriptorConverter : System.Text.Json.Serialization.JsonConverter<RoleDescriptor>
{
	private static readonly System.Text.Json.JsonEncodedText PropApplications = System.Text.Json.JsonEncodedText.Encode("applications");
	private static readonly System.Text.Json.JsonEncodedText PropCluster = System.Text.Json.JsonEncodedText.Encode("cluster");
	private static readonly System.Text.Json.JsonEncodedText PropDescription = System.Text.Json.JsonEncodedText.Encode("description");
	private static readonly System.Text.Json.JsonEncodedText PropGlobal = System.Text.Json.JsonEncodedText.Encode("global");
	private static readonly System.Text.Json.JsonEncodedText PropIndices = System.Text.Json.JsonEncodedText.Encode("indices");
	private static readonly System.Text.Json.JsonEncodedText PropIndices1 = System.Text.Json.JsonEncodedText.Encode("index");
	private static readonly System.Text.Json.JsonEncodedText PropMetadata = System.Text.Json.JsonEncodedText.Encode("metadata");
	private static readonly System.Text.Json.JsonEncodedText PropRemoteCluster = System.Text.Json.JsonEncodedText.Encode("remote_cluster");
	private static readonly System.Text.Json.JsonEncodedText PropRemoteIndices = System.Text.Json.JsonEncodedText.Encode("remote_indices");
	private static readonly System.Text.Json.JsonEncodedText PropRestriction = System.Text.Json.JsonEncodedText.Encode("restriction");
	private static readonly System.Text.Json.JsonEncodedText PropRunAs = System.Text.Json.JsonEncodedText.Encode("run_as");
	private static readonly System.Text.Json.JsonEncodedText PropTransientMetadata = System.Text.Json.JsonEncodedText.Encode("transient_metadata");

	public override RoleDescriptor Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>?> propApplications = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>?> propCluster = default;
		LocalJsonValue<string?> propDescription = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>?> propGlobal = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>?> propIndices = default;
		LocalJsonValue<IDictionary<string, object>?> propMetadata = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>?> propRemoteCluster = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>?> propRemoteIndices = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Security.Restriction?> propRestriction = default;
		LocalJsonValue<ICollection<string>?> propRunAs = default;
		LocalJsonValue<IDictionary<string, object>?> propTransientMetadata = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propApplications.TryReadProperty(ref reader, options, PropApplications, static ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>(o, null)))
			{
				continue;
			}

			if (propCluster.TryReadProperty(ref reader, options, PropCluster, static ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>(o, null)))
			{
				continue;
			}

			if (propDescription.TryReadProperty(ref reader, options, PropDescription, null))
			{
				continue;
			}

			if (propGlobal.TryReadProperty(ref reader, options, PropGlobal, static ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(o, null)))
			{
				continue;
			}

			if (propIndices.TryReadProperty(ref reader, options, PropIndices, static ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>(o, null)) || propIndices.TryReadProperty(ref reader, options, PropIndices1, static ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>(o, null)))
			{
				continue;
			}

			if (propMetadata.TryReadProperty(ref reader, options, PropMetadata, static IDictionary<string, object>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, object>(o, null, null)))
			{
				continue;
			}

			if (propRemoteCluster.TryReadProperty(ref reader, options, PropRemoteCluster, static ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>(o, null)))
			{
				continue;
			}

			if (propRemoteIndices.TryReadProperty(ref reader, options, PropRemoteIndices, static ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>(o, null)))
			{
				continue;
			}

			if (propRestriction.TryReadProperty(ref reader, options, PropRestriction, null))
			{
				continue;
			}

			if (propRunAs.TryReadProperty(ref reader, options, PropRunAs, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propTransientMetadata.TryReadProperty(ref reader, options, PropTransientMetadata, static IDictionary<string, object>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, object>(o, null, null)))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new RoleDescriptor
		{
			Applications = propApplications.Value
,
			Cluster = propCluster.Value
,
			Description = propDescription.Value
,
			Global = propGlobal.Value
,
			Indices = propIndices.Value
,
			Metadata = propMetadata.Value
,
			RemoteCluster = propRemoteCluster.Value
,
			RemoteIndices = propRemoteIndices.Value
,
			Restriction = propRestriction.Value
,
			RunAs = propRunAs.Value
,
			TransientMetadata = propTransientMetadata.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, RoleDescriptor value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropApplications, value.Applications, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>(o, v, null));
		writer.WriteProperty(options, PropCluster, value.Cluster, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>(o, v, null));
		writer.WriteProperty(options, PropDescription, value.Description, null, null);
		writer.WriteProperty(options, PropGlobal, value.Global, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(o, v, null));
		writer.WriteProperty(options, PropIndices, value.Indices, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>(o, v, null));
		writer.WriteProperty(options, PropMetadata, value.Metadata, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, object>? v) => w.WriteDictionaryValue<string, object>(o, v, null, null));
		writer.WriteProperty(options, PropRemoteCluster, value.RemoteCluster, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>(o, v, null));
		writer.WriteProperty(options, PropRemoteIndices, value.RemoteIndices, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>(o, v, null));
		writer.WriteProperty(options, PropRestriction, value.Restriction, null, null);
		writer.WriteProperty(options, PropRunAs, value.RunAs, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropTransientMetadata, value.TransientMetadata, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, object>? v) => w.WriteDictionaryValue<string, object>(o, v, null, null));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(RoleDescriptorConverter))]
public sealed partial class RoleDescriptor
{
	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; set; }

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? Cluster { get; set; }

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public string? Description { get; set; }

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? Global { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? Indices { get; set; }

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public IDictionary<string, object>? Metadata { get; set; }

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteCluster { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndices { get; set; }

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Security.Restriction? Restriction { get; set; }

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate. <em>Note</em>: in Serverless, the run-as feature is disabled. For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public ICollection<string>? RunAs { get; set; }
	public IDictionary<string, object>? TransientMetadata { get; set; }
}

public sealed partial class RoleDescriptorDescriptor<TDocument> : SerializableDescriptor<RoleDescriptorDescriptor<TDocument>>
{
	internal RoleDescriptorDescriptor(Action<RoleDescriptorDescriptor<TDocument>> configure) => configure.Invoke(this);

	public RoleDescriptorDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? ApplicationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor ApplicationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> ApplicationsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] ApplicationsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? ClusterValue { get; set; }
	private string? DescriptionValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? GlobalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor GlobalDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> GlobalDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] GlobalDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument> IndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>> IndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>>[] IndicesDescriptorActions { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor RemoteClusterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> RemoteClusterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] RemoteClusterDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument> RemoteIndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>> RemoteIndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>>[] RemoteIndicesDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Security.Restriction? RestrictionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor RestrictionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> RestrictionDescriptorAction { get; set; }
	private ICollection<string>? RunAsValue { get; set; }
	private IDictionary<string, object>? TransientMetadataValue { get; set; }

	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Applications(ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications)
	{
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsValue = applications;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor descriptor)
	{
		ApplicationsValue = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Applications(params Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Cluster(ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? cluster)
	{
		ClusterValue = cluster;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Global(ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global)
	{
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalValue = global;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor descriptor)
	{
		GlobalValue = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorActions = null;
		GlobalDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Global(params Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Indices(ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices)
	{
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesValue = indices;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument> descriptor)
	{
		IndicesValue = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>> configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorActions = null;
		IndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Indices(params Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>>[] configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RemoteCluster(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? remoteCluster)
	{
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterValue = remoteCluster;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor descriptor)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteCluster(params Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RemoteIndices(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? remoteIndices)
	{
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesValue = remoteIndices;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument> descriptor)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>> configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> RemoteIndices(params Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>>[] configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> Restriction(Elastic.Clients.Elasticsearch.Security.Restriction? restriction)
	{
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = null;
		RestrictionValue = restriction;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Restriction(Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor descriptor)
	{
		RestrictionValue = null;
		RestrictionDescriptorAction = null;
		RestrictionDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> Restriction(Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> configure)
	{
		RestrictionValue = null;
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate. <em>Note</em>: in Serverless, the run-as feature is disabled. For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor<TDocument> RunAs(ICollection<string>? runAs)
	{
		RunAsValue = runAs;
		return Self;
	}

	public RoleDescriptorDescriptor<TDocument> TransientMetadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		TransientMetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ApplicationsDescriptor is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ApplicationsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorAction is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(ApplicationsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorActions is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			foreach (var action in ApplicationsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ApplicationsValue is not null)
		{
			writer.WritePropertyName("applications");
			JsonSerializer.Serialize(writer, ApplicationsValue, options);
		}

		if (ClusterValue is not null)
		{
			writer.WritePropertyName("cluster");
			JsonSerializer.Serialize(writer, ClusterValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		if (GlobalDescriptor is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, GlobalDescriptor, options);
		}
		else if (GlobalDescriptorAction is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(GlobalDescriptorAction), options);
		}
		else if (GlobalDescriptorActions is not null)
		{
			writer.WritePropertyName("global");
			if (GlobalDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in GlobalDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(action), options);
			}

			if (GlobalDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (GlobalValue is not null)
		{
			writer.WritePropertyName("global");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(GlobalValue, writer, options);
		}

		if (IndicesDescriptor is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, IndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>(IndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			foreach (var action in IndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (IndicesValue is not null)
		{
			writer.WritePropertyName("indices");
			JsonSerializer.Serialize(writer, IndicesValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		if (RemoteClusterDescriptor is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteClusterDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(RemoteClusterDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			foreach (var action in RemoteClusterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteClusterValue is not null)
		{
			writer.WritePropertyName("remote_cluster");
			JsonSerializer.Serialize(writer, RemoteClusterValue, options);
		}

		if (RemoteIndicesDescriptor is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteIndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>(RemoteIndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			foreach (var action in RemoteIndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteIndicesValue is not null)
		{
			writer.WritePropertyName("remote_indices");
			JsonSerializer.Serialize(writer, RemoteIndicesValue, options);
		}

		if (RestrictionDescriptor is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionDescriptor, options);
		}
		else if (RestrictionDescriptorAction is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor(RestrictionDescriptorAction), options);
		}
		else if (RestrictionValue is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionValue, options);
		}

		if (RunAsValue is not null)
		{
			writer.WritePropertyName("run_as");
			JsonSerializer.Serialize(writer, RunAsValue, options);
		}

		if (TransientMetadataValue is not null)
		{
			writer.WritePropertyName("transient_metadata");
			JsonSerializer.Serialize(writer, TransientMetadataValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class RoleDescriptorDescriptor : SerializableDescriptor<RoleDescriptorDescriptor>
{
	internal RoleDescriptorDescriptor(Action<RoleDescriptorDescriptor> configure) => configure.Invoke(this);

	public RoleDescriptorDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? ApplicationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor ApplicationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> ApplicationsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] ApplicationsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? ClusterValue { get; set; }
	private string? DescriptionValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? GlobalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor GlobalDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> GlobalDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] GlobalDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor IndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor> IndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor>[] IndicesDescriptorActions { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? RemoteClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor RemoteClusterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> RemoteClusterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] RemoteClusterDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? RemoteIndicesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor RemoteIndicesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor> RemoteIndicesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor>[] RemoteIndicesDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Security.Restriction? RestrictionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor RestrictionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> RestrictionDescriptorAction { get; set; }
	private ICollection<string>? RunAsValue { get; set; }
	private IDictionary<string, object>? TransientMetadataValue { get; set; }

	/// <summary>
	/// <para>
	/// A list of application privilege entries
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Applications(ICollection<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications)
	{
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsValue = applications;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor descriptor)
	{
		ApplicationsValue = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor> configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorActions = null;
		ApplicationsDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Applications(params Action<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor>[] configure)
	{
		ApplicationsValue = null;
		ApplicationsDescriptor = null;
		ApplicationsDescriptorAction = null;
		ApplicationsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Cluster(ICollection<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? cluster)
	{
		ClusterValue = cluster;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional description of the role descriptor
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Global(ICollection<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global)
	{
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalValue = global;
		return Self;
	}

	public RoleDescriptorDescriptor Global(Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor descriptor)
	{
		GlobalValue = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = null;
		GlobalDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Global(Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor> configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorActions = null;
		GlobalDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Global(params Action<Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor>[] configure)
	{
		GlobalValue = null;
		GlobalDescriptor = null;
		GlobalDescriptorAction = null;
		GlobalDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions entries.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Indices(ICollection<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices)
	{
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesValue = indices;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor descriptor)
	{
		IndicesValue = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = null;
		IndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor> configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorActions = null;
		IndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor Indices(params Action<Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor>[] configure)
	{
		IndicesValue = null;
		IndicesDescriptor = null;
		IndicesDescriptorAction = null;
		IndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Optional meta-data. Within the metadata object, keys that begin with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RemoteCluster(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivileges>? remoteCluster)
	{
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterValue = remoteCluster;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor descriptor)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor> configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorActions = null;
		RemoteClusterDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteCluster(params Action<Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor>[] configure)
	{
		RemoteClusterValue = null;
		RemoteClusterDescriptor = null;
		RemoteClusterDescriptorAction = null;
		RemoteClusterDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permissions for remote clusters.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RemoteIndices(ICollection<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivileges>? remoteIndices)
	{
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesValue = remoteIndices;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor descriptor)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor> configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorActions = null;
		RemoteIndicesDescriptorAction = configure;
		return Self;
	}

	public RoleDescriptorDescriptor RemoteIndices(params Action<Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor>[] configure)
	{
		RemoteIndicesValue = null;
		RemoteIndicesDescriptor = null;
		RemoteIndicesDescriptorAction = null;
		RemoteIndicesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restriction for when the role descriptor is allowed to be effective.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor Restriction(Elastic.Clients.Elasticsearch.Security.Restriction? restriction)
	{
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = null;
		RestrictionValue = restriction;
		return Self;
	}

	public RoleDescriptorDescriptor Restriction(Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor descriptor)
	{
		RestrictionValue = null;
		RestrictionDescriptorAction = null;
		RestrictionDescriptor = descriptor;
		return Self;
	}

	public RoleDescriptorDescriptor Restriction(Action<Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor> configure)
	{
		RestrictionValue = null;
		RestrictionDescriptor = null;
		RestrictionDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of users that the API keys can impersonate. <em>Note</em>: in Serverless, the run-as feature is disabled. For API compatibility, you can still specify an empty <c>run_as</c> field, but a non-empty list will be rejected.
	/// </para>
	/// </summary>
	public RoleDescriptorDescriptor RunAs(ICollection<string>? runAs)
	{
		RunAsValue = runAs;
		return Self;
	}

	public RoleDescriptorDescriptor TransientMetadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		TransientMetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ApplicationsDescriptor is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ApplicationsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorAction is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(ApplicationsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ApplicationsDescriptorActions is not null)
		{
			writer.WritePropertyName("applications");
			writer.WriteStartArray();
			foreach (var action in ApplicationsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ApplicationsValue is not null)
		{
			writer.WritePropertyName("applications");
			JsonSerializer.Serialize(writer, ApplicationsValue, options);
		}

		if (ClusterValue is not null)
		{
			writer.WritePropertyName("cluster");
			JsonSerializer.Serialize(writer, ClusterValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		if (GlobalDescriptor is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, GlobalDescriptor, options);
		}
		else if (GlobalDescriptorAction is not null)
		{
			writer.WritePropertyName("global");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(GlobalDescriptorAction), options);
		}
		else if (GlobalDescriptorActions is not null)
		{
			writer.WritePropertyName("global");
			if (GlobalDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in GlobalDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.GlobalPrivilegeDescriptor(action), options);
			}

			if (GlobalDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (GlobalValue is not null)
		{
			writer.WritePropertyName("global");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>(GlobalValue, writer, options);
		}

		if (IndicesDescriptor is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, IndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor(IndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (IndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("indices");
			writer.WriteStartArray();
			foreach (var action in IndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.IndicesPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (IndicesValue is not null)
		{
			writer.WritePropertyName("indices");
			JsonSerializer.Serialize(writer, IndicesValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		if (RemoteClusterDescriptor is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteClusterDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(RemoteClusterDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteClusterDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_cluster");
			writer.WriteStartArray();
			foreach (var action in RemoteClusterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteClusterPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteClusterValue is not null)
		{
			writer.WritePropertyName("remote_cluster");
			JsonSerializer.Serialize(writer, RemoteClusterValue, options);
		}

		if (RemoteIndicesDescriptor is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, RemoteIndicesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorAction is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor(RemoteIndicesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (RemoteIndicesDescriptorActions is not null)
		{
			writer.WritePropertyName("remote_indices");
			writer.WriteStartArray();
			foreach (var action in RemoteIndicesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RemoteIndicesPrivilegesDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (RemoteIndicesValue is not null)
		{
			writer.WritePropertyName("remote_indices");
			JsonSerializer.Serialize(writer, RemoteIndicesValue, options);
		}

		if (RestrictionDescriptor is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionDescriptor, options);
		}
		else if (RestrictionDescriptorAction is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.RestrictionDescriptor(RestrictionDescriptorAction), options);
		}
		else if (RestrictionValue is not null)
		{
			writer.WritePropertyName("restriction");
			JsonSerializer.Serialize(writer, RestrictionValue, options);
		}

		if (RunAsValue is not null)
		{
			writer.WritePropertyName("run_as");
			JsonSerializer.Serialize(writer, RunAsValue, options);
		}

		if (TransientMetadataValue is not null)
		{
			writer.WritePropertyName("transient_metadata");
			JsonSerializer.Serialize(writer, TransientMetadataValue, options);
		}

		writer.WriteEndObject();
	}
}