// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	internal sealed class RoleDescriptorConverter : JsonConverter<RoleDescriptor>
	{
		public override RoleDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			if (reader.TokenType != JsonTokenType.StartObject)
				throw new JsonException("Unexpected JSON detected.");
			var variant = new RoleDescriptor();
			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					var property = reader.GetString();
					if (property == "applications")
					{
						variant.Applications = JsonSerializer.Deserialize<IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>?>(ref reader, options);
						continue;
					}

					if (property == "cluster")
					{
						variant.Cluster = JsonSerializer.Deserialize<IEnumerable<string>?>(ref reader, options);
						continue;
					}

					if (property == "global")
					{
						variant.Global = JsonSerializer.Deserialize<IEnumerable<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>?>(ref reader, options);
						continue;
					}

					if (property == "indices" || property == "index")
					{
						variant.Indices = JsonSerializer.Deserialize<IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>?>(ref reader, options);
						continue;
					}

					if (property == "metadata")
					{
						variant.Metadata = JsonSerializer.Deserialize<Dictionary<string, object>?>(ref reader, options);
						continue;
					}

					if (property == "run_as")
					{
						variant.RunAs = JsonSerializer.Deserialize<IEnumerable<string>?>(ref reader, options);
						continue;
					}

					if (property == "transient_metadata")
					{
						variant.TransientMetadata = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Security.TransientMetadataConfig?>(ref reader, options);
						continue;
					}
				}
			}

			return variant;
		}

		public override void Write(Utf8JsonWriter writer, RoleDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Applications is not null)
			{
				writer.WritePropertyName("applications");
				JsonSerializer.Serialize(writer, value.Applications, options);
			}

			if (value.Cluster is not null)
			{
				writer.WritePropertyName("cluster");
				JsonSerializer.Serialize(writer, value.Cluster, options);
			}

			if (value.Global is not null)
			{
				writer.WritePropertyName("global");
				JsonSerializer.Serialize(writer, value.Global, options);
			}

			if (value.Indices is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, value.Indices, options);
			}

			if (value.Metadata is not null)
			{
				writer.WritePropertyName("metadata");
				JsonSerializer.Serialize(writer, value.Metadata, options);
			}

			if (value.RunAs is not null)
			{
				writer.WritePropertyName("run_as");
				JsonSerializer.Serialize(writer, value.RunAs, options);
			}

			if (value.TransientMetadata is not null)
			{
				writer.WritePropertyName("transient_metadata");
				JsonSerializer.Serialize(writer, value.TransientMetadata, options);
			}

			writer.WriteEndObject();
		}
	}

	[JsonConverter(typeof(RoleDescriptorConverter))]
	public sealed partial class RoleDescriptor
	{
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; set; }

		public IEnumerable<string>? Cluster { get; set; }

		public IEnumerable<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? Global { get; set; }

		public IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? Indices { get; set; }

		public Dictionary<string, object>? Metadata { get; set; }

		public IEnumerable<string>? RunAs { get; set; }

		public Elastic.Clients.Elasticsearch.Security.TransientMetadataConfig? TransientMetadata { get; set; }
	}

	public sealed partial class RoleDescriptorDescriptor : SerializableDescriptorBase<RoleDescriptorDescriptor>
	{
		internal RoleDescriptorDescriptor(Action<RoleDescriptorDescriptor> configure) => configure.Invoke(this);
		public RoleDescriptorDescriptor() : base()
		{
		}

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? ApplicationsValue { get; set; }

		private ApplicationPrivilegesDescriptor ApplicationsDescriptor { get; set; }

		private Action<ApplicationPrivilegesDescriptor> ApplicationsDescriptorAction { get; set; }

		private Action<ApplicationPrivilegesDescriptor>[] ApplicationsDescriptorActions { get; set; }

		private IEnumerable<string>? ClusterValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? GlobalValue { get; set; }

		private GlobalPrivilegeDescriptor GlobalDescriptor { get; set; }

		private Action<GlobalPrivilegeDescriptor> GlobalDescriptorAction { get; set; }

		private Action<GlobalPrivilegeDescriptor>[] GlobalDescriptorActions { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IndicesValue { get; set; }

		private IndicesPrivilegesDescriptor IndicesDescriptor { get; set; }

		private Action<IndicesPrivilegesDescriptor> IndicesDescriptorAction { get; set; }

		private Action<IndicesPrivilegesDescriptor>[] IndicesDescriptorActions { get; set; }

		private Dictionary<string, object>? MetadataValue { get; set; }

		private IEnumerable<string>? RunAsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Security.TransientMetadataConfig? TransientMetadataValue { get; set; }

		private TransientMetadataConfigDescriptor TransientMetadataDescriptor { get; set; }

		private Action<TransientMetadataConfigDescriptor> TransientMetadataDescriptorAction { get; set; }

		public RoleDescriptorDescriptor Applications(IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications)
		{
			ApplicationsDescriptor = null;
			ApplicationsDescriptorAction = null;
			ApplicationsDescriptorActions = null;
			ApplicationsValue = applications;
			return Self;
		}

		public RoleDescriptorDescriptor Applications(ApplicationPrivilegesDescriptor descriptor)
		{
			ApplicationsValue = null;
			ApplicationsDescriptorAction = null;
			ApplicationsDescriptorActions = null;
			ApplicationsDescriptor = descriptor;
			return Self;
		}

		public RoleDescriptorDescriptor Applications(Action<ApplicationPrivilegesDescriptor> configure)
		{
			ApplicationsValue = null;
			ApplicationsDescriptor = null;
			ApplicationsDescriptorActions = null;
			ApplicationsDescriptorAction = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Applications(params Action<ApplicationPrivilegesDescriptor>[] configure)
		{
			ApplicationsValue = null;
			ApplicationsDescriptor = null;
			ApplicationsDescriptorAction = null;
			ApplicationsDescriptorActions = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Cluster(IEnumerable<string>? cluster)
		{
			ClusterValue = cluster;
			return Self;
		}

		public RoleDescriptorDescriptor Global(IEnumerable<Elastic.Clients.Elasticsearch.Security.GlobalPrivilege>? global)
		{
			GlobalDescriptor = null;
			GlobalDescriptorAction = null;
			GlobalDescriptorActions = null;
			GlobalValue = global;
			return Self;
		}

		public RoleDescriptorDescriptor Global(GlobalPrivilegeDescriptor descriptor)
		{
			GlobalValue = null;
			GlobalDescriptorAction = null;
			GlobalDescriptorActions = null;
			GlobalDescriptor = descriptor;
			return Self;
		}

		public RoleDescriptorDescriptor Global(Action<GlobalPrivilegeDescriptor> configure)
		{
			GlobalValue = null;
			GlobalDescriptor = null;
			GlobalDescriptorActions = null;
			GlobalDescriptorAction = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Global(params Action<GlobalPrivilegeDescriptor>[] configure)
		{
			GlobalValue = null;
			GlobalDescriptor = null;
			GlobalDescriptorAction = null;
			GlobalDescriptorActions = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Indices(IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices)
		{
			IndicesDescriptor = null;
			IndicesDescriptorAction = null;
			IndicesDescriptorActions = null;
			IndicesValue = indices;
			return Self;
		}

		public RoleDescriptorDescriptor Indices(IndicesPrivilegesDescriptor descriptor)
		{
			IndicesValue = null;
			IndicesDescriptorAction = null;
			IndicesDescriptorActions = null;
			IndicesDescriptor = descriptor;
			return Self;
		}

		public RoleDescriptorDescriptor Indices(Action<IndicesPrivilegesDescriptor> configure)
		{
			IndicesValue = null;
			IndicesDescriptor = null;
			IndicesDescriptorActions = null;
			IndicesDescriptorAction = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Indices(params Action<IndicesPrivilegesDescriptor>[] configure)
		{
			IndicesValue = null;
			IndicesDescriptor = null;
			IndicesDescriptorAction = null;
			IndicesDescriptorActions = configure;
			return Self;
		}

		public RoleDescriptorDescriptor Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
		{
			MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
			return Self;
		}

		public RoleDescriptorDescriptor RunAs(IEnumerable<string>? runAs)
		{
			RunAsValue = runAs;
			return Self;
		}

		public RoleDescriptorDescriptor TransientMetadata(Elastic.Clients.Elasticsearch.Security.TransientMetadataConfig? transientMetadata)
		{
			TransientMetadataDescriptor = null;
			TransientMetadataDescriptorAction = null;
			TransientMetadataValue = transientMetadata;
			return Self;
		}

		public RoleDescriptorDescriptor TransientMetadata(TransientMetadataConfigDescriptor descriptor)
		{
			TransientMetadataValue = null;
			TransientMetadataDescriptorAction = null;
			TransientMetadataDescriptor = descriptor;
			return Self;
		}

		public RoleDescriptorDescriptor TransientMetadata(Action<TransientMetadataConfigDescriptor> configure)
		{
			TransientMetadataValue = null;
			TransientMetadataDescriptor = null;
			TransientMetadataDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ApplicationsDescriptor is not null)
			{
				writer.WritePropertyName("applications");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, ApplicationsDescriptor, options);
				writer.WriteEndArray();
			}
			else if (ApplicationsDescriptorAction is not null)
			{
				writer.WritePropertyName("applications");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new ApplicationPrivilegesDescriptor(ApplicationsDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (ApplicationsDescriptorActions is not null)
			{
				writer.WritePropertyName("applications");
				writer.WriteStartArray();
				foreach (var action in ApplicationsDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new ApplicationPrivilegesDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (ApplicationsValue is not null)
			{
				writer.WritePropertyName("applications");
				JsonSerializer.Serialize(writer, ApplicationsValue, options);
			}

			if (ClusterValue is not null)
			{
				writer.WritePropertyName("cluster");
				JsonSerializer.Serialize(writer, ClusterValue, options);
			}

			if (GlobalDescriptor is not null)
			{
				writer.WritePropertyName("global");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, GlobalDescriptor, options);
				writer.WriteEndArray();
			}
			else if (GlobalDescriptorAction is not null)
			{
				writer.WritePropertyName("global");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new GlobalPrivilegeDescriptor(GlobalDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (GlobalDescriptorActions is not null)
			{
				writer.WritePropertyName("global");
				writer.WriteStartArray();
				foreach (var action in GlobalDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new GlobalPrivilegeDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (GlobalValue is not null)
			{
				writer.WritePropertyName("global");
				JsonSerializer.Serialize(writer, GlobalValue, options);
			}

			if (IndicesDescriptor is not null)
			{
				writer.WritePropertyName("indices");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, IndicesDescriptor, options);
				writer.WriteEndArray();
			}
			else if (IndicesDescriptorAction is not null)
			{
				writer.WritePropertyName("indices");
				writer.WriteStartArray();
				JsonSerializer.Serialize(writer, new IndicesPrivilegesDescriptor(IndicesDescriptorAction), options);
				writer.WriteEndArray();
			}
			else if (IndicesDescriptorActions is not null)
			{
				writer.WritePropertyName("indices");
				writer.WriteStartArray();
				foreach (var action in IndicesDescriptorActions)
				{
					JsonSerializer.Serialize(writer, new IndicesPrivilegesDescriptor(action), options);
				}

				writer.WriteEndArray();
			}
			else if (IndicesValue is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, IndicesValue, options);
			}

			if (MetadataValue is not null)
			{
				writer.WritePropertyName("metadata");
				JsonSerializer.Serialize(writer, MetadataValue, options);
			}

			if (RunAsValue is not null)
			{
				writer.WritePropertyName("run_as");
				JsonSerializer.Serialize(writer, RunAsValue, options);
			}

			if (TransientMetadataDescriptor is not null)
			{
				writer.WritePropertyName("transient_metadata");
				JsonSerializer.Serialize(writer, TransientMetadataDescriptor, options);
			}
			else if (TransientMetadataDescriptorAction is not null)
			{
				writer.WritePropertyName("transient_metadata");
				JsonSerializer.Serialize(writer, new TransientMetadataConfigDescriptor(TransientMetadataDescriptorAction), options);
			}
			else if (TransientMetadataValue is not null)
			{
				writer.WritePropertyName("transient_metadata");
				JsonSerializer.Serialize(writer, TransientMetadataValue, options);
			}

			writer.WriteEndObject();
		}
	}
}