// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class Access
{
	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster replication.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("replication")]
	public ICollection<Elastic.Clients.Elasticsearch.Security.ReplicationAccess>? Replication { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster search.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("search")]
	public ICollection<Elastic.Clients.Elasticsearch.Security.SearchAccess>? Search { get; set; }
}

public sealed partial class AccessDescriptor<TDocument> : SerializableDescriptor<AccessDescriptor<TDocument>>
{
	internal AccessDescriptor(Action<AccessDescriptor<TDocument>> configure) => configure.Invoke(this);

	public AccessDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ReplicationAccess>? ReplicationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor ReplicationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor> ReplicationDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor>[] ReplicationDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.SearchAccess>? SearchValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument> SearchDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>> SearchDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>>[] SearchDescriptorActions { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster replication.
	/// </para>
	/// </summary>
	public AccessDescriptor<TDocument> Replication(ICollection<Elastic.Clients.Elasticsearch.Security.ReplicationAccess>? replication)
	{
		ReplicationDescriptor = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = null;
		ReplicationValue = replication;
		return Self;
	}

	public AccessDescriptor<TDocument> Replication(Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor descriptor)
	{
		ReplicationValue = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = null;
		ReplicationDescriptor = descriptor;
		return Self;
	}

	public AccessDescriptor<TDocument> Replication(Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor> configure)
	{
		ReplicationValue = null;
		ReplicationDescriptor = null;
		ReplicationDescriptorActions = null;
		ReplicationDescriptorAction = configure;
		return Self;
	}

	public AccessDescriptor<TDocument> Replication(params Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor>[] configure)
	{
		ReplicationValue = null;
		ReplicationDescriptor = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster search.
	/// </para>
	/// </summary>
	public AccessDescriptor<TDocument> Search(ICollection<Elastic.Clients.Elasticsearch.Security.SearchAccess>? search)
	{
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = null;
		SearchValue = search;
		return Self;
	}

	public AccessDescriptor<TDocument> Search(Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument> descriptor)
	{
		SearchValue = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = null;
		SearchDescriptor = descriptor;
		return Self;
	}

	public AccessDescriptor<TDocument> Search(Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>> configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorActions = null;
		SearchDescriptorAction = configure;
		return Self;
	}

	public AccessDescriptor<TDocument> Search(params Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>>[] configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ReplicationDescriptor is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ReplicationDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ReplicationDescriptorAction is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor(ReplicationDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ReplicationDescriptorActions is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			foreach (var action in ReplicationDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ReplicationValue is not null)
		{
			writer.WritePropertyName("replication");
			JsonSerializer.Serialize(writer, ReplicationValue, options);
		}

		if (SearchDescriptor is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, SearchDescriptor, options);
			writer.WriteEndArray();
		}
		else if (SearchDescriptorAction is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>(SearchDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (SearchDescriptorActions is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			foreach (var action in SearchDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (SearchValue is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class AccessDescriptor : SerializableDescriptor<AccessDescriptor>
{
	internal AccessDescriptor(Action<AccessDescriptor> configure) => configure.Invoke(this);

	public AccessDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.Security.ReplicationAccess>? ReplicationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor ReplicationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor> ReplicationDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor>[] ReplicationDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Security.SearchAccess>? SearchValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor SearchDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor> SearchDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor>[] SearchDescriptorActions { get; set; }

	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster replication.
	/// </para>
	/// </summary>
	public AccessDescriptor Replication(ICollection<Elastic.Clients.Elasticsearch.Security.ReplicationAccess>? replication)
	{
		ReplicationDescriptor = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = null;
		ReplicationValue = replication;
		return Self;
	}

	public AccessDescriptor Replication(Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor descriptor)
	{
		ReplicationValue = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = null;
		ReplicationDescriptor = descriptor;
		return Self;
	}

	public AccessDescriptor Replication(Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor> configure)
	{
		ReplicationValue = null;
		ReplicationDescriptor = null;
		ReplicationDescriptorActions = null;
		ReplicationDescriptorAction = configure;
		return Self;
	}

	public AccessDescriptor Replication(params Action<Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor>[] configure)
	{
		ReplicationValue = null;
		ReplicationDescriptor = null;
		ReplicationDescriptorAction = null;
		ReplicationDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of indices permission entries for cross-cluster search.
	/// </para>
	/// </summary>
	public AccessDescriptor Search(ICollection<Elastic.Clients.Elasticsearch.Security.SearchAccess>? search)
	{
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = null;
		SearchValue = search;
		return Self;
	}

	public AccessDescriptor Search(Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor descriptor)
	{
		SearchValue = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = null;
		SearchDescriptor = descriptor;
		return Self;
	}

	public AccessDescriptor Search(Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor> configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorActions = null;
		SearchDescriptorAction = configure;
		return Self;
	}

	public AccessDescriptor Search(params Action<Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor>[] configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchDescriptorActions = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ReplicationDescriptor is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ReplicationDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ReplicationDescriptorAction is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor(ReplicationDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ReplicationDescriptorActions is not null)
		{
			writer.WritePropertyName("replication");
			writer.WriteStartArray();
			foreach (var action in ReplicationDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.ReplicationAccessDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ReplicationValue is not null)
		{
			writer.WritePropertyName("replication");
			JsonSerializer.Serialize(writer, ReplicationValue, options);
		}

		if (SearchDescriptor is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, SearchDescriptor, options);
			writer.WriteEndArray();
		}
		else if (SearchDescriptorAction is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor(SearchDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (SearchDescriptorActions is not null)
		{
			writer.WritePropertyName("search");
			writer.WriteStartArray();
			foreach (var action in SearchDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.SearchAccessDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (SearchValue is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchValue, options);
		}

		writer.WriteEndObject();
	}
}