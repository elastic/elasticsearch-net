// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class FieldSecurityConverter : System.Text.Json.Serialization.JsonConverter<FieldSecurity>
{
	private static readonly System.Text.Json.JsonEncodedText PropExcept = System.Text.Json.JsonEncodedText.Encode("except");
	private static readonly System.Text.Json.JsonEncodedText PropGrant = System.Text.Json.JsonEncodedText.Encode("grant");

	public override FieldSecurity Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propExcept = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propGrant = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propExcept.TryReadProperty(ref reader, options, PropExcept, static Elastic.Clients.Elasticsearch.Fields? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, typeof(SingleOrManyFieldsMarker))))
			{
				continue;
			}

			if (propGrant.TryReadProperty(ref reader, options, PropGrant, static Elastic.Clients.Elasticsearch.Fields? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, typeof(SingleOrManyFieldsMarker))))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new FieldSecurity
		{
			Except = propExcept.Value
,
			Grant = propGrant.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FieldSecurity value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropExcept, value.Except, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields? v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, v, typeof(SingleOrManyFieldsMarker)));
		writer.WriteProperty(options, PropGrant, value.Grant, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields? v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, v, typeof(SingleOrManyFieldsMarker)));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(FieldSecurityConverter))]
public sealed partial class FieldSecurity
{
	public Elastic.Clients.Elasticsearch.Fields? Except { get; set; }
	public Elastic.Clients.Elasticsearch.Fields? Grant { get; set; }
}

public sealed partial class FieldSecurityDescriptor<TDocument> : SerializableDescriptor<FieldSecurityDescriptor<TDocument>>
{
	internal FieldSecurityDescriptor(Action<FieldSecurityDescriptor<TDocument>> configure) => configure.Invoke(this);

	public FieldSecurityDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields? ExceptValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? GrantValue { get; set; }

	public FieldSecurityDescriptor<TDocument> Except(Elastic.Clients.Elasticsearch.Fields? except)
	{
		ExceptValue = except;
		return Self;
	}

	public FieldSecurityDescriptor<TDocument> Grant(Elastic.Clients.Elasticsearch.Fields? grant)
	{
		GrantValue = grant;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ExceptValue is not null)
		{
			writer.WritePropertyName("except");
			JsonSerializer.Serialize(writer, ExceptValue, options);
		}

		if (GrantValue is not null)
		{
			writer.WritePropertyName("grant");
			JsonSerializer.Serialize(writer, GrantValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class FieldSecurityDescriptor : SerializableDescriptor<FieldSecurityDescriptor>
{
	internal FieldSecurityDescriptor(Action<FieldSecurityDescriptor> configure) => configure.Invoke(this);

	public FieldSecurityDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields? ExceptValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? GrantValue { get; set; }

	public FieldSecurityDescriptor Except(Elastic.Clients.Elasticsearch.Fields? except)
	{
		ExceptValue = except;
		return Self;
	}

	public FieldSecurityDescriptor Grant(Elastic.Clients.Elasticsearch.Fields? grant)
	{
		GrantValue = grant;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ExceptValue is not null)
		{
			writer.WritePropertyName("except");
			JsonSerializer.Serialize(writer, ExceptValue, options);
		}

		if (GrantValue is not null)
		{
			writer.WritePropertyName("grant");
			JsonSerializer.Serialize(writer, GrantValue, options);
		}

		writer.WriteEndObject();
	}
}