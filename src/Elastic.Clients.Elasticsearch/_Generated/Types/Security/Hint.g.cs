// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

internal sealed partial class HintConverter : System.Text.Json.Serialization.JsonConverter<Hint>
{
	private static readonly System.Text.Json.JsonEncodedText PropLabels = System.Text.Json.JsonEncodedText.Encode("labels");
	private static readonly System.Text.Json.JsonEncodedText PropUids = System.Text.Json.JsonEncodedText.Encode("uids");

	public override Hint Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IDictionary<string, Union<string, ICollection<string>>>?> propLabels = default;
		LocalJsonValue<ICollection<string>?> propUids = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propLabels.TryReadProperty(ref reader, options, PropLabels, static IDictionary<string, Union<string, ICollection<string>>>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Union<string, ICollection<string>>>(o, null, static Union<string, ICollection<string>> (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadUnionValue<string, ICollection<string>>(o, static (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => JsonUnionSelector.ByTokenType(ref r, o, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.String, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.StartArray), null, static ICollection<string> (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)!)!)))
			{
				continue;
			}

			if (propUids.TryReadProperty(ref reader, options, PropUids, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<string>(o, null)))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Hint
		{
			Labels = propLabels.Value
,
			Uids = propUids.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Hint value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropLabels, value.Labels, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, Union<string, ICollection<string>>>? v) => w.WriteDictionaryValue<string, Union<string, ICollection<string>>>(o, v, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Union<string, ICollection<string>> v) => w.WriteUnionValue<string, ICollection<string>>(o, v, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string> v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null))));
		writer.WriteProperty(options, PropUids, value.Uids, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteCollectionValue<string>(o, v, null));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(HintConverter))]
public sealed partial class Hint
{
	/// <summary>
	/// <para>
	/// A single key-value pair to match against the labels section
	/// of a profile. A profile is considered matching if it matches
	/// at least one of the strings.
	/// </para>
	/// </summary>
	public IDictionary<string, Union<string, ICollection<string>>>? Labels { get; set; }

	/// <summary>
	/// <para>
	/// A list of Profile UIDs to match against.
	/// </para>
	/// </summary>
	public ICollection<string>? Uids { get; set; }
}

public sealed partial class HintDescriptor : SerializableDescriptor<HintDescriptor>
{
	internal HintDescriptor(Action<HintDescriptor> configure) => configure.Invoke(this);

	public HintDescriptor() : base()
	{
	}

	private IDictionary<string, Union<string, ICollection<string>>>? LabelsValue { get; set; }
	private ICollection<string>? UidsValue { get; set; }

	/// <summary>
	/// <para>
	/// A single key-value pair to match against the labels section
	/// of a profile. A profile is considered matching if it matches
	/// at least one of the strings.
	/// </para>
	/// </summary>
	public HintDescriptor Labels(Func<FluentDictionary<string, Union<string, ICollection<string>>>, FluentDictionary<string, Union<string, ICollection<string>>>> selector)
	{
		LabelsValue = selector?.Invoke(new FluentDictionary<string, Union<string, ICollection<string>>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of Profile UIDs to match against.
	/// </para>
	/// </summary>
	public HintDescriptor Uids(ICollection<string>? uids)
	{
		UidsValue = uids;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (LabelsValue is not null)
		{
			writer.WritePropertyName("labels");
			JsonSerializer.Serialize(writer, LabelsValue, options);
		}

		if (UidsValue is not null)
		{
			writer.WritePropertyName("uids");
			JsonSerializer.Serialize(writer, UidsValue, options);
		}

		writer.WriteEndObject();
	}
}