// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.LicenseManagement;

internal sealed partial class LicenseConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.LicenseManagement.License>
{
	private static readonly System.Text.Json.JsonEncodedText PropExpiryDateInMillis = System.Text.Json.JsonEncodedText.Encode("expiry_date_in_millis");
	private static readonly System.Text.Json.JsonEncodedText PropIssueDateInMillis = System.Text.Json.JsonEncodedText.Encode("issue_date_in_millis");
	private static readonly System.Text.Json.JsonEncodedText PropIssuedTo = System.Text.Json.JsonEncodedText.Encode("issued_to");
	private static readonly System.Text.Json.JsonEncodedText PropIssuer = System.Text.Json.JsonEncodedText.Encode("issuer");
	private static readonly System.Text.Json.JsonEncodedText PropMaxNodes = System.Text.Json.JsonEncodedText.Encode("max_nodes");
	private static readonly System.Text.Json.JsonEncodedText PropMaxResourceUnits = System.Text.Json.JsonEncodedText.Encode("max_resource_units");
	private static readonly System.Text.Json.JsonEncodedText PropSignature = System.Text.Json.JsonEncodedText.Encode("signature");
	private static readonly System.Text.Json.JsonEncodedText PropStartDateInMillis = System.Text.Json.JsonEncodedText.Encode("start_date_in_millis");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");
	private static readonly System.Text.Json.JsonEncodedText PropUid = System.Text.Json.JsonEncodedText.Encode("uid");

	public override Elastic.Clients.Elasticsearch.LicenseManagement.License Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<System.DateTimeOffset> propExpiryDateInMillis = default;
		LocalJsonValue<System.DateTimeOffset> propIssueDateInMillis = default;
		LocalJsonValue<string> propIssuedTo = default;
		LocalJsonValue<string> propIssuer = default;
		LocalJsonValue<long?> propMaxNodes = default;
		LocalJsonValue<long?> propMaxResourceUnits = default;
		LocalJsonValue<string> propSignature = default;
		LocalJsonValue<System.DateTimeOffset?> propStartDateInMillis = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.LicenseManagement.LicenseType> propType = default;
		LocalJsonValue<string> propUid = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propExpiryDateInMillis.TryReadProperty(ref reader, options, PropExpiryDateInMillis, static System.DateTimeOffset (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<System.DateTimeOffset>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker))))
			{
				continue;
			}

			if (propIssueDateInMillis.TryReadProperty(ref reader, options, PropIssueDateInMillis, static System.DateTimeOffset (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<System.DateTimeOffset>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker))))
			{
				continue;
			}

			if (propIssuedTo.TryReadProperty(ref reader, options, PropIssuedTo, null))
			{
				continue;
			}

			if (propIssuer.TryReadProperty(ref reader, options, PropIssuer, null))
			{
				continue;
			}

			if (propMaxNodes.TryReadProperty(ref reader, options, PropMaxNodes, static long? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<long>(o)))
			{
				continue;
			}

			if (propMaxResourceUnits.TryReadProperty(ref reader, options, PropMaxResourceUnits, static long? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<long>(o)))
			{
				continue;
			}

			if (propSignature.TryReadProperty(ref reader, options, PropSignature, null))
			{
				continue;
			}

			if (propStartDateInMillis.TryReadProperty(ref reader, options, PropStartDateInMillis, static System.DateTimeOffset? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValueEx<System.DateTimeOffset>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker))))
			{
				continue;
			}

			if (propType.TryReadProperty(ref reader, options, PropType, null))
			{
				continue;
			}

			if (propUid.TryReadProperty(ref reader, options, PropUid, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.LicenseManagement.License(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			ExpiryDateInMillis = propExpiryDateInMillis.Value,
			IssueDateInMillis = propIssueDateInMillis.Value,
			IssuedTo = propIssuedTo.Value,
			Issuer = propIssuer.Value,
			MaxNodes = propMaxNodes.Value,
			MaxResourceUnits = propMaxResourceUnits.Value,
			Signature = propSignature.Value,
			StartDateInMillis = propStartDateInMillis.Value,
			Type = propType.Value,
			Uid = propUid.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.LicenseManagement.License value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropExpiryDateInMillis, value.ExpiryDateInMillis, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.DateTimeOffset v) => w.WriteValueEx<System.DateTimeOffset>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker)));
		writer.WriteProperty(options, PropIssueDateInMillis, value.IssueDateInMillis, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.DateTimeOffset v) => w.WriteValueEx<System.DateTimeOffset>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker)));
		writer.WriteProperty(options, PropIssuedTo, value.IssuedTo, null, null);
		writer.WriteProperty(options, PropIssuer, value.Issuer, null, null);
		writer.WriteProperty(options, PropMaxNodes, value.MaxNodes, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, long? v) => w.WriteNullableValue<long>(o, v));
		writer.WriteProperty(options, PropMaxResourceUnits, value.MaxResourceUnits, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, long? v) => w.WriteNullableValue<long>(o, v));
		writer.WriteProperty(options, PropSignature, value.Signature, null, null);
		writer.WriteProperty(options, PropStartDateInMillis, value.StartDateInMillis, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.DateTimeOffset? v) => w.WriteNullableValueEx<System.DateTimeOffset>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.DateTimeMillisMarker)));
		writer.WriteProperty(options, PropType, value.Type, null, null);
		writer.WriteProperty(options, PropUid, value.Uid, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.LicenseManagement.LicenseConverter))]
public sealed partial class License
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public License(System.DateTimeOffset expiryDateInMillis, System.DateTimeOffset issueDateInMillis, string issuedTo, string issuer, string signature, Elastic.Clients.Elasticsearch.LicenseManagement.LicenseType type, string uid)
	{
		ExpiryDateInMillis = expiryDateInMillis;
		IssueDateInMillis = issueDateInMillis;
		IssuedTo = issuedTo;
		Issuer = issuer;
		Signature = signature;
		Type = type;
		Uid = uid;
	}
#if NET7_0_OR_GREATER
	public License()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public License()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal License(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	public
#if NET7_0_OR_GREATER
	required
#endif
	System.DateTimeOffset ExpiryDateInMillis { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	System.DateTimeOffset IssueDateInMillis { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	string IssuedTo { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Issuer { get; set; }
	public long? MaxNodes { get; set; }
	public long? MaxResourceUnits { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Signature { get; set; }
	public System.DateTimeOffset? StartDateInMillis { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.LicenseManagement.LicenseType Type { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Uid { get; set; }
}

public readonly partial struct LicenseDescriptor
{
	internal Elastic.Clients.Elasticsearch.LicenseManagement.License Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public LicenseDescriptor(Elastic.Clients.Elasticsearch.LicenseManagement.License instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public LicenseDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.LicenseManagement.License(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor(Elastic.Clients.Elasticsearch.LicenseManagement.License instance) => new Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.LicenseManagement.License(Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor descriptor) => descriptor.Instance;

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor ExpiryDateInMillis(System.DateTimeOffset value)
	{
		Instance.ExpiryDateInMillis = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor IssueDateInMillis(System.DateTimeOffset value)
	{
		Instance.IssueDateInMillis = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor IssuedTo(string value)
	{
		Instance.IssuedTo = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor Issuer(string value)
	{
		Instance.Issuer = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor MaxNodes(long? value)
	{
		Instance.MaxNodes = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor MaxResourceUnits(long? value)
	{
		Instance.MaxResourceUnits = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor Signature(string value)
	{
		Instance.Signature = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor StartDateInMillis(System.DateTimeOffset? value)
	{
		Instance.StartDateInMillis = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor Type(Elastic.Clients.Elasticsearch.LicenseManagement.LicenseType value)
	{
		Instance.Type = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor Uid(string value)
	{
		Instance.Uid = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.LicenseManagement.License Build(System.Action<Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.LicenseManagement.LicenseDescriptor(new Elastic.Clients.Elasticsearch.LicenseManagement.License(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}