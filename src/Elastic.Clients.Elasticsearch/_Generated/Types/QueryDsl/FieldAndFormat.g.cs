// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

internal sealed partial class FieldAndFormatConverter : System.Text.Json.Serialization.JsonConverter<FieldAndFormat>
{
	private static readonly System.Text.Json.JsonEncodedText PropField = System.Text.Json.JsonEncodedText.Encode("field");
	private static readonly System.Text.Json.JsonEncodedText PropFormat = System.Text.Json.JsonEncodedText.Encode("format");
	private static readonly System.Text.Json.JsonEncodedText PropIncludeUnmapped = System.Text.Json.JsonEncodedText.Encode("include_unmapped");

	public override FieldAndFormat Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.TokenType is not System.Text.Json.JsonTokenType.StartObject)
		{
			var value = reader.ReadValue<Elastic.Clients.Elasticsearch.Field>(options, null);
			return new FieldAndFormat { Field = value };
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field> propField = default;
		LocalJsonValue<string?> propFormat = default;
		LocalJsonValue<bool?> propIncludeUnmapped = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propField.TryReadProperty(ref reader, options, PropField, null))
			{
				continue;
			}

			if (propFormat.TryReadProperty(ref reader, options, PropFormat, null))
			{
				continue;
			}

			if (propIncludeUnmapped.TryReadProperty(ref reader, options, PropIncludeUnmapped, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new FieldAndFormat
		{
			Field = propField.Value
,
			Format = propFormat.Value
,
			IncludeUnmapped = propIncludeUnmapped.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FieldAndFormat value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropField, value.Field, null, null);
		writer.WriteProperty(options, PropFormat, value.Format, null, null);
		writer.WriteProperty(options, PropIncludeUnmapped, value.IncludeUnmapped, null, null);
		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// A reference to a field with formatting instructions on how to return the value
/// </para>
/// </summary>
[JsonConverter(typeof(FieldAndFormatConverter))]
public sealed partial class FieldAndFormat
{
	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field Field { get; set; }

	/// <summary>
	/// <para>
	/// Format in which the values are returned.
	/// </para>
	/// </summary>
	public string? Format { get; set; }
	public bool? IncludeUnmapped { get; set; }
}

/// <summary>
/// <para>
/// A reference to a field with formatting instructions on how to return the value
/// </para>
/// </summary>
public sealed partial class FieldAndFormatDescriptor<TDocument> : SerializableDescriptor<FieldAndFormatDescriptor<TDocument>>
{
	internal FieldAndFormatDescriptor(Action<FieldAndFormatDescriptor<TDocument>> configure) => configure.Invoke(this);

	public FieldAndFormatDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Field FieldValue { get; set; }
	private string? FormatValue { get; set; }
	private bool? IncludeUnmappedValue { get; set; }

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor<TDocument> Field(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Format in which the values are returned.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor<TDocument> Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	public FieldAndFormatDescriptor<TDocument> IncludeUnmapped(bool? includeUnmapped = true)
	{
		IncludeUnmappedValue = includeUnmapped;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("field");
		JsonSerializer.Serialize(writer, FieldValue, options);
		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (IncludeUnmappedValue.HasValue)
		{
			writer.WritePropertyName("include_unmapped");
			writer.WriteBooleanValue(IncludeUnmappedValue.Value);
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// A reference to a field with formatting instructions on how to return the value
/// </para>
/// </summary>
public sealed partial class FieldAndFormatDescriptor : SerializableDescriptor<FieldAndFormatDescriptor>
{
	internal FieldAndFormatDescriptor(Action<FieldAndFormatDescriptor> configure) => configure.Invoke(this);

	public FieldAndFormatDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Field FieldValue { get; set; }
	private string? FormatValue { get; set; }
	private bool? IncludeUnmappedValue { get; set; }

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor Field(Elastic.Clients.Elasticsearch.Field field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Wildcard pattern. The request returns values for field names matching this pattern.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Format in which the values are returned.
	/// </para>
	/// </summary>
	public FieldAndFormatDescriptor Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	public FieldAndFormatDescriptor IncludeUnmapped(bool? includeUnmapped = true)
	{
		IncludeUnmappedValue = includeUnmapped;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("field");
		JsonSerializer.Serialize(writer, FieldValue, options);
		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (IncludeUnmappedValue.HasValue)
		{
			writer.WritePropertyName("include_unmapped");
			writer.WriteBooleanValue(IncludeUnmappedValue.Value);
		}

		writer.WriteEndObject();
	}
}