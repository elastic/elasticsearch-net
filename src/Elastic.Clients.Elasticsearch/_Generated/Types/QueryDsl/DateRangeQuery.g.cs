// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public partial class DateRangeQuery : RangeQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public Elastic.Clients.Elasticsearch.DateMath? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("gt")]
		public Elastic.Clients.Elasticsearch.DateMath? Gt { get; set; }

		[JsonInclude]
		[JsonPropertyName("gte")]
		public Elastic.Clients.Elasticsearch.DateMath? Gte { get; set; }

		[JsonInclude]
		[JsonPropertyName("lt")]
		public Elastic.Clients.Elasticsearch.DateMath? Lt { get; set; }

		[JsonInclude]
		[JsonPropertyName("lte")]
		public Elastic.Clients.Elasticsearch.DateMath? Lte { get; set; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public Elastic.Clients.Elasticsearch.DateMath? To { get; set; }
	}

	public sealed partial class DateRangeQueryDescriptor : SerializableDescriptorBase<DateRangeQueryDescriptor>
	{
		internal DateRangeQueryDescriptor(Action<DateRangeQueryDescriptor> configure) => configure.Invoke(this);
		public DateRangeQueryDescriptor() : base()
		{
		}

		private string? QueryNameValue { get; set; }

		private float? BoostValue { get; set; }

		private string? FormatValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? FromValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? GtValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? GteValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? LtValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? LteValue { get; set; }

		private Elastic.Clients.Elasticsearch.QueryDsl.RangeRelation? RelationValue { get; set; }

		private string? TimeZoneValue { get; set; }

		private Elastic.Clients.Elasticsearch.DateMath? ToValue { get; set; }

		public DateRangeQueryDescriptor QueryName(string? queryName)
		{
			QueryNameValue = queryName;
			return Self;
		}

		public DateRangeQueryDescriptor Boost(float? boost)
		{
			BoostValue = boost;
			return Self;
		}

		public DateRangeQueryDescriptor Format(string? format)
		{
			FormatValue = format;
			return Self;
		}

		public DateRangeQueryDescriptor From(Elastic.Clients.Elasticsearch.DateMath? from)
		{
			FromValue = from;
			return Self;
		}

		public DateRangeQueryDescriptor Gt(Elastic.Clients.Elasticsearch.DateMath? gt)
		{
			GtValue = gt;
			return Self;
		}

		public DateRangeQueryDescriptor Gte(Elastic.Clients.Elasticsearch.DateMath? gte)
		{
			GteValue = gte;
			return Self;
		}

		public DateRangeQueryDescriptor Lt(Elastic.Clients.Elasticsearch.DateMath? lt)
		{
			LtValue = lt;
			return Self;
		}

		public DateRangeQueryDescriptor Lte(Elastic.Clients.Elasticsearch.DateMath? lte)
		{
			LteValue = lte;
			return Self;
		}

		public DateRangeQueryDescriptor Relation(Elastic.Clients.Elasticsearch.QueryDsl.RangeRelation? relation)
		{
			RelationValue = relation;
			return Self;
		}

		public DateRangeQueryDescriptor TimeZone(string? timeZone)
		{
			TimeZoneValue = timeZone;
			return Self;
		}

		public DateRangeQueryDescriptor To(Elastic.Clients.Elasticsearch.DateMath? to)
		{
			ToValue = to;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(QueryNameValue))
			{
				writer.WritePropertyName("_name");
				writer.WriteStringValue(QueryNameValue);
			}

			if (BoostValue.HasValue)
			{
				writer.WritePropertyName("boost");
				writer.WriteNumberValue(BoostValue.Value);
			}

			if (FormatValue is not null)
			{
				writer.WritePropertyName("format");
				JsonSerializer.Serialize(writer, FormatValue, options);
			}

			if (FromValue is not null)
			{
				writer.WritePropertyName("from");
				JsonSerializer.Serialize(writer, FromValue, options);
			}

			if (GtValue is not null)
			{
				writer.WritePropertyName("gt");
				JsonSerializer.Serialize(writer, GtValue, options);
			}

			if (GteValue is not null)
			{
				writer.WritePropertyName("gte");
				JsonSerializer.Serialize(writer, GteValue, options);
			}

			if (LtValue is not null)
			{
				writer.WritePropertyName("lt");
				JsonSerializer.Serialize(writer, LtValue, options);
			}

			if (LteValue is not null)
			{
				writer.WritePropertyName("lte");
				JsonSerializer.Serialize(writer, LteValue, options);
			}

			if (RelationValue is not null)
			{
				writer.WritePropertyName("relation");
				JsonSerializer.Serialize(writer, RelationValue, options);
			}

			if (TimeZoneValue is not null)
			{
				writer.WritePropertyName("time_zone");
				JsonSerializer.Serialize(writer, TimeZoneValue, options);
			}

			if (ToValue is not null)
			{
				writer.WritePropertyName("to");
				JsonSerializer.Serialize(writer, ToValue, options);
			}

			writer.WriteEndObject();
		}
	}
}