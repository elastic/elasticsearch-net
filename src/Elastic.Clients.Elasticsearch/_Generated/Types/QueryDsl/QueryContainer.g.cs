// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public interface IQueryContainerVariant
	{
		string QueryContainerVariantName { get; }
	}

	[JsonConverter(typeof(QueryContainerConverter))]
	public partial class QueryContainer : IContainer
	{
		public QueryContainer(IQueryContainerVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal IQueryContainerVariant Variant { get; }
	}

	internal sealed class QueryContainerConverter : JsonConverter<QueryContainer>
	{
		public override QueryContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var readerCopy = reader;
			readerCopy.Read();
			if (readerCopy.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = readerCopy.GetString();
			if (propertyName == "bool")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.BoolQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "boosting")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.BoostingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "combined_fields")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "constant_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ConstantScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "dis_max")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.DisMaxQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "exists")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ExistsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "function_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "fuzzy")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.FuzzyQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_bounding_box")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoBoundingBoxQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_distance")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoDistanceQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_polygon")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoPolygonQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_shape")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoShapeQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "has_child")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.HasChildQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "has_parent")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.HasParentQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "ids")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.IdsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "intervals")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.IntervalsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_all")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchAllQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_bool_prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchBoolPrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_none")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchNoneQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_phrase")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchPhraseQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_phrase_prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchPhrasePrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "more_like_this")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MoreLikeThisQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "multi_match")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MultiMatchQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "nested")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.NestedQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "parent_id")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ParentIdQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "percolate")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PercolateQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "pinned")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PinnedQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "query_string")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "rank_feature")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "regexp")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.RegexpQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "script")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ScriptQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "script_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ScriptScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "shape")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ShapeQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "simple_query_string")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_containing")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanContainingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "field_masking_span")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanFieldMaskingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_first")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanFirstQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_multi")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanMultiTermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_near")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanNearQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_not")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanNotQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_or")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanOrQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_term")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanTermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_within")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanWithinQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "term")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "terms")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "terms_set")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermsSetQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "wildcard")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.WildcardQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, QueryContainer value, JsonSerializerOptions options)
		{
			 writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.QueryContainerVariantName); 
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.QueryDsl.BoolQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.BoostingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ConstantScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.DisMaxQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ExistsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.FuzzyQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoBoundingBoxQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoDistanceQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoPolygonQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoShapeQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.HasChildQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.HasParentQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.IdsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.IntervalsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchAllQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchBoolPrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchNoneQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchPhraseQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchPhrasePrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MoreLikeThisQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MultiMatchQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.NestedQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ParentIdQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PercolateQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PinnedQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.RegexpQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ScriptQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ScriptScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ShapeQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanContainingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanFieldMaskingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanFirstQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanMultiTermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanNearQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanNotQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanOrQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanTermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanWithinQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermsSetQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.WildcardQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class QueryContainerDescriptor<T> : DescriptorBase<QueryContainerDescriptor<T>>
	{
		public QueryContainerDescriptor()
		{
		}

		internal QueryContainerDescriptor(Action<QueryContainerDescriptor<T>> configure) => configure.Invoke(this);
		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal QueryContainer Container { get; private set; }

		internal object ContainerVariantDescriptorAction { get; private set; }

		private void Set(object descriptorAction, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainerVariantDescriptorAction = descriptorAction;
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		private void Set(IQueryContainerVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new QueryContainer(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		public void Bool(BoolQuery variant) => Set(variant, "bool");
		public void Bool(Action<BoolQueryDescriptor<T>> configure) => Set(configure, "bool");
		public void Boosting(BoostingQuery variant) => Set(variant, "boosting");
		public void Boosting(Action<BoostingQueryDescriptor<T>> configure) => Set(configure, "boosting");
		public void CombinedFields(CombinedFieldsQuery variant) => Set(variant, "combined_fields");
		public void CombinedFields(Action<CombinedFieldsQueryDescriptor<T>> configure) => Set(configure, "combined_fields");
		public void ConstantScore(ConstantScoreQuery variant) => Set(variant, "constant_score");
		public void ConstantScore(Action<ConstantScoreQueryDescriptor<T>> configure) => Set(configure, "constant_score");
		public void DisMax(DisMaxQuery variant) => Set(variant, "dis_max");
		public void DisMax(Action<DisMaxQueryDescriptor> configure) => Set(configure, "dis_max");
		public void Exists(ExistsQuery variant) => Set(variant, "exists");
		public void Exists(Action<ExistsQueryDescriptor<T>> configure) => Set(configure, "exists");
		public void FunctionScore(FunctionScoreQuery variant) => Set(variant, "function_score");
		public void FunctionScore(Action<FunctionScoreQueryDescriptor<T>> configure) => Set(configure, "function_score");
		public void Fuzzy(FuzzyQuery variant) => Set(variant, "fuzzy");
		public void Fuzzy(Action<FuzzyQueryDescriptor<T>> configure) => Set(configure, "fuzzy");
		public void GeoBoundingBox(GeoBoundingBoxQuery variant) => Set(variant, "geo_bounding_box");
		public void GeoBoundingBox(Action<GeoBoundingBoxQueryDescriptor> configure) => Set(configure, "geo_bounding_box");
		public void GeoDistance(GeoDistanceQuery variant) => Set(variant, "geo_distance");
		public void GeoDistance(Action<GeoDistanceQueryDescriptor> configure) => Set(configure, "geo_distance");
		public void GeoPolygon(GeoPolygonQuery variant) => Set(variant, "geo_polygon");
		public void GeoPolygon(Action<GeoPolygonQueryDescriptor> configure) => Set(configure, "geo_polygon");
		public void GeoShape(GeoShapeQuery variant) => Set(variant, "geo_shape");
		public void GeoShape(Action<GeoShapeQueryDescriptor> configure) => Set(configure, "geo_shape");
		public void HasChild(HasChildQuery variant) => Set(variant, "has_child");
		public void HasChild(Action<HasChildQueryDescriptor<T>> configure) => Set(configure, "has_child");
		public void HasParent(HasParentQuery variant) => Set(variant, "has_parent");
		public void HasParent(Action<HasParentQueryDescriptor<T>> configure) => Set(configure, "has_parent");
		public void Ids(IdsQuery variant) => Set(variant, "ids");
		public void Ids(Action<IdsQueryDescriptor> configure) => Set(configure, "ids");
		public void Intervals(IntervalsQuery variant) => Set(variant, "intervals");
		public void Intervals(Action<IntervalsQueryDescriptor<T>> configure) => Set(configure, "intervals");
		public void Match(MatchQuery variant) => Set(variant, "match");
		public void Match(Action<MatchQueryDescriptor<T>> configure) => Set(configure, "match");
		public void MatchAll(MatchAllQuery variant) => Set(variant, "match_all");
		public void MatchAll(Action<MatchAllQueryDescriptor> configure) => Set(configure, "match_all");
		public void MatchBoolPrefix(MatchBoolPrefixQuery variant) => Set(variant, "match_bool_prefix");
		public void MatchBoolPrefix(Action<MatchBoolPrefixQueryDescriptor<T>> configure) => Set(configure, "match_bool_prefix");
		public void MatchNone(MatchNoneQuery variant) => Set(variant, "match_none");
		public void MatchNone(Action<MatchNoneQueryDescriptor> configure) => Set(configure, "match_none");
		public void MatchPhrase(MatchPhraseQuery variant) => Set(variant, "match_phrase");
		public void MatchPhrase(Action<MatchPhraseQueryDescriptor<T>> configure) => Set(configure, "match_phrase");
		public void MatchPhrasePrefix(MatchPhrasePrefixQuery variant) => Set(variant, "match_phrase_prefix");
		public void MatchPhrasePrefix(Action<MatchPhrasePrefixQueryDescriptor<T>> configure) => Set(configure, "match_phrase_prefix");
		public void MoreLikeThis(MoreLikeThisQuery variant) => Set(variant, "more_like_this");
		public void MoreLikeThis(Action<MoreLikeThisQueryDescriptor<T>> configure) => Set(configure, "more_like_this");
		public void MultiMatch(MultiMatchQuery variant) => Set(variant, "multi_match");
		public void MultiMatch(Action<MultiMatchQueryDescriptor<T>> configure) => Set(configure, "multi_match");
		public void Nested(NestedQuery variant) => Set(variant, "nested");
		public void Nested(Action<NestedQueryDescriptor<T>> configure) => Set(configure, "nested");
		public void ParentId(ParentIdQuery variant) => Set(variant, "parent_id");
		public void ParentId(Action<ParentIdQueryDescriptor> configure) => Set(configure, "parent_id");
		public void Percolate(PercolateQuery variant) => Set(variant, "percolate");
		public void Percolate(Action<PercolateQueryDescriptor<T>> configure) => Set(configure, "percolate");
		public void Pinned(PinnedQuery variant) => Set(variant, "pinned");
		public void Pinned(Action<PinnedQueryDescriptor<T>> configure) => Set(configure, "pinned");
		public void Prefix(PrefixQuery variant) => Set(variant, "prefix");
		public void Prefix(Action<PrefixQueryDescriptor<T>> configure) => Set(configure, "prefix");
		public void QueryString(QueryStringQuery variant) => Set(variant, "query_string");
		public void QueryString(Action<QueryStringQueryDescriptor<T>> configure) => Set(configure, "query_string");
		public void RankFeature(RankFeatureQuery variant) => Set(variant, "rank_feature");
		public void RankFeature(Action<RankFeatureQueryDescriptor<T>> configure) => Set(configure, "rank_feature");
		public void Regexp(RegexpQuery variant) => Set(variant, "regexp");
		public void Regexp(Action<RegexpQueryDescriptor<T>> configure) => Set(configure, "regexp");
		public void Script(ScriptQuery variant) => Set(variant, "script");
		public void Script(Action<ScriptQueryDescriptor> configure) => Set(configure, "script");
		public void ScriptScore(ScriptScoreQuery variant) => Set(variant, "script_score");
		public void ScriptScore(Action<ScriptScoreQueryDescriptor<T>> configure) => Set(configure, "script_score");
		public void Shape(ShapeQuery variant) => Set(variant, "shape");
		public void Shape(Action<ShapeQueryDescriptor> configure) => Set(configure, "shape");
		public void SimpleQueryString(SimpleQueryStringQuery variant) => Set(variant, "simple_query_string");
		public void SimpleQueryString(Action<SimpleQueryStringQueryDescriptor<T>> configure) => Set(configure, "simple_query_string");
		public void SpanContaining(SpanContainingQuery variant) => Set(variant, "span_containing");
		public void SpanContaining(Action<SpanContainingQueryDescriptor<T>> configure) => Set(configure, "span_containing");
		public void FieldMaskingSpan(SpanFieldMaskingQuery variant) => Set(variant, "field_masking_span");
		public void FieldMaskingSpan(Action<SpanFieldMaskingQueryDescriptor<T>> configure) => Set(configure, "field_masking_span");
		public void SpanFirst(SpanFirstQuery variant) => Set(variant, "span_first");
		public void SpanFirst(Action<SpanFirstQueryDescriptor<T>> configure) => Set(configure, "span_first");
		public void SpanMulti(SpanMultiTermQuery variant) => Set(variant, "span_multi");
		public void SpanMulti(Action<SpanMultiTermQueryDescriptor<T>> configure) => Set(configure, "span_multi");
		public void SpanNear(SpanNearQuery variant) => Set(variant, "span_near");
		public void SpanNear(Action<SpanNearQueryDescriptor> configure) => Set(configure, "span_near");
		public void SpanNot(SpanNotQuery variant) => Set(variant, "span_not");
		public void SpanNot(Action<SpanNotQueryDescriptor<T>> configure) => Set(configure, "span_not");
		public void SpanOr(SpanOrQuery variant) => Set(variant, "span_or");
		public void SpanOr(Action<SpanOrQueryDescriptor> configure) => Set(configure, "span_or");
		public void SpanTerm(SpanTermQuery variant) => Set(variant, "span_term");
		public void SpanTerm(Action<SpanTermQueryDescriptor<T>> configure) => Set(configure, "span_term");
		public void SpanWithin(SpanWithinQuery variant) => Set(variant, "span_within");
		public void SpanWithin(Action<SpanWithinQueryDescriptor<T>> configure) => Set(configure, "span_within");
		public void Term(TermQuery variant) => Set(variant, "term");
		public void Term(Action<TermQueryDescriptor<T>> configure) => Set(configure, "term");
		public void Terms(TermsQuery variant) => Set(variant, "terms");
		public void Terms(Action<TermsQueryDescriptor> configure) => Set(configure, "terms");
		public void TermsSet(TermsSetQuery variant) => Set(variant, "terms_set");
		public void TermsSet(Action<TermsSetQueryDescriptor<T>> configure) => Set(configure, "terms_set");
		public void Wildcard(WildcardQuery variant) => Set(variant, "wildcard");
		public void Wildcard(Action<WildcardQueryDescriptor<T>> configure) => Set(configure, "wildcard");
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			writer.WriteStartObject();
			if (ContainedVariantName == "bool")
			{
				var descriptor = new BoolQueryDescriptor<T>();
				((Action<BoolQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "boosting")
			{
				var descriptor = new BoostingQueryDescriptor<T>();
				((Action<BoostingQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "combined_fields")
			{
				var descriptor = new CombinedFieldsQueryDescriptor<T>();
				((Action<CombinedFieldsQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "constant_score")
			{
				var descriptor = new ConstantScoreQueryDescriptor<T>();
				((Action<ConstantScoreQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "dis_max")
			{
				var descriptor = new DisMaxQueryDescriptor();
				((Action<DisMaxQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "exists")
			{
				var descriptor = new ExistsQueryDescriptor<T>();
				((Action<ExistsQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "function_score")
			{
				var descriptor = new FunctionScoreQueryDescriptor<T>();
				((Action<FunctionScoreQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "fuzzy")
			{
				var descriptor = new FuzzyQueryDescriptor<T>();
				((Action<FuzzyQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "geo_bounding_box")
			{
				var descriptor = new GeoBoundingBoxQueryDescriptor();
				((Action<GeoBoundingBoxQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "geo_distance")
			{
				var descriptor = new GeoDistanceQueryDescriptor();
				((Action<GeoDistanceQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "geo_polygon")
			{
				var descriptor = new GeoPolygonQueryDescriptor();
				((Action<GeoPolygonQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "geo_shape")
			{
				var descriptor = new GeoShapeQueryDescriptor();
				((Action<GeoShapeQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "has_child")
			{
				var descriptor = new HasChildQueryDescriptor<T>();
				((Action<HasChildQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "has_parent")
			{
				var descriptor = new HasParentQueryDescriptor<T>();
				((Action<HasParentQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "ids")
			{
				var descriptor = new IdsQueryDescriptor();
				((Action<IdsQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "intervals")
			{
				var descriptor = new IntervalsQueryDescriptor<T>();
				((Action<IntervalsQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match")
			{
				var descriptor = new MatchQueryDescriptor<T>();
				((Action<MatchQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match_all")
			{
				var descriptor = new MatchAllQueryDescriptor();
				((Action<MatchAllQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match_bool_prefix")
			{
				var descriptor = new MatchBoolPrefixQueryDescriptor<T>();
				((Action<MatchBoolPrefixQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match_none")
			{
				var descriptor = new MatchNoneQueryDescriptor();
				((Action<MatchNoneQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match_phrase")
			{
				var descriptor = new MatchPhraseQueryDescriptor<T>();
				((Action<MatchPhraseQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "match_phrase_prefix")
			{
				var descriptor = new MatchPhrasePrefixQueryDescriptor<T>();
				((Action<MatchPhrasePrefixQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "more_like_this")
			{
				var descriptor = new MoreLikeThisQueryDescriptor<T>();
				((Action<MoreLikeThisQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "multi_match")
			{
				var descriptor = new MultiMatchQueryDescriptor<T>();
				((Action<MultiMatchQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "nested")
			{
				var descriptor = new NestedQueryDescriptor<T>();
				((Action<NestedQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "parent_id")
			{
				var descriptor = new ParentIdQueryDescriptor();
				((Action<ParentIdQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "percolate")
			{
				var descriptor = new PercolateQueryDescriptor<T>();
				((Action<PercolateQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "pinned")
			{
				var descriptor = new PinnedQueryDescriptor<T>();
				((Action<PinnedQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "prefix")
			{
				var descriptor = new PrefixQueryDescriptor<T>();
				((Action<PrefixQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "query_string")
			{
				var descriptor = new QueryStringQueryDescriptor<T>();
				((Action<QueryStringQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "rank_feature")
			{
				var descriptor = new RankFeatureQueryDescriptor<T>();
				((Action<RankFeatureQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "regexp")
			{
				var descriptor = new RegexpQueryDescriptor<T>();
				((Action<RegexpQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "script")
			{
				var descriptor = new ScriptQueryDescriptor();
				((Action<ScriptQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "script_score")
			{
				var descriptor = new ScriptScoreQueryDescriptor<T>();
				((Action<ScriptScoreQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "shape")
			{
				var descriptor = new ShapeQueryDescriptor();
				((Action<ShapeQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "simple_query_string")
			{
				var descriptor = new SimpleQueryStringQueryDescriptor<T>();
				((Action<SimpleQueryStringQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_containing")
			{
				var descriptor = new SpanContainingQueryDescriptor<T>();
				((Action<SpanContainingQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "field_masking_span")
			{
				var descriptor = new SpanFieldMaskingQueryDescriptor<T>();
				((Action<SpanFieldMaskingQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_first")
			{
				var descriptor = new SpanFirstQueryDescriptor<T>();
				((Action<SpanFirstQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_multi")
			{
				var descriptor = new SpanMultiTermQueryDescriptor<T>();
				((Action<SpanMultiTermQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_near")
			{
				var descriptor = new SpanNearQueryDescriptor();
				((Action<SpanNearQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_not")
			{
				var descriptor = new SpanNotQueryDescriptor<T>();
				((Action<SpanNotQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_or")
			{
				var descriptor = new SpanOrQueryDescriptor();
				((Action<SpanOrQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_term")
			{
				var descriptor = new SpanTermQueryDescriptor<T>();
				((Action<SpanTermQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "span_within")
			{
				var descriptor = new SpanWithinQueryDescriptor<T>();
				((Action<SpanWithinQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "term")
			{
				var descriptor = new TermQueryDescriptor<T>();
				((Action<TermQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "terms")
			{
				var descriptor = new TermsQueryDescriptor();
				((Action<TermsQueryDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "terms_set")
			{
				var descriptor = new TermsSetQueryDescriptor<T>();
				((Action<TermsSetQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			if (ContainedVariantName == "wildcard")
			{
				var descriptor = new WildcardQueryDescriptor<T>();
				((Action<WildcardQueryDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
				Finalise();
				return;
			}

			writer.WriteEndObject();
			writer.WriteEndObject();
			void Finalise()
			{
				writer.WriteEndObject();
				writer.WriteEndObject();
			}
		}
	}
}
