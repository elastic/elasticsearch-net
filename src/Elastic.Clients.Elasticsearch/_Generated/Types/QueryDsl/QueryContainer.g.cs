// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public interface IQueryContainerVariant
	{
		string QueryContainerVariantName { get; }
	}

	[JsonConverter(typeof(QueryContainerConverter))]
	public partial class QueryContainer : IContainer
	{
		public QueryContainer(IQueryContainerVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal IQueryContainerVariant Variant { get; }
	}

	internal sealed class QueryContainerConverter : JsonConverter<QueryContainer>
	{
		public override QueryContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var readerCopy = reader;
			readerCopy.Read();
			if (readerCopy.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = readerCopy.GetString();
			if (propertyName == "bool")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.BoolQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "boosting")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.BoostingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "combined_fields")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "constant_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ConstantScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "dis_max")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.DisMaxQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "exists")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ExistsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "field_masking_span")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanFieldMaskingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "function_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "fuzzy")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.FuzzyQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_bounding_box")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoBoundingBoxQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_distance")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoDistanceQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_polygon")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoPolygonQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "geo_shape")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.GeoShapeQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "has_child")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.HasChildQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "has_parent")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.HasParentQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "ids")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.IdsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "intervals")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.IntervalsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "knn")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.KnnQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_all")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchAllQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_bool_prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchBoolPrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_none")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchNoneQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_phrase")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchPhraseQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "match_phrase_prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MatchPhrasePrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "more_like_this")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MoreLikeThisQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "multi_match")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.MultiMatchQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "nested")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.NestedQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "parent_id")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ParentIdQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "percolate")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PercolateQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "pinned")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PinnedQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "prefix")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.PrefixQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "query_string")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "rank_feature")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "regexp")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.RegexpQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "script")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ScriptQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "script_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ScriptScoreQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "shape")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.ShapeQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "simple_query_string")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_containing")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanContainingQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_first")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanFirstQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_multi")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanMultiTermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_near")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanNearQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_not")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanNotQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_or")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanOrQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_term")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanTermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "span_within")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.SpanWithinQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "term")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "terms")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermsQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "terms_set")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.TermsSetQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "wildcard")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.WildcardQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			if (propertyName == "wrapper")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.QueryDsl.WrapperQuery?>(ref reader, options);
				return new QueryContainer(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, QueryContainer value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.QueryContainerVariantName);
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.QueryDsl.BoolQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.BoostingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ConstantScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.DisMaxQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ExistsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanFieldMaskingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.FuzzyQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoBoundingBoxQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoDistanceQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoPolygonQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.GeoShapeQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.HasChildQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.HasParentQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.IdsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.IntervalsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.KnnQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchAllQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchBoolPrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchNoneQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchPhraseQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MatchPhrasePrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MoreLikeThisQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.MultiMatchQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.NestedQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ParentIdQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PercolateQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PinnedQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.PrefixQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.RegexpQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ScriptQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ScriptScoreQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.ShapeQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanContainingQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanFirstQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanMultiTermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanNearQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanNotQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanOrQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanTermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.SpanWithinQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermsQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.TermsSetQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.WildcardQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.QueryDsl.WrapperQuery variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class QueryContainerDescriptor<TDocument> : DescriptorBase<QueryContainerDescriptor<TDocument>>
	{
		internal QueryContainerDescriptor(Action<QueryContainerDescriptor<TDocument>> configure) => configure.Invoke(this);
		public QueryContainerDescriptor() : base()
		{
		}

		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal QueryContainer Container { get; private set; }

		internal IDescriptor Descriptor { get; private set; }

		internal Type DescriptorType { get; private set; }

		private void Set<T>(Action<T> descriptorAction, string variantName)
			where T : IDescriptor, new()
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainedVariantName = variantName;
			ContainsVariant = true;
			DescriptorType = typeof(T);
			var descriptor = new T();
			descriptorAction?.Invoke(descriptor);
			Descriptor = descriptor;
		}

		private void Set(IQueryContainerVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new QueryContainer(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			JsonSerializer.Serialize(writer, Descriptor, DescriptorType, options);
			writer.WriteEndObject();
		}

		public void Bool(BoolQuery query) => Set(query, "bool");
		public void Bool(Action<BoolQueryDescriptor> configure) => Set(configure, "bool");
		public void Boosting(BoostingQuery query) => Set(query, "boosting");
		public void Boosting(Action<BoostingQueryDescriptor<TDocument>> configure) => Set(configure, "boosting");
		public void CombinedFields(CombinedFieldsQuery query) => Set(query, "combined_fields");
		public void CombinedFields(Action<CombinedFieldsQueryDescriptor<TDocument>> configure) => Set(configure, "combined_fields");
		public void ConstantScore(ConstantScoreQuery query) => Set(query, "constant_score");
		public void ConstantScore(Action<ConstantScoreQueryDescriptor<TDocument>> configure) => Set(configure, "constant_score");
		public void DisMax(DisMaxQuery query) => Set(query, "dis_max");
		public void DisMax(Action<DisMaxQueryDescriptor> configure) => Set(configure, "dis_max");
		public void Exists(ExistsQuery query) => Set(query, "exists");
		public void Exists(Action<ExistsQueryDescriptor<TDocument>> configure) => Set(configure, "exists");
		public void FieldMaskingSpan(SpanFieldMaskingQuery query) => Set(query, "field_masking_span");
		public void FieldMaskingSpan(Action<SpanFieldMaskingQueryDescriptor<TDocument>> configure) => Set(configure, "field_masking_span");
		public void FunctionScore(FunctionScoreQuery query) => Set(query, "function_score");
		public void FunctionScore(Action<FunctionScoreQueryDescriptor<TDocument>> configure) => Set(configure, "function_score");
		public void Fuzzy(FuzzyQuery query) => Set(query, "fuzzy");
		public void Fuzzy(Action<FuzzyQueryDescriptor<TDocument>> configure) => Set(configure, "fuzzy");
		public void GeoBoundingBox(GeoBoundingBoxQuery query) => Set(query, "geo_bounding_box");
		public void GeoBoundingBox(Action<GeoBoundingBoxQueryDescriptor> configure) => Set(configure, "geo_bounding_box");
		public void GeoDistance(GeoDistanceQuery query) => Set(query, "geo_distance");
		public void GeoDistance(Action<GeoDistanceQueryDescriptor> configure) => Set(configure, "geo_distance");
		public void GeoPolygon(GeoPolygonQuery query) => Set(query, "geo_polygon");
		public void GeoPolygon(Action<GeoPolygonQueryDescriptor> configure) => Set(configure, "geo_polygon");
		public void GeoShape(GeoShapeQuery query) => Set(query, "geo_shape");
		public void GeoShape(Action<GeoShapeQueryDescriptor> configure) => Set(configure, "geo_shape");
		public void HasChild(HasChildQuery query) => Set(query, "has_child");
		public void HasChild(Action<HasChildQueryDescriptor<TDocument>> configure) => Set(configure, "has_child");
		public void HasParent(HasParentQuery query) => Set(query, "has_parent");
		public void HasParent(Action<HasParentQueryDescriptor<TDocument>> configure) => Set(configure, "has_parent");
		public void Ids(IdsQuery query) => Set(query, "ids");
		public void Ids(Action<IdsQueryDescriptor> configure) => Set(configure, "ids");
		public void Intervals(IntervalsQuery query) => Set(query, "intervals");
		public void Intervals(Action<IntervalsQueryDescriptor<TDocument>> configure) => Set(configure, "intervals");
		public void Knn(KnnQuery query) => Set(query, "knn");
		public void Knn(Action<KnnQueryDescriptor<TDocument>> configure) => Set(configure, "knn");
		public void Match(MatchQuery query) => Set(query, "match");
		public void Match(Action<MatchQueryDescriptor<TDocument>> configure) => Set(configure, "match");
		public void MatchAll(MatchAllQuery query) => Set(query, "match_all");
		public void MatchAll(Action<MatchAllQueryDescriptor> configure) => Set(configure, "match_all");
		public void MatchBoolPrefix(MatchBoolPrefixQuery query) => Set(query, "match_bool_prefix");
		public void MatchBoolPrefix(Action<MatchBoolPrefixQueryDescriptor<TDocument>> configure) => Set(configure, "match_bool_prefix");
		public void MatchNone(MatchNoneQuery query) => Set(query, "match_none");
		public void MatchNone(Action<MatchNoneQueryDescriptor> configure) => Set(configure, "match_none");
		public void MatchPhrase(MatchPhraseQuery query) => Set(query, "match_phrase");
		public void MatchPhrase(Action<MatchPhraseQueryDescriptor<TDocument>> configure) => Set(configure, "match_phrase");
		public void MatchPhrasePrefix(MatchPhrasePrefixQuery query) => Set(query, "match_phrase_prefix");
		public void MatchPhrasePrefix(Action<MatchPhrasePrefixQueryDescriptor<TDocument>> configure) => Set(configure, "match_phrase_prefix");
		public void MoreLikeThis(MoreLikeThisQuery query) => Set(query, "more_like_this");
		public void MoreLikeThis(Action<MoreLikeThisQueryDescriptor<TDocument>> configure) => Set(configure, "more_like_this");
		public void MultiMatch(MultiMatchQuery query) => Set(query, "multi_match");
		public void MultiMatch(Action<MultiMatchQueryDescriptor<TDocument>> configure) => Set(configure, "multi_match");
		public void Nested(NestedQuery query) => Set(query, "nested");
		public void Nested(Action<NestedQueryDescriptor<TDocument>> configure) => Set(configure, "nested");
		public void ParentId(ParentIdQuery query) => Set(query, "parent_id");
		public void ParentId(Action<ParentIdQueryDescriptor> configure) => Set(configure, "parent_id");
		public void Percolate(PercolateQuery query) => Set(query, "percolate");
		public void Percolate(Action<PercolateQueryDescriptor<TDocument>> configure) => Set(configure, "percolate");
		public void Pinned(PinnedQuery query) => Set(query, "pinned");
		public void Pinned(Action<PinnedQueryDescriptor<TDocument>> configure) => Set(configure, "pinned");
		public void Prefix(PrefixQuery query) => Set(query, "prefix");
		public void Prefix(Action<PrefixQueryDescriptor<TDocument>> configure) => Set(configure, "prefix");
		public void QueryString(QueryStringQuery query) => Set(query, "query_string");
		public void QueryString(Action<QueryStringQueryDescriptor<TDocument>> configure) => Set(configure, "query_string");
		public void RankFeature(RankFeatureQuery query) => Set(query, "rank_feature");
		public void RankFeature(Action<RankFeatureQueryDescriptor<TDocument>> configure) => Set(configure, "rank_feature");
		public void Regexp(RegexpQuery query) => Set(query, "regexp");
		public void Regexp(Action<RegexpQueryDescriptor<TDocument>> configure) => Set(configure, "regexp");
		public void Script(ScriptQuery query) => Set(query, "script");
		public void Script(Action<ScriptQueryDescriptor> configure) => Set(configure, "script");
		public void ScriptScore(ScriptScoreQuery query) => Set(query, "script_score");
		public void ScriptScore(Action<ScriptScoreQueryDescriptor<TDocument>> configure) => Set(configure, "script_score");
		public void Shape(ShapeQuery query) => Set(query, "shape");
		public void Shape(Action<ShapeQueryDescriptor> configure) => Set(configure, "shape");
		public void SimpleQueryString(SimpleQueryStringQuery query) => Set(query, "simple_query_string");
		public void SimpleQueryString(Action<SimpleQueryStringQueryDescriptor<TDocument>> configure) => Set(configure, "simple_query_string");
		public void SpanContaining(SpanContainingQuery query) => Set(query, "span_containing");
		public void SpanContaining(Action<SpanContainingQueryDescriptor<TDocument>> configure) => Set(configure, "span_containing");
		public void SpanFirst(SpanFirstQuery query) => Set(query, "span_first");
		public void SpanFirst(Action<SpanFirstQueryDescriptor<TDocument>> configure) => Set(configure, "span_first");
		public void SpanMulti(SpanMultiTermQuery query) => Set(query, "span_multi");
		public void SpanMulti(Action<SpanMultiTermQueryDescriptor<TDocument>> configure) => Set(configure, "span_multi");
		public void SpanNear(SpanNearQuery query) => Set(query, "span_near");
		public void SpanNear(Action<SpanNearQueryDescriptor> configure) => Set(configure, "span_near");
		public void SpanNot(SpanNotQuery query) => Set(query, "span_not");
		public void SpanNot(Action<SpanNotQueryDescriptor<TDocument>> configure) => Set(configure, "span_not");
		public void SpanOr(SpanOrQuery query) => Set(query, "span_or");
		public void SpanOr(Action<SpanOrQueryDescriptor> configure) => Set(configure, "span_or");
		public void SpanTerm(SpanTermQuery query) => Set(query, "span_term");
		public void SpanTerm(Action<SpanTermQueryDescriptor<TDocument>> configure) => Set(configure, "span_term");
		public void SpanWithin(SpanWithinQuery query) => Set(query, "span_within");
		public void SpanWithin(Action<SpanWithinQueryDescriptor<TDocument>> configure) => Set(configure, "span_within");
		public void Term(TermQuery query) => Set(query, "term");
		public void Term(Action<TermQueryDescriptor<TDocument>> configure) => Set(configure, "term");
		public void Terms(TermsQuery query) => Set(query, "terms");
		public void Terms(Action<TermsQueryDescriptor> configure) => Set(configure, "terms");
		public void TermsSet(TermsSetQuery query) => Set(query, "terms_set");
		public void TermsSet(Action<TermsSetQueryDescriptor<TDocument>> configure) => Set(configure, "terms_set");
		public void Wildcard(WildcardQuery query) => Set(query, "wildcard");
		public void Wildcard(Action<WildcardQueryDescriptor<TDocument>> configure) => Set(configure, "wildcard");
		public void Wrapper(WrapperQuery query) => Set(query, "wrapper");
		public void Wrapper(Action<WrapperQueryDescriptor> configure) => Set(configure, "wrapper");
	}

	public sealed partial class QueryContainerDescriptor : DescriptorBase<QueryContainerDescriptor>
	{
		internal QueryContainerDescriptor(Action<QueryContainerDescriptor> configure) => configure.Invoke(this);
		public QueryContainerDescriptor() : base()
		{
		}

		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal QueryContainer Container { get; private set; }

		internal IDescriptor Descriptor { get; private set; }

		internal Type DescriptorType { get; private set; }

		private void Set<T>(Action<T> descriptorAction, string variantName)
			where T : IDescriptor, new()
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainedVariantName = variantName;
			ContainsVariant = true;
			DescriptorType = typeof(T);
			var descriptor = new T();
			descriptorAction?.Invoke(descriptor);
			Descriptor = descriptor;
		}

		private void Set(IQueryContainerVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new QueryContainer(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			JsonSerializer.Serialize(writer, Descriptor, DescriptorType, options);
			writer.WriteEndObject();
		}

		public void Bool(BoolQuery query) => Set(query, "bool");
		public void Bool(Action<BoolQueryDescriptor> configure) => Set(configure, "bool");
		public void Boosting(BoostingQuery query) => Set(query, "boosting");
		public void Boosting(Action<BoostingQueryDescriptor> configure) => Set(configure, "boosting");
		public void Boosting<TDocument>(Action<BoostingQueryDescriptor<TDocument>> configure) => Set(configure, "boosting");
		public void CombinedFields(CombinedFieldsQuery query) => Set(query, "combined_fields");
		public void CombinedFields(Action<CombinedFieldsQueryDescriptor> configure) => Set(configure, "combined_fields");
		public void CombinedFields<TDocument>(Action<CombinedFieldsQueryDescriptor<TDocument>> configure) => Set(configure, "combined_fields");
		public void ConstantScore(ConstantScoreQuery query) => Set(query, "constant_score");
		public void ConstantScore(Action<ConstantScoreQueryDescriptor> configure) => Set(configure, "constant_score");
		public void ConstantScore<TDocument>(Action<ConstantScoreQueryDescriptor<TDocument>> configure) => Set(configure, "constant_score");
		public void DisMax(DisMaxQuery query) => Set(query, "dis_max");
		public void DisMax(Action<DisMaxQueryDescriptor> configure) => Set(configure, "dis_max");
		public void Exists(ExistsQuery query) => Set(query, "exists");
		public void Exists(Action<ExistsQueryDescriptor> configure) => Set(configure, "exists");
		public void Exists<TDocument>(Action<ExistsQueryDescriptor<TDocument>> configure) => Set(configure, "exists");
		public void FieldMaskingSpan(SpanFieldMaskingQuery query) => Set(query, "field_masking_span");
		public void FieldMaskingSpan(Action<SpanFieldMaskingQueryDescriptor> configure) => Set(configure, "field_masking_span");
		public void FieldMaskingSpan<TDocument>(Action<SpanFieldMaskingQueryDescriptor<TDocument>> configure) => Set(configure, "field_masking_span");
		public void FunctionScore(FunctionScoreQuery query) => Set(query, "function_score");
		public void FunctionScore(Action<FunctionScoreQueryDescriptor> configure) => Set(configure, "function_score");
		public void FunctionScore<TDocument>(Action<FunctionScoreQueryDescriptor<TDocument>> configure) => Set(configure, "function_score");
		public void Fuzzy(FuzzyQuery query) => Set(query, "fuzzy");
		public void Fuzzy(Action<FuzzyQueryDescriptor> configure) => Set(configure, "fuzzy");
		public void Fuzzy<TDocument>(Action<FuzzyQueryDescriptor<TDocument>> configure) => Set(configure, "fuzzy");
		public void GeoBoundingBox(GeoBoundingBoxQuery query) => Set(query, "geo_bounding_box");
		public void GeoBoundingBox(Action<GeoBoundingBoxQueryDescriptor> configure) => Set(configure, "geo_bounding_box");
		public void GeoDistance(GeoDistanceQuery query) => Set(query, "geo_distance");
		public void GeoDistance(Action<GeoDistanceQueryDescriptor> configure) => Set(configure, "geo_distance");
		public void GeoPolygon(GeoPolygonQuery query) => Set(query, "geo_polygon");
		public void GeoPolygon(Action<GeoPolygonQueryDescriptor> configure) => Set(configure, "geo_polygon");
		public void GeoShape(GeoShapeQuery query) => Set(query, "geo_shape");
		public void GeoShape(Action<GeoShapeQueryDescriptor> configure) => Set(configure, "geo_shape");
		public void HasChild(HasChildQuery query) => Set(query, "has_child");
		public void HasChild(Action<HasChildQueryDescriptor> configure) => Set(configure, "has_child");
		public void HasChild<TDocument>(Action<HasChildQueryDescriptor<TDocument>> configure) => Set(configure, "has_child");
		public void HasParent(HasParentQuery query) => Set(query, "has_parent");
		public void HasParent(Action<HasParentQueryDescriptor> configure) => Set(configure, "has_parent");
		public void HasParent<TDocument>(Action<HasParentQueryDescriptor<TDocument>> configure) => Set(configure, "has_parent");
		public void Ids(IdsQuery query) => Set(query, "ids");
		public void Ids(Action<IdsQueryDescriptor> configure) => Set(configure, "ids");
		public void Intervals(IntervalsQuery query) => Set(query, "intervals");
		public void Intervals(Action<IntervalsQueryDescriptor> configure) => Set(configure, "intervals");
		public void Intervals<TDocument>(Action<IntervalsQueryDescriptor<TDocument>> configure) => Set(configure, "intervals");
		public void Knn(KnnQuery query) => Set(query, "knn");
		public void Knn(Action<KnnQueryDescriptor> configure) => Set(configure, "knn");
		public void Knn<TDocument>(Action<KnnQueryDescriptor<TDocument>> configure) => Set(configure, "knn");
		public void Match(MatchQuery query) => Set(query, "match");
		public void Match(Action<MatchQueryDescriptor> configure) => Set(configure, "match");
		public void Match<TDocument>(Action<MatchQueryDescriptor<TDocument>> configure) => Set(configure, "match");
		public void MatchAll(MatchAllQuery query) => Set(query, "match_all");
		public void MatchAll(Action<MatchAllQueryDescriptor> configure) => Set(configure, "match_all");
		public void MatchBoolPrefix(MatchBoolPrefixQuery query) => Set(query, "match_bool_prefix");
		public void MatchBoolPrefix(Action<MatchBoolPrefixQueryDescriptor> configure) => Set(configure, "match_bool_prefix");
		public void MatchBoolPrefix<TDocument>(Action<MatchBoolPrefixQueryDescriptor<TDocument>> configure) => Set(configure, "match_bool_prefix");
		public void MatchNone(MatchNoneQuery query) => Set(query, "match_none");
		public void MatchNone(Action<MatchNoneQueryDescriptor> configure) => Set(configure, "match_none");
		public void MatchPhrase(MatchPhraseQuery query) => Set(query, "match_phrase");
		public void MatchPhrase(Action<MatchPhraseQueryDescriptor> configure) => Set(configure, "match_phrase");
		public void MatchPhrase<TDocument>(Action<MatchPhraseQueryDescriptor<TDocument>> configure) => Set(configure, "match_phrase");
		public void MatchPhrasePrefix(MatchPhrasePrefixQuery query) => Set(query, "match_phrase_prefix");
		public void MatchPhrasePrefix(Action<MatchPhrasePrefixQueryDescriptor> configure) => Set(configure, "match_phrase_prefix");
		public void MatchPhrasePrefix<TDocument>(Action<MatchPhrasePrefixQueryDescriptor<TDocument>> configure) => Set(configure, "match_phrase_prefix");
		public void MoreLikeThis(MoreLikeThisQuery query) => Set(query, "more_like_this");
		public void MoreLikeThis(Action<MoreLikeThisQueryDescriptor> configure) => Set(configure, "more_like_this");
		public void MoreLikeThis<TDocument>(Action<MoreLikeThisQueryDescriptor<TDocument>> configure) => Set(configure, "more_like_this");
		public void MultiMatch(MultiMatchQuery query) => Set(query, "multi_match");
		public void MultiMatch(Action<MultiMatchQueryDescriptor> configure) => Set(configure, "multi_match");
		public void MultiMatch<TDocument>(Action<MultiMatchQueryDescriptor<TDocument>> configure) => Set(configure, "multi_match");
		public void Nested(NestedQuery query) => Set(query, "nested");
		public void Nested(Action<NestedQueryDescriptor> configure) => Set(configure, "nested");
		public void Nested<TDocument>(Action<NestedQueryDescriptor<TDocument>> configure) => Set(configure, "nested");
		public void ParentId(ParentIdQuery query) => Set(query, "parent_id");
		public void ParentId(Action<ParentIdQueryDescriptor> configure) => Set(configure, "parent_id");
		public void Percolate(PercolateQuery query) => Set(query, "percolate");
		public void Percolate(Action<PercolateQueryDescriptor> configure) => Set(configure, "percolate");
		public void Percolate<TDocument>(Action<PercolateQueryDescriptor<TDocument>> configure) => Set(configure, "percolate");
		public void Pinned(PinnedQuery query) => Set(query, "pinned");
		public void Pinned(Action<PinnedQueryDescriptor> configure) => Set(configure, "pinned");
		public void Pinned<TDocument>(Action<PinnedQueryDescriptor<TDocument>> configure) => Set(configure, "pinned");
		public void Prefix(PrefixQuery query) => Set(query, "prefix");
		public void Prefix(Action<PrefixQueryDescriptor> configure) => Set(configure, "prefix");
		public void Prefix<TDocument>(Action<PrefixQueryDescriptor<TDocument>> configure) => Set(configure, "prefix");
		public void QueryString(QueryStringQuery query) => Set(query, "query_string");
		public void QueryString(Action<QueryStringQueryDescriptor> configure) => Set(configure, "query_string");
		public void QueryString<TDocument>(Action<QueryStringQueryDescriptor<TDocument>> configure) => Set(configure, "query_string");
		public void RankFeature(RankFeatureQuery query) => Set(query, "rank_feature");
		public void RankFeature(Action<RankFeatureQueryDescriptor> configure) => Set(configure, "rank_feature");
		public void RankFeature<TDocument>(Action<RankFeatureQueryDescriptor<TDocument>> configure) => Set(configure, "rank_feature");
		public void Regexp(RegexpQuery query) => Set(query, "regexp");
		public void Regexp(Action<RegexpQueryDescriptor> configure) => Set(configure, "regexp");
		public void Regexp<TDocument>(Action<RegexpQueryDescriptor<TDocument>> configure) => Set(configure, "regexp");
		public void Script(ScriptQuery query) => Set(query, "script");
		public void Script(Action<ScriptQueryDescriptor> configure) => Set(configure, "script");
		public void ScriptScore(ScriptScoreQuery query) => Set(query, "script_score");
		public void ScriptScore(Action<ScriptScoreQueryDescriptor> configure) => Set(configure, "script_score");
		public void ScriptScore<TDocument>(Action<ScriptScoreQueryDescriptor<TDocument>> configure) => Set(configure, "script_score");
		public void Shape(ShapeQuery query) => Set(query, "shape");
		public void Shape(Action<ShapeQueryDescriptor> configure) => Set(configure, "shape");
		public void SimpleQueryString(SimpleQueryStringQuery query) => Set(query, "simple_query_string");
		public void SimpleQueryString(Action<SimpleQueryStringQueryDescriptor> configure) => Set(configure, "simple_query_string");
		public void SimpleQueryString<TDocument>(Action<SimpleQueryStringQueryDescriptor<TDocument>> configure) => Set(configure, "simple_query_string");
		public void SpanContaining(SpanContainingQuery query) => Set(query, "span_containing");
		public void SpanContaining(Action<SpanContainingQueryDescriptor> configure) => Set(configure, "span_containing");
		public void SpanContaining<TDocument>(Action<SpanContainingQueryDescriptor<TDocument>> configure) => Set(configure, "span_containing");
		public void SpanFirst(SpanFirstQuery query) => Set(query, "span_first");
		public void SpanFirst(Action<SpanFirstQueryDescriptor> configure) => Set(configure, "span_first");
		public void SpanFirst<TDocument>(Action<SpanFirstQueryDescriptor<TDocument>> configure) => Set(configure, "span_first");
		public void SpanMulti(SpanMultiTermQuery query) => Set(query, "span_multi");
		public void SpanMulti(Action<SpanMultiTermQueryDescriptor> configure) => Set(configure, "span_multi");
		public void SpanMulti<TDocument>(Action<SpanMultiTermQueryDescriptor<TDocument>> configure) => Set(configure, "span_multi");
		public void SpanNear(SpanNearQuery query) => Set(query, "span_near");
		public void SpanNear(Action<SpanNearQueryDescriptor> configure) => Set(configure, "span_near");
		public void SpanNot(SpanNotQuery query) => Set(query, "span_not");
		public void SpanNot(Action<SpanNotQueryDescriptor> configure) => Set(configure, "span_not");
		public void SpanNot<TDocument>(Action<SpanNotQueryDescriptor<TDocument>> configure) => Set(configure, "span_not");
		public void SpanOr(SpanOrQuery query) => Set(query, "span_or");
		public void SpanOr(Action<SpanOrQueryDescriptor> configure) => Set(configure, "span_or");
		public void SpanTerm(SpanTermQuery query) => Set(query, "span_term");
		public void SpanTerm(Action<SpanTermQueryDescriptor> configure) => Set(configure, "span_term");
		public void SpanTerm<TDocument>(Action<SpanTermQueryDescriptor<TDocument>> configure) => Set(configure, "span_term");
		public void SpanWithin(SpanWithinQuery query) => Set(query, "span_within");
		public void SpanWithin(Action<SpanWithinQueryDescriptor> configure) => Set(configure, "span_within");
		public void SpanWithin<TDocument>(Action<SpanWithinQueryDescriptor<TDocument>> configure) => Set(configure, "span_within");
		public void Term(TermQuery query) => Set(query, "term");
		public void Term(Action<TermQueryDescriptor> configure) => Set(configure, "term");
		public void Term<TDocument>(Action<TermQueryDescriptor<TDocument>> configure) => Set(configure, "term");
		public void Terms(TermsQuery query) => Set(query, "terms");
		public void Terms(Action<TermsQueryDescriptor> configure) => Set(configure, "terms");
		public void TermsSet(TermsSetQuery query) => Set(query, "terms_set");
		public void TermsSet(Action<TermsSetQueryDescriptor> configure) => Set(configure, "terms_set");
		public void TermsSet<TDocument>(Action<TermsSetQueryDescriptor<TDocument>> configure) => Set(configure, "terms_set");
		public void Wildcard(WildcardQuery query) => Set(query, "wildcard");
		public void Wildcard(Action<WildcardQueryDescriptor> configure) => Set(configure, "wildcard");
		public void Wildcard<TDocument>(Action<WildcardQueryDescriptor<TDocument>> configure) => Set(configure, "wildcard");
		public void Wrapper(WrapperQuery query) => Set(query, "wrapper");
		public void Wrapper(Action<WrapperQueryDescriptor> configure) => Set(configure, "wrapper");
	}
}