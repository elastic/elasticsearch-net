// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

public sealed partial class TextExpansionQuery : SearchQuery
{
	[JsonInclude, JsonPropertyName("_name")]
	public string? QueryName { get; set; }
	[JsonInclude, JsonPropertyName("boost")]
	public float? Boost { get; set; }

	/// <summary>
	/// <para>The text expansion NLP model to use</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model_id")]
	public string ModelId { get; set; }

	/// <summary>
	/// <para>The query text</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("model_text")]
	public string ModelText { get; set; }

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("value")]
	public Elastic.Clients.Elasticsearch.Field Value { get; set; }

	public static implicit operator Query(TextExpansionQuery textExpansionQuery) => QueryDsl.Query.TextExpansion(textExpansionQuery);

	internal override void InternalWrapInContainer(Query container) => container.WrapVariant("text_expansion", this);
}

public sealed partial class TextExpansionQueryDescriptor<TDocument> : SerializableDescriptor<TextExpansionQueryDescriptor<TDocument>>
{
	internal TextExpansionQueryDescriptor(Action<TextExpansionQueryDescriptor<TDocument>> configure) => configure.Invoke(this);

	public TextExpansionQueryDescriptor() : base()
	{
	}

	private string? QueryNameValue { get; set; }
	private float? BoostValue { get; set; }
	private string ModelIdValue { get; set; }
	private string ModelTextValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field ValueValue { get; set; }

	public TextExpansionQueryDescriptor<TDocument> QueryName(string? queryName)
	{
		QueryNameValue = queryName;
		return Self;
	}

	public TextExpansionQueryDescriptor<TDocument> Boost(float? boost)
	{
		BoostValue = boost;
		return Self;
	}

	/// <summary>
	/// <para>The text expansion NLP model to use</para>
	/// </summary>
	public TextExpansionQueryDescriptor<TDocument> ModelId(string modelId)
	{
		ModelIdValue = modelId;
		return Self;
	}

	/// <summary>
	/// <para>The query text</para>
	/// </summary>
	public TextExpansionQueryDescriptor<TDocument> ModelText(string modelText)
	{
		ModelTextValue = modelText;
		return Self;
	}

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	public TextExpansionQueryDescriptor<TDocument> Value(Elastic.Clients.Elasticsearch.Field value)
	{
		ValueValue = value;
		return Self;
	}

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	public TextExpansionQueryDescriptor<TDocument> Value<TValue>(Expression<Func<TDocument, TValue>> value)
	{
		ValueValue = value;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(QueryNameValue))
		{
			writer.WritePropertyName("_name");
			writer.WriteStringValue(QueryNameValue);
		}

		if (BoostValue.HasValue)
		{
			writer.WritePropertyName("boost");
			writer.WriteNumberValue(BoostValue.Value);
		}

		writer.WritePropertyName("model_id");
		writer.WriteStringValue(ModelIdValue);
		writer.WritePropertyName("model_text");
		writer.WriteStringValue(ModelTextValue);
		writer.WritePropertyName("value");
		JsonSerializer.Serialize(writer, ValueValue, options);
		writer.WriteEndObject();
	}
}

public sealed partial class TextExpansionQueryDescriptor : SerializableDescriptor<TextExpansionQueryDescriptor>
{
	internal TextExpansionQueryDescriptor(Action<TextExpansionQueryDescriptor> configure) => configure.Invoke(this);

	public TextExpansionQueryDescriptor() : base()
	{
	}

	private string? QueryNameValue { get; set; }
	private float? BoostValue { get; set; }
	private string ModelIdValue { get; set; }
	private string ModelTextValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field ValueValue { get; set; }

	public TextExpansionQueryDescriptor QueryName(string? queryName)
	{
		QueryNameValue = queryName;
		return Self;
	}

	public TextExpansionQueryDescriptor Boost(float? boost)
	{
		BoostValue = boost;
		return Self;
	}

	/// <summary>
	/// <para>The text expansion NLP model to use</para>
	/// </summary>
	public TextExpansionQueryDescriptor ModelId(string modelId)
	{
		ModelIdValue = modelId;
		return Self;
	}

	/// <summary>
	/// <para>The query text</para>
	/// </summary>
	public TextExpansionQueryDescriptor ModelText(string modelText)
	{
		ModelTextValue = modelText;
		return Self;
	}

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	public TextExpansionQueryDescriptor Value(Elastic.Clients.Elasticsearch.Field value)
	{
		ValueValue = value;
		return Self;
	}

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	public TextExpansionQueryDescriptor Value<TDocument, TValue>(Expression<Func<TDocument, TValue>> value)
	{
		ValueValue = value;
		return Self;
	}

	/// <summary>
	/// <para>The name of the rank features field to search against</para>
	/// </summary>
	public TextExpansionQueryDescriptor Value<TDocument>(Expression<Func<TDocument, object>> value)
	{
		ValueValue = value;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(QueryNameValue))
		{
			writer.WritePropertyName("_name");
			writer.WriteStringValue(QueryNameValue);
		}

		if (BoostValue.HasValue)
		{
			writer.WritePropertyName("boost");
			writer.WriteNumberValue(BoostValue.Value);
		}

		writer.WritePropertyName("model_id");
		writer.WriteStringValue(ModelIdValue);
		writer.WritePropertyName("model_text");
		writer.WriteStringValue(ModelTextValue);
		writer.WritePropertyName("value");
		JsonSerializer.Serialize(writer, ValueValue, options);
		writer.WriteEndObject();
	}
}