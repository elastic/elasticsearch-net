// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

internal sealed partial class QueryStringQueryConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery>
{
	private static readonly System.Text.Json.JsonEncodedText PropAllowLeadingWildcard = System.Text.Json.JsonEncodedText.Encode("allow_leading_wildcard");
	private static readonly System.Text.Json.JsonEncodedText PropAnalyzer = System.Text.Json.JsonEncodedText.Encode("analyzer");
	private static readonly System.Text.Json.JsonEncodedText PropAnalyzeWildcard = System.Text.Json.JsonEncodedText.Encode("analyze_wildcard");
	private static readonly System.Text.Json.JsonEncodedText PropAutoGenerateSynonymsPhraseQuery = System.Text.Json.JsonEncodedText.Encode("auto_generate_synonyms_phrase_query");
	private static readonly System.Text.Json.JsonEncodedText PropBoost = System.Text.Json.JsonEncodedText.Encode("boost");
	private static readonly System.Text.Json.JsonEncodedText PropDefaultField = System.Text.Json.JsonEncodedText.Encode("default_field");
	private static readonly System.Text.Json.JsonEncodedText PropDefaultOperator = System.Text.Json.JsonEncodedText.Encode("default_operator");
	private static readonly System.Text.Json.JsonEncodedText PropEnablePositionIncrements = System.Text.Json.JsonEncodedText.Encode("enable_position_increments");
	private static readonly System.Text.Json.JsonEncodedText PropEscape = System.Text.Json.JsonEncodedText.Encode("escape");
	private static readonly System.Text.Json.JsonEncodedText PropFields = System.Text.Json.JsonEncodedText.Encode("fields");
	private static readonly System.Text.Json.JsonEncodedText PropFuzziness = System.Text.Json.JsonEncodedText.Encode("fuzziness");
	private static readonly System.Text.Json.JsonEncodedText PropFuzzyMaxExpansions = System.Text.Json.JsonEncodedText.Encode("fuzzy_max_expansions");
	private static readonly System.Text.Json.JsonEncodedText PropFuzzyPrefixLength = System.Text.Json.JsonEncodedText.Encode("fuzzy_prefix_length");
	private static readonly System.Text.Json.JsonEncodedText PropFuzzyRewrite = System.Text.Json.JsonEncodedText.Encode("fuzzy_rewrite");
	private static readonly System.Text.Json.JsonEncodedText PropFuzzyTranspositions = System.Text.Json.JsonEncodedText.Encode("fuzzy_transpositions");
	private static readonly System.Text.Json.JsonEncodedText PropLenient = System.Text.Json.JsonEncodedText.Encode("lenient");
	private static readonly System.Text.Json.JsonEncodedText PropMaxDeterminizedStates = System.Text.Json.JsonEncodedText.Encode("max_determinized_states");
	private static readonly System.Text.Json.JsonEncodedText PropMinimumShouldMatch = System.Text.Json.JsonEncodedText.Encode("minimum_should_match");
	private static readonly System.Text.Json.JsonEncodedText PropPhraseSlop = System.Text.Json.JsonEncodedText.Encode("phrase_slop");
	private static readonly System.Text.Json.JsonEncodedText PropQuery = System.Text.Json.JsonEncodedText.Encode("query");
	private static readonly System.Text.Json.JsonEncodedText PropQueryName = System.Text.Json.JsonEncodedText.Encode("_name");
	private static readonly System.Text.Json.JsonEncodedText PropQuoteAnalyzer = System.Text.Json.JsonEncodedText.Encode("quote_analyzer");
	private static readonly System.Text.Json.JsonEncodedText PropQuoteFieldSuffix = System.Text.Json.JsonEncodedText.Encode("quote_field_suffix");
	private static readonly System.Text.Json.JsonEncodedText PropRewrite = System.Text.Json.JsonEncodedText.Encode("rewrite");
	private static readonly System.Text.Json.JsonEncodedText PropTieBreaker = System.Text.Json.JsonEncodedText.Encode("tie_breaker");
	private static readonly System.Text.Json.JsonEncodedText PropTimeZone = System.Text.Json.JsonEncodedText.Encode("time_zone");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");

	public override Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool?> propAllowLeadingWildcard = default;
		LocalJsonValue<string?> propAnalyzer = default;
		LocalJsonValue<bool?> propAnalyzeWildcard = default;
		LocalJsonValue<bool?> propAutoGenerateSynonymsPhraseQuery = default;
		LocalJsonValue<float?> propBoost = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propDefaultField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.Operator?> propDefaultOperator = default;
		LocalJsonValue<bool?> propEnablePositionIncrements = default;
		LocalJsonValue<bool?> propEscape = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propFields = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fuzziness?> propFuzziness = default;
		LocalJsonValue<int?> propFuzzyMaxExpansions = default;
		LocalJsonValue<int?> propFuzzyPrefixLength = default;
		LocalJsonValue<string?> propFuzzyRewrite = default;
		LocalJsonValue<bool?> propFuzzyTranspositions = default;
		LocalJsonValue<bool?> propLenient = default;
		LocalJsonValue<int?> propMaxDeterminizedStates = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.MinimumShouldMatch?> propMinimumShouldMatch = default;
		LocalJsonValue<double?> propPhraseSlop = default;
		LocalJsonValue<string> propQuery = default;
		LocalJsonValue<string?> propQueryName = default;
		LocalJsonValue<string?> propQuoteAnalyzer = default;
		LocalJsonValue<string?> propQuoteFieldSuffix = default;
		LocalJsonValue<string?> propRewrite = default;
		LocalJsonValue<double?> propTieBreaker = default;
		LocalJsonValue<string?> propTimeZone = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType?> propType = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAllowLeadingWildcard.TryReadProperty(ref reader, options, PropAllowLeadingWildcard, null))
			{
				continue;
			}

			if (propAnalyzer.TryReadProperty(ref reader, options, PropAnalyzer, null))
			{
				continue;
			}

			if (propAnalyzeWildcard.TryReadProperty(ref reader, options, PropAnalyzeWildcard, null))
			{
				continue;
			}

			if (propAutoGenerateSynonymsPhraseQuery.TryReadProperty(ref reader, options, PropAutoGenerateSynonymsPhraseQuery, null))
			{
				continue;
			}

			if (propBoost.TryReadProperty(ref reader, options, PropBoost, null))
			{
				continue;
			}

			if (propDefaultField.TryReadProperty(ref reader, options, PropDefaultField, null))
			{
				continue;
			}

			if (propDefaultOperator.TryReadProperty(ref reader, options, PropDefaultOperator, null))
			{
				continue;
			}

			if (propEnablePositionIncrements.TryReadProperty(ref reader, options, PropEnablePositionIncrements, null))
			{
				continue;
			}

			if (propEscape.TryReadProperty(ref reader, options, PropEscape, null))
			{
				continue;
			}

			if (propFields.TryReadProperty(ref reader, options, PropFields, null))
			{
				continue;
			}

			if (propFuzziness.TryReadProperty(ref reader, options, PropFuzziness, null))
			{
				continue;
			}

			if (propFuzzyMaxExpansions.TryReadProperty(ref reader, options, PropFuzzyMaxExpansions, null))
			{
				continue;
			}

			if (propFuzzyPrefixLength.TryReadProperty(ref reader, options, PropFuzzyPrefixLength, null))
			{
				continue;
			}

			if (propFuzzyRewrite.TryReadProperty(ref reader, options, PropFuzzyRewrite, null))
			{
				continue;
			}

			if (propFuzzyTranspositions.TryReadProperty(ref reader, options, PropFuzzyTranspositions, null))
			{
				continue;
			}

			if (propLenient.TryReadProperty(ref reader, options, PropLenient, null))
			{
				continue;
			}

			if (propMaxDeterminizedStates.TryReadProperty(ref reader, options, PropMaxDeterminizedStates, null))
			{
				continue;
			}

			if (propMinimumShouldMatch.TryReadProperty(ref reader, options, PropMinimumShouldMatch, null))
			{
				continue;
			}

			if (propPhraseSlop.TryReadProperty(ref reader, options, PropPhraseSlop, null))
			{
				continue;
			}

			if (propQuery.TryReadProperty(ref reader, options, PropQuery, null))
			{
				continue;
			}

			if (propQueryName.TryReadProperty(ref reader, options, PropQueryName, null))
			{
				continue;
			}

			if (propQuoteAnalyzer.TryReadProperty(ref reader, options, PropQuoteAnalyzer, null))
			{
				continue;
			}

			if (propQuoteFieldSuffix.TryReadProperty(ref reader, options, PropQuoteFieldSuffix, null))
			{
				continue;
			}

			if (propRewrite.TryReadProperty(ref reader, options, PropRewrite, null))
			{
				continue;
			}

			if (propTieBreaker.TryReadProperty(ref reader, options, PropTieBreaker, null))
			{
				continue;
			}

			if (propTimeZone.TryReadProperty(ref reader, options, PropTimeZone, null))
			{
				continue;
			}

			if (propType.TryReadProperty(ref reader, options, PropType, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			AllowLeadingWildcard = propAllowLeadingWildcard.Value,
			Analyzer = propAnalyzer.Value,
			AnalyzeWildcard = propAnalyzeWildcard.Value,
			AutoGenerateSynonymsPhraseQuery = propAutoGenerateSynonymsPhraseQuery.Value,
			Boost = propBoost.Value,
			DefaultField = propDefaultField.Value,
			DefaultOperator = propDefaultOperator.Value,
			EnablePositionIncrements = propEnablePositionIncrements.Value,
			Escape = propEscape.Value,
			Fields = propFields.Value,
			Fuzziness = propFuzziness.Value,
			FuzzyMaxExpansions = propFuzzyMaxExpansions.Value,
			FuzzyPrefixLength = propFuzzyPrefixLength.Value,
			FuzzyRewrite = propFuzzyRewrite.Value,
			FuzzyTranspositions = propFuzzyTranspositions.Value,
			Lenient = propLenient.Value,
			MaxDeterminizedStates = propMaxDeterminizedStates.Value,
			MinimumShouldMatch = propMinimumShouldMatch.Value,
			PhraseSlop = propPhraseSlop.Value,
			Query = propQuery.Value,
			QueryName = propQueryName.Value,
			QuoteAnalyzer = propQuoteAnalyzer.Value,
			QuoteFieldSuffix = propQuoteFieldSuffix.Value,
			Rewrite = propRewrite.Value,
			TieBreaker = propTieBreaker.Value,
			TimeZone = propTimeZone.Value,
			Type = propType.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAllowLeadingWildcard, value.AllowLeadingWildcard, null, null);
		writer.WriteProperty(options, PropAnalyzer, value.Analyzer, null, null);
		writer.WriteProperty(options, PropAnalyzeWildcard, value.AnalyzeWildcard, null, null);
		writer.WriteProperty(options, PropAutoGenerateSynonymsPhraseQuery, value.AutoGenerateSynonymsPhraseQuery, null, null);
		writer.WriteProperty(options, PropBoost, value.Boost, null, null);
		writer.WriteProperty(options, PropDefaultField, value.DefaultField, null, null);
		writer.WriteProperty(options, PropDefaultOperator, value.DefaultOperator, null, null);
		writer.WriteProperty(options, PropEnablePositionIncrements, value.EnablePositionIncrements, null, null);
		writer.WriteProperty(options, PropEscape, value.Escape, null, null);
		writer.WriteProperty(options, PropFields, value.Fields, null, null);
		writer.WriteProperty(options, PropFuzziness, value.Fuzziness, null, null);
		writer.WriteProperty(options, PropFuzzyMaxExpansions, value.FuzzyMaxExpansions, null, null);
		writer.WriteProperty(options, PropFuzzyPrefixLength, value.FuzzyPrefixLength, null, null);
		writer.WriteProperty(options, PropFuzzyRewrite, value.FuzzyRewrite, null, null);
		writer.WriteProperty(options, PropFuzzyTranspositions, value.FuzzyTranspositions, null, null);
		writer.WriteProperty(options, PropLenient, value.Lenient, null, null);
		writer.WriteProperty(options, PropMaxDeterminizedStates, value.MaxDeterminizedStates, null, null);
		writer.WriteProperty(options, PropMinimumShouldMatch, value.MinimumShouldMatch, null, null);
		writer.WriteProperty(options, PropPhraseSlop, value.PhraseSlop, null, null);
		writer.WriteProperty(options, PropQuery, value.Query, null, null);
		writer.WriteProperty(options, PropQueryName, value.QueryName, null, null);
		writer.WriteProperty(options, PropQuoteAnalyzer, value.QuoteAnalyzer, null, null);
		writer.WriteProperty(options, PropQuoteFieldSuffix, value.QuoteFieldSuffix, null, null);
		writer.WriteProperty(options, PropRewrite, value.Rewrite, null, null);
		writer.WriteProperty(options, PropTieBreaker, value.TieBreaker, null, null);
		writer.WriteProperty(options, PropTimeZone, value.TimeZone, null, null);
		writer.WriteProperty(options, PropType, value.Type, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryConverter))]
public sealed partial class QueryStringQuery
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public QueryStringQuery(string query)
	{
		Query = query;
	}
#if NET7_0_OR_GREATER
	public QueryStringQuery()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public QueryStringQuery()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the wildcard characters <c>*</c> and <c>?</c> are allowed as the first character of the query string.
	/// </para>
	/// </summary>
	public bool? AllowLeadingWildcard { get; set; }

	/// <summary>
	/// <para>
	/// Analyzer used to convert text in the query string into tokens.
	/// </para>
	/// </summary>
	public string? Analyzer { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the query attempts to analyze wildcard terms in the query string.
	/// </para>
	/// </summary>
	public bool? AnalyzeWildcard { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, match phrase queries are automatically created for multi-term synonyms.
	/// </para>
	/// </summary>
	public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public float? Boost { get; set; }

	/// <summary>
	/// <para>
	/// Default field to search if no field is provided in the query string.
	/// Supports wildcards (<c>*</c>).
	/// Defaults to the <c>index.query.default_field</c> index setting, which has a default value of <c>*</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? DefaultField { get; set; }

	/// <summary>
	/// <para>
	/// Default boolean logic used to interpret text in the query string if no operators are specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.Operator? DefaultOperator { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, enable position increments in queries constructed from a <c>query_string</c> search.
	/// </para>
	/// </summary>
	public bool? EnablePositionIncrements { get; set; }
	public bool? Escape { get; set; }

	/// <summary>
	/// <para>
	/// Array of fields to search. Supports wildcards (<c>*</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

	/// <summary>
	/// <para>
	/// Maximum edit distance allowed for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

	/// <summary>
	/// <para>
	/// Maximum number of terms to which the query expands for fuzzy matching.
	/// </para>
	/// </summary>
	public int? FuzzyMaxExpansions { get; set; }

	/// <summary>
	/// <para>
	/// Number of beginning characters left unchanged for fuzzy matching.
	/// </para>
	/// </summary>
	public int? FuzzyPrefixLength { get; set; }

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public string? FuzzyRewrite { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, edits for fuzzy matching include transpositions of two adjacent characters (for example, <c>ab</c> to <c>ba</c>).
	/// </para>
	/// </summary>
	public bool? FuzzyTranspositions { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, format-based errors, such as providing a text value for a numeric field, are ignored.
	/// </para>
	/// </summary>
	public bool? Lenient { get; set; }

	/// <summary>
	/// <para>
	/// Maximum number of automaton states required for the query.
	/// </para>
	/// </summary>
	public int? MaxDeterminizedStates { get; set; }

	/// <summary>
	/// <para>
	/// Minimum number of clauses that must match for a document to be returned.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

	/// <summary>
	/// <para>
	/// Maximum number of positions allowed between matching tokens for phrases.
	/// </para>
	/// </summary>
	public double? PhraseSlop { get; set; }

	/// <summary>
	/// <para>
	/// Query string you wish to parse and use for search.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Query { get; set; }
	public string? QueryName { get; set; }

	/// <summary>
	/// <para>
	/// Analyzer used to convert quoted text in the query string into tokens.
	/// For quoted text, this parameter overrides the analyzer specified in the <c>analyzer</c> parameter.
	/// </para>
	/// </summary>
	public string? QuoteAnalyzer { get; set; }

	/// <summary>
	/// <para>
	/// Suffix appended to quoted text in the query string.
	/// You can use this suffix to use a different analysis method for exact matches.
	/// </para>
	/// </summary>
	public string? QuoteFieldSuffix { get; set; }

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public string? Rewrite { get; set; }

	/// <summary>
	/// <para>
	/// How to combine the queries generated from the individual search terms in the resulting <c>dis_max</c> query.
	/// </para>
	/// </summary>
	public double? TieBreaker { get; set; }

	/// <summary>
	/// <para>
	/// Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query string to UTC.
	/// </para>
	/// </summary>
	public string? TimeZone { get; set; }

	/// <summary>
	/// <para>
	/// Determines how the query matches and scores documents.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? Type { get; set; }
}

public readonly partial struct QueryStringQueryDescriptor<TDocument>
{
	internal Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public QueryStringQueryDescriptor(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public QueryStringQueryDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument>(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery instance) => new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument>(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// If <c>true</c>, the wildcard characters <c>*</c> and <c>?</c> are allowed as the first character of the query string.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> AllowLeadingWildcard(bool? value = true)
	{
		Instance.AllowLeadingWildcard = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Analyzer used to convert text in the query string into tokens.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Analyzer(string? value)
	{
		Instance.Analyzer = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the query attempts to analyze wildcard terms in the query string.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> AnalyzeWildcard(bool? value = true)
	{
		Instance.AnalyzeWildcard = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, match phrase queries are automatically created for multi-term synonyms.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> AutoGenerateSynonymsPhraseQuery(bool? value = true)
	{
		Instance.AutoGenerateSynonymsPhraseQuery = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Boost(float? value)
	{
		Instance.Boost = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default field to search if no field is provided in the query string.
	/// Supports wildcards (<c>*</c>).
	/// Defaults to the <c>index.query.default_field</c> index setting, which has a default value of <c>*</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> DefaultField(Elastic.Clients.Elasticsearch.Field? value)
	{
		Instance.DefaultField = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default field to search if no field is provided in the query string.
	/// Supports wildcards (<c>*</c>).
	/// Defaults to the <c>index.query.default_field</c> index setting, which has a default value of <c>*</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> DefaultField(System.Linq.Expressions.Expression<System.Func<TDocument, object?>> value)
	{
		Instance.DefaultField = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default boolean logic used to interpret text in the query string if no operators are specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> DefaultOperator(Elastic.Clients.Elasticsearch.QueryDsl.Operator? value)
	{
		Instance.DefaultOperator = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, enable position increments in queries constructed from a <c>query_string</c> search.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> EnablePositionIncrements(bool? value = true)
	{
		Instance.EnablePositionIncrements = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Escape(bool? value = true)
	{
		Instance.Escape = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Array of fields to search. Supports wildcards (<c>*</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Fields? value)
	{
		Instance.Fields = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Array of fields to search. Supports wildcards (<c>*</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Fields(params System.Linq.Expressions.Expression<System.Func<TDocument, object?>>[] value)
	{
		Instance.Fields = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum edit distance allowed for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Fuzziness(Elastic.Clients.Elasticsearch.Fuzziness? value)
	{
		Instance.Fuzziness = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum edit distance allowed for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Fuzziness(System.Func<Elastic.Clients.Elasticsearch.FuzzinessBuilder, Elastic.Clients.Elasticsearch.Fuzziness> action)
	{
		Instance.Fuzziness = Elastic.Clients.Elasticsearch.FuzzinessBuilder.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of terms to which the query expands for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> FuzzyMaxExpansions(int? value)
	{
		Instance.FuzzyMaxExpansions = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Number of beginning characters left unchanged for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> FuzzyPrefixLength(int? value)
	{
		Instance.FuzzyPrefixLength = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> FuzzyRewrite(string? value)
	{
		Instance.FuzzyRewrite = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, edits for fuzzy matching include transpositions of two adjacent characters (for example, <c>ab</c> to <c>ba</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> FuzzyTranspositions(bool? value = true)
	{
		Instance.FuzzyTranspositions = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, format-based errors, such as providing a text value for a numeric field, are ignored.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Lenient(bool? value = true)
	{
		Instance.Lenient = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of automaton states required for the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> MaxDeterminizedStates(int? value)
	{
		Instance.MaxDeterminizedStates = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Minimum number of clauses that must match for a document to be returned.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> MinimumShouldMatch(Elastic.Clients.Elasticsearch.MinimumShouldMatch? value)
	{
		Instance.MinimumShouldMatch = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of positions allowed between matching tokens for phrases.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> PhraseSlop(double? value)
	{
		Instance.PhraseSlop = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Query string you wish to parse and use for search.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Query(string value)
	{
		Instance.Query = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> QueryName(string? value)
	{
		Instance.QueryName = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Analyzer used to convert quoted text in the query string into tokens.
	/// For quoted text, this parameter overrides the analyzer specified in the <c>analyzer</c> parameter.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> QuoteAnalyzer(string? value)
	{
		Instance.QuoteAnalyzer = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Suffix appended to quoted text in the query string.
	/// You can use this suffix to use a different analysis method for exact matches.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> QuoteFieldSuffix(string? value)
	{
		Instance.QuoteFieldSuffix = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Rewrite(string? value)
	{
		Instance.Rewrite = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// How to combine the queries generated from the individual search terms in the resulting <c>dis_max</c> query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> TieBreaker(double? value)
	{
		Instance.TieBreaker = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query string to UTC.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> TimeZone(string? value)
	{
		Instance.TimeZone = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Determines how the query matches and scores documents.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument> Type(Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? value)
	{
		Instance.Type = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery Build(System.Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument>> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor<TDocument>(new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}

public readonly partial struct QueryStringQueryDescriptor
{
	internal Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public QueryStringQueryDescriptor(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public QueryStringQueryDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery instance) => new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// If <c>true</c>, the wildcard characters <c>*</c> and <c>?</c> are allowed as the first character of the query string.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor AllowLeadingWildcard(bool? value = true)
	{
		Instance.AllowLeadingWildcard = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Analyzer used to convert text in the query string into tokens.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Analyzer(string? value)
	{
		Instance.Analyzer = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the query attempts to analyze wildcard terms in the query string.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor AnalyzeWildcard(bool? value = true)
	{
		Instance.AnalyzeWildcard = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, match phrase queries are automatically created for multi-term synonyms.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor AutoGenerateSynonymsPhraseQuery(bool? value = true)
	{
		Instance.AutoGenerateSynonymsPhraseQuery = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Boost(float? value)
	{
		Instance.Boost = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default field to search if no field is provided in the query string.
	/// Supports wildcards (<c>*</c>).
	/// Defaults to the <c>index.query.default_field</c> index setting, which has a default value of <c>*</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor DefaultField(Elastic.Clients.Elasticsearch.Field? value)
	{
		Instance.DefaultField = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default field to search if no field is provided in the query string.
	/// Supports wildcards (<c>*</c>).
	/// Defaults to the <c>index.query.default_field</c> index setting, which has a default value of <c>*</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor DefaultField<T>(System.Linq.Expressions.Expression<System.Func<T, object?>> value)
	{
		Instance.DefaultField = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Default boolean logic used to interpret text in the query string if no operators are specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor DefaultOperator(Elastic.Clients.Elasticsearch.QueryDsl.Operator? value)
	{
		Instance.DefaultOperator = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, enable position increments in queries constructed from a <c>query_string</c> search.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor EnablePositionIncrements(bool? value = true)
	{
		Instance.EnablePositionIncrements = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Escape(bool? value = true)
	{
		Instance.Escape = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Array of fields to search. Supports wildcards (<c>*</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Fields(Elastic.Clients.Elasticsearch.Fields? value)
	{
		Instance.Fields = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Array of fields to search. Supports wildcards (<c>*</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Fields<T>(params System.Linq.Expressions.Expression<System.Func<T, object?>>[] value)
	{
		Instance.Fields = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum edit distance allowed for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Fuzziness(Elastic.Clients.Elasticsearch.Fuzziness? value)
	{
		Instance.Fuzziness = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum edit distance allowed for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Fuzziness(System.Func<Elastic.Clients.Elasticsearch.FuzzinessBuilder, Elastic.Clients.Elasticsearch.Fuzziness> action)
	{
		Instance.Fuzziness = Elastic.Clients.Elasticsearch.FuzzinessBuilder.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of terms to which the query expands for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor FuzzyMaxExpansions(int? value)
	{
		Instance.FuzzyMaxExpansions = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Number of beginning characters left unchanged for fuzzy matching.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor FuzzyPrefixLength(int? value)
	{
		Instance.FuzzyPrefixLength = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor FuzzyRewrite(string? value)
	{
		Instance.FuzzyRewrite = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, edits for fuzzy matching include transpositions of two adjacent characters (for example, <c>ab</c> to <c>ba</c>).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor FuzzyTranspositions(bool? value = true)
	{
		Instance.FuzzyTranspositions = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, format-based errors, such as providing a text value for a numeric field, are ignored.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Lenient(bool? value = true)
	{
		Instance.Lenient = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of automaton states required for the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor MaxDeterminizedStates(int? value)
	{
		Instance.MaxDeterminizedStates = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Minimum number of clauses that must match for a document to be returned.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor MinimumShouldMatch(Elastic.Clients.Elasticsearch.MinimumShouldMatch? value)
	{
		Instance.MinimumShouldMatch = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum number of positions allowed between matching tokens for phrases.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor PhraseSlop(double? value)
	{
		Instance.PhraseSlop = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Query string you wish to parse and use for search.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Query(string value)
	{
		Instance.Query = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor QueryName(string? value)
	{
		Instance.QueryName = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Analyzer used to convert quoted text in the query string into tokens.
	/// For quoted text, this parameter overrides the analyzer specified in the <c>analyzer</c> parameter.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor QuoteAnalyzer(string? value)
	{
		Instance.QuoteAnalyzer = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Suffix appended to quoted text in the query string.
	/// You can use this suffix to use a different analysis method for exact matches.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor QuoteFieldSuffix(string? value)
	{
		Instance.QuoteFieldSuffix = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Method used to rewrite the query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Rewrite(string? value)
	{
		Instance.Rewrite = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// How to combine the queries generated from the individual search terms in the resulting <c>dis_max</c> query.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor TieBreaker(double? value)
	{
		Instance.TieBreaker = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query string to UTC.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor TimeZone(string? value)
	{
		Instance.TimeZone = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Determines how the query matches and scores documents.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor Type(Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? value)
	{
		Instance.Type = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery Build(System.Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQueryDescriptor(new Elastic.Clients.Elasticsearch.QueryDsl.QueryStringQuery(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}