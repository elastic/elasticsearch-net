// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IBoolQuery, BoolQuery>))]
	public partial interface IBoolQuery : QueryDsl.IQueryContainerVariant
	{
		IEnumerable<QueryDsl.IQueryContainer>? Filter { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		IEnumerable<QueryDsl.IQueryContainer>? Must { get; set; }

		IEnumerable<QueryDsl.IQueryContainer>? MustNot { get; set; }

		IEnumerable<QueryDsl.IQueryContainer>? Should { get; set; }
	}

	public partial class BoolQuery : QueryDsl.QueryBase, QueryDsl.IBoolQuery
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public IEnumerable<QueryDsl.IQueryContainer>? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("must")]
		public IEnumerable<QueryDsl.IQueryContainer>? Must { get; set; }

		[JsonInclude]
		[JsonPropertyName("must_not")]
		public IEnumerable<QueryDsl.IQueryContainer>? MustNot { get; set; }

		[JsonInclude]
		[JsonPropertyName("should")]
		public IEnumerable<QueryDsl.IQueryContainer>? Should { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Bool = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IBoostingQuery, BoostingQuery>))]
	public partial interface IBoostingQuery : QueryDsl.IQueryContainerVariant
	{
		double NegativeBoost { get; set; }

		QueryDsl.IQueryContainer Negative { get; set; }

		QueryDsl.IQueryContainer Positive { get; set; }
	}

	public partial class BoostingQuery : QueryDsl.QueryBase, QueryDsl.IBoostingQuery
	{
		[JsonInclude]
		[JsonPropertyName("negative_boost")]
		public double NegativeBoost { get; set; }

		[JsonInclude]
		[JsonPropertyName("negative")]
		public QueryDsl.IQueryContainer Negative { get; set; }

		[JsonInclude]
		[JsonPropertyName("positive")]
		public QueryDsl.IQueryContainer Positive { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Boosting = this;
	}

	[InterfaceConverterAttribute(typeof(BoundingBoxDescriptorConverter<BoundingBox>))]
	public partial interface IBoundingBox
	{
		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopLeft { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomLeft { get; set; }

		double? Top { get; set; }

		double? Left { get; set; }

		double? Right { get; set; }

		double? Bottom { get; set; }

		string? Wkt { get; set; }
	}

	public partial class BoundingBox : QueryDsl.IBoundingBox
	{
		[JsonInclude]
		[JsonPropertyName("bottom_right")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomRight { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_left")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopLeft { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_right")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopRight { get; set; }

		[JsonInclude]
		[JsonPropertyName("bottom_left")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomLeft { get; set; }

		[JsonInclude]
		[JsonPropertyName("top")]
		public double? Top { get; set; }

		[JsonInclude]
		[JsonPropertyName("left")]
		public double? Left { get; set; }

		[JsonInclude]
		[JsonPropertyName("right")]
		public double? Right { get; set; }

		[JsonInclude]
		[JsonPropertyName("bottom")]
		public double? Bottom { get; set; }

		[JsonInclude]
		[JsonPropertyName("wkt")]
		public string? Wkt { get; set; }
	}

	public partial class BoundingBoxDescriptor : DescriptorBase<BoundingBoxDescriptor, IBoundingBox>, IBoundingBox
	{
		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.BottomRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.TopLeft { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.TopRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.BottomLeft { get; set; }

		double? IBoundingBox.Top { get; set; }

		double? IBoundingBox.Left { get; set; }

		double? IBoundingBox.Right { get; set; }

		double? IBoundingBox.Bottom { get; set; }

		string? IBoundingBox.Wkt { get; set; }
	}

	public class BoundingBoxDescriptorConverter<TReadAs> : JsonConverter<IBoundingBox> where TReadAs : class, IBoundingBox
	{
		public override IBoundingBox Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IBoundingBox value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.BottomRight is not null)
			{
				writer.WritePropertyName("bottom_right");
				JsonSerializer.Serialize(writer, value.BottomRight, options);
			}

			if (value.TopLeft is not null)
			{
				writer.WritePropertyName("top_left");
				JsonSerializer.Serialize(writer, value.TopLeft, options);
			}

			if (value.TopRight is not null)
			{
				writer.WritePropertyName("top_right");
				JsonSerializer.Serialize(writer, value.TopRight, options);
			}

			if (value.BottomLeft is not null)
			{
				writer.WritePropertyName("bottom_left");
				JsonSerializer.Serialize(writer, value.BottomLeft, options);
			}

			if (value.Top.HasValue)
			{
				writer.WritePropertyName("top");
				writer.WriteNumberValue(value.Top.Value);
			}

			if (value.Left.HasValue)
			{
				writer.WritePropertyName("left");
				writer.WriteNumberValue(value.Left.Value);
			}

			if (value.Right.HasValue)
			{
				writer.WritePropertyName("right");
				writer.WriteNumberValue(value.Right.Value);
			}

			if (value.Bottom.HasValue)
			{
				writer.WritePropertyName("bottom");
				writer.WriteNumberValue(value.Bottom.Value);
			}

			if (!string.IsNullOrEmpty(value.Wkt))
			{
				writer.WritePropertyName("wkt");
				writer.WriteStringValue(value.Wkt);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ICombinedFieldsQuery, CombinedFieldsQuery>))]
	public partial interface ICombinedFieldsQuery : QueryDsl.IQueryContainerVariant
	{
		IEnumerable<string> Fields { get; set; }

		string Query { get; set; }

		bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsOperator? Operator { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MimimumShouldMatch { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsZeroTerms? ZeroTermsQuery { get; set; }
	}

	public partial class CombinedFieldsQuery : QueryDsl.QueryBase, QueryDsl.ICombinedFieldsQuery
	{
		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<string> Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsOperator? Operator { get; set; }

		[JsonInclude]
		[JsonPropertyName("mimimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MimimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("zero_terms_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.CombinedFieldsZeroTerms? ZeroTermsQuery { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.CombinedFields = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IConstantScoreQuery, ConstantScoreQuery>))]
	public partial interface IConstantScoreQuery : QueryDsl.IQueryContainerVariant
	{
		QueryDsl.IQueryContainer Filter { get; set; }
	}

	public partial class ConstantScoreQuery : QueryDsl.QueryBase, QueryDsl.IConstantScoreQuery
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IQueryContainer Filter { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.ConstantScore = this;
	}

	public partial class DateDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	public partial class DateDistanceFeatureQuery<TOrigin, TDistance> : QueryDsl.DistanceFeatureQueryBase<TOrigin, TDistance>
	{
	}

	public partial class DateRangeQuery : QueryDsl.RangeQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("gt")]
		public string? Gt { get; init; }

		[JsonInclude]
		[JsonPropertyName("gte")]
		public string? Gte { get; init; }

		[JsonInclude]
		[JsonPropertyName("lt")]
		public string? Lt { get; init; }

		[JsonInclude]
		[JsonPropertyName("lte")]
		public string? Lte { get; init; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public string? From { get; init; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public string? To { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; init; }
	}

	public abstract partial class DecayFunctionBase : QueryDsl.ScoreFunctionBase
	{
		[JsonInclude]
		[JsonPropertyName("multi_value_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.MultiValueMode? MultiValueMode { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IDisMaxQuery, DisMaxQuery>))]
	public partial interface IDisMaxQuery : QueryDsl.IQueryContainerVariant
	{
		IEnumerable<QueryDsl.IQueryContainer> Queries { get; set; }

		double? TieBreaker { get; set; }
	}

	public partial class DisMaxQuery : QueryDsl.QueryBase, QueryDsl.IDisMaxQuery
	{
		[JsonInclude]
		[JsonPropertyName("queries")]
		public IEnumerable<QueryDsl.IQueryContainer> Queries { get; set; }

		[JsonInclude]
		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.DisMax = this;
	}

	public abstract partial class DistanceFeatureQueryBase<TOrigin, TDistance> : QueryDsl.QueryBase
	{
		[JsonInclude]
		[JsonPropertyName("origin")]
		public TOrigin Origin { get; init; }

		[JsonInclude]
		[JsonPropertyName("pivot")]
		public TDistance Pivot { get; init; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IExistsQuery, ExistsQuery>))]
	public partial interface IExistsQuery : QueryDsl.IQueryContainerVariant
	{
		string Field { get; set; }
	}

	public partial class ExistsQuery : QueryDsl.QueryBase, QueryDsl.IExistsQuery
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Exists = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IFieldValueFactorScoreFunction, FieldValueFactorScoreFunction>))]
	public partial interface IFieldValueFactorScoreFunction : QueryDsl.IFunctionScoreContainerVariant
	{
		string Field { get; set; }

		double? Factor { get; set; }

		double? Missing { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.FieldValueFactorModifier? Modifier { get; set; }
	}

	public partial class FieldValueFactorScoreFunction : QueryDsl.ScoreFunctionBase, QueryDsl.IFieldValueFactorScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("factor")]
		public double? Factor { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("modifier")]
		public Elastic.Clients.Elasticsearch.QueryDsl.FieldValueFactorModifier? Modifier { get; set; }

		void QueryDsl.IFunctionScoreContainerVariant.WrapInContainer(QueryDsl.IFunctionScoreContainer container) => container.FieldValueFactor = this;
	}

	public interface IFunctionScoreContainerVariant
	{
		void WrapInContainer(IFunctionScoreContainer container);
	}

	[InterfaceConverterAttribute(typeof(FunctionScoreContainerDescriptorConverter<FunctionScoreContainer>))]
	public partial interface IFunctionScoreContainer
	{
		[JsonInclude]
		[JsonPropertyName("field_value_factor")]
		QueryDsl.IFieldValueFactorScoreFunction? FieldValueFactor { get; set; }

		[JsonInclude]
		[JsonPropertyName("random_score")]
		QueryDsl.IRandomScoreFunction? RandomScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_score")]
		QueryDsl.IScriptScoreFunction? ScriptScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("weight")]
		double? Weight { get; set; }
	}

	public partial class FunctionScoreContainer : QueryDsl.IFunctionScoreContainer
	{
		public FunctionScoreContainer(IFunctionScoreContainerVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.IFieldValueFactorScoreFunction? _fieldValueFactor;
		private QueryDsl.IRandomScoreFunction? _randomScore;
		private QueryDsl.IScriptScoreFunction? _scriptScore;
		QueryDsl.IFieldValueFactorScoreFunction? IFunctionScoreContainer.FieldValueFactor { get => _fieldValueFactor; set => _fieldValueFactor = Set(value); }

		QueryDsl.IRandomScoreFunction? IFunctionScoreContainer.RandomScore { get => _randomScore; set => _randomScore = Set(value); }

		QueryDsl.IScriptScoreFunction? IFunctionScoreContainer.ScriptScore { get => _scriptScore; set => _scriptScore = Set(value); }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("weight")]
		public double? Weight { get; set; }

		[JsonIgnore]
		internal IFunctionScoreContainerVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IFunctionScoreContainerVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}
	}

	public partial class FunctionScoreContainerDescriptor : IFunctionScoreContainer
	{
		QueryDsl.IFieldValueFactorScoreFunction? IFunctionScoreContainer.FieldValueFactor { get; set; }

		QueryDsl.IRandomScoreFunction? IFunctionScoreContainer.RandomScore { get; set; }

		QueryDsl.IScriptScoreFunction? IFunctionScoreContainer.ScriptScore { get; set; }

		QueryDsl.IQueryContainer? IFunctionScoreContainer.Filter { get; set; }

		double? IFunctionScoreContainer.Weight { get; set; }
	}

	public class FunctionScoreContainerDescriptorConverter<TReadAs> : JsonConverter<IFunctionScoreContainer> where TReadAs : class, IFunctionScoreContainer
	{
		public override IFunctionScoreContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IFunctionScoreContainer value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.FieldValueFactor is not null)
			{
				writer.WritePropertyName("field_value_factor");
				JsonSerializer.Serialize(writer, value.FieldValueFactor, options);
			}

			if (value.RandomScore is not null)
			{
				writer.WritePropertyName("random_score");
				JsonSerializer.Serialize(writer, value.RandomScore, options);
			}

			if (value.ScriptScore is not null)
			{
				writer.WritePropertyName("script_score");
				JsonSerializer.Serialize(writer, value.ScriptScore, options);
			}

			if (value.Filter is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, value.Filter, options);
			}

			if (value.Weight.HasValue)
			{
				writer.WritePropertyName("weight");
				writer.WriteNumberValue(value.Weight.Value);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IFunctionScoreQuery, FunctionScoreQuery>))]
	public partial interface IFunctionScoreQuery : QueryDsl.IQueryContainerVariant
	{
		Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? BoostMode { get; set; }

		IEnumerable<QueryDsl.IFunctionScoreContainer>? Functions { get; set; }

		double? MaxBoost { get; set; }

		double? MinScore { get; set; }

		QueryDsl.IQueryContainer? Query { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? ScoreMode { get; set; }
	}

	public partial class FunctionScoreQuery : QueryDsl.QueryBase, QueryDsl.IFunctionScoreQuery
	{
		[JsonInclude]
		[JsonPropertyName("boost_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? BoostMode { get; set; }

		[JsonInclude]
		[JsonPropertyName("functions")]
		public IEnumerable<QueryDsl.IFunctionScoreContainer>? Functions { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_boost")]
		public double? MaxBoost { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer? Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("score_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? ScoreMode { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.FunctionScore = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IFuzzyQuery, FuzzyQuery>))]
	public partial interface IFuzzyQuery : QueryDsl.IQueryContainerVariant
	{
		int? MaxExpansions { get; set; }

		int? PrefixLength { get; set; }

		string? Rewrite { get; set; }

		bool? Transpositions { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		object Value { get; set; }
	}

	public partial class FuzzyQuery : FieldNameQueryBase, QueryDsl.IFuzzyQuery
	{
		[JsonInclude]
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("rewrite")]
		public string? Rewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("transpositions")]
		public bool? Transpositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public object Value { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Fuzzy = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IGeoBoundingBoxQuery, GeoBoundingBoxQuery>))]
	public partial interface IGeoBoundingBoxQuery : QueryDsl.IQueryContainerVariant
	{
		Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }

		bool? IgnoreUnmapped { get; set; }
	}

	public partial class GeoBoundingBoxQuery : QueryDsl.QueryBase, QueryDsl.IGeoBoundingBoxQuery
	{
		[JsonInclude]
		[JsonPropertyName("validation_method")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.GeoBoundingBox = this;
	}

	public partial class GeoDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	public partial class GeoDistanceFeatureQuery<TOrigin, TDistance> : QueryDsl.DistanceFeatureQueryBase<TOrigin, TDistance>
	{
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IGeoDistanceQuery, GeoDistanceQuery>))]
	public partial interface IGeoDistanceQuery : QueryDsl.IQueryContainerVariant
	{
		string? Distance { get; set; }

		Elastic.Clients.Elasticsearch.GeoDistanceType? DistanceType { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }
	}

	public partial class GeoDistanceQuery : QueryDsl.QueryBase, QueryDsl.IGeoDistanceQuery
	{
		[JsonInclude]
		[JsonPropertyName("distance")]
		public string? Distance { get; set; }

		[JsonInclude]
		[JsonPropertyName("distance_type")]
		public Elastic.Clients.Elasticsearch.GeoDistanceType? DistanceType { get; set; }

		[JsonInclude]
		[JsonPropertyName("validation_method")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.GeoDistance = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IGeoPolygonQuery, GeoPolygonQuery>))]
	public partial interface IGeoPolygonQuery : QueryDsl.IQueryContainerVariant
	{
		Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }

		bool? IgnoreUnmapped { get; set; }
	}

	public partial class GeoPolygonQuery : QueryDsl.QueryBase, QueryDsl.IGeoPolygonQuery
	{
		[JsonInclude]
		[JsonPropertyName("validation_method")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoValidationMethod? ValidationMethod { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.GeoPolygon = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IGeoShapeQuery, GeoShapeQuery>))]
	public partial interface IGeoShapeQuery : QueryDsl.IQueryContainerVariant
	{
		bool? IgnoreUnmapped { get; set; }
	}

	public partial class GeoShapeQuery : QueryDsl.QueryBase, QueryDsl.IGeoShapeQuery
	{
		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.GeoShape = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IHasChildQuery, HasChildQuery>))]
	public partial interface IHasChildQuery : QueryDsl.IQueryContainerVariant
	{
		bool? IgnoreUnmapped { get; set; }

		IInnerHits? InnerHits { get; set; }

		int? MaxChildren { get; set; }

		int? MinChildren { get; set; }

		QueryDsl.IQueryContainer Query { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.ChildScoreMode? ScoreMode { get; set; }

		string Type { get; set; }
	}

	public partial class HasChildQuery : QueryDsl.QueryBase, QueryDsl.IHasChildQuery
	{
		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public IInnerHits? InnerHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_children")]
		public int? MaxChildren { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_children")]
		public int? MinChildren { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("score_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.ChildScoreMode? ScoreMode { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.HasChild = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IHasParentQuery, HasParentQuery>))]
	public partial interface IHasParentQuery : QueryDsl.IQueryContainerVariant
	{
		bool? IgnoreUnmapped { get; set; }

		IInnerHits? InnerHits { get; set; }

		string ParentType { get; set; }

		QueryDsl.IQueryContainer Query { get; set; }

		bool? Score { get; set; }
	}

	public partial class HasParentQuery : QueryDsl.QueryBase, QueryDsl.IHasParentQuery
	{
		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public IInnerHits? InnerHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("parent_type")]
		public string ParentType { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("score")]
		public bool? Score { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.HasParent = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIdsQuery, IdsQuery>))]
	public partial interface IIdsQuery : QueryDsl.IQueryContainerVariant
	{
		Elastic.Clients.Elasticsearch.Ids? Values { get; set; }
	}

	public partial class IdsQuery : QueryDsl.QueryBase, QueryDsl.IIdsQuery
	{
		[JsonInclude]
		[JsonPropertyName("values")]
		public Elastic.Clients.Elasticsearch.Ids? Values { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Ids = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsAllOf, IntervalsAllOf>))]
	public partial interface IIntervalsAllOf : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		IEnumerable<QueryDsl.IIntervalsContainer> Intervals { get; set; }

		int? MaxGaps { get; set; }

		bool? Ordered { get; set; }

		QueryDsl.IIntervalsFilter? Filter { get; set; }
	}

	public partial class IntervalsAllOf : QueryDsl.IIntervalsAllOf
	{
		[JsonInclude]
		[JsonPropertyName("intervals")]
		public IEnumerable<QueryDsl.IIntervalsContainer> Intervals { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonInclude]
		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IIntervalsFilter? Filter { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.AllOf = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.AllOf = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsAnyOf, IntervalsAnyOf>))]
	public partial interface IIntervalsAnyOf : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		IEnumerable<QueryDsl.IIntervalsContainer> Intervals { get; set; }

		QueryDsl.IIntervalsFilter? Filter { get; set; }
	}

	public partial class IntervalsAnyOf : QueryDsl.IIntervalsAnyOf
	{
		[JsonInclude]
		[JsonPropertyName("intervals")]
		public IEnumerable<QueryDsl.IIntervalsContainer> Intervals { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IIntervalsFilter? Filter { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.AnyOf = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.AnyOf = this;
	}

	public interface IIntervalsContainerVariant
	{
		void WrapInContainer(IIntervalsContainer container);
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsContainer, IntervalsContainer>))]
	public partial interface IIntervalsContainer : QueryDsl.IIntervalsFilterVariant
	{
		[JsonInclude]
		[JsonPropertyName("all_of")]
		QueryDsl.IIntervalsAllOf? AllOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("any_of")]
		QueryDsl.IIntervalsAnyOf? AnyOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy")]
		QueryDsl.IIntervalsFuzzy? Fuzzy { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		QueryDsl.IIntervalsMatch? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix")]
		QueryDsl.IIntervalsPrefix? Prefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("wildcard")]
		QueryDsl.IIntervalsWildcard? Wildcard { get; set; }
	}

	public partial class IntervalsContainer : QueryDsl.IIntervalsContainer
	{
		public IntervalsContainer(IIntervalsContainerVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.IIntervalsAllOf? _allOf;
		private QueryDsl.IIntervalsAnyOf? _anyOf;
		private QueryDsl.IIntervalsFuzzy? _fuzzy;
		private QueryDsl.IIntervalsMatch? _match;
		private QueryDsl.IIntervalsPrefix? _prefix;
		private QueryDsl.IIntervalsWildcard? _wildcard;
		QueryDsl.IIntervalsAllOf? IIntervalsContainer.AllOf { get => _allOf; set => _allOf = Set(value); }

		QueryDsl.IIntervalsAnyOf? IIntervalsContainer.AnyOf { get => _anyOf; set => _anyOf = Set(value); }

		QueryDsl.IIntervalsFuzzy? IIntervalsContainer.Fuzzy { get => _fuzzy; set => _fuzzy = Set(value); }

		QueryDsl.IIntervalsMatch? IIntervalsContainer.Match { get => _match; set => _match = Set(value); }

		QueryDsl.IIntervalsPrefix? IIntervalsContainer.Prefix { get => _prefix; set => _prefix = Set(value); }

		QueryDsl.IIntervalsWildcard? IIntervalsContainer.Wildcard { get => _wildcard; set => _wildcard = Set(value); }

		[JsonIgnore]
		internal IIntervalsContainerVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IIntervalsContainerVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}

		void QueryDsl.IIntervalsFilterVariant.WrapInContainer(QueryDsl.IIntervalsFilter container) => container.After = this;
	}

	public interface IIntervalsFilterVariant
	{
		void WrapInContainer(IIntervalsFilter container);
	}

	[InterfaceConverterAttribute(typeof(IntervalsFilterDescriptorConverter<IntervalsFilter>))]
	public partial interface IIntervalsFilter
	{
		[JsonInclude]
		[JsonPropertyName("after")]
		QueryDsl.IIntervalsContainer? After { get; set; }

		[JsonInclude]
		[JsonPropertyName("before")]
		QueryDsl.IIntervalsContainer? Before { get; set; }

		[JsonInclude]
		[JsonPropertyName("contained_by")]
		QueryDsl.IIntervalsContainer? ContainedBy { get; set; }

		[JsonInclude]
		[JsonPropertyName("containing")]
		QueryDsl.IIntervalsContainer? Containing { get; set; }

		[JsonInclude]
		[JsonPropertyName("not_contained_by")]
		QueryDsl.IIntervalsContainer? NotContainedBy { get; set; }

		[JsonInclude]
		[JsonPropertyName("not_containing")]
		QueryDsl.IIntervalsContainer? NotContaining { get; set; }

		[JsonInclude]
		[JsonPropertyName("not_overlapping")]
		QueryDsl.IIntervalsContainer? NotOverlapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("overlapping")]
		QueryDsl.IIntervalsContainer? Overlapping { get; set; }
	}

	public partial class IntervalsFilter : QueryDsl.IIntervalsFilter
	{
		public IntervalsFilter(IIntervalsFilterVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.IIntervalsContainer? _after;
		private QueryDsl.IIntervalsContainer? _before;
		private QueryDsl.IIntervalsContainer? _containedBy;
		private QueryDsl.IIntervalsContainer? _containing;
		private QueryDsl.IIntervalsContainer? _notContainedBy;
		private QueryDsl.IIntervalsContainer? _notContaining;
		private QueryDsl.IIntervalsContainer? _notOverlapping;
		private QueryDsl.IIntervalsContainer? _overlapping;
		QueryDsl.IIntervalsContainer? IIntervalsFilter.After { get => _after; set => _after = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Before { get => _before; set => _before = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.ContainedBy { get => _containedBy; set => _containedBy = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Containing { get => _containing; set => _containing = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotContainedBy { get => _notContainedBy; set => _notContainedBy = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotContaining { get => _notContaining; set => _notContaining = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotOverlapping { get => _notOverlapping; set => _notOverlapping = Set(value); }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Overlapping { get => _overlapping; set => _overlapping = Set(value); }

		[JsonIgnore]
		internal IIntervalsFilterVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IIntervalsFilterVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}
	}

	public partial class IntervalsFilterDescriptor : IIntervalsFilter
	{
		QueryDsl.IIntervalsContainer? IIntervalsFilter.After { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Before { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.ContainedBy { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Containing { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotContainedBy { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotContaining { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.NotOverlapping { get; set; }

		QueryDsl.IIntervalsContainer? IIntervalsFilter.Overlapping { get; set; }
	}

	public class IntervalsFilterDescriptorConverter<TReadAs> : JsonConverter<IIntervalsFilter> where TReadAs : class, IIntervalsFilter
	{
		public override IIntervalsFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IIntervalsFilter value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.After is not null)
			{
				writer.WritePropertyName("after");
				JsonSerializer.Serialize(writer, value.After, options);
			}

			if (value.Before is not null)
			{
				writer.WritePropertyName("before");
				JsonSerializer.Serialize(writer, value.Before, options);
			}

			if (value.ContainedBy is not null)
			{
				writer.WritePropertyName("contained_by");
				JsonSerializer.Serialize(writer, value.ContainedBy, options);
			}

			if (value.Containing is not null)
			{
				writer.WritePropertyName("containing");
				JsonSerializer.Serialize(writer, value.Containing, options);
			}

			if (value.NotContainedBy is not null)
			{
				writer.WritePropertyName("not_contained_by");
				JsonSerializer.Serialize(writer, value.NotContainedBy, options);
			}

			if (value.NotContaining is not null)
			{
				writer.WritePropertyName("not_containing");
				JsonSerializer.Serialize(writer, value.NotContaining, options);
			}

			if (value.NotOverlapping is not null)
			{
				writer.WritePropertyName("not_overlapping");
				JsonSerializer.Serialize(writer, value.NotOverlapping, options);
			}

			if (value.Overlapping is not null)
			{
				writer.WritePropertyName("overlapping");
				JsonSerializer.Serialize(writer, value.Overlapping, options);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsFuzzy, IntervalsFuzzy>))]
	public partial interface IIntervalsFuzzy : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		string? Analyzer { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		int? PrefixLength { get; set; }

		string Term { get; set; }

		bool? Transpositions { get; set; }

		string? UseField { get; set; }
	}

	public partial class IntervalsFuzzy : QueryDsl.IIntervalsFuzzy
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("term")]
		public string Term { get; set; }

		[JsonInclude]
		[JsonPropertyName("transpositions")]
		public bool? Transpositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public string? UseField { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.Fuzzy = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.Fuzzy = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsMatch, IntervalsMatch>))]
	public partial interface IIntervalsMatch : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		string? Analyzer { get; set; }

		int? MaxGaps { get; set; }

		bool? Ordered { get; set; }

		string Query { get; set; }

		string? UseField { get; set; }

		QueryDsl.IIntervalsFilter? Filter { get; set; }
	}

	public partial class IntervalsMatch : QueryDsl.IIntervalsMatch
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonInclude]
		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public string? UseField { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IIntervalsFilter? Filter { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.Match = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.Match = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsPrefix, IntervalsPrefix>))]
	public partial interface IIntervalsPrefix : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		string? Analyzer { get; set; }

		string Prefix { get; set; }

		string? UseField { get; set; }
	}

	public partial class IntervalsPrefix : QueryDsl.IIntervalsPrefix
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix")]
		public string Prefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public string? UseField { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.Prefix = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.Prefix = this;
	}

	public interface IIntervalsQueryVariant
	{
		void WrapInContainer(IIntervalsQuery container);
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsQuery, IntervalsQuery>))]
	public partial interface IIntervalsQuery : QueryDsl.IQueryContainerVariant
	{
		[JsonInclude]
		[JsonPropertyName("all_of")]
		QueryDsl.IIntervalsAllOf? AllOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("any_of")]
		QueryDsl.IIntervalsAnyOf? AnyOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy")]
		QueryDsl.IIntervalsFuzzy? Fuzzy { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		QueryDsl.IIntervalsMatch? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix")]
		QueryDsl.IIntervalsPrefix? Prefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("wildcard")]
		QueryDsl.IIntervalsWildcard? Wildcard { get; set; }
	}

	public partial class IntervalsQuery : FieldNameQueryBase, QueryDsl.IIntervalsQuery
	{
		public IntervalsQuery(IIntervalsQueryVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.IIntervalsAllOf? _allOf;
		private QueryDsl.IIntervalsAnyOf? _anyOf;
		private QueryDsl.IIntervalsFuzzy? _fuzzy;
		private QueryDsl.IIntervalsMatch? _match;
		private QueryDsl.IIntervalsPrefix? _prefix;
		private QueryDsl.IIntervalsWildcard? _wildcard;
		QueryDsl.IIntervalsAllOf? IIntervalsQuery.AllOf { get => _allOf; set => _allOf = Set(value); }

		QueryDsl.IIntervalsAnyOf? IIntervalsQuery.AnyOf { get => _anyOf; set => _anyOf = Set(value); }

		QueryDsl.IIntervalsFuzzy? IIntervalsQuery.Fuzzy { get => _fuzzy; set => _fuzzy = Set(value); }

		QueryDsl.IIntervalsMatch? IIntervalsQuery.Match { get => _match; set => _match = Set(value); }

		QueryDsl.IIntervalsPrefix? IIntervalsQuery.Prefix { get => _prefix; set => _prefix = Set(value); }

		QueryDsl.IIntervalsWildcard? IIntervalsQuery.Wildcard { get => _wildcard; set => _wildcard = Set(value); }

		[JsonIgnore]
		internal IIntervalsQueryVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IIntervalsQueryVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Intervals = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIntervalsWildcard, IntervalsWildcard>))]
	public partial interface IIntervalsWildcard : QueryDsl.IIntervalsContainerVariant, QueryDsl.IIntervalsQueryVariant
	{
		string? Analyzer { get; set; }

		string Pattern { get; set; }

		string? UseField { get; set; }
	}

	public partial class IntervalsWildcard : QueryDsl.IIntervalsWildcard
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("pattern")]
		public string Pattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public string? UseField { get; set; }

		void QueryDsl.IIntervalsContainerVariant.WrapInContainer(QueryDsl.IIntervalsContainer container) => container.Wildcard = this;
		void QueryDsl.IIntervalsQueryVariant.WrapInContainer(QueryDsl.IIntervalsQuery container) => container.Wildcard = this;
	}

	public partial class LikeDocument
	{
		[JsonInclude]
		[JsonPropertyName("doc")]
		public object? Doc { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IReadOnlyCollection<string>? Fields { get; init; }

		[JsonInclude]
		[JsonPropertyName("_id")]
		public string? Id { get; init; }

		[JsonInclude]
		[JsonPropertyName("_type")]
		public string? Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<string, string>? PerFieldAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("routing")]
		public string? Routing { get; init; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public object? Version { get; init; }

		[JsonInclude]
		[JsonPropertyName("version_type")]
		public Elastic.Clients.Elasticsearch.VersionType? VersionType { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchAllQuery, MatchAllQuery>))]
	public partial interface IMatchAllQuery : QueryDsl.IQueryContainerVariant
	{
	}

	public partial class MatchAllQuery : QueryDsl.QueryBase, QueryDsl.IMatchAllQuery
	{
		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MatchAll = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchBoolPrefixQuery, MatchBoolPrefixQuery>))]
	public partial interface IMatchBoolPrefixQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		string? FuzzyRewrite { get; set; }

		bool? FuzzyTranspositions { get; set; }

		int? MaxExpansions { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		int? PrefixLength { get; set; }

		string Query { get; set; }
	}

	public partial class MatchBoolPrefixQuery : FieldNameQueryBase, QueryDsl.IMatchBoolPrefixQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_rewrite")]
		public string? FuzzyRewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MatchBoolPrefix = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchNoneQuery, MatchNoneQuery>))]
	public partial interface IMatchNoneQuery : QueryDsl.IQueryContainerVariant
	{
	}

	public partial class MatchNoneQuery : QueryDsl.QueryBase, QueryDsl.IMatchNoneQuery
	{
		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MatchNone = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchPhrasePrefixQuery, MatchPhrasePrefixQuery>))]
	public partial interface IMatchPhrasePrefixQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		int? MaxExpansions { get; set; }

		string Query { get; set; }

		int? Slop { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MatchPhrasePrefixQuery : FieldNameQueryBase, QueryDsl.IMatchPhrasePrefixQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonInclude]
		[JsonPropertyName("zero_terms_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MatchPhrasePrefix = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchPhraseQuery, MatchPhraseQuery>))]
	public partial interface IMatchPhraseQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		string Query { get; set; }

		int? Slop { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MatchPhraseQuery : FieldNameQueryBase, QueryDsl.IMatchPhraseQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonInclude]
		[JsonPropertyName("zero_terms_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MatchPhrase = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMatchQuery, MatchQuery>))]
	public partial interface IMatchQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		string? FuzzyRewrite { get; set; }

		bool? FuzzyTranspositions { get; set; }

		bool? Lenient { get; set; }

		int? MaxExpansions { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		int? PrefixLength { get; set; }

		string Query { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MatchQuery : FieldNameQueryBase, QueryDsl.IMatchQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_rewrite")]
		public string? FuzzyRewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("zero_terms_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Match = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMoreLikeThisQuery, MoreLikeThisQuery>))]
	public partial interface IMoreLikeThisQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		double? BoostTerms { get; set; }

		bool? FailOnUnsupportedField { get; set; }

		IEnumerable<string>? Fields { get; set; }

		bool? Include { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.Like> Like { get; set; }

		int? MaxDocFreq { get; set; }

		int? MaxQueryTerms { get; set; }

		int? MaxWordLength { get; set; }

		int? MinDocFreq { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		int? MinTermFreq { get; set; }

		int? MinWordLength { get; set; }

		Dictionary<string, string>? PerFieldAnalyzer { get; set; }

		string? Routing { get; set; }

		Elastic.Clients.Elasticsearch.Analysis.StopWords? StopWords { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.Like>? Unlike { get; set; }

		object? Version { get; set; }

		Elastic.Clients.Elasticsearch.VersionType? VersionType { get; set; }
	}

	public partial class MoreLikeThisQuery : QueryDsl.QueryBase, QueryDsl.IMoreLikeThisQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("boost_terms")]
		public double? BoostTerms { get; set; }

		[JsonInclude]
		[JsonPropertyName("fail_on_unsupported_field")]
		public bool? FailOnUnsupportedField { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<string>? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public bool? Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("like")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.Like> Like { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_doc_freq")]
		public int? MaxDocFreq { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_query_terms")]
		public int? MaxQueryTerms { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_word_length")]
		public int? MaxWordLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_freq")]
		public int? MinDocFreq { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_term_freq")]
		public int? MinTermFreq { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_word_length")]
		public int? MinWordLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<string, string>? PerFieldAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("stop_words")]
		public Elastic.Clients.Elasticsearch.Analysis.StopWords? StopWords { get; set; }

		[JsonInclude]
		[JsonPropertyName("unlike")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.Like>? Unlike { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public object? Version { get; set; }

		[JsonInclude]
		[JsonPropertyName("version_type")]
		public Elastic.Clients.Elasticsearch.VersionType? VersionType { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MoreLikeThis = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IMultiMatchQuery, MultiMatchQuery>))]
	public partial interface IMultiMatchQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		string? FuzzyRewrite { get; set; }

		bool? FuzzyTranspositions { get; set; }

		bool? Lenient { get; set; }

		int? MaxExpansions { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		int? PrefixLength { get; set; }

		string Query { get; set; }

		int? Slop { get; set; }

		double? TieBreaker { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? Type { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }
	}

	public partial class MultiMatchQuery : QueryDsl.QueryBase, QueryDsl.IMultiMatchQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_rewrite")]
		public string? FuzzyRewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_expansions")]
		public int? MaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? Operator { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		[JsonInclude]
		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? Type { get; set; }

		[JsonInclude]
		[JsonPropertyName("zero_terms_query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.ZeroTermsQuery? ZeroTermsQuery { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.MultiMatch = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<INestedQuery, NestedQuery>))]
	public partial interface INestedQuery : QueryDsl.IQueryContainerVariant
	{
		bool? IgnoreUnmapped { get; set; }

		IInnerHits? InnerHits { get; set; }

		string Path { get; set; }

		QueryDsl.IQueryContainer Query { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.NestedScoreMode? ScoreMode { get; set; }
	}

	public partial class NestedQuery : QueryDsl.QueryBase, QueryDsl.INestedQuery
	{
		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("inner_hits")]
		public IInnerHits? InnerHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string Path { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("score_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.NestedScoreMode? ScoreMode { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Nested = this;
	}

	public partial class NumberRangeQuery : QueryDsl.RangeQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("gt")]
		public double? Gt { get; init; }

		[JsonInclude]
		[JsonPropertyName("gte")]
		public double? Gte { get; init; }

		[JsonInclude]
		[JsonPropertyName("lt")]
		public double? Lt { get; init; }

		[JsonInclude]
		[JsonPropertyName("lte")]
		public double? Lte { get; init; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public double? From { get; init; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public double? To { get; init; }
	}

	public partial class NumericDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IParentIdQuery, ParentIdQuery>))]
	public partial interface IParentIdQuery : QueryDsl.IQueryContainerVariant
	{
		string? Id { get; set; }

		bool? IgnoreUnmapped { get; set; }

		string? Type { get; set; }
	}

	public partial class ParentIdQuery : QueryDsl.QueryBase, QueryDsl.IParentIdQuery
	{
		[JsonInclude]
		[JsonPropertyName("id")]
		public string? Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string? Type { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.ParentId = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IPercolateQuery, PercolateQuery>))]
	public partial interface IPercolateQuery : QueryDsl.IQueryContainerVariant
	{
		object? Document { get; set; }

		IEnumerable<object>? Documents { get; set; }

		string Field { get; set; }

		string? Id { get; set; }

		Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		string? Name { get; set; }

		string? Preference { get; set; }

		string? Routing { get; set; }

		object? Version { get; set; }
	}

	public partial class PercolateQuery : QueryDsl.QueryBase, QueryDsl.IPercolateQuery
	{
		[JsonInclude]
		[JsonPropertyName("document")]
		public object? Document { get; set; }

		[JsonInclude]
		[JsonPropertyName("documents")]
		public IEnumerable<object>? Documents { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("id")]
		public string? Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("preference")]
		public string? Preference { get; set; }

		[JsonInclude]
		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public object? Version { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Percolate = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IPinnedDoc, PinnedDoc>))]
	public partial interface IPinnedDoc
	{
		string Id { get; set; }

		Elastic.Clients.Elasticsearch.IndexName Index { get; set; }
	}

	public partial class PinnedDoc : QueryDsl.IPinnedDoc
	{
		[JsonInclude]
		[JsonPropertyName("_id")]
		public string Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }
	}

	public interface IPinnedQueryVariant
	{
		void WrapInContainer(IPinnedQuery container);
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IPinnedQuery, PinnedQuery>))]
	public partial interface IPinnedQuery : QueryDsl.IQueryContainerVariant
	{
		[JsonInclude]
		[JsonPropertyName("organic")]
		QueryDsl.IQueryContainer Organic { get; set; }
	}

	public partial class PinnedQuery : QueryDsl.QueryBase, QueryDsl.IPinnedQuery
	{
		public PinnedQuery(IPinnedQueryVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		[JsonInclude]
		[JsonPropertyName("organic")]
		public QueryDsl.IQueryContainer Organic { get; set; }

		[JsonIgnore]
		internal IPinnedQueryVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IPinnedQueryVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Pinned = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IPrefixQuery, PrefixQuery>))]
	public partial interface IPrefixQuery : QueryDsl.IQueryContainerVariant
	{
		string? Rewrite { get; set; }

		string Value { get; set; }

		bool? CaseInsensitive { get; set; }
	}

	public partial class PrefixQuery : FieldNameQueryBase, QueryDsl.IPrefixQuery
	{
		[JsonInclude]
		[JsonPropertyName("rewrite")]
		public string? Rewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public string Value { get; set; }

		[JsonInclude]
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Prefix = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IQueryBase, QueryBase>))]
	public partial interface IQueryBase
	{
		float? Boost { get; set; }

		string? QueryName { get; set; }
	}

	public abstract partial class QueryBase : QueryDsl.IQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public float? Boost { get; set; }

		[JsonInclude]
		[JsonPropertyName("_name")]
		public string? QueryName { get; set; }
	}

	public interface IQueryContainerVariant
	{
		void WrapInContainer(IQueryContainer container);
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IQueryContainer, QueryContainer>))]
	public partial interface IQueryContainer : Aggregations.IAggregationContainerVariant
	{
		[JsonInclude]
		[JsonPropertyName("bool")]
		QueryDsl.IBoolQuery? Bool { get; set; }

		[JsonInclude]
		[JsonPropertyName("boosting")]
		QueryDsl.IBoostingQuery? Boosting { get; set; }

		[JsonInclude]
		[JsonPropertyName("combined_fields")]
		QueryDsl.ICombinedFieldsQuery? CombinedFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("constant_score")]
		QueryDsl.IConstantScoreQuery? ConstantScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("dis_max")]
		QueryDsl.IDisMaxQuery? DisMax { get; set; }

		[JsonInclude]
		[JsonPropertyName("exists")]
		QueryDsl.IExistsQuery? Exists { get; set; }

		[JsonInclude]
		[JsonPropertyName("function_score")]
		QueryDsl.IFunctionScoreQuery? FunctionScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy")]
		QueryDsl.IFuzzyQuery? Fuzzy { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_bounding_box")]
		QueryDsl.IGeoBoundingBoxQuery? GeoBoundingBox { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_distance")]
		QueryDsl.IGeoDistanceQuery? GeoDistance { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_polygon")]
		QueryDsl.IGeoPolygonQuery? GeoPolygon { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_shape")]
		QueryDsl.IGeoShapeQuery? GeoShape { get; set; }

		[JsonInclude]
		[JsonPropertyName("has_child")]
		QueryDsl.IHasChildQuery? HasChild { get; set; }

		[JsonInclude]
		[JsonPropertyName("has_parent")]
		QueryDsl.IHasParentQuery? HasParent { get; set; }

		[JsonInclude]
		[JsonPropertyName("ids")]
		QueryDsl.IIdsQuery? Ids { get; set; }

		[JsonInclude]
		[JsonPropertyName("intervals")]
		QueryDsl.IIntervalsQuery? Intervals { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		QueryDsl.IMatchQuery? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_all")]
		QueryDsl.IMatchAllQuery? MatchAll { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_bool_prefix")]
		QueryDsl.IMatchBoolPrefixQuery? MatchBoolPrefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_none")]
		QueryDsl.IMatchNoneQuery? MatchNone { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_phrase")]
		QueryDsl.IMatchPhraseQuery? MatchPhrase { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_phrase_prefix")]
		QueryDsl.IMatchPhrasePrefixQuery? MatchPhrasePrefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("more_like_this")]
		QueryDsl.IMoreLikeThisQuery? MoreLikeThis { get; set; }

		[JsonInclude]
		[JsonPropertyName("multi_match")]
		QueryDsl.IMultiMatchQuery? MultiMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("nested")]
		QueryDsl.INestedQuery? Nested { get; set; }

		[JsonInclude]
		[JsonPropertyName("parent_id")]
		QueryDsl.IParentIdQuery? ParentId { get; set; }

		[JsonInclude]
		[JsonPropertyName("percolate")]
		QueryDsl.IPercolateQuery? Percolate { get; set; }

		[JsonInclude]
		[JsonPropertyName("pinned")]
		QueryDsl.IPinnedQuery? Pinned { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix")]
		QueryDsl.IPrefixQuery? Prefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("query_string")]
		QueryDsl.IQueryStringQuery? QueryString { get; set; }

		[JsonInclude]
		[JsonPropertyName("rank_feature")]
		QueryDsl.IRankFeatureQuery? RankFeature { get; set; }

		[JsonInclude]
		[JsonPropertyName("regexp")]
		QueryDsl.IRegexpQuery? Regexp { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		QueryDsl.IScriptQuery? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_score")]
		QueryDsl.IScriptScoreQuery? ScriptScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("shape")]
		QueryDsl.IShapeQuery? Shape { get; set; }

		[JsonInclude]
		[JsonPropertyName("simple_query_string")]
		QueryDsl.ISimpleQueryStringQuery? SimpleQueryString { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_containing")]
		QueryDsl.ISpanContainingQuery? SpanContaining { get; set; }

		[JsonInclude]
		[JsonPropertyName("field_masking_span")]
		QueryDsl.ISpanFieldMaskingQuery? FieldMaskingSpan { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_first")]
		QueryDsl.ISpanFirstQuery? SpanFirst { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_multi")]
		QueryDsl.ISpanMultiTermQuery? SpanMulti { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_near")]
		QueryDsl.ISpanNearQuery? SpanNear { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_not")]
		QueryDsl.ISpanNotQuery? SpanNot { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_or")]
		QueryDsl.ISpanOrQuery? SpanOr { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_term")]
		QueryDsl.ISpanTermQuery? SpanTerm { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_within")]
		QueryDsl.ISpanWithinQuery? SpanWithin { get; set; }

		[JsonInclude]
		[JsonPropertyName("term")]
		QueryDsl.ITermQuery? Term { get; set; }

		[JsonInclude]
		[JsonPropertyName("terms")]
		QueryDsl.ITermsQuery? Terms { get; set; }

		[JsonInclude]
		[JsonPropertyName("terms_set")]
		QueryDsl.ITermsSetQuery? TermsSet { get; set; }

		[JsonInclude]
		[JsonPropertyName("wildcard")]
		QueryDsl.IWildcardQuery? Wildcard { get; set; }
	}

	public partial class QueryContainer : QueryDsl.IQueryContainer
	{
		public QueryContainer(IQueryContainerVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.IBoolQuery? _bool;
		private QueryDsl.IBoostingQuery? _boosting;
		private QueryDsl.ICombinedFieldsQuery? _combinedFields;
		private QueryDsl.IConstantScoreQuery? _constantScore;
		private QueryDsl.IDisMaxQuery? _disMax;
		private QueryDsl.IExistsQuery? _exists;
		private QueryDsl.IFunctionScoreQuery? _functionScore;
		private QueryDsl.IFuzzyQuery? _fuzzy;
		private QueryDsl.IGeoBoundingBoxQuery? _geoBoundingBox;
		private QueryDsl.IGeoDistanceQuery? _geoDistance;
		private QueryDsl.IGeoPolygonQuery? _geoPolygon;
		private QueryDsl.IGeoShapeQuery? _geoShape;
		private QueryDsl.IHasChildQuery? _hasChild;
		private QueryDsl.IHasParentQuery? _hasParent;
		private QueryDsl.IIdsQuery? _ids;
		private QueryDsl.IIntervalsQuery? _intervals;
		private QueryDsl.IMatchQuery? _match;
		private QueryDsl.IMatchAllQuery? _matchAll;
		private QueryDsl.IMatchBoolPrefixQuery? _matchBoolPrefix;
		private QueryDsl.IMatchNoneQuery? _matchNone;
		private QueryDsl.IMatchPhraseQuery? _matchPhrase;
		private QueryDsl.IMatchPhrasePrefixQuery? _matchPhrasePrefix;
		private QueryDsl.IMoreLikeThisQuery? _moreLikeThis;
		private QueryDsl.IMultiMatchQuery? _multiMatch;
		private QueryDsl.INestedQuery? _nested;
		private QueryDsl.IParentIdQuery? _parentId;
		private QueryDsl.IPercolateQuery? _percolate;
		private QueryDsl.IPinnedQuery? _pinned;
		private QueryDsl.IPrefixQuery? _prefix;
		private QueryDsl.IQueryStringQuery? _queryString;
		private QueryDsl.IRankFeatureQuery? _rankFeature;
		private QueryDsl.IRegexpQuery? _regexp;
		private QueryDsl.IScriptQuery? _script;
		private QueryDsl.IScriptScoreQuery? _scriptScore;
		private QueryDsl.IShapeQuery? _shape;
		private QueryDsl.ISimpleQueryStringQuery? _simpleQueryString;
		private QueryDsl.ISpanContainingQuery? _spanContaining;
		private QueryDsl.ISpanFieldMaskingQuery? _fieldMaskingSpan;
		private QueryDsl.ISpanFirstQuery? _spanFirst;
		private QueryDsl.ISpanMultiTermQuery? _spanMulti;
		private QueryDsl.ISpanNearQuery? _spanNear;
		private QueryDsl.ISpanNotQuery? _spanNot;
		private QueryDsl.ISpanOrQuery? _spanOr;
		private QueryDsl.ISpanTermQuery? _spanTerm;
		private QueryDsl.ISpanWithinQuery? _spanWithin;
		private QueryDsl.ITermQuery? _term;
		private QueryDsl.ITermsQuery? _terms;
		private QueryDsl.ITermsSetQuery? _termsSet;
		private QueryDsl.IWildcardQuery? _wildcard;
		QueryDsl.IBoolQuery? IQueryContainer.Bool { get => _bool; set => _bool = Set(value); }

		QueryDsl.IBoostingQuery? IQueryContainer.Boosting { get => _boosting; set => _boosting = Set(value); }

		QueryDsl.ICombinedFieldsQuery? IQueryContainer.CombinedFields { get => _combinedFields; set => _combinedFields = Set(value); }

		QueryDsl.IConstantScoreQuery? IQueryContainer.ConstantScore { get => _constantScore; set => _constantScore = Set(value); }

		QueryDsl.IDisMaxQuery? IQueryContainer.DisMax { get => _disMax; set => _disMax = Set(value); }

		QueryDsl.IExistsQuery? IQueryContainer.Exists { get => _exists; set => _exists = Set(value); }

		QueryDsl.IFunctionScoreQuery? IQueryContainer.FunctionScore { get => _functionScore; set => _functionScore = Set(value); }

		QueryDsl.IFuzzyQuery? IQueryContainer.Fuzzy { get => _fuzzy; set => _fuzzy = Set(value); }

		QueryDsl.IGeoBoundingBoxQuery? IQueryContainer.GeoBoundingBox { get => _geoBoundingBox; set => _geoBoundingBox = Set(value); }

		QueryDsl.IGeoDistanceQuery? IQueryContainer.GeoDistance { get => _geoDistance; set => _geoDistance = Set(value); }

		QueryDsl.IGeoPolygonQuery? IQueryContainer.GeoPolygon { get => _geoPolygon; set => _geoPolygon = Set(value); }

		QueryDsl.IGeoShapeQuery? IQueryContainer.GeoShape { get => _geoShape; set => _geoShape = Set(value); }

		QueryDsl.IHasChildQuery? IQueryContainer.HasChild { get => _hasChild; set => _hasChild = Set(value); }

		QueryDsl.IHasParentQuery? IQueryContainer.HasParent { get => _hasParent; set => _hasParent = Set(value); }

		QueryDsl.IIdsQuery? IQueryContainer.Ids { get => _ids; set => _ids = Set(value); }

		QueryDsl.IIntervalsQuery? IQueryContainer.Intervals { get => _intervals; set => _intervals = Set(value); }

		QueryDsl.IMatchQuery? IQueryContainer.Match { get => _match; set => _match = Set(value); }

		QueryDsl.IMatchAllQuery? IQueryContainer.MatchAll { get => _matchAll; set => _matchAll = Set(value); }

		QueryDsl.IMatchBoolPrefixQuery? IQueryContainer.MatchBoolPrefix { get => _matchBoolPrefix; set => _matchBoolPrefix = Set(value); }

		QueryDsl.IMatchNoneQuery? IQueryContainer.MatchNone { get => _matchNone; set => _matchNone = Set(value); }

		QueryDsl.IMatchPhraseQuery? IQueryContainer.MatchPhrase { get => _matchPhrase; set => _matchPhrase = Set(value); }

		QueryDsl.IMatchPhrasePrefixQuery? IQueryContainer.MatchPhrasePrefix { get => _matchPhrasePrefix; set => _matchPhrasePrefix = Set(value); }

		QueryDsl.IMoreLikeThisQuery? IQueryContainer.MoreLikeThis { get => _moreLikeThis; set => _moreLikeThis = Set(value); }

		QueryDsl.IMultiMatchQuery? IQueryContainer.MultiMatch { get => _multiMatch; set => _multiMatch = Set(value); }

		QueryDsl.INestedQuery? IQueryContainer.Nested { get => _nested; set => _nested = Set(value); }

		QueryDsl.IParentIdQuery? IQueryContainer.ParentId { get => _parentId; set => _parentId = Set(value); }

		QueryDsl.IPercolateQuery? IQueryContainer.Percolate { get => _percolate; set => _percolate = Set(value); }

		QueryDsl.IPinnedQuery? IQueryContainer.Pinned { get => _pinned; set => _pinned = Set(value); }

		QueryDsl.IPrefixQuery? IQueryContainer.Prefix { get => _prefix; set => _prefix = Set(value); }

		QueryDsl.IQueryStringQuery? IQueryContainer.QueryString { get => _queryString; set => _queryString = Set(value); }

		QueryDsl.IRankFeatureQuery? IQueryContainer.RankFeature { get => _rankFeature; set => _rankFeature = Set(value); }

		QueryDsl.IRegexpQuery? IQueryContainer.Regexp { get => _regexp; set => _regexp = Set(value); }

		QueryDsl.IScriptQuery? IQueryContainer.Script { get => _script; set => _script = Set(value); }

		QueryDsl.IScriptScoreQuery? IQueryContainer.ScriptScore { get => _scriptScore; set => _scriptScore = Set(value); }

		QueryDsl.IShapeQuery? IQueryContainer.Shape { get => _shape; set => _shape = Set(value); }

		QueryDsl.ISimpleQueryStringQuery? IQueryContainer.SimpleQueryString { get => _simpleQueryString; set => _simpleQueryString = Set(value); }

		QueryDsl.ISpanContainingQuery? IQueryContainer.SpanContaining { get => _spanContaining; set => _spanContaining = Set(value); }

		QueryDsl.ISpanFieldMaskingQuery? IQueryContainer.FieldMaskingSpan { get => _fieldMaskingSpan; set => _fieldMaskingSpan = Set(value); }

		QueryDsl.ISpanFirstQuery? IQueryContainer.SpanFirst { get => _spanFirst; set => _spanFirst = Set(value); }

		QueryDsl.ISpanMultiTermQuery? IQueryContainer.SpanMulti { get => _spanMulti; set => _spanMulti = Set(value); }

		QueryDsl.ISpanNearQuery? IQueryContainer.SpanNear { get => _spanNear; set => _spanNear = Set(value); }

		QueryDsl.ISpanNotQuery? IQueryContainer.SpanNot { get => _spanNot; set => _spanNot = Set(value); }

		QueryDsl.ISpanOrQuery? IQueryContainer.SpanOr { get => _spanOr; set => _spanOr = Set(value); }

		QueryDsl.ISpanTermQuery? IQueryContainer.SpanTerm { get => _spanTerm; set => _spanTerm = Set(value); }

		QueryDsl.ISpanWithinQuery? IQueryContainer.SpanWithin { get => _spanWithin; set => _spanWithin = Set(value); }

		QueryDsl.ITermQuery? IQueryContainer.Term { get => _term; set => _term = Set(value); }

		QueryDsl.ITermsQuery? IQueryContainer.Terms { get => _terms; set => _terms = Set(value); }

		QueryDsl.ITermsSetQuery? IQueryContainer.TermsSet { get => _termsSet; set => _termsSet = Set(value); }

		QueryDsl.IWildcardQuery? IQueryContainer.Wildcard { get => _wildcard; set => _wildcard = Set(value); }

		[JsonIgnore]
		internal IQueryContainerVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IQueryContainerVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Filter = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IQueryStringQuery, QueryStringQuery>))]
	public partial interface IQueryStringQuery : QueryDsl.IQueryContainerVariant
	{
		bool? AllowLeadingWildcard { get; set; }

		string? Analyzer { get; set; }

		bool? AnalyzeWildcard { get; set; }

		bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		string? DefaultField { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? DefaultOperator { get; set; }

		bool? EnablePositionIncrements { get; set; }

		bool? Escape { get; set; }

		IEnumerable<string>? Fields { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		int? FuzzyMaxExpansions { get; set; }

		int? FuzzyPrefixLength { get; set; }

		string? FuzzyRewrite { get; set; }

		bool? FuzzyTranspositions { get; set; }

		bool? Lenient { get; set; }

		int? MaxDeterminizedStates { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		double? PhraseSlop { get; set; }

		string Query { get; set; }

		string? QuoteAnalyzer { get; set; }

		string? QuoteFieldSuffix { get; set; }

		string? Rewrite { get; set; }

		double? TieBreaker { get; set; }

		string? TimeZone { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? Type { get; set; }
	}

	public partial class QueryStringQuery : QueryDsl.QueryBase, QueryDsl.IQueryStringQuery
	{
		[JsonInclude]
		[JsonPropertyName("allow_leading_wildcard")]
		public bool? AllowLeadingWildcard { get; set; }

		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("default_field")]
		public string? DefaultField { get; set; }

		[JsonInclude]
		[JsonPropertyName("default_operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? DefaultOperator { get; set; }

		[JsonInclude]
		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; set; }

		[JsonInclude]
		[JsonPropertyName("escape")]
		public bool? Escape { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<string>? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_rewrite")]
		public string? FuzzyRewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("phrase_slop")]
		public double? PhraseSlop { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("quote_analyzer")]
		public string? QuoteAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }

		[JsonInclude]
		[JsonPropertyName("rewrite")]
		public string? Rewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("tie_breaker")]
		public double? TieBreaker { get; set; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.QueryDsl.TextQueryType? Type { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.QueryString = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRandomScoreFunction, RandomScoreFunction>))]
	public partial interface IRandomScoreFunction : QueryDsl.IFunctionScoreContainerVariant
	{
		string? Field { get; set; }

		Union<object?, string?>? Seed { get; set; }
	}

	public partial class RandomScoreFunction : QueryDsl.ScoreFunctionBase, QueryDsl.IRandomScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("seed")]
		public Union<object?, string?>? Seed { get; set; }

		void QueryDsl.IFunctionScoreContainerVariant.WrapInContainer(QueryDsl.IFunctionScoreContainer container) => container.RandomScore = this;
	}

	public abstract partial class RangeQueryBase : QueryDsl.QueryBase
	{
		[JsonInclude]
		[JsonPropertyName("relation")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RangeRelation? Relation { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureFunction, RankFeatureFunction>))]
	public partial interface IRankFeatureFunction
	{
	}

	public partial class RankFeatureFunction : QueryDsl.IRankFeatureFunction
	{
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureFunctionLinear, RankFeatureFunctionLinear>))]
	public partial interface IRankFeatureFunctionLinear
	{
	}

	public partial class RankFeatureFunctionLinear : QueryDsl.RankFeatureFunction, QueryDsl.IRankFeatureFunctionLinear
	{
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureFunctionLogarithm, RankFeatureFunctionLogarithm>))]
	public partial interface IRankFeatureFunctionLogarithm
	{
		float ScalingFactor { get; set; }
	}

	public partial class RankFeatureFunctionLogarithm : QueryDsl.RankFeatureFunction, QueryDsl.IRankFeatureFunctionLogarithm
	{
		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public float ScalingFactor { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureFunctionSaturation, RankFeatureFunctionSaturation>))]
	public partial interface IRankFeatureFunctionSaturation
	{
		float? Pivot { get; set; }
	}

	public partial class RankFeatureFunctionSaturation : QueryDsl.RankFeatureFunction, QueryDsl.IRankFeatureFunctionSaturation
	{
		[JsonInclude]
		[JsonPropertyName("pivot")]
		public float? Pivot { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureFunctionSigmoid, RankFeatureFunctionSigmoid>))]
	public partial interface IRankFeatureFunctionSigmoid
	{
		float Pivot { get; set; }

		float Exponent { get; set; }
	}

	public partial class RankFeatureFunctionSigmoid : QueryDsl.RankFeatureFunction, QueryDsl.IRankFeatureFunctionSigmoid
	{
		[JsonInclude]
		[JsonPropertyName("pivot")]
		public float Pivot { get; set; }

		[JsonInclude]
		[JsonPropertyName("exponent")]
		public float Exponent { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRankFeatureQuery, RankFeatureQuery>))]
	public partial interface IRankFeatureQuery : QueryDsl.IQueryContainerVariant
	{
		string Field { get; set; }

		QueryDsl.IRankFeatureFunctionSaturation? Saturation { get; set; }

		QueryDsl.IRankFeatureFunctionLogarithm? Log { get; set; }

		QueryDsl.IRankFeatureFunctionLinear? Linear { get; set; }

		QueryDsl.IRankFeatureFunctionSigmoid? Sigmoid { get; set; }
	}

	public partial class RankFeatureQuery : QueryDsl.QueryBase, QueryDsl.IRankFeatureQuery
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("saturation")]
		public QueryDsl.IRankFeatureFunctionSaturation? Saturation { get; set; }

		[JsonInclude]
		[JsonPropertyName("log")]
		public QueryDsl.IRankFeatureFunctionLogarithm? Log { get; set; }

		[JsonInclude]
		[JsonPropertyName("linear")]
		public QueryDsl.IRankFeatureFunctionLinear? Linear { get; set; }

		[JsonInclude]
		[JsonPropertyName("sigmoid")]
		public QueryDsl.IRankFeatureFunctionSigmoid? Sigmoid { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.RankFeature = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRegexpQuery, RegexpQuery>))]
	public partial interface IRegexpQuery : QueryDsl.IQueryContainerVariant
	{
		bool? CaseInsensitive { get; set; }

		string? Flags { get; set; }

		int? MaxDeterminizedStates { get; set; }

		string? Rewrite { get; set; }

		string Value { get; set; }
	}

	public partial class RegexpQuery : FieldNameQueryBase, QueryDsl.IRegexpQuery
	{
		[JsonInclude]
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonInclude]
		[JsonPropertyName("flags")]
		public string? Flags { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_determinized_states")]
		public int? MaxDeterminizedStates { get; set; }

		[JsonInclude]
		[JsonPropertyName("rewrite")]
		public string? Rewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public string Value { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Regexp = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScoreFunctionBase, ScoreFunctionBase>))]
	public partial interface IScoreFunctionBase
	{
		QueryDsl.IQueryContainer? Filter { get; set; }

		double? Weight { get; set; }
	}

	public abstract partial class ScoreFunctionBase : QueryDsl.IScoreFunctionBase
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("weight")]
		public double? Weight { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScriptQuery, ScriptQuery>))]
	public partial interface IScriptQuery : QueryDsl.IQueryContainerVariant
	{
		Elastic.Clients.Elasticsearch.Script Script { get; set; }
	}

	public partial class ScriptQuery : QueryDsl.QueryBase, QueryDsl.IScriptQuery
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Script = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScriptScoreFunction, ScriptScoreFunction>))]
	public partial interface IScriptScoreFunction : QueryDsl.IFunctionScoreContainerVariant
	{
		Elastic.Clients.Elasticsearch.Script Script { get; set; }
	}

	public partial class ScriptScoreFunction : QueryDsl.ScoreFunctionBase, QueryDsl.IScriptScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }

		void QueryDsl.IFunctionScoreContainerVariant.WrapInContainer(QueryDsl.IFunctionScoreContainer container) => container.ScriptScore = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IScriptScoreQuery, ScriptScoreQuery>))]
	public partial interface IScriptScoreQuery : QueryDsl.IQueryContainerVariant
	{
		float? MinScore { get; set; }

		QueryDsl.IQueryContainer Query { get; set; }

		Elastic.Clients.Elasticsearch.Script Script { get; set; }
	}

	public partial class ScriptScoreQuery : QueryDsl.QueryBase, QueryDsl.IScriptScoreQuery
	{
		[JsonInclude]
		[JsonPropertyName("min_score")]
		public float? MinScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.ScriptScore = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IShapeQuery, ShapeQuery>))]
	public partial interface IShapeQuery : QueryDsl.IQueryContainerVariant
	{
	}

	public partial class ShapeQuery : QueryDsl.QueryBase, QueryDsl.IShapeQuery
	{
		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Shape = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISimpleQueryStringQuery, SimpleQueryStringQuery>))]
	public partial interface ISimpleQueryStringQuery : QueryDsl.IQueryContainerVariant
	{
		string? Analyzer { get; set; }

		bool? AnalyzeWildcard { get; set; }

		bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? DefaultOperator { get; set; }

		IEnumerable<string>? Fields { get; set; }

		Union<Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringFlags?, string?>? Flags { get; set; }

		int? FuzzyMaxExpansions { get; set; }

		int? FuzzyPrefixLength { get; set; }

		bool? FuzzyTranspositions { get; set; }

		bool? Lenient { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		string Query { get; set; }

		string? QuoteFieldSuffix { get; set; }
	}

	public partial class SimpleQueryStringQuery : QueryDsl.QueryBase, QueryDsl.ISimpleQueryStringQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("analyze_wildcard")]
		public bool? AnalyzeWildcard { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_generate_synonyms_phrase_query")]
		public bool? AutoGenerateSynonymsPhraseQuery { get; set; }

		[JsonInclude]
		[JsonPropertyName("default_operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? DefaultOperator { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<string>? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("flags")]
		public Union<Elastic.Clients.Elasticsearch.QueryDsl.SimpleQueryStringFlags?, string?>? Flags { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_max_expansions")]
		public int? FuzzyMaxExpansions { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_prefix_length")]
		public int? FuzzyPrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzzy_transpositions")]
		public bool? FuzzyTranspositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("lenient")]
		public bool? Lenient { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("quote_field_suffix")]
		public string? QuoteFieldSuffix { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SimpleQueryString = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanContainingQuery, SpanContainingQuery>))]
	public partial interface ISpanContainingQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		QueryDsl.ISpanQuery Big { get; set; }

		QueryDsl.ISpanQuery Little { get; set; }
	}

	public partial class SpanContainingQuery : QueryDsl.QueryBase, QueryDsl.ISpanContainingQuery
	{
		[JsonInclude]
		[JsonPropertyName("big")]
		public QueryDsl.ISpanQuery Big { get; set; }

		[JsonInclude]
		[JsonPropertyName("little")]
		public QueryDsl.ISpanQuery Little { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanContaining = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanContaining = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanFieldMaskingQuery, SpanFieldMaskingQuery>))]
	public partial interface ISpanFieldMaskingQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		string Field { get; set; }

		QueryDsl.ISpanQuery Query { get; set; }
	}

	public partial class SpanFieldMaskingQuery : QueryDsl.QueryBase, QueryDsl.ISpanFieldMaskingQuery
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.ISpanQuery Query { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.FieldMaskingSpan = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.FieldMaskingSpan = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanFirstQuery, SpanFirstQuery>))]
	public partial interface ISpanFirstQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		int End { get; set; }

		QueryDsl.ISpanQuery Match { get; set; }
	}

	public partial class SpanFirstQuery : QueryDsl.QueryBase, QueryDsl.ISpanFirstQuery
	{
		[JsonInclude]
		[JsonPropertyName("end")]
		public int End { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public QueryDsl.ISpanQuery Match { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanFirst = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanFirst = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanMultiTermQuery, SpanMultiTermQuery>))]
	public partial interface ISpanMultiTermQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		QueryDsl.IQueryContainer Match { get; set; }
	}

	public partial class SpanMultiTermQuery : QueryDsl.QueryBase, QueryDsl.ISpanMultiTermQuery
	{
		[JsonInclude]
		[JsonPropertyName("match")]
		public QueryDsl.IQueryContainer Match { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanMulti = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanMulti = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanNearQuery, SpanNearQuery>))]
	public partial interface ISpanNearQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		IEnumerable<QueryDsl.ISpanQuery> Clauses { get; set; }

		bool? InOrder { get; set; }

		int? Slop { get; set; }
	}

	public partial class SpanNearQuery : QueryDsl.QueryBase, QueryDsl.ISpanNearQuery
	{
		[JsonInclude]
		[JsonPropertyName("clauses")]
		public IEnumerable<QueryDsl.ISpanQuery> Clauses { get; set; }

		[JsonInclude]
		[JsonPropertyName("in_order")]
		public bool? InOrder { get; set; }

		[JsonInclude]
		[JsonPropertyName("slop")]
		public int? Slop { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanNear = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanNear = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanNotQuery, SpanNotQuery>))]
	public partial interface ISpanNotQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		int? Dist { get; set; }

		QueryDsl.ISpanQuery Exclude { get; set; }

		QueryDsl.ISpanQuery Include { get; set; }

		int? Post { get; set; }

		int? Pre { get; set; }
	}

	public partial class SpanNotQuery : QueryDsl.QueryBase, QueryDsl.ISpanNotQuery
	{
		[JsonInclude]
		[JsonPropertyName("dist")]
		public int? Dist { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public QueryDsl.ISpanQuery Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public QueryDsl.ISpanQuery Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("post")]
		public int? Post { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre")]
		public int? Pre { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanNot = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanNot = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanOrQuery, SpanOrQuery>))]
	public partial interface ISpanOrQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		IEnumerable<QueryDsl.ISpanQuery> Clauses { get; set; }
	}

	public partial class SpanOrQuery : QueryDsl.QueryBase, QueryDsl.ISpanOrQuery
	{
		[JsonInclude]
		[JsonPropertyName("clauses")]
		public IEnumerable<QueryDsl.ISpanQuery> Clauses { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanOr = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanOr = this;
	}

	public interface ISpanQueryVariant
	{
		void WrapInContainer(ISpanQuery container);
	}

	[InterfaceConverterAttribute(typeof(SpanQueryDescriptorConverter<SpanQuery>))]
	public partial interface ISpanQuery
	{
		[JsonInclude]
		[JsonPropertyName("span_containing")]
		QueryDsl.ISpanContainingQuery? SpanContaining { get; set; }

		[JsonInclude]
		[JsonPropertyName("field_masking_span")]
		QueryDsl.ISpanFieldMaskingQuery? FieldMaskingSpan { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_first")]
		QueryDsl.ISpanFirstQuery? SpanFirst { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_multi")]
		QueryDsl.ISpanMultiTermQuery? SpanMulti { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_near")]
		QueryDsl.ISpanNearQuery? SpanNear { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_not")]
		QueryDsl.ISpanNotQuery? SpanNot { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_or")]
		QueryDsl.ISpanOrQuery? SpanOr { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_term")]
		QueryDsl.ISpanTermQuery? SpanTerm { get; set; }

		[JsonInclude]
		[JsonPropertyName("span_within")]
		QueryDsl.ISpanWithinQuery? SpanWithin { get; set; }
	}

	public partial class SpanQuery : QueryDsl.ISpanQuery
	{
		public SpanQuery(ISpanQueryVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private QueryDsl.ISpanContainingQuery? _spanContaining;
		private QueryDsl.ISpanFieldMaskingQuery? _fieldMaskingSpan;
		private QueryDsl.ISpanFirstQuery? _spanFirst;
		private QueryDsl.ISpanMultiTermQuery? _spanMulti;
		private QueryDsl.ISpanNearQuery? _spanNear;
		private QueryDsl.ISpanNotQuery? _spanNot;
		private QueryDsl.ISpanOrQuery? _spanOr;
		private QueryDsl.ISpanTermQuery? _spanTerm;
		private QueryDsl.ISpanWithinQuery? _spanWithin;
		QueryDsl.ISpanContainingQuery? ISpanQuery.SpanContaining { get => _spanContaining; set => _spanContaining = Set(value); }

		QueryDsl.ISpanFieldMaskingQuery? ISpanQuery.FieldMaskingSpan { get => _fieldMaskingSpan; set => _fieldMaskingSpan = Set(value); }

		QueryDsl.ISpanFirstQuery? ISpanQuery.SpanFirst { get => _spanFirst; set => _spanFirst = Set(value); }

		QueryDsl.ISpanMultiTermQuery? ISpanQuery.SpanMulti { get => _spanMulti; set => _spanMulti = Set(value); }

		QueryDsl.ISpanNearQuery? ISpanQuery.SpanNear { get => _spanNear; set => _spanNear = Set(value); }

		QueryDsl.ISpanNotQuery? ISpanQuery.SpanNot { get => _spanNot; set => _spanNot = Set(value); }

		QueryDsl.ISpanOrQuery? ISpanQuery.SpanOr { get => _spanOr; set => _spanOr = Set(value); }

		QueryDsl.ISpanTermQuery? ISpanQuery.SpanTerm { get => _spanTerm; set => _spanTerm = Set(value); }

		QueryDsl.ISpanWithinQuery? ISpanQuery.SpanWithin { get => _spanWithin; set => _spanWithin = Set(value); }

		[JsonIgnore]
		internal ISpanQueryVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : ISpanQueryVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}
	}

	public partial class SpanQueryDescriptor : ISpanQuery
	{
		QueryDsl.ISpanContainingQuery? ISpanQuery.SpanContaining { get; set; }

		QueryDsl.ISpanFieldMaskingQuery? ISpanQuery.FieldMaskingSpan { get; set; }

		QueryDsl.ISpanFirstQuery? ISpanQuery.SpanFirst { get; set; }

		QueryDsl.ISpanMultiTermQuery? ISpanQuery.SpanMulti { get; set; }

		QueryDsl.ISpanNearQuery? ISpanQuery.SpanNear { get; set; }

		QueryDsl.ISpanNotQuery? ISpanQuery.SpanNot { get; set; }

		QueryDsl.ISpanOrQuery? ISpanQuery.SpanOr { get; set; }

		QueryDsl.ISpanTermQuery? ISpanQuery.SpanTerm { get; set; }

		QueryDsl.ISpanWithinQuery? ISpanQuery.SpanWithin { get; set; }
	}

	public class SpanQueryDescriptorConverter<TReadAs> : JsonConverter<ISpanQuery> where TReadAs : class, ISpanQuery
	{
		public override ISpanQuery Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ISpanQuery value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.SpanContaining is not null)
			{
				writer.WritePropertyName("span_containing");
				JsonSerializer.Serialize(writer, value.SpanContaining, options);
			}

			if (value.FieldMaskingSpan is not null)
			{
				writer.WritePropertyName("field_masking_span");
				JsonSerializer.Serialize(writer, value.FieldMaskingSpan, options);
			}

			if (value.SpanFirst is not null)
			{
				writer.WritePropertyName("span_first");
				JsonSerializer.Serialize(writer, value.SpanFirst, options);
			}

			if (value.SpanMulti is not null)
			{
				writer.WritePropertyName("span_multi");
				JsonSerializer.Serialize(writer, value.SpanMulti, options);
			}

			if (value.SpanNear is not null)
			{
				writer.WritePropertyName("span_near");
				JsonSerializer.Serialize(writer, value.SpanNear, options);
			}

			if (value.SpanNot is not null)
			{
				writer.WritePropertyName("span_not");
				JsonSerializer.Serialize(writer, value.SpanNot, options);
			}

			if (value.SpanOr is not null)
			{
				writer.WritePropertyName("span_or");
				JsonSerializer.Serialize(writer, value.SpanOr, options);
			}

			if (value.SpanTerm is not null)
			{
				writer.WritePropertyName("span_term");
				JsonSerializer.Serialize(writer, value.SpanTerm, options);
			}

			if (value.SpanWithin is not null)
			{
				writer.WritePropertyName("span_within");
				JsonSerializer.Serialize(writer, value.SpanWithin, options);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanTermQuery, SpanTermQuery>))]
	public partial interface ISpanTermQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		string Value { get; set; }
	}

	public partial class SpanTermQuery : FieldNameQueryBase, QueryDsl.ISpanTermQuery
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public string Value { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanTerm = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanTerm = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISpanWithinQuery, SpanWithinQuery>))]
	public partial interface ISpanWithinQuery : QueryDsl.IQueryContainerVariant, QueryDsl.ISpanQueryVariant
	{
		QueryDsl.ISpanQuery Big { get; set; }

		QueryDsl.ISpanQuery Little { get; set; }
	}

	public partial class SpanWithinQuery : QueryDsl.QueryBase, QueryDsl.ISpanWithinQuery
	{
		[JsonInclude]
		[JsonPropertyName("big")]
		public QueryDsl.ISpanQuery Big { get; set; }

		[JsonInclude]
		[JsonPropertyName("little")]
		public QueryDsl.ISpanQuery Little { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.SpanWithin = this;
		void QueryDsl.ISpanQueryVariant.WrapInContainer(QueryDsl.ISpanQuery container) => container.SpanWithin = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ITermQuery, TermQuery>))]
	public partial interface ITermQuery : QueryDsl.IQueryContainerVariant
	{
		object Value { get; set; }

		bool? CaseInsensitive { get; set; }
	}

	public partial class TermQuery : FieldNameQueryBase, QueryDsl.ITermQuery
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object Value { get; set; }

		[JsonInclude]
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Term = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ITermsQuery, TermsQuery>))]
	public partial interface ITermsQuery : QueryDsl.IQueryContainerVariant
	{
	}

	public partial class TermsQuery : QueryDsl.QueryBase, QueryDsl.ITermsQuery
	{
		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Terms = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ITermsSetQuery, TermsSetQuery>))]
	public partial interface ITermsSetQuery : QueryDsl.IQueryContainerVariant
	{
		string? MinimumShouldMatchField { get; set; }

		Elastic.Clients.Elasticsearch.Script? MinimumShouldMatchScript { get; set; }

		IEnumerable<string> Terms { get; set; }
	}

	public partial class TermsSetQuery : FieldNameQueryBase, QueryDsl.ITermsSetQuery
	{
		[JsonInclude]
		[JsonPropertyName("minimum_should_match_field")]
		public string? MinimumShouldMatchField { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match_script")]
		public Elastic.Clients.Elasticsearch.Script? MinimumShouldMatchScript { get; set; }

		[JsonInclude]
		[JsonPropertyName("terms")]
		public IEnumerable<string> Terms { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.TermsSet = this;
	}

	public partial class ThreeDimensionalPoint
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat { get; init; }

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon { get; init; }

		[JsonInclude]
		[JsonPropertyName("z")]
		public double? z { get; init; }
	}

	public partial class TwoDimensionalPoint
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat { get; init; }

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IWildcardQuery, WildcardQuery>))]
	public partial interface IWildcardQuery : QueryDsl.IQueryContainerVariant
	{
		bool? CaseInsensitive { get; set; }

		string? Rewrite { get; set; }

		string Value { get; set; }
	}

	public partial class WildcardQuery : FieldNameQueryBase, QueryDsl.IWildcardQuery
	{
		[JsonInclude]
		[JsonPropertyName("case_insensitive")]
		public bool? CaseInsensitive { get; set; }

		[JsonInclude]
		[JsonPropertyName("rewrite")]
		public string? Rewrite { get; set; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public string Value { get; set; }

		void QueryDsl.IQueryContainerVariant.WrapInContainer(QueryDsl.IQueryContainer container) => container.Wildcard = this;
	}
}