// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

internal sealed partial class FunctionScoreQueryConverter : System.Text.Json.Serialization.JsonConverter<FunctionScoreQuery>
{
	private static readonly System.Text.Json.JsonEncodedText PropBoost = System.Text.Json.JsonEncodedText.Encode("boost");
	private static readonly System.Text.Json.JsonEncodedText PropBoostMode = System.Text.Json.JsonEncodedText.Encode("boost_mode");
	private static readonly System.Text.Json.JsonEncodedText PropFunctions = System.Text.Json.JsonEncodedText.Encode("functions");
	private static readonly System.Text.Json.JsonEncodedText PropMaxBoost = System.Text.Json.JsonEncodedText.Encode("max_boost");
	private static readonly System.Text.Json.JsonEncodedText PropMinScore = System.Text.Json.JsonEncodedText.Encode("min_score");
	private static readonly System.Text.Json.JsonEncodedText PropQuery = System.Text.Json.JsonEncodedText.Encode("query");
	private static readonly System.Text.Json.JsonEncodedText PropQueryName = System.Text.Json.JsonEncodedText.Encode("_name");
	private static readonly System.Text.Json.JsonEncodedText PropScoreMode = System.Text.Json.JsonEncodedText.Encode("score_mode");

	public override FunctionScoreQuery Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.TokenType is not System.Text.Json.JsonTokenType.StartObject)
		{
			var value = reader.ReadValue<ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>?>(options, static ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>(o, null));
			return new FunctionScoreQuery { Functions = value };
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<float?> propBoost = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode?> propBoostMode = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>?> propFunctions = default;
		LocalJsonValue<double?> propMaxBoost = default;
		LocalJsonValue<double?> propMinScore = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.Query?> propQuery = default;
		LocalJsonValue<string?> propQueryName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode?> propScoreMode = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBoost.TryReadProperty(ref reader, options, PropBoost, null))
			{
				continue;
			}

			if (propBoostMode.TryReadProperty(ref reader, options, PropBoostMode, null))
			{
				continue;
			}

			if (propFunctions.TryReadProperty(ref reader, options, PropFunctions, static ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>(o, null)))
			{
				continue;
			}

			if (propMaxBoost.TryReadProperty(ref reader, options, PropMaxBoost, null))
			{
				continue;
			}

			if (propMinScore.TryReadProperty(ref reader, options, PropMinScore, null))
			{
				continue;
			}

			if (propQuery.TryReadProperty(ref reader, options, PropQuery, null))
			{
				continue;
			}

			if (propQueryName.TryReadProperty(ref reader, options, PropQueryName, null))
			{
				continue;
			}

			if (propScoreMode.TryReadProperty(ref reader, options, PropScoreMode, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new FunctionScoreQuery
		{
			Boost = propBoost.Value
,
			BoostMode = propBoostMode.Value
,
			Functions = propFunctions.Value
,
			MaxBoost = propMaxBoost.Value
,
			MinScore = propMinScore.Value
,
			Query = propQuery.Value
,
			QueryName = propQueryName.Value
,
			ScoreMode = propScoreMode.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FunctionScoreQuery value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBoost, value.Boost, null, null);
		writer.WriteProperty(options, PropBoostMode, value.BoostMode, null, null);
		writer.WriteProperty(options, PropFunctions, value.Functions, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>(o, v, null));
		writer.WriteProperty(options, PropMaxBoost, value.MaxBoost, null, null);
		writer.WriteProperty(options, PropMinScore, value.MinScore, null, null);
		writer.WriteProperty(options, PropQuery, value.Query, null, null);
		writer.WriteProperty(options, PropQueryName, value.QueryName, null, null);
		writer.WriteProperty(options, PropScoreMode, value.ScoreMode, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(FunctionScoreQueryConverter))]
public sealed partial class FunctionScoreQuery
{
	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public float? Boost { get; set; }

	/// <summary>
	/// <para>
	/// Defines how he newly computed score is combined with the score of the query
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? BoostMode { get; set; }

	/// <summary>
	/// <para>
	/// One or more functions that compute a new score for each document returned by the query.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? Functions { get; set; }

	/// <summary>
	/// <para>
	/// Restricts the new score to not exceed the provided limit.
	/// </para>
	/// </summary>
	public double? MaxBoost { get; set; }

	/// <summary>
	/// <para>
	/// Excludes documents that do not meet the provided score threshold.
	/// </para>
	/// </summary>
	public double? MinScore { get; set; }

	/// <summary>
	/// <para>
	/// A query that determines the documents for which a new score is computed.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.Query? Query { get; set; }
	public string? QueryName { get; set; }

	/// <summary>
	/// <para>
	/// Specifies how the computed scores are combined
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? ScoreMode { get; set; }

	public static implicit operator Elastic.Clients.Elasticsearch.QueryDsl.Query(FunctionScoreQuery functionScoreQuery) => Elastic.Clients.Elasticsearch.QueryDsl.Query.FunctionScore(functionScoreQuery);
}

public sealed partial class FunctionScoreQueryDescriptor<TDocument> : SerializableDescriptor<FunctionScoreQueryDescriptor<TDocument>>
{
	internal FunctionScoreQueryDescriptor(Action<FunctionScoreQueryDescriptor<TDocument>> configure) => configure.Invoke(this);

	public FunctionScoreQueryDescriptor() : base()
	{
	}

	private float? BoostValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? BoostModeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? FunctionsValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument> FunctionsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>> FunctionsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>>[] FunctionsDescriptorActions { get; set; }
	private double? MaxBoostValue { get; set; }
	private double? MinScoreValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.Query? QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> QueryDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> QueryDescriptorAction { get; set; }
	private string? QueryNameValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? ScoreModeValue { get; set; }

	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> Boost(float? boost)
	{
		BoostValue = boost;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines how he newly computed score is combined with the score of the query
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> BoostMode(Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? boostMode)
	{
		BoostModeValue = boostMode;
		return Self;
	}

	/// <summary>
	/// <para>
	/// One or more functions that compute a new score for each document returned by the query.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> Functions(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? functions)
	{
		FunctionsDescriptor = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = null;
		FunctionsValue = functions;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> Functions(Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument> descriptor)
	{
		FunctionsValue = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = null;
		FunctionsDescriptor = descriptor;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> Functions(Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>> configure)
	{
		FunctionsValue = null;
		FunctionsDescriptor = null;
		FunctionsDescriptorActions = null;
		FunctionsDescriptorAction = configure;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> Functions(params Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>>[] configure)
	{
		FunctionsValue = null;
		FunctionsDescriptor = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restricts the new score to not exceed the provided limit.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> MaxBoost(double? maxBoost)
	{
		MaxBoostValue = maxBoost;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Excludes documents that do not meet the provided score threshold.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> MinScore(double? minScore)
	{
		MinScoreValue = minScore;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A query that determines the documents for which a new score is computed.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? query)
	{
		QueryDescriptor = null;
		QueryDescriptorAction = null;
		QueryValue = query;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> descriptor)
	{
		QueryValue = null;
		QueryDescriptorAction = null;
		QueryDescriptor = descriptor;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> Query(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> configure)
	{
		QueryValue = null;
		QueryDescriptor = null;
		QueryDescriptorAction = configure;
		return Self;
	}

	public FunctionScoreQueryDescriptor<TDocument> QueryName(string? queryName)
	{
		QueryNameValue = queryName;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Specifies how the computed scores are combined
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor<TDocument> ScoreMode(Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? scoreMode)
	{
		ScoreModeValue = scoreMode;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BoostValue.HasValue)
		{
			writer.WritePropertyName("boost");
			writer.WriteNumberValue(BoostValue.Value);
		}

		if (BoostModeValue is not null)
		{
			writer.WritePropertyName("boost_mode");
			JsonSerializer.Serialize(writer, BoostModeValue, options);
		}

		if (FunctionsDescriptor is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, FunctionsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (FunctionsDescriptorAction is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>(FunctionsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (FunctionsDescriptorActions is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			foreach (var action in FunctionsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (FunctionsValue is not null)
		{
			writer.WritePropertyName("functions");
			JsonSerializer.Serialize(writer, FunctionsValue, options);
		}

		if (MaxBoostValue.HasValue)
		{
			writer.WritePropertyName("max_boost");
			writer.WriteNumberValue(MaxBoostValue.Value);
		}

		if (MinScoreValue.HasValue)
		{
			writer.WritePropertyName("min_score");
			writer.WriteNumberValue(MinScoreValue.Value);
		}

		if (QueryDescriptor is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryDescriptor, options);
		}
		else if (QueryDescriptorAction is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>(QueryDescriptorAction), options);
		}
		else if (QueryValue is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryValue, options);
		}

		if (!string.IsNullOrEmpty(QueryNameValue))
		{
			writer.WritePropertyName("_name");
			writer.WriteStringValue(QueryNameValue);
		}

		if (ScoreModeValue is not null)
		{
			writer.WritePropertyName("score_mode");
			JsonSerializer.Serialize(writer, ScoreModeValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class FunctionScoreQueryDescriptor : SerializableDescriptor<FunctionScoreQueryDescriptor>
{
	internal FunctionScoreQueryDescriptor(Action<FunctionScoreQueryDescriptor> configure) => configure.Invoke(this);

	public FunctionScoreQueryDescriptor() : base()
	{
	}

	private float? BoostValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? BoostModeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? FunctionsValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor FunctionsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor> FunctionsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor>[] FunctionsDescriptorActions { get; set; }
	private double? MaxBoostValue { get; set; }
	private double? MinScoreValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.Query? QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor QueryDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> QueryDescriptorAction { get; set; }
	private string? QueryNameValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? ScoreModeValue { get; set; }

	/// <summary>
	/// <para>
	/// Floating point number used to decrease or increase the relevance scores of the query.
	/// Boost values are relative to the default value of 1.0.
	/// A boost value between 0 and 1.0 decreases the relevance score.
	/// A value greater than 1.0 increases the relevance score.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor Boost(float? boost)
	{
		BoostValue = boost;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines how he newly computed score is combined with the score of the query
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor BoostMode(Elastic.Clients.Elasticsearch.QueryDsl.FunctionBoostMode? boostMode)
	{
		BoostModeValue = boostMode;
		return Self;
	}

	/// <summary>
	/// <para>
	/// One or more functions that compute a new score for each document returned by the query.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor Functions(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScore>? functions)
	{
		FunctionsDescriptor = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = null;
		FunctionsValue = functions;
		return Self;
	}

	public FunctionScoreQueryDescriptor Functions(Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor descriptor)
	{
		FunctionsValue = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = null;
		FunctionsDescriptor = descriptor;
		return Self;
	}

	public FunctionScoreQueryDescriptor Functions(Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor> configure)
	{
		FunctionsValue = null;
		FunctionsDescriptor = null;
		FunctionsDescriptorActions = null;
		FunctionsDescriptorAction = configure;
		return Self;
	}

	public FunctionScoreQueryDescriptor Functions(params Action<Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor>[] configure)
	{
		FunctionsValue = null;
		FunctionsDescriptor = null;
		FunctionsDescriptorAction = null;
		FunctionsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Restricts the new score to not exceed the provided limit.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor MaxBoost(double? maxBoost)
	{
		MaxBoostValue = maxBoost;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Excludes documents that do not meet the provided score threshold.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor MinScore(double? minScore)
	{
		MinScoreValue = minScore;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A query that determines the documents for which a new score is computed.
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? query)
	{
		QueryDescriptor = null;
		QueryDescriptorAction = null;
		QueryValue = query;
		return Self;
	}

	public FunctionScoreQueryDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor descriptor)
	{
		QueryValue = null;
		QueryDescriptorAction = null;
		QueryDescriptor = descriptor;
		return Self;
	}

	public FunctionScoreQueryDescriptor Query(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> configure)
	{
		QueryValue = null;
		QueryDescriptor = null;
		QueryDescriptorAction = configure;
		return Self;
	}

	public FunctionScoreQueryDescriptor QueryName(string? queryName)
	{
		QueryNameValue = queryName;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Specifies how the computed scores are combined
	/// </para>
	/// </summary>
	public FunctionScoreQueryDescriptor ScoreMode(Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreMode? scoreMode)
	{
		ScoreModeValue = scoreMode;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BoostValue.HasValue)
		{
			writer.WritePropertyName("boost");
			writer.WriteNumberValue(BoostValue.Value);
		}

		if (BoostModeValue is not null)
		{
			writer.WritePropertyName("boost_mode");
			JsonSerializer.Serialize(writer, BoostModeValue, options);
		}

		if (FunctionsDescriptor is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, FunctionsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (FunctionsDescriptorAction is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor(FunctionsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (FunctionsDescriptorActions is not null)
		{
			writer.WritePropertyName("functions");
			writer.WriteStartArray();
			foreach (var action in FunctionsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FunctionScoreDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (FunctionsValue is not null)
		{
			writer.WritePropertyName("functions");
			JsonSerializer.Serialize(writer, FunctionsValue, options);
		}

		if (MaxBoostValue.HasValue)
		{
			writer.WritePropertyName("max_boost");
			writer.WriteNumberValue(MaxBoostValue.Value);
		}

		if (MinScoreValue.HasValue)
		{
			writer.WritePropertyName("min_score");
			writer.WriteNumberValue(MinScoreValue.Value);
		}

		if (QueryDescriptor is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryDescriptor, options);
		}
		else if (QueryDescriptorAction is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor(QueryDescriptorAction), options);
		}
		else if (QueryValue is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryValue, options);
		}

		if (!string.IsNullOrEmpty(QueryNameValue))
		{
			writer.WritePropertyName("_name");
			writer.WriteStringValue(QueryNameValue);
		}

		if (ScoreModeValue is not null)
		{
			writer.WritePropertyName("score_mode");
			JsonSerializer.Serialize(writer, ScoreModeValue, options);
		}

		writer.WriteEndObject();
	}
}