// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public partial class RankFeatureQuery : QueryDsl.QueryBase, IQueryContainerVariant
	{
		[JsonIgnore]
		string QueryDsl.IQueryContainerVariant.QueryContainerVariantName => "rank_feature";
		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("saturation")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSaturation? Saturation { get; set; }

		[JsonInclude]
		[JsonPropertyName("log")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLogarithm? Log { get; set; }

		[JsonInclude]
		[JsonPropertyName("linear")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLinear? Linear { get; set; }

		[JsonInclude]
		[JsonPropertyName("sigmoid")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSigmoid? Sigmoid { get; set; }
	}

	public sealed partial class RankFeatureQueryDescriptor<TDocument> : DescriptorBase<RankFeatureQueryDescriptor<TDocument>>
	{
		public RankFeatureQueryDescriptor()
		{
		}

		internal RankFeatureQueryDescriptor(Action<RankFeatureQueryDescriptor<TDocument>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Field FieldValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSaturation? SaturationValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLogarithm? LogValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLinear? LinearValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSigmoid? SigmoidValue { get; private set; }

		internal float? BoostValue { get; private set; }

		internal string? QueryNameValue { get; private set; }

		internal RankFeatureFunctionSaturationDescriptor SaturationDescriptor { get; private set; }

		internal RankFeatureFunctionLogarithmDescriptor LogDescriptor { get; private set; }

		internal RankFeatureFunctionLinearDescriptor LinearDescriptor { get; private set; }

		internal RankFeatureFunctionSigmoidDescriptor SigmoidDescriptor { get; private set; }

		internal Action<RankFeatureFunctionSaturationDescriptor> SaturationDescriptorAction { get; private set; }

		internal Action<RankFeatureFunctionLogarithmDescriptor> LogDescriptorAction { get; private set; }

		internal Action<RankFeatureFunctionLinearDescriptor> LinearDescriptorAction { get; private set; }

		internal Action<RankFeatureFunctionSigmoidDescriptor> SigmoidDescriptorAction { get; private set; }

		public RankFeatureQueryDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field field) => Assign(field, (a, v) => a.FieldValue = v);
		public RankFeatureQueryDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field) => Assign(field, (a, v) => a.FieldValue = v);
		public RankFeatureQueryDescriptor<TDocument> Saturation(Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSaturation? saturation)
		{
			SaturationDescriptor = null;
			SaturationDescriptorAction = null;
			return Assign(saturation, (a, v) => a.SaturationValue = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Saturation(QueryDsl.RankFeatureFunctionSaturationDescriptor descriptor)
		{
			SaturationValue = null;
			SaturationDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.SaturationDescriptor = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Saturation(Action<QueryDsl.RankFeatureFunctionSaturationDescriptor> configure)
		{
			SaturationValue = null;
			SaturationDescriptorAction = null;
			return Assign(configure, (a, v) => a.SaturationDescriptorAction = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Log(Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLogarithm? log)
		{
			LogDescriptor = null;
			LogDescriptorAction = null;
			return Assign(log, (a, v) => a.LogValue = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Log(QueryDsl.RankFeatureFunctionLogarithmDescriptor descriptor)
		{
			LogValue = null;
			LogDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.LogDescriptor = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Log(Action<QueryDsl.RankFeatureFunctionLogarithmDescriptor> configure)
		{
			LogValue = null;
			LogDescriptorAction = null;
			return Assign(configure, (a, v) => a.LogDescriptorAction = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Linear(Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionLinear? linear)
		{
			LinearDescriptor = null;
			LinearDescriptorAction = null;
			return Assign(linear, (a, v) => a.LinearValue = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Linear(QueryDsl.RankFeatureFunctionLinearDescriptor descriptor)
		{
			LinearValue = null;
			LinearDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.LinearDescriptor = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Linear(Action<QueryDsl.RankFeatureFunctionLinearDescriptor> configure)
		{
			LinearValue = null;
			LinearDescriptorAction = null;
			return Assign(configure, (a, v) => a.LinearDescriptorAction = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Sigmoid(Elastic.Clients.Elasticsearch.QueryDsl.RankFeatureFunctionSigmoid? sigmoid)
		{
			SigmoidDescriptor = null;
			SigmoidDescriptorAction = null;
			return Assign(sigmoid, (a, v) => a.SigmoidValue = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Sigmoid(QueryDsl.RankFeatureFunctionSigmoidDescriptor descriptor)
		{
			SigmoidValue = null;
			SigmoidDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.SigmoidDescriptor = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Sigmoid(Action<QueryDsl.RankFeatureFunctionSigmoidDescriptor> configure)
		{
			SigmoidValue = null;
			SigmoidDescriptorAction = null;
			return Assign(configure, (a, v) => a.SigmoidDescriptorAction = v);
		}

		public RankFeatureQueryDescriptor<TDocument> Boost(float? boost) => Assign(boost, (a, v) => a.BoostValue = v);
		public RankFeatureQueryDescriptor<TDocument> QueryName(string? queryName) => Assign(queryName, (a, v) => a.QueryNameValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
			if (SaturationDescriptor is not null)
			{
				writer.WritePropertyName("saturation");
				JsonSerializer.Serialize(writer, SaturationDescriptor, options);
			}
			else if (SaturationDescriptorAction is not null)
			{
				writer.WritePropertyName("saturation");
				JsonSerializer.Serialize(writer, new QueryDsl.RankFeatureFunctionSaturationDescriptor(SaturationDescriptorAction), options);
			}
			else if (SaturationValue is not null)
			{
				writer.WritePropertyName("saturation");
				JsonSerializer.Serialize(writer, SaturationValue, options);
			}

			if (LogDescriptor is not null)
			{
				writer.WritePropertyName("log");
				JsonSerializer.Serialize(writer, LogDescriptor, options);
			}
			else if (LogDescriptorAction is not null)
			{
				writer.WritePropertyName("log");
				JsonSerializer.Serialize(writer, new QueryDsl.RankFeatureFunctionLogarithmDescriptor(LogDescriptorAction), options);
			}
			else if (LogValue is not null)
			{
				writer.WritePropertyName("log");
				JsonSerializer.Serialize(writer, LogValue, options);
			}

			if (LinearDescriptor is not null)
			{
				writer.WritePropertyName("linear");
				JsonSerializer.Serialize(writer, LinearDescriptor, options);
			}
			else if (LinearDescriptorAction is not null)
			{
				writer.WritePropertyName("linear");
				JsonSerializer.Serialize(writer, new QueryDsl.RankFeatureFunctionLinearDescriptor(LinearDescriptorAction), options);
			}
			else if (LinearValue is not null)
			{
				writer.WritePropertyName("linear");
				JsonSerializer.Serialize(writer, LinearValue, options);
			}

			if (SigmoidDescriptor is not null)
			{
				writer.WritePropertyName("sigmoid");
				JsonSerializer.Serialize(writer, SigmoidDescriptor, options);
			}
			else if (SigmoidDescriptorAction is not null)
			{
				writer.WritePropertyName("sigmoid");
				JsonSerializer.Serialize(writer, new QueryDsl.RankFeatureFunctionSigmoidDescriptor(SigmoidDescriptorAction), options);
			}
			else if (SigmoidValue is not null)
			{
				writer.WritePropertyName("sigmoid");
				JsonSerializer.Serialize(writer, SigmoidValue, options);
			}

			if (BoostValue.HasValue)
			{
				writer.WritePropertyName("boost");
				writer.WriteNumberValue(BoostValue.Value);
			}

			if (!string.IsNullOrEmpty(QueryNameValue))
			{
				writer.WritePropertyName("_name");
				writer.WriteStringValue(QueryNameValue);
			}

			writer.WriteEndObject();
		}
	}
}