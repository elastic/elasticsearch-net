// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public partial class SpanNotQuery : QueryDsl.QueryBase, IQueryContainerVariant, ISpanQueryVariant
	{
		[JsonIgnore]
		string QueryDsl.IQueryContainerVariant.QueryContainerVariantName => "span_not";
		[JsonIgnore]
		string QueryDsl.ISpanQueryVariant.SpanQueryVariantName => "span_not";
		[JsonInclude]
		[JsonPropertyName("dist")]
		public int? Dist { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("post")]
		public int? Post { get; set; }

		[JsonInclude]
		[JsonPropertyName("pre")]
		public int? Pre { get; set; }
	}

	public sealed partial class SpanNotQueryDescriptor<TDocument> : DescriptorBase<SpanNotQueryDescriptor<TDocument>>
	{
		public SpanNotQueryDescriptor()
		{
		}

		internal SpanNotQueryDescriptor(Action<SpanNotQueryDescriptor<TDocument>> configure) => configure.Invoke(this);
		internal int? DistValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery ExcludeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery IncludeValue { get; private set; }

		internal int? PostValue { get; private set; }

		internal int? PreValue { get; private set; }

		internal string? QueryNameValue { get; private set; }

		internal float? BoostValue { get; private set; }

		internal SpanQueryDescriptor<TDocument> ExcludeDescriptor { get; private set; }

		internal SpanQueryDescriptor<TDocument> IncludeDescriptor { get; private set; }

		internal Action<SpanQueryDescriptor<TDocument>> ExcludeDescriptorAction { get; private set; }

		internal Action<SpanQueryDescriptor<TDocument>> IncludeDescriptorAction { get; private set; }

		public SpanNotQueryDescriptor<TDocument> Dist(int? dist) => Assign(dist, (a, v) => a.DistValue = v);
		public SpanNotQueryDescriptor<TDocument> Exclude(Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery exclude)
		{
			ExcludeDescriptor = null;
			ExcludeDescriptorAction = null;
			return Assign(exclude, (a, v) => a.ExcludeValue = v);
		}

		public SpanNotQueryDescriptor<TDocument> Exclude(QueryDsl.SpanQueryDescriptor<TDocument> descriptor)
		{
			ExcludeValue = null;
			ExcludeDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.ExcludeDescriptor = v);
		}

		public SpanNotQueryDescriptor<TDocument> Exclude(Action<QueryDsl.SpanQueryDescriptor<TDocument>> configure)
		{
			ExcludeValue = null;
			ExcludeDescriptorAction = null;
			return Assign(configure, (a, v) => a.ExcludeDescriptorAction = v);
		}

		public SpanNotQueryDescriptor<TDocument> Include(Elastic.Clients.Elasticsearch.QueryDsl.SpanQuery include)
		{
			IncludeDescriptor = null;
			IncludeDescriptorAction = null;
			return Assign(include, (a, v) => a.IncludeValue = v);
		}

		public SpanNotQueryDescriptor<TDocument> Include(QueryDsl.SpanQueryDescriptor<TDocument> descriptor)
		{
			IncludeValue = null;
			IncludeDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.IncludeDescriptor = v);
		}

		public SpanNotQueryDescriptor<TDocument> Include(Action<QueryDsl.SpanQueryDescriptor<TDocument>> configure)
		{
			IncludeValue = null;
			IncludeDescriptorAction = null;
			return Assign(configure, (a, v) => a.IncludeDescriptorAction = v);
		}

		public SpanNotQueryDescriptor<TDocument> Post(int? post) => Assign(post, (a, v) => a.PostValue = v);
		public SpanNotQueryDescriptor<TDocument> Pre(int? pre) => Assign(pre, (a, v) => a.PreValue = v);
		public SpanNotQueryDescriptor<TDocument> QueryName(string? queryName) => Assign(queryName, (a, v) => a.QueryNameValue = v);
		public SpanNotQueryDescriptor<TDocument> Boost(float? boost) => Assign(boost, (a, v) => a.BoostValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (DistValue.HasValue)
			{
				writer.WritePropertyName("dist");
				writer.WriteNumberValue(DistValue.Value);
			}

			if (ExcludeDescriptor is not null)
			{
				writer.WritePropertyName("exclude");
				JsonSerializer.Serialize(writer, ExcludeDescriptor, options);
			}
			else if (ExcludeDescriptorAction is not null)
			{
				writer.WritePropertyName("exclude");
				JsonSerializer.Serialize(writer, new QueryDsl.SpanQueryDescriptor<TDocument>(ExcludeDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("exclude");
				JsonSerializer.Serialize(writer, ExcludeValue, options);
			}

			if (IncludeDescriptor is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, IncludeDescriptor, options);
			}
			else if (IncludeDescriptorAction is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, new QueryDsl.SpanQueryDescriptor<TDocument>(IncludeDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, IncludeValue, options);
			}

			if (PostValue.HasValue)
			{
				writer.WritePropertyName("post");
				writer.WriteNumberValue(PostValue.Value);
			}

			if (PreValue.HasValue)
			{
				writer.WritePropertyName("pre");
				writer.WriteNumberValue(PreValue.Value);
			}

			if (!string.IsNullOrEmpty(QueryNameValue))
			{
				writer.WritePropertyName("_name");
				writer.WriteStringValue(QueryNameValue);
			}

			if (BoostValue.HasValue)
			{
				writer.WritePropertyName("boost");
				writer.WriteNumberValue(BoostValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}