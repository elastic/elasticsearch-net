// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public partial class RandomScoreFunction : QueryDsl.ScoreFunctionBase, IFunctionScoreContainerVariant
	{
		[JsonIgnore]
		string QueryDsl.IFunctionScoreContainerVariant.FunctionScoreContainerVariantName => "random_score";
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("seed")]
		public Union<long?, string?>? Seed { get; set; }
	}

	public sealed partial class RandomScoreFunctionDescriptor<T> : DescriptorBase<RandomScoreFunctionDescriptor<T>>
	{
		public RandomScoreFunctionDescriptor()
		{
		}

		internal RandomScoreFunctionDescriptor(Action<RandomScoreFunctionDescriptor<T>> configure) => configure.Invoke(this);
		internal string? FieldValue { get; private set; }

		internal Union<long?, string?>? SeedValue { get; private set; }

		public RandomScoreFunctionDescriptor<T> Field(string? field) => Assign(field, (a, v) => a.FieldValue = v);
		public RandomScoreFunctionDescriptor<T> Seed(Union<long?, string?>? seed) => Assign(seed, (a, v) => a.SeedValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (FieldValue is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, FieldValue, options);
			}

			if (SeedValue is not null)
			{
				writer.WritePropertyName("seed");
				JsonSerializer.Serialize(writer, SeedValue, options);
			}

			writer.WriteEndObject();
		}
	}
}