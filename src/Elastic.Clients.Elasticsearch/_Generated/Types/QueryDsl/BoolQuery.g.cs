// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	public partial class BoolQuery : QueryDsl.QueryBase, IQueryContainerVariant
	{
		[JsonIgnore]
		string QueryDsl.IQueryContainerVariant.QueryContainerVariantName => "bool";
		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("must")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Must { get; set; }

		[JsonInclude]
		[JsonPropertyName("must_not")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? MustNot { get; set; }

		[JsonInclude]
		[JsonPropertyName("should")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Should { get; set; }
	}

	public sealed partial class BoolQueryDescriptor<T> : DescriptorBase<BoolQueryDescriptor<T>>
	{
		public BoolQueryDescriptor()
		{
		}

		internal BoolQueryDescriptor(Action<BoolQueryDescriptor<T>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? FilterValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatchValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? MustValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? MustNotValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? ShouldValue { get; private set; }

		internal QueryContainerDescriptor<T> FilterDescriptor { get; private set; }

		internal QueryContainerDescriptor<T> MustDescriptor { get; private set; }

		internal QueryContainerDescriptor<T> MustNotDescriptor { get; private set; }

		internal QueryContainerDescriptor<T> ShouldDescriptor { get; private set; }

		internal Action<QueryContainerDescriptor<T>> FilterDescriptorAction { get; private set; }

		internal Action<QueryContainerDescriptor<T>> MustDescriptorAction { get; private set; }

		internal Action<QueryContainerDescriptor<T>> MustNotDescriptorAction { get; private set; }

		internal Action<QueryContainerDescriptor<T>> ShouldDescriptorAction { get; private set; }

		public BoolQueryDescriptor<T> Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? filter)
		{
			FilterDescriptor = null;
			FilterDescriptorAction = null;
			return Assign(filter, (a, v) => a.FilterValue = v);
		}

		public BoolQueryDescriptor<T> Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			FilterValue = null;
			FilterDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.FilterDescriptor = v);
		}

		public BoolQueryDescriptor<T> Filter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			FilterValue = null;
			FilterDescriptorAction = null;
			return Assign(configure, (a, v) => a.FilterDescriptorAction = v);
		}

		public BoolQueryDescriptor<T> MinimumShouldMatch(Elastic.Clients.Elasticsearch.MinimumShouldMatch? minimumShouldMatch) => Assign(minimumShouldMatch, (a, v) => a.MinimumShouldMatchValue = v);
		public BoolQueryDescriptor<T> Must(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? must)
		{
			MustDescriptor = null;
			MustDescriptorAction = null;
			return Assign(must, (a, v) => a.MustValue = v);
		}

		public BoolQueryDescriptor<T> Must(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			MustValue = null;
			MustDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.MustDescriptor = v);
		}

		public BoolQueryDescriptor<T> Must(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			MustValue = null;
			MustDescriptorAction = null;
			return Assign(configure, (a, v) => a.MustDescriptorAction = v);
		}

		public BoolQueryDescriptor<T> MustNot(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? mustNot)
		{
			MustNotDescriptor = null;
			MustNotDescriptorAction = null;
			return Assign(mustNot, (a, v) => a.MustNotValue = v);
		}

		public BoolQueryDescriptor<T> MustNot(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			MustNotValue = null;
			MustNotDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.MustNotDescriptor = v);
		}

		public BoolQueryDescriptor<T> MustNot(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			MustNotValue = null;
			MustNotDescriptorAction = null;
			return Assign(configure, (a, v) => a.MustNotDescriptorAction = v);
		}

		public BoolQueryDescriptor<T> Should(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? should)
		{
			ShouldDescriptor = null;
			ShouldDescriptorAction = null;
			return Assign(should, (a, v) => a.ShouldValue = v);
		}

		public BoolQueryDescriptor<T> Should(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			ShouldValue = null;
			ShouldDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.ShouldDescriptor = v);
		}

		public BoolQueryDescriptor<T> Should(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			ShouldValue = null;
			ShouldDescriptorAction = null;
			return Assign(configure, (a, v) => a.ShouldDescriptorAction = v);
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (FilterDescriptor is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterDescriptor, options);
			}
			else if (FilterDescriptorAction is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, new QueryContainerDescriptor<T>(FilterDescriptorAction), options);
			}
			else if (FilterValue is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterValue, options);
			}

			if (MinimumShouldMatchValue is not null)
			{
				writer.WritePropertyName("minimum_should_match");
				JsonSerializer.Serialize(writer, MinimumShouldMatchValue, options);
			}

			if (MustDescriptor is not null)
			{
				writer.WritePropertyName("must");
				JsonSerializer.Serialize(writer, MustDescriptor, options);
			}
			else if (MustDescriptorAction is not null)
			{
				writer.WritePropertyName("must");
				JsonSerializer.Serialize(writer, new QueryContainerDescriptor<T>(MustDescriptorAction), options);
			}
			else if (MustValue is not null)
			{
				writer.WritePropertyName("must");
				JsonSerializer.Serialize(writer, MustValue, options);
			}

			if (MustNotDescriptor is not null)
			{
				writer.WritePropertyName("must_not");
				JsonSerializer.Serialize(writer, MustNotDescriptor, options);
			}
			else if (MustNotDescriptorAction is not null)
			{
				writer.WritePropertyName("must_not");
				JsonSerializer.Serialize(writer, new QueryContainerDescriptor<T>(MustNotDescriptorAction), options);
			}
			else if (MustNotValue is not null)
			{
				writer.WritePropertyName("must_not");
				JsonSerializer.Serialize(writer, MustNotValue, options);
			}

			if (ShouldDescriptor is not null)
			{
				writer.WritePropertyName("should");
				JsonSerializer.Serialize(writer, ShouldDescriptor, options);
			}
			else if (ShouldDescriptorAction is not null)
			{
				writer.WritePropertyName("should");
				JsonSerializer.Serialize(writer, new QueryContainerDescriptor<T>(ShouldDescriptorAction), options);
			}
			else if (ShouldValue is not null)
			{
				writer.WritePropertyName("should");
				JsonSerializer.Serialize(writer, ShouldValue, options);
			}

			writer.WriteEndObject();
		}
	}
}