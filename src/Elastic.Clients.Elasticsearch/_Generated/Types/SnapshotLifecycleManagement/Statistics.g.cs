// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement;

internal sealed partial class StatisticsConverter : System.Text.Json.Serialization.JsonConverter<Statistics>
{
	private static readonly System.Text.Json.JsonEncodedText PropPolicy = System.Text.Json.JsonEncodedText.Encode("policy");
	private static readonly System.Text.Json.JsonEncodedText PropRetentionDeletionTime = System.Text.Json.JsonEncodedText.Encode("retention_deletion_time");
	private static readonly System.Text.Json.JsonEncodedText PropRetentionDeletionTimeMillis = System.Text.Json.JsonEncodedText.Encode("retention_deletion_time_millis");
	private static readonly System.Text.Json.JsonEncodedText PropRetentionFailed = System.Text.Json.JsonEncodedText.Encode("retention_failed");
	private static readonly System.Text.Json.JsonEncodedText PropRetentionRuns = System.Text.Json.JsonEncodedText.Encode("retention_runs");
	private static readonly System.Text.Json.JsonEncodedText PropRetentionTimedOut = System.Text.Json.JsonEncodedText.Encode("retention_timed_out");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotDeletionFailures = System.Text.Json.JsonEncodedText.Encode("total_snapshot_deletion_failures");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotDeletionFailures1 = System.Text.Json.JsonEncodedText.Encode("snapshot_deletion_failures");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsDeleted = System.Text.Json.JsonEncodedText.Encode("total_snapshots_deleted");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsDeleted1 = System.Text.Json.JsonEncodedText.Encode("snapshots_deleted");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsFailed = System.Text.Json.JsonEncodedText.Encode("total_snapshots_failed");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsFailed1 = System.Text.Json.JsonEncodedText.Encode("snapshots_failed");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsTaken = System.Text.Json.JsonEncodedText.Encode("total_snapshots_taken");
	private static readonly System.Text.Json.JsonEncodedText PropTotalSnapshotsTaken1 = System.Text.Json.JsonEncodedText.Encode("snapshots_taken");

	public override Statistics Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propPolicy = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propRetentionDeletionTime = default;
		LocalJsonValue<long?> propRetentionDeletionTimeMillis = default;
		LocalJsonValue<long?> propRetentionFailed = default;
		LocalJsonValue<long?> propRetentionRuns = default;
		LocalJsonValue<long?> propRetentionTimedOut = default;
		LocalJsonValue<long?> propTotalSnapshotDeletionFailures = default;
		LocalJsonValue<long?> propTotalSnapshotsDeleted = default;
		LocalJsonValue<long?> propTotalSnapshotsFailed = default;
		LocalJsonValue<long?> propTotalSnapshotsTaken = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propPolicy.TryRead(ref reader, options, PropPolicy))
			{
				continue;
			}

			if (propRetentionDeletionTime.TryRead(ref reader, options, PropRetentionDeletionTime))
			{
				continue;
			}

			if (propRetentionDeletionTimeMillis.TryRead(ref reader, options, PropRetentionDeletionTimeMillis))
			{
				continue;
			}

			if (propRetentionFailed.TryRead(ref reader, options, PropRetentionFailed))
			{
				continue;
			}

			if (propRetentionRuns.TryRead(ref reader, options, PropRetentionRuns))
			{
				continue;
			}

			if (propRetentionTimedOut.TryRead(ref reader, options, PropRetentionTimedOut))
			{
				continue;
			}

			if (propTotalSnapshotDeletionFailures.TryRead(ref reader, options, PropTotalSnapshotDeletionFailures) || propTotalSnapshotDeletionFailures.TryRead(ref reader, options, PropTotalSnapshotDeletionFailures1))
			{
				continue;
			}

			if (propTotalSnapshotsDeleted.TryRead(ref reader, options, PropTotalSnapshotsDeleted) || propTotalSnapshotsDeleted.TryRead(ref reader, options, PropTotalSnapshotsDeleted1))
			{
				continue;
			}

			if (propTotalSnapshotsFailed.TryRead(ref reader, options, PropTotalSnapshotsFailed) || propTotalSnapshotsFailed.TryRead(ref reader, options, PropTotalSnapshotsFailed1))
			{
				continue;
			}

			if (propTotalSnapshotsTaken.TryRead(ref reader, options, PropTotalSnapshotsTaken) || propTotalSnapshotsTaken.TryRead(ref reader, options, PropTotalSnapshotsTaken1))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Statistics
		{
			Policy = propPolicy.Value
,
			RetentionDeletionTime = propRetentionDeletionTime.Value
,
			RetentionDeletionTimeMillis = propRetentionDeletionTimeMillis.Value
,
			RetentionFailed = propRetentionFailed.Value
,
			RetentionRuns = propRetentionRuns.Value
,
			RetentionTimedOut = propRetentionTimedOut.Value
,
			TotalSnapshotDeletionFailures = propTotalSnapshotDeletionFailures.Value
,
			TotalSnapshotsDeleted = propTotalSnapshotsDeleted.Value
,
			TotalSnapshotsFailed = propTotalSnapshotsFailed.Value
,
			TotalSnapshotsTaken = propTotalSnapshotsTaken.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Statistics value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropPolicy, value.Policy);
		writer.WriteProperty(options, PropRetentionDeletionTime, value.RetentionDeletionTime);
		writer.WriteProperty(options, PropRetentionDeletionTimeMillis, value.RetentionDeletionTimeMillis);
		writer.WriteProperty(options, PropRetentionFailed, value.RetentionFailed);
		writer.WriteProperty(options, PropRetentionRuns, value.RetentionRuns);
		writer.WriteProperty(options, PropRetentionTimedOut, value.RetentionTimedOut);
		writer.WriteProperty(options, PropTotalSnapshotDeletionFailures, value.TotalSnapshotDeletionFailures);
		writer.WriteProperty(options, PropTotalSnapshotsDeleted, value.TotalSnapshotsDeleted);
		writer.WriteProperty(options, PropTotalSnapshotsFailed, value.TotalSnapshotsFailed);
		writer.WriteProperty(options, PropTotalSnapshotsTaken, value.TotalSnapshotsTaken);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(StatisticsConverter))]
public sealed partial class Statistics
{
	public string? Policy { get; init; }
	public Elastic.Clients.Elasticsearch.Duration? RetentionDeletionTime { get; init; }
	public long? RetentionDeletionTimeMillis { get; init; }
	public long? RetentionFailed { get; init; }
	public long? RetentionRuns { get; init; }
	public long? RetentionTimedOut { get; init; }
	public long? TotalSnapshotDeletionFailures { get; init; }
	public long? TotalSnapshotsDeleted { get; init; }
	public long? TotalSnapshotsFailed { get; init; }
	public long? TotalSnapshotsTaken { get; init; }
}