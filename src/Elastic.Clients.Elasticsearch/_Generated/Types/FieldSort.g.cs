// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

internal sealed partial class FieldSortConverter : System.Text.Json.Serialization.JsonConverter<FieldSort>
{
	private static readonly System.Text.Json.JsonEncodedText PropFormat = System.Text.Json.JsonEncodedText.Encode("format");
	private static readonly System.Text.Json.JsonEncodedText PropMissing = System.Text.Json.JsonEncodedText.Encode("missing");
	private static readonly System.Text.Json.JsonEncodedText PropMode = System.Text.Json.JsonEncodedText.Encode("mode");
	private static readonly System.Text.Json.JsonEncodedText PropNested = System.Text.Json.JsonEncodedText.Encode("nested");
	private static readonly System.Text.Json.JsonEncodedText PropNumericType = System.Text.Json.JsonEncodedText.Encode("numeric_type");
	private static readonly System.Text.Json.JsonEncodedText PropOrder = System.Text.Json.JsonEncodedText.Encode("order");
	private static readonly System.Text.Json.JsonEncodedText PropUnmappedType = System.Text.Json.JsonEncodedText.Encode("unmapped_type");

	public override FieldSort Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		if (reader.TokenType is not System.Text.Json.JsonTokenType.StartObject)
		{
			var value = reader.ReadValue<Elastic.Clients.Elasticsearch.SortOrder?>(options);
			return new FieldSort { Order = value };
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propFormat = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.FieldValue?> propMissing = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.SortMode?> propMode = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.NestedSortValue?> propNested = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.FieldSortNumericType?> propNumericType = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.SortOrder?> propOrder = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Mapping.FieldType?> propUnmappedType = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propFormat.TryRead(ref reader, options, PropFormat))
			{
				continue;
			}

			if (propMissing.TryRead(ref reader, options, PropMissing))
			{
				continue;
			}

			if (propMode.TryRead(ref reader, options, PropMode))
			{
				continue;
			}

			if (propNested.TryRead(ref reader, options, PropNested))
			{
				continue;
			}

			if (propNumericType.TryRead(ref reader, options, PropNumericType))
			{
				continue;
			}

			if (propOrder.TryRead(ref reader, options, PropOrder))
			{
				continue;
			}

			if (propUnmappedType.TryRead(ref reader, options, PropUnmappedType))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new FieldSort
		{
			Format = propFormat.Value
,
			Missing = propMissing.Value
,
			Mode = propMode.Value
,
			Nested = propNested.Value
,
			NumericType = propNumericType.Value
,
			Order = propOrder.Value
,
			UnmappedType = propUnmappedType.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, FieldSort value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropFormat, value.Format);
		writer.WriteProperty(options, PropMissing, value.Missing);
		writer.WriteProperty(options, PropMode, value.Mode);
		writer.WriteProperty(options, PropNested, value.Nested);
		writer.WriteProperty(options, PropNumericType, value.NumericType);
		writer.WriteProperty(options, PropOrder, value.Order);
		writer.WriteProperty(options, PropUnmappedType, value.UnmappedType);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(FieldSortConverter))]
public sealed partial class FieldSort
{
	public string? Format { get; set; }
	public Elastic.Clients.Elasticsearch.FieldValue? Missing { get; set; }
	public Elastic.Clients.Elasticsearch.SortMode? Mode { get; set; }
	public Elastic.Clients.Elasticsearch.NestedSortValue? Nested { get; set; }
	public Elastic.Clients.Elasticsearch.FieldSortNumericType? NumericType { get; set; }
	public Elastic.Clients.Elasticsearch.SortOrder? Order { get; set; }
	public Elastic.Clients.Elasticsearch.Mapping.FieldType? UnmappedType { get; set; }
}

public sealed partial class FieldSortDescriptor<TDocument> : SerializableDescriptor<FieldSortDescriptor<TDocument>>
{
	internal FieldSortDescriptor(Action<FieldSortDescriptor<TDocument>> configure) => configure.Invoke(this);

	public FieldSortDescriptor() : base()
	{
	}

	private string? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.FieldValue? MissingValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortMode? ModeValue { get; set; }
	private Elastic.Clients.Elasticsearch.NestedSortValue? NestedValue { get; set; }
	private Elastic.Clients.Elasticsearch.NestedSortValueDescriptor<TDocument> NestedDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.NestedSortValueDescriptor<TDocument>> NestedDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.FieldSortNumericType? NumericTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortOrder? OrderValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.FieldType? UnmappedTypeValue { get; set; }

	public FieldSortDescriptor<TDocument> Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Missing(Elastic.Clients.Elasticsearch.FieldValue? missing)
	{
		MissingValue = missing;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Mode(Elastic.Clients.Elasticsearch.SortMode? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.NestedSortValue? nested)
	{
		NestedDescriptor = null;
		NestedDescriptorAction = null;
		NestedValue = nested;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.NestedSortValueDescriptor<TDocument> descriptor)
	{
		NestedValue = null;
		NestedDescriptorAction = null;
		NestedDescriptor = descriptor;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Nested(Action<Elastic.Clients.Elasticsearch.NestedSortValueDescriptor<TDocument>> configure)
	{
		NestedValue = null;
		NestedDescriptor = null;
		NestedDescriptorAction = configure;
		return Self;
	}

	public FieldSortDescriptor<TDocument> NumericType(Elastic.Clients.Elasticsearch.FieldSortNumericType? numericType)
	{
		NumericTypeValue = numericType;
		return Self;
	}

	public FieldSortDescriptor<TDocument> Order(Elastic.Clients.Elasticsearch.SortOrder? order)
	{
		OrderValue = order;
		return Self;
	}

	public FieldSortDescriptor<TDocument> UnmappedType(Elastic.Clients.Elasticsearch.Mapping.FieldType? unmappedType)
	{
		UnmappedTypeValue = unmappedType;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			JsonSerializer.Serialize(writer, MissingValue, options);
		}

		if (ModeValue is not null)
		{
			writer.WritePropertyName("mode");
			JsonSerializer.Serialize(writer, ModeValue, options);
		}

		if (NestedDescriptor is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, NestedDescriptor, options);
		}
		else if (NestedDescriptorAction is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.NestedSortValueDescriptor<TDocument>(NestedDescriptorAction), options);
		}
		else if (NestedValue is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, NestedValue, options);
		}

		if (NumericTypeValue is not null)
		{
			writer.WritePropertyName("numeric_type");
			JsonSerializer.Serialize(writer, NumericTypeValue, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			JsonSerializer.Serialize(writer, OrderValue, options);
		}

		if (UnmappedTypeValue is not null)
		{
			writer.WritePropertyName("unmapped_type");
			JsonSerializer.Serialize(writer, UnmappedTypeValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class FieldSortDescriptor : SerializableDescriptor<FieldSortDescriptor>
{
	internal FieldSortDescriptor(Action<FieldSortDescriptor> configure) => configure.Invoke(this);

	public FieldSortDescriptor() : base()
	{
	}

	private string? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.FieldValue? MissingValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortMode? ModeValue { get; set; }
	private Elastic.Clients.Elasticsearch.NestedSortValue? NestedValue { get; set; }
	private Elastic.Clients.Elasticsearch.NestedSortValueDescriptor NestedDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.NestedSortValueDescriptor> NestedDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.FieldSortNumericType? NumericTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortOrder? OrderValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.FieldType? UnmappedTypeValue { get; set; }

	public FieldSortDescriptor Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	public FieldSortDescriptor Missing(Elastic.Clients.Elasticsearch.FieldValue? missing)
	{
		MissingValue = missing;
		return Self;
	}

	public FieldSortDescriptor Mode(Elastic.Clients.Elasticsearch.SortMode? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public FieldSortDescriptor Nested(Elastic.Clients.Elasticsearch.NestedSortValue? nested)
	{
		NestedDescriptor = null;
		NestedDescriptorAction = null;
		NestedValue = nested;
		return Self;
	}

	public FieldSortDescriptor Nested(Elastic.Clients.Elasticsearch.NestedSortValueDescriptor descriptor)
	{
		NestedValue = null;
		NestedDescriptorAction = null;
		NestedDescriptor = descriptor;
		return Self;
	}

	public FieldSortDescriptor Nested(Action<Elastic.Clients.Elasticsearch.NestedSortValueDescriptor> configure)
	{
		NestedValue = null;
		NestedDescriptor = null;
		NestedDescriptorAction = configure;
		return Self;
	}

	public FieldSortDescriptor NumericType(Elastic.Clients.Elasticsearch.FieldSortNumericType? numericType)
	{
		NumericTypeValue = numericType;
		return Self;
	}

	public FieldSortDescriptor Order(Elastic.Clients.Elasticsearch.SortOrder? order)
	{
		OrderValue = order;
		return Self;
	}

	public FieldSortDescriptor UnmappedType(Elastic.Clients.Elasticsearch.Mapping.FieldType? unmappedType)
	{
		UnmappedTypeValue = unmappedType;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			JsonSerializer.Serialize(writer, MissingValue, options);
		}

		if (ModeValue is not null)
		{
			writer.WritePropertyName("mode");
			JsonSerializer.Serialize(writer, ModeValue, options);
		}

		if (NestedDescriptor is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, NestedDescriptor, options);
		}
		else if (NestedDescriptorAction is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.NestedSortValueDescriptor(NestedDescriptorAction), options);
		}
		else if (NestedValue is not null)
		{
			writer.WritePropertyName("nested");
			JsonSerializer.Serialize(writer, NestedValue, options);
		}

		if (NumericTypeValue is not null)
		{
			writer.WritePropertyName("numeric_type");
			JsonSerializer.Serialize(writer, NumericTypeValue, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			JsonSerializer.Serialize(writer, OrderValue, options);
		}

		if (UnmappedTypeValue is not null)
		{
			writer.WritePropertyName("unmapped_type");
			JsonSerializer.Serialize(writer, UnmappedTypeValue, options);
		}

		writer.WriteEndObject();
	}
}