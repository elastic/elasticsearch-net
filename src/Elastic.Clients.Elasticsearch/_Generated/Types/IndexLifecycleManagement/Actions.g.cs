// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexLifecycleManagement;

internal sealed partial class ActionsConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions>
{
	private static readonly System.Text.Json.JsonEncodedText PropAllocate = System.Text.Json.JsonEncodedText.Encode("allocate");
	private static readonly System.Text.Json.JsonEncodedText PropDelete = System.Text.Json.JsonEncodedText.Encode("delete");
	private static readonly System.Text.Json.JsonEncodedText PropDownsample = System.Text.Json.JsonEncodedText.Encode("downsample");
	private static readonly System.Text.Json.JsonEncodedText PropForcemerge = System.Text.Json.JsonEncodedText.Encode("forcemerge");
	private static readonly System.Text.Json.JsonEncodedText PropMigrate = System.Text.Json.JsonEncodedText.Encode("migrate");
	private static readonly System.Text.Json.JsonEncodedText PropReadonly = System.Text.Json.JsonEncodedText.Encode("readonly");
	private static readonly System.Text.Json.JsonEncodedText PropRollover = System.Text.Json.JsonEncodedText.Encode("rollover");
	private static readonly System.Text.Json.JsonEncodedText PropSearchableSnapshot = System.Text.Json.JsonEncodedText.Encode("searchable_snapshot");
	private static readonly System.Text.Json.JsonEncodedText PropSetPriority = System.Text.Json.JsonEncodedText.Encode("set_priority");
	private static readonly System.Text.Json.JsonEncodedText PropShrink = System.Text.Json.JsonEncodedText.Encode("shrink");
	private static readonly System.Text.Json.JsonEncodedText PropUnfollow = System.Text.Json.JsonEncodedText.Encode("unfollow");
	private static readonly System.Text.Json.JsonEncodedText PropWaitForSnapshot = System.Text.Json.JsonEncodedText.Encode("wait_for_snapshot");

	public override Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateAction?> propAllocate = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteAction?> propDelete = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DownsampleAction?> propDownsample = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ForceMergeAction?> propForcemerge = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateAction?> propMigrate = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.EmptyObject?> propReadonly = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverAction?> propRollover = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SearchableSnapshotAction?> propSearchableSnapshot = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityAction?> propSetPriority = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkAction?> propShrink = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.EmptyObject?> propUnfollow = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.WaitForSnapshotAction?> propWaitForSnapshot = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAllocate.TryReadProperty(ref reader, options, PropAllocate, null))
			{
				continue;
			}

			if (propDelete.TryReadProperty(ref reader, options, PropDelete, null))
			{
				continue;
			}

			if (propDownsample.TryReadProperty(ref reader, options, PropDownsample, null))
			{
				continue;
			}

			if (propForcemerge.TryReadProperty(ref reader, options, PropForcemerge, null))
			{
				continue;
			}

			if (propMigrate.TryReadProperty(ref reader, options, PropMigrate, null))
			{
				continue;
			}

			if (propReadonly.TryReadProperty(ref reader, options, PropReadonly, null))
			{
				continue;
			}

			if (propRollover.TryReadProperty(ref reader, options, PropRollover, null))
			{
				continue;
			}

			if (propSearchableSnapshot.TryReadProperty(ref reader, options, PropSearchableSnapshot, null))
			{
				continue;
			}

			if (propSetPriority.TryReadProperty(ref reader, options, PropSetPriority, null))
			{
				continue;
			}

			if (propShrink.TryReadProperty(ref reader, options, PropShrink, null))
			{
				continue;
			}

			if (propUnfollow.TryReadProperty(ref reader, options, PropUnfollow, null))
			{
				continue;
			}

			if (propWaitForSnapshot.TryReadProperty(ref reader, options, PropWaitForSnapshot, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			Allocate = propAllocate.Value,
			Delete = propDelete.Value,
			Downsample = propDownsample.Value,
			Forcemerge = propForcemerge.Value,
			Migrate = propMigrate.Value,
			Readonly = propReadonly.Value,
			Rollover = propRollover.Value,
			SearchableSnapshot = propSearchableSnapshot.Value,
			SetPriority = propSetPriority.Value,
			Shrink = propShrink.Value,
			Unfollow = propUnfollow.Value,
			WaitForSnapshot = propWaitForSnapshot.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAllocate, value.Allocate, null, null);
		writer.WriteProperty(options, PropDelete, value.Delete, null, null);
		writer.WriteProperty(options, PropDownsample, value.Downsample, null, null);
		writer.WriteProperty(options, PropForcemerge, value.Forcemerge, null, null);
		writer.WriteProperty(options, PropMigrate, value.Migrate, null, null);
		writer.WriteProperty(options, PropReadonly, value.Readonly, null, null);
		writer.WriteProperty(options, PropRollover, value.Rollover, null, null);
		writer.WriteProperty(options, PropSearchableSnapshot, value.SearchableSnapshot, null, null);
		writer.WriteProperty(options, PropSetPriority, value.SetPriority, null, null);
		writer.WriteProperty(options, PropShrink, value.Shrink, null, null);
		writer.WriteProperty(options, PropUnfollow, value.Unfollow, null, null);
		writer.WriteProperty(options, PropWaitForSnapshot, value.WaitForSnapshot, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsConverter))]
public sealed partial class Actions
{
#if NET7_0_OR_GREATER
	public Actions()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	public Actions()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal Actions(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateAction? Allocate { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteAction? Delete { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DownsampleAction? Downsample { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ForceMergeAction? Forcemerge { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateAction? Migrate { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.EmptyObject? Readonly { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverAction? Rollover { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SearchableSnapshotAction? SearchableSnapshot { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityAction? SetPriority { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkAction? Shrink { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.EmptyObject? Unfollow { get; set; }

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.WaitForSnapshotAction? WaitForSnapshot { get; set; }
}

public readonly partial struct ActionsDescriptor
{
	internal Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public ActionsDescriptor(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public ActionsDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions instance) => new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Allocate(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateAction? value)
	{
		Instance.Allocate = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Allocate()
	{
		Instance.Allocate = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Allocate(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateActionDescriptor>? action)
	{
		Instance.Allocate = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.AllocateActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Delete(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteAction? value)
	{
		Instance.Delete = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Delete()
	{
		Instance.Delete = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Delete(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteActionDescriptor>? action)
	{
		Instance.Delete = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DeleteActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Downsample(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DownsampleAction? value)
	{
		Instance.Downsample = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Downsample(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DownsampleActionDescriptor> action)
	{
		Instance.Downsample = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.DownsampleActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Forcemerge(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ForceMergeAction? value)
	{
		Instance.Forcemerge = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Forcemerge(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ForceMergeActionDescriptor> action)
	{
		Instance.Forcemerge = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ForceMergeActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Migrate(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateAction? value)
	{
		Instance.Migrate = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Migrate()
	{
		Instance.Migrate = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Migrate(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateActionDescriptor>? action)
	{
		Instance.Migrate = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.MigrateActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Readonly(Elastic.Clients.Elasticsearch.EmptyObject? value)
	{
		Instance.Readonly = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Readonly()
	{
		Instance.Readonly = Elastic.Clients.Elasticsearch.EmptyObjectDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Readonly(System.Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor>? action)
	{
		Instance.Readonly = Elastic.Clients.Elasticsearch.EmptyObjectDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Rollover(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverAction? value)
	{
		Instance.Rollover = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Rollover()
	{
		Instance.Rollover = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Rollover(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverActionDescriptor>? action)
	{
		Instance.Rollover = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.RolloverActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor SearchableSnapshot(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SearchableSnapshotAction? value)
	{
		Instance.SearchableSnapshot = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor SearchableSnapshot(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SearchableSnapshotActionDescriptor> action)
	{
		Instance.SearchableSnapshot = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SearchableSnapshotActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor SetPriority(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityAction? value)
	{
		Instance.SetPriority = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor SetPriority()
	{
		Instance.SetPriority = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor SetPriority(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityActionDescriptor>? action)
	{
		Instance.SetPriority = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.SetPriorityActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Shrink(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkAction? value)
	{
		Instance.Shrink = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Shrink()
	{
		Instance.Shrink = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkActionDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Shrink(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkActionDescriptor>? action)
	{
		Instance.Shrink = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ShrinkActionDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Unfollow(Elastic.Clients.Elasticsearch.EmptyObject? value)
	{
		Instance.Unfollow = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Unfollow()
	{
		Instance.Unfollow = Elastic.Clients.Elasticsearch.EmptyObjectDescriptor.Build(null);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: hot, warm, cold, frozen.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor Unfollow(System.Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor>? action)
	{
		Instance.Unfollow = Elastic.Clients.Elasticsearch.EmptyObjectDescriptor.Build(action);
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor WaitForSnapshot(Elastic.Clients.Elasticsearch.IndexLifecycleManagement.WaitForSnapshotAction? value)
	{
		Instance.WaitForSnapshot = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Phases allowed: delete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor WaitForSnapshot(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.WaitForSnapshotActionDescriptor> action)
	{
		Instance.WaitForSnapshot = Elastic.Clients.Elasticsearch.IndexLifecycleManagement.WaitForSnapshotActionDescriptor.Build(action);
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions Build(System.Action<Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor>? action)
	{
		if (action is null)
		{
			return new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
		}

		var builder = new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.ActionsDescriptor(new Elastic.Clients.Elasticsearch.IndexLifecycleManagement.Actions(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}