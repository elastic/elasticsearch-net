// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexLifecycleManagement;

public sealed partial class RolloverAction
{
	[JsonInclude, JsonPropertyName("max_age")]
	public Elastic.Clients.Elasticsearch.Duration? MaxAge { get; set; }
	[JsonInclude, JsonPropertyName("max_docs")]
	public long? MaxDocs { get; set; }
	[JsonInclude, JsonPropertyName("max_primary_shard_docs")]
	public long? MaxPrimaryShardDocs { get; set; }
	[JsonInclude, JsonPropertyName("max_primary_shard_size")]
	public Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSize { get; set; }
	[JsonInclude, JsonPropertyName("max_size")]
	public Elastic.Clients.Elasticsearch.ByteSize? MaxSize { get; set; }
	[JsonInclude, JsonPropertyName("min_age")]
	public Elastic.Clients.Elasticsearch.Duration? MinAge { get; set; }
	[JsonInclude, JsonPropertyName("min_docs")]
	public long? MinDocs { get; set; }
	[JsonInclude, JsonPropertyName("min_primary_shard_docs")]
	public long? MinPrimaryShardDocs { get; set; }
	[JsonInclude, JsonPropertyName("min_primary_shard_size")]
	public Elastic.Clients.Elasticsearch.ByteSize? MinPrimaryShardSize { get; set; }
	[JsonInclude, JsonPropertyName("min_size")]
	public Elastic.Clients.Elasticsearch.ByteSize? MinSize { get; set; }
}

public sealed partial class RolloverActionDescriptor : SerializableDescriptor<RolloverActionDescriptor>
{
	internal RolloverActionDescriptor(Action<RolloverActionDescriptor> configure) => configure.Invoke(this);

	public RolloverActionDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Duration? MaxAgeValue { get; set; }
	private long? MaxDocsValue { get; set; }
	private long? MaxPrimaryShardDocsValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MaxSizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? MinAgeValue { get; set; }
	private long? MinDocsValue { get; set; }
	private long? MinPrimaryShardDocsValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MinPrimaryShardSizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MinSizeValue { get; set; }

	public RolloverActionDescriptor MaxAge(Elastic.Clients.Elasticsearch.Duration? maxAge)
	{
		MaxAgeValue = maxAge;
		return Self;
	}

	public RolloverActionDescriptor MaxDocs(long? maxDocs)
	{
		MaxDocsValue = maxDocs;
		return Self;
	}

	public RolloverActionDescriptor MaxPrimaryShardDocs(long? maxPrimaryShardDocs)
	{
		MaxPrimaryShardDocsValue = maxPrimaryShardDocs;
		return Self;
	}

	public RolloverActionDescriptor MaxPrimaryShardSize(Elastic.Clients.Elasticsearch.ByteSize? maxPrimaryShardSize)
	{
		MaxPrimaryShardSizeValue = maxPrimaryShardSize;
		return Self;
	}

	public RolloverActionDescriptor MaxSize(Elastic.Clients.Elasticsearch.ByteSize? maxSize)
	{
		MaxSizeValue = maxSize;
		return Self;
	}

	public RolloverActionDescriptor MinAge(Elastic.Clients.Elasticsearch.Duration? minAge)
	{
		MinAgeValue = minAge;
		return Self;
	}

	public RolloverActionDescriptor MinDocs(long? minDocs)
	{
		MinDocsValue = minDocs;
		return Self;
	}

	public RolloverActionDescriptor MinPrimaryShardDocs(long? minPrimaryShardDocs)
	{
		MinPrimaryShardDocsValue = minPrimaryShardDocs;
		return Self;
	}

	public RolloverActionDescriptor MinPrimaryShardSize(Elastic.Clients.Elasticsearch.ByteSize? minPrimaryShardSize)
	{
		MinPrimaryShardSizeValue = minPrimaryShardSize;
		return Self;
	}

	public RolloverActionDescriptor MinSize(Elastic.Clients.Elasticsearch.ByteSize? minSize)
	{
		MinSizeValue = minSize;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MaxAgeValue is not null)
		{
			writer.WritePropertyName("max_age");
			JsonSerializer.Serialize(writer, MaxAgeValue, options);
		}

		if (MaxDocsValue.HasValue)
		{
			writer.WritePropertyName("max_docs");
			writer.WriteNumberValue(MaxDocsValue.Value);
		}

		if (MaxPrimaryShardDocsValue.HasValue)
		{
			writer.WritePropertyName("max_primary_shard_docs");
			writer.WriteNumberValue(MaxPrimaryShardDocsValue.Value);
		}

		if (MaxPrimaryShardSizeValue is not null)
		{
			writer.WritePropertyName("max_primary_shard_size");
			JsonSerializer.Serialize(writer, MaxPrimaryShardSizeValue, options);
		}

		if (MaxSizeValue is not null)
		{
			writer.WritePropertyName("max_size");
			JsonSerializer.Serialize(writer, MaxSizeValue, options);
		}

		if (MinAgeValue is not null)
		{
			writer.WritePropertyName("min_age");
			JsonSerializer.Serialize(writer, MinAgeValue, options);
		}

		if (MinDocsValue.HasValue)
		{
			writer.WritePropertyName("min_docs");
			writer.WriteNumberValue(MinDocsValue.Value);
		}

		if (MinPrimaryShardDocsValue.HasValue)
		{
			writer.WritePropertyName("min_primary_shard_docs");
			writer.WriteNumberValue(MinPrimaryShardDocsValue.Value);
		}

		if (MinPrimaryShardSizeValue is not null)
		{
			writer.WritePropertyName("min_primary_shard_size");
			JsonSerializer.Serialize(writer, MinPrimaryShardSizeValue, options);
		}

		if (MinSizeValue is not null)
		{
			writer.WritePropertyName("min_size");
			JsonSerializer.Serialize(writer, MinSizeValue, options);
		}

		writer.WriteEndObject();
	}
}