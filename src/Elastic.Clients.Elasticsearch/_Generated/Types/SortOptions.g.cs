// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public interface ISortOptionsVariant
	{
		string SortOptionsVariantName { get; }
	}

	[JsonConverter(typeof(SortOptionsConverter))]
	public partial class SortOptions : IContainer
	{
		public SortOptions(ISortOptionsVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal ISortOptionsVariant Variant { get; }
	}

	internal sealed class SortOptionsConverter : JsonConverter<SortOptions>
	{
		public override SortOptions Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			reader.Read();
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = reader.GetString();
			if (propertyName == "_score")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScoreSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_doc")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScoreSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_geo_distance")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.GeoDistanceSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			if (propertyName == "_script")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.ScriptSort?>(ref reader, options);
				reader.Read();
				return new SortOptions(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, SortOptions value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.SortOptionsVariantName);
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.ScoreSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				
				case Elastic.Clients.Elasticsearch.GeoDistanceSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;

				case Elastic.Clients.Elasticsearch.ScriptSort variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}
}
