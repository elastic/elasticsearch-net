// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public partial class AggregateMetricDoubleProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "aggregate_metric_double";
		[JsonInclude]
		[JsonPropertyName("default_metric")]
		public string DefaultMetric { get; init; }

		[JsonInclude]
		[JsonPropertyName("metrics")]
		public IReadOnlyCollection<string> Metrics { get; init; }
	}

	public partial class AllField
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	[JsonConverter(typeof(AllFieldDescriptorConverter))]
	public sealed partial class AllFieldDescriptor : DescriptorBase<AllFieldDescriptor>
	{
		internal string _analyzer;
		internal bool _enabled;
		internal bool _omitNorms;
		internal string _searchAnalyzer;
		internal string _similarity;
		internal bool _store;
		internal bool _storeTermVectorOffsets;
		internal bool _storeTermVectorPayloads;
		internal bool _storeTermVectorPositions;
		internal bool _storeTermVectors;
	}

	internal sealed class AllFieldDescriptorConverter : JsonConverter<AllFieldDescriptor>
	{
		public override AllFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, AllFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(value._analyzer);
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value._enabled);
			writer.WritePropertyName("omit_norms");
			writer.WriteBooleanValue(value._omitNorms);
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(value._searchAnalyzer);
			writer.WritePropertyName("similarity");
			writer.WriteStringValue(value._similarity);
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(value._store);
			writer.WritePropertyName("store_term_vector_offsets");
			writer.WriteBooleanValue(value._storeTermVectorOffsets);
			writer.WritePropertyName("store_term_vector_payloads");
			writer.WriteBooleanValue(value._storeTermVectorPayloads);
			writer.WritePropertyName("store_term_vector_positions");
			writer.WriteBooleanValue(value._storeTermVectorPositions);
			writer.WritePropertyName("store_term_vectors");
			writer.WriteBooleanValue(value._storeTermVectors);
			writer.WriteEndObject();
		}
	}

	public partial class BinaryProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "binary";
	}

	public partial class BooleanProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public bool? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "boolean";
	}

	public partial class ByteNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "byte";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class CompletionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? Contexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "completion";
	}

	public partial class ConstantKeywordProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object? Value { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "constant_keyword";
	}

	public abstract partial class CorePropertyBase : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("copy_to")]
		public Elastic.Clients.Elasticsearch.Fields? CopyTo { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool? Store { get; init; }
	}

	public partial class DateNanosProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_nanos";
	}

	public partial class DateProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("locale")]
		public string? Locale { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date";
	}

	public partial class DateRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_range";
	}

	public partial class DenseVectorIndexOptions
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("m")]
		public int m { get; init; }

		[JsonInclude]
		[JsonPropertyName("ef_construction")]
		public int EfConstruction { get; init; }
	}

	public partial class DenseVectorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "dense_vector";
		[JsonInclude]
		[JsonPropertyName("dims")]
		public int Dims { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.DenseVectorIndexOptions? IndexOptions { get; init; }
	}

	public abstract partial class DocValuesPropertyBase : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }
	}

	public partial class DoubleNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class DoubleRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double_range";
	}

	public partial class DynamicTemplate
	{
		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_pattern")]
		public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	[JsonConverter(typeof(DynamicTemplateDescriptorConverter))]
	public sealed partial class DynamicTemplateDescriptor : DescriptorBase<DynamicTemplateDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? _mapping;
		internal string? _match;
		internal string? _matchMappingType;
		internal Elastic.Clients.Elasticsearch.Mapping.MatchType? _matchPattern;
		internal string? _pathMatch;
		internal string? _pathUnmatch;
		internal string? _unmatch;
	}

	internal sealed class DynamicTemplateDescriptorConverter : JsonConverter<DynamicTemplateDescriptor>
	{
		public override DynamicTemplateDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, DynamicTemplateDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._mapping is not null)
			{
				writer.WritePropertyName("mapping");
				JsonSerializer.Serialize(writer, value._mapping, options);
			}

			if (!string.IsNullOrEmpty(value._match))
			{
				writer.WritePropertyName("match");
				writer.WriteStringValue(value._match);
			}

			if (!string.IsNullOrEmpty(value._matchMappingType))
			{
				writer.WritePropertyName("match_mapping_type");
				writer.WriteStringValue(value._matchMappingType);
			}

			if (value._matchPattern is not null)
			{
				writer.WritePropertyName("match_pattern");
				JsonSerializer.Serialize(writer, value._matchPattern, options);
			}

			if (!string.IsNullOrEmpty(value._pathMatch))
			{
				writer.WritePropertyName("path_match");
				writer.WriteStringValue(value._pathMatch);
			}

			if (!string.IsNullOrEmpty(value._pathUnmatch))
			{
				writer.WritePropertyName("path_unmatch");
				writer.WriteStringValue(value._pathUnmatch);
			}

			if (!string.IsNullOrEmpty(value._unmatch))
			{
				writer.WritePropertyName("unmatch");
				writer.WriteStringValue(value._unmatch);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FieldAliasProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "alias";
	}

	public partial class FieldMapping
	{
		[JsonInclude]
		[JsonPropertyName("full_name")]
		public string FullName { get; init; }

		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties Mapping { get; init; }
	}

	public partial class FieldNamesField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(FieldNamesFieldDescriptorConverter))]
	public sealed partial class FieldNamesFieldDescriptor : DescriptorBase<FieldNamesFieldDescriptor>
	{
		internal bool _enabled;
	}

	internal sealed class FieldNamesFieldDescriptorConverter : JsonConverter<FieldNamesFieldDescriptor>
	{
		public override FieldNamesFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, FieldNamesFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value._enabled);
			writer.WriteEndObject();
		}
	}

	public partial class FlattenedProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("depth_limit")]
		public int? DepthLimit { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "flattened";
	}

	public partial class FloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class FloatRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float_range";
	}

	public partial class GenericProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.StringFielddata Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class GeoPointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_point";
	}

	public partial class GeoShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("strategy")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoStrategy? Strategy { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_shape";
	}

	public partial class HalfFloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "half_float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class HistogramProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "histogram";
	}

	public partial class IndexField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(IndexFieldDescriptorConverter))]
	public sealed partial class IndexFieldDescriptor : DescriptorBase<IndexFieldDescriptor>
	{
		internal bool _enabled;
	}

	internal sealed class IndexFieldDescriptorConverter : JsonConverter<IndexFieldDescriptor>
	{
		public override IndexFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, IndexFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value._enabled);
			writer.WriteEndObject();
		}
	}

	public partial class IntegerNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public int? NullValue { get; init; }
	}

	public partial class IntegerRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer_range";
	}

	public partial class IpProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip";
	}

	public partial class IpRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip_range";
	}

	public partial class JoinProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("relations")]
		public Dictionary<string, IReadOnlyCollection<string>>? Relations { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "join";
	}

	public partial class KeywordProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_series_dimension")]
		public bool? TimeSeriesDimension { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "keyword";
	}

	public partial class LongNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class LongRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long_range";
	}

	public partial class Murmur3HashProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "murmur3";
	}

	public partial class NestedProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "nested";
	}

	public abstract partial class NumberPropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_series_metric")]
		public Elastic.Clients.Elasticsearch.Mapping.TimeSeriesMetricType? TimeSeriesMetric { get; init; }
	}

	public partial class ObjectProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "object";
	}

	public partial class PercolatorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "percolator";
	}

	public partial class PointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "point";
	}

	public abstract partial class PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("local_metadata")]
		public Dictionary<string, object>? LocalMetadata { get; init; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, string>? Meta { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove { get; init; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Fields { get; init; }
	}

	public abstract partial class RangePropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }
	}

	public partial class RankFeatureProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("positive_score_impact")]
		public bool? PositiveScoreImpact { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_feature";
	}

	public partial class RankFeaturesProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_features";
	}

	public partial class RoutingField
	{
		[JsonInclude]
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	[JsonConverter(typeof(RoutingFieldDescriptorConverter))]
	public sealed partial class RoutingFieldDescriptor : DescriptorBase<RoutingFieldDescriptor>
	{
		internal bool _required;
	}

	internal sealed class RoutingFieldDescriptorConverter : JsonConverter<RoutingFieldDescriptor>
	{
		public override RoutingFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RoutingFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("required");
			writer.WriteBooleanValue(value._required);
			writer.WriteEndObject();
		}
	}

	public partial class RuntimeField
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType Type { get; set; }
	}

	[JsonConverter(typeof(RuntimeFieldDescriptorConverter))]
	public sealed partial class RuntimeFieldDescriptor : DescriptorBase<RuntimeFieldDescriptor>
	{
		internal string? _format;
		internal Elastic.Clients.Elasticsearch.Script? _script;
		internal Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType _type;
	}

	internal sealed class RuntimeFieldDescriptorConverter : JsonConverter<RuntimeFieldDescriptor>
	{
		public override RuntimeFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RuntimeFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value._format))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value._format);
			}

			if (value._script is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, value._script, options);
			}

			writer.WritePropertyName("type");
			JsonSerializer.Serialize(writer, value._type, options);
			writer.WriteEndObject();
		}
	}

	public partial class ScaledFloatNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "scaled_float";
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor { get; init; }
	}

	public partial class SearchAsYouTypeProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "search_as_you_type";
	}

	public partial class ShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "shape";
	}

	public partial class ShortNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "short";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class SizeField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(SizeFieldDescriptorConverter))]
	public sealed partial class SizeFieldDescriptor : DescriptorBase<SizeFieldDescriptor>
	{
		internal bool _enabled;
	}

	internal sealed class SizeFieldDescriptorConverter : JsonConverter<SizeFieldDescriptor>
	{
		public override SizeFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, SizeFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value._enabled);
			writer.WriteEndObject();
		}
	}

	public partial class SourceField
	{
		[JsonInclude]
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonInclude]
		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("excludes")]
		public IEnumerable<string>? Excludes { get; set; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public IEnumerable<string>? Includes { get; set; }
	}

	[JsonConverter(typeof(SourceFieldDescriptorConverter))]
	public sealed partial class SourceFieldDescriptor : DescriptorBase<SourceFieldDescriptor>
	{
		internal bool? _compress;
		internal string? _compressThreshold;
		internal bool? _enabled;
		internal IEnumerable<string>? _excludes;
		internal IEnumerable<string>? _includes;
	}

	internal sealed class SourceFieldDescriptorConverter : JsonConverter<SourceFieldDescriptor>
	{
		public override SourceFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, SourceFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._compress.HasValue)
			{
				writer.WritePropertyName("compress");
				writer.WriteBooleanValue(value._compress.Value);
			}

			if (!string.IsNullOrEmpty(value._compressThreshold))
			{
				writer.WritePropertyName("compress_threshold");
				writer.WriteStringValue(value._compressThreshold);
			}

			if (value._enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value._enabled.Value);
			}

			if (value._excludes is not null)
			{
				writer.WritePropertyName("excludes");
				JsonSerializer.Serialize(writer, value._excludes, options);
			}

			if (value._includes is not null)
			{
				writer.WritePropertyName("includes");
				JsonSerializer.Serialize(writer, value._includes, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class StandardNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("on_script_error")]
		public Elastic.Clients.Elasticsearch.Mapping.OnScriptError? OnScriptError { get; init; }
	}

	public partial class SuggestContext
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public Union<int?, string?>? Precision { get; init; }
	}

	public partial class TextIndexPrefixes
	{
		[JsonInclude]
		[JsonPropertyName("max_chars")]
		public int MaxChars { get; init; }

		[JsonInclude]
		[JsonPropertyName("min_chars")]
		public int MinChars { get; init; }
	}

	public partial class TextProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public bool? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata_frequency_filter")]
		public Elastic.Clients.Elasticsearch.IndexManagement.FielddataFrequencyFilter? FielddataFrequencyFilter { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_prefixes")]
		public Elastic.Clients.Elasticsearch.Mapping.TextIndexPrefixes? IndexPrefixes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "text";
	}

	public partial class TokenCountProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "token_count";
	}

	public partial class TypeMapping
	{
		[JsonInclude]
		[JsonPropertyName("all_field")]
		public Elastic.Clients.Elasticsearch.Mapping.AllField? AllField { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_date_formats")]
		public IEnumerable<string>? DynamicDateFormats { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_templates")]
		public Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? DynamicTemplates { get; set; }

		[JsonInclude]
		[JsonPropertyName("_field_names")]
		public Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? FieldNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_field")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexField? IndexField { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; set; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public Elastic.Clients.Elasticsearch.Mapping.RoutingField? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("_size")]
		public Elastic.Clients.Elasticsearch.Mapping.SizeField? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.Mapping.SourceField? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? Runtime { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }
	}

	[JsonConverter(typeof(TypeMappingDescriptorConverter))]
	public sealed partial class TypeMappingDescriptor : DescriptorBase<TypeMappingDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.Mapping.AllField? _allField;
		internal bool? _dateDetection;
		internal Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? _dynamic;
		internal IEnumerable<string>? _dynamicDateFormats;
		internal Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? _dynamicTemplates;
		internal Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? _fieldNames;
		internal Elastic.Clients.Elasticsearch.Mapping.IndexField? _indexField;
		internal Dictionary<string, object>? _meta;
		internal bool? _numericDetection;
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? _properties;
		internal Elastic.Clients.Elasticsearch.Mapping.RoutingField? _routing;
		internal Elastic.Clients.Elasticsearch.Mapping.SizeField? _size;
		internal Elastic.Clients.Elasticsearch.Mapping.SourceField? _source;
		internal Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? _runtime;
		internal bool? _enabled;
	}

	internal sealed class TypeMappingDescriptorConverter : JsonConverter<TypeMappingDescriptor>
	{
		public override TypeMappingDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, TypeMappingDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._allField is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, value._allField, options);
			}

			if (value._dateDetection.HasValue)
			{
				writer.WritePropertyName("date_detection");
				writer.WriteBooleanValue(value._dateDetection.Value);
			}

			if (value._dynamic is not null)
			{
				writer.WritePropertyName("dynamic");
				JsonSerializer.Serialize(writer, value._dynamic, options);
			}

			if (value._dynamicDateFormats is not null)
			{
				writer.WritePropertyName("dynamic_date_formats");
				JsonSerializer.Serialize(writer, value._dynamicDateFormats, options);
			}

			if (value._dynamicTemplates is not null)
			{
				writer.WritePropertyName("dynamic_templates");
				JsonSerializer.Serialize(writer, value._dynamicTemplates, options);
			}

			if (value._fieldNames is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, value._fieldNames, options);
			}

			if (value._indexField is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, value._indexField, options);
			}

			if (value._meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value._meta, options);
			}

			if (value._numericDetection.HasValue)
			{
				writer.WritePropertyName("numeric_detection");
				writer.WriteBooleanValue(value._numericDetection.Value);
			}

			if (value._properties is not null)
			{
				writer.WritePropertyName("properties");
				JsonSerializer.Serialize(writer, value._properties, options);
			}

			if (value._routing is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, value._routing, options);
			}

			if (value._size is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, value._size, options);
			}

			if (value._source is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value._source, options);
			}

			if (value._runtime is not null)
			{
				writer.WritePropertyName("runtime");
				JsonSerializer.Serialize(writer, value._runtime, options);
			}

			if (value._enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value._enabled.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class UnsignedLongNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "unsigned_long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class VersionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "version";
	}

	public partial class WildcardProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "wildcard";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }
	}
}