// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public partial class AggregateMetricDoubleProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "aggregate_metric_double";
		[JsonInclude]
		[JsonPropertyName("default_metric")]
		public string DefaultMetric { get; init; }

		[JsonInclude]
		[JsonPropertyName("metrics")]
		public IReadOnlyCollection<string> Metrics { get; init; }
	}

	[JsonConverter(typeof(AggregateMetricDoublePropertyDescriptorConverter))]
	public partial class AggregateMetricDoublePropertyDescriptor : DescriptorBase<AggregateMetricDoublePropertyDescriptor>
	{
		internal string _defaultMetric;
		internal IReadOnlyCollection<string> _metrics;
		public AggregateMetricDoublePropertyDescriptor DefaultMetric(string defaultMetric) => Assign(defaultMetric, (a, v) => a._defaultMetric = v);
		public AggregateMetricDoublePropertyDescriptor Metrics(IReadOnlyCollection<string> metrics) => Assign(metrics, (a, v) => a._metrics = v);
	}

	internal sealed class AggregateMetricDoublePropertyDescriptorConverter : JsonConverter<AggregateMetricDoublePropertyDescriptor>
	{
		public override AggregateMetricDoublePropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, AggregateMetricDoublePropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("type");
			writer.WriteStringValue("aggregate_metric_double");
			writer.WritePropertyName("default_metric");
			writer.WriteStringValue(value._defaultMetric);
			writer.WritePropertyName("metrics");
			JsonSerializer.Serialize(writer, value._metrics, options);
			writer.WriteEndObject();
		}
	}

	public partial class AllField
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	[JsonConverter(typeof(AllFieldDescriptorConverter))]
	public partial class AllFieldDescriptor : DescriptorBase<AllFieldDescriptor>
	{
		internal string _analyzer;
		internal bool _enabled;
		internal bool _omitNorms;
		internal string _searchAnalyzer;
		internal string _similarity;
		internal bool _store;
		internal bool _storeTermVectorOffsets;
		internal bool _storeTermVectorPayloads;
		internal bool _storeTermVectorPositions;
		internal bool _storeTermVectors;
		public AllFieldDescriptor Analyzer(string analyzer) => Assign(analyzer, (a, v) => a._analyzer = v);
		public AllFieldDescriptor Enabled(bool enabled = true) => Assign(enabled, (a, v) => a._enabled = v);
		public AllFieldDescriptor OmitNorms(bool omitNorms = true) => Assign(omitNorms, (a, v) => a._omitNorms = v);
		public AllFieldDescriptor SearchAnalyzer(string searchAnalyzer) => Assign(searchAnalyzer, (a, v) => a._searchAnalyzer = v);
		public AllFieldDescriptor Similarity(string similarity) => Assign(similarity, (a, v) => a._similarity = v);
		public AllFieldDescriptor Store(bool store = true) => Assign(store, (a, v) => a._store = v);
		public AllFieldDescriptor StoreTermVectorOffsets(bool storeTermVectorOffsets = true) => Assign(storeTermVectorOffsets, (a, v) => a._storeTermVectorOffsets = v);
		public AllFieldDescriptor StoreTermVectorPayloads(bool storeTermVectorPayloads = true) => Assign(storeTermVectorPayloads, (a, v) => a._storeTermVectorPayloads = v);
		public AllFieldDescriptor StoreTermVectorPositions(bool storeTermVectorPositions = true) => Assign(storeTermVectorPositions, (a, v) => a._storeTermVectorPositions = v);
		public AllFieldDescriptor StoreTermVectors(bool storeTermVectors = true) => Assign(storeTermVectors, (a, v) => a._storeTermVectors = v);
	}

	internal sealed class AllFieldDescriptorConverter : JsonConverter<AllFieldDescriptor>
	{
		public override AllFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, AllFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(value._analyzer);
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value._enabled);
			writer.WritePropertyName("omit_norms");
			writer.WriteBooleanValue(value._omitNorms);
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(value._searchAnalyzer);
			writer.WritePropertyName("similarity");
			writer.WriteStringValue(value._similarity);
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(value._store);
			writer.WritePropertyName("store_term_vector_offsets");
			writer.WriteBooleanValue(value._storeTermVectorOffsets);
			writer.WritePropertyName("store_term_vector_payloads");
			writer.WriteBooleanValue(value._storeTermVectorPayloads);
			writer.WritePropertyName("store_term_vector_positions");
			writer.WriteBooleanValue(value._storeTermVectorPositions);
			writer.WritePropertyName("store_term_vectors");
			writer.WriteBooleanValue(value._storeTermVectors);
			writer.WriteEndObject();
		}
	}

	public partial class BinaryProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "binary";
	}

	public partial class BooleanProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public bool? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "boolean";
	}

	public partial class ByteNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "byte";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class CompletionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? Contexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "completion";
	}

	public partial class ConstantKeywordProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object? Value { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "constant_keyword";
	}

	[JsonConverter(typeof(ConstantKeywordPropertyDescriptorConverter))]
	public partial class ConstantKeywordPropertyDescriptor : DescriptorBase<ConstantKeywordPropertyDescriptor>
	{
		internal object? _value;
		public ConstantKeywordPropertyDescriptor Value(object? value) => Assign(value, (a, v) => a._value = v);
	}

	internal sealed class ConstantKeywordPropertyDescriptorConverter : JsonConverter<ConstantKeywordPropertyDescriptor>
	{
		public override ConstantKeywordPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, ConstantKeywordPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("type");
			writer.WriteStringValue("constant_keyword");
			writer.WriteEndObject();
		}
	}

	public abstract partial class CorePropertyBase : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("copy_to")]
		public Elastic.Clients.Elasticsearch.Fields? CopyTo { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool? Store { get; init; }
	}

	public partial class DateNanosProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_nanos";
	}

	public partial class DateProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date";
	}

	public partial class DateRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_range";
	}

	public partial class DenseVectorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "dense_vector";
		[JsonInclude]
		[JsonPropertyName("dims")]
		public int Dims { get; init; }
	}

	[JsonConverter(typeof(DenseVectorPropertyDescriptorConverter))]
	public partial class DenseVectorPropertyDescriptor : DescriptorBase<DenseVectorPropertyDescriptor>
	{
		internal int _dims;
		public DenseVectorPropertyDescriptor Dims(int dims) => Assign(dims, (a, v) => a._dims = v);
	}

	internal sealed class DenseVectorPropertyDescriptorConverter : JsonConverter<DenseVectorPropertyDescriptor>
	{
		public override DenseVectorPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, DenseVectorPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("type");
			writer.WriteStringValue("dense_vector");
			writer.WritePropertyName("dims");
			writer.WriteNumberValue(value._dims);
			writer.WriteEndObject();
		}
	}

	public abstract partial class DocValuesPropertyBase : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }
	}

	public partial class DoubleNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class DoubleRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double_range";
	}

	public partial class DynamicTemplate
	{
		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_pattern")]
		public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	[JsonConverter(typeof(DynamicTemplateDescriptorConverter))]
	public partial class DynamicTemplateDescriptor : DescriptorBase<DynamicTemplateDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? _mapping;
		internal string? _match;
		internal string? _matchMappingType;
		internal Elastic.Clients.Elasticsearch.Mapping.MatchType? _matchPattern;
		internal string? _pathMatch;
		internal string? _pathUnmatch;
		internal string? _unmatch;
		public DynamicTemplateDescriptor Mapping(Elastic.Clients.Elasticsearch.Mapping.Properties? mapping) => Assign(mapping, (a, v) => a._mapping = v);
		public DynamicTemplateDescriptor Match(string? match) => Assign(match, (a, v) => a._match = v);
		public DynamicTemplateDescriptor MatchMappingType(string? matchMappingType) => Assign(matchMappingType, (a, v) => a._matchMappingType = v);
		public DynamicTemplateDescriptor MatchPattern(Elastic.Clients.Elasticsearch.Mapping.MatchType? matchPattern) => Assign(matchPattern, (a, v) => a._matchPattern = v);
		public DynamicTemplateDescriptor PathMatch(string? pathMatch) => Assign(pathMatch, (a, v) => a._pathMatch = v);
		public DynamicTemplateDescriptor PathUnmatch(string? pathUnmatch) => Assign(pathUnmatch, (a, v) => a._pathUnmatch = v);
		public DynamicTemplateDescriptor Unmatch(string? unmatch) => Assign(unmatch, (a, v) => a._unmatch = v);
	}

	internal sealed class DynamicTemplateDescriptorConverter : JsonConverter<DynamicTemplateDescriptor>
	{
		public override DynamicTemplateDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, DynamicTemplateDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._mapping is not null)
			{
				writer.WritePropertyName("mapping");
				JsonSerializer.Serialize(writer, value._mapping, options);
			}

			if (!string.IsNullOrEmpty(value._match))
			{
				writer.WritePropertyName("match");
				writer.WriteStringValue(value._match);
			}

			if (!string.IsNullOrEmpty(value._matchMappingType))
			{
				writer.WritePropertyName("match_mapping_type");
				writer.WriteStringValue(value._matchMappingType);
			}

			if (value._matchPattern is not null)
			{
				writer.WritePropertyName("match_pattern");
				JsonSerializer.Serialize(writer, value._matchPattern, options);
			}

			if (!string.IsNullOrEmpty(value._pathMatch))
			{
				writer.WritePropertyName("path_match");
				writer.WriteStringValue(value._pathMatch);
			}

			if (!string.IsNullOrEmpty(value._pathUnmatch))
			{
				writer.WritePropertyName("path_unmatch");
				writer.WriteStringValue(value._pathUnmatch);
			}

			if (!string.IsNullOrEmpty(value._unmatch))
			{
				writer.WritePropertyName("unmatch");
				writer.WriteStringValue(value._unmatch);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FieldAliasProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "alias";
	}

	[JsonConverter(typeof(FieldAliasPropertyDescriptorConverter))]
	public partial class FieldAliasPropertyDescriptor : DescriptorBase<FieldAliasPropertyDescriptor>
	{
		internal string? _path;
		public FieldAliasPropertyDescriptor Path(string? path) => Assign(path, (a, v) => a._path = v);
	}

	internal sealed class FieldAliasPropertyDescriptorConverter : JsonConverter<FieldAliasPropertyDescriptor>
	{
		public override FieldAliasPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, FieldAliasPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._path is not null)
			{
				writer.WritePropertyName("path");
				JsonSerializer.Serialize(writer, value._path, options);
			}

			writer.WritePropertyName("type");
			writer.WriteStringValue("alias");
			writer.WriteEndObject();
		}
	}

	public partial class FieldMapping
	{
		[JsonInclude]
		[JsonPropertyName("full_name")]
		public string FullName { get; init; }

		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties Mapping { get; init; }
	}

	public partial class FieldNamesField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class FlattenedProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("depth_limit")]
		public int? DepthLimit { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "flattened";
	}

	[JsonConverter(typeof(FlattenedPropertyDescriptorConverter))]
	public partial class FlattenedPropertyDescriptor : DescriptorBase<FlattenedPropertyDescriptor>
	{
		internal double? _boost;
		internal int? _depthLimit;
		internal bool? _docValues;
		internal bool? _eagerGlobalOrdinals;
		internal bool? _index;
		internal Elastic.Clients.Elasticsearch.Mapping.IndexOptions? _indexOptions;
		internal string? _nullValue;
		internal string? _similarity;
		internal bool? _splitQueriesOnWhitespace;
		public FlattenedPropertyDescriptor Boost(double? boost) => Assign(boost, (a, v) => a._boost = v);
		public FlattenedPropertyDescriptor DepthLimit(int? depthLimit) => Assign(depthLimit, (a, v) => a._depthLimit = v);
		public FlattenedPropertyDescriptor DocValues(bool? docValues = true) => Assign(docValues, (a, v) => a._docValues = v);
		public FlattenedPropertyDescriptor EagerGlobalOrdinals(bool? eagerGlobalOrdinals = true) => Assign(eagerGlobalOrdinals, (a, v) => a._eagerGlobalOrdinals = v);
		public FlattenedPropertyDescriptor Index(bool? index = true) => Assign(index, (a, v) => a._index = v);
		public FlattenedPropertyDescriptor IndexOptions(Elastic.Clients.Elasticsearch.Mapping.IndexOptions? indexOptions) => Assign(indexOptions, (a, v) => a._indexOptions = v);
		public FlattenedPropertyDescriptor NullValue(string? nullValue) => Assign(nullValue, (a, v) => a._nullValue = v);
		public FlattenedPropertyDescriptor Similarity(string? similarity) => Assign(similarity, (a, v) => a._similarity = v);
		public FlattenedPropertyDescriptor SplitQueriesOnWhitespace(bool? splitQueriesOnWhitespace = true) => Assign(splitQueriesOnWhitespace, (a, v) => a._splitQueriesOnWhitespace = v);
	}

	internal sealed class FlattenedPropertyDescriptorConverter : JsonConverter<FlattenedPropertyDescriptor>
	{
		public override FlattenedPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, FlattenedPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._boost.HasValue)
			{
				writer.WritePropertyName("boost");
				writer.WriteNumberValue(value._boost.Value);
			}

			if (value._depthLimit.HasValue)
			{
				writer.WritePropertyName("depth_limit");
				writer.WriteNumberValue(value._depthLimit.Value);
			}

			if (value._docValues.HasValue)
			{
				writer.WritePropertyName("doc_values");
				writer.WriteBooleanValue(value._docValues.Value);
			}

			if (value._eagerGlobalOrdinals.HasValue)
			{
				writer.WritePropertyName("eager_global_ordinals");
				writer.WriteBooleanValue(value._eagerGlobalOrdinals.Value);
			}

			if (value._index.HasValue)
			{
				writer.WritePropertyName("index");
				writer.WriteBooleanValue(value._index.Value);
			}

			if (value._indexOptions is not null)
			{
				writer.WritePropertyName("index_options");
				JsonSerializer.Serialize(writer, value._indexOptions, options);
			}

			if (!string.IsNullOrEmpty(value._nullValue))
			{
				writer.WritePropertyName("null_value");
				writer.WriteStringValue(value._nullValue);
			}

			if (!string.IsNullOrEmpty(value._similarity))
			{
				writer.WritePropertyName("similarity");
				writer.WriteStringValue(value._similarity);
			}

			if (value._splitQueriesOnWhitespace.HasValue)
			{
				writer.WritePropertyName("split_queries_on_whitespace");
				writer.WriteBooleanValue(value._splitQueriesOnWhitespace.Value);
			}

			writer.WritePropertyName("type");
			writer.WriteStringValue("flattened");
			writer.WriteEndObject();
		}
	}

	public partial class FloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class FloatRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float_range";
	}

	public partial class GenericProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.StringFielddata Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class GeoPointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_point";
	}

	public partial class GeoShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("strategy")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoStrategy? Strategy { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_shape";
	}

	public partial class HalfFloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "half_float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class HistogramProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "histogram";
	}

	[JsonConverter(typeof(HistogramPropertyDescriptorConverter))]
	public partial class HistogramPropertyDescriptor : DescriptorBase<HistogramPropertyDescriptor>
	{
		internal bool? _ignoreMalformed;
		public HistogramPropertyDescriptor IgnoreMalformed(bool? ignoreMalformed = true) => Assign(ignoreMalformed, (a, v) => a._ignoreMalformed = v);
	}

	internal sealed class HistogramPropertyDescriptorConverter : JsonConverter<HistogramPropertyDescriptor>
	{
		public override HistogramPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, HistogramPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._ignoreMalformed.HasValue)
			{
				writer.WritePropertyName("ignore_malformed");
				writer.WriteBooleanValue(value._ignoreMalformed.Value);
			}

			writer.WritePropertyName("type");
			writer.WriteStringValue("histogram");
			writer.WriteEndObject();
		}
	}

	public partial class IndexField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class IntegerNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public int? NullValue { get; init; }
	}

	public partial class IntegerRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer_range";
	}

	public partial class IpProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip";
	}

	public partial class IpRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip_range";
	}

	public partial class JoinProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("relations")]
		public Dictionary<string, IReadOnlyCollection<string>>? Relations { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "join";
	}

	[JsonConverter(typeof(JoinPropertyDescriptorConverter))]
	public partial class JoinPropertyDescriptor : DescriptorBase<JoinPropertyDescriptor>
	{
		internal Dictionary<string, IReadOnlyCollection<string>>? _relations;
		public JoinPropertyDescriptor Relations(Func<FluentDictionary<string?, IReadOnlyCollection<string>?>, FluentDictionary<string?, IReadOnlyCollection<string>?>> selector) => Assign(selector, (a, v) => a._relations = v?.Invoke(new FluentDictionary<string?, IReadOnlyCollection<string>?>()));
	}

	internal sealed class JoinPropertyDescriptorConverter : JsonConverter<JoinPropertyDescriptor>
	{
		public override JoinPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, JoinPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._relations is not null)
			{
				writer.WritePropertyName("relations");
				JsonSerializer.Serialize(writer, value._relations, options);
			}

			writer.WritePropertyName("type");
			writer.WriteStringValue("join");
			writer.WriteEndObject();
		}
	}

	public partial class KeywordProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "keyword";
	}

	public partial class LongNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public object? NullValue { get; init; }
	}

	public partial class LongRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long_range";
	}

	public partial class Murmur3HashProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "murmur3";
	}

	public partial class NestedProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "nested";
	}

	public abstract partial class NumberPropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }
	}

	public partial class ObjectProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "object";
	}

	public partial class PercolatorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "percolator";
	}

	[JsonConverter(typeof(PercolatorPropertyDescriptorConverter))]
	public partial class PercolatorPropertyDescriptor : DescriptorBase<PercolatorPropertyDescriptor>
	{
	}

	internal sealed class PercolatorPropertyDescriptorConverter : JsonConverter<PercolatorPropertyDescriptor>
	{
		public override PercolatorPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, PercolatorPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("type");
			writer.WriteStringValue("percolator");
			writer.WriteEndObject();
		}
	}

	public partial class PointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "point";
	}

	public abstract partial class PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("local_metadata")]
		public Dictionary<string, object>? LocalMetadata { get; init; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, string>? Meta { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove { get; init; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Fields { get; init; }
	}

	public abstract partial class RangePropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }
	}

	public partial class RankFeatureProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("positive_score_impact")]
		public bool? PositiveScoreImpact { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_feature";
	}

	[JsonConverter(typeof(RankFeaturePropertyDescriptorConverter))]
	public partial class RankFeaturePropertyDescriptor : DescriptorBase<RankFeaturePropertyDescriptor>
	{
		internal bool? _positiveScoreImpact;
		public RankFeaturePropertyDescriptor PositiveScoreImpact(bool? positiveScoreImpact = true) => Assign(positiveScoreImpact, (a, v) => a._positiveScoreImpact = v);
	}

	internal sealed class RankFeaturePropertyDescriptorConverter : JsonConverter<RankFeaturePropertyDescriptor>
	{
		public override RankFeaturePropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RankFeaturePropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._positiveScoreImpact.HasValue)
			{
				writer.WritePropertyName("positive_score_impact");
				writer.WriteBooleanValue(value._positiveScoreImpact.Value);
			}

			writer.WritePropertyName("type");
			writer.WriteStringValue("rank_feature");
			writer.WriteEndObject();
		}
	}

	public partial class RankFeaturesProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_features";
	}

	[JsonConverter(typeof(RankFeaturesPropertyDescriptorConverter))]
	public partial class RankFeaturesPropertyDescriptor : DescriptorBase<RankFeaturesPropertyDescriptor>
	{
	}

	internal sealed class RankFeaturesPropertyDescriptorConverter : JsonConverter<RankFeaturesPropertyDescriptor>
	{
		public override RankFeaturesPropertyDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RankFeaturesPropertyDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("type");
			writer.WriteStringValue("rank_features");
			writer.WriteEndObject();
		}
	}

	public partial class RoutingField
	{
		[JsonInclude]
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	public partial class RuntimeField
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType Type { get; set; }
	}

	[JsonConverter(typeof(RuntimeFieldDescriptorConverter))]
	public partial class RuntimeFieldDescriptor : DescriptorBase<RuntimeFieldDescriptor>
	{
		internal string? _format;
		internal Elastic.Clients.Elasticsearch.Script? _script;
		internal Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType _type;
		public RuntimeFieldDescriptor Format(string? format) => Assign(format, (a, v) => a._format = v);
		public RuntimeFieldDescriptor Script(Elastic.Clients.Elasticsearch.Script? script) => Assign(script, (a, v) => a._script = v);
		public RuntimeFieldDescriptor Type(Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType type) => Assign(type, (a, v) => a._type = v);
	}

	internal sealed class RuntimeFieldDescriptorConverter : JsonConverter<RuntimeFieldDescriptor>
	{
		public override RuntimeFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RuntimeFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value._format))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value._format);
			}

			if (value._script is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, value._script, options);
			}

			writer.WritePropertyName("type");
			JsonSerializer.Serialize(writer, value._type, options);
			writer.WriteEndObject();
		}
	}

	public partial class ScaledFloatNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "scaled_float";
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor { get; init; }
	}

	public partial class SearchAsYouTypeProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "search_as_you_type";
	}

	public partial class ShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "shape";
	}

	public partial class ShortNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "short";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class SizeField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class SourceField
	{
		[JsonInclude]
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonInclude]
		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("excludes")]
		public IEnumerable<string>? Excludes { get; set; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public IEnumerable<string>? Includes { get; set; }
	}

	[JsonConverter(typeof(SourceFieldDescriptorConverter))]
	public partial class SourceFieldDescriptor : DescriptorBase<SourceFieldDescriptor>
	{
		internal bool? _compress;
		internal string? _compressThreshold;
		internal bool? _enabled;
		internal IEnumerable<string>? _excludes;
		internal IEnumerable<string>? _includes;
		public SourceFieldDescriptor Compress(bool? compress = true) => Assign(compress, (a, v) => a._compress = v);
		public SourceFieldDescriptor CompressThreshold(string? compressThreshold) => Assign(compressThreshold, (a, v) => a._compressThreshold = v);
		public SourceFieldDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a._enabled = v);
		public SourceFieldDescriptor Excludes(IEnumerable<string>? excludes) => Assign(excludes, (a, v) => a._excludes = v);
		public SourceFieldDescriptor Includes(IEnumerable<string>? includes) => Assign(includes, (a, v) => a._includes = v);
	}

	internal sealed class SourceFieldDescriptorConverter : JsonConverter<SourceFieldDescriptor>
	{
		public override SourceFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, SourceFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._compress.HasValue)
			{
				writer.WritePropertyName("compress");
				writer.WriteBooleanValue(value._compress.Value);
			}

			if (!string.IsNullOrEmpty(value._compressThreshold))
			{
				writer.WritePropertyName("compress_threshold");
				writer.WriteStringValue(value._compressThreshold);
			}

			if (value._enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value._enabled.Value);
			}

			if (value._excludes is not null)
			{
				writer.WritePropertyName("excludes");
				JsonSerializer.Serialize(writer, value._excludes, options);
			}

			if (value._includes is not null)
			{
				writer.WritePropertyName("includes");
				JsonSerializer.Serialize(writer, value._includes, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class StandardNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("on_script_error")]
		public Elastic.Clients.Elasticsearch.Mapping.OnScriptError? OnScriptError { get; init; }
	}

	public partial class SuggestContext
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public Union<int?, string?>? Precision { get; init; }
	}

	public partial class TextIndexPrefixes
	{
		[JsonInclude]
		[JsonPropertyName("max_chars")]
		public int MaxChars { get; init; }

		[JsonInclude]
		[JsonPropertyName("min_chars")]
		public int MinChars { get; init; }
	}

	public partial class TextProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public bool? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata_frequency_filter")]
		public Elastic.Clients.Elasticsearch.IndexManagement.FielddataFrequencyFilter? FielddataFrequencyFilter { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_prefixes")]
		public Elastic.Clients.Elasticsearch.Mapping.TextIndexPrefixes? IndexPrefixes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "text";
	}

	public partial class TokenCountProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "token_count";
	}

	public partial class TypeMapping
	{
		[JsonInclude]
		[JsonPropertyName("all_field")]
		public Elastic.Clients.Elasticsearch.Mapping.AllField? AllField { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_date_formats")]
		public IEnumerable<string>? DynamicDateFormats { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_templates")]
		public Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? DynamicTemplates { get; set; }

		[JsonInclude]
		[JsonPropertyName("_field_names")]
		public Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? FieldNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_field")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexField? IndexField { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; set; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public Elastic.Clients.Elasticsearch.Mapping.RoutingField? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("_size")]
		public Elastic.Clients.Elasticsearch.Mapping.SizeField? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.Mapping.SourceField? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? Runtime { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }
	}

	[JsonConverter(typeof(TypeMappingDescriptorConverter))]
	public partial class TypeMappingDescriptor : DescriptorBase<TypeMappingDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.Mapping.AllField? _allField;
		internal bool? _dateDetection;
		internal Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? _dynamic;
		internal IEnumerable<string>? _dynamicDateFormats;
		internal Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? _dynamicTemplates;
		internal Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? _fieldNames;
		internal Elastic.Clients.Elasticsearch.Mapping.IndexField? _indexField;
		internal Dictionary<string, object>? _meta;
		internal bool? _numericDetection;
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? _properties;
		internal Elastic.Clients.Elasticsearch.Mapping.RoutingField? _routing;
		internal Elastic.Clients.Elasticsearch.Mapping.SizeField? _size;
		internal Elastic.Clients.Elasticsearch.Mapping.SourceField? _source;
		internal Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? _runtime;
		internal bool? _enabled;
		public TypeMappingDescriptor AllField(Elastic.Clients.Elasticsearch.Mapping.AllField? allField) => Assign(allField, (a, v) => a._allField = v);
		public TypeMappingDescriptor DateDetection(bool? dateDetection = true) => Assign(dateDetection, (a, v) => a._dateDetection = v);
		public TypeMappingDescriptor Dynamic(Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? dynamic) => Assign(dynamic, (a, v) => a._dynamic = v);
		public TypeMappingDescriptor DynamicDateFormats(IEnumerable<string>? dynamicDateFormats) => Assign(dynamicDateFormats, (a, v) => a._dynamicDateFormats = v);
		public TypeMappingDescriptor DynamicTemplates(Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? dynamicTemplates) => Assign(dynamicTemplates, (a, v) => a._dynamicTemplates = v);
		public TypeMappingDescriptor FieldNames(Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? fieldNames) => Assign(fieldNames, (a, v) => a._fieldNames = v);
		public TypeMappingDescriptor IndexField(Elastic.Clients.Elasticsearch.Mapping.IndexField? indexField) => Assign(indexField, (a, v) => a._indexField = v);
		public TypeMappingDescriptor Meta(Dictionary<string, object>? meta) => Assign(meta, (a, v) => a._meta = v);
		public TypeMappingDescriptor NumericDetection(bool? numericDetection = true) => Assign(numericDetection, (a, v) => a._numericDetection = v);
		public TypeMappingDescriptor Routing(Elastic.Clients.Elasticsearch.Mapping.RoutingField? routing) => Assign(routing, (a, v) => a._routing = v);
		public TypeMappingDescriptor Size(Elastic.Clients.Elasticsearch.Mapping.SizeField? size) => Assign(size, (a, v) => a._size = v);
		public TypeMappingDescriptor Source(Elastic.Clients.Elasticsearch.Mapping.SourceField? source) => Assign(source, (a, v) => a._source = v);
		public TypeMappingDescriptor Runtime(Func<FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>, FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>> selector) => Assign(selector, (a, v) => a._runtime = v?.Invoke(new FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>()));
		public TypeMappingDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a._enabled = v);
	}

	internal sealed class TypeMappingDescriptorConverter : JsonConverter<TypeMappingDescriptor>
	{
		public override TypeMappingDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, TypeMappingDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._allField is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, value._allField, options);
			}

			if (value._dateDetection.HasValue)
			{
				writer.WritePropertyName("date_detection");
				writer.WriteBooleanValue(value._dateDetection.Value);
			}

			if (value._dynamic is not null)
			{
				writer.WritePropertyName("dynamic");
				JsonSerializer.Serialize(writer, value._dynamic, options);
			}

			if (value._dynamicDateFormats is not null)
			{
				writer.WritePropertyName("dynamic_date_formats");
				JsonSerializer.Serialize(writer, value._dynamicDateFormats, options);
			}

			if (value._dynamicTemplates is not null)
			{
				writer.WritePropertyName("dynamic_templates");
				JsonSerializer.Serialize(writer, value._dynamicTemplates, options);
			}

			if (value._fieldNames is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, value._fieldNames, options);
			}

			if (value._indexField is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, value._indexField, options);
			}

			if (value._meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value._meta, options);
			}

			if (value._numericDetection.HasValue)
			{
				writer.WritePropertyName("numeric_detection");
				writer.WriteBooleanValue(value._numericDetection.Value);
			}

			if (value._properties is not null)
			{
				writer.WritePropertyName("properties");
				JsonSerializer.Serialize(writer, value._properties, options);
			}

			if (value._routing is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, value._routing, options);
			}

			if (value._size is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, value._size, options);
			}

			if (value._source is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value._source, options);
			}

			if (value._runtime is not null)
			{
				writer.WritePropertyName("runtime");
				JsonSerializer.Serialize(writer, value._runtime, options);
			}

			if (value._enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value._enabled.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class UnsignedLongNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "unsigned_long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class VersionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "version";
	}

	public partial class WildcardProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "wildcard";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }
	}
}
