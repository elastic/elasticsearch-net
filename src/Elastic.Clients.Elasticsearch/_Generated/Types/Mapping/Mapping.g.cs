// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public partial class AggregateMetricDoubleProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "aggregate_metric_double";
		[JsonInclude]
		[JsonPropertyName("default_metric")]
		public string DefaultMetric { get; init; }

		[JsonInclude]
		[JsonPropertyName("metrics")]
		public IReadOnlyCollection<string> Metrics { get; init; }
	}

	public partial class AllField
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	[JsonConverter(typeof(AllFieldDescriptorConverter))]
	public sealed partial class AllFieldDescriptor : DescriptorBase<AllFieldDescriptor>
	{
		public AllFieldDescriptor()
		{
		}

		internal AllFieldDescriptor(Action<AllFieldDescriptor> configure) => configure.Invoke(this);
		internal string AnalyzerValue { get; private set; }

		internal bool EnabledValue { get; private set; }

		internal bool OmitNormsValue { get; private set; }

		internal string SearchAnalyzerValue { get; private set; }

		internal string SimilarityValue { get; private set; }

		internal bool StoreValue { get; private set; }

		internal bool StoreTermVectorOffsetsValue { get; private set; }

		internal bool StoreTermVectorPayloadsValue { get; private set; }

		internal bool StoreTermVectorPositionsValue { get; private set; }

		internal bool StoreTermVectorsValue { get; private set; }

		public AllFieldDescriptor Analyzer(string analyzer) => Assign(analyzer, (a, v) => a.AnalyzerValue = v);
		public AllFieldDescriptor Enabled(bool enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
		public AllFieldDescriptor OmitNorms(bool omitNorms = true) => Assign(omitNorms, (a, v) => a.OmitNormsValue = v);
		public AllFieldDescriptor SearchAnalyzer(string searchAnalyzer) => Assign(searchAnalyzer, (a, v) => a.SearchAnalyzerValue = v);
		public AllFieldDescriptor Similarity(string similarity) => Assign(similarity, (a, v) => a.SimilarityValue = v);
		public AllFieldDescriptor Store(bool store = true) => Assign(store, (a, v) => a.StoreValue = v);
		public AllFieldDescriptor StoreTermVectorOffsets(bool storeTermVectorOffsets = true) => Assign(storeTermVectorOffsets, (a, v) => a.StoreTermVectorOffsetsValue = v);
		public AllFieldDescriptor StoreTermVectorPayloads(bool storeTermVectorPayloads = true) => Assign(storeTermVectorPayloads, (a, v) => a.StoreTermVectorPayloadsValue = v);
		public AllFieldDescriptor StoreTermVectorPositions(bool storeTermVectorPositions = true) => Assign(storeTermVectorPositions, (a, v) => a.StoreTermVectorPositionsValue = v);
		public AllFieldDescriptor StoreTermVectors(bool storeTermVectors = true) => Assign(storeTermVectors, (a, v) => a.StoreTermVectorsValue = v);
	}

	internal sealed class AllFieldDescriptorConverter : JsonConverter<AllFieldDescriptor>
	{
		public override AllFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, AllFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(value.AnalyzerValue);
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value.EnabledValue);
			writer.WritePropertyName("omit_norms");
			writer.WriteBooleanValue(value.OmitNormsValue);
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(value.SearchAnalyzerValue);
			writer.WritePropertyName("similarity");
			writer.WriteStringValue(value.SimilarityValue);
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(value.StoreValue);
			writer.WritePropertyName("store_term_vector_offsets");
			writer.WriteBooleanValue(value.StoreTermVectorOffsetsValue);
			writer.WritePropertyName("store_term_vector_payloads");
			writer.WriteBooleanValue(value.StoreTermVectorPayloadsValue);
			writer.WritePropertyName("store_term_vector_positions");
			writer.WriteBooleanValue(value.StoreTermVectorPositionsValue);
			writer.WritePropertyName("store_term_vectors");
			writer.WriteBooleanValue(value.StoreTermVectorsValue);
			writer.WriteEndObject();
		}
	}

	public partial class BinaryProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "binary";
	}

	public partial class BooleanProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public bool? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "boolean";
	}

	public partial class ByteNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "byte";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class CompletionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? Contexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "completion";
	}

	public partial class ConstantKeywordProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object? Value { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "constant_keyword";
	}

	public abstract partial class CorePropertyBase : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("copy_to")]
		public Elastic.Clients.Elasticsearch.Fields? CopyTo { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool? Store { get; init; }
	}

	public partial class DateNanosProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_nanos";
	}

	public partial class DateProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }

		[JsonInclude]
		[JsonPropertyName("locale")]
		public string? Locale { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date";
	}

	public partial class DateRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "date_range";
	}

	public partial class DenseVectorIndexOptions
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("m")]
		public int m { get; init; }

		[JsonInclude]
		[JsonPropertyName("ef_construction")]
		public int EfConstruction { get; init; }
	}

	public partial class DenseVectorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "dense_vector";
		[JsonInclude]
		[JsonPropertyName("dims")]
		public int Dims { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.DenseVectorIndexOptions? IndexOptions { get; init; }
	}

	public abstract partial class DocValuesPropertyBase : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }
	}

	public partial class DoubleNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class DoubleRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "double_range";
	}

	public partial class DynamicTemplate
	{
		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_pattern")]
		public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	[JsonConverter(typeof(DynamicTemplateDescriptorConverter))]
	public sealed partial class DynamicTemplateDescriptor : DescriptorBase<DynamicTemplateDescriptor>
	{
		public DynamicTemplateDescriptor()
		{
		}

		internal DynamicTemplateDescriptor(Action<DynamicTemplateDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? MappingValue { get; private set; }

		internal string? MatchValue { get; private set; }

		internal string? MatchMappingTypeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPatternValue { get; private set; }

		internal string? PathMatchValue { get; private set; }

		internal string? PathUnmatchValue { get; private set; }

		internal string? UnmatchValue { get; private set; }

		public DynamicTemplateDescriptor Mapping(Elastic.Clients.Elasticsearch.Mapping.Properties? mapping) => Assign(mapping, (a, v) => a.MappingValue = v);
		public DynamicTemplateDescriptor Match(string? match) => Assign(match, (a, v) => a.MatchValue = v);
		public DynamicTemplateDescriptor MatchMappingType(string? matchMappingType) => Assign(matchMappingType, (a, v) => a.MatchMappingTypeValue = v);
		public DynamicTemplateDescriptor MatchPattern(Elastic.Clients.Elasticsearch.Mapping.MatchType? matchPattern) => Assign(matchPattern, (a, v) => a.MatchPatternValue = v);
		public DynamicTemplateDescriptor PathMatch(string? pathMatch) => Assign(pathMatch, (a, v) => a.PathMatchValue = v);
		public DynamicTemplateDescriptor PathUnmatch(string? pathUnmatch) => Assign(pathUnmatch, (a, v) => a.PathUnmatchValue = v);
		public DynamicTemplateDescriptor Unmatch(string? unmatch) => Assign(unmatch, (a, v) => a.UnmatchValue = v);
	}

	internal sealed class DynamicTemplateDescriptorConverter : JsonConverter<DynamicTemplateDescriptor>
	{
		public override DynamicTemplateDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, DynamicTemplateDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.MappingValue is not null)
			{
				writer.WritePropertyName("mapping");
				JsonSerializer.Serialize(writer, value.MappingValue, options);
			}

			if (!string.IsNullOrEmpty(value.MatchValue))
			{
				writer.WritePropertyName("match");
				writer.WriteStringValue(value.MatchValue);
			}

			if (!string.IsNullOrEmpty(value.MatchMappingTypeValue))
			{
				writer.WritePropertyName("match_mapping_type");
				writer.WriteStringValue(value.MatchMappingTypeValue);
			}

			if (value.MatchPatternValue is not null)
			{
				writer.WritePropertyName("match_pattern");
				JsonSerializer.Serialize(writer, value.MatchPatternValue, options);
			}

			if (!string.IsNullOrEmpty(value.PathMatchValue))
			{
				writer.WritePropertyName("path_match");
				writer.WriteStringValue(value.PathMatchValue);
			}

			if (!string.IsNullOrEmpty(value.PathUnmatchValue))
			{
				writer.WritePropertyName("path_unmatch");
				writer.WriteStringValue(value.PathUnmatchValue);
			}

			if (!string.IsNullOrEmpty(value.UnmatchValue))
			{
				writer.WritePropertyName("unmatch");
				writer.WriteStringValue(value.UnmatchValue);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FieldAliasProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "alias";
	}

	public partial class FieldMapping
	{
		[JsonInclude]
		[JsonPropertyName("full_name")]
		public string FullName { get; init; }

		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties Mapping { get; init; }
	}

	public partial class FieldNamesField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(FieldNamesFieldDescriptorConverter))]
	public sealed partial class FieldNamesFieldDescriptor : DescriptorBase<FieldNamesFieldDescriptor>
	{
		public FieldNamesFieldDescriptor()
		{
		}

		internal FieldNamesFieldDescriptor(Action<FieldNamesFieldDescriptor> configure) => configure.Invoke(this);
		internal bool EnabledValue { get; private set; }

		public FieldNamesFieldDescriptor Enabled(bool enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
	}

	internal sealed class FieldNamesFieldDescriptorConverter : JsonConverter<FieldNamesFieldDescriptor>
	{
		public override FieldNamesFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, FieldNamesFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value.EnabledValue);
			writer.WriteEndObject();
		}
	}

	public partial class FlattenedProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("depth_limit")]
		public int? DepthLimit { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "flattened";
	}

	public partial class FloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class FloatRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "float_range";
	}

	public partial class GenericProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.StringFielddata Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class GeoPointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_point";
	}

	public partial class GeoShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("strategy")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoStrategy? Strategy { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "geo_shape";
	}

	public partial class HalfFloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "half_float";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class HistogramProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "histogram";
	}

	public partial class IndexField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(IndexFieldDescriptorConverter))]
	public sealed partial class IndexFieldDescriptor : DescriptorBase<IndexFieldDescriptor>
	{
		public IndexFieldDescriptor()
		{
		}

		internal IndexFieldDescriptor(Action<IndexFieldDescriptor> configure) => configure.Invoke(this);
		internal bool EnabledValue { get; private set; }

		public IndexFieldDescriptor Enabled(bool enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
	}

	internal sealed class IndexFieldDescriptorConverter : JsonConverter<IndexFieldDescriptor>
	{
		public override IndexFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, IndexFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value.EnabledValue);
			writer.WriteEndObject();
		}
	}

	public partial class IntegerNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public int? NullValue { get; init; }
	}

	public partial class IntegerRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "integer_range";
	}

	public partial class IpProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip";
	}

	public partial class IpRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "ip_range";
	}

	public partial class JoinProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("relations")]
		public Dictionary<string, string>? Relations { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "join";
	}

	public partial class KeywordProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_series_dimension")]
		public bool? TimeSeriesDimension { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "keyword";
	}

	public partial class LongNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class LongRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "long_range";
	}

	public partial class Murmur3HashProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "murmur3";
	}

	public partial class NestedProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "nested";
	}

	public abstract partial class NumberPropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("time_series_metric")]
		public Elastic.Clients.Elasticsearch.Mapping.TimeSeriesMetricType? TimeSeriesMetric { get; init; }
	}

	public partial class ObjectProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "object";
	}

	public partial class PercolatorProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "percolator";
	}

	public partial class PointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "point";
	}

	public abstract partial class PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("local_metadata")]
		public Dictionary<string, object>? LocalMetadata { get; init; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, string>? Meta { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove { get; init; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Fields { get; init; }
	}

	public abstract partial class RangePropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }
	}

	public partial class RankFeatureProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("positive_score_impact")]
		public bool? PositiveScoreImpact { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_feature";
	}

	public partial class RankFeaturesProperty : Mapping.PropertyBase, IPropertiesVariant
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "rank_features";
	}

	public partial class RoutingField
	{
		[JsonInclude]
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	[JsonConverter(typeof(RoutingFieldDescriptorConverter))]
	public sealed partial class RoutingFieldDescriptor : DescriptorBase<RoutingFieldDescriptor>
	{
		public RoutingFieldDescriptor()
		{
		}

		internal RoutingFieldDescriptor(Action<RoutingFieldDescriptor> configure) => configure.Invoke(this);
		internal bool RequiredValue { get; private set; }

		public RoutingFieldDescriptor Required(bool required = true) => Assign(required, (a, v) => a.RequiredValue = v);
	}

	internal sealed class RoutingFieldDescriptorConverter : JsonConverter<RoutingFieldDescriptor>
	{
		public override RoutingFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RoutingFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("required");
			writer.WriteBooleanValue(value.RequiredValue);
			writer.WriteEndObject();
		}
	}

	public partial class RuntimeField
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType Type { get; set; }
	}

	[JsonConverter(typeof(RuntimeFieldDescriptorConverter))]
	public sealed partial class RuntimeFieldDescriptor : DescriptorBase<RuntimeFieldDescriptor>
	{
		public RuntimeFieldDescriptor()
		{
		}

		internal RuntimeFieldDescriptor(Action<RuntimeFieldDescriptor> configure) => configure.Invoke(this);
		internal string? FormatValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Script? ScriptValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType TypeValue { get; private set; }

		public RuntimeFieldDescriptor Format(string? format) => Assign(format, (a, v) => a.FormatValue = v);
		public RuntimeFieldDescriptor Script(Elastic.Clients.Elasticsearch.Script? script) => Assign(script, (a, v) => a.ScriptValue = v);
		public RuntimeFieldDescriptor Type(Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType type) => Assign(type, (a, v) => a.TypeValue = v);
	}

	internal sealed class RuntimeFieldDescriptorConverter : JsonConverter<RuntimeFieldDescriptor>
	{
		public override RuntimeFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RuntimeFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value.FormatValue))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value.FormatValue);
			}

			if (value.ScriptValue is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, value.ScriptValue, options);
			}

			writer.WritePropertyName("type");
			JsonSerializer.Serialize(writer, value.TypeValue, options);
			writer.WriteEndObject();
		}
	}

	public partial class ScaledFloatNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "scaled_float";
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor { get; init; }
	}

	public partial class SearchAsYouTypeProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "search_as_you_type";
	}

	public partial class ShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "shape";
	}

	public partial class ShortNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "short";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class SizeField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[JsonConverter(typeof(SizeFieldDescriptorConverter))]
	public sealed partial class SizeFieldDescriptor : DescriptorBase<SizeFieldDescriptor>
	{
		public SizeFieldDescriptor()
		{
		}

		internal SizeFieldDescriptor(Action<SizeFieldDescriptor> configure) => configure.Invoke(this);
		internal bool EnabledValue { get; private set; }

		public SizeFieldDescriptor Enabled(bool enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
	}

	internal sealed class SizeFieldDescriptorConverter : JsonConverter<SizeFieldDescriptor>
	{
		public override SizeFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, SizeFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value.EnabledValue);
			writer.WriteEndObject();
		}
	}

	public partial class SourceField
	{
		[JsonInclude]
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonInclude]
		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("excludes")]
		public IEnumerable<string>? Excludes { get; set; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public IEnumerable<string>? Includes { get; set; }
	}

	[JsonConverter(typeof(SourceFieldDescriptorConverter))]
	public sealed partial class SourceFieldDescriptor : DescriptorBase<SourceFieldDescriptor>
	{
		public SourceFieldDescriptor()
		{
		}

		internal SourceFieldDescriptor(Action<SourceFieldDescriptor> configure) => configure.Invoke(this);
		internal bool? CompressValue { get; private set; }

		internal string? CompressThresholdValue { get; private set; }

		internal bool? EnabledValue { get; private set; }

		internal IEnumerable<string>? ExcludesValue { get; private set; }

		internal IEnumerable<string>? IncludesValue { get; private set; }

		public SourceFieldDescriptor Compress(bool? compress = true) => Assign(compress, (a, v) => a.CompressValue = v);
		public SourceFieldDescriptor CompressThreshold(string? compressThreshold) => Assign(compressThreshold, (a, v) => a.CompressThresholdValue = v);
		public SourceFieldDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
		public SourceFieldDescriptor Excludes(IEnumerable<string>? excludes) => Assign(excludes, (a, v) => a.ExcludesValue = v);
		public SourceFieldDescriptor Includes(IEnumerable<string>? includes) => Assign(includes, (a, v) => a.IncludesValue = v);
	}

	internal sealed class SourceFieldDescriptorConverter : JsonConverter<SourceFieldDescriptor>
	{
		public override SourceFieldDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, SourceFieldDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.CompressValue.HasValue)
			{
				writer.WritePropertyName("compress");
				writer.WriteBooleanValue(value.CompressValue.Value);
			}

			if (!string.IsNullOrEmpty(value.CompressThresholdValue))
			{
				writer.WritePropertyName("compress_threshold");
				writer.WriteStringValue(value.CompressThresholdValue);
			}

			if (value.EnabledValue.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value.EnabledValue.Value);
			}

			if (value.ExcludesValue is not null)
			{
				writer.WritePropertyName("excludes");
				JsonSerializer.Serialize(writer, value.ExcludesValue, options);
			}

			if (value.IncludesValue is not null)
			{
				writer.WritePropertyName("includes");
				JsonSerializer.Serialize(writer, value.IncludesValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class StandardNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("on_script_error")]
		public Elastic.Clients.Elasticsearch.Mapping.OnScriptError? OnScriptError { get; init; }
	}

	public partial class SuggestContext
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public Union<int?, string?>? Precision { get; init; }
	}

	public partial class TextIndexPrefixes
	{
		[JsonInclude]
		[JsonPropertyName("max_chars")]
		public int MaxChars { get; init; }

		[JsonInclude]
		[JsonPropertyName("min_chars")]
		public int MinChars { get; init; }
	}

	public partial class TextProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public bool? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata_frequency_filter")]
		public Elastic.Clients.Elasticsearch.IndexManagement.FielddataFrequencyFilter? FielddataFrequencyFilter { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_prefixes")]
		public Elastic.Clients.Elasticsearch.Mapping.TextIndexPrefixes? IndexPrefixes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "text";
	}

	public partial class TokenCountProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "token_count";
	}

	public partial class TypeMapping
	{
		[JsonInclude]
		[JsonPropertyName("all_field")]
		public Elastic.Clients.Elasticsearch.Mapping.AllField? AllField { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_date_formats")]
		public IEnumerable<string>? DynamicDateFormats { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_templates")]
		public Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? DynamicTemplates { get; set; }

		[JsonInclude]
		[JsonPropertyName("_field_names")]
		public Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? FieldNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_field")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexField? IndexField { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; set; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public Elastic.Clients.Elasticsearch.Mapping.RoutingField? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("_size")]
		public Elastic.Clients.Elasticsearch.Mapping.SizeField? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.Mapping.SourceField? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? Runtime { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }
	}

	[JsonConverter(typeof(TypeMappingDescriptorConverter))]
	public sealed partial class TypeMappingDescriptor : DescriptorBase<TypeMappingDescriptor>
	{
		public TypeMappingDescriptor()
		{
		}

		internal TypeMappingDescriptor(Action<TypeMappingDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Mapping.AllField? AllFieldValue { get; private set; }

		internal bool? DateDetectionValue { get; private set; }

		internal Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? DynamicValue { get; private set; }

		internal IEnumerable<string>? DynamicDateFormatsValue { get; private set; }

		internal Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? DynamicTemplatesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? FieldNamesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.IndexField? IndexFieldValue { get; private set; }

		internal Dictionary<string, object>? MetaValue { get; private set; }

		internal bool? NumericDetectionValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.Properties? PropertiesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.RoutingField? RoutingValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.SizeField? SizeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.SourceField? SourceValue { get; private set; }

		internal Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? RuntimeValue { get; private set; }

		internal bool? EnabledValue { get; private set; }

		internal AllFieldDescriptor AllFieldDescriptor { get; private set; }

		internal FieldNamesFieldDescriptor FieldNamesDescriptor { get; private set; }

		internal IndexFieldDescriptor IndexFieldDescriptor { get; private set; }

		internal RoutingFieldDescriptor RoutingDescriptor { get; private set; }

		internal SizeFieldDescriptor SizeDescriptor { get; private set; }

		internal SourceFieldDescriptor SourceDescriptor { get; private set; }

		internal Action<AllFieldDescriptor> AllFieldDescriptorAction { get; private set; }

		internal Action<FieldNamesFieldDescriptor> FieldNamesDescriptorAction { get; private set; }

		internal Action<IndexFieldDescriptor> IndexFieldDescriptorAction { get; private set; }

		internal Action<RoutingFieldDescriptor> RoutingDescriptorAction { get; private set; }

		internal Action<SizeFieldDescriptor> SizeDescriptorAction { get; private set; }

		internal Action<SourceFieldDescriptor> SourceDescriptorAction { get; private set; }

		public TypeMappingDescriptor AllField(Elastic.Clients.Elasticsearch.Mapping.AllField? allField)
		{
			AllFieldDescriptor = null;
			AllFieldDescriptorAction = null;
			return Assign(allField, (a, v) => a.AllFieldValue = v);
		}

		public TypeMappingDescriptor AllField(Elastic.Clients.Elasticsearch.Mapping.AllFieldDescriptor descriptor)
		{
			AllFieldValue = null;
			AllFieldDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.AllFieldDescriptor = v);
		}

		public TypeMappingDescriptor AllField(Action<Elastic.Clients.Elasticsearch.Mapping.AllFieldDescriptor> configure)
		{
			AllFieldValue = null;
			AllFieldDescriptorAction = null;
			return Assign(configure, (a, v) => a.AllFieldDescriptorAction = v);
		}

		public TypeMappingDescriptor DateDetection(bool? dateDetection = true) => Assign(dateDetection, (a, v) => a.DateDetectionValue = v);
		public TypeMappingDescriptor Dynamic(Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? dynamic) => Assign(dynamic, (a, v) => a.DynamicValue = v);
		public TypeMappingDescriptor DynamicDateFormats(IEnumerable<string>? dynamicDateFormats) => Assign(dynamicDateFormats, (a, v) => a.DynamicDateFormatsValue = v);
		public TypeMappingDescriptor DynamicTemplates(Union<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>?, IEnumerable<Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.DynamicTemplate>>?>? dynamicTemplates) => Assign(dynamicTemplates, (a, v) => a.DynamicTemplatesValue = v);
		public TypeMappingDescriptor FieldNames(Elastic.Clients.Elasticsearch.Mapping.FieldNamesField? fieldNames)
		{
			FieldNamesDescriptor = null;
			FieldNamesDescriptorAction = null;
			return Assign(fieldNames, (a, v) => a.FieldNamesValue = v);
		}

		public TypeMappingDescriptor FieldNames(Elastic.Clients.Elasticsearch.Mapping.FieldNamesFieldDescriptor descriptor)
		{
			FieldNamesValue = null;
			FieldNamesDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.FieldNamesDescriptor = v);
		}

		public TypeMappingDescriptor FieldNames(Action<Elastic.Clients.Elasticsearch.Mapping.FieldNamesFieldDescriptor> configure)
		{
			FieldNamesValue = null;
			FieldNamesDescriptorAction = null;
			return Assign(configure, (a, v) => a.FieldNamesDescriptorAction = v);
		}

		public TypeMappingDescriptor IndexField(Elastic.Clients.Elasticsearch.Mapping.IndexField? indexField)
		{
			IndexFieldDescriptor = null;
			IndexFieldDescriptorAction = null;
			return Assign(indexField, (a, v) => a.IndexFieldValue = v);
		}

		public TypeMappingDescriptor IndexField(Elastic.Clients.Elasticsearch.Mapping.IndexFieldDescriptor descriptor)
		{
			IndexFieldValue = null;
			IndexFieldDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.IndexFieldDescriptor = v);
		}

		public TypeMappingDescriptor IndexField(Action<Elastic.Clients.Elasticsearch.Mapping.IndexFieldDescriptor> configure)
		{
			IndexFieldValue = null;
			IndexFieldDescriptorAction = null;
			return Assign(configure, (a, v) => a.IndexFieldDescriptorAction = v);
		}

		public TypeMappingDescriptor Meta(Dictionary<string, object>? meta) => Assign(meta, (a, v) => a.MetaValue = v);
		public TypeMappingDescriptor NumericDetection(bool? numericDetection = true) => Assign(numericDetection, (a, v) => a.NumericDetectionValue = v);
		public TypeMappingDescriptor Properties(Elastic.Clients.Elasticsearch.Mapping.Properties? properties) => Assign(properties, (a, v) => a.PropertiesValue = v);
		public TypeMappingDescriptor Routing(Elastic.Clients.Elasticsearch.Mapping.RoutingField? routing)
		{
			RoutingDescriptor = null;
			RoutingDescriptorAction = null;
			return Assign(routing, (a, v) => a.RoutingValue = v);
		}

		public TypeMappingDescriptor Routing(Elastic.Clients.Elasticsearch.Mapping.RoutingFieldDescriptor descriptor)
		{
			RoutingValue = null;
			RoutingDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.RoutingDescriptor = v);
		}

		public TypeMappingDescriptor Routing(Action<Elastic.Clients.Elasticsearch.Mapping.RoutingFieldDescriptor> configure)
		{
			RoutingValue = null;
			RoutingDescriptorAction = null;
			return Assign(configure, (a, v) => a.RoutingDescriptorAction = v);
		}

		public TypeMappingDescriptor Size(Elastic.Clients.Elasticsearch.Mapping.SizeField? size)
		{
			SizeDescriptor = null;
			SizeDescriptorAction = null;
			return Assign(size, (a, v) => a.SizeValue = v);
		}

		public TypeMappingDescriptor Size(Elastic.Clients.Elasticsearch.Mapping.SizeFieldDescriptor descriptor)
		{
			SizeValue = null;
			SizeDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.SizeDescriptor = v);
		}

		public TypeMappingDescriptor Size(Action<Elastic.Clients.Elasticsearch.Mapping.SizeFieldDescriptor> configure)
		{
			SizeValue = null;
			SizeDescriptorAction = null;
			return Assign(configure, (a, v) => a.SizeDescriptorAction = v);
		}

		public TypeMappingDescriptor Source(Elastic.Clients.Elasticsearch.Mapping.SourceField? source)
		{
			SourceDescriptor = null;
			SourceDescriptorAction = null;
			return Assign(source, (a, v) => a.SourceValue = v);
		}

		public TypeMappingDescriptor Source(Elastic.Clients.Elasticsearch.Mapping.SourceFieldDescriptor descriptor)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.SourceDescriptor = v);
		}

		public TypeMappingDescriptor Source(Action<Elastic.Clients.Elasticsearch.Mapping.SourceFieldDescriptor> configure)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			return Assign(configure, (a, v) => a.SourceDescriptorAction = v);
		}

		public TypeMappingDescriptor Runtime(Func<FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>, FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>> selector) => Assign(selector, (a, v) => a.RuntimeValue = v?.Invoke(new FluentDictionary<string?, Elastic.Clients.Elasticsearch.Mapping.RuntimeField?>()));
		public TypeMappingDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a.EnabledValue = v);
	}

	internal sealed class TypeMappingDescriptorConverter : JsonConverter<TypeMappingDescriptor>
	{
		public override TypeMappingDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, TypeMappingDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.AllFieldDescriptor is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, value.AllFieldDescriptor, options);
			}
			else if (value.AllFieldDescriptorAction is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, new AllFieldDescriptor(value.AllFieldDescriptorAction), options);
			}
			else if (value.AllFieldValue is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, value.AllFieldValue, options);
			}

			if (value.DateDetectionValue.HasValue)
			{
				writer.WritePropertyName("date_detection");
				writer.WriteBooleanValue(value.DateDetectionValue.Value);
			}

			if (value.DynamicValue is not null)
			{
				writer.WritePropertyName("dynamic");
				JsonSerializer.Serialize(writer, value.DynamicValue, options);
			}

			if (value.DynamicDateFormatsValue is not null)
			{
				writer.WritePropertyName("dynamic_date_formats");
				JsonSerializer.Serialize(writer, value.DynamicDateFormatsValue, options);
			}

			if (value.DynamicTemplatesValue is not null)
			{
				writer.WritePropertyName("dynamic_templates");
				JsonSerializer.Serialize(writer, value.DynamicTemplatesValue, options);
			}

			if (value.FieldNamesDescriptor is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, value.FieldNamesDescriptor, options);
			}
			else if (value.FieldNamesDescriptorAction is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, new FieldNamesFieldDescriptor(value.FieldNamesDescriptorAction), options);
			}
			else if (value.FieldNamesValue is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, value.FieldNamesValue, options);
			}

			if (value.IndexFieldDescriptor is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, value.IndexFieldDescriptor, options);
			}
			else if (value.IndexFieldDescriptorAction is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, new IndexFieldDescriptor(value.IndexFieldDescriptorAction), options);
			}
			else if (value.IndexFieldValue is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, value.IndexFieldValue, options);
			}

			if (value.MetaValue is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value.MetaValue, options);
			}

			if (value.NumericDetectionValue.HasValue)
			{
				writer.WritePropertyName("numeric_detection");
				writer.WriteBooleanValue(value.NumericDetectionValue.Value);
			}

			if (value.PropertiesValue is not null)
			{
				writer.WritePropertyName("properties");
				JsonSerializer.Serialize(writer, value.PropertiesValue, options);
			}

			if (value.RoutingDescriptor is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, value.RoutingDescriptor, options);
			}
			else if (value.RoutingDescriptorAction is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, new RoutingFieldDescriptor(value.RoutingDescriptorAction), options);
			}
			else if (value.RoutingValue is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, value.RoutingValue, options);
			}

			if (value.SizeDescriptor is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, value.SizeDescriptor, options);
			}
			else if (value.SizeDescriptorAction is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, new SizeFieldDescriptor(value.SizeDescriptorAction), options);
			}
			else if (value.SizeValue is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, value.SizeValue, options);
			}

			if (value.SourceDescriptor is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value.SourceDescriptor, options);
			}
			else if (value.SourceDescriptorAction is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, new SourceFieldDescriptor(value.SourceDescriptorAction), options);
			}
			else if (value.SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value.SourceValue, options);
			}

			if (value.RuntimeValue is not null)
			{
				writer.WritePropertyName("runtime");
				JsonSerializer.Serialize(writer, value.RuntimeValue, options);
			}

			if (value.EnabledValue.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value.EnabledValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class UnsignedLongNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "unsigned_long";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class VersionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "version";
	}

	public partial class WildcardProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type => "wildcard";
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }
	}
}