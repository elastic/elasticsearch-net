// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public partial class AggregateMetricDoubleProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("default_metric")]
		public string DefaultMetric { get; init; }

		[JsonInclude]
		[JsonPropertyName("metrics")]
		public IReadOnlyCollection<string> Metrics { get; init; }
	}

	[InterfaceConverterAttribute(typeof(AllFieldDescriptorConverter<AllField>))]
	public partial interface IAllField
	{
		string Analyzer { get; set; }

		bool Enabled { get; set; }

		bool OmitNorms { get; set; }

		string SearchAnalyzer { get; set; }

		string Similarity { get; set; }

		bool Store { get; set; }

		bool StoreTermVectorOffsets { get; set; }

		bool StoreTermVectorPayloads { get; set; }

		bool StoreTermVectorPositions { get; set; }

		bool StoreTermVectors { get; set; }
	}

	public partial class AllField : Mapping.IAllField
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("omit_norms")]
		public bool OmitNorms { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string Similarity { get; set; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool Store { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_offsets")]
		public bool StoreTermVectorOffsets { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_payloads")]
		public bool StoreTermVectorPayloads { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vector_positions")]
		public bool StoreTermVectorPositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("store_term_vectors")]
		public bool StoreTermVectors { get; set; }
	}

	public partial class AllFieldDescriptor : DescriptorBase<AllFieldDescriptor, IAllField>, IAllField
	{
		string IAllField.Analyzer { get; set; }

		bool IAllField.Enabled { get; set; }

		bool IAllField.OmitNorms { get; set; }

		string IAllField.SearchAnalyzer { get; set; }

		string IAllField.Similarity { get; set; }

		bool IAllField.Store { get; set; }

		bool IAllField.StoreTermVectorOffsets { get; set; }

		bool IAllField.StoreTermVectorPayloads { get; set; }

		bool IAllField.StoreTermVectorPositions { get; set; }

		bool IAllField.StoreTermVectors { get; set; }
	}

	internal sealed class AllFieldDescriptorConverter<TReadAs> : JsonConverter<IAllField> where TReadAs : class, IAllField
	{
		public override IAllField Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IAllField value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(value.Analyzer);
			writer.WritePropertyName("enabled");
			writer.WriteBooleanValue(value.Enabled);
			writer.WritePropertyName("omit_norms");
			writer.WriteBooleanValue(value.OmitNorms);
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(value.SearchAnalyzer);
			writer.WritePropertyName("similarity");
			writer.WriteStringValue(value.Similarity);
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(value.Store);
			writer.WritePropertyName("store_term_vector_offsets");
			writer.WriteBooleanValue(value.StoreTermVectorOffsets);
			writer.WritePropertyName("store_term_vector_payloads");
			writer.WriteBooleanValue(value.StoreTermVectorPayloads);
			writer.WritePropertyName("store_term_vector_positions");
			writer.WriteBooleanValue(value.StoreTermVectorPositions);
			writer.WritePropertyName("store_term_vectors");
			writer.WriteBooleanValue(value.StoreTermVectors);
			writer.WriteEndObject();
		}
	}

	public partial class BinaryProperty : Mapping.DocValuesPropertyBase
	{
	}

	public partial class BooleanProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public bool? NullValue { get; init; }
	}

	public partial class ByteNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class CompletionProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("contexts")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? Contexts { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_input_length")]
		public int? MaxInputLength { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_position_increments")]
		public bool? PreservePositionIncrements { get; init; }

		[JsonInclude]
		[JsonPropertyName("preserve_separators")]
		public bool? PreserveSeparators { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }
	}

	public partial class ConstantKeywordProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object? Value { get; init; }
	}

	public abstract partial class CorePropertyBase : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("copy_to")]
		public Elastic.Clients.Elasticsearch.Fields? CopyTo { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("store")]
		public bool? Store { get; init; }
	}

	public partial class DateNanosProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }
	}

	public partial class DateProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.NumericFielddata? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision_step")]
		public int? PrecisionStep { get; init; }
	}

	public partial class DateRangeProperty : Mapping.RangePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; init; }
	}

	public partial class DenseVectorProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("dims")]
		public int Dims { get; init; }
	}

	public abstract partial class DocValuesPropertyBase : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }
	}

	public partial class DoubleNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	public partial class DoubleRangeProperty : Mapping.RangePropertyBase
	{
	}

	[InterfaceConverterAttribute(typeof(DynamicTemplateDescriptorConverter<DynamicTemplate>))]
	public partial interface IDynamicTemplate
	{
		Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		string? Match { get; set; }

		string? MatchMappingType { get; set; }

		Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		string? PathMatch { get; set; }

		string? PathUnmatch { get; set; }

		string? Unmatch { get; set; }
	}

	public partial class DynamicTemplate : Mapping.IDynamicTemplate
	{
		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_pattern")]
		public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	public partial class DynamicTemplateDescriptor : DescriptorBase<DynamicTemplateDescriptor, IDynamicTemplate>, IDynamicTemplate
	{
		Elastic.Clients.Elasticsearch.Mapping.Properties? IDynamicTemplate.Mapping { get; set; }

		string? IDynamicTemplate.Match { get; set; }

		string? IDynamicTemplate.MatchMappingType { get; set; }

		Elastic.Clients.Elasticsearch.Mapping.MatchType? IDynamicTemplate.MatchPattern { get; set; }

		string? IDynamicTemplate.PathMatch { get; set; }

		string? IDynamicTemplate.PathUnmatch { get; set; }

		string? IDynamicTemplate.Unmatch { get; set; }
	}

	internal sealed class DynamicTemplateDescriptorConverter<TReadAs> : JsonConverter<IDynamicTemplate> where TReadAs : class, IDynamicTemplate
	{
		public override IDynamicTemplate Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IDynamicTemplate value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Mapping is not null)
			{
				writer.WritePropertyName("mapping");
				JsonSerializer.Serialize(writer, value.Mapping, options);
			}

			if (!string.IsNullOrEmpty(value.Match))
			{
				writer.WritePropertyName("match");
				writer.WriteStringValue(value.Match);
			}

			if (!string.IsNullOrEmpty(value.MatchMappingType))
			{
				writer.WritePropertyName("match_mapping_type");
				writer.WriteStringValue(value.MatchMappingType);
			}

			if (value.MatchPattern is not null)
			{
				writer.WritePropertyName("match_pattern");
				JsonSerializer.Serialize(writer, value.MatchPattern, options);
			}

			if (!string.IsNullOrEmpty(value.PathMatch))
			{
				writer.WritePropertyName("path_match");
				writer.WriteStringValue(value.PathMatch);
			}

			if (!string.IsNullOrEmpty(value.PathUnmatch))
			{
				writer.WritePropertyName("path_unmatch");
				writer.WriteStringValue(value.PathUnmatch);
			}

			if (!string.IsNullOrEmpty(value.Unmatch))
			{
				writer.WritePropertyName("unmatch");
				writer.WriteStringValue(value.Unmatch);
			}

			writer.WriteEndObject();
		}
	}

	public partial class FieldAliasProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IFieldNamesField, FieldNamesField>))]
	public partial interface IFieldNamesField
	{
		bool Enabled { get; set; }
	}

	public partial class FieldNamesField : Mapping.IFieldNamesField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class FlattenedProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("depth_limit")]
		public int? DepthLimit { get; init; }

		[JsonInclude]
		[JsonPropertyName("doc_values")]
		public bool? DocValues { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("similarity")]
		public string? Similarity { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }
	}

	public partial class FloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class FloatRangeProperty : Mapping.RangePropertyBase
	{
	}

	public partial class GenericProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public Elastic.Clients.Elasticsearch.IndexManagement.StringFielddata Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption TermVector { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }
	}

	public partial class GeoPointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? NullValue { get; init; }
	}

	public partial class GeoShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }

		[JsonInclude]
		[JsonPropertyName("strategy")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoStrategy? Strategy { get; init; }
	}

	public partial class HalfFloatNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public float? NullValue { get; init; }
	}

	public partial class HistogramProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IIndexField, IndexField>))]
	public partial interface IIndexField
	{
		bool Enabled { get; set; }
	}

	public partial class IndexField : Mapping.IIndexField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	public partial class IntegerNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public int? NullValue { get; init; }
	}

	public partial class IntegerRangeProperty : Mapping.RangePropertyBase
	{
	}

	public partial class IpProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }
	}

	public partial class IpRangeProperty : Mapping.RangePropertyBase
	{
	}

	public partial class JoinProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("relations")]
		public Dictionary<string, IReadOnlyCollection<string>>? Relations { get; init; }
	}

	public partial class KeywordProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("split_queries_on_whitespace")]
		public bool? SplitQueriesOnWhitespace { get; init; }
	}

	public partial class LongNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public object? NullValue { get; init; }
	}

	public partial class LongRangeProperty : Mapping.RangePropertyBase
	{
	}

	public partial class Murmur3HashProperty : Mapping.DocValuesPropertyBase
	{
	}

	public partial class NestedProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_parent")]
		public bool? IncludeInParent { get; init; }

		[JsonInclude]
		[JsonPropertyName("include_in_root")]
		public bool? IncludeInRoot { get; init; }
	}

	public abstract partial class NumberPropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }
	}

	public partial class ObjectProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; init; }
	}

	public partial class PercolatorProperty : Mapping.PropertyBase
	{
	}

	public partial class PointProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }
	}

	public abstract partial class PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("local_metadata")]
		public Dictionary<string, object>? LocalMetadata { get; init; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, string>? Meta { get; init; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.Properties>? Properties { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_above")]
		public int? IgnoreAbove { get; init; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; init; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.Properties>? Fields { get; init; }
	}

	public abstract partial class RangePropertyBase : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }
	}

	public partial class RankFeatureProperty : Mapping.PropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("positive_score_impact")]
		public bool? PositiveScoreImpact { get; init; }
	}

	public partial class RankFeaturesProperty : Mapping.PropertyBase
	{
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRoutingField, RoutingField>))]
	public partial interface IRoutingField
	{
		bool Required { get; set; }
	}

	public partial class RoutingField : Mapping.IRoutingField
	{
		[JsonInclude]
		[JsonPropertyName("required")]
		public bool Required { get; set; }
	}

	[InterfaceConverterAttribute(typeof(RuntimeFieldDescriptorConverter<RuntimeField>))]
	public partial interface IRuntimeField
	{
		string? Format { get; set; }

		Elastic.Clients.Elasticsearch.Script? Script { get; set; }

		Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType Type { get; set; }
	}

	public partial class RuntimeField : Mapping.IRuntimeField
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType Type { get; set; }
	}

	public partial class RuntimeFieldDescriptor : DescriptorBase<RuntimeFieldDescriptor, IRuntimeField>, IRuntimeField
	{
		string? IRuntimeField.Format { get; set; }

		Elastic.Clients.Elasticsearch.Script? IRuntimeField.Script { get; set; }

		Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldType IRuntimeField.Type { get; set; }
	}

	internal sealed class RuntimeFieldDescriptorConverter<TReadAs> : JsonConverter<IRuntimeField> where TReadAs : class, IRuntimeField
	{
		public override IRuntimeField Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IRuntimeField value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value.Format))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value.Format);
			}

			if (value.Script is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, value.Script, options);
			}

			writer.WritePropertyName("type");
			JsonSerializer.Serialize(writer, value.Type, options);
			writer.WriteEndObject();
		}
	}

	public partial class ScaledFloatNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public double? ScalingFactor { get; init; }
	}

	public partial class SearchAsYouTypeProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("max_shingle_size")]
		public int? MaxShingleSize { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }
	}

	public partial class ShapeProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_malformed")]
		public bool? IgnoreMalformed { get; init; }

		[JsonInclude]
		[JsonPropertyName("ignore_z_value")]
		public bool? IgnoreZValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("orientation")]
		public Elastic.Clients.Elasticsearch.Mapping.GeoOrientation? Orientation { get; init; }
	}

	public partial class ShortNumberProperty : Mapping.StandardNumberProperty
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<ISizeField, SizeField>))]
	public partial interface ISizeField
	{
		bool Enabled { get; set; }
	}

	public partial class SizeField : Mapping.ISizeField
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool Enabled { get; set; }
	}

	[InterfaceConverterAttribute(typeof(SourceFieldDescriptorConverter<SourceField>))]
	public partial interface ISourceField
	{
		bool? Compress { get; set; }

		string? CompressThreshold { get; set; }

		bool? Enabled { get; set; }

		IEnumerable<string>? Excludes { get; set; }

		IEnumerable<string>? Includes { get; set; }
	}

	public partial class SourceField : Mapping.ISourceField
	{
		[JsonInclude]
		[JsonPropertyName("compress")]
		public bool? Compress { get; set; }

		[JsonInclude]
		[JsonPropertyName("compress_threshold")]
		public string? CompressThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("excludes")]
		public IEnumerable<string>? Excludes { get; set; }

		[JsonInclude]
		[JsonPropertyName("includes")]
		public IEnumerable<string>? Includes { get; set; }
	}

	public partial class SourceFieldDescriptor : DescriptorBase<SourceFieldDescriptor, ISourceField>, ISourceField
	{
		bool? ISourceField.Compress { get; set; }

		string? ISourceField.CompressThreshold { get; set; }

		bool? ISourceField.Enabled { get; set; }

		IEnumerable<string>? ISourceField.Excludes { get; set; }

		IEnumerable<string>? ISourceField.Includes { get; set; }
	}

	internal sealed class SourceFieldDescriptorConverter<TReadAs> : JsonConverter<ISourceField> where TReadAs : class, ISourceField
	{
		public override ISourceField Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ISourceField value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Compress.HasValue)
			{
				writer.WritePropertyName("compress");
				writer.WriteBooleanValue(value.Compress.Value);
			}

			if (!string.IsNullOrEmpty(value.CompressThreshold))
			{
				writer.WritePropertyName("compress_threshold");
				writer.WriteStringValue(value.CompressThreshold);
			}

			if (value.Enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value.Enabled.Value);
			}

			if (value.Excludes is not null)
			{
				writer.WritePropertyName("excludes");
				JsonSerializer.Serialize(writer, value.Excludes, options);
			}

			if (value.Includes is not null)
			{
				writer.WritePropertyName("includes");
				JsonSerializer.Serialize(writer, value.Includes, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class StandardNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("coerce")]
		public bool? Coerce { get; init; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script? Script { get; init; }

		[JsonInclude]
		[JsonPropertyName("on_script_error")]
		public Elastic.Clients.Elasticsearch.Mapping.OnScriptError? OnScriptError { get; init; }
	}

	public partial class SuggestContext
	{
		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name Name { get; init; }

		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; init; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type { get; init; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public Union<int?, string?>? Precision { get; init; }
	}

	public partial class TextIndexPrefixes
	{
		[JsonInclude]
		[JsonPropertyName("max_chars")]
		public int MaxChars { get; init; }

		[JsonInclude]
		[JsonPropertyName("min_chars")]
		public int MinChars { get; init; }
	}

	public partial class TextProperty : Mapping.CorePropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("eager_global_ordinals")]
		public bool? EagerGlobalOrdinals { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata")]
		public bool? Fielddata { get; init; }

		[JsonInclude]
		[JsonPropertyName("fielddata_frequency_filter")]
		public Elastic.Clients.Elasticsearch.IndexManagement.FielddataFrequencyFilter? FielddataFrequencyFilter { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_options")]
		public Elastic.Clients.Elasticsearch.Mapping.IndexOptions? IndexOptions { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_phrases")]
		public bool? IndexPhrases { get; init; }

		[JsonInclude]
		[JsonPropertyName("index_prefixes")]
		public Elastic.Clients.Elasticsearch.Mapping.TextIndexPrefixes? IndexPrefixes { get; init; }

		[JsonInclude]
		[JsonPropertyName("norms")]
		public bool? Norms { get; init; }

		[JsonInclude]
		[JsonPropertyName("position_increment_gap")]
		public int? PositionIncrementGap { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_analyzer")]
		public string? SearchAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("search_quote_analyzer")]
		public string? SearchQuoteAnalyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("term_vector")]
		public Elastic.Clients.Elasticsearch.Mapping.TermVectorOption? TermVector { get; init; }
	}

	public partial class TokenCountProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; init; }

		[JsonInclude]
		[JsonPropertyName("boost")]
		public double? Boost { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public bool? Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("null_value")]
		public double? NullValue { get; init; }

		[JsonInclude]
		[JsonPropertyName("enable_position_increments")]
		public bool? EnablePositionIncrements { get; init; }
	}

	[InterfaceConverterAttribute(typeof(TypeMappingDescriptorConverter<TypeMapping>))]
	public partial interface ITypeMapping
	{
		Mapping.IAllField? AllField { get; set; }

		bool? DateDetection { get; set; }

		Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; set; }

		IEnumerable<string>? DynamicDateFormats { get; set; }

		Union<Dictionary<string, Mapping.IDynamicTemplate>?, IEnumerable<Dictionary<string, Mapping.IDynamicTemplate>>?>? DynamicTemplates { get; set; }

		Mapping.IFieldNamesField? FieldNames { get; set; }

		Mapping.IIndexField? IndexField { get; set; }

		Dictionary<string, object>? Meta { get; set; }

		bool? NumericDetection { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.Properties>? Properties { get; set; }

		Mapping.IRoutingField? Routing { get; set; }

		Mapping.ISizeField? Size { get; set; }

		Mapping.ISourceField? Source { get; set; }

		Dictionary<string, Mapping.IRuntimeField>? Runtime { get; set; }

		bool? Enabled { get; set; }
	}

	public partial class TypeMapping : Mapping.ITypeMapping
	{
		[JsonInclude]
		[JsonPropertyName("all_field")]
		public Mapping.IAllField? AllField { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_detection")]
		public bool? DateDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic")]
		public Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? Dynamic { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_date_formats")]
		public IEnumerable<string>? DynamicDateFormats { get; set; }

		[JsonInclude]
		[JsonPropertyName("dynamic_templates")]
		public Union<Dictionary<string, Mapping.IDynamicTemplate>?, IEnumerable<Dictionary<string, Mapping.IDynamicTemplate>>?>? DynamicTemplates { get; set; }

		[JsonInclude]
		[JsonPropertyName("_field_names")]
		public Mapping.IFieldNamesField? FieldNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_field")]
		public Mapping.IIndexField? IndexField { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("numeric_detection")]
		public bool? NumericDetection { get; set; }

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.Properties>? Properties { get; set; }

		[JsonInclude]
		[JsonPropertyName("_routing")]
		public Mapping.IRoutingField? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("_size")]
		public Mapping.ISizeField? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Mapping.ISourceField? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime")]
		public Dictionary<string, Mapping.IRuntimeField>? Runtime { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }
	}

	public partial class TypeMappingDescriptor : DescriptorBase<TypeMappingDescriptor, ITypeMapping>, ITypeMapping
	{
		Mapping.IAllField? ITypeMapping.AllField { get; set; }

		bool? ITypeMapping.DateDetection { get; set; }

		Union<bool?, Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?>? ITypeMapping.Dynamic { get; set; }

		IEnumerable<string>? ITypeMapping.DynamicDateFormats { get; set; }

		Union<Dictionary<string, Mapping.IDynamicTemplate>?, IEnumerable<Dictionary<string, Mapping.IDynamicTemplate>>?>? ITypeMapping.DynamicTemplates { get; set; }

		Mapping.IFieldNamesField? ITypeMapping.FieldNames { get; set; }

		Mapping.IIndexField? ITypeMapping.IndexField { get; set; }

		Dictionary<string, object>? ITypeMapping.Meta { get; set; }

		bool? ITypeMapping.NumericDetection { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.Mapping.Properties>? ITypeMapping.Properties { get; set; }

		Mapping.IRoutingField? ITypeMapping.Routing { get; set; }

		Mapping.ISizeField? ITypeMapping.Size { get; set; }

		Mapping.ISourceField? ITypeMapping.Source { get; set; }

		Dictionary<string, Mapping.IRuntimeField>? ITypeMapping.Runtime { get; set; }

		bool? ITypeMapping.Enabled { get; set; }
	}

	internal sealed class TypeMappingDescriptorConverter<TReadAs> : JsonConverter<ITypeMapping> where TReadAs : class, ITypeMapping
	{
		public override ITypeMapping Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ITypeMapping value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.AllField is not null)
			{
				writer.WritePropertyName("all_field");
				JsonSerializer.Serialize(writer, value.AllField, options);
			}

			if (value.DateDetection.HasValue)
			{
				writer.WritePropertyName("date_detection");
				writer.WriteBooleanValue(value.DateDetection.Value);
			}

			if (value.Dynamic is not null)
			{
				writer.WritePropertyName("dynamic");
				JsonSerializer.Serialize(writer, value.Dynamic, options);
			}

			if (value.DynamicDateFormats is not null)
			{
				writer.WritePropertyName("dynamic_date_formats");
				JsonSerializer.Serialize(writer, value.DynamicDateFormats, options);
			}

			if (value.DynamicTemplates is not null)
			{
				writer.WritePropertyName("dynamic_templates");
				JsonSerializer.Serialize(writer, value.DynamicTemplates, options);
			}

			if (value.FieldNames is not null)
			{
				writer.WritePropertyName("_field_names");
				JsonSerializer.Serialize(writer, value.FieldNames, options);
			}

			if (value.IndexField is not null)
			{
				writer.WritePropertyName("index_field");
				JsonSerializer.Serialize(writer, value.IndexField, options);
			}

			if (value.Meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value.Meta, options);
			}

			if (value.NumericDetection.HasValue)
			{
				writer.WritePropertyName("numeric_detection");
				writer.WriteBooleanValue(value.NumericDetection.Value);
			}

			if (value.Properties is not null)
			{
				writer.WritePropertyName("properties");
				JsonSerializer.Serialize(writer, value.Properties, options);
			}

			if (value.Routing is not null)
			{
				writer.WritePropertyName("_routing");
				JsonSerializer.Serialize(writer, value.Routing, options);
			}

			if (value.Size is not null)
			{
				writer.WritePropertyName("_size");
				JsonSerializer.Serialize(writer, value.Size, options);
			}

			if (value.Source is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, value.Source, options);
			}

			if (value.Runtime is not null)
			{
				writer.WritePropertyName("runtime");
				JsonSerializer.Serialize(writer, value.Runtime, options);
			}

			if (value.Enabled.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(value.Enabled.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class UnsignedLongNumberProperty : Mapping.NumberPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public long? NullValue { get; init; }
	}

	public partial class VersionProperty : Mapping.DocValuesPropertyBase
	{
	}

	public partial class WildcardProperty : Mapping.DocValuesPropertyBase
	{
		[JsonInclude]
		[JsonPropertyName("null_value")]
		public string? NullValue { get; init; }
	}
}