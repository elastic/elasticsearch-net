// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Mapping;

internal sealed partial class ChunkingSettingsConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings>
{
	private static readonly System.Text.Json.JsonEncodedText PropMaxChunkSize = System.Text.Json.JsonEncodedText.Encode("max_chunk_size");
	private static readonly System.Text.Json.JsonEncodedText PropOverlap = System.Text.Json.JsonEncodedText.Encode("overlap");
	private static readonly System.Text.Json.JsonEncodedText PropSentenceOverlap = System.Text.Json.JsonEncodedText.Encode("sentence_overlap");
	private static readonly System.Text.Json.JsonEncodedText PropStrategy = System.Text.Json.JsonEncodedText.Encode("strategy");

	public override Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<int> propMaxChunkSize = default;
		LocalJsonValue<int?> propOverlap = default;
		LocalJsonValue<int?> propSentenceOverlap = default;
		LocalJsonValue<string> propStrategy = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propMaxChunkSize.TryReadProperty(ref reader, options, PropMaxChunkSize, null))
			{
				continue;
			}

			if (propOverlap.TryReadProperty(ref reader, options, PropOverlap, null))
			{
				continue;
			}

			if (propSentenceOverlap.TryReadProperty(ref reader, options, PropSentenceOverlap, null))
			{
				continue;
			}

			if (propStrategy.TryReadProperty(ref reader, options, PropStrategy, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			MaxChunkSize = propMaxChunkSize.Value,
			Overlap = propOverlap.Value,
			SentenceOverlap = propSentenceOverlap.Value,
			Strategy = propStrategy.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropMaxChunkSize, value.MaxChunkSize, null, null);
		writer.WriteProperty(options, PropOverlap, value.Overlap, null, null);
		writer.WriteProperty(options, PropSentenceOverlap, value.SentenceOverlap, null, null);
		writer.WriteProperty(options, PropStrategy, value.Strategy, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsConverter))]
public sealed partial class ChunkingSettings
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public ChunkingSettings(int maxChunkSize, string strategy)
	{
		MaxChunkSize = maxChunkSize;
		Strategy = strategy;
	}
#if NET7_0_OR_GREATER
	public ChunkingSettings()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public ChunkingSettings()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal ChunkingSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// The maximum size of a chunk in words.
	/// This value cannot be higher than <c>300</c> or lower than <c>20</c> (for <c>sentence</c> strategy) or <c>10</c> (for <c>word</c> strategy).
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int MaxChunkSize { get; set; }

	/// <summary>
	/// <para>
	/// The number of overlapping words for chunks.
	/// It is applicable only to a <c>word</c> chunking strategy.
	/// This value cannot be higher than half the <c>max_chunk_size</c> value.
	/// </para>
	/// </summary>
	public int? Overlap { get; set; }

	/// <summary>
	/// <para>
	/// The number of overlapping sentences for chunks.
	/// It is applicable only for a <c>sentence</c> chunking strategy.
	/// It can be either <c>1</c> or <c>0</c>.
	/// </para>
	/// </summary>
	public int? SentenceOverlap { get; set; }

	/// <summary>
	/// <para>
	/// The chunking strategy: <c>sentence</c> or <c>word</c>.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Strategy { get; set; }
}

public readonly partial struct ChunkingSettingsDescriptor
{
	internal Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public ChunkingSettingsDescriptor(Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public ChunkingSettingsDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor(Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings instance) => new Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings(Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// The maximum size of a chunk in words.
	/// This value cannot be higher than <c>300</c> or lower than <c>20</c> (for <c>sentence</c> strategy) or <c>10</c> (for <c>word</c> strategy).
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor MaxChunkSize(int value)
	{
		Instance.MaxChunkSize = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The number of overlapping words for chunks.
	/// It is applicable only to a <c>word</c> chunking strategy.
	/// This value cannot be higher than half the <c>max_chunk_size</c> value.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor Overlap(int? value)
	{
		Instance.Overlap = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The number of overlapping sentences for chunks.
	/// It is applicable only for a <c>sentence</c> chunking strategy.
	/// It can be either <c>1</c> or <c>0</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor SentenceOverlap(int? value)
	{
		Instance.SentenceOverlap = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// The chunking strategy: <c>sentence</c> or <c>word</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor Strategy(string value)
	{
		Instance.Strategy = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings Build(System.Action<Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Mapping.ChunkingSettingsDescriptor(new Elastic.Clients.Elasticsearch.Mapping.ChunkingSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}