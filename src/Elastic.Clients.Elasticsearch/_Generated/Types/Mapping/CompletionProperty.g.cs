// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Mapping;

internal sealed partial class CompletionPropertyConverter : System.Text.Json.Serialization.JsonConverter<CompletionProperty>
{
	private static readonly System.Text.Json.JsonEncodedText PropAnalyzer = System.Text.Json.JsonEncodedText.Encode("analyzer");
	private static readonly System.Text.Json.JsonEncodedText PropContexts = System.Text.Json.JsonEncodedText.Encode("contexts");
	private static readonly System.Text.Json.JsonEncodedText PropCopyTo = System.Text.Json.JsonEncodedText.Encode("copy_to");
	private static readonly System.Text.Json.JsonEncodedText PropDocValues = System.Text.Json.JsonEncodedText.Encode("doc_values");
	private static readonly System.Text.Json.JsonEncodedText PropDynamic = System.Text.Json.JsonEncodedText.Encode("dynamic");
	private static readonly System.Text.Json.JsonEncodedText PropFields = System.Text.Json.JsonEncodedText.Encode("fields");
	private static readonly System.Text.Json.JsonEncodedText PropIgnoreAbove = System.Text.Json.JsonEncodedText.Encode("ignore_above");
	private static readonly System.Text.Json.JsonEncodedText PropMaxInputLength = System.Text.Json.JsonEncodedText.Encode("max_input_length");
	private static readonly System.Text.Json.JsonEncodedText PropMeta = System.Text.Json.JsonEncodedText.Encode("meta");
	private static readonly System.Text.Json.JsonEncodedText PropPreservePositionIncrements = System.Text.Json.JsonEncodedText.Encode("preserve_position_increments");
	private static readonly System.Text.Json.JsonEncodedText PropPreserveSeparators = System.Text.Json.JsonEncodedText.Encode("preserve_separators");
	private static readonly System.Text.Json.JsonEncodedText PropProperties = System.Text.Json.JsonEncodedText.Encode("properties");
	private static readonly System.Text.Json.JsonEncodedText PropSearchAnalyzer = System.Text.Json.JsonEncodedText.Encode("search_analyzer");
	private static readonly System.Text.Json.JsonEncodedText PropStore = System.Text.Json.JsonEncodedText.Encode("store");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");

	public override CompletionProperty Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propAnalyzer = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>?> propContexts = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propCopyTo = default;
		LocalJsonValue<bool?> propDocValues = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Mapping.DynamicMapping?> propDynamic = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Mapping.Properties?> propFields = default;
		LocalJsonValue<int?> propIgnoreAbove = default;
		LocalJsonValue<int?> propMaxInputLength = default;
		LocalJsonValue<IDictionary<string, string>?> propMeta = default;
		LocalJsonValue<bool?> propPreservePositionIncrements = default;
		LocalJsonValue<bool?> propPreserveSeparators = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Mapping.Properties?> propProperties = default;
		LocalJsonValue<string?> propSearchAnalyzer = default;
		LocalJsonValue<bool?> propStore = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAnalyzer.TryRead(ref reader, options, PropAnalyzer))
			{
				continue;
			}

			if (propContexts.TryRead(ref reader, options, PropContexts))
			{
				continue;
			}

			if (propCopyTo.TryRead(ref reader, options, PropCopyTo, typeof(SingleOrManyFieldsMarker)))
			{
				continue;
			}

			if (propDocValues.TryRead(ref reader, options, PropDocValues))
			{
				continue;
			}

			if (propDynamic.TryRead(ref reader, options, PropDynamic))
			{
				continue;
			}

			if (propFields.TryRead(ref reader, options, PropFields))
			{
				continue;
			}

			if (propIgnoreAbove.TryRead(ref reader, options, PropIgnoreAbove))
			{
				continue;
			}

			if (propMaxInputLength.TryRead(ref reader, options, PropMaxInputLength))
			{
				continue;
			}

			if (propMeta.TryRead(ref reader, options, PropMeta))
			{
				continue;
			}

			if (propPreservePositionIncrements.TryRead(ref reader, options, PropPreservePositionIncrements))
			{
				continue;
			}

			if (propPreserveSeparators.TryRead(ref reader, options, PropPreserveSeparators))
			{
				continue;
			}

			if (propProperties.TryRead(ref reader, options, PropProperties))
			{
				continue;
			}

			if (propSearchAnalyzer.TryRead(ref reader, options, PropSearchAnalyzer))
			{
				continue;
			}

			if (propStore.TryRead(ref reader, options, PropStore))
			{
				continue;
			}

			if (reader.ValueTextEquals(PropType))
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new CompletionProperty
		{
			Analyzer = propAnalyzer.Value
,
			Contexts = propContexts.Value
,
			CopyTo = propCopyTo.Value
,
			DocValues = propDocValues.Value
,
			Dynamic = propDynamic.Value
,
			Fields = propFields.Value
,
			IgnoreAbove = propIgnoreAbove.Value
,
			MaxInputLength = propMaxInputLength.Value
,
			Meta = propMeta.Value
,
			PreservePositionIncrements = propPreservePositionIncrements.Value
,
			PreserveSeparators = propPreserveSeparators.Value
,
			Properties = propProperties.Value
,
			SearchAnalyzer = propSearchAnalyzer.Value
,
			Store = propStore.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CompletionProperty value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAnalyzer, value.Analyzer);
		writer.WriteProperty(options, PropContexts, value.Contexts);
		writer.WriteProperty(options, PropCopyTo, value.CopyTo, null, typeof(SingleOrManyFieldsMarker));
		writer.WriteProperty(options, PropDocValues, value.DocValues);
		writer.WriteProperty(options, PropDynamic, value.Dynamic);
		writer.WriteProperty(options, PropFields, value.Fields);
		writer.WriteProperty(options, PropIgnoreAbove, value.IgnoreAbove);
		writer.WriteProperty(options, PropMaxInputLength, value.MaxInputLength);
		writer.WriteProperty(options, PropMeta, value.Meta);
		writer.WriteProperty(options, PropPreservePositionIncrements, value.PreservePositionIncrements);
		writer.WriteProperty(options, PropPreserveSeparators, value.PreserveSeparators);
		writer.WriteProperty(options, PropProperties, value.Properties);
		writer.WriteProperty(options, PropSearchAnalyzer, value.SearchAnalyzer);
		writer.WriteProperty(options, PropStore, value.Store);
		writer.WriteProperty(options, PropType, value.Type);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(CompletionPropertyConverter))]
public sealed partial class CompletionProperty : IProperty
{
	public string? Analyzer { get; set; }
	public ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? Contexts { get; set; }
	public Elastic.Clients.Elasticsearch.Fields? CopyTo { get; set; }
	public bool? DocValues { get; set; }
	public Elastic.Clients.Elasticsearch.Mapping.DynamicMapping? Dynamic { get; set; }
	public Elastic.Clients.Elasticsearch.Mapping.Properties? Fields { get; set; }
	public int? IgnoreAbove { get; set; }
	public int? MaxInputLength { get; set; }

	/// <summary>
	/// <para>
	/// Metadata about the field.
	/// </para>
	/// </summary>
	public IDictionary<string, string>? Meta { get; set; }
	public bool? PreservePositionIncrements { get; set; }
	public bool? PreserveSeparators { get; set; }
	public Elastic.Clients.Elasticsearch.Mapping.Properties? Properties { get; set; }
	public string? SearchAnalyzer { get; set; }
	public bool? Store { get; set; }

	public string Type => "completion";
}

public sealed partial class CompletionPropertyDescriptor<TDocument> : SerializableDescriptor<CompletionPropertyDescriptor<TDocument>>, IBuildableDescriptor<CompletionProperty>
{
	internal CompletionPropertyDescriptor(Action<CompletionPropertyDescriptor<TDocument>> configure) => configure.Invoke(this);

	public CompletionPropertyDescriptor() : base()
	{
	}

	private string? AnalyzerValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? ContextsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument> ContextsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>> ContextsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>>[] ContextsDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? CopyToValue { get; set; }
	private bool? DocValuesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.DynamicMapping? DynamicValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.Properties? FieldsValue { get; set; }
	private int? IgnoreAboveValue { get; set; }
	private int? MaxInputLengthValue { get; set; }
	private IDictionary<string, string>? MetaValue { get; set; }
	private bool? PreservePositionIncrementsValue { get; set; }
	private bool? PreserveSeparatorsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.Properties? PropertiesValue { get; set; }
	private string? SearchAnalyzerValue { get; set; }
	private bool? StoreValue { get; set; }

	public CompletionPropertyDescriptor<TDocument> Analyzer(string? analyzer)
	{
		AnalyzerValue = analyzer;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Contexts(ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? contexts)
	{
		ContextsDescriptor = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = null;
		ContextsValue = contexts;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Contexts(Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument> descriptor)
	{
		ContextsValue = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = null;
		ContextsDescriptor = descriptor;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Contexts(Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>> configure)
	{
		ContextsValue = null;
		ContextsDescriptor = null;
		ContextsDescriptorActions = null;
		ContextsDescriptorAction = configure;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Contexts(params Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>>[] configure)
	{
		ContextsValue = null;
		ContextsDescriptor = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = configure;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> CopyTo(Elastic.Clients.Elasticsearch.Fields? copyTo)
	{
		CopyToValue = copyTo;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> DocValues(bool? docValues = true)
	{
		DocValuesValue = docValues;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Dynamic(Elastic.Clients.Elasticsearch.Mapping.DynamicMapping? dynamic)
	{
		DynamicValue = dynamic;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Mapping.Properties? fields)
	{
		FieldsValue = fields;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument> descriptor)
	{
		FieldsValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Fields(Action<Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>();
		configure?.Invoke(descriptor);
		FieldsValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> IgnoreAbove(int? ignoreAbove)
	{
		IgnoreAboveValue = ignoreAbove;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> MaxInputLength(int? maxInputLength)
	{
		MaxInputLengthValue = maxInputLength;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Metadata about the field.
	/// </para>
	/// </summary>
	public CompletionPropertyDescriptor<TDocument> Meta(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, string>());
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> PreservePositionIncrements(bool? preservePositionIncrements = true)
	{
		PreservePositionIncrementsValue = preservePositionIncrements;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> PreserveSeparators(bool? preserveSeparators = true)
	{
		PreserveSeparatorsValue = preserveSeparators;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Properties(Elastic.Clients.Elasticsearch.Mapping.Properties? properties)
	{
		PropertiesValue = properties;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Properties(Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument> descriptor)
	{
		PropertiesValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Properties(Action<Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>();
		configure?.Invoke(descriptor);
		PropertiesValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> SearchAnalyzer(string? searchAnalyzer)
	{
		SearchAnalyzerValue = searchAnalyzer;
		return Self;
	}

	public CompletionPropertyDescriptor<TDocument> Store(bool? store = true)
	{
		StoreValue = store;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(AnalyzerValue))
		{
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(AnalyzerValue);
		}

		if (ContextsDescriptor is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ContextsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ContextsDescriptorAction is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>(ContextsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ContextsDescriptorActions is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			foreach (var action in ContextsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ContextsValue is not null)
		{
			writer.WritePropertyName("contexts");
			JsonSerializer.Serialize(writer, ContextsValue, options);
		}

		if (CopyToValue is not null)
		{
			writer.WritePropertyName("copy_to");
			JsonSerializer.Serialize(writer, CopyToValue, options);
		}

		if (DocValuesValue.HasValue)
		{
			writer.WritePropertyName("doc_values");
			writer.WriteBooleanValue(DocValuesValue.Value);
		}

		if (DynamicValue is not null)
		{
			writer.WritePropertyName("dynamic");
			JsonSerializer.Serialize(writer, DynamicValue, options);
		}

		if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
		}

		if (IgnoreAboveValue.HasValue)
		{
			writer.WritePropertyName("ignore_above");
			writer.WriteNumberValue(IgnoreAboveValue.Value);
		}

		if (MaxInputLengthValue.HasValue)
		{
			writer.WritePropertyName("max_input_length");
			writer.WriteNumberValue(MaxInputLengthValue.Value);
		}

		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (PreservePositionIncrementsValue.HasValue)
		{
			writer.WritePropertyName("preserve_position_increments");
			writer.WriteBooleanValue(PreservePositionIncrementsValue.Value);
		}

		if (PreserveSeparatorsValue.HasValue)
		{
			writer.WritePropertyName("preserve_separators");
			writer.WriteBooleanValue(PreserveSeparatorsValue.Value);
		}

		if (PropertiesValue is not null)
		{
			writer.WritePropertyName("properties");
			JsonSerializer.Serialize(writer, PropertiesValue, options);
		}

		if (!string.IsNullOrEmpty(SearchAnalyzerValue))
		{
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(SearchAnalyzerValue);
		}

		if (StoreValue.HasValue)
		{
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(StoreValue.Value);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("completion");
		writer.WriteEndObject();
	}

	private ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? BuildContexts()
	{
		if (ContextsValue is not null)
		{
			return ContextsValue;
		}

		if ((object)ContextsDescriptor is IBuildableDescriptor<ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>?> buildable)
		{
			return buildable.Build();
		}

		if (ContextsDescriptorAction is not null)
		{
			var descriptor = new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor<TDocument>(ContextsDescriptorAction);
			if ((object)descriptor is IBuildableDescriptor<ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>?> buildableFromAction)
			{
				return buildableFromAction.Build();
			}
		}

		return null;
	}

	CompletionProperty IBuildableDescriptor<CompletionProperty>.Build() => new()
	{
		Analyzer = AnalyzerValue,
		Contexts = BuildContexts(),
		CopyTo = CopyToValue,
		DocValues = DocValuesValue,
		Dynamic = DynamicValue,
		Fields = FieldsValue,
		IgnoreAbove = IgnoreAboveValue,
		MaxInputLength = MaxInputLengthValue,
		Meta = MetaValue,
		PreservePositionIncrements = PreservePositionIncrementsValue,
		PreserveSeparators = PreserveSeparatorsValue,
		Properties = PropertiesValue,
		SearchAnalyzer = SearchAnalyzerValue,
		Store = StoreValue
	};
}

public sealed partial class CompletionPropertyDescriptor : SerializableDescriptor<CompletionPropertyDescriptor>, IBuildableDescriptor<CompletionProperty>
{
	internal CompletionPropertyDescriptor(Action<CompletionPropertyDescriptor> configure) => configure.Invoke(this);

	public CompletionPropertyDescriptor() : base()
	{
	}

	private string? AnalyzerValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? ContextsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor ContextsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor> ContextsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor>[] ContextsDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? CopyToValue { get; set; }
	private bool? DocValuesValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.DynamicMapping? DynamicValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.Properties? FieldsValue { get; set; }
	private int? IgnoreAboveValue { get; set; }
	private int? MaxInputLengthValue { get; set; }
	private IDictionary<string, string>? MetaValue { get; set; }
	private bool? PreservePositionIncrementsValue { get; set; }
	private bool? PreserveSeparatorsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.Properties? PropertiesValue { get; set; }
	private string? SearchAnalyzerValue { get; set; }
	private bool? StoreValue { get; set; }

	public CompletionPropertyDescriptor Analyzer(string? analyzer)
	{
		AnalyzerValue = analyzer;
		return Self;
	}

	public CompletionPropertyDescriptor Contexts(ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? contexts)
	{
		ContextsDescriptor = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = null;
		ContextsValue = contexts;
		return Self;
	}

	public CompletionPropertyDescriptor Contexts(Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor descriptor)
	{
		ContextsValue = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = null;
		ContextsDescriptor = descriptor;
		return Self;
	}

	public CompletionPropertyDescriptor Contexts(Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor> configure)
	{
		ContextsValue = null;
		ContextsDescriptor = null;
		ContextsDescriptorActions = null;
		ContextsDescriptorAction = configure;
		return Self;
	}

	public CompletionPropertyDescriptor Contexts(params Action<Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor>[] configure)
	{
		ContextsValue = null;
		ContextsDescriptor = null;
		ContextsDescriptorAction = null;
		ContextsDescriptorActions = configure;
		return Self;
	}

	public CompletionPropertyDescriptor CopyTo(Elastic.Clients.Elasticsearch.Fields? copyTo)
	{
		CopyToValue = copyTo;
		return Self;
	}

	public CompletionPropertyDescriptor DocValues(bool? docValues = true)
	{
		DocValuesValue = docValues;
		return Self;
	}

	public CompletionPropertyDescriptor Dynamic(Elastic.Clients.Elasticsearch.Mapping.DynamicMapping? dynamic)
	{
		DynamicValue = dynamic;
		return Self;
	}

	public CompletionPropertyDescriptor Fields(Elastic.Clients.Elasticsearch.Mapping.Properties? fields)
	{
		FieldsValue = fields;
		return Self;
	}

	public CompletionPropertyDescriptor Fields<TDocument>(Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument> descriptor)
	{
		FieldsValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor Fields<TDocument>(Action<Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>();
		configure?.Invoke(descriptor);
		FieldsValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor IgnoreAbove(int? ignoreAbove)
	{
		IgnoreAboveValue = ignoreAbove;
		return Self;
	}

	public CompletionPropertyDescriptor MaxInputLength(int? maxInputLength)
	{
		MaxInputLengthValue = maxInputLength;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Metadata about the field.
	/// </para>
	/// </summary>
	public CompletionPropertyDescriptor Meta(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, string>());
		return Self;
	}

	public CompletionPropertyDescriptor PreservePositionIncrements(bool? preservePositionIncrements = true)
	{
		PreservePositionIncrementsValue = preservePositionIncrements;
		return Self;
	}

	public CompletionPropertyDescriptor PreserveSeparators(bool? preserveSeparators = true)
	{
		PreserveSeparatorsValue = preserveSeparators;
		return Self;
	}

	public CompletionPropertyDescriptor Properties(Elastic.Clients.Elasticsearch.Mapping.Properties? properties)
	{
		PropertiesValue = properties;
		return Self;
	}

	public CompletionPropertyDescriptor Properties<TDocument>(Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument> descriptor)
	{
		PropertiesValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor Properties<TDocument>(Action<Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.Mapping.PropertiesDescriptor<TDocument>();
		configure?.Invoke(descriptor);
		PropertiesValue = descriptor.PromisedValue;
		return Self;
	}

	public CompletionPropertyDescriptor SearchAnalyzer(string? searchAnalyzer)
	{
		SearchAnalyzerValue = searchAnalyzer;
		return Self;
	}

	public CompletionPropertyDescriptor Store(bool? store = true)
	{
		StoreValue = store;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(AnalyzerValue))
		{
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(AnalyzerValue);
		}

		if (ContextsDescriptor is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, ContextsDescriptor, options);
			writer.WriteEndArray();
		}
		else if (ContextsDescriptorAction is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor(ContextsDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (ContextsDescriptorActions is not null)
		{
			writer.WritePropertyName("contexts");
			writer.WriteStartArray();
			foreach (var action in ContextsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (ContextsValue is not null)
		{
			writer.WritePropertyName("contexts");
			JsonSerializer.Serialize(writer, ContextsValue, options);
		}

		if (CopyToValue is not null)
		{
			writer.WritePropertyName("copy_to");
			JsonSerializer.Serialize(writer, CopyToValue, options);
		}

		if (DocValuesValue.HasValue)
		{
			writer.WritePropertyName("doc_values");
			writer.WriteBooleanValue(DocValuesValue.Value);
		}

		if (DynamicValue is not null)
		{
			writer.WritePropertyName("dynamic");
			JsonSerializer.Serialize(writer, DynamicValue, options);
		}

		if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
		}

		if (IgnoreAboveValue.HasValue)
		{
			writer.WritePropertyName("ignore_above");
			writer.WriteNumberValue(IgnoreAboveValue.Value);
		}

		if (MaxInputLengthValue.HasValue)
		{
			writer.WritePropertyName("max_input_length");
			writer.WriteNumberValue(MaxInputLengthValue.Value);
		}

		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (PreservePositionIncrementsValue.HasValue)
		{
			writer.WritePropertyName("preserve_position_increments");
			writer.WriteBooleanValue(PreservePositionIncrementsValue.Value);
		}

		if (PreserveSeparatorsValue.HasValue)
		{
			writer.WritePropertyName("preserve_separators");
			writer.WriteBooleanValue(PreserveSeparatorsValue.Value);
		}

		if (PropertiesValue is not null)
		{
			writer.WritePropertyName("properties");
			JsonSerializer.Serialize(writer, PropertiesValue, options);
		}

		if (!string.IsNullOrEmpty(SearchAnalyzerValue))
		{
			writer.WritePropertyName("search_analyzer");
			writer.WriteStringValue(SearchAnalyzerValue);
		}

		if (StoreValue.HasValue)
		{
			writer.WritePropertyName("store");
			writer.WriteBooleanValue(StoreValue.Value);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("completion");
		writer.WriteEndObject();
	}

	private ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>? BuildContexts()
	{
		if (ContextsValue is not null)
		{
			return ContextsValue;
		}

		if ((object)ContextsDescriptor is IBuildableDescriptor<ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>?> buildable)
		{
			return buildable.Build();
		}

		if (ContextsDescriptorAction is not null)
		{
			var descriptor = new Elastic.Clients.Elasticsearch.Mapping.SuggestContextDescriptor(ContextsDescriptorAction);
			if ((object)descriptor is IBuildableDescriptor<ICollection<Elastic.Clients.Elasticsearch.Mapping.SuggestContext>?> buildableFromAction)
			{
				return buildableFromAction.Build();
			}
		}

		return null;
	}

	CompletionProperty IBuildableDescriptor<CompletionProperty>.Build() => new()
	{
		Analyzer = AnalyzerValue,
		Contexts = BuildContexts(),
		CopyTo = CopyToValue,
		DocValues = DocValuesValue,
		Dynamic = DynamicValue,
		Fields = FieldsValue,
		IgnoreAbove = IgnoreAboveValue,
		MaxInputLength = MaxInputLengthValue,
		Meta = MetaValue,
		PreservePositionIncrements = PreservePositionIncrementsValue,
		PreserveSeparators = PreserveSeparatorsValue,
		Properties = PropertiesValue,
		SearchAnalyzer = SearchAnalyzerValue,
		Store = StoreValue
	};
}