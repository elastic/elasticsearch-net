// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Mapping
{
	public partial class DynamicTemplate
	{
		[JsonInclude]
		[JsonPropertyName("mapping")]
		public Elastic.Clients.Elasticsearch.Mapping.Properties? Mapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public string? Match { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_mapping_type")]
		public string? MatchMappingType { get; set; }

		[JsonInclude]
		[JsonPropertyName("match_pattern")]
		public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_match")]
		public string? PathMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("path_unmatch")]
		public string? PathUnmatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("unmatch")]
		public string? Unmatch { get; set; }
	}

	public sealed partial class DynamicTemplateDescriptor : DescriptorBase<DynamicTemplateDescriptor>
	{
		public DynamicTemplateDescriptor()
		{
		}

		internal DynamicTemplateDescriptor(Action<DynamicTemplateDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Mapping.Properties? MappingValue { get; private set; }

		internal string? MatchValue { get; private set; }

		internal string? MatchMappingTypeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPatternValue { get; private set; }

		internal string? PathMatchValue { get; private set; }

		internal string? PathUnmatchValue { get; private set; }

		internal string? UnmatchValue { get; private set; }

		public DynamicTemplateDescriptor Mapping(Elastic.Clients.Elasticsearch.Mapping.Properties? mapping) => Assign(mapping, (a, v) => a.MappingValue = v);
		public DynamicTemplateDescriptor Match(string? match) => Assign(match, (a, v) => a.MatchValue = v);
		public DynamicTemplateDescriptor MatchMappingType(string? matchMappingType) => Assign(matchMappingType, (a, v) => a.MatchMappingTypeValue = v);
		public DynamicTemplateDescriptor MatchPattern(Elastic.Clients.Elasticsearch.Mapping.MatchType? matchPattern) => Assign(matchPattern, (a, v) => a.MatchPatternValue = v);
		public DynamicTemplateDescriptor PathMatch(string? pathMatch) => Assign(pathMatch, (a, v) => a.PathMatchValue = v);
		public DynamicTemplateDescriptor PathUnmatch(string? pathUnmatch) => Assign(pathUnmatch, (a, v) => a.PathUnmatchValue = v);
		public DynamicTemplateDescriptor Unmatch(string? unmatch) => Assign(unmatch, (a, v) => a.UnmatchValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (MappingValue is not null)
			{
				writer.WritePropertyName("mapping");
				JsonSerializer.Serialize(writer, MappingValue, options);
			}

			if (!string.IsNullOrEmpty(MatchValue))
			{
				writer.WritePropertyName("match");
				writer.WriteStringValue(MatchValue);
			}

			if (!string.IsNullOrEmpty(MatchMappingTypeValue))
			{
				writer.WritePropertyName("match_mapping_type");
				writer.WriteStringValue(MatchMappingTypeValue);
			}

			if (MatchPatternValue is not null)
			{
				writer.WritePropertyName("match_pattern");
				JsonSerializer.Serialize(writer, MatchPatternValue, options);
			}

			if (!string.IsNullOrEmpty(PathMatchValue))
			{
				writer.WritePropertyName("path_match");
				writer.WriteStringValue(PathMatchValue);
			}

			if (!string.IsNullOrEmpty(PathUnmatchValue))
			{
				writer.WritePropertyName("path_unmatch");
				writer.WriteStringValue(PathUnmatchValue);
			}

			if (!string.IsNullOrEmpty(UnmatchValue))
			{
				writer.WritePropertyName("unmatch");
				writer.WriteStringValue(UnmatchValue);
			}

			writer.WriteEndObject();
		}
	}
}