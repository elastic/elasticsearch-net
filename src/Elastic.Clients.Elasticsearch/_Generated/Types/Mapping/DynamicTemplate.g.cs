// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Mapping;

[JsonConverter(typeof(DynamicTemplateConverter))]
public sealed partial class DynamicTemplate
{
	internal DynamicTemplate(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantType = variantName;
		Variant = variant;
	}

	internal DynamicTemplate()
	{
	}

	public object Variant { get; internal set; }
	public string VariantType { get; internal set; }

	public static DynamicTemplate Mapping(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => new DynamicTemplate("mapping", property);
	public static DynamicTemplate Runtime(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => new DynamicTemplate("runtime", property);

	[JsonInclude, JsonPropertyName("match")]
	public ICollection<string>? Match { get; set; }
	[JsonInclude, JsonPropertyName("match_mapping_type")]
	public ICollection<string>? MatchMappingType { get; set; }
	[JsonInclude, JsonPropertyName("match_pattern")]
	public Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPattern { get; set; }
	[JsonInclude, JsonPropertyName("path_match")]
	public ICollection<string>? PathMatch { get; set; }
	[JsonInclude, JsonPropertyName("path_unmatch")]
	public ICollection<string>? PathUnmatch { get; set; }
	[JsonInclude, JsonPropertyName("unmatch")]
	public ICollection<string>? Unmatch { get; set; }
	[JsonInclude, JsonPropertyName("unmatch_mapping_type")]
	public ICollection<string>? UnmatchMappingType { get; set; }

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class DynamicTemplateConverter : System.Text.Json.Serialization.JsonConverter<DynamicTemplate>
{
	private static readonly System.Text.Json.JsonEncodedText PropMatch = System.Text.Json.JsonEncodedText.Encode("match");
	private static readonly System.Text.Json.JsonEncodedText PropMatchMappingType = System.Text.Json.JsonEncodedText.Encode("match_mapping_type");
	private static readonly System.Text.Json.JsonEncodedText PropMatchPattern = System.Text.Json.JsonEncodedText.Encode("match_pattern");
	private static readonly System.Text.Json.JsonEncodedText PropPathMatch = System.Text.Json.JsonEncodedText.Encode("path_match");
	private static readonly System.Text.Json.JsonEncodedText PropPathUnmatch = System.Text.Json.JsonEncodedText.Encode("path_unmatch");
	private static readonly System.Text.Json.JsonEncodedText PropUnmatch = System.Text.Json.JsonEncodedText.Encode("unmatch");
	private static readonly System.Text.Json.JsonEncodedText PropUnmatchMappingType = System.Text.Json.JsonEncodedText.Encode("unmatch_mapping_type");
	private static readonly System.Text.Json.JsonEncodedText VariantMapping = System.Text.Json.JsonEncodedText.Encode("mapping");
	private static readonly System.Text.Json.JsonEncodedText VariantRuntime = System.Text.Json.JsonEncodedText.Encode("runtime");

	public override DynamicTemplate Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<ICollection<string>?> propMatch = default;
		LocalJsonValue<ICollection<string>?> propMatchMappingType = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Mapping.MatchType?> propMatchPattern = default;
		LocalJsonValue<ICollection<string>?> propPathMatch = default;
		LocalJsonValue<ICollection<string>?> propPathUnmatch = default;
		LocalJsonValue<ICollection<string>?> propUnmatch = default;
		LocalJsonValue<ICollection<string>?> propUnmatchMappingType = default;
		var variantType = string.Empty;
		object? variant = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propMatch.TryReadProperty(ref reader, options, PropMatch, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propMatchMappingType.TryReadProperty(ref reader, options, PropMatchMappingType, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propMatchPattern.TryReadProperty(ref reader, options, PropMatchPattern, null))
			{
				continue;
			}

			if (propPathMatch.TryReadProperty(ref reader, options, PropPathMatch, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propPathUnmatch.TryReadProperty(ref reader, options, PropPathUnmatch, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propUnmatch.TryReadProperty(ref reader, options, PropUnmatch, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propUnmatchMappingType.TryReadProperty(ref reader, options, PropUnmatchMappingType, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (reader.ValueTextEquals(VariantMapping))
			{
				variantType = VariantMapping.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IProperty?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRuntime))
			{
				variantType = VariantRuntime.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IProperty?>(options, null);
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new DynamicTemplate
		{
			VariantType = variantType,
			Variant = variant,
			Match = propMatch.Value
,
			MatchMappingType = propMatchMappingType.Value
,
			MatchPattern = propMatchPattern.Value
,
			PathMatch = propPathMatch.Value
,
			PathUnmatch = propPathUnmatch.Value
,
			Unmatch = propUnmatch.Value
,
			UnmatchMappingType = propUnmatchMappingType.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DynamicTemplate value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		switch (value.VariantType)
		{
			case "":
				break;
			case "mapping":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Mapping.IProperty?)value.Variant, null, null);
				break;
			case "runtime":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Mapping.IProperty?)value.Variant, null, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.VariantType}' is not supported for type '{nameof(DynamicTemplate)}'.");
		}

		writer.WriteProperty(options, PropMatch, value.Match, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropMatchMappingType, value.MatchMappingType, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropMatchPattern, value.MatchPattern, null, null);
		writer.WriteProperty(options, PropPathMatch, value.PathMatch, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropPathUnmatch, value.PathUnmatch, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropUnmatch, value.Unmatch, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropUnmatchMappingType, value.UnmatchMappingType, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteEndObject();
	}
}

public sealed partial class DynamicTemplateDescriptor<TDocument> : SerializableDescriptor<DynamicTemplateDescriptor<TDocument>>
{
	internal DynamicTemplateDescriptor(Action<DynamicTemplateDescriptor<TDocument>> configure) => configure.Invoke(this);

	public DynamicTemplateDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private DynamicTemplateDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private DynamicTemplateDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private ICollection<string>? MatchValue { get; set; }
	private ICollection<string>? MatchMappingTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPatternValue { get; set; }
	private ICollection<string>? PathMatchValue { get; set; }
	private ICollection<string>? PathUnmatchValue { get; set; }
	private ICollection<string>? UnmatchValue { get; set; }
	private ICollection<string>? UnmatchMappingTypeValue { get; set; }

	public DynamicTemplateDescriptor<TDocument> Match(ICollection<string>? match)
	{
		MatchValue = match;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> MatchMappingType(ICollection<string>? matchMappingType)
	{
		MatchMappingTypeValue = matchMappingType;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> MatchPattern(Elastic.Clients.Elasticsearch.Mapping.MatchType? matchPattern)
	{
		MatchPatternValue = matchPattern;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> PathMatch(ICollection<string>? pathMatch)
	{
		PathMatchValue = pathMatch;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> PathUnmatch(ICollection<string>? pathUnmatch)
	{
		PathUnmatchValue = pathUnmatch;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> Unmatch(ICollection<string>? unmatch)
	{
		UnmatchValue = unmatch;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> UnmatchMappingType(ICollection<string>? unmatchMappingType)
	{
		UnmatchMappingTypeValue = unmatchMappingType;
		return Self;
	}

	public DynamicTemplateDescriptor<TDocument> Mapping(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => Set(property, "mapping");
	public DynamicTemplateDescriptor<TDocument> Runtime(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => Set(property, "runtime");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MatchValue is not null)
		{
			writer.WritePropertyName("match");
			SingleOrManySerializationHelper.Serialize<string>(MatchValue, writer, options);
		}

		if (MatchMappingTypeValue is not null)
		{
			writer.WritePropertyName("match_mapping_type");
			SingleOrManySerializationHelper.Serialize<string>(MatchMappingTypeValue, writer, options);
		}

		if (MatchPatternValue is not null)
		{
			writer.WritePropertyName("match_pattern");
			JsonSerializer.Serialize(writer, MatchPatternValue, options);
		}

		if (PathMatchValue is not null)
		{
			writer.WritePropertyName("path_match");
			SingleOrManySerializationHelper.Serialize<string>(PathMatchValue, writer, options);
		}

		if (PathUnmatchValue is not null)
		{
			writer.WritePropertyName("path_unmatch");
			SingleOrManySerializationHelper.Serialize<string>(PathUnmatchValue, writer, options);
		}

		if (UnmatchValue is not null)
		{
			writer.WritePropertyName("unmatch");
			SingleOrManySerializationHelper.Serialize<string>(UnmatchValue, writer, options);
		}

		if (UnmatchMappingTypeValue is not null)
		{
			writer.WritePropertyName("unmatch_mapping_type");
			SingleOrManySerializationHelper.Serialize<string>(UnmatchMappingTypeValue, writer, options);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class DynamicTemplateDescriptor : SerializableDescriptor<DynamicTemplateDescriptor>
{
	internal DynamicTemplateDescriptor(Action<DynamicTemplateDescriptor> configure) => configure.Invoke(this);

	public DynamicTemplateDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private DynamicTemplateDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private DynamicTemplateDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private ICollection<string>? MatchValue { get; set; }
	private ICollection<string>? MatchMappingTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.MatchType? MatchPatternValue { get; set; }
	private ICollection<string>? PathMatchValue { get; set; }
	private ICollection<string>? PathUnmatchValue { get; set; }
	private ICollection<string>? UnmatchValue { get; set; }
	private ICollection<string>? UnmatchMappingTypeValue { get; set; }

	public DynamicTemplateDescriptor Match(ICollection<string>? match)
	{
		MatchValue = match;
		return Self;
	}

	public DynamicTemplateDescriptor MatchMappingType(ICollection<string>? matchMappingType)
	{
		MatchMappingTypeValue = matchMappingType;
		return Self;
	}

	public DynamicTemplateDescriptor MatchPattern(Elastic.Clients.Elasticsearch.Mapping.MatchType? matchPattern)
	{
		MatchPatternValue = matchPattern;
		return Self;
	}

	public DynamicTemplateDescriptor PathMatch(ICollection<string>? pathMatch)
	{
		PathMatchValue = pathMatch;
		return Self;
	}

	public DynamicTemplateDescriptor PathUnmatch(ICollection<string>? pathUnmatch)
	{
		PathUnmatchValue = pathUnmatch;
		return Self;
	}

	public DynamicTemplateDescriptor Unmatch(ICollection<string>? unmatch)
	{
		UnmatchValue = unmatch;
		return Self;
	}

	public DynamicTemplateDescriptor UnmatchMappingType(ICollection<string>? unmatchMappingType)
	{
		UnmatchMappingTypeValue = unmatchMappingType;
		return Self;
	}

	public DynamicTemplateDescriptor Mapping(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => Set(property, "mapping");
	public DynamicTemplateDescriptor Runtime(Elastic.Clients.Elasticsearch.Mapping.IProperty property) => Set(property, "runtime");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MatchValue is not null)
		{
			writer.WritePropertyName("match");
			SingleOrManySerializationHelper.Serialize<string>(MatchValue, writer, options);
		}

		if (MatchMappingTypeValue is not null)
		{
			writer.WritePropertyName("match_mapping_type");
			SingleOrManySerializationHelper.Serialize<string>(MatchMappingTypeValue, writer, options);
		}

		if (MatchPatternValue is not null)
		{
			writer.WritePropertyName("match_pattern");
			JsonSerializer.Serialize(writer, MatchPatternValue, options);
		}

		if (PathMatchValue is not null)
		{
			writer.WritePropertyName("path_match");
			SingleOrManySerializationHelper.Serialize<string>(PathMatchValue, writer, options);
		}

		if (PathUnmatchValue is not null)
		{
			writer.WritePropertyName("path_unmatch");
			SingleOrManySerializationHelper.Serialize<string>(PathUnmatchValue, writer, options);
		}

		if (UnmatchValue is not null)
		{
			writer.WritePropertyName("unmatch");
			SingleOrManySerializationHelper.Serialize<string>(UnmatchValue, writer, options);
		}

		if (UnmatchMappingTypeValue is not null)
		{
			writer.WritePropertyName("unmatch_mapping_type");
			SingleOrManySerializationHelper.Serialize<string>(UnmatchMappingTypeValue, writer, options);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}