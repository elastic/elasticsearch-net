// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Mapping;

public sealed partial class SemanticTextProperty : IProperty
{
	/// <summary>
	/// <para>
	/// Inference endpoint that will be used to generate embeddings for the field.
	/// This parameter cannot be updated. Use the Create inference API to create the endpoint.
	/// If <c>search_inference_id</c> is specified, the inference endpoint will only be used at index time.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("inference_id")]
	public Elastic.Clients.Elasticsearch.Id? InferenceId { get; set; }
	[JsonInclude, JsonPropertyName("meta")]
	public IDictionary<string, string>? Meta { get; set; }

	/// <summary>
	/// <para>
	/// Inference endpoint that will be used to generate embeddings at query time.
	/// You can update this parameter by using the Update mapping API. Use the Create inference API to create the endpoint.
	/// If not specified, the inference endpoint defined by inference_id will be used at both index and query time.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("search_inference_id")]
	public Elastic.Clients.Elasticsearch.Id? SearchInferenceId { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "semantic_text";
}

public sealed partial class SemanticTextPropertyDescriptor : SerializableDescriptor<SemanticTextPropertyDescriptor>, IBuildableDescriptor<SemanticTextProperty>
{
	internal SemanticTextPropertyDescriptor(Action<SemanticTextPropertyDescriptor> configure) => configure.Invoke(this);

	public SemanticTextPropertyDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Id? InferenceIdValue { get; set; }
	private IDictionary<string, string>? MetaValue { get; set; }
	private Elastic.Clients.Elasticsearch.Id? SearchInferenceIdValue { get; set; }

	/// <summary>
	/// <para>
	/// Inference endpoint that will be used to generate embeddings for the field.
	/// This parameter cannot be updated. Use the Create inference API to create the endpoint.
	/// If <c>search_inference_id</c> is specified, the inference endpoint will only be used at index time.
	/// </para>
	/// </summary>
	public SemanticTextPropertyDescriptor InferenceId(Elastic.Clients.Elasticsearch.Id? inferenceId)
	{
		InferenceIdValue = inferenceId;
		return Self;
	}

	public SemanticTextPropertyDescriptor Meta(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, string>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// Inference endpoint that will be used to generate embeddings at query time.
	/// You can update this parameter by using the Update mapping API. Use the Create inference API to create the endpoint.
	/// If not specified, the inference endpoint defined by inference_id will be used at both index and query time.
	/// </para>
	/// </summary>
	public SemanticTextPropertyDescriptor SearchInferenceId(Elastic.Clients.Elasticsearch.Id? searchInferenceId)
	{
		SearchInferenceIdValue = searchInferenceId;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (InferenceIdValue is not null)
		{
			writer.WritePropertyName("inference_id");
			JsonSerializer.Serialize(writer, InferenceIdValue, options);
		}

		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (SearchInferenceIdValue is not null)
		{
			writer.WritePropertyName("search_inference_id");
			JsonSerializer.Serialize(writer, SearchInferenceIdValue, options);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("semantic_text");
		writer.WriteEndObject();
	}

	SemanticTextProperty IBuildableDescriptor<SemanticTextProperty>.Build() => new()
	{
		InferenceId = InferenceIdValue,
		Meta = MetaValue,
		SearchInferenceId = SearchInferenceIdValue
	};
}