// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Mapping;

public partial class Properties : IsADictionary<Elastic.Clients.Elasticsearch.PropertyName, IProperty>
{
	public Properties()
	{
	}

	public Properties(IDictionary<Elastic.Clients.Elasticsearch.PropertyName, IProperty> container) : base(container)
	{
	}

	public void Add(Elastic.Clients.Elasticsearch.PropertyName name, IProperty property) => BackingDictionary.Add(Sanitize(name), property);
	public bool TryGetProperty(Elastic.Clients.Elasticsearch.PropertyName name, [NotNullWhen(returnValue: true)] out IProperty property) => BackingDictionary.TryGetValue(Sanitize(name), out property);

	public bool TryGetProperty<T>(Elastic.Clients.Elasticsearch.PropertyName name, [NotNullWhen(returnValue: true)] out T? property) where T : class, IProperty
	{
		if (BackingDictionary.TryGetValue(Sanitize(name), out var matchedValue) && matchedValue is T finalValue)
		{
			property = finalValue;
			return true;
		}

		property = null;
		return false;
	}
}

public sealed partial class PropertiesDescriptor<TDocument> : IsADictionaryDescriptor<PropertiesDescriptor<TDocument>, Properties, Elastic.Clients.Elasticsearch.PropertyName, IProperty>
{
	public PropertiesDescriptor() : base(new Properties())
	{
	}

	public PropertiesDescriptor(Properties properties) : base(properties ?? new Properties())
	{
	}

	public PropertiesDescriptor<TDocument> AggregateMetricDouble(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>, AggregateMetricDoubleProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> AggregateMetricDouble(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>, AggregateMetricDoubleProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> AggregateMetricDouble(Elastic.Clients.Elasticsearch.PropertyName propertyName, AggregateMetricDoubleProperty aggregateMetricDoubleProperty) => AssignVariant(propertyName, aggregateMetricDoubleProperty);
	public PropertiesDescriptor<TDocument> AggregateMetricDouble(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>, AggregateMetricDoubleProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> AggregateMetricDouble(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoublePropertyDescriptor<TDocument>, AggregateMetricDoubleProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Binary(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>, BinaryProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Binary(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>, BinaryProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Binary(Elastic.Clients.Elasticsearch.PropertyName propertyName, BinaryProperty binaryProperty) => AssignVariant(propertyName, binaryProperty);
	public PropertiesDescriptor<TDocument> Binary(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>, BinaryProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Binary(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BinaryPropertyDescriptor<TDocument>, BinaryProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Boolean(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>, BooleanProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Boolean(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>, BooleanProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Boolean(Elastic.Clients.Elasticsearch.PropertyName propertyName, BooleanProperty booleanProperty) => AssignVariant(propertyName, booleanProperty);
	public PropertiesDescriptor<TDocument> Boolean(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>, BooleanProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Boolean(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.BooleanPropertyDescriptor<TDocument>, BooleanProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ByteNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>, ByteNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ByteNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>, ByteNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ByteNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, ByteNumberProperty byteNumberProperty) => AssignVariant(propertyName, byteNumberProperty);
	public PropertiesDescriptor<TDocument> ByteNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>, ByteNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ByteNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ByteNumberPropertyDescriptor<TDocument>, ByteNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Completion(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>, CompletionProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Completion(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>, CompletionProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Completion(Elastic.Clients.Elasticsearch.PropertyName propertyName, CompletionProperty completionProperty) => AssignVariant(propertyName, completionProperty);
	public PropertiesDescriptor<TDocument> Completion(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>, CompletionProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Completion(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.CompletionPropertyDescriptor<TDocument>, CompletionProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ConstantKeyword(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>, ConstantKeywordProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ConstantKeyword(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>, ConstantKeywordProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ConstantKeyword(Elastic.Clients.Elasticsearch.PropertyName propertyName, ConstantKeywordProperty constantKeywordProperty) => AssignVariant(propertyName, constantKeywordProperty);
	public PropertiesDescriptor<TDocument> ConstantKeyword(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>, ConstantKeywordProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ConstantKeyword(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordPropertyDescriptor<TDocument>, ConstantKeywordProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DateNanos(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>, DateNanosProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DateNanos(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>, DateNanosProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DateNanos(Elastic.Clients.Elasticsearch.PropertyName propertyName, DateNanosProperty dateNanosProperty) => AssignVariant(propertyName, dateNanosProperty);
	public PropertiesDescriptor<TDocument> DateNanos(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>, DateNanosProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DateNanos(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateNanosPropertyDescriptor<TDocument>, DateNanosProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Date(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>, DateProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Date(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>, DateProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Date(Elastic.Clients.Elasticsearch.PropertyName propertyName, DateProperty dateProperty) => AssignVariant(propertyName, dateProperty);
	public PropertiesDescriptor<TDocument> Date(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>, DateProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Date(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DatePropertyDescriptor<TDocument>, DateProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DateRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>, DateRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DateRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>, DateRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DateRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, DateRangeProperty dateRangeProperty) => AssignVariant(propertyName, dateRangeProperty);
	public PropertiesDescriptor<TDocument> DateRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>, DateRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DateRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DateRangePropertyDescriptor<TDocument>, DateRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DenseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>, DenseVectorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DenseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>, DenseVectorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DenseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName, DenseVectorProperty denseVectorProperty) => AssignVariant(propertyName, denseVectorProperty);
	public PropertiesDescriptor<TDocument> DenseVector(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>, DenseVectorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DenseVector(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DenseVectorPropertyDescriptor<TDocument>, DenseVectorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DoubleNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>, DoubleNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DoubleNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>, DoubleNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DoubleNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, DoubleNumberProperty doubleNumberProperty) => AssignVariant(propertyName, doubleNumberProperty);
	public PropertiesDescriptor<TDocument> DoubleNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>, DoubleNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DoubleNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberPropertyDescriptor<TDocument>, DoubleNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DoubleRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>, DoubleRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DoubleRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>, DoubleRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> DoubleRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, DoubleRangeProperty doubleRangeProperty) => AssignVariant(propertyName, doubleRangeProperty);
	public PropertiesDescriptor<TDocument> DoubleRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>, DoubleRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> DoubleRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DoubleRangePropertyDescriptor<TDocument>, DoubleRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Dynamic(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>, DynamicProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Dynamic(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>, DynamicProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Dynamic(Elastic.Clients.Elasticsearch.PropertyName propertyName, DynamicProperty dynamicProperty) => AssignVariant(propertyName, dynamicProperty);
	public PropertiesDescriptor<TDocument> Dynamic(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>, DynamicProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Dynamic(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.DynamicPropertyDescriptor<TDocument>, DynamicProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FieldAlias(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>, FieldAliasProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FieldAlias(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>, FieldAliasProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FieldAlias(Elastic.Clients.Elasticsearch.PropertyName propertyName, FieldAliasProperty fieldAliasProperty) => AssignVariant(propertyName, fieldAliasProperty);
	public PropertiesDescriptor<TDocument> FieldAlias(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>, FieldAliasProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FieldAlias(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FieldAliasPropertyDescriptor<TDocument>, FieldAliasProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Flattened(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>, FlattenedProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Flattened(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>, FlattenedProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Flattened(Elastic.Clients.Elasticsearch.PropertyName propertyName, FlattenedProperty flattenedProperty) => AssignVariant(propertyName, flattenedProperty);
	public PropertiesDescriptor<TDocument> Flattened(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>, FlattenedProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Flattened(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FlattenedPropertyDescriptor<TDocument>, FlattenedProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>, FloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>, FloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, FloatNumberProperty floatNumberProperty) => AssignVariant(propertyName, floatNumberProperty);
	public PropertiesDescriptor<TDocument> FloatNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>, FloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FloatNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatNumberPropertyDescriptor<TDocument>, FloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FloatRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>, FloatRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FloatRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>, FloatRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> FloatRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, FloatRangeProperty floatRangeProperty) => AssignVariant(propertyName, floatRangeProperty);
	public PropertiesDescriptor<TDocument> FloatRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>, FloatRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> FloatRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.FloatRangePropertyDescriptor<TDocument>, FloatRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> GeoPoint(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>, GeoPointProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> GeoPoint(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>, GeoPointProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> GeoPoint(Elastic.Clients.Elasticsearch.PropertyName propertyName, GeoPointProperty geoPointProperty) => AssignVariant(propertyName, geoPointProperty);
	public PropertiesDescriptor<TDocument> GeoPoint(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>, GeoPointProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> GeoPoint(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoPointPropertyDescriptor<TDocument>, GeoPointProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> GeoShape(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>, GeoShapeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> GeoShape(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>, GeoShapeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> GeoShape(Elastic.Clients.Elasticsearch.PropertyName propertyName, GeoShapeProperty geoShapeProperty) => AssignVariant(propertyName, geoShapeProperty);
	public PropertiesDescriptor<TDocument> GeoShape(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>, GeoShapeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> GeoShape(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.GeoShapePropertyDescriptor<TDocument>, GeoShapeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> HalfFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>, HalfFloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> HalfFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>, HalfFloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> HalfFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, HalfFloatNumberProperty halfFloatNumberProperty) => AssignVariant(propertyName, halfFloatNumberProperty);
	public PropertiesDescriptor<TDocument> HalfFloatNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>, HalfFloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> HalfFloatNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberPropertyDescriptor<TDocument>, HalfFloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>, HistogramProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>, HistogramProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.PropertyName propertyName, HistogramProperty histogramProperty) => AssignVariant(propertyName, histogramProperty);
	public PropertiesDescriptor<TDocument> Histogram(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>, HistogramProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Histogram(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.HistogramPropertyDescriptor<TDocument>, HistogramProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IcuCollation(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>, IcuCollationProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IcuCollation(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>, IcuCollationProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IcuCollation(Elastic.Clients.Elasticsearch.PropertyName propertyName, IcuCollationProperty icuCollationProperty) => AssignVariant(propertyName, icuCollationProperty);
	public PropertiesDescriptor<TDocument> IcuCollation(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>, IcuCollationProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IcuCollation(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IcuCollationPropertyDescriptor<TDocument>, IcuCollationProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IntegerNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>, IntegerNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IntegerNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>, IntegerNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IntegerNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, IntegerNumberProperty integerNumberProperty) => AssignVariant(propertyName, integerNumberProperty);
	public PropertiesDescriptor<TDocument> IntegerNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>, IntegerNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IntegerNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberPropertyDescriptor<TDocument>, IntegerNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IntegerRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>, IntegerRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IntegerRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>, IntegerRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IntegerRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, IntegerRangeProperty integerRangeProperty) => AssignVariant(propertyName, integerRangeProperty);
	public PropertiesDescriptor<TDocument> IntegerRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>, IntegerRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IntegerRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IntegerRangePropertyDescriptor<TDocument>, IntegerRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Ip(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>, IpProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Ip(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>, IpProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Ip(Elastic.Clients.Elasticsearch.PropertyName propertyName, IpProperty ipProperty) => AssignVariant(propertyName, ipProperty);
	public PropertiesDescriptor<TDocument> Ip(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>, IpProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Ip(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpPropertyDescriptor<TDocument>, IpProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IpRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>, IpRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IpRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>, IpRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> IpRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, IpRangeProperty ipRangeProperty) => AssignVariant(propertyName, ipRangeProperty);
	public PropertiesDescriptor<TDocument> IpRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>, IpRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> IpRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.IpRangePropertyDescriptor<TDocument>, IpRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Join(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>, JoinProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Join(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>, JoinProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Join(Elastic.Clients.Elasticsearch.PropertyName propertyName, JoinProperty joinProperty) => AssignVariant(propertyName, joinProperty);
	public PropertiesDescriptor<TDocument> Join(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>, JoinProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Join(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.JoinPropertyDescriptor<TDocument>, JoinProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Keyword(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>, KeywordProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Keyword(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>, KeywordProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Keyword(Elastic.Clients.Elasticsearch.PropertyName propertyName, KeywordProperty keywordProperty) => AssignVariant(propertyName, keywordProperty);
	public PropertiesDescriptor<TDocument> Keyword(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>, KeywordProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Keyword(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.KeywordPropertyDescriptor<TDocument>, KeywordProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> LongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>, LongNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> LongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>, LongNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> LongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, LongNumberProperty longNumberProperty) => AssignVariant(propertyName, longNumberProperty);
	public PropertiesDescriptor<TDocument> LongNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>, LongNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> LongNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongNumberPropertyDescriptor<TDocument>, LongNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> LongRange(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>, LongRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> LongRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>, LongRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> LongRange(Elastic.Clients.Elasticsearch.PropertyName propertyName, LongRangeProperty longRangeProperty) => AssignVariant(propertyName, longRangeProperty);
	public PropertiesDescriptor<TDocument> LongRange(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>, LongRangeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> LongRange(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.LongRangePropertyDescriptor<TDocument>, LongRangeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> MatchOnlyText(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>, MatchOnlyTextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> MatchOnlyText(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>, MatchOnlyTextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> MatchOnlyText(Elastic.Clients.Elasticsearch.PropertyName propertyName, MatchOnlyTextProperty matchOnlyTextProperty) => AssignVariant(propertyName, matchOnlyTextProperty);
	public PropertiesDescriptor<TDocument> MatchOnlyText(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>, MatchOnlyTextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> MatchOnlyText(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextPropertyDescriptor<TDocument>, MatchOnlyTextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Murmur3Hash(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>, Murmur3HashProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Murmur3Hash(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>, Murmur3HashProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Murmur3Hash(Elastic.Clients.Elasticsearch.PropertyName propertyName, Murmur3HashProperty murmur3HashProperty) => AssignVariant(propertyName, murmur3HashProperty);
	public PropertiesDescriptor<TDocument> Murmur3Hash(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>, Murmur3HashProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Murmur3Hash(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashPropertyDescriptor<TDocument>, Murmur3HashProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>, NestedProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>, NestedProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.PropertyName propertyName, NestedProperty nestedProperty) => AssignVariant(propertyName, nestedProperty);
	public PropertiesDescriptor<TDocument> Nested(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>, NestedProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Nested(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.NestedPropertyDescriptor<TDocument>, NestedProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Object(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>, ObjectProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Object(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>, ObjectProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Object(Elastic.Clients.Elasticsearch.PropertyName propertyName, ObjectProperty objectProperty) => AssignVariant(propertyName, objectProperty);
	public PropertiesDescriptor<TDocument> Object(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>, ObjectProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Object(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ObjectPropertyDescriptor<TDocument>, ObjectProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> PassthroughObject(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>, PassthroughObjectProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> PassthroughObject(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>, PassthroughObjectProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> PassthroughObject(Elastic.Clients.Elasticsearch.PropertyName propertyName, PassthroughObjectProperty passthroughObjectProperty) => AssignVariant(propertyName, passthroughObjectProperty);
	public PropertiesDescriptor<TDocument> PassthroughObject(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>, PassthroughObjectProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> PassthroughObject(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectPropertyDescriptor<TDocument>, PassthroughObjectProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Percolator(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>, PercolatorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Percolator(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>, PercolatorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Percolator(Elastic.Clients.Elasticsearch.PropertyName propertyName, PercolatorProperty percolatorProperty) => AssignVariant(propertyName, percolatorProperty);
	public PropertiesDescriptor<TDocument> Percolator(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>, PercolatorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Percolator(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PercolatorPropertyDescriptor<TDocument>, PercolatorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Point(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>, PointProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Point(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>, PointProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Point(Elastic.Clients.Elasticsearch.PropertyName propertyName, PointProperty pointProperty) => AssignVariant(propertyName, pointProperty);
	public PropertiesDescriptor<TDocument> Point(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>, PointProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Point(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.PointPropertyDescriptor<TDocument>, PointProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> RankFeature(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>, RankFeatureProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> RankFeature(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>, RankFeatureProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> RankFeature(Elastic.Clients.Elasticsearch.PropertyName propertyName, RankFeatureProperty rankFeatureProperty) => AssignVariant(propertyName, rankFeatureProperty);
	public PropertiesDescriptor<TDocument> RankFeature(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>, RankFeatureProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> RankFeature(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturePropertyDescriptor<TDocument>, RankFeatureProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> RankFeatures(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>, RankFeaturesProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> RankFeatures(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>, RankFeaturesProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> RankFeatures(Elastic.Clients.Elasticsearch.PropertyName propertyName, RankFeaturesProperty rankFeaturesProperty) => AssignVariant(propertyName, rankFeaturesProperty);
	public PropertiesDescriptor<TDocument> RankFeatures(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>, RankFeaturesProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> RankFeatures(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesPropertyDescriptor<TDocument>, RankFeaturesProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ScaledFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>, ScaledFloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ScaledFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>, ScaledFloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ScaledFloatNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, ScaledFloatNumberProperty scaledFloatNumberProperty) => AssignVariant(propertyName, scaledFloatNumberProperty);
	public PropertiesDescriptor<TDocument> ScaledFloatNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>, ScaledFloatNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ScaledFloatNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberPropertyDescriptor<TDocument>, ScaledFloatNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SearchAsYouType(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>, SearchAsYouTypeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SearchAsYouType(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>, SearchAsYouTypeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SearchAsYouType(Elastic.Clients.Elasticsearch.PropertyName propertyName, SearchAsYouTypeProperty searchAsYouTypeProperty) => AssignVariant(propertyName, searchAsYouTypeProperty);
	public PropertiesDescriptor<TDocument> SearchAsYouType(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>, SearchAsYouTypeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SearchAsYouType(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypePropertyDescriptor<TDocument>, SearchAsYouTypeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SemanticText(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor, SemanticTextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SemanticText(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor, SemanticTextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SemanticText(Elastic.Clients.Elasticsearch.PropertyName propertyName, SemanticTextProperty semanticTextProperty) => AssignVariant(propertyName, semanticTextProperty);
	public PropertiesDescriptor<TDocument> SemanticText(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor, SemanticTextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SemanticText(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SemanticTextPropertyDescriptor, SemanticTextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Shape(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>, ShapeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Shape(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>, ShapeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Shape(Elastic.Clients.Elasticsearch.PropertyName propertyName, ShapeProperty shapeProperty) => AssignVariant(propertyName, shapeProperty);
	public PropertiesDescriptor<TDocument> Shape(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>, ShapeProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Shape(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShapePropertyDescriptor<TDocument>, ShapeProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ShortNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>, ShortNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ShortNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>, ShortNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> ShortNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, ShortNumberProperty shortNumberProperty) => AssignVariant(propertyName, shortNumberProperty);
	public PropertiesDescriptor<TDocument> ShortNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>, ShortNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> ShortNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.ShortNumberPropertyDescriptor<TDocument>, ShortNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SparseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>, SparseVectorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SparseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>, SparseVectorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> SparseVector(Elastic.Clients.Elasticsearch.PropertyName propertyName, SparseVectorProperty sparseVectorProperty) => AssignVariant(propertyName, sparseVectorProperty);
	public PropertiesDescriptor<TDocument> SparseVector(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>, SparseVectorProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> SparseVector(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.SparseVectorPropertyDescriptor<TDocument>, SparseVectorProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Text(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>, TextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Text(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>, TextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Text(Elastic.Clients.Elasticsearch.PropertyName propertyName, TextProperty textProperty) => AssignVariant(propertyName, textProperty);
	public PropertiesDescriptor<TDocument> Text(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>, TextProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Text(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TextPropertyDescriptor<TDocument>, TextProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> TokenCount(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>, TokenCountProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> TokenCount(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>, TokenCountProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> TokenCount(Elastic.Clients.Elasticsearch.PropertyName propertyName, TokenCountProperty tokenCountProperty) => AssignVariant(propertyName, tokenCountProperty);
	public PropertiesDescriptor<TDocument> TokenCount(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>, TokenCountProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> TokenCount(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.TokenCountPropertyDescriptor<TDocument>, TokenCountProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> UnsignedLongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>, UnsignedLongNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> UnsignedLongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>, UnsignedLongNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> UnsignedLongNumber(Elastic.Clients.Elasticsearch.PropertyName propertyName, UnsignedLongNumberProperty unsignedLongNumberProperty) => AssignVariant(propertyName, unsignedLongNumberProperty);
	public PropertiesDescriptor<TDocument> UnsignedLongNumber(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>, UnsignedLongNumberProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> UnsignedLongNumber(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberPropertyDescriptor<TDocument>, UnsignedLongNumberProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Version(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>, VersionProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Version(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>, VersionProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Version(Elastic.Clients.Elasticsearch.PropertyName propertyName, VersionProperty versionProperty) => AssignVariant(propertyName, versionProperty);
	public PropertiesDescriptor<TDocument> Version(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>, VersionProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Version(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.VersionPropertyDescriptor<TDocument>, VersionProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Wildcard(Elastic.Clients.Elasticsearch.PropertyName propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>, WildcardProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Wildcard(Elastic.Clients.Elasticsearch.PropertyName propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>, WildcardProperty>(propertyName, configure);
	public PropertiesDescriptor<TDocument> Wildcard(Elastic.Clients.Elasticsearch.PropertyName propertyName, WildcardProperty wildcardProperty) => AssignVariant(propertyName, wildcardProperty);
	public PropertiesDescriptor<TDocument> Wildcard(Expression<Func<TDocument, object>> propertyName) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>, WildcardProperty>(propertyName, null);
	public PropertiesDescriptor<TDocument> Wildcard(Expression<Func<TDocument, object>> propertyName, Action<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Mapping.WildcardPropertyDescriptor<TDocument>, WildcardProperty>(propertyName, configure);
}

internal sealed partial class PropertyInterfaceConverter : System.Text.Json.Serialization.JsonConverter<IProperty>
{
	private static readonly System.Text.Json.JsonEncodedText PropDiscriminator = System.Text.Json.JsonEncodedText.Encode("type");

	public override IProperty Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var readerSnapshot = reader;
		string? discriminator = "object";
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.TryReadProperty(options, PropDiscriminator, ref discriminator))
			{
				break;
			}

			reader.Skip();
		}

		reader = readerSnapshot;
		return discriminator switch
		{
			"aggregate_metric_double" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoubleProperty>(options),
			"binary" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.BinaryProperty>(options),
			"boolean" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.BooleanProperty>(options),
			"byte" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ByteNumberProperty>(options),
			"completion" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.CompletionProperty>(options),
			"constant_keyword" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordProperty>(options),
			"date_nanos" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DateNanosProperty>(options),
			"date" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DateProperty>(options),
			"date_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DateRangeProperty>(options),
			"dense_vector" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DenseVectorProperty>(options),
			"double" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DoubleNumberProperty>(options),
			"double_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DoubleRangeProperty>(options),
			"{dynamic_type}" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.DynamicProperty>(options),
			"alias" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.FieldAliasProperty>(options),
			"flattened" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.FlattenedProperty>(options),
			"float" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.FloatNumberProperty>(options),
			"float_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.FloatRangeProperty>(options),
			"geo_point" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.GeoPointProperty>(options),
			"geo_shape" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.GeoShapeProperty>(options),
			"half_float" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberProperty>(options),
			"histogram" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.HistogramProperty>(options),
			"icu_collation_keyword" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IcuCollationProperty>(options),
			"integer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IntegerNumberProperty>(options),
			"integer_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IntegerRangeProperty>(options),
			"ip" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IpProperty>(options),
			"ip_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.IpRangeProperty>(options),
			"join" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.JoinProperty>(options),
			"keyword" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.KeywordProperty>(options),
			"long" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.LongNumberProperty>(options),
			"long_range" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.LongRangeProperty>(options),
			"match_only_text" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextProperty>(options),
			"murmur3" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.Murmur3HashProperty>(options),
			"nested" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.NestedProperty>(options),
			"object" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ObjectProperty>(options),
			"passthrough" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectProperty>(options),
			"percolator" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.PercolatorProperty>(options),
			"point" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.PointProperty>(options),
			"rank_feature" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.RankFeatureProperty>(options),
			"rank_features" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.RankFeaturesProperty>(options),
			"scaled_float" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberProperty>(options),
			"search_as_you_type" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypeProperty>(options),
			"semantic_text" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.SemanticTextProperty>(options),
			"shape" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ShapeProperty>(options),
			"short" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.ShortNumberProperty>(options),
			"sparse_vector" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.SparseVectorProperty>(options),
			"text" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.TextProperty>(options),
			"token_count" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.TokenCountProperty>(options),
			"unsigned_long" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberProperty>(options),
			"version" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.VersionProperty>(options),
			"wildcard" => reader.ReadValue<Elastic.Clients.Elasticsearch.Mapping.WildcardProperty>(options),
			_ => throw new System.Text.Json.JsonException($"Variant '{discriminator}' is not supported for type '{nameof(IProperty)}'.")
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, IProperty value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value.Type)
		{
			case "aggregate_metric_double":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.AggregateMetricDoubleProperty)value);
				break;
			case "binary":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.BinaryProperty)value);
				break;
			case "boolean":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.BooleanProperty)value);
				break;
			case "byte":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ByteNumberProperty)value);
				break;
			case "completion":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.CompletionProperty)value);
				break;
			case "constant_keyword":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ConstantKeywordProperty)value);
				break;
			case "date_nanos":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DateNanosProperty)value);
				break;
			case "date":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DateProperty)value);
				break;
			case "date_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DateRangeProperty)value);
				break;
			case "dense_vector":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DenseVectorProperty)value);
				break;
			case "double":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DoubleNumberProperty)value);
				break;
			case "double_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DoubleRangeProperty)value);
				break;
			case "{dynamic_type}":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.DynamicProperty)value);
				break;
			case "alias":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.FieldAliasProperty)value);
				break;
			case "flattened":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.FlattenedProperty)value);
				break;
			case "float":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.FloatNumberProperty)value);
				break;
			case "float_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.FloatRangeProperty)value);
				break;
			case "geo_point":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.GeoPointProperty)value);
				break;
			case "geo_shape":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.GeoShapeProperty)value);
				break;
			case "half_float":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.HalfFloatNumberProperty)value);
				break;
			case "histogram":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.HistogramProperty)value);
				break;
			case "icu_collation_keyword":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.IcuCollationProperty)value);
				break;
			case "integer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.IntegerNumberProperty)value);
				break;
			case "integer_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.IntegerRangeProperty)value);
				break;
			case "ip":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.IpProperty)value);
				break;
			case "ip_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.IpRangeProperty)value);
				break;
			case "join":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.JoinProperty)value);
				break;
			case "keyword":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.KeywordProperty)value);
				break;
			case "long":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.LongNumberProperty)value);
				break;
			case "long_range":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.LongRangeProperty)value);
				break;
			case "match_only_text":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.MatchOnlyTextProperty)value);
				break;
			case "murmur3":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.Murmur3HashProperty)value);
				break;
			case "nested":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.NestedProperty)value);
				break;
			case "object":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ObjectProperty)value);
				break;
			case "passthrough":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.PassthroughObjectProperty)value);
				break;
			case "percolator":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.PercolatorProperty)value);
				break;
			case "point":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.PointProperty)value);
				break;
			case "rank_feature":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.RankFeatureProperty)value);
				break;
			case "rank_features":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.RankFeaturesProperty)value);
				break;
			case "scaled_float":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ScaledFloatNumberProperty)value);
				break;
			case "search_as_you_type":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.SearchAsYouTypeProperty)value);
				break;
			case "semantic_text":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.SemanticTextProperty)value);
				break;
			case "shape":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ShapeProperty)value);
				break;
			case "short":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.ShortNumberProperty)value);
				break;
			case "sparse_vector":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.SparseVectorProperty)value);
				break;
			case "text":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.TextProperty)value);
				break;
			case "token_count":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.TokenCountProperty)value);
				break;
			case "unsigned_long":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.UnsignedLongNumberProperty)value);
				break;
			case "version":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.VersionProperty)value);
				break;
			case "wildcard":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Mapping.WildcardProperty)value);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.Type}' is not supported for type '{nameof(IProperty)}'.");
		}
	}
}

[JsonConverter(typeof(PropertyInterfaceConverter))]
public partial interface IProperty
{
	public string? Type { get; }
}