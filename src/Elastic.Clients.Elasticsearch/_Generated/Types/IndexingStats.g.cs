// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch;

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Json.IndexingStatsConverter))]
public sealed partial class IndexingStats
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public IndexingStats(long deleteCurrent, System.TimeSpan deleteTimeInMillis, long deleteTotal, long indexCurrent, long indexFailed, System.TimeSpan indexTimeInMillis, long indexTotal, bool isThrottled, long noopUpdateTotal, System.TimeSpan throttleTimeInMillis)
	{
		DeleteCurrent = deleteCurrent;
		DeleteTimeInMillis = deleteTimeInMillis;
		DeleteTotal = deleteTotal;
		IndexCurrent = indexCurrent;
		IndexFailed = indexFailed;
		IndexTimeInMillis = indexTimeInMillis;
		IndexTotal = indexTotal;
		IsThrottled = isThrottled;
		NoopUpdateTotal = noopUpdateTotal;
		ThrottleTimeInMillis = throttleTimeInMillis;
	}
#if NET7_0_OR_GREATER
	public IndexingStats()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public IndexingStats()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal IndexingStats(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	public
#if NET7_0_OR_GREATER
	required
#endif
	long DeleteCurrent { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? DeleteTime { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	System.TimeSpan DeleteTimeInMillis { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	long DeleteTotal { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	long IndexCurrent { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	long IndexFailed { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? IndexTime { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	System.TimeSpan IndexTimeInMillis { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	long IndexTotal { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	bool IsThrottled { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	long NoopUpdateTotal { get; set; }
	public double? PeakWriteLoad { get; set; }
	public double? RecentWriteLoad { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? ThrottleTime { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	System.TimeSpan ThrottleTimeInMillis { get; set; }
	public System.Collections.Generic.IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.IndexingStats>? Types { get; set; }
	public double? WriteLoad { get; set; }
}