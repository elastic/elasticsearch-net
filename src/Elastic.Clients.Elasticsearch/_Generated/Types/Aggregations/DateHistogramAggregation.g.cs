// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Aggregations;

internal sealed partial class DateHistogramAggregationConverter : System.Text.Json.Serialization.JsonConverter<DateHistogramAggregation>
{
	private static readonly System.Text.Json.JsonEncodedText PropCalendarInterval = System.Text.Json.JsonEncodedText.Encode("calendar_interval");
	private static readonly System.Text.Json.JsonEncodedText PropExtendedBounds = System.Text.Json.JsonEncodedText.Encode("extended_bounds");
	private static readonly System.Text.Json.JsonEncodedText PropField = System.Text.Json.JsonEncodedText.Encode("field");
	private static readonly System.Text.Json.JsonEncodedText PropFixedInterval = System.Text.Json.JsonEncodedText.Encode("fixed_interval");
	private static readonly System.Text.Json.JsonEncodedText PropFormat = System.Text.Json.JsonEncodedText.Encode("format");
	private static readonly System.Text.Json.JsonEncodedText PropHardBounds = System.Text.Json.JsonEncodedText.Encode("hard_bounds");
	private static readonly System.Text.Json.JsonEncodedText PropMinDocCount = System.Text.Json.JsonEncodedText.Encode("min_doc_count");
	private static readonly System.Text.Json.JsonEncodedText PropMissing = System.Text.Json.JsonEncodedText.Encode("missing");
	private static readonly System.Text.Json.JsonEncodedText PropOffset = System.Text.Json.JsonEncodedText.Encode("offset");
	private static readonly System.Text.Json.JsonEncodedText PropOrder = System.Text.Json.JsonEncodedText.Encode("order");
	private static readonly System.Text.Json.JsonEncodedText PropParams = System.Text.Json.JsonEncodedText.Encode("params");
	private static readonly System.Text.Json.JsonEncodedText PropScript = System.Text.Json.JsonEncodedText.Encode("script");
	private static readonly System.Text.Json.JsonEncodedText PropTimeZone = System.Text.Json.JsonEncodedText.Encode("time_zone");

	public override DateHistogramAggregation Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval?> propCalendarInterval = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate?> propExtendedBounds = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propFixedInterval = default;
		LocalJsonValue<string?> propFormat = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate?> propHardBounds = default;
		LocalJsonValue<int?> propMinDocCount = default;
		LocalJsonValue<DateTimeOffset?> propMissing = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propOffset = default;
		LocalJsonValue<ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>?> propOrder = default;
		LocalJsonValue<IDictionary<string, object>?> propParams = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Script?> propScript = default;
		LocalJsonValue<string?> propTimeZone = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propCalendarInterval.TryReadProperty(ref reader, options, PropCalendarInterval, null))
			{
				continue;
			}

			if (propExtendedBounds.TryReadProperty(ref reader, options, PropExtendedBounds, null))
			{
				continue;
			}

			if (propField.TryReadProperty(ref reader, options, PropField, null))
			{
				continue;
			}

			if (propFixedInterval.TryReadProperty(ref reader, options, PropFixedInterval, null))
			{
				continue;
			}

			if (propFormat.TryReadProperty(ref reader, options, PropFormat, null))
			{
				continue;
			}

			if (propHardBounds.TryReadProperty(ref reader, options, PropHardBounds, null))
			{
				continue;
			}

			if (propMinDocCount.TryReadProperty(ref reader, options, PropMinDocCount, null))
			{
				continue;
			}

			if (propMissing.TryReadProperty(ref reader, options, PropMissing, null))
			{
				continue;
			}

			if (propOffset.TryReadProperty(ref reader, options, PropOffset, null))
			{
				continue;
			}

			if (propOrder.TryReadProperty(ref reader, options, PropOrder, static ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>(o, null)))
			{
				continue;
			}

			if (propParams.TryReadProperty(ref reader, options, PropParams, static IDictionary<string, object>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, object>(o, null, null)))
			{
				continue;
			}

			if (propScript.TryReadProperty(ref reader, options, PropScript, null))
			{
				continue;
			}

			if (propTimeZone.TryReadProperty(ref reader, options, PropTimeZone, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new DateHistogramAggregation
		{
			CalendarInterval = propCalendarInterval.Value
,
			ExtendedBounds = propExtendedBounds.Value
,
			Field = propField.Value
,
			FixedInterval = propFixedInterval.Value
,
			Format = propFormat.Value
,
			HardBounds = propHardBounds.Value
,
			MinDocCount = propMinDocCount.Value
,
			Missing = propMissing.Value
,
			Offset = propOffset.Value
,
			Order = propOrder.Value
,
			Params = propParams.Value
,
			Script = propScript.Value
,
			TimeZone = propTimeZone.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DateHistogramAggregation value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropCalendarInterval, value.CalendarInterval, null, null);
		writer.WriteProperty(options, PropExtendedBounds, value.ExtendedBounds, null, null);
		writer.WriteProperty(options, PropField, value.Field, null, null);
		writer.WriteProperty(options, PropFixedInterval, value.FixedInterval, null, null);
		writer.WriteProperty(options, PropFormat, value.Format, null, null);
		writer.WriteProperty(options, PropHardBounds, value.HardBounds, null, null);
		writer.WriteProperty(options, PropMinDocCount, value.MinDocCount, null, null);
		writer.WriteProperty(options, PropMissing, value.Missing, null, null);
		writer.WriteProperty(options, PropOffset, value.Offset, null, null);
		writer.WriteProperty(options, PropOrder, value.Order, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? v) => w.WriteSingleOrManyCollectionValue<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>(o, v, null));
		writer.WriteProperty(options, PropParams, value.Params, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, object>? v) => w.WriteDictionaryValue<string, object>(o, v, null, null));
		writer.WriteProperty(options, PropScript, value.Script, null, null);
		writer.WriteProperty(options, PropTimeZone, value.TimeZone, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(DateHistogramAggregationConverter))]
public sealed partial class DateHistogramAggregation
{
	/// <summary>
	/// <para>
	/// Calendar-aware interval.
	/// Can be specified using the unit name, such as <c>month</c>, or as a single unit quantity, such as <c>1M</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval? CalendarInterval { get; set; }

	/// <summary>
	/// <para>
	/// Enables extending the bounds of the histogram beyond the data itself.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? ExtendedBounds { get; set; }

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? Field { get; set; }

	/// <summary>
	/// <para>
	/// Fixed intervals: a fixed number of SI units and never deviate, regardless of where they fall on the calendar.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? FixedInterval { get; set; }

	/// <summary>
	/// <para>
	/// The date format used to format <c>key_as_string</c> in the response.
	/// If no <c>format</c> is specified, the first date format specified in the field mapping is used.
	/// </para>
	/// </summary>
	public string? Format { get; set; }

	/// <summary>
	/// <para>
	/// Limits the histogram to specified bounds.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? HardBounds { get; set; }

	/// <summary>
	/// <para>
	/// Only returns buckets that have <c>min_doc_count</c> number of documents.
	/// By default, all buckets between the first bucket that matches documents and the last one are returned.
	/// </para>
	/// </summary>
	public int? MinDocCount { get; set; }

	/// <summary>
	/// <para>
	/// The value to apply to documents that do not have a value.
	/// By default, documents without a value are ignored.
	/// </para>
	/// </summary>
	public DateTimeOffset? Missing { get; set; }

	/// <summary>
	/// <para>
	/// Changes the start value of each bucket by the specified positive (<c>+</c>) or negative offset (<c>-</c>) duration.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Offset { get; set; }

	/// <summary>
	/// <para>
	/// The sort order of the returned buckets.
	/// </para>
	/// </summary>
	public ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? Order { get; set; }
	public IDictionary<string, object>? Params { get; set; }
	public Elastic.Clients.Elasticsearch.Script? Script { get; set; }

	/// <summary>
	/// <para>
	/// Time zone used for bucketing and rounding.
	/// Defaults to Coordinated Universal Time (UTC).
	/// </para>
	/// </summary>
	public string? TimeZone { get; set; }

	public static implicit operator Elastic.Clients.Elasticsearch.Aggregations.Aggregation(DateHistogramAggregation dateHistogramAggregation) => Elastic.Clients.Elasticsearch.Aggregations.Aggregation.DateHistogram(dateHistogramAggregation);
	public static implicit operator Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy(DateHistogramAggregation dateHistogramAggregation) => Elastic.Clients.Elasticsearch.TransformManagement.PivotGroupBy.DateHistogram(dateHistogramAggregation);
}

public sealed partial class DateHistogramAggregationDescriptor<TDocument> : SerializableDescriptor<DateHistogramAggregationDescriptor<TDocument>>
{
	internal DateHistogramAggregationDescriptor(Action<DateHistogramAggregationDescriptor<TDocument>> configure) => configure.Invoke(this);

	public DateHistogramAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval? CalendarIntervalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? ExtendedBoundsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor ExtendedBoundsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> ExtendedBoundsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? FixedIntervalValue { get; set; }
	private string? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? HardBoundsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor HardBoundsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> HardBoundsDescriptorAction { get; set; }
	private int? MinDocCountValue { get; set; }
	private DateTimeOffset? MissingValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? OffsetValue { get; set; }
	private ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? OrderValue { get; set; }
	private IDictionary<string, object>? ParamsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Script? ScriptValue { get; set; }
	private Elastic.Clients.Elasticsearch.ScriptDescriptor ScriptDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.ScriptDescriptor> ScriptDescriptorAction { get; set; }
	private string? TimeZoneValue { get; set; }

	/// <summary>
	/// <para>
	/// Calendar-aware interval.
	/// Can be specified using the unit name, such as <c>month</c>, or as a single unit quantity, such as <c>1M</c>.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> CalendarInterval(Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval? calendarInterval)
	{
		CalendarIntervalValue = calendarInterval;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enables extending the bounds of the histogram beyond the data itself.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> ExtendedBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? extendedBounds)
	{
		ExtendedBoundsDescriptor = null;
		ExtendedBoundsDescriptorAction = null;
		ExtendedBoundsValue = extendedBounds;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> ExtendedBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor descriptor)
	{
		ExtendedBoundsValue = null;
		ExtendedBoundsDescriptorAction = null;
		ExtendedBoundsDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> ExtendedBounds(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> configure)
	{
		ExtendedBoundsValue = null;
		ExtendedBoundsDescriptor = null;
		ExtendedBoundsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Field(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Fixed intervals: a fixed number of SI units and never deviate, regardless of where they fall on the calendar.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> FixedInterval(Elastic.Clients.Elasticsearch.Duration? fixedInterval)
	{
		FixedIntervalValue = fixedInterval;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date format used to format <c>key_as_string</c> in the response.
	/// If no <c>format</c> is specified, the first date format specified in the field mapping is used.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Limits the histogram to specified bounds.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> HardBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? hardBounds)
	{
		HardBoundsDescriptor = null;
		HardBoundsDescriptorAction = null;
		HardBoundsValue = hardBounds;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> HardBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor descriptor)
	{
		HardBoundsValue = null;
		HardBoundsDescriptorAction = null;
		HardBoundsDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> HardBounds(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> configure)
	{
		HardBoundsValue = null;
		HardBoundsDescriptor = null;
		HardBoundsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Only returns buckets that have <c>min_doc_count</c> number of documents.
	/// By default, all buckets between the first bucket that matches documents and the last one are returned.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> MinDocCount(int? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The value to apply to documents that do not have a value.
	/// By default, documents without a value are ignored.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Missing(DateTimeOffset? missing)
	{
		MissingValue = missing;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Changes the start value of each bucket by the specified positive (<c>+</c>) or negative offset (<c>-</c>) duration.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Offset(Elastic.Clients.Elasticsearch.Duration? offset)
	{
		OffsetValue = offset;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The sort order of the returned buckets.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> Order(ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? order)
	{
		OrderValue = order;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> Params(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		ParamsValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> Script(Elastic.Clients.Elasticsearch.Script? script)
	{
		ScriptDescriptor = null;
		ScriptDescriptorAction = null;
		ScriptValue = script;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> Script(Elastic.Clients.Elasticsearch.ScriptDescriptor descriptor)
	{
		ScriptValue = null;
		ScriptDescriptorAction = null;
		ScriptDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor<TDocument> Script(Action<Elastic.Clients.Elasticsearch.ScriptDescriptor> configure)
	{
		ScriptValue = null;
		ScriptDescriptor = null;
		ScriptDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Time zone used for bucketing and rounding.
	/// Defaults to Coordinated Universal Time (UTC).
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor<TDocument> TimeZone(string? timeZone)
	{
		TimeZoneValue = timeZone;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CalendarIntervalValue is not null)
		{
			writer.WritePropertyName("calendar_interval");
			JsonSerializer.Serialize(writer, CalendarIntervalValue, options);
		}

		if (ExtendedBoundsDescriptor is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, ExtendedBoundsDescriptor, options);
		}
		else if (ExtendedBoundsDescriptorAction is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor(ExtendedBoundsDescriptorAction), options);
		}
		else if (ExtendedBoundsValue is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, ExtendedBoundsValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (FixedIntervalValue is not null)
		{
			writer.WritePropertyName("fixed_interval");
			JsonSerializer.Serialize(writer, FixedIntervalValue, options);
		}

		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (HardBoundsDescriptor is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, HardBoundsDescriptor, options);
		}
		else if (HardBoundsDescriptorAction is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor(HardBoundsDescriptorAction), options);
		}
		else if (HardBoundsValue is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, HardBoundsValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			JsonSerializer.Serialize(writer, MissingValue, options);
		}

		if (OffsetValue is not null)
		{
			writer.WritePropertyName("offset");
			JsonSerializer.Serialize(writer, OffsetValue, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			SingleOrManySerializationHelper.Serialize<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>(OrderValue, writer, options);
		}

		if (ParamsValue is not null)
		{
			writer.WritePropertyName("params");
			JsonSerializer.Serialize(writer, ParamsValue, options);
		}

		if (ScriptDescriptor is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, ScriptDescriptor, options);
		}
		else if (ScriptDescriptorAction is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.ScriptDescriptor(ScriptDescriptorAction), options);
		}
		else if (ScriptValue is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, ScriptValue, options);
		}

		if (!string.IsNullOrEmpty(TimeZoneValue))
		{
			writer.WritePropertyName("time_zone");
			writer.WriteStringValue(TimeZoneValue);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class DateHistogramAggregationDescriptor : SerializableDescriptor<DateHistogramAggregationDescriptor>
{
	internal DateHistogramAggregationDescriptor(Action<DateHistogramAggregationDescriptor> configure) => configure.Invoke(this);

	public DateHistogramAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval? CalendarIntervalValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? ExtendedBoundsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor ExtendedBoundsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> ExtendedBoundsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? FixedIntervalValue { get; set; }
	private string? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? HardBoundsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor HardBoundsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> HardBoundsDescriptorAction { get; set; }
	private int? MinDocCountValue { get; set; }
	private DateTimeOffset? MissingValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? OffsetValue { get; set; }
	private ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? OrderValue { get; set; }
	private IDictionary<string, object>? ParamsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Script? ScriptValue { get; set; }
	private Elastic.Clients.Elasticsearch.ScriptDescriptor ScriptDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.ScriptDescriptor> ScriptDescriptorAction { get; set; }
	private string? TimeZoneValue { get; set; }

	/// <summary>
	/// <para>
	/// Calendar-aware interval.
	/// Can be specified using the unit name, such as <c>month</c>, or as a single unit quantity, such as <c>1M</c>.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor CalendarInterval(Elastic.Clients.Elasticsearch.Aggregations.CalendarInterval? calendarInterval)
	{
		CalendarIntervalValue = calendarInterval;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enables extending the bounds of the histogram beyond the data itself.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor ExtendedBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? extendedBounds)
	{
		ExtendedBoundsDescriptor = null;
		ExtendedBoundsDescriptorAction = null;
		ExtendedBoundsValue = extendedBounds;
		return Self;
	}

	public DateHistogramAggregationDescriptor ExtendedBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor descriptor)
	{
		ExtendedBoundsValue = null;
		ExtendedBoundsDescriptorAction = null;
		ExtendedBoundsDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor ExtendedBounds(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> configure)
	{
		ExtendedBoundsValue = null;
		ExtendedBoundsDescriptor = null;
		ExtendedBoundsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date field whose values are use to build a histogram.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Fixed intervals: a fixed number of SI units and never deviate, regardless of where they fall on the calendar.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor FixedInterval(Elastic.Clients.Elasticsearch.Duration? fixedInterval)
	{
		FixedIntervalValue = fixedInterval;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The date format used to format <c>key_as_string</c> in the response.
	/// If no <c>format</c> is specified, the first date format specified in the field mapping is used.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Format(string? format)
	{
		FormatValue = format;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Limits the histogram to specified bounds.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor HardBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDate? hardBounds)
	{
		HardBoundsDescriptor = null;
		HardBoundsDescriptorAction = null;
		HardBoundsValue = hardBounds;
		return Self;
	}

	public DateHistogramAggregationDescriptor HardBounds(Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor descriptor)
	{
		HardBoundsValue = null;
		HardBoundsDescriptorAction = null;
		HardBoundsDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor HardBounds(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor> configure)
	{
		HardBoundsValue = null;
		HardBoundsDescriptor = null;
		HardBoundsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Only returns buckets that have <c>min_doc_count</c> number of documents.
	/// By default, all buckets between the first bucket that matches documents and the last one are returned.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor MinDocCount(int? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The value to apply to documents that do not have a value.
	/// By default, documents without a value are ignored.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Missing(DateTimeOffset? missing)
	{
		MissingValue = missing;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Changes the start value of each bucket by the specified positive (<c>+</c>) or negative offset (<c>-</c>) duration.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Offset(Elastic.Clients.Elasticsearch.Duration? offset)
	{
		OffsetValue = offset;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The sort order of the returned buckets.
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor Order(ICollection<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>? order)
	{
		OrderValue = order;
		return Self;
	}

	public DateHistogramAggregationDescriptor Params(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		ParamsValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public DateHistogramAggregationDescriptor Script(Elastic.Clients.Elasticsearch.Script? script)
	{
		ScriptDescriptor = null;
		ScriptDescriptorAction = null;
		ScriptValue = script;
		return Self;
	}

	public DateHistogramAggregationDescriptor Script(Elastic.Clients.Elasticsearch.ScriptDescriptor descriptor)
	{
		ScriptValue = null;
		ScriptDescriptorAction = null;
		ScriptDescriptor = descriptor;
		return Self;
	}

	public DateHistogramAggregationDescriptor Script(Action<Elastic.Clients.Elasticsearch.ScriptDescriptor> configure)
	{
		ScriptValue = null;
		ScriptDescriptor = null;
		ScriptDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Time zone used for bucketing and rounding.
	/// Defaults to Coordinated Universal Time (UTC).
	/// </para>
	/// </summary>
	public DateHistogramAggregationDescriptor TimeZone(string? timeZone)
	{
		TimeZoneValue = timeZone;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CalendarIntervalValue is not null)
		{
			writer.WritePropertyName("calendar_interval");
			JsonSerializer.Serialize(writer, CalendarIntervalValue, options);
		}

		if (ExtendedBoundsDescriptor is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, ExtendedBoundsDescriptor, options);
		}
		else if (ExtendedBoundsDescriptorAction is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor(ExtendedBoundsDescriptorAction), options);
		}
		else if (ExtendedBoundsValue is not null)
		{
			writer.WritePropertyName("extended_bounds");
			JsonSerializer.Serialize(writer, ExtendedBoundsValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (FixedIntervalValue is not null)
		{
			writer.WritePropertyName("fixed_interval");
			JsonSerializer.Serialize(writer, FixedIntervalValue, options);
		}

		if (!string.IsNullOrEmpty(FormatValue))
		{
			writer.WritePropertyName("format");
			writer.WriteStringValue(FormatValue);
		}

		if (HardBoundsDescriptor is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, HardBoundsDescriptor, options);
		}
		else if (HardBoundsDescriptorAction is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ExtendedBoundsDateDescriptor(HardBoundsDescriptorAction), options);
		}
		else if (HardBoundsValue is not null)
		{
			writer.WritePropertyName("hard_bounds");
			JsonSerializer.Serialize(writer, HardBoundsValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			JsonSerializer.Serialize(writer, MissingValue, options);
		}

		if (OffsetValue is not null)
		{
			writer.WritePropertyName("offset");
			JsonSerializer.Serialize(writer, OffsetValue, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			SingleOrManySerializationHelper.Serialize<KeyValuePair<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.SortOrder>>(OrderValue, writer, options);
		}

		if (ParamsValue is not null)
		{
			writer.WritePropertyName("params");
			JsonSerializer.Serialize(writer, ParamsValue, options);
		}

		if (ScriptDescriptor is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, ScriptDescriptor, options);
		}
		else if (ScriptDescriptorAction is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.ScriptDescriptor(ScriptDescriptorAction), options);
		}
		else if (ScriptValue is not null)
		{
			writer.WritePropertyName("script");
			JsonSerializer.Serialize(writer, ScriptValue, options);
		}

		if (!string.IsNullOrEmpty(TimeZoneValue))
		{
			writer.WritePropertyName("time_zone");
			writer.WriteStringValue(TimeZoneValue);
		}

		writer.WriteEndObject();
	}
}