// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	[JsonConverter(typeof(AggregationContainerConverter))]
	public partial class AggregationContainer : IContainer
	{
		public AggregationContainer(AggregationBase variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal AggregationBase Variant { get; }
	}

	internal sealed class AggregationContainerConverter : JsonConverter<AggregationContainer>
	{
		public override AggregationContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			//var readAheadCopy = reader;

			reader.Read();
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = reader.GetString();

			if (propertyName == "adjacency_matrix")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation?>(ref reader, options);
			}

			if (propertyName == "auto_date_histogram")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation?>(ref reader, options);
			}

			if (propertyName == "avg")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation?>(ref reader, options);
			}

			if (propertyName == "avg_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "boxplot")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation?>(ref reader, options);
			}

			if (propertyName == "bucket_script")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation?>(ref reader, options);
			}

			if (propertyName == "bucket_selector")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation?>(ref reader, options);
			}

			if (propertyName == "bucket_sort")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation?>(ref reader, options);
			}

			if (propertyName == "cardinality")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation?>(ref reader, options);
			}

			if (propertyName == "children")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation?>(ref reader, options);
			}

			if (propertyName == "composite")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation?>(ref reader, options);
			}

			if (propertyName == "cumulative_cardinality")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation?>(ref reader, options);
			}

			if (propertyName == "cumulative_sum")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation?>(ref reader, options);
			}

			if (propertyName == "date_histogram")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation?>(ref reader, options);
			}

			if (propertyName == "date_range")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation?>(ref reader, options);
			}

			if (propertyName == "derivative")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation?>(ref reader, options);
			}

			if (propertyName == "diversified_sampler")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation?>(ref reader, options);
			}

			if (propertyName == "extended_stats")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation?>(ref reader, options);
			}

			if (propertyName == "extended_stats_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "filters")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation?>(ref reader, options);
			}

			if (propertyName == "geo_bounds")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation?>(ref reader, options);
			}

			if (propertyName == "geo_centroid")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation?>(ref reader, options);
			}

			if (propertyName == "geo_distance")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation?>(ref reader, options);
			}

			if (propertyName == "geohash_grid")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoHashGridAggregation?>(ref reader, options);
			}

			if (propertyName == "geo_line")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation?>(ref reader, options);
			}

			if (propertyName == "geotile_grid")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GeoTileGridAggregation?>(ref reader, options);
			}

			if (propertyName == "global")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation?>(ref reader, options);
			}

			if (propertyName == "histogram")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation?>(ref reader, options);
			}

			if (propertyName == "ip_range")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation?>(ref reader, options);
			}

			if (propertyName == "inference")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation?>(ref reader, options);
			}

			if (propertyName == "matrix_stats")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation?>(ref reader, options);
			}

			if (propertyName == "max")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation?>(ref reader, options);
			}

			if (propertyName == "max_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "median_absolute_deviation")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation?>(ref reader, options);
			}

			if (propertyName == "min")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MinAggregation?>("min", ref reader, options);
			}

			if (propertyName == "min_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "missing")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation?>(ref reader, options);
			}

			if (propertyName == "moving_percentiles")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation?>(ref reader, options);
			}

			if (propertyName == "moving_fn")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation?>(ref reader, options);
			}

			if (propertyName == "multi_terms")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation?>(ref reader, options);
			}

			if (propertyName == "nested")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation?>(ref reader, options);
			}

			if (propertyName == "normalize")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation?>(ref reader, options);
			}

			if (propertyName == "parent")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation?>(ref reader, options);
			}

			if (propertyName == "percentile_ranks")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation?>(ref reader, options);
			}

			if (propertyName == "percentiles")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation?>(ref reader, options);
			}

			if (propertyName == "percentiles_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "range")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation?>(ref reader, options);
			}

			if (propertyName == "rare_terms")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation?>(ref reader, options);
			}

			if (propertyName == "rate")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.RateAggregation?>(ref reader, options);
			}

			if (propertyName == "reverse_nested")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation?>(ref reader, options);
			}

			if (propertyName == "sampler")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation?>(ref reader, options);
			}

			if (propertyName == "scripted_metric")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation?>(ref reader, options);
			}

			if (propertyName == "serial_diff")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation?>(ref reader, options);
			}

			if (propertyName == "significant_terms")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation?>(ref reader, options);
			}

			if (propertyName == "significant_text")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation?>(ref reader, options);
			}

			if (propertyName == "stats")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation?>(ref reader, options);
			}

			if (propertyName == "stats_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "string_stats")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation?>(ref reader, options);
			}

			if (propertyName == "sum")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SumAggregation?>(ref reader, options);
			}

			if (propertyName == "sum_bucket")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation?>(ref reader, options);
			}

			if (propertyName == "terms")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation?>(ref reader, options);
			}

			if (propertyName == "top_hits")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation?>(ref reader, options);
			}

			if (propertyName == "t_test")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation?>(ref reader, options);
			}

			if (propertyName == "top_metrics")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation?>(ref reader, options);
			}

			if (propertyName == "value_count")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation?>(ref reader, options);
			}

			if (propertyName == "weighted_avg")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation?>(ref reader, options);
			}

			if (propertyName == "variable_width_histogram")
			{
				return AggregationContainerSerializationHelper.ReadContainer<Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation?>(ref reader, options);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, AggregationContainer value, JsonSerializerOptions options)
		{
			if (value is null)
			{
				writer.WriteNullValue();
			}
			else if (value.SerializeFluent is not null)
			{
				value.SerializeFluent(writer, options);
			}
			else if (value.Variant is not null)
			{
				var type = value.Variant.GetType();
				JsonSerializer.Serialize(writer, value.Variant, type, options);
			}
			else
			{
				throw new JsonException("Invalid container cannot be serialised");
			}
		}
	}

	public sealed partial class AggregationContainerDescriptor<T>
	{
		public AggregationContainerDescriptor()
		{
		}

		internal AggregationContainerDescriptor(Action<AggregationContainerDescriptor<T>> configure) => configure.Invoke(this);
		public AggregationContainerDescriptor<T> AdjacencyMatrix(string name, Action<AdjacencyMatrixAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("adjacency_matrix", configure));
		}

		public AggregationContainerDescriptor<T> AutoDateHistogram(string name, Action<AutoDateHistogramAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("auto_date_histogram", configure));
		}

		public AggregationContainerDescriptor<T> Avg(string name, Action<AverageAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("avg", configure));
		}

		public AggregationContainerDescriptor<T> AvgBucket(string name, Action<AverageBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("avg_bucket", configure));
		}

		public AggregationContainerDescriptor<T> Boxplot(string name, Action<BoxplotAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("boxplot", configure));
		}

		public AggregationContainerDescriptor<T> BucketScript(string name, Action<BucketScriptAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("bucket_script", configure));
		}

		public AggregationContainerDescriptor<T> BucketSelector(string name, Action<BucketSelectorAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("bucket_selector", configure));
		}

		public AggregationContainerDescriptor<T> BucketSort(string name, Action<BucketSortAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("bucket_sort", configure));
		}

		public AggregationContainerDescriptor<T> Cardinality(string name, Action<CardinalityAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("cardinality", configure));
		}

		public AggregationContainerDescriptor<T> Children(string name, Action<ChildrenAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("children", configure));
		}

		public AggregationContainerDescriptor<T> Composite(string name, Action<CompositeAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("composite", configure));
		}

		public AggregationContainerDescriptor<T> CumulativeCardinality(string name, Action<CumulativeCardinalityAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("cumulative_cardinality", configure));
		}

		public AggregationContainerDescriptor<T> CumulativeSum(string name, Action<CumulativeSumAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("cumulative_sum", configure));
		}

		public AggregationContainerDescriptor<T> DateHistogram(string name, Action<DateHistogramAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("date_histogram", configure));
		}

		public AggregationContainerDescriptor<T> DateRange(string name, Action<DateRangeAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("date_range", configure));
		}

		public AggregationContainerDescriptor<T> Derivative(string name, Action<DerivativeAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("derivative", configure));
		}

		public AggregationContainerDescriptor<T> DiversifiedSampler(string name, Action<DiversifiedSamplerAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("diversified_sampler", configure));
		}

		public AggregationContainerDescriptor<T> ExtendedStats(string name, Action<ExtendedStatsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("extended_stats", configure));
		}

		public AggregationContainerDescriptor<T> ExtendedStatsBucket(string name, Action<ExtendedStatsBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("extended_stats_bucket", configure));
		}

		public AggregationContainerDescriptor<T> Filters(string name, Action<FiltersAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("filters", configure));
		}

		public AggregationContainerDescriptor<T> GeoBounds(string name, Action<GeoBoundsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geo_bounds", configure));
		}

		public AggregationContainerDescriptor<T> GeoCentroid(string name, Action<GeoCentroidAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geo_centroid", configure));
		}

		public AggregationContainerDescriptor<T> GeoDistance(string name, Action<GeoDistanceAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geo_distance", configure));
		}

		public AggregationContainerDescriptor<T> GeohashGrid(string name, Action<GeoHashGridAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geohash_grid", configure));
		}

		public AggregationContainerDescriptor<T> GeoLine(string name, Action<GeoLineAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geo_line", configure));
		}

		public AggregationContainerDescriptor<T> GeotileGrid(string name, Action<GeoTileGridAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("geotile_grid", configure));
		}

		public AggregationContainerDescriptor<T> Global(string name, Action<GlobalAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("global", configure));
		}

		public AggregationContainerDescriptor<T> Histogram(string name, Action<HistogramAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("histogram", configure));
		}

		public AggregationContainerDescriptor<T> IpRange(string name, Action<IpRangeAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("ip_range", configure));
		}

		public AggregationContainerDescriptor<T> Inference(string name, Action<InferenceAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("inference", configure));
		}

		public AggregationContainerDescriptor<T> MatrixStats(string name, Action<MatrixStatsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("matrix_stats", configure));
		}

		public AggregationContainerDescriptor<T> Max(string name, Action<MaxAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("max", configure));
		}

		public AggregationContainerDescriptor<T> MaxBucket(string name, Action<MaxBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("max_bucket", configure));
		}

		public AggregationContainerDescriptor<T> MedianAbsoluteDeviation(string name, Action<MedianAbsoluteDeviationAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("median_absolute_deviation", configure));
		}

		public AggregationContainerDescriptor<T> Min(string name, Action<MinAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("min", configure));
		}

		public AggregationContainerDescriptor<T> MinBucket(string name, Action<MinBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("min_bucket", configure));
		}

		public AggregationContainerDescriptor<T> Missing(string name, Action<MissingAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("missing", configure));
		}

		public AggregationContainerDescriptor<T> MovingPercentiles(string name, Action<MovingPercentilesAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("moving_percentiles", configure));
		}

		public AggregationContainerDescriptor<T> MovingFn(string name, Action<MovingFunctionAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("moving_fn", configure));
		}

		public AggregationContainerDescriptor<T> MultiTerms(string name, Action<MultiTermsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("multi_terms", configure));
		}

		public AggregationContainerDescriptor<T> Nested(string name, Action<NestedAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("nested", configure));
		}

		public AggregationContainerDescriptor<T> Normalize(string name, Action<NormalizeAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("normalize", configure));
		}

		public AggregationContainerDescriptor<T> Parent(string name, Action<ParentAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("parent", configure));
		}

		public AggregationContainerDescriptor<T> PercentileRanks(string name, Action<PercentileRanksAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("percentile_ranks", configure));
		}

		public AggregationContainerDescriptor<T> Percentiles(string name, Action<PercentilesAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("percentiles", configure));
		}

		public AggregationContainerDescriptor<T> PercentilesBucket(string name, Action<PercentilesBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("percentiles_bucket", configure));
		}

		public AggregationContainerDescriptor<T> Range(string name, Action<RangeAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("range", configure));
		}

		public AggregationContainerDescriptor<T> RareTerms(string name, Action<RareTermsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("rare_terms", configure));
		}

		public AggregationContainerDescriptor<T> Rate(string name, Action<RateAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("rate", configure));
		}

		public AggregationContainerDescriptor<T> ReverseNested(string name, Action<ReverseNestedAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("reverse_nested", configure));
		}

		public AggregationContainerDescriptor<T> Sampler(string name, Action<SamplerAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("sampler", configure));
		}

		public AggregationContainerDescriptor<T> ScriptedMetric(string name, Action<ScriptedMetricAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("scripted_metric", configure));
		}

		public AggregationContainerDescriptor<T> SerialDiff(string name, Action<SerialDifferencingAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("serial_diff", configure));
		}

		public AggregationContainerDescriptor<T> SignificantTerms(string name, Action<SignificantTermsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("significant_terms", configure));
		}

		public AggregationContainerDescriptor<T> SignificantText(string name, Action<SignificantTextAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("significant_text", configure));
		}

		public AggregationContainerDescriptor<T> Stats(string name, Action<StatsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("stats", configure));
		}

		public AggregationContainerDescriptor<T> StatsBucket(string name, Action<StatsBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("stats_bucket", configure));
		}

		public AggregationContainerDescriptor<T> StringStats(string name, Action<StringStatsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("string_stats", configure));
		}

		public AggregationContainerDescriptor<T> Sum(string name, Action<SumAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("sum", configure));
		}

		public AggregationContainerDescriptor<T> SumBucket(string name, Action<SumBucketAggregationDescriptor> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("sum_bucket", configure));
		}

		public AggregationContainerDescriptor<T> Terms(string name, Action<TermsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("terms", configure));
		}

		public AggregationContainerDescriptor<T> TopHits(string name, Action<TopHitsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("top_hits", configure));
		}

		public AggregationContainerDescriptor<T> TTest(string name, Action<TTestAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("t_test", configure));
		}

		public AggregationContainerDescriptor<T> TopMetrics(string name, Action<TopMetricsAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("top_metrics", configure));
		}

		public AggregationContainerDescriptor<T> ValueCount(string name, Action<ValueCountAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("value_count", configure));
		}

		public AggregationContainerDescriptor<T> WeightedAvg(string name, Action<WeightedAverageAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("weighted_avg", configure));
		}

		public AggregationContainerDescriptor<T> VariableWidthHistogram(string name, Action<VariableWidthHistogramAggregationDescriptor<T>> configure)
		{
			return SetContainer(name, AggregationContainer.CreateWithAction("variable_width_histogram", configure));
		}
	}
}
