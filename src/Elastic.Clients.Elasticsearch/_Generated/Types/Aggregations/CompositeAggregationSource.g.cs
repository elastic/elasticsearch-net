// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	public partial class CompositeAggregationSource
	{
		[JsonInclude]
		[JsonPropertyName("terms")]
		public Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation? Terms { get; set; }

		[JsonInclude]
		[JsonPropertyName("histogram")]
		public Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation? Histogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_histogram")]
		public Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation? DateHistogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("geotile_grid")]
		public Elastic.Clients.Elasticsearch.Aggregations.GeoTileGridAggregation? GeotileGrid { get; set; }
	}

	public sealed partial class CompositeAggregationSourceDescriptor<TDocument> : DescriptorBase<CompositeAggregationSourceDescriptor<TDocument>>
	{
		public CompositeAggregationSourceDescriptor()
		{
		}

		internal CompositeAggregationSourceDescriptor(Action<CompositeAggregationSourceDescriptor<TDocument>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation? TermsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation? HistogramValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation? DateHistogramValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.GeoTileGridAggregation? GeotileGridValue { get; private set; }

		internal TermsAggregationDescriptor<TDocument> TermsDescriptor { get; private set; }

		internal HistogramAggregationDescriptor<TDocument> HistogramDescriptor { get; private set; }

		internal DateHistogramAggregationDescriptor<TDocument> DateHistogramDescriptor { get; private set; }

		internal GeoTileGridAggregationDescriptor<TDocument> GeotileGridDescriptor { get; private set; }

		internal Action<TermsAggregationDescriptor<TDocument>> TermsDescriptorAction { get; private set; }

		internal Action<HistogramAggregationDescriptor<TDocument>> HistogramDescriptorAction { get; private set; }

		internal Action<DateHistogramAggregationDescriptor<TDocument>> DateHistogramDescriptorAction { get; private set; }

		internal Action<GeoTileGridAggregationDescriptor<TDocument>> GeotileGridDescriptorAction { get; private set; }

		public CompositeAggregationSourceDescriptor<TDocument> Terms(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation? terms)
		{
			TermsDescriptor = null;
			TermsDescriptorAction = null;
			return Assign(terms, (a, v) => a.TermsValue = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> Terms(Aggregations.TermsAggregationDescriptor<TDocument> descriptor)
		{
			TermsValue = null;
			TermsDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.TermsDescriptor = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> Terms(Action<Aggregations.TermsAggregationDescriptor<TDocument>> configure)
		{
			TermsValue = null;
			TermsDescriptorAction = null;
			return Assign(configure, (a, v) => a.TermsDescriptorAction = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation? histogram)
		{
			HistogramDescriptor = null;
			HistogramDescriptorAction = null;
			return Assign(histogram, (a, v) => a.HistogramValue = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> Histogram(Aggregations.HistogramAggregationDescriptor<TDocument> descriptor)
		{
			HistogramValue = null;
			HistogramDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.HistogramDescriptor = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> Histogram(Action<Aggregations.HistogramAggregationDescriptor<TDocument>> configure)
		{
			HistogramValue = null;
			HistogramDescriptorAction = null;
			return Assign(configure, (a, v) => a.HistogramDescriptorAction = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> DateHistogram(Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation? dateHistogram)
		{
			DateHistogramDescriptor = null;
			DateHistogramDescriptorAction = null;
			return Assign(dateHistogram, (a, v) => a.DateHistogramValue = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> DateHistogram(Aggregations.DateHistogramAggregationDescriptor<TDocument> descriptor)
		{
			DateHistogramValue = null;
			DateHistogramDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.DateHistogramDescriptor = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> DateHistogram(Action<Aggregations.DateHistogramAggregationDescriptor<TDocument>> configure)
		{
			DateHistogramValue = null;
			DateHistogramDescriptorAction = null;
			return Assign(configure, (a, v) => a.DateHistogramDescriptorAction = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> GeotileGrid(Elastic.Clients.Elasticsearch.Aggregations.GeoTileGridAggregation? geotileGrid)
		{
			GeotileGridDescriptor = null;
			GeotileGridDescriptorAction = null;
			return Assign(geotileGrid, (a, v) => a.GeotileGridValue = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> GeotileGrid(Aggregations.GeoTileGridAggregationDescriptor<TDocument> descriptor)
		{
			GeotileGridValue = null;
			GeotileGridDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.GeotileGridDescriptor = v);
		}

		public CompositeAggregationSourceDescriptor<TDocument> GeotileGrid(Action<Aggregations.GeoTileGridAggregationDescriptor<TDocument>> configure)
		{
			GeotileGridValue = null;
			GeotileGridDescriptorAction = null;
			return Assign(configure, (a, v) => a.GeotileGridDescriptorAction = v);
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (TermsDescriptor is not null)
			{
				writer.WritePropertyName("terms");
				JsonSerializer.Serialize(writer, TermsDescriptor, options);
			}
			else if (TermsDescriptorAction is not null)
			{
				writer.WritePropertyName("terms");
				JsonSerializer.Serialize(writer, new Aggregations.TermsAggregationDescriptor<TDocument>(TermsDescriptorAction), options);
			}
			else if (TermsValue is not null)
			{
				writer.WritePropertyName("terms");
				JsonSerializer.Serialize(writer, TermsValue, options);
			}

			if (HistogramDescriptor is not null)
			{
				writer.WritePropertyName("histogram");
				JsonSerializer.Serialize(writer, HistogramDescriptor, options);
			}
			else if (HistogramDescriptorAction is not null)
			{
				writer.WritePropertyName("histogram");
				JsonSerializer.Serialize(writer, new Aggregations.HistogramAggregationDescriptor<TDocument>(HistogramDescriptorAction), options);
			}
			else if (HistogramValue is not null)
			{
				writer.WritePropertyName("histogram");
				JsonSerializer.Serialize(writer, HistogramValue, options);
			}

			if (DateHistogramDescriptor is not null)
			{
				writer.WritePropertyName("date_histogram");
				JsonSerializer.Serialize(writer, DateHistogramDescriptor, options);
			}
			else if (DateHistogramDescriptorAction is not null)
			{
				writer.WritePropertyName("date_histogram");
				JsonSerializer.Serialize(writer, new Aggregations.DateHistogramAggregationDescriptor<TDocument>(DateHistogramDescriptorAction), options);
			}
			else if (DateHistogramValue is not null)
			{
				writer.WritePropertyName("date_histogram");
				JsonSerializer.Serialize(writer, DateHistogramValue, options);
			}

			if (GeotileGridDescriptor is not null)
			{
				writer.WritePropertyName("geotile_grid");
				JsonSerializer.Serialize(writer, GeotileGridDescriptor, options);
			}
			else if (GeotileGridDescriptorAction is not null)
			{
				writer.WritePropertyName("geotile_grid");
				JsonSerializer.Serialize(writer, new Aggregations.GeoTileGridAggregationDescriptor<TDocument>(GeotileGridDescriptorAction), options);
			}
			else if (GeotileGridValue is not null)
			{
				writer.WritePropertyName("geotile_grid");
				JsonSerializer.Serialize(writer, GeotileGridValue, options);
			}

			writer.WriteEndObject();
		}
	}
}