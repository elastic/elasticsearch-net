// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	internal sealed class PercentilesAggregationConverter : JsonConverter<PercentilesAggregation>
	{
		public override PercentilesAggregation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			if (reader.TokenType != JsonTokenType.StartObject)
				throw new JsonException("Unexpected JSON detected.");
			return new PercentilesAggregation("");
		}

		public override void Write(Utf8JsonWriter writer, PercentilesAggregation value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("percentiles");
			writer.WriteStartObject();
			if (value.Keyed.HasValue)
			{
				writer.WritePropertyName("keyed");
				writer.WriteBooleanValue(value.Keyed.Value);
			}

			if (value.Percents is not null)
			{
				writer.WritePropertyName("percents");
				JsonSerializer.Serialize(writer, value.Percents, options);
			}

			if (value.Hdr is not null)
			{
				writer.WritePropertyName("hdr");
				JsonSerializer.Serialize(writer, value.Hdr, options);
			}

			if (value.TDigest is not null)
			{
				writer.WritePropertyName("tdigest");
				JsonSerializer.Serialize(writer, value.TDigest, options);
			}

			if (!string.IsNullOrEmpty(value.Format))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(value.Format);
			}

			if (value.Field is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, value.Field, options);
			}

			if (value.Missing is not null)
			{
				writer.WritePropertyName("missing");
				JsonSerializer.Serialize(writer, value.Missing, options);
			}

			if (value.Script is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, value.Script, options);
			}

			writer.WriteEndObject();
			if (value.Meta is not null)
			{
				writer.WritePropertyName("meta");
				JsonSerializer.Serialize(writer, value.Meta, options);
			}

			writer.WriteEndObject();
		}
	}

	[JsonConverter(typeof(PercentilesAggregationConverter))]
	public partial class PercentilesAggregation : Aggregations.FormatMetricAggregationBase
	{
		public PercentilesAggregation(string name, Field field) : base(name) => Field = field;
		public PercentilesAggregation(string name) : base(name)
		{
		}

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		[JsonInclude]
		[JsonPropertyName("percents")]
		public IEnumerable<double>? Percents { get; set; }

		[JsonInclude]
		[JsonPropertyName("hdr")]
		public Elastic.Clients.Elasticsearch.Aggregations.HdrMethod? Hdr { get; set; }

		[JsonInclude]
		[JsonPropertyName("tdigest")]
		public Elastic.Clients.Elasticsearch.Aggregations.TDigest? TDigest { get; set; }
	}

	public sealed partial class PercentilesAggregationDescriptor<T> : DescriptorBase<PercentilesAggregationDescriptor<T>>
	{
		public PercentilesAggregationDescriptor()
		{
		}

		internal PercentilesAggregationDescriptor(Action<PercentilesAggregationDescriptor<T>> configure) => configure.Invoke(this);
		internal bool? KeyedValue { get; private set; }

		internal IEnumerable<double>? PercentsValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.HdrMethod? HdrValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.TDigest? TDigestValue { get; private set; }

		internal string? FormatValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Field? FieldValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Aggregations.Missing? MissingValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Script? ScriptValue { get; private set; }

		internal Dictionary<string, object>? MetaValue { get; private set; }

		internal HdrMethodDescriptor HdrDescriptor { get; private set; }

		internal TDigestDescriptor TDigestDescriptor { get; private set; }

		internal Action<HdrMethodDescriptor> HdrDescriptorAction { get; private set; }

		internal Action<TDigestDescriptor> TDigestDescriptorAction { get; private set; }

		public PercentilesAggregationDescriptor<T> Keyed(bool? keyed = true) => Assign(keyed, (a, v) => a.KeyedValue = v);
		public PercentilesAggregationDescriptor<T> Percents(IEnumerable<double>? percents) => Assign(percents, (a, v) => a.PercentsValue = v);
		public PercentilesAggregationDescriptor<T> Hdr(Elastic.Clients.Elasticsearch.Aggregations.HdrMethod? hdr)
		{
			HdrDescriptor = null;
			HdrDescriptorAction = null;
			return Assign(hdr, (a, v) => a.HdrValue = v);
		}

		public PercentilesAggregationDescriptor<T> Hdr(Aggregations.HdrMethodDescriptor descriptor)
		{
			HdrValue = null;
			HdrDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.HdrDescriptor = v);
		}

		public PercentilesAggregationDescriptor<T> Hdr(Action<Aggregations.HdrMethodDescriptor> configure)
		{
			HdrValue = null;
			HdrDescriptorAction = null;
			return Assign(configure, (a, v) => a.HdrDescriptorAction = v);
		}

		public PercentilesAggregationDescriptor<T> TDigest(Elastic.Clients.Elasticsearch.Aggregations.TDigest? tDigest)
		{
			TDigestDescriptor = null;
			TDigestDescriptorAction = null;
			return Assign(tDigest, (a, v) => a.TDigestValue = v);
		}

		public PercentilesAggregationDescriptor<T> TDigest(Aggregations.TDigestDescriptor descriptor)
		{
			TDigestValue = null;
			TDigestDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.TDigestDescriptor = v);
		}

		public PercentilesAggregationDescriptor<T> TDigest(Action<Aggregations.TDigestDescriptor> configure)
		{
			TDigestValue = null;
			TDigestDescriptorAction = null;
			return Assign(configure, (a, v) => a.TDigestDescriptorAction = v);
		}

		public PercentilesAggregationDescriptor<T> Format(string? format) => Assign(format, (a, v) => a.FormatValue = v);
		public PercentilesAggregationDescriptor<T> Field(Elastic.Clients.Elasticsearch.Field? field) => Assign(field, (a, v) => a.FieldValue = v);
		public PercentilesAggregationDescriptor<T> Field<TValue>(Expression<Func<T, TValue>> field) => Assign(field, (a, v) => a.FieldValue = v);
		public PercentilesAggregationDescriptor<T> Missing(Elastic.Clients.Elasticsearch.Aggregations.Missing? missing) => Assign(missing, (a, v) => a.MissingValue = v);
		public PercentilesAggregationDescriptor<T> Script(Elastic.Clients.Elasticsearch.Script? script) => Assign(script, (a, v) => a.ScriptValue = v);
		public PercentilesAggregationDescriptor<T> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector) => Assign(selector, (a, v) => a.MetaValue = v?.Invoke(new FluentDictionary<string, object>()));
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("percentiles");
			writer.WriteStartObject();
			if (KeyedValue.HasValue)
			{
				writer.WritePropertyName("keyed");
				writer.WriteBooleanValue(KeyedValue.Value);
			}

			if (PercentsValue is not null)
			{
				writer.WritePropertyName("percents");
				JsonSerializer.Serialize(writer, PercentsValue, options);
			}

			if (HdrDescriptor is not null)
			{
				writer.WritePropertyName("hdr");
				JsonSerializer.Serialize(writer, HdrDescriptor, options);
			}
			else if (HdrDescriptorAction is not null)
			{
				writer.WritePropertyName("hdr");
				JsonSerializer.Serialize(writer, new Aggregations.HdrMethodDescriptor(HdrDescriptorAction), options);
			}
			else if (HdrValue is not null)
			{
				writer.WritePropertyName("hdr");
				JsonSerializer.Serialize(writer, HdrValue, options);
			}

			if (TDigestDescriptor is not null)
			{
				writer.WritePropertyName("tdigest");
				JsonSerializer.Serialize(writer, TDigestDescriptor, options);
			}
			else if (TDigestDescriptorAction is not null)
			{
				writer.WritePropertyName("tdigest");
				JsonSerializer.Serialize(writer, new Aggregations.TDigestDescriptor(TDigestDescriptorAction), options);
			}
			else if (TDigestValue is not null)
			{
				writer.WritePropertyName("tdigest");
				JsonSerializer.Serialize(writer, TDigestValue, options);
			}

			if (!string.IsNullOrEmpty(FormatValue))
			{
				writer.WritePropertyName("format");
				writer.WriteStringValue(FormatValue);
			}

			if (FieldValue is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, FieldValue, options);
			}

			if (MissingValue is not null)
			{
				writer.WritePropertyName("missing");
				JsonSerializer.Serialize(writer, MissingValue, options);
			}

			if (ScriptValue is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, ScriptValue, options);
			}

			writer.WriteEndObject();
			if (MetaValue is not null)
			{
				writer.WritePropertyName("meta");
				JsonSerializer.Serialize(writer, MetaValue, options);
			}

			writer.WriteEndObject();
		}
	}
}