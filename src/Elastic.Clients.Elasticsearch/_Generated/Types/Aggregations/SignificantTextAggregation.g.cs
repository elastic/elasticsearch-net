// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Aggregations;

internal sealed partial class SignificantTextAggregationConverter : System.Text.Json.Serialization.JsonConverter<SignificantTextAggregation>
{
	private static readonly System.Text.Json.JsonEncodedText PropBackgroundFilter = System.Text.Json.JsonEncodedText.Encode("background_filter");
	private static readonly System.Text.Json.JsonEncodedText PropChiSquare = System.Text.Json.JsonEncodedText.Encode("chi_square");
	private static readonly System.Text.Json.JsonEncodedText PropExclude = System.Text.Json.JsonEncodedText.Encode("exclude");
	private static readonly System.Text.Json.JsonEncodedText PropExecutionHint = System.Text.Json.JsonEncodedText.Encode("execution_hint");
	private static readonly System.Text.Json.JsonEncodedText PropField = System.Text.Json.JsonEncodedText.Encode("field");
	private static readonly System.Text.Json.JsonEncodedText PropFilterDuplicateText = System.Text.Json.JsonEncodedText.Encode("filter_duplicate_text");
	private static readonly System.Text.Json.JsonEncodedText PropGnd = System.Text.Json.JsonEncodedText.Encode("gnd");
	private static readonly System.Text.Json.JsonEncodedText PropInclude = System.Text.Json.JsonEncodedText.Encode("include");
	private static readonly System.Text.Json.JsonEncodedText PropJlh = System.Text.Json.JsonEncodedText.Encode("jlh");
	private static readonly System.Text.Json.JsonEncodedText PropMinDocCount = System.Text.Json.JsonEncodedText.Encode("min_doc_count");
	private static readonly System.Text.Json.JsonEncodedText PropMutualInformation = System.Text.Json.JsonEncodedText.Encode("mutual_information");
	private static readonly System.Text.Json.JsonEncodedText PropPercentage = System.Text.Json.JsonEncodedText.Encode("percentage");
	private static readonly System.Text.Json.JsonEncodedText PropScriptHeuristic = System.Text.Json.JsonEncodedText.Encode("script_heuristic");
	private static readonly System.Text.Json.JsonEncodedText PropShardMinDocCount = System.Text.Json.JsonEncodedText.Encode("shard_min_doc_count");
	private static readonly System.Text.Json.JsonEncodedText PropShardSize = System.Text.Json.JsonEncodedText.Encode("shard_size");
	private static readonly System.Text.Json.JsonEncodedText PropSize = System.Text.Json.JsonEncodedText.Encode("size");
	private static readonly System.Text.Json.JsonEncodedText PropSourceFields = System.Text.Json.JsonEncodedText.Encode("source_fields");

	public override SignificantTextAggregation Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.Query?> propBackgroundFilter = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic?> propChiSquare = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.TermsExclude?> propExclude = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint?> propExecutionHint = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propField = default;
		LocalJsonValue<bool?> propFilterDuplicateText = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic?> propGnd = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.TermsInclude?> propInclude = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.EmptyObject?> propJlh = default;
		LocalJsonValue<long?> propMinDocCount = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic?> propMutualInformation = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic?> propPercentage = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic?> propScriptHeuristic = default;
		LocalJsonValue<long?> propShardMinDocCount = default;
		LocalJsonValue<int?> propShardSize = default;
		LocalJsonValue<int?> propSize = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propSourceFields = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBackgroundFilter.TryReadProperty(ref reader, options, PropBackgroundFilter, null))
			{
				continue;
			}

			if (propChiSquare.TryReadProperty(ref reader, options, PropChiSquare, null))
			{
				continue;
			}

			if (propExclude.TryReadProperty(ref reader, options, PropExclude, null))
			{
				continue;
			}

			if (propExecutionHint.TryReadProperty(ref reader, options, PropExecutionHint, null))
			{
				continue;
			}

			if (propField.TryReadProperty(ref reader, options, PropField, null))
			{
				continue;
			}

			if (propFilterDuplicateText.TryReadProperty(ref reader, options, PropFilterDuplicateText, null))
			{
				continue;
			}

			if (propGnd.TryReadProperty(ref reader, options, PropGnd, null))
			{
				continue;
			}

			if (propInclude.TryReadProperty(ref reader, options, PropInclude, null))
			{
				continue;
			}

			if (propJlh.TryReadProperty(ref reader, options, PropJlh, null))
			{
				continue;
			}

			if (propMinDocCount.TryReadProperty(ref reader, options, PropMinDocCount, null))
			{
				continue;
			}

			if (propMutualInformation.TryReadProperty(ref reader, options, PropMutualInformation, null))
			{
				continue;
			}

			if (propPercentage.TryReadProperty(ref reader, options, PropPercentage, null))
			{
				continue;
			}

			if (propScriptHeuristic.TryReadProperty(ref reader, options, PropScriptHeuristic, null))
			{
				continue;
			}

			if (propShardMinDocCount.TryReadProperty(ref reader, options, PropShardMinDocCount, null))
			{
				continue;
			}

			if (propShardSize.TryReadProperty(ref reader, options, PropShardSize, null))
			{
				continue;
			}

			if (propSize.TryReadProperty(ref reader, options, PropSize, null))
			{
				continue;
			}

			if (propSourceFields.TryReadProperty(ref reader, options, PropSourceFields, static Elastic.Clients.Elasticsearch.Fields? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, typeof(SingleOrManyFieldsMarker))))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new SignificantTextAggregation
		{
			BackgroundFilter = propBackgroundFilter.Value
,
			ChiSquare = propChiSquare.Value
,
			Exclude = propExclude.Value
,
			ExecutionHint = propExecutionHint.Value
,
			Field = propField.Value
,
			FilterDuplicateText = propFilterDuplicateText.Value
,
			Gnd = propGnd.Value
,
			Include = propInclude.Value
,
			Jlh = propJlh.Value
,
			MinDocCount = propMinDocCount.Value
,
			MutualInformation = propMutualInformation.Value
,
			Percentage = propPercentage.Value
,
			ScriptHeuristic = propScriptHeuristic.Value
,
			ShardMinDocCount = propShardMinDocCount.Value
,
			ShardSize = propShardSize.Value
,
			Size = propSize.Value
,
			SourceFields = propSourceFields.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, SignificantTextAggregation value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBackgroundFilter, value.BackgroundFilter, null, null);
		writer.WriteProperty(options, PropChiSquare, value.ChiSquare, null, null);
		writer.WriteProperty(options, PropExclude, value.Exclude, null, null);
		writer.WriteProperty(options, PropExecutionHint, value.ExecutionHint, null, null);
		writer.WriteProperty(options, PropField, value.Field, null, null);
		writer.WriteProperty(options, PropFilterDuplicateText, value.FilterDuplicateText, null, null);
		writer.WriteProperty(options, PropGnd, value.Gnd, null, null);
		writer.WriteProperty(options, PropInclude, value.Include, null, null);
		writer.WriteProperty(options, PropJlh, value.Jlh, null, null);
		writer.WriteProperty(options, PropMinDocCount, value.MinDocCount, null, null);
		writer.WriteProperty(options, PropMutualInformation, value.MutualInformation, null, null);
		writer.WriteProperty(options, PropPercentage, value.Percentage, null, null);
		writer.WriteProperty(options, PropScriptHeuristic, value.ScriptHeuristic, null, null);
		writer.WriteProperty(options, PropShardMinDocCount, value.ShardMinDocCount, null, null);
		writer.WriteProperty(options, PropShardSize, value.ShardSize, null, null);
		writer.WriteProperty(options, PropSize, value.Size, null, null);
		writer.WriteProperty(options, PropSourceFields, value.SourceFields, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields? v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, v, typeof(SingleOrManyFieldsMarker)));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(SignificantTextAggregationConverter))]
public sealed partial class SignificantTextAggregation
{
	/// <summary>
	/// <para>
	/// A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.QueryDsl.Query? BackgroundFilter { get; set; }

	/// <summary>
	/// <para>
	/// Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic? ChiSquare { get; set; }

	/// <summary>
	/// <para>
	/// Values to exclude.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.TermsExclude? Exclude { get; set; }

	/// <summary>
	/// <para>
	/// Determines whether the aggregation will use field values directly or global ordinals.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? Field { get; set; }

	/// <summary>
	/// <para>
	/// Whether to out duplicate text to deal with noisy data.
	/// </para>
	/// </summary>
	public bool? FilterDuplicateText { get; set; }

	/// <summary>
	/// <para>
	/// Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic? Gnd { get; set; }

	/// <summary>
	/// <para>
	/// Values to include.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.TermsInclude? Include { get; set; }

	/// <summary>
	/// <para>
	/// Use JLH score as the significance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.EmptyObject? Jlh { get; set; }

	/// <summary>
	/// <para>
	/// Only return values that are found in more than <c>min_doc_count</c> hits.
	/// </para>
	/// </summary>
	public long? MinDocCount { get; set; }

	/// <summary>
	/// <para>
	/// Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic? MutualInformation { get; set; }

	/// <summary>
	/// <para>
	/// A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic? Percentage { get; set; }

	/// <summary>
	/// <para>
	/// Customized score, implemented via a script.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic? ScriptHeuristic { get; set; }

	/// <summary>
	/// <para>
	/// Regulates the certainty a shard has if the values should actually be added to the candidate list or not with respect to the min_doc_count.
	/// Values will only be considered if their local shard frequency within the set is higher than the <c>shard_min_doc_count</c>.
	/// </para>
	/// </summary>
	public long? ShardMinDocCount { get; set; }

	/// <summary>
	/// <para>
	/// The number of candidate terms produced by each shard.
	/// By default, <c>shard_size</c> will be automatically estimated based on the number of shards and the <c>size</c> parameter.
	/// </para>
	/// </summary>
	public int? ShardSize { get; set; }

	/// <summary>
	/// <para>
	/// The number of buckets returned out of the overall terms list.
	/// </para>
	/// </summary>
	public int? Size { get; set; }

	/// <summary>
	/// <para>
	/// Overrides the JSON <c>_source</c> fields from which text will be analyzed.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Fields? SourceFields { get; set; }

	public static implicit operator Elastic.Clients.Elasticsearch.Aggregations.Aggregation(SignificantTextAggregation significantTextAggregation) => Elastic.Clients.Elasticsearch.Aggregations.Aggregation.SignificantText(significantTextAggregation);
}

public sealed partial class SignificantTextAggregationDescriptor<TDocument> : SerializableDescriptor<SignificantTextAggregationDescriptor<TDocument>>
{
	internal SignificantTextAggregationDescriptor(Action<SignificantTextAggregationDescriptor<TDocument>> configure) => configure.Invoke(this);

	public SignificantTextAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.QueryDsl.Query? BackgroundFilterValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> BackgroundFilterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> BackgroundFilterDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic? ChiSquareValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor ChiSquareDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor> ChiSquareDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsExclude? ExcludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint? ExecutionHintValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private bool? FilterDuplicateTextValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic? GndValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor GndDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor> GndDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsInclude? IncludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.EmptyObject? JlhValue { get; set; }
	private Elastic.Clients.Elasticsearch.EmptyObjectDescriptor JlhDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor> JlhDescriptorAction { get; set; }
	private long? MinDocCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic? MutualInformationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor MutualInformationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor> MutualInformationDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic? PercentageValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor PercentageDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor> PercentageDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic? ScriptHeuristicValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor ScriptHeuristicDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor> ScriptHeuristicDescriptorAction { get; set; }
	private long? ShardMinDocCountValue { get; set; }
	private int? ShardSizeValue { get; set; }
	private int? SizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? SourceFieldsValue { get; set; }

	/// <summary>
	/// <para>
	/// A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> BackgroundFilter(Elastic.Clients.Elasticsearch.QueryDsl.Query? backgroundFilter)
	{
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterValue = backgroundFilter;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> BackgroundFilter(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> descriptor)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> BackgroundFilter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> configure)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> ChiSquare(Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic? chiSquare)
	{
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = null;
		ChiSquareValue = chiSquare;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> ChiSquare(Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor descriptor)
	{
		ChiSquareValue = null;
		ChiSquareDescriptorAction = null;
		ChiSquareDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> ChiSquare(Action<Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor> configure)
	{
		ChiSquareValue = null;
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Values to exclude.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Exclude(Elastic.Clients.Elasticsearch.Aggregations.TermsExclude? exclude)
	{
		ExcludeValue = exclude;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Determines whether the aggregation will use field values directly or global ordinals.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> ExecutionHint(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint? executionHint)
	{
		ExecutionHintValue = executionHint;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Field(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether to out duplicate text to deal with noisy data.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> FilterDuplicateText(bool? filterDuplicateText = true)
	{
		FilterDuplicateTextValue = filterDuplicateText;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Gnd(Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic? gnd)
	{
		GndDescriptor = null;
		GndDescriptorAction = null;
		GndValue = gnd;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Gnd(Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor descriptor)
	{
		GndValue = null;
		GndDescriptorAction = null;
		GndDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Gnd(Action<Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor> configure)
	{
		GndValue = null;
		GndDescriptor = null;
		GndDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Values to include.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Include(Elastic.Clients.Elasticsearch.Aggregations.TermsInclude? include)
	{
		IncludeValue = include;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use JLH score as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Jlh(Elastic.Clients.Elasticsearch.EmptyObject? jlh)
	{
		JlhDescriptor = null;
		JlhDescriptorAction = null;
		JlhValue = jlh;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Jlh(Elastic.Clients.Elasticsearch.EmptyObjectDescriptor descriptor)
	{
		JlhValue = null;
		JlhDescriptorAction = null;
		JlhDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Jlh(Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor> configure)
	{
		JlhValue = null;
		JlhDescriptor = null;
		JlhDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Only return values that are found in more than <c>min_doc_count</c> hits.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> MinDocCount(long? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> MutualInformation(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic? mutualInformation)
	{
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = null;
		MutualInformationValue = mutualInformation;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> MutualInformation(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor descriptor)
	{
		MutualInformationValue = null;
		MutualInformationDescriptorAction = null;
		MutualInformationDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> MutualInformation(Action<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor> configure)
	{
		MutualInformationValue = null;
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Percentage(Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic? percentage)
	{
		PercentageDescriptor = null;
		PercentageDescriptorAction = null;
		PercentageValue = percentage;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Percentage(Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor descriptor)
	{
		PercentageValue = null;
		PercentageDescriptorAction = null;
		PercentageDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> Percentage(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor> configure)
	{
		PercentageValue = null;
		PercentageDescriptor = null;
		PercentageDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Customized score, implemented via a script.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> ScriptHeuristic(Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic? scriptHeuristic)
	{
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicValue = scriptHeuristic;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> ScriptHeuristic(Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor descriptor)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor<TDocument> ScriptHeuristic(Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor> configure)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Regulates the certainty a shard has if the values should actually be added to the candidate list or not with respect to the min_doc_count.
	/// Values will only be considered if their local shard frequency within the set is higher than the <c>shard_min_doc_count</c>.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> ShardMinDocCount(long? shardMinDocCount)
	{
		ShardMinDocCountValue = shardMinDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of candidate terms produced by each shard.
	/// By default, <c>shard_size</c> will be automatically estimated based on the number of shards and the <c>size</c> parameter.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> ShardSize(int? shardSize)
	{
		ShardSizeValue = shardSize;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of buckets returned out of the overall terms list.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Overrides the JSON <c>_source</c> fields from which text will be analyzed.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor<TDocument> SourceFields(Elastic.Clients.Elasticsearch.Fields? sourceFields)
	{
		SourceFieldsValue = sourceFields;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BackgroundFilterDescriptor is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterDescriptor, options);
		}
		else if (BackgroundFilterDescriptorAction is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>(BackgroundFilterDescriptorAction), options);
		}
		else if (BackgroundFilterValue is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterValue, options);
		}

		if (ChiSquareDescriptor is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareDescriptor, options);
		}
		else if (ChiSquareDescriptorAction is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor(ChiSquareDescriptorAction), options);
		}
		else if (ChiSquareValue is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareValue, options);
		}

		if (ExcludeValue is not null)
		{
			writer.WritePropertyName("exclude");
			JsonSerializer.Serialize(writer, ExcludeValue, options);
		}

		if (ExecutionHintValue is not null)
		{
			writer.WritePropertyName("execution_hint");
			JsonSerializer.Serialize(writer, ExecutionHintValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (FilterDuplicateTextValue.HasValue)
		{
			writer.WritePropertyName("filter_duplicate_text");
			writer.WriteBooleanValue(FilterDuplicateTextValue.Value);
		}

		if (GndDescriptor is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndDescriptor, options);
		}
		else if (GndDescriptorAction is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor(GndDescriptorAction), options);
		}
		else if (GndValue is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndValue, options);
		}

		if (IncludeValue is not null)
		{
			writer.WritePropertyName("include");
			JsonSerializer.Serialize(writer, IncludeValue, options);
		}

		if (JlhDescriptor is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhDescriptor, options);
		}
		else if (JlhDescriptorAction is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.EmptyObjectDescriptor(JlhDescriptorAction), options);
		}
		else if (JlhValue is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MutualInformationDescriptor is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationDescriptor, options);
		}
		else if (MutualInformationDescriptorAction is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor(MutualInformationDescriptorAction), options);
		}
		else if (MutualInformationValue is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationValue, options);
		}

		if (PercentageDescriptor is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageDescriptor, options);
		}
		else if (PercentageDescriptorAction is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor(PercentageDescriptorAction), options);
		}
		else if (PercentageValue is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageValue, options);
		}

		if (ScriptHeuristicDescriptor is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicDescriptor, options);
		}
		else if (ScriptHeuristicDescriptorAction is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor(ScriptHeuristicDescriptorAction), options);
		}
		else if (ScriptHeuristicValue is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicValue, options);
		}

		if (ShardMinDocCountValue.HasValue)
		{
			writer.WritePropertyName("shard_min_doc_count");
			writer.WriteNumberValue(ShardMinDocCountValue.Value);
		}

		if (ShardSizeValue.HasValue)
		{
			writer.WritePropertyName("shard_size");
			writer.WriteNumberValue(ShardSizeValue.Value);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SourceFieldsValue is not null)
		{
			writer.WritePropertyName("source_fields");
			JsonSerializer.Serialize(writer, SourceFieldsValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class SignificantTextAggregationDescriptor : SerializableDescriptor<SignificantTextAggregationDescriptor>
{
	internal SignificantTextAggregationDescriptor(Action<SignificantTextAggregationDescriptor> configure) => configure.Invoke(this);

	public SignificantTextAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.QueryDsl.Query? BackgroundFilterValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor BackgroundFilterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> BackgroundFilterDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic? ChiSquareValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor ChiSquareDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor> ChiSquareDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsExclude? ExcludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint? ExecutionHintValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private bool? FilterDuplicateTextValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic? GndValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor GndDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor> GndDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.TermsInclude? IncludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.EmptyObject? JlhValue { get; set; }
	private Elastic.Clients.Elasticsearch.EmptyObjectDescriptor JlhDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor> JlhDescriptorAction { get; set; }
	private long? MinDocCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic? MutualInformationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor MutualInformationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor> MutualInformationDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic? PercentageValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor PercentageDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor> PercentageDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic? ScriptHeuristicValue { get; set; }
	private Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor ScriptHeuristicDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor> ScriptHeuristicDescriptorAction { get; set; }
	private long? ShardMinDocCountValue { get; set; }
	private int? ShardSizeValue { get; set; }
	private int? SizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? SourceFieldsValue { get; set; }

	/// <summary>
	/// <para>
	/// A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor BackgroundFilter(Elastic.Clients.Elasticsearch.QueryDsl.Query? backgroundFilter)
	{
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterValue = backgroundFilter;
		return Self;
	}

	public SignificantTextAggregationDescriptor BackgroundFilter(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor descriptor)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor BackgroundFilter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> configure)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor ChiSquare(Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristic? chiSquare)
	{
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = null;
		ChiSquareValue = chiSquare;
		return Self;
	}

	public SignificantTextAggregationDescriptor ChiSquare(Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor descriptor)
	{
		ChiSquareValue = null;
		ChiSquareDescriptorAction = null;
		ChiSquareDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor ChiSquare(Action<Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor> configure)
	{
		ChiSquareValue = null;
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Values to exclude.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Exclude(Elastic.Clients.Elasticsearch.Aggregations.TermsExclude? exclude)
	{
		ExcludeValue = exclude;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Determines whether the aggregation will use field values directly or global ordinals.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor ExecutionHint(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationExecutionHint? executionHint)
	{
		ExecutionHintValue = executionHint;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field from which to return significant text.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether to out duplicate text to deal with noisy data.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor FilterDuplicateText(bool? filterDuplicateText = true)
	{
		FilterDuplicateTextValue = filterDuplicateText;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Gnd(Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristic? gnd)
	{
		GndDescriptor = null;
		GndDescriptorAction = null;
		GndValue = gnd;
		return Self;
	}

	public SignificantTextAggregationDescriptor Gnd(Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor descriptor)
	{
		GndValue = null;
		GndDescriptorAction = null;
		GndDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor Gnd(Action<Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor> configure)
	{
		GndValue = null;
		GndDescriptor = null;
		GndDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Values to include.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Include(Elastic.Clients.Elasticsearch.Aggregations.TermsInclude? include)
	{
		IncludeValue = include;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use JLH score as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Jlh(Elastic.Clients.Elasticsearch.EmptyObject? jlh)
	{
		JlhDescriptor = null;
		JlhDescriptorAction = null;
		JlhValue = jlh;
		return Self;
	}

	public SignificantTextAggregationDescriptor Jlh(Elastic.Clients.Elasticsearch.EmptyObjectDescriptor descriptor)
	{
		JlhValue = null;
		JlhDescriptorAction = null;
		JlhDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor Jlh(Action<Elastic.Clients.Elasticsearch.EmptyObjectDescriptor> configure)
	{
		JlhValue = null;
		JlhDescriptor = null;
		JlhDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Only return values that are found in more than <c>min_doc_count</c> hits.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor MinDocCount(long? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor MutualInformation(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic? mutualInformation)
	{
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = null;
		MutualInformationValue = mutualInformation;
		return Self;
	}

	public SignificantTextAggregationDescriptor MutualInformation(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor descriptor)
	{
		MutualInformationValue = null;
		MutualInformationDescriptorAction = null;
		MutualInformationDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor MutualInformation(Action<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor> configure)
	{
		MutualInformationValue = null;
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Percentage(Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristic? percentage)
	{
		PercentageDescriptor = null;
		PercentageDescriptorAction = null;
		PercentageValue = percentage;
		return Self;
	}

	public SignificantTextAggregationDescriptor Percentage(Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor descriptor)
	{
		PercentageValue = null;
		PercentageDescriptorAction = null;
		PercentageDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor Percentage(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor> configure)
	{
		PercentageValue = null;
		PercentageDescriptor = null;
		PercentageDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Customized score, implemented via a script.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor ScriptHeuristic(Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristic? scriptHeuristic)
	{
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicValue = scriptHeuristic;
		return Self;
	}

	public SignificantTextAggregationDescriptor ScriptHeuristic(Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor descriptor)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicDescriptor = descriptor;
		return Self;
	}

	public SignificantTextAggregationDescriptor ScriptHeuristic(Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor> configure)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Regulates the certainty a shard has if the values should actually be added to the candidate list or not with respect to the min_doc_count.
	/// Values will only be considered if their local shard frequency within the set is higher than the <c>shard_min_doc_count</c>.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor ShardMinDocCount(long? shardMinDocCount)
	{
		ShardMinDocCountValue = shardMinDocCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of candidate terms produced by each shard.
	/// By default, <c>shard_size</c> will be automatically estimated based on the number of shards and the <c>size</c> parameter.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor ShardSize(int? shardSize)
	{
		ShardSizeValue = shardSize;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of buckets returned out of the overall terms list.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Overrides the JSON <c>_source</c> fields from which text will be analyzed.
	/// </para>
	/// </summary>
	public SignificantTextAggregationDescriptor SourceFields(Elastic.Clients.Elasticsearch.Fields? sourceFields)
	{
		SourceFieldsValue = sourceFields;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BackgroundFilterDescriptor is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterDescriptor, options);
		}
		else if (BackgroundFilterDescriptorAction is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor(BackgroundFilterDescriptorAction), options);
		}
		else if (BackgroundFilterValue is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterValue, options);
		}

		if (ChiSquareDescriptor is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareDescriptor, options);
		}
		else if (ChiSquareDescriptorAction is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ChiSquareHeuristicDescriptor(ChiSquareDescriptorAction), options);
		}
		else if (ChiSquareValue is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareValue, options);
		}

		if (ExcludeValue is not null)
		{
			writer.WritePropertyName("exclude");
			JsonSerializer.Serialize(writer, ExcludeValue, options);
		}

		if (ExecutionHintValue is not null)
		{
			writer.WritePropertyName("execution_hint");
			JsonSerializer.Serialize(writer, ExecutionHintValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (FilterDuplicateTextValue.HasValue)
		{
			writer.WritePropertyName("filter_duplicate_text");
			writer.WriteBooleanValue(FilterDuplicateTextValue.Value);
		}

		if (GndDescriptor is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndDescriptor, options);
		}
		else if (GndDescriptorAction is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.GoogleNormalizedDistanceHeuristicDescriptor(GndDescriptorAction), options);
		}
		else if (GndValue is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndValue, options);
		}

		if (IncludeValue is not null)
		{
			writer.WritePropertyName("include");
			JsonSerializer.Serialize(writer, IncludeValue, options);
		}

		if (JlhDescriptor is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhDescriptor, options);
		}
		else if (JlhDescriptorAction is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.EmptyObjectDescriptor(JlhDescriptorAction), options);
		}
		else if (JlhValue is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MutualInformationDescriptor is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationDescriptor, options);
		}
		else if (MutualInformationDescriptorAction is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor(MutualInformationDescriptorAction), options);
		}
		else if (MutualInformationValue is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationValue, options);
		}

		if (PercentageDescriptor is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageDescriptor, options);
		}
		else if (PercentageDescriptorAction is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.PercentageScoreHeuristicDescriptor(PercentageDescriptorAction), options);
		}
		else if (PercentageValue is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageValue, options);
		}

		if (ScriptHeuristicDescriptor is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicDescriptor, options);
		}
		else if (ScriptHeuristicDescriptorAction is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Aggregations.ScriptedHeuristicDescriptor(ScriptHeuristicDescriptorAction), options);
		}
		else if (ScriptHeuristicValue is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicValue, options);
		}

		if (ShardMinDocCountValue.HasValue)
		{
			writer.WritePropertyName("shard_min_doc_count");
			writer.WriteNumberValue(ShardMinDocCountValue.Value);
		}

		if (ShardSizeValue.HasValue)
		{
			writer.WritePropertyName("shard_size");
			writer.WriteNumberValue(ShardSizeValue.Value);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SourceFieldsValue is not null)
		{
			writer.WritePropertyName("source_fields");
			JsonSerializer.Serialize(writer, SourceFieldsValue, options);
		}

		writer.WriteEndObject();
	}
}