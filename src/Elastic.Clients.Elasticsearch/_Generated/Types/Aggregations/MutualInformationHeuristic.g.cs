// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Aggregations;

internal sealed partial class MutualInformationHeuristicConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic>
{
	private static readonly System.Text.Json.JsonEncodedText PropBackgroundIsSuperset = System.Text.Json.JsonEncodedText.Encode("background_is_superset");
	private static readonly System.Text.Json.JsonEncodedText PropIncludeNegatives = System.Text.Json.JsonEncodedText.Encode("include_negatives");

	public override Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool?> propBackgroundIsSuperset = default;
		LocalJsonValue<bool?> propIncludeNegatives = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBackgroundIsSuperset.TryReadProperty(ref reader, options, PropBackgroundIsSuperset, null))
			{
				continue;
			}

			if (propIncludeNegatives.TryReadProperty(ref reader, options, PropIncludeNegatives, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			BackgroundIsSuperset = propBackgroundIsSuperset.Value,
			IncludeNegatives = propIncludeNegatives.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBackgroundIsSuperset, value.BackgroundIsSuperset, null, null);
		writer.WriteProperty(options, PropIncludeNegatives, value.IncludeNegatives, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicConverter))]
public sealed partial class MutualInformationHeuristic
{
#if NET7_0_OR_GREATER
	public MutualInformationHeuristic()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	public MutualInformationHeuristic()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// Set to <c>false</c> if you defined a custom background filter that represents a different set of documents that you want to compare to.
	/// </para>
	/// </summary>
	public bool? BackgroundIsSuperset { get; set; }

	/// <summary>
	/// <para>
	/// Set to <c>false</c> to filter out the terms that appear less often in the subset than in documents outside the subset.
	/// </para>
	/// </summary>
	public bool? IncludeNegatives { get; set; }
}

public readonly partial struct MutualInformationHeuristicDescriptor
{
	internal Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public MutualInformationHeuristicDescriptor(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public MutualInformationHeuristicDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic instance) => new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// Set to <c>false</c> if you defined a custom background filter that represents a different set of documents that you want to compare to.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor BackgroundIsSuperset(bool? value = true)
	{
		Instance.BackgroundIsSuperset = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Set to <c>false</c> to filter out the terms that appear less often in the subset than in documents outside the subset.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor IncludeNegatives(bool? value = true)
	{
		Instance.IncludeNegatives = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic Build(System.Action<Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor>? action)
	{
		if (action is null)
		{
			return new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
		}

		var builder = new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristicDescriptor(new Elastic.Clients.Elasticsearch.Aggregations.MutualInformationHeuristic(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}