// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	public partial class MutualInformationHeuristic
	{
		[JsonInclude]
		[JsonPropertyName("background_is_superset")]
		public bool? BackgroundIsSuperset { get; set; }

		[JsonInclude]
		[JsonPropertyName("include_negatives")]
		public bool? IncludeNegatives { get; set; }
	}

	public sealed partial class MutualInformationHeuristicDescriptor : DescriptorBase<MutualInformationHeuristicDescriptor>
	{
		public MutualInformationHeuristicDescriptor()
		{
		}

		internal MutualInformationHeuristicDescriptor(Action<MutualInformationHeuristicDescriptor> configure) => configure.Invoke(this);
		internal bool? BackgroundIsSupersetValue { get; private set; }

		internal bool? IncludeNegativesValue { get; private set; }

		public MutualInformationHeuristicDescriptor BackgroundIsSuperset(bool? backgroundIsSuperset = true) => Assign(backgroundIsSuperset, (a, v) => a.BackgroundIsSupersetValue = v);
		public MutualInformationHeuristicDescriptor IncludeNegatives(bool? includeNegatives = true) => Assign(includeNegatives, (a, v) => a.IncludeNegativesValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (BackgroundIsSupersetValue.HasValue)
			{
				writer.WritePropertyName("background_is_superset");
				writer.WriteBooleanValue(BackgroundIsSupersetValue.Value);
			}

			if (IncludeNegativesValue.HasValue)
			{
				writer.WritePropertyName("include_negatives");
				writer.WriteBooleanValue(IncludeNegativesValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}