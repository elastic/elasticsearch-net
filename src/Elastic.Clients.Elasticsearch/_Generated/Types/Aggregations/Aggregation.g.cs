// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Aggregations;

[JsonConverter(typeof(AggregationConverter))]
public sealed partial class Aggregation
{
	internal Aggregation(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantType = variantName;
		Variant = variant;
	}

	internal Aggregation()
	{
	}

	public object Variant { get; internal set; }
	public string VariantType { get; internal set; }

	public static Aggregation AdjacencyMatrix(Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation adjacencyMatrixAggregation) => new Aggregation("adjacency_matrix", adjacencyMatrixAggregation);
	public static Aggregation AutoDateHistogram(Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation autoDateHistogramAggregation) => new Aggregation("auto_date_histogram", autoDateHistogramAggregation);
	public static Aggregation Avg(Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation averageAggregation) => new Aggregation("avg", averageAggregation);
	public static Aggregation AvgBucket(Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation averageBucketAggregation) => new Aggregation("avg_bucket", averageBucketAggregation);
	public static Aggregation Boxplot(Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation boxplotAggregation) => new Aggregation("boxplot", boxplotAggregation);
	public static Aggregation BucketCorrelation(Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregation bucketCorrelationAggregation) => new Aggregation("bucket_correlation", bucketCorrelationAggregation);
	public static Aggregation BucketCountKsTest(Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregation bucketKsAggregation) => new Aggregation("bucket_count_ks_test", bucketKsAggregation);
	public static Aggregation BucketScript(Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation bucketScriptAggregation) => new Aggregation("bucket_script", bucketScriptAggregation);
	public static Aggregation BucketSelector(Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation bucketSelectorAggregation) => new Aggregation("bucket_selector", bucketSelectorAggregation);
	public static Aggregation BucketSort(Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation bucketSortAggregation) => new Aggregation("bucket_sort", bucketSortAggregation);
	public static Aggregation Cardinality(Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation cardinalityAggregation) => new Aggregation("cardinality", cardinalityAggregation);
	public static Aggregation CategorizeText(Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregation categorizeTextAggregation) => new Aggregation("categorize_text", categorizeTextAggregation);
	public static Aggregation Children(Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation childrenAggregation) => new Aggregation("children", childrenAggregation);
	public static Aggregation Composite(Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation compositeAggregation) => new Aggregation("composite", compositeAggregation);
	public static Aggregation CumulativeCardinality(Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation cumulativeCardinalityAggregation) => new Aggregation("cumulative_cardinality", cumulativeCardinalityAggregation);
	public static Aggregation CumulativeSum(Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation cumulativeSumAggregation) => new Aggregation("cumulative_sum", cumulativeSumAggregation);
	public static Aggregation DateHistogram(Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation dateHistogramAggregation) => new Aggregation("date_histogram", dateHistogramAggregation);
	public static Aggregation DateRange(Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation dateRangeAggregation) => new Aggregation("date_range", dateRangeAggregation);
	public static Aggregation Derivative(Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation derivativeAggregation) => new Aggregation("derivative", derivativeAggregation);
	public static Aggregation DiversifiedSampler(Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation diversifiedSamplerAggregation) => new Aggregation("diversified_sampler", diversifiedSamplerAggregation);
	public static Aggregation ExtendedStats(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation extendedStatsAggregation) => new Aggregation("extended_stats", extendedStatsAggregation);
	public static Aggregation ExtendedStatsBucket(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation extendedStatsBucketAggregation) => new Aggregation("extended_stats_bucket", extendedStatsBucketAggregation);
	public static Aggregation Filter(Elastic.Clients.Elasticsearch.QueryDsl.Query queryContainer) => new Aggregation("filter", queryContainer);
	public static Aggregation Filters(Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation filtersAggregation) => new Aggregation("filters", filtersAggregation);
	public static Aggregation FrequentItemSets(Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregation frequentItemSetsAggregation) => new Aggregation("frequent_item_sets", frequentItemSetsAggregation);
	public static Aggregation GeoBounds(Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation geoBoundsAggregation) => new Aggregation("geo_bounds", geoBoundsAggregation);
	public static Aggregation GeoCentroid(Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation geoCentroidAggregation) => new Aggregation("geo_centroid", geoCentroidAggregation);
	public static Aggregation GeoDistance(Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation geoDistanceAggregation) => new Aggregation("geo_distance", geoDistanceAggregation);
	public static Aggregation GeohashGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregation geohashGridAggregation) => new Aggregation("geohash_grid", geohashGridAggregation);
	public static Aggregation GeohexGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregation geohexGridAggregation) => new Aggregation("geohex_grid", geohexGridAggregation);
	public static Aggregation GeoLine(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => new Aggregation("geo_line", geoLineAggregation);
	public static Aggregation GeotileGrid(Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregation geotileGridAggregation) => new Aggregation("geotile_grid", geotileGridAggregation);
	public static Aggregation Global(Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation globalAggregation) => new Aggregation("global", globalAggregation);
	public static Aggregation Histogram(Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation histogramAggregation) => new Aggregation("histogram", histogramAggregation);
	public static Aggregation Inference(Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation inferenceAggregation) => new Aggregation("inference", inferenceAggregation);
	public static Aggregation IpPrefix(Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregation ipPrefixAggregation) => new Aggregation("ip_prefix", ipPrefixAggregation);
	public static Aggregation IpRange(Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation ipRangeAggregation) => new Aggregation("ip_range", ipRangeAggregation);
	public static Aggregation Line(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => new Aggregation("line", geoLineAggregation);
	public static Aggregation MatrixStats(Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation matrixStatsAggregation) => new Aggregation("matrix_stats", matrixStatsAggregation);
	public static Aggregation Max(Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation maxAggregation) => new Aggregation("max", maxAggregation);
	public static Aggregation MaxBucket(Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation maxBucketAggregation) => new Aggregation("max_bucket", maxBucketAggregation);
	public static Aggregation MedianAbsoluteDeviation(Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation medianAbsoluteDeviationAggregation) => new Aggregation("median_absolute_deviation", medianAbsoluteDeviationAggregation);
	public static Aggregation Min(Elastic.Clients.Elasticsearch.Aggregations.MinAggregation minAggregation) => new Aggregation("min", minAggregation);
	public static Aggregation MinBucket(Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation minBucketAggregation) => new Aggregation("min_bucket", minBucketAggregation);
	public static Aggregation Missing(Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation missingAggregation) => new Aggregation("missing", missingAggregation);
	public static Aggregation MovingFn(Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation movingFunctionAggregation) => new Aggregation("moving_fn", movingFunctionAggregation);
	public static Aggregation MovingPercentiles(Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation movingPercentilesAggregation) => new Aggregation("moving_percentiles", movingPercentilesAggregation);
	public static Aggregation MultiTerms(Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation multiTermsAggregation) => new Aggregation("multi_terms", multiTermsAggregation);
	public static Aggregation Nested(Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation nestedAggregation) => new Aggregation("nested", nestedAggregation);
	public static Aggregation Normalize(Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation normalizeAggregation) => new Aggregation("normalize", normalizeAggregation);
	public static Aggregation Parent(Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation parentAggregation) => new Aggregation("parent", parentAggregation);
	public static Aggregation PercentileRanks(Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation percentileRanksAggregation) => new Aggregation("percentile_ranks", percentileRanksAggregation);
	public static Aggregation Percentiles(Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation percentilesAggregation) => new Aggregation("percentiles", percentilesAggregation);
	public static Aggregation PercentilesBucket(Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation percentilesBucketAggregation) => new Aggregation("percentiles_bucket", percentilesBucketAggregation);
	public static Aggregation RandomSampler(Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregation randomSamplerAggregation) => new Aggregation("random_sampler", randomSamplerAggregation);
	public static Aggregation Range(Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation rangeAggregation) => new Aggregation("range", rangeAggregation);
	public static Aggregation RareTerms(Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation rareTermsAggregation) => new Aggregation("rare_terms", rareTermsAggregation);
	public static Aggregation Rate(Elastic.Clients.Elasticsearch.Aggregations.RateAggregation rateAggregation) => new Aggregation("rate", rateAggregation);
	public static Aggregation ReverseNested(Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation reverseNestedAggregation) => new Aggregation("reverse_nested", reverseNestedAggregation);
	public static Aggregation Sampler(Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation samplerAggregation) => new Aggregation("sampler", samplerAggregation);
	public static Aggregation ScriptedMetric(Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation scriptedMetricAggregation) => new Aggregation("scripted_metric", scriptedMetricAggregation);
	public static Aggregation SerialDiff(Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation serialDifferencingAggregation) => new Aggregation("serial_diff", serialDifferencingAggregation);
	public static Aggregation SignificantTerms(Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation significantTermsAggregation) => new Aggregation("significant_terms", significantTermsAggregation);
	public static Aggregation SignificantText(Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation significantTextAggregation) => new Aggregation("significant_text", significantTextAggregation);
	public static Aggregation Stats(Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation statsAggregation) => new Aggregation("stats", statsAggregation);
	public static Aggregation StatsBucket(Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation statsBucketAggregation) => new Aggregation("stats_bucket", statsBucketAggregation);
	public static Aggregation StringStats(Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation stringStatsAggregation) => new Aggregation("string_stats", stringStatsAggregation);
	public static Aggregation Sum(Elastic.Clients.Elasticsearch.Aggregations.SumAggregation sumAggregation) => new Aggregation("sum", sumAggregation);
	public static Aggregation SumBucket(Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation sumBucketAggregation) => new Aggregation("sum_bucket", sumBucketAggregation);
	public static Aggregation Terms(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation termsAggregation) => new Aggregation("terms", termsAggregation);
	public static Aggregation TimeSeries(Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregation timeSeriesAggregation) => new Aggregation("time_series", timeSeriesAggregation);
	public static Aggregation TopHits(Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation topHitsAggregation) => new Aggregation("top_hits", topHitsAggregation);
	public static Aggregation TopMetrics(Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation topMetricsAggregation) => new Aggregation("top_metrics", topMetricsAggregation);
	public static Aggregation TTest(Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation tTestAggregation) => new Aggregation("t_test", tTestAggregation);
	public static Aggregation ValueCount(Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation valueCountAggregation) => new Aggregation("value_count", valueCountAggregation);
	public static Aggregation VariableWidthHistogram(Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation variableWidthHistogramAggregation) => new Aggregation("variable_width_histogram", variableWidthHistogramAggregation);
	public static Aggregation WeightedAvg(Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation weightedAverageAggregation) => new Aggregation("weighted_avg", weightedAverageAggregation);

	/// <summary>
	/// <para>
	/// Sub-aggregations for this aggregation.
	/// Only applies to bucket aggregations.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("aggregations")]
	public IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? Aggregations { get; set; }
	[JsonInclude, JsonPropertyName("meta")]
	public IDictionary<string, object>? Meta { get; set; }

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class AggregationConverter : System.Text.Json.Serialization.JsonConverter<Aggregation>
{
	private static readonly System.Text.Json.JsonEncodedText PropAggregations = System.Text.Json.JsonEncodedText.Encode("aggregations");
	private static readonly System.Text.Json.JsonEncodedText PropAggregations1 = System.Text.Json.JsonEncodedText.Encode("aggs");
	private static readonly System.Text.Json.JsonEncodedText PropMeta = System.Text.Json.JsonEncodedText.Encode("meta");
	private static readonly System.Text.Json.JsonEncodedText VariantAdjacencyMatrix = System.Text.Json.JsonEncodedText.Encode("adjacency_matrix");
	private static readonly System.Text.Json.JsonEncodedText VariantAutoDateHistogram = System.Text.Json.JsonEncodedText.Encode("auto_date_histogram");
	private static readonly System.Text.Json.JsonEncodedText VariantAvg = System.Text.Json.JsonEncodedText.Encode("avg");
	private static readonly System.Text.Json.JsonEncodedText VariantAvgBucket = System.Text.Json.JsonEncodedText.Encode("avg_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantBoxplot = System.Text.Json.JsonEncodedText.Encode("boxplot");
	private static readonly System.Text.Json.JsonEncodedText VariantBucketCorrelation = System.Text.Json.JsonEncodedText.Encode("bucket_correlation");
	private static readonly System.Text.Json.JsonEncodedText VariantBucketCountKsTest = System.Text.Json.JsonEncodedText.Encode("bucket_count_ks_test");
	private static readonly System.Text.Json.JsonEncodedText VariantBucketScript = System.Text.Json.JsonEncodedText.Encode("bucket_script");
	private static readonly System.Text.Json.JsonEncodedText VariantBucketSelector = System.Text.Json.JsonEncodedText.Encode("bucket_selector");
	private static readonly System.Text.Json.JsonEncodedText VariantBucketSort = System.Text.Json.JsonEncodedText.Encode("bucket_sort");
	private static readonly System.Text.Json.JsonEncodedText VariantCardinality = System.Text.Json.JsonEncodedText.Encode("cardinality");
	private static readonly System.Text.Json.JsonEncodedText VariantCategorizeText = System.Text.Json.JsonEncodedText.Encode("categorize_text");
	private static readonly System.Text.Json.JsonEncodedText VariantChildren = System.Text.Json.JsonEncodedText.Encode("children");
	private static readonly System.Text.Json.JsonEncodedText VariantComposite = System.Text.Json.JsonEncodedText.Encode("composite");
	private static readonly System.Text.Json.JsonEncodedText VariantCumulativeCardinality = System.Text.Json.JsonEncodedText.Encode("cumulative_cardinality");
	private static readonly System.Text.Json.JsonEncodedText VariantCumulativeSum = System.Text.Json.JsonEncodedText.Encode("cumulative_sum");
	private static readonly System.Text.Json.JsonEncodedText VariantDateHistogram = System.Text.Json.JsonEncodedText.Encode("date_histogram");
	private static readonly System.Text.Json.JsonEncodedText VariantDateRange = System.Text.Json.JsonEncodedText.Encode("date_range");
	private static readonly System.Text.Json.JsonEncodedText VariantDerivative = System.Text.Json.JsonEncodedText.Encode("derivative");
	private static readonly System.Text.Json.JsonEncodedText VariantDiversifiedSampler = System.Text.Json.JsonEncodedText.Encode("diversified_sampler");
	private static readonly System.Text.Json.JsonEncodedText VariantExtendedStats = System.Text.Json.JsonEncodedText.Encode("extended_stats");
	private static readonly System.Text.Json.JsonEncodedText VariantExtendedStatsBucket = System.Text.Json.JsonEncodedText.Encode("extended_stats_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantFilter = System.Text.Json.JsonEncodedText.Encode("filter");
	private static readonly System.Text.Json.JsonEncodedText VariantFilters = System.Text.Json.JsonEncodedText.Encode("filters");
	private static readonly System.Text.Json.JsonEncodedText VariantFrequentItemSets = System.Text.Json.JsonEncodedText.Encode("frequent_item_sets");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoBounds = System.Text.Json.JsonEncodedText.Encode("geo_bounds");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoCentroid = System.Text.Json.JsonEncodedText.Encode("geo_centroid");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoDistance = System.Text.Json.JsonEncodedText.Encode("geo_distance");
	private static readonly System.Text.Json.JsonEncodedText VariantGeohashGrid = System.Text.Json.JsonEncodedText.Encode("geohash_grid");
	private static readonly System.Text.Json.JsonEncodedText VariantGeohexGrid = System.Text.Json.JsonEncodedText.Encode("geohex_grid");
	private static readonly System.Text.Json.JsonEncodedText VariantGeoLine = System.Text.Json.JsonEncodedText.Encode("geo_line");
	private static readonly System.Text.Json.JsonEncodedText VariantGeotileGrid = System.Text.Json.JsonEncodedText.Encode("geotile_grid");
	private static readonly System.Text.Json.JsonEncodedText VariantGlobal = System.Text.Json.JsonEncodedText.Encode("global");
	private static readonly System.Text.Json.JsonEncodedText VariantHistogram = System.Text.Json.JsonEncodedText.Encode("histogram");
	private static readonly System.Text.Json.JsonEncodedText VariantInference = System.Text.Json.JsonEncodedText.Encode("inference");
	private static readonly System.Text.Json.JsonEncodedText VariantIpPrefix = System.Text.Json.JsonEncodedText.Encode("ip_prefix");
	private static readonly System.Text.Json.JsonEncodedText VariantIpRange = System.Text.Json.JsonEncodedText.Encode("ip_range");
	private static readonly System.Text.Json.JsonEncodedText VariantLine = System.Text.Json.JsonEncodedText.Encode("line");
	private static readonly System.Text.Json.JsonEncodedText VariantMatrixStats = System.Text.Json.JsonEncodedText.Encode("matrix_stats");
	private static readonly System.Text.Json.JsonEncodedText VariantMax = System.Text.Json.JsonEncodedText.Encode("max");
	private static readonly System.Text.Json.JsonEncodedText VariantMaxBucket = System.Text.Json.JsonEncodedText.Encode("max_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantMedianAbsoluteDeviation = System.Text.Json.JsonEncodedText.Encode("median_absolute_deviation");
	private static readonly System.Text.Json.JsonEncodedText VariantMin = System.Text.Json.JsonEncodedText.Encode("min");
	private static readonly System.Text.Json.JsonEncodedText VariantMinBucket = System.Text.Json.JsonEncodedText.Encode("min_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantMissing = System.Text.Json.JsonEncodedText.Encode("missing");
	private static readonly System.Text.Json.JsonEncodedText VariantMovingFn = System.Text.Json.JsonEncodedText.Encode("moving_fn");
	private static readonly System.Text.Json.JsonEncodedText VariantMovingPercentiles = System.Text.Json.JsonEncodedText.Encode("moving_percentiles");
	private static readonly System.Text.Json.JsonEncodedText VariantMultiTerms = System.Text.Json.JsonEncodedText.Encode("multi_terms");
	private static readonly System.Text.Json.JsonEncodedText VariantNested = System.Text.Json.JsonEncodedText.Encode("nested");
	private static readonly System.Text.Json.JsonEncodedText VariantNormalize = System.Text.Json.JsonEncodedText.Encode("normalize");
	private static readonly System.Text.Json.JsonEncodedText VariantParent = System.Text.Json.JsonEncodedText.Encode("parent");
	private static readonly System.Text.Json.JsonEncodedText VariantPercentileRanks = System.Text.Json.JsonEncodedText.Encode("percentile_ranks");
	private static readonly System.Text.Json.JsonEncodedText VariantPercentiles = System.Text.Json.JsonEncodedText.Encode("percentiles");
	private static readonly System.Text.Json.JsonEncodedText VariantPercentilesBucket = System.Text.Json.JsonEncodedText.Encode("percentiles_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantRandomSampler = System.Text.Json.JsonEncodedText.Encode("random_sampler");
	private static readonly System.Text.Json.JsonEncodedText VariantRange = System.Text.Json.JsonEncodedText.Encode("range");
	private static readonly System.Text.Json.JsonEncodedText VariantRareTerms = System.Text.Json.JsonEncodedText.Encode("rare_terms");
	private static readonly System.Text.Json.JsonEncodedText VariantRate = System.Text.Json.JsonEncodedText.Encode("rate");
	private static readonly System.Text.Json.JsonEncodedText VariantReverseNested = System.Text.Json.JsonEncodedText.Encode("reverse_nested");
	private static readonly System.Text.Json.JsonEncodedText VariantSampler = System.Text.Json.JsonEncodedText.Encode("sampler");
	private static readonly System.Text.Json.JsonEncodedText VariantScriptedMetric = System.Text.Json.JsonEncodedText.Encode("scripted_metric");
	private static readonly System.Text.Json.JsonEncodedText VariantSerialDiff = System.Text.Json.JsonEncodedText.Encode("serial_diff");
	private static readonly System.Text.Json.JsonEncodedText VariantSignificantTerms = System.Text.Json.JsonEncodedText.Encode("significant_terms");
	private static readonly System.Text.Json.JsonEncodedText VariantSignificantText = System.Text.Json.JsonEncodedText.Encode("significant_text");
	private static readonly System.Text.Json.JsonEncodedText VariantStats = System.Text.Json.JsonEncodedText.Encode("stats");
	private static readonly System.Text.Json.JsonEncodedText VariantStatsBucket = System.Text.Json.JsonEncodedText.Encode("stats_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantStringStats = System.Text.Json.JsonEncodedText.Encode("string_stats");
	private static readonly System.Text.Json.JsonEncodedText VariantSum = System.Text.Json.JsonEncodedText.Encode("sum");
	private static readonly System.Text.Json.JsonEncodedText VariantSumBucket = System.Text.Json.JsonEncodedText.Encode("sum_bucket");
	private static readonly System.Text.Json.JsonEncodedText VariantTerms = System.Text.Json.JsonEncodedText.Encode("terms");
	private static readonly System.Text.Json.JsonEncodedText VariantTimeSeries = System.Text.Json.JsonEncodedText.Encode("time_series");
	private static readonly System.Text.Json.JsonEncodedText VariantTopHits = System.Text.Json.JsonEncodedText.Encode("top_hits");
	private static readonly System.Text.Json.JsonEncodedText VariantTopMetrics = System.Text.Json.JsonEncodedText.Encode("top_metrics");
	private static readonly System.Text.Json.JsonEncodedText VariantTTest = System.Text.Json.JsonEncodedText.Encode("t_test");
	private static readonly System.Text.Json.JsonEncodedText VariantValueCount = System.Text.Json.JsonEncodedText.Encode("value_count");
	private static readonly System.Text.Json.JsonEncodedText VariantVariableWidthHistogram = System.Text.Json.JsonEncodedText.Encode("variable_width_histogram");
	private static readonly System.Text.Json.JsonEncodedText VariantWeightedAvg = System.Text.Json.JsonEncodedText.Encode("weighted_avg");

	public override Aggregation Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>?> propAggregations = default;
		LocalJsonValue<IDictionary<string, object>?> propMeta = default;
		var variantType = string.Empty;
		object? variant = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAggregations.TryReadProperty(ref reader, options, PropAggregations, static IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, null, null)) || propAggregations.TryReadProperty(ref reader, options, PropAggregations1, static IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, null, null)))
			{
				continue;
			}

			if (propMeta.TryReadProperty(ref reader, options, PropMeta, static IDictionary<string, object>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<string, object>(o, null, null)))
			{
				continue;
			}

			if (reader.ValueTextEquals(VariantAdjacencyMatrix))
			{
				variantType = VariantAdjacencyMatrix.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantAutoDateHistogram))
			{
				variantType = VariantAutoDateHistogram.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantAvg))
			{
				variantType = VariantAvg.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantAvgBucket))
			{
				variantType = VariantAvgBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBoxplot))
			{
				variantType = VariantBoxplot.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBucketCorrelation))
			{
				variantType = VariantBucketCorrelation.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBucketCountKsTest))
			{
				variantType = VariantBucketCountKsTest.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBucketScript))
			{
				variantType = VariantBucketScript.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBucketSelector))
			{
				variantType = VariantBucketSelector.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantBucketSort))
			{
				variantType = VariantBucketSort.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCardinality))
			{
				variantType = VariantCardinality.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCategorizeText))
			{
				variantType = VariantCategorizeText.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantChildren))
			{
				variantType = VariantChildren.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantComposite))
			{
				variantType = VariantComposite.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCumulativeCardinality))
			{
				variantType = VariantCumulativeCardinality.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantCumulativeSum))
			{
				variantType = VariantCumulativeSum.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDateHistogram))
			{
				variantType = VariantDateHistogram.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDateRange))
			{
				variantType = VariantDateRange.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDerivative))
			{
				variantType = VariantDerivative.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantDiversifiedSampler))
			{
				variantType = VariantDiversifiedSampler.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantExtendedStats))
			{
				variantType = VariantExtendedStats.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantExtendedStatsBucket))
			{
				variantType = VariantExtendedStatsBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantFilter))
			{
				variantType = VariantFilter.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.QueryDsl.Query?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantFilters))
			{
				variantType = VariantFilters.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantFrequentItemSets))
			{
				variantType = VariantFrequentItemSets.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoBounds))
			{
				variantType = VariantGeoBounds.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoCentroid))
			{
				variantType = VariantGeoCentroid.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoDistance))
			{
				variantType = VariantGeoDistance.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeohashGrid))
			{
				variantType = VariantGeohashGrid.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeohexGrid))
			{
				variantType = VariantGeohexGrid.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeoLine))
			{
				variantType = VariantGeoLine.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGeotileGrid))
			{
				variantType = VariantGeotileGrid.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantGlobal))
			{
				variantType = VariantGlobal.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantHistogram))
			{
				variantType = VariantHistogram.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantInference))
			{
				variantType = VariantInference.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantIpPrefix))
			{
				variantType = VariantIpPrefix.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantIpRange))
			{
				variantType = VariantIpRange.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantLine))
			{
				variantType = VariantLine.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMatrixStats))
			{
				variantType = VariantMatrixStats.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMax))
			{
				variantType = VariantMax.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMaxBucket))
			{
				variantType = VariantMaxBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMedianAbsoluteDeviation))
			{
				variantType = VariantMedianAbsoluteDeviation.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMin))
			{
				variantType = VariantMin.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MinAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMinBucket))
			{
				variantType = VariantMinBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMissing))
			{
				variantType = VariantMissing.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMovingFn))
			{
				variantType = VariantMovingFn.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMovingPercentiles))
			{
				variantType = VariantMovingPercentiles.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantMultiTerms))
			{
				variantType = VariantMultiTerms.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantNested))
			{
				variantType = VariantNested.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantNormalize))
			{
				variantType = VariantNormalize.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantParent))
			{
				variantType = VariantParent.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantPercentileRanks))
			{
				variantType = VariantPercentileRanks.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantPercentiles))
			{
				variantType = VariantPercentiles.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantPercentilesBucket))
			{
				variantType = VariantPercentilesBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRandomSampler))
			{
				variantType = VariantRandomSampler.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRange))
			{
				variantType = VariantRange.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRareTerms))
			{
				variantType = VariantRareTerms.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRate))
			{
				variantType = VariantRate.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.RateAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantReverseNested))
			{
				variantType = VariantReverseNested.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSampler))
			{
				variantType = VariantSampler.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantScriptedMetric))
			{
				variantType = VariantScriptedMetric.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSerialDiff))
			{
				variantType = VariantSerialDiff.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSignificantTerms))
			{
				variantType = VariantSignificantTerms.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSignificantText))
			{
				variantType = VariantSignificantText.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantStats))
			{
				variantType = VariantStats.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantStatsBucket))
			{
				variantType = VariantStatsBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantStringStats))
			{
				variantType = VariantStringStats.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSum))
			{
				variantType = VariantSum.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SumAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantSumBucket))
			{
				variantType = VariantSumBucket.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTerms))
			{
				variantType = VariantTerms.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTimeSeries))
			{
				variantType = VariantTimeSeries.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTopHits))
			{
				variantType = VariantTopHits.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTopMetrics))
			{
				variantType = VariantTopMetrics.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTTest))
			{
				variantType = VariantTTest.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantValueCount))
			{
				variantType = VariantValueCount.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantVariableWidthHistogram))
			{
				variantType = VariantVariableWidthHistogram.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantWeightedAvg))
			{
				variantType = VariantWeightedAvg.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation?>(options, null);
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Aggregation
		{
			VariantType = variantType,
			Variant = variant,
			Aggregations = propAggregations.Value
	,
			Meta = propMeta.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Aggregation value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		switch (value.VariantType)
		{
			case "":
				break;
			case "adjacency_matrix":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation?)value.Variant, null, null);
				break;
			case "auto_date_histogram":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation?)value.Variant, null, null);
				break;
			case "avg":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation?)value.Variant, null, null);
				break;
			case "avg_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation?)value.Variant, null, null);
				break;
			case "boxplot":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation?)value.Variant, null, null);
				break;
			case "bucket_correlation":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregation?)value.Variant, null, null);
				break;
			case "bucket_count_ks_test":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregation?)value.Variant, null, null);
				break;
			case "bucket_script":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation?)value.Variant, null, null);
				break;
			case "bucket_selector":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation?)value.Variant, null, null);
				break;
			case "bucket_sort":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation?)value.Variant, null, null);
				break;
			case "cardinality":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation?)value.Variant, null, null);
				break;
			case "categorize_text":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregation?)value.Variant, null, null);
				break;
			case "children":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation?)value.Variant, null, null);
				break;
			case "composite":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation?)value.Variant, null, null);
				break;
			case "cumulative_cardinality":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation?)value.Variant, null, null);
				break;
			case "cumulative_sum":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation?)value.Variant, null, null);
				break;
			case "date_histogram":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation?)value.Variant, null, null);
				break;
			case "date_range":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation?)value.Variant, null, null);
				break;
			case "derivative":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation?)value.Variant, null, null);
				break;
			case "diversified_sampler":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation?)value.Variant, null, null);
				break;
			case "extended_stats":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation?)value.Variant, null, null);
				break;
			case "extended_stats_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation?)value.Variant, null, null);
				break;
			case "filter":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.QueryDsl.Query?)value.Variant, null, null);
				break;
			case "filters":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation?)value.Variant, null, null);
				break;
			case "frequent_item_sets":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregation?)value.Variant, null, null);
				break;
			case "geo_bounds":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation?)value.Variant, null, null);
				break;
			case "geo_centroid":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation?)value.Variant, null, null);
				break;
			case "geo_distance":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation?)value.Variant, null, null);
				break;
			case "geohash_grid":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregation?)value.Variant, null, null);
				break;
			case "geohex_grid":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregation?)value.Variant, null, null);
				break;
			case "geo_line":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation?)value.Variant, null, null);
				break;
			case "geotile_grid":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregation?)value.Variant, null, null);
				break;
			case "global":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation?)value.Variant, null, null);
				break;
			case "histogram":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation?)value.Variant, null, null);
				break;
			case "inference":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation?)value.Variant, null, null);
				break;
			case "ip_prefix":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregation?)value.Variant, null, null);
				break;
			case "ip_range":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation?)value.Variant, null, null);
				break;
			case "line":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation?)value.Variant, null, null);
				break;
			case "matrix_stats":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation?)value.Variant, null, null);
				break;
			case "max":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation?)value.Variant, null, null);
				break;
			case "max_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation?)value.Variant, null, null);
				break;
			case "median_absolute_deviation":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation?)value.Variant, null, null);
				break;
			case "min":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MinAggregation?)value.Variant, null, null);
				break;
			case "min_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation?)value.Variant, null, null);
				break;
			case "missing":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation?)value.Variant, null, null);
				break;
			case "moving_fn":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation?)value.Variant, null, null);
				break;
			case "moving_percentiles":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation?)value.Variant, null, null);
				break;
			case "multi_terms":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation?)value.Variant, null, null);
				break;
			case "nested":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation?)value.Variant, null, null);
				break;
			case "normalize":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation?)value.Variant, null, null);
				break;
			case "parent":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation?)value.Variant, null, null);
				break;
			case "percentile_ranks":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation?)value.Variant, null, null);
				break;
			case "percentiles":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation?)value.Variant, null, null);
				break;
			case "percentiles_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation?)value.Variant, null, null);
				break;
			case "random_sampler":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregation?)value.Variant, null, null);
				break;
			case "range":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation?)value.Variant, null, null);
				break;
			case "rare_terms":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation?)value.Variant, null, null);
				break;
			case "rate":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.RateAggregation?)value.Variant, null, null);
				break;
			case "reverse_nested":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation?)value.Variant, null, null);
				break;
			case "sampler":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation?)value.Variant, null, null);
				break;
			case "scripted_metric":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation?)value.Variant, null, null);
				break;
			case "serial_diff":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation?)value.Variant, null, null);
				break;
			case "significant_terms":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation?)value.Variant, null, null);
				break;
			case "significant_text":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation?)value.Variant, null, null);
				break;
			case "stats":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation?)value.Variant, null, null);
				break;
			case "stats_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation?)value.Variant, null, null);
				break;
			case "string_stats":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation?)value.Variant, null, null);
				break;
			case "sum":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SumAggregation?)value.Variant, null, null);
				break;
			case "sum_bucket":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation?)value.Variant, null, null);
				break;
			case "terms":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation?)value.Variant, null, null);
				break;
			case "time_series":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregation?)value.Variant, null, null);
				break;
			case "top_hits":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation?)value.Variant, null, null);
				break;
			case "top_metrics":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation?)value.Variant, null, null);
				break;
			case "t_test":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation?)value.Variant, null, null);
				break;
			case "value_count":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation?)value.Variant, null, null);
				break;
			case "variable_width_histogram":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation?)value.Variant, null, null);
				break;
			case "weighted_avg":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation?)value.Variant, null, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.VariantType}' is not supported for type '{nameof(Aggregation)}'.");
		}

		writer.WriteProperty(options, PropAggregations, value.Aggregations, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? v) => w.WriteDictionaryValue<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>(o, v, null, null));
		writer.WriteProperty(options, PropMeta, value.Meta, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<string, object>? v) => w.WriteDictionaryValue<string, object>(o, v, null, null));
		writer.WriteEndObject();
	}
}

public sealed partial class AggregationDescriptor<TDocument> : SerializableDescriptor<AggregationDescriptor<TDocument>>
{
	internal AggregationDescriptor(Action<AggregationDescriptor<TDocument>> configure) => configure.Invoke(this);

	public AggregationDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private AggregationDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private AggregationDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>> AggregationsValue { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }

	/// <summary>
	/// <para>
	/// Sub-aggregations for this aggregation.
	/// Only applies to bucket aggregations.
	/// </para>
	/// </summary>
	public AggregationDescriptor<TDocument> Aggregations(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>> selector)
	{
		AggregationsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>());
		return Self;
	}

	public AggregationDescriptor<TDocument> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public AggregationDescriptor<TDocument> AdjacencyMatrix(Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation adjacencyMatrixAggregation) => Set(adjacencyMatrixAggregation, "adjacency_matrix");
	public AggregationDescriptor<TDocument> AdjacencyMatrix(Action<Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregationDescriptor<TDocument>> configure) => Set(configure, "adjacency_matrix");
	public AggregationDescriptor<TDocument> AutoDateHistogram(Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation autoDateHistogramAggregation) => Set(autoDateHistogramAggregation, "auto_date_histogram");
	public AggregationDescriptor<TDocument> AutoDateHistogram(Action<Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "auto_date_histogram");
	public AggregationDescriptor<TDocument> Avg(Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation averageAggregation) => Set(averageAggregation, "avg");
	public AggregationDescriptor<TDocument> Avg(Action<Elastic.Clients.Elasticsearch.Aggregations.AverageAggregationDescriptor<TDocument>> configure) => Set(configure, "avg");
	public AggregationDescriptor<TDocument> AvgBucket(Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation averageBucketAggregation) => Set(averageBucketAggregation, "avg_bucket");
	public AggregationDescriptor<TDocument> AvgBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregationDescriptor> configure) => Set(configure, "avg_bucket");
	public AggregationDescriptor<TDocument> Boxplot(Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation boxplotAggregation) => Set(boxplotAggregation, "boxplot");
	public AggregationDescriptor<TDocument> Boxplot(Action<Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregationDescriptor<TDocument>> configure) => Set(configure, "boxplot");
	public AggregationDescriptor<TDocument> BucketCorrelation(Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregation bucketCorrelationAggregation) => Set(bucketCorrelationAggregation, "bucket_correlation");
	public AggregationDescriptor<TDocument> BucketCorrelation(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregationDescriptor> configure) => Set(configure, "bucket_correlation");
	public AggregationDescriptor<TDocument> BucketCountKsTest(Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregation bucketKsAggregation) => Set(bucketKsAggregation, "bucket_count_ks_test");
	public AggregationDescriptor<TDocument> BucketCountKsTest(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregationDescriptor> configure) => Set(configure, "bucket_count_ks_test");
	public AggregationDescriptor<TDocument> BucketScript(Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation bucketScriptAggregation) => Set(bucketScriptAggregation, "bucket_script");
	public AggregationDescriptor<TDocument> BucketScript(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregationDescriptor> configure) => Set(configure, "bucket_script");
	public AggregationDescriptor<TDocument> BucketSelector(Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation bucketSelectorAggregation) => Set(bucketSelectorAggregation, "bucket_selector");
	public AggregationDescriptor<TDocument> BucketSelector(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregationDescriptor> configure) => Set(configure, "bucket_selector");
	public AggregationDescriptor<TDocument> BucketSort(Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation bucketSortAggregation) => Set(bucketSortAggregation, "bucket_sort");
	public AggregationDescriptor<TDocument> BucketSort(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregationDescriptor<TDocument>> configure) => Set(configure, "bucket_sort");
	public AggregationDescriptor<TDocument> Cardinality(Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation cardinalityAggregation) => Set(cardinalityAggregation, "cardinality");
	public AggregationDescriptor<TDocument> Cardinality(Action<Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregationDescriptor<TDocument>> configure) => Set(configure, "cardinality");
	public AggregationDescriptor<TDocument> CategorizeText(Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregation categorizeTextAggregation) => Set(categorizeTextAggregation, "categorize_text");
	public AggregationDescriptor<TDocument> CategorizeText(Action<Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregationDescriptor<TDocument>> configure) => Set(configure, "categorize_text");
	public AggregationDescriptor<TDocument> Children(Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation childrenAggregation) => Set(childrenAggregation, "children");
	public AggregationDescriptor<TDocument> Children(Action<Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregationDescriptor> configure) => Set(configure, "children");
	public AggregationDescriptor<TDocument> Composite(Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation compositeAggregation) => Set(compositeAggregation, "composite");
	public AggregationDescriptor<TDocument> Composite(Action<Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregationDescriptor<TDocument>> configure) => Set(configure, "composite");
	public AggregationDescriptor<TDocument> CumulativeCardinality(Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation cumulativeCardinalityAggregation) => Set(cumulativeCardinalityAggregation, "cumulative_cardinality");
	public AggregationDescriptor<TDocument> CumulativeCardinality(Action<Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregationDescriptor> configure) => Set(configure, "cumulative_cardinality");
	public AggregationDescriptor<TDocument> CumulativeSum(Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation cumulativeSumAggregation) => Set(cumulativeSumAggregation, "cumulative_sum");
	public AggregationDescriptor<TDocument> CumulativeSum(Action<Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregationDescriptor> configure) => Set(configure, "cumulative_sum");
	public AggregationDescriptor<TDocument> DateHistogram(Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation dateHistogramAggregation) => Set(dateHistogramAggregation, "date_histogram");
	public AggregationDescriptor<TDocument> DateHistogram(Action<Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "date_histogram");
	public AggregationDescriptor<TDocument> DateRange(Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation dateRangeAggregation) => Set(dateRangeAggregation, "date_range");
	public AggregationDescriptor<TDocument> DateRange(Action<Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregationDescriptor<TDocument>> configure) => Set(configure, "date_range");
	public AggregationDescriptor<TDocument> Derivative(Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation derivativeAggregation) => Set(derivativeAggregation, "derivative");
	public AggregationDescriptor<TDocument> Derivative(Action<Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregationDescriptor> configure) => Set(configure, "derivative");
	public AggregationDescriptor<TDocument> DiversifiedSampler(Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation diversifiedSamplerAggregation) => Set(diversifiedSamplerAggregation, "diversified_sampler");
	public AggregationDescriptor<TDocument> DiversifiedSampler(Action<Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregationDescriptor<TDocument>> configure) => Set(configure, "diversified_sampler");
	public AggregationDescriptor<TDocument> ExtendedStats(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation extendedStatsAggregation) => Set(extendedStatsAggregation, "extended_stats");
	public AggregationDescriptor<TDocument> ExtendedStats(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregationDescriptor<TDocument>> configure) => Set(configure, "extended_stats");
	public AggregationDescriptor<TDocument> ExtendedStatsBucket(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation extendedStatsBucketAggregation) => Set(extendedStatsBucketAggregation, "extended_stats_bucket");
	public AggregationDescriptor<TDocument> ExtendedStatsBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregationDescriptor> configure) => Set(configure, "extended_stats_bucket");
	public AggregationDescriptor<TDocument> Filter(Elastic.Clients.Elasticsearch.QueryDsl.Query queryContainer) => Set(queryContainer, "filter");
	public AggregationDescriptor<TDocument> Filter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> configure) => Set(configure, "filter");
	public AggregationDescriptor<TDocument> Filters(Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation filtersAggregation) => Set(filtersAggregation, "filters");
	public AggregationDescriptor<TDocument> Filters(Action<Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregationDescriptor<TDocument>> configure) => Set(configure, "filters");
	public AggregationDescriptor<TDocument> FrequentItemSets(Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregation frequentItemSetsAggregation) => Set(frequentItemSetsAggregation, "frequent_item_sets");
	public AggregationDescriptor<TDocument> FrequentItemSets(Action<Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregationDescriptor<TDocument>> configure) => Set(configure, "frequent_item_sets");
	public AggregationDescriptor<TDocument> GeoBounds(Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation geoBoundsAggregation) => Set(geoBoundsAggregation, "geo_bounds");
	public AggregationDescriptor<TDocument> GeoBounds(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregationDescriptor<TDocument>> configure) => Set(configure, "geo_bounds");
	public AggregationDescriptor<TDocument> GeoCentroid(Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation geoCentroidAggregation) => Set(geoCentroidAggregation, "geo_centroid");
	public AggregationDescriptor<TDocument> GeoCentroid(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregationDescriptor<TDocument>> configure) => Set(configure, "geo_centroid");
	public AggregationDescriptor<TDocument> GeoDistance(Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation geoDistanceAggregation) => Set(geoDistanceAggregation, "geo_distance");
	public AggregationDescriptor<TDocument> GeoDistance(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregationDescriptor<TDocument>> configure) => Set(configure, "geo_distance");
	public AggregationDescriptor<TDocument> GeohashGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregation geohashGridAggregation) => Set(geohashGridAggregation, "geohash_grid");
	public AggregationDescriptor<TDocument> GeohashGrid(Action<Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregationDescriptor<TDocument>> configure) => Set(configure, "geohash_grid");
	public AggregationDescriptor<TDocument> GeohexGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregation geohexGridAggregation) => Set(geohexGridAggregation, "geohex_grid");
	public AggregationDescriptor<TDocument> GeohexGrid(Action<Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregationDescriptor<TDocument>> configure) => Set(configure, "geohex_grid");
	public AggregationDescriptor<TDocument> GeoLine(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => Set(geoLineAggregation, "geo_line");
	public AggregationDescriptor<TDocument> GeoLine(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregationDescriptor<TDocument>> configure) => Set(configure, "geo_line");
	public AggregationDescriptor<TDocument> GeotileGrid(Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregation geotileGridAggregation) => Set(geotileGridAggregation, "geotile_grid");
	public AggregationDescriptor<TDocument> GeotileGrid(Action<Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregationDescriptor<TDocument>> configure) => Set(configure, "geotile_grid");
	public AggregationDescriptor<TDocument> Global(Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation globalAggregation) => Set(globalAggregation, "global");
	public AggregationDescriptor<TDocument> Global(Action<Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregationDescriptor> configure) => Set(configure, "global");
	public AggregationDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation histogramAggregation) => Set(histogramAggregation, "histogram");
	public AggregationDescriptor<TDocument> Histogram(Action<Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "histogram");
	public AggregationDescriptor<TDocument> Inference(Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation inferenceAggregation) => Set(inferenceAggregation, "inference");
	public AggregationDescriptor<TDocument> Inference(Action<Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregationDescriptor<TDocument>> configure) => Set(configure, "inference");
	public AggregationDescriptor<TDocument> IpPrefix(Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregation ipPrefixAggregation) => Set(ipPrefixAggregation, "ip_prefix");
	public AggregationDescriptor<TDocument> IpPrefix(Action<Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregationDescriptor<TDocument>> configure) => Set(configure, "ip_prefix");
	public AggregationDescriptor<TDocument> IpRange(Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation ipRangeAggregation) => Set(ipRangeAggregation, "ip_range");
	public AggregationDescriptor<TDocument> IpRange(Action<Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregationDescriptor<TDocument>> configure) => Set(configure, "ip_range");
	public AggregationDescriptor<TDocument> Line(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => Set(geoLineAggregation, "line");
	public AggregationDescriptor<TDocument> Line(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregationDescriptor<TDocument>> configure) => Set(configure, "line");
	public AggregationDescriptor<TDocument> MatrixStats(Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation matrixStatsAggregation) => Set(matrixStatsAggregation, "matrix_stats");
	public AggregationDescriptor<TDocument> MatrixStats(Action<Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregationDescriptor<TDocument>> configure) => Set(configure, "matrix_stats");
	public AggregationDescriptor<TDocument> Max(Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation maxAggregation) => Set(maxAggregation, "max");
	public AggregationDescriptor<TDocument> Max(Action<Elastic.Clients.Elasticsearch.Aggregations.MaxAggregationDescriptor<TDocument>> configure) => Set(configure, "max");
	public AggregationDescriptor<TDocument> MaxBucket(Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation maxBucketAggregation) => Set(maxBucketAggregation, "max_bucket");
	public AggregationDescriptor<TDocument> MaxBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregationDescriptor> configure) => Set(configure, "max_bucket");
	public AggregationDescriptor<TDocument> MedianAbsoluteDeviation(Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation medianAbsoluteDeviationAggregation) => Set(medianAbsoluteDeviationAggregation, "median_absolute_deviation");
	public AggregationDescriptor<TDocument> MedianAbsoluteDeviation(Action<Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregationDescriptor<TDocument>> configure) => Set(configure, "median_absolute_deviation");
	public AggregationDescriptor<TDocument> Min(Elastic.Clients.Elasticsearch.Aggregations.MinAggregation minAggregation) => Set(minAggregation, "min");
	public AggregationDescriptor<TDocument> Min(Action<Elastic.Clients.Elasticsearch.Aggregations.MinAggregationDescriptor<TDocument>> configure) => Set(configure, "min");
	public AggregationDescriptor<TDocument> MinBucket(Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation minBucketAggregation) => Set(minBucketAggregation, "min_bucket");
	public AggregationDescriptor<TDocument> MinBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregationDescriptor> configure) => Set(configure, "min_bucket");
	public AggregationDescriptor<TDocument> Missing(Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation missingAggregation) => Set(missingAggregation, "missing");
	public AggregationDescriptor<TDocument> Missing(Action<Elastic.Clients.Elasticsearch.Aggregations.MissingAggregationDescriptor<TDocument>> configure) => Set(configure, "missing");
	public AggregationDescriptor<TDocument> MovingFn(Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation movingFunctionAggregation) => Set(movingFunctionAggregation, "moving_fn");
	public AggregationDescriptor<TDocument> MovingFn(Action<Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregationDescriptor> configure) => Set(configure, "moving_fn");
	public AggregationDescriptor<TDocument> MovingPercentiles(Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation movingPercentilesAggregation) => Set(movingPercentilesAggregation, "moving_percentiles");
	public AggregationDescriptor<TDocument> MovingPercentiles(Action<Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregationDescriptor> configure) => Set(configure, "moving_percentiles");
	public AggregationDescriptor<TDocument> MultiTerms(Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation multiTermsAggregation) => Set(multiTermsAggregation, "multi_terms");
	public AggregationDescriptor<TDocument> MultiTerms(Action<Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregationDescriptor<TDocument>> configure) => Set(configure, "multi_terms");
	public AggregationDescriptor<TDocument> Nested(Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation nestedAggregation) => Set(nestedAggregation, "nested");
	public AggregationDescriptor<TDocument> Nested(Action<Elastic.Clients.Elasticsearch.Aggregations.NestedAggregationDescriptor<TDocument>> configure) => Set(configure, "nested");
	public AggregationDescriptor<TDocument> Normalize(Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation normalizeAggregation) => Set(normalizeAggregation, "normalize");
	public AggregationDescriptor<TDocument> Normalize(Action<Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregationDescriptor> configure) => Set(configure, "normalize");
	public AggregationDescriptor<TDocument> Parent(Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation parentAggregation) => Set(parentAggregation, "parent");
	public AggregationDescriptor<TDocument> Parent(Action<Elastic.Clients.Elasticsearch.Aggregations.ParentAggregationDescriptor> configure) => Set(configure, "parent");
	public AggregationDescriptor<TDocument> PercentileRanks(Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation percentileRanksAggregation) => Set(percentileRanksAggregation, "percentile_ranks");
	public AggregationDescriptor<TDocument> PercentileRanks(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregationDescriptor<TDocument>> configure) => Set(configure, "percentile_ranks");
	public AggregationDescriptor<TDocument> Percentiles(Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation percentilesAggregation) => Set(percentilesAggregation, "percentiles");
	public AggregationDescriptor<TDocument> Percentiles(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregationDescriptor<TDocument>> configure) => Set(configure, "percentiles");
	public AggregationDescriptor<TDocument> PercentilesBucket(Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation percentilesBucketAggregation) => Set(percentilesBucketAggregation, "percentiles_bucket");
	public AggregationDescriptor<TDocument> PercentilesBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregationDescriptor> configure) => Set(configure, "percentiles_bucket");
	public AggregationDescriptor<TDocument> RandomSampler(Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregation randomSamplerAggregation) => Set(randomSamplerAggregation, "random_sampler");
	public AggregationDescriptor<TDocument> RandomSampler(Action<Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregationDescriptor> configure) => Set(configure, "random_sampler");
	public AggregationDescriptor<TDocument> Range(Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation rangeAggregation) => Set(rangeAggregation, "range");
	public AggregationDescriptor<TDocument> Range(Action<Elastic.Clients.Elasticsearch.Aggregations.RangeAggregationDescriptor<TDocument>> configure) => Set(configure, "range");
	public AggregationDescriptor<TDocument> RareTerms(Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation rareTermsAggregation) => Set(rareTermsAggregation, "rare_terms");
	public AggregationDescriptor<TDocument> RareTerms(Action<Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregationDescriptor<TDocument>> configure) => Set(configure, "rare_terms");
	public AggregationDescriptor<TDocument> Rate(Elastic.Clients.Elasticsearch.Aggregations.RateAggregation rateAggregation) => Set(rateAggregation, "rate");
	public AggregationDescriptor<TDocument> Rate(Action<Elastic.Clients.Elasticsearch.Aggregations.RateAggregationDescriptor<TDocument>> configure) => Set(configure, "rate");
	public AggregationDescriptor<TDocument> ReverseNested(Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation reverseNestedAggregation) => Set(reverseNestedAggregation, "reverse_nested");
	public AggregationDescriptor<TDocument> ReverseNested(Action<Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregationDescriptor<TDocument>> configure) => Set(configure, "reverse_nested");
	public AggregationDescriptor<TDocument> Sampler(Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation samplerAggregation) => Set(samplerAggregation, "sampler");
	public AggregationDescriptor<TDocument> Sampler(Action<Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregationDescriptor> configure) => Set(configure, "sampler");
	public AggregationDescriptor<TDocument> ScriptedMetric(Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation scriptedMetricAggregation) => Set(scriptedMetricAggregation, "scripted_metric");
	public AggregationDescriptor<TDocument> ScriptedMetric(Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregationDescriptor<TDocument>> configure) => Set(configure, "scripted_metric");
	public AggregationDescriptor<TDocument> SerialDiff(Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation serialDifferencingAggregation) => Set(serialDifferencingAggregation, "serial_diff");
	public AggregationDescriptor<TDocument> SerialDiff(Action<Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregationDescriptor> configure) => Set(configure, "serial_diff");
	public AggregationDescriptor<TDocument> SignificantTerms(Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation significantTermsAggregation) => Set(significantTermsAggregation, "significant_terms");
	public AggregationDescriptor<TDocument> SignificantTerms(Action<Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregationDescriptor<TDocument>> configure) => Set(configure, "significant_terms");
	public AggregationDescriptor<TDocument> SignificantText(Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation significantTextAggregation) => Set(significantTextAggregation, "significant_text");
	public AggregationDescriptor<TDocument> SignificantText(Action<Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregationDescriptor<TDocument>> configure) => Set(configure, "significant_text");
	public AggregationDescriptor<TDocument> Stats(Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation statsAggregation) => Set(statsAggregation, "stats");
	public AggregationDescriptor<TDocument> Stats(Action<Elastic.Clients.Elasticsearch.Aggregations.StatsAggregationDescriptor<TDocument>> configure) => Set(configure, "stats");
	public AggregationDescriptor<TDocument> StatsBucket(Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation statsBucketAggregation) => Set(statsBucketAggregation, "stats_bucket");
	public AggregationDescriptor<TDocument> StatsBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregationDescriptor> configure) => Set(configure, "stats_bucket");
	public AggregationDescriptor<TDocument> StringStats(Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation stringStatsAggregation) => Set(stringStatsAggregation, "string_stats");
	public AggregationDescriptor<TDocument> StringStats(Action<Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregationDescriptor<TDocument>> configure) => Set(configure, "string_stats");
	public AggregationDescriptor<TDocument> Sum(Elastic.Clients.Elasticsearch.Aggregations.SumAggregation sumAggregation) => Set(sumAggregation, "sum");
	public AggregationDescriptor<TDocument> Sum(Action<Elastic.Clients.Elasticsearch.Aggregations.SumAggregationDescriptor<TDocument>> configure) => Set(configure, "sum");
	public AggregationDescriptor<TDocument> SumBucket(Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation sumBucketAggregation) => Set(sumBucketAggregation, "sum_bucket");
	public AggregationDescriptor<TDocument> SumBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregationDescriptor> configure) => Set(configure, "sum_bucket");
	public AggregationDescriptor<TDocument> Terms(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation termsAggregation) => Set(termsAggregation, "terms");
	public AggregationDescriptor<TDocument> Terms(Action<Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationDescriptor<TDocument>> configure) => Set(configure, "terms");
	public AggregationDescriptor<TDocument> TimeSeries(Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregation timeSeriesAggregation) => Set(timeSeriesAggregation, "time_series");
	public AggregationDescriptor<TDocument> TimeSeries(Action<Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregationDescriptor> configure) => Set(configure, "time_series");
	public AggregationDescriptor<TDocument> TopHits(Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation topHitsAggregation) => Set(topHitsAggregation, "top_hits");
	public AggregationDescriptor<TDocument> TopHits(Action<Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregationDescriptor<TDocument>> configure) => Set(configure, "top_hits");
	public AggregationDescriptor<TDocument> TopMetrics(Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation topMetricsAggregation) => Set(topMetricsAggregation, "top_metrics");
	public AggregationDescriptor<TDocument> TopMetrics(Action<Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregationDescriptor<TDocument>> configure) => Set(configure, "top_metrics");
	public AggregationDescriptor<TDocument> TTest(Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation tTestAggregation) => Set(tTestAggregation, "t_test");
	public AggregationDescriptor<TDocument> TTest(Action<Elastic.Clients.Elasticsearch.Aggregations.TTestAggregationDescriptor<TDocument>> configure) => Set(configure, "t_test");
	public AggregationDescriptor<TDocument> ValueCount(Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation valueCountAggregation) => Set(valueCountAggregation, "value_count");
	public AggregationDescriptor<TDocument> ValueCount(Action<Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregationDescriptor<TDocument>> configure) => Set(configure, "value_count");
	public AggregationDescriptor<TDocument> VariableWidthHistogram(Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation variableWidthHistogramAggregation) => Set(variableWidthHistogramAggregation, "variable_width_histogram");
	public AggregationDescriptor<TDocument> VariableWidthHistogram(Action<Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "variable_width_histogram");
	public AggregationDescriptor<TDocument> WeightedAvg(Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation weightedAverageAggregation) => Set(weightedAverageAggregation, "weighted_avg");
	public AggregationDescriptor<TDocument> WeightedAvg(Action<Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregationDescriptor<TDocument>> configure) => Set(configure, "weighted_avg");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class AggregationDescriptor : SerializableDescriptor<AggregationDescriptor>
{
	internal AggregationDescriptor(Action<AggregationDescriptor> configure) => configure.Invoke(this);

	public AggregationDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private AggregationDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private AggregationDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor> AggregationsValue { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }

	/// <summary>
	/// <para>
	/// Sub-aggregations for this aggregation.
	/// Only applies to bucket aggregations.
	/// </para>
	/// </summary>
	public AggregationDescriptor Aggregations(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>> selector)
	{
		AggregationsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>());
		return Self;
	}

	public AggregationDescriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public AggregationDescriptor AdjacencyMatrix(Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregation adjacencyMatrixAggregation) => Set(adjacencyMatrixAggregation, "adjacency_matrix");
	public AggregationDescriptor AdjacencyMatrix<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.AdjacencyMatrixAggregationDescriptor> configure) => Set(configure, "adjacency_matrix");
	public AggregationDescriptor AutoDateHistogram(Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregation autoDateHistogramAggregation) => Set(autoDateHistogramAggregation, "auto_date_histogram");
	public AggregationDescriptor AutoDateHistogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.AutoDateHistogramAggregationDescriptor> configure) => Set(configure, "auto_date_histogram");
	public AggregationDescriptor Avg(Elastic.Clients.Elasticsearch.Aggregations.AverageAggregation averageAggregation) => Set(averageAggregation, "avg");
	public AggregationDescriptor Avg<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.AverageAggregationDescriptor> configure) => Set(configure, "avg");
	public AggregationDescriptor AvgBucket(Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregation averageBucketAggregation) => Set(averageBucketAggregation, "avg_bucket");
	public AggregationDescriptor AvgBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.AverageBucketAggregationDescriptor> configure) => Set(configure, "avg_bucket");
	public AggregationDescriptor Boxplot(Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregation boxplotAggregation) => Set(boxplotAggregation, "boxplot");
	public AggregationDescriptor Boxplot<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.BoxplotAggregationDescriptor> configure) => Set(configure, "boxplot");
	public AggregationDescriptor BucketCorrelation(Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregation bucketCorrelationAggregation) => Set(bucketCorrelationAggregation, "bucket_correlation");
	public AggregationDescriptor BucketCorrelation(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketCorrelationAggregationDescriptor> configure) => Set(configure, "bucket_correlation");
	public AggregationDescriptor BucketCountKsTest(Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregation bucketKsAggregation) => Set(bucketKsAggregation, "bucket_count_ks_test");
	public AggregationDescriptor BucketCountKsTest(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketKsAggregationDescriptor> configure) => Set(configure, "bucket_count_ks_test");
	public AggregationDescriptor BucketScript(Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregation bucketScriptAggregation) => Set(bucketScriptAggregation, "bucket_script");
	public AggregationDescriptor BucketScript(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketScriptAggregationDescriptor> configure) => Set(configure, "bucket_script");
	public AggregationDescriptor BucketSelector(Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregation bucketSelectorAggregation) => Set(bucketSelectorAggregation, "bucket_selector");
	public AggregationDescriptor BucketSelector(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketSelectorAggregationDescriptor> configure) => Set(configure, "bucket_selector");
	public AggregationDescriptor BucketSort(Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregation bucketSortAggregation) => Set(bucketSortAggregation, "bucket_sort");
	public AggregationDescriptor BucketSort<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.BucketSortAggregationDescriptor> configure) => Set(configure, "bucket_sort");
	public AggregationDescriptor Cardinality(Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregation cardinalityAggregation) => Set(cardinalityAggregation, "cardinality");
	public AggregationDescriptor Cardinality<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.CardinalityAggregationDescriptor> configure) => Set(configure, "cardinality");
	public AggregationDescriptor CategorizeText(Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregation categorizeTextAggregation) => Set(categorizeTextAggregation, "categorize_text");
	public AggregationDescriptor CategorizeText<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAggregationDescriptor> configure) => Set(configure, "categorize_text");
	public AggregationDescriptor Children(Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregation childrenAggregation) => Set(childrenAggregation, "children");
	public AggregationDescriptor Children(Action<Elastic.Clients.Elasticsearch.Aggregations.ChildrenAggregationDescriptor> configure) => Set(configure, "children");
	public AggregationDescriptor Composite(Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregation compositeAggregation) => Set(compositeAggregation, "composite");
	public AggregationDescriptor Composite<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.CompositeAggregationDescriptor> configure) => Set(configure, "composite");
	public AggregationDescriptor CumulativeCardinality(Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregation cumulativeCardinalityAggregation) => Set(cumulativeCardinalityAggregation, "cumulative_cardinality");
	public AggregationDescriptor CumulativeCardinality(Action<Elastic.Clients.Elasticsearch.Aggregations.CumulativeCardinalityAggregationDescriptor> configure) => Set(configure, "cumulative_cardinality");
	public AggregationDescriptor CumulativeSum(Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregation cumulativeSumAggregation) => Set(cumulativeSumAggregation, "cumulative_sum");
	public AggregationDescriptor CumulativeSum(Action<Elastic.Clients.Elasticsearch.Aggregations.CumulativeSumAggregationDescriptor> configure) => Set(configure, "cumulative_sum");
	public AggregationDescriptor DateHistogram(Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregation dateHistogramAggregation) => Set(dateHistogramAggregation, "date_histogram");
	public AggregationDescriptor DateHistogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.DateHistogramAggregationDescriptor> configure) => Set(configure, "date_histogram");
	public AggregationDescriptor DateRange(Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregation dateRangeAggregation) => Set(dateRangeAggregation, "date_range");
	public AggregationDescriptor DateRange<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.DateRangeAggregationDescriptor> configure) => Set(configure, "date_range");
	public AggregationDescriptor Derivative(Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregation derivativeAggregation) => Set(derivativeAggregation, "derivative");
	public AggregationDescriptor Derivative(Action<Elastic.Clients.Elasticsearch.Aggregations.DerivativeAggregationDescriptor> configure) => Set(configure, "derivative");
	public AggregationDescriptor DiversifiedSampler(Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregation diversifiedSamplerAggregation) => Set(diversifiedSamplerAggregation, "diversified_sampler");
	public AggregationDescriptor DiversifiedSampler<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.DiversifiedSamplerAggregationDescriptor> configure) => Set(configure, "diversified_sampler");
	public AggregationDescriptor ExtendedStats(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregation extendedStatsAggregation) => Set(extendedStatsAggregation, "extended_stats");
	public AggregationDescriptor ExtendedStats<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsAggregationDescriptor> configure) => Set(configure, "extended_stats");
	public AggregationDescriptor ExtendedStatsBucket(Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregation extendedStatsBucketAggregation) => Set(extendedStatsBucketAggregation, "extended_stats_bucket");
	public AggregationDescriptor ExtendedStatsBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.ExtendedStatsBucketAggregationDescriptor> configure) => Set(configure, "extended_stats_bucket");
	public AggregationDescriptor Filter(Elastic.Clients.Elasticsearch.QueryDsl.Query queryContainer) => Set(queryContainer, "filter");
	public AggregationDescriptor Filter<TDocument>(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> configure) => Set(configure, "filter");
	public AggregationDescriptor Filters(Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregation filtersAggregation) => Set(filtersAggregation, "filters");
	public AggregationDescriptor Filters<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.FiltersAggregationDescriptor> configure) => Set(configure, "filters");
	public AggregationDescriptor FrequentItemSets(Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregation frequentItemSetsAggregation) => Set(frequentItemSetsAggregation, "frequent_item_sets");
	public AggregationDescriptor FrequentItemSets<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.FrequentItemSetsAggregationDescriptor> configure) => Set(configure, "frequent_item_sets");
	public AggregationDescriptor GeoBounds(Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregation geoBoundsAggregation) => Set(geoBoundsAggregation, "geo_bounds");
	public AggregationDescriptor GeoBounds<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoBoundsAggregationDescriptor> configure) => Set(configure, "geo_bounds");
	public AggregationDescriptor GeoCentroid(Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregation geoCentroidAggregation) => Set(geoCentroidAggregation, "geo_centroid");
	public AggregationDescriptor GeoCentroid<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoCentroidAggregationDescriptor> configure) => Set(configure, "geo_centroid");
	public AggregationDescriptor GeoDistance(Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregation geoDistanceAggregation) => Set(geoDistanceAggregation, "geo_distance");
	public AggregationDescriptor GeoDistance<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoDistanceAggregationDescriptor> configure) => Set(configure, "geo_distance");
	public AggregationDescriptor GeohashGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregation geohashGridAggregation) => Set(geohashGridAggregation, "geohash_grid");
	public AggregationDescriptor GeohashGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeohashGridAggregationDescriptor> configure) => Set(configure, "geohash_grid");
	public AggregationDescriptor GeohexGrid(Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregation geohexGridAggregation) => Set(geohexGridAggregation, "geohex_grid");
	public AggregationDescriptor GeohexGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeohexGridAggregationDescriptor> configure) => Set(configure, "geohex_grid");
	public AggregationDescriptor GeoLine(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => Set(geoLineAggregation, "geo_line");
	public AggregationDescriptor GeoLine<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregationDescriptor> configure) => Set(configure, "geo_line");
	public AggregationDescriptor GeotileGrid(Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregation geotileGridAggregation) => Set(geotileGridAggregation, "geotile_grid");
	public AggregationDescriptor GeotileGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeotileGridAggregationDescriptor> configure) => Set(configure, "geotile_grid");
	public AggregationDescriptor Global(Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregation globalAggregation) => Set(globalAggregation, "global");
	public AggregationDescriptor Global(Action<Elastic.Clients.Elasticsearch.Aggregations.GlobalAggregationDescriptor> configure) => Set(configure, "global");
	public AggregationDescriptor Histogram(Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregation histogramAggregation) => Set(histogramAggregation, "histogram");
	public AggregationDescriptor Histogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.HistogramAggregationDescriptor> configure) => Set(configure, "histogram");
	public AggregationDescriptor Inference(Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregation inferenceAggregation) => Set(inferenceAggregation, "inference");
	public AggregationDescriptor Inference<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.InferenceAggregationDescriptor> configure) => Set(configure, "inference");
	public AggregationDescriptor IpPrefix(Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregation ipPrefixAggregation) => Set(ipPrefixAggregation, "ip_prefix");
	public AggregationDescriptor IpPrefix<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.IpPrefixAggregationDescriptor> configure) => Set(configure, "ip_prefix");
	public AggregationDescriptor IpRange(Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregation ipRangeAggregation) => Set(ipRangeAggregation, "ip_range");
	public AggregationDescriptor IpRange<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.IpRangeAggregationDescriptor> configure) => Set(configure, "ip_range");
	public AggregationDescriptor Line(Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregation geoLineAggregation) => Set(geoLineAggregation, "line");
	public AggregationDescriptor Line<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.GeoLineAggregationDescriptor> configure) => Set(configure, "line");
	public AggregationDescriptor MatrixStats(Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregation matrixStatsAggregation) => Set(matrixStatsAggregation, "matrix_stats");
	public AggregationDescriptor MatrixStats<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MatrixStatsAggregationDescriptor> configure) => Set(configure, "matrix_stats");
	public AggregationDescriptor Max(Elastic.Clients.Elasticsearch.Aggregations.MaxAggregation maxAggregation) => Set(maxAggregation, "max");
	public AggregationDescriptor Max<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MaxAggregationDescriptor> configure) => Set(configure, "max");
	public AggregationDescriptor MaxBucket(Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregation maxBucketAggregation) => Set(maxBucketAggregation, "max_bucket");
	public AggregationDescriptor MaxBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.MaxBucketAggregationDescriptor> configure) => Set(configure, "max_bucket");
	public AggregationDescriptor MedianAbsoluteDeviation(Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregation medianAbsoluteDeviationAggregation) => Set(medianAbsoluteDeviationAggregation, "median_absolute_deviation");
	public AggregationDescriptor MedianAbsoluteDeviation<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MedianAbsoluteDeviationAggregationDescriptor> configure) => Set(configure, "median_absolute_deviation");
	public AggregationDescriptor Min(Elastic.Clients.Elasticsearch.Aggregations.MinAggregation minAggregation) => Set(minAggregation, "min");
	public AggregationDescriptor Min<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MinAggregationDescriptor> configure) => Set(configure, "min");
	public AggregationDescriptor MinBucket(Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregation minBucketAggregation) => Set(minBucketAggregation, "min_bucket");
	public AggregationDescriptor MinBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.MinBucketAggregationDescriptor> configure) => Set(configure, "min_bucket");
	public AggregationDescriptor Missing(Elastic.Clients.Elasticsearch.Aggregations.MissingAggregation missingAggregation) => Set(missingAggregation, "missing");
	public AggregationDescriptor Missing<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MissingAggregationDescriptor> configure) => Set(configure, "missing");
	public AggregationDescriptor MovingFn(Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregation movingFunctionAggregation) => Set(movingFunctionAggregation, "moving_fn");
	public AggregationDescriptor MovingFn(Action<Elastic.Clients.Elasticsearch.Aggregations.MovingFunctionAggregationDescriptor> configure) => Set(configure, "moving_fn");
	public AggregationDescriptor MovingPercentiles(Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregation movingPercentilesAggregation) => Set(movingPercentilesAggregation, "moving_percentiles");
	public AggregationDescriptor MovingPercentiles(Action<Elastic.Clients.Elasticsearch.Aggregations.MovingPercentilesAggregationDescriptor> configure) => Set(configure, "moving_percentiles");
	public AggregationDescriptor MultiTerms(Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregation multiTermsAggregation) => Set(multiTermsAggregation, "multi_terms");
	public AggregationDescriptor MultiTerms<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.MultiTermsAggregationDescriptor> configure) => Set(configure, "multi_terms");
	public AggregationDescriptor Nested(Elastic.Clients.Elasticsearch.Aggregations.NestedAggregation nestedAggregation) => Set(nestedAggregation, "nested");
	public AggregationDescriptor Nested<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.NestedAggregationDescriptor> configure) => Set(configure, "nested");
	public AggregationDescriptor Normalize(Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregation normalizeAggregation) => Set(normalizeAggregation, "normalize");
	public AggregationDescriptor Normalize(Action<Elastic.Clients.Elasticsearch.Aggregations.NormalizeAggregationDescriptor> configure) => Set(configure, "normalize");
	public AggregationDescriptor Parent(Elastic.Clients.Elasticsearch.Aggregations.ParentAggregation parentAggregation) => Set(parentAggregation, "parent");
	public AggregationDescriptor Parent(Action<Elastic.Clients.Elasticsearch.Aggregations.ParentAggregationDescriptor> configure) => Set(configure, "parent");
	public AggregationDescriptor PercentileRanks(Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregation percentileRanksAggregation) => Set(percentileRanksAggregation, "percentile_ranks");
	public AggregationDescriptor PercentileRanks<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentileRanksAggregationDescriptor> configure) => Set(configure, "percentile_ranks");
	public AggregationDescriptor Percentiles(Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregation percentilesAggregation) => Set(percentilesAggregation, "percentiles");
	public AggregationDescriptor Percentiles<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentilesAggregationDescriptor> configure) => Set(configure, "percentiles");
	public AggregationDescriptor PercentilesBucket(Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregation percentilesBucketAggregation) => Set(percentilesBucketAggregation, "percentiles_bucket");
	public AggregationDescriptor PercentilesBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.PercentilesBucketAggregationDescriptor> configure) => Set(configure, "percentiles_bucket");
	public AggregationDescriptor RandomSampler(Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregation randomSamplerAggregation) => Set(randomSamplerAggregation, "random_sampler");
	public AggregationDescriptor RandomSampler(Action<Elastic.Clients.Elasticsearch.Aggregations.RandomSamplerAggregationDescriptor> configure) => Set(configure, "random_sampler");
	public AggregationDescriptor Range(Elastic.Clients.Elasticsearch.Aggregations.RangeAggregation rangeAggregation) => Set(rangeAggregation, "range");
	public AggregationDescriptor Range<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.RangeAggregationDescriptor> configure) => Set(configure, "range");
	public AggregationDescriptor RareTerms(Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregation rareTermsAggregation) => Set(rareTermsAggregation, "rare_terms");
	public AggregationDescriptor RareTerms<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.RareTermsAggregationDescriptor> configure) => Set(configure, "rare_terms");
	public AggregationDescriptor Rate(Elastic.Clients.Elasticsearch.Aggregations.RateAggregation rateAggregation) => Set(rateAggregation, "rate");
	public AggregationDescriptor Rate<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.RateAggregationDescriptor> configure) => Set(configure, "rate");
	public AggregationDescriptor ReverseNested(Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregation reverseNestedAggregation) => Set(reverseNestedAggregation, "reverse_nested");
	public AggregationDescriptor ReverseNested<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.ReverseNestedAggregationDescriptor> configure) => Set(configure, "reverse_nested");
	public AggregationDescriptor Sampler(Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregation samplerAggregation) => Set(samplerAggregation, "sampler");
	public AggregationDescriptor Sampler(Action<Elastic.Clients.Elasticsearch.Aggregations.SamplerAggregationDescriptor> configure) => Set(configure, "sampler");
	public AggregationDescriptor ScriptedMetric(Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregation scriptedMetricAggregation) => Set(scriptedMetricAggregation, "scripted_metric");
	public AggregationDescriptor ScriptedMetric<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.ScriptedMetricAggregationDescriptor> configure) => Set(configure, "scripted_metric");
	public AggregationDescriptor SerialDiff(Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregation serialDifferencingAggregation) => Set(serialDifferencingAggregation, "serial_diff");
	public AggregationDescriptor SerialDiff(Action<Elastic.Clients.Elasticsearch.Aggregations.SerialDifferencingAggregationDescriptor> configure) => Set(configure, "serial_diff");
	public AggregationDescriptor SignificantTerms(Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregation significantTermsAggregation) => Set(significantTermsAggregation, "significant_terms");
	public AggregationDescriptor SignificantTerms<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.SignificantTermsAggregationDescriptor> configure) => Set(configure, "significant_terms");
	public AggregationDescriptor SignificantText(Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregation significantTextAggregation) => Set(significantTextAggregation, "significant_text");
	public AggregationDescriptor SignificantText<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.SignificantTextAggregationDescriptor> configure) => Set(configure, "significant_text");
	public AggregationDescriptor Stats(Elastic.Clients.Elasticsearch.Aggregations.StatsAggregation statsAggregation) => Set(statsAggregation, "stats");
	public AggregationDescriptor Stats<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.StatsAggregationDescriptor> configure) => Set(configure, "stats");
	public AggregationDescriptor StatsBucket(Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregation statsBucketAggregation) => Set(statsBucketAggregation, "stats_bucket");
	public AggregationDescriptor StatsBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.StatsBucketAggregationDescriptor> configure) => Set(configure, "stats_bucket");
	public AggregationDescriptor StringStats(Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregation stringStatsAggregation) => Set(stringStatsAggregation, "string_stats");
	public AggregationDescriptor StringStats<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.StringStatsAggregationDescriptor> configure) => Set(configure, "string_stats");
	public AggregationDescriptor Sum(Elastic.Clients.Elasticsearch.Aggregations.SumAggregation sumAggregation) => Set(sumAggregation, "sum");
	public AggregationDescriptor Sum<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.SumAggregationDescriptor> configure) => Set(configure, "sum");
	public AggregationDescriptor SumBucket(Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregation sumBucketAggregation) => Set(sumBucketAggregation, "sum_bucket");
	public AggregationDescriptor SumBucket(Action<Elastic.Clients.Elasticsearch.Aggregations.SumBucketAggregationDescriptor> configure) => Set(configure, "sum_bucket");
	public AggregationDescriptor Terms(Elastic.Clients.Elasticsearch.Aggregations.TermsAggregation termsAggregation) => Set(termsAggregation, "terms");
	public AggregationDescriptor Terms<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.TermsAggregationDescriptor> configure) => Set(configure, "terms");
	public AggregationDescriptor TimeSeries(Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregation timeSeriesAggregation) => Set(timeSeriesAggregation, "time_series");
	public AggregationDescriptor TimeSeries(Action<Elastic.Clients.Elasticsearch.Aggregations.TimeSeriesAggregationDescriptor> configure) => Set(configure, "time_series");
	public AggregationDescriptor TopHits(Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregation topHitsAggregation) => Set(topHitsAggregation, "top_hits");
	public AggregationDescriptor TopHits<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.TopHitsAggregationDescriptor> configure) => Set(configure, "top_hits");
	public AggregationDescriptor TopMetrics(Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregation topMetricsAggregation) => Set(topMetricsAggregation, "top_metrics");
	public AggregationDescriptor TopMetrics<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.TopMetricsAggregationDescriptor> configure) => Set(configure, "top_metrics");
	public AggregationDescriptor TTest(Elastic.Clients.Elasticsearch.Aggregations.TTestAggregation tTestAggregation) => Set(tTestAggregation, "t_test");
	public AggregationDescriptor TTest<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.TTestAggregationDescriptor> configure) => Set(configure, "t_test");
	public AggregationDescriptor ValueCount(Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregation valueCountAggregation) => Set(valueCountAggregation, "value_count");
	public AggregationDescriptor ValueCount<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.ValueCountAggregationDescriptor> configure) => Set(configure, "value_count");
	public AggregationDescriptor VariableWidthHistogram(Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregation variableWidthHistogramAggregation) => Set(variableWidthHistogramAggregation, "variable_width_histogram");
	public AggregationDescriptor VariableWidthHistogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.VariableWidthHistogramAggregationDescriptor> configure) => Set(configure, "variable_width_histogram");
	public AggregationDescriptor WeightedAvg(Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregation weightedAverageAggregation) => Set(weightedAverageAggregation, "weighted_avg");
	public AggregationDescriptor WeightedAvg<TDocument>(Action<Elastic.Clients.Elasticsearch.Aggregations.WeightedAverageAggregationDescriptor> configure) => Set(configure, "weighted_avg");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}