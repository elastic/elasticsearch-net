// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Aggregations;

public sealed partial class CustomCategorizeTextAnalyzer
{
	[JsonInclude, JsonPropertyName("char_filter")]
	public ICollection<string>? CharFilter { get; set; }
	[JsonInclude, JsonPropertyName("filter")]
	public ICollection<string>? Filter { get; set; }
	[JsonInclude, JsonPropertyName("tokenizer")]
	public string? Tokenizer { get; set; }
}

public sealed partial class CustomCategorizeTextAnalyzerDescriptor : SerializableDescriptor<CustomCategorizeTextAnalyzerDescriptor>
{
	internal CustomCategorizeTextAnalyzerDescriptor(Action<CustomCategorizeTextAnalyzerDescriptor> configure) => configure.Invoke(this);

	public CustomCategorizeTextAnalyzerDescriptor() : base()
	{
	}

	private ICollection<string>? CharFilterValue { get; set; }
	private ICollection<string>? FilterValue { get; set; }
	private string? TokenizerValue { get; set; }

	public CustomCategorizeTextAnalyzerDescriptor CharFilter(ICollection<string>? charFilter)
	{
		CharFilterValue = charFilter;
		return Self;
	}

	public CustomCategorizeTextAnalyzerDescriptor Filter(ICollection<string>? filter)
	{
		FilterValue = filter;
		return Self;
	}

	public CustomCategorizeTextAnalyzerDescriptor Tokenizer(string? tokenizer)
	{
		TokenizerValue = tokenizer;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CharFilterValue is not null)
		{
			writer.WritePropertyName("char_filter");
			JsonSerializer.Serialize(writer, CharFilterValue, options);
		}

		if (FilterValue is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, FilterValue, options);
		}

		if (!string.IsNullOrEmpty(TokenizerValue))
		{
			writer.WritePropertyName("tokenizer");
			writer.WriteStringValue(TokenizerValue);
		}

		writer.WriteEndObject();
	}
}