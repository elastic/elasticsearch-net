// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	public partial class CategorizeTextAnalyzer
	{
		[JsonInclude]
		[JsonPropertyName("char_filter")]
		public IEnumerable<string>? CharFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("tokenizer")]
		public string? Tokenizer { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public IEnumerable<string>? Filter { get; set; }
	}

	public sealed partial class CategorizeTextAnalyzerDescriptor : DescriptorBase<CategorizeTextAnalyzerDescriptor>
	{
		public CategorizeTextAnalyzerDescriptor()
		{
		}

		internal CategorizeTextAnalyzerDescriptor(Action<CategorizeTextAnalyzerDescriptor> configure) => configure.Invoke(this);
		internal IEnumerable<string>? CharFilterValue { get; private set; }

		internal string? TokenizerValue { get; private set; }

		internal IEnumerable<string>? FilterValue { get; private set; }

		public CategorizeTextAnalyzerDescriptor CharFilter(IEnumerable<string>? charFilter) => Assign(charFilter, (a, v) => a.CharFilterValue = v);
		public CategorizeTextAnalyzerDescriptor Tokenizer(string? tokenizer) => Assign(tokenizer, (a, v) => a.TokenizerValue = v);
		public CategorizeTextAnalyzerDescriptor Filter(IEnumerable<string>? filter) => Assign(filter, (a, v) => a.FilterValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (CharFilterValue is not null)
			{
				writer.WritePropertyName("char_filter");
				JsonSerializer.Serialize(writer, CharFilterValue, options);
			}

			if (!string.IsNullOrEmpty(TokenizerValue))
			{
				writer.WritePropertyName("tokenizer");
				writer.WriteStringValue(TokenizerValue);
			}

			if (FilterValue is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterValue, options);
			}

			writer.WriteEndObject();
		}
	}
}