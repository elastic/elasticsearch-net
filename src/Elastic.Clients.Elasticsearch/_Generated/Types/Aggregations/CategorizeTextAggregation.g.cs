// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	internal sealed class CategorizeTextAggregationConverter : JsonConverter<CategorizeTextAggregation>
	{
		public override CategorizeTextAggregation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			if (reader.TokenType != JsonTokenType.StartObject)
				throw new JsonException("Unexpected JSON detected.");
			reader.Read();
			var aggName = reader.GetString();
			if (aggName != "categorize_text")
				throw new JsonException("Unexpected JSON detected.");
			var agg = new CategorizeTextAggregation(aggName);
			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					if (reader.ValueTextEquals("field"))
					{
						var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Field>(ref reader, options);
						if (value is not null)
						{
							agg.Field = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("max_unique_tokens"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.MaxUniqueTokens = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("max_matched_tokens"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.MaxMatchedTokens = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("similarity_threshold"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.SimilarityThreshold = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("categorization_filters"))
					{
						var value = JsonSerializer.Deserialize<IEnumerable<string>?>(ref reader, options);
						if (value is not null)
						{
							agg.CategorizationFilters = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("categorization_analyzer"))
					{
						var value = JsonSerializer.Deserialize<Union<string?, Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAnalyzer?>?>(ref reader, options);
						if (value is not null)
						{
							agg.CategorizationAnalyzer = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("shard_size"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.ShardSize = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("size"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.Size = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("min_doc_count"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.MinDocCount = value;
						}

						continue;
					}

					if (reader.ValueTextEquals("shard_min_doc_count"))
					{
						var value = JsonSerializer.Deserialize<int?>(ref reader, options);
						if (value is not null)
						{
							agg.ShardMinDocCount = value;
						}

						continue;
					}
				}
			}

			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					if (reader.ValueTextEquals("meta"))
					{
						var value = JsonSerializer.Deserialize<Dictionary<string, object>>(ref reader, options);
						if (value is not null)
						{
							agg.Meta = value;
						}

						continue;
					}
				}
			}

			reader.Read();
			return agg;
		}

		public override void Write(Utf8JsonWriter writer, CategorizeTextAggregation value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("categorize_text");
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, value.Field, options);
			if (value.MaxUniqueTokens.HasValue)
			{
				writer.WritePropertyName("max_unique_tokens");
				writer.WriteNumberValue(value.MaxUniqueTokens.Value);
			}

			if (value.MaxMatchedTokens.HasValue)
			{
				writer.WritePropertyName("max_matched_tokens");
				writer.WriteNumberValue(value.MaxMatchedTokens.Value);
			}

			if (value.SimilarityThreshold.HasValue)
			{
				writer.WritePropertyName("similarity_threshold");
				writer.WriteNumberValue(value.SimilarityThreshold.Value);
			}

			if (value.CategorizationFilters is not null)
			{
				writer.WritePropertyName("categorization_filters");
				JsonSerializer.Serialize(writer, value.CategorizationFilters, options);
			}

			if (value.CategorizationAnalyzer is not null)
			{
				writer.WritePropertyName("categorization_analyzer");
				JsonSerializer.Serialize(writer, value.CategorizationAnalyzer, options);
			}

			if (value.ShardSize.HasValue)
			{
				writer.WritePropertyName("shard_size");
				writer.WriteNumberValue(value.ShardSize.Value);
			}

			if (value.Size.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(value.Size.Value);
			}

			if (value.MinDocCount.HasValue)
			{
				writer.WritePropertyName("min_doc_count");
				writer.WriteNumberValue(value.MinDocCount.Value);
			}

			if (value.ShardMinDocCount.HasValue)
			{
				writer.WritePropertyName("shard_min_doc_count");
				writer.WriteNumberValue(value.ShardMinDocCount.Value);
			}

			writer.WriteEndObject();
			if (value.Meta is not null)
			{
				writer.WritePropertyName("meta");
				JsonSerializer.Serialize(writer, value.Meta, options);
			}

			writer.WriteEndObject();
		}
	}

	[JsonConverter(typeof(CategorizeTextAggregationConverter))]
	public partial class CategorizeTextAggregation : Aggregations.AggregationBase
	{
		public CategorizeTextAggregation(string name) : base(name)
		{
		}

		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_unique_tokens")]
		public int? MaxUniqueTokens { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_matched_tokens")]
		public int? MaxMatchedTokens { get; set; }

		[JsonInclude]
		[JsonPropertyName("similarity_threshold")]
		public int? SimilarityThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("categorization_filters")]
		public IEnumerable<string>? CategorizationFilters { get; set; }

		[JsonInclude]
		[JsonPropertyName("categorization_analyzer")]
		public Union<string?, Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAnalyzer?>? CategorizationAnalyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_min_doc_count")]
		public int? ShardMinDocCount { get; set; }
	}

	public sealed partial class CategorizeTextAggregationDescriptor<TDocument> : DescriptorBase<CategorizeTextAggregationDescriptor<TDocument>>
	{
		public CategorizeTextAggregationDescriptor()
		{
		}

		internal CategorizeTextAggregationDescriptor(Action<CategorizeTextAggregationDescriptor<TDocument>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Field FieldValue { get; private set; }

		internal int? MaxUniqueTokensValue { get; private set; }

		internal int? MaxMatchedTokensValue { get; private set; }

		internal int? SimilarityThresholdValue { get; private set; }

		internal IEnumerable<string>? CategorizationFiltersValue { get; private set; }

		internal Union<string?, Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAnalyzer?>? CategorizationAnalyzerValue { get; private set; }

		internal int? ShardSizeValue { get; private set; }

		internal int? SizeValue { get; private set; }

		internal int? MinDocCountValue { get; private set; }

		internal int? ShardMinDocCountValue { get; private set; }

		internal Dictionary<string, object>? MetaValue { get; private set; }

		public CategorizeTextAggregationDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field field) => Assign(field, (a, v) => a.FieldValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field) => Assign(field, (a, v) => a.FieldValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> MaxUniqueTokens(int? maxUniqueTokens) => Assign(maxUniqueTokens, (a, v) => a.MaxUniqueTokensValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> MaxMatchedTokens(int? maxMatchedTokens) => Assign(maxMatchedTokens, (a, v) => a.MaxMatchedTokensValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> SimilarityThreshold(int? similarityThreshold) => Assign(similarityThreshold, (a, v) => a.SimilarityThresholdValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> CategorizationFilters(IEnumerable<string>? categorizationFilters) => Assign(categorizationFilters, (a, v) => a.CategorizationFiltersValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> CategorizationAnalyzer(Union<string?, Elastic.Clients.Elasticsearch.Aggregations.CategorizeTextAnalyzer?>? categorizationAnalyzer) => Assign(categorizationAnalyzer, (a, v) => a.CategorizationAnalyzerValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> ShardSize(int? shardSize) => Assign(shardSize, (a, v) => a.ShardSizeValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> Size(int? size) => Assign(size, (a, v) => a.SizeValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> MinDocCount(int? minDocCount) => Assign(minDocCount, (a, v) => a.MinDocCountValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> ShardMinDocCount(int? shardMinDocCount) => Assign(shardMinDocCount, (a, v) => a.ShardMinDocCountValue = v);
		public CategorizeTextAggregationDescriptor<TDocument> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector) => Assign(selector, (a, v) => a.MetaValue = v?.Invoke(new FluentDictionary<string, object>()));
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("categorize_text");
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
			if (MaxUniqueTokensValue.HasValue)
			{
				writer.WritePropertyName("max_unique_tokens");
				writer.WriteNumberValue(MaxUniqueTokensValue.Value);
			}

			if (MaxMatchedTokensValue.HasValue)
			{
				writer.WritePropertyName("max_matched_tokens");
				writer.WriteNumberValue(MaxMatchedTokensValue.Value);
			}

			if (SimilarityThresholdValue.HasValue)
			{
				writer.WritePropertyName("similarity_threshold");
				writer.WriteNumberValue(SimilarityThresholdValue.Value);
			}

			if (CategorizationFiltersValue is not null)
			{
				writer.WritePropertyName("categorization_filters");
				JsonSerializer.Serialize(writer, CategorizationFiltersValue, options);
			}

			if (CategorizationAnalyzerValue is not null)
			{
				writer.WritePropertyName("categorization_analyzer");
				JsonSerializer.Serialize(writer, CategorizationAnalyzerValue, options);
			}

			if (ShardSizeValue.HasValue)
			{
				writer.WritePropertyName("shard_size");
				writer.WriteNumberValue(ShardSizeValue.Value);
			}

			if (SizeValue.HasValue)
			{
				writer.WritePropertyName("size");
				writer.WriteNumberValue(SizeValue.Value);
			}

			if (MinDocCountValue.HasValue)
			{
				writer.WritePropertyName("min_doc_count");
				writer.WriteNumberValue(MinDocCountValue.Value);
			}

			if (ShardMinDocCountValue.HasValue)
			{
				writer.WritePropertyName("shard_min_doc_count");
				writer.WriteNumberValue(ShardMinDocCountValue.Value);
			}

			writer.WriteEndObject();
			if (MetaValue is not null)
			{
				writer.WritePropertyName("meta");
				JsonSerializer.Serialize(writer, MetaValue, options);
			}

			writer.WriteEndObject();
		}
	}
}