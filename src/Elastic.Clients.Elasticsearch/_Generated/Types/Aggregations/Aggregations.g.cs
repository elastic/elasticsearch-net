// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Aggregations
{
	[ConvertAs(typeof(AdjacencyMatrixAggregation))]
	public partial interface IAdjacencyMatrixAggregation : Aggregations.IAggregationContainerVariant
	{
		Dictionary<string, QueryDsl.IQueryContainer>? Filters { get; set; }
	}

	public partial class AdjacencyMatrixAggregation : Aggregations.BucketAggregationBase, Aggregations.IAdjacencyMatrixAggregation
	{
		[JsonInclude]
		[JsonPropertyName("filters")]
		public Dictionary<string, QueryDsl.IQueryContainer>? Filters { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.AdjacencyMatrix = this;
	}

	public abstract partial class AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(Aggregation))]
	public partial interface IAggregation
	{
		Dictionary<string, object>? Meta { get; set; }

		string? Name { get; set; }
	}

	public partial class Aggregation : Aggregations.IAggregation
	{
		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public string? Name { get; set; }
	}

	public interface IAggregationContainerVariant
	{
		void WrapInContainer(IAggregationContainer container);
	}

	[ConvertAs(typeof(AggregationContainer))]
	public partial interface IAggregationContainer
	{
		[JsonInclude]
		[JsonPropertyName("aggs")]
		Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("adjacency_matrix")]
		Aggregations.IAdjacencyMatrixAggregation? AdjacencyMatrix { get; set; }

		//[JsonInclude]
		//[JsonPropertyName("aggregations")]
		//Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }

		[JsonInclude]
		[JsonPropertyName("auto_date_histogram")]
		Aggregations.IAutoDateHistogramAggregation? AutoDateHistogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("avg")]
		Aggregations.IAverageAggregation? Avg { get; set; }

		[JsonInclude]
		[JsonPropertyName("avg_bucket")]
		Aggregations.IAverageBucketAggregation? AvgBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("boxplot")]
		Aggregations.IBoxplotAggregation? Boxplot { get; set; }

		[JsonInclude]
		[JsonPropertyName("bucket_script")]
		Aggregations.IBucketScriptAggregation? BucketScript { get; set; }

		[JsonInclude]
		[JsonPropertyName("bucket_selector")]
		Aggregations.IBucketSelectorAggregation? BucketSelector { get; set; }

		[JsonInclude]
		[JsonPropertyName("bucket_sort")]
		Aggregations.IBucketSortAggregation? BucketSort { get; set; }

		[JsonInclude]
		[JsonPropertyName("cardinality")]
		Aggregations.ICardinalityAggregation? Cardinality { get; set; }

		[JsonInclude]
		[JsonPropertyName("children")]
		Aggregations.IChildrenAggregation? Children { get; set; }

		[JsonInclude]
		[JsonPropertyName("composite")]
		Aggregations.ICompositeAggregation? Composite { get; set; }

		[JsonInclude]
		[JsonPropertyName("cumulative_cardinality")]
		Aggregations.ICumulativeCardinalityAggregation? CumulativeCardinality { get; set; }

		[JsonInclude]
		[JsonPropertyName("cumulative_sum")]
		Aggregations.ICumulativeSumAggregation? CumulativeSum { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_histogram")]
		Aggregations.IDateHistogramAggregation? DateHistogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_range")]
		Aggregations.IDateRangeAggregation? DateRange { get; set; }

		[JsonInclude]
		[JsonPropertyName("derivative")]
		Aggregations.IDerivativeAggregation? Derivative { get; set; }

		[JsonInclude]
		[JsonPropertyName("diversified_sampler")]
		Aggregations.IDiversifiedSamplerAggregation? DiversifiedSampler { get; set; }

		[JsonInclude]
		[JsonPropertyName("extended_stats")]
		Aggregations.IExtendedStatsAggregation? ExtendedStats { get; set; }

		[JsonInclude]
		[JsonPropertyName("extended_stats_bucket")]
		Aggregations.IExtendedStatsBucketAggregation? ExtendedStatsBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("filters")]
		Aggregations.IFiltersAggregation? Filters { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_bounds")]
		Aggregations.IGeoBoundsAggregation? GeoBounds { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_centroid")]
		Aggregations.IGeoCentroidAggregation? GeoCentroid { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_distance")]
		Aggregations.IGeoDistanceAggregation? GeoDistance { get; set; }

		[JsonInclude]
		[JsonPropertyName("geohash_grid")]
		Aggregations.IGeoHashGridAggregation? GeohashGrid { get; set; }

		[JsonInclude]
		[JsonPropertyName("geo_line")]
		Aggregations.IGeoLineAggregation? GeoLine { get; set; }

		[JsonInclude]
		[JsonPropertyName("geotile_grid")]
		Aggregations.IGeoTileGridAggregation? GeotileGrid { get; set; }

		[JsonInclude]
		[JsonPropertyName("global")]
		Aggregations.IGlobalAggregation? Global { get; set; }

		[JsonInclude]
		[JsonPropertyName("histogram")]
		Aggregations.IHistogramAggregation? Histogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("ip_range")]
		Aggregations.IIpRangeAggregation? IpRange { get; set; }

		[JsonInclude]
		[JsonPropertyName("inference")]
		Aggregations.IInferenceAggregation? Inference { get; set; }

		[JsonInclude]
		[JsonPropertyName("line")]
		Aggregations.IGeoLineAggregation? Line { get; set; }

		[JsonInclude]
		[JsonPropertyName("matrix_stats")]
		Aggregations.IMatrixStatsAggregation? MatrixStats { get; set; }

		[JsonInclude]
		[JsonPropertyName("max")]
		Aggregations.IMaxAggregation? Max { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_bucket")]
		Aggregations.IMaxBucketAggregation? MaxBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("median_absolute_deviation")]
		Aggregations.IMedianAbsoluteDeviationAggregation? MedianAbsoluteDeviation { get; set; }

		[JsonInclude]
		[JsonPropertyName("min")]
		Aggregations.IMinAggregation? Min { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_bucket")]
		Aggregations.IMinBucketAggregation? MinBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		Aggregations.IMissingAggregation? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("moving_avg")]
		Aggregations.IMovingAverageAggregation? MovingAvg { get; set; }

		[JsonInclude]
		[JsonPropertyName("moving_percentiles")]
		Aggregations.IMovingPercentilesAggregation? MovingPercentiles { get; set; }

		[JsonInclude]
		[JsonPropertyName("moving_fn")]
		Aggregations.IMovingFunctionAggregation? MovingFn { get; set; }

		[JsonInclude]
		[JsonPropertyName("multi_terms")]
		Aggregations.IMultiTermsAggregation? MultiTerms { get; set; }

		[JsonInclude]
		[JsonPropertyName("nested")]
		Aggregations.INestedAggregation? Nested { get; set; }

		[JsonInclude]
		[JsonPropertyName("normalize")]
		Aggregations.INormalizeAggregation? Normalize { get; set; }

		[JsonInclude]
		[JsonPropertyName("parent")]
		Aggregations.IParentAggregation? Parent { get; set; }

		[JsonInclude]
		[JsonPropertyName("percentile_ranks")]
		Aggregations.IPercentileRanksAggregation? PercentileRanks { get; set; }

		[JsonInclude]
		[JsonPropertyName("percentiles")]
		Aggregations.IPercentilesAggregation? Percentiles { get; set; }

		[JsonInclude]
		[JsonPropertyName("percentiles_bucket")]
		Aggregations.IPercentilesBucketAggregation? PercentilesBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("range")]
		Aggregations.IRangeAggregation? Range { get; set; }

		[JsonInclude]
		[JsonPropertyName("rare_terms")]
		Aggregations.IRareTermsAggregation? RareTerms { get; set; }

		[JsonInclude]
		[JsonPropertyName("rate")]
		Aggregations.IRateAggregation? Rate { get; set; }

		[JsonInclude]
		[JsonPropertyName("reverse_nested")]
		Aggregations.IReverseNestedAggregation? ReverseNested { get; set; }

		[JsonInclude]
		[JsonPropertyName("sampler")]
		Aggregations.ISamplerAggregation? Sampler { get; set; }

		[JsonInclude]
		[JsonPropertyName("scripted_metric")]
		Aggregations.IScriptedMetricAggregation? ScriptedMetric { get; set; }

		[JsonInclude]
		[JsonPropertyName("serial_diff")]
		Aggregations.ISerialDifferencingAggregation? SerialDiff { get; set; }

		[JsonInclude]
		[JsonPropertyName("significant_terms")]
		Aggregations.ISignificantTermsAggregation? SignificantTerms { get; set; }

		[JsonInclude]
		[JsonPropertyName("significant_text")]
		Aggregations.ISignificantTextAggregation? SignificantText { get; set; }

		[JsonInclude]
		[JsonPropertyName("stats")]
		Aggregations.IStatsAggregation? Stats { get; set; }

		[JsonInclude]
		[JsonPropertyName("stats_bucket")]
		Aggregations.IStatsBucketAggregation? StatsBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("string_stats")]
		Aggregations.IStringStatsAggregation? StringStats { get; set; }

		[JsonInclude]
		[JsonPropertyName("sum")]
		Aggregations.ISumAggregation? Sum { get; set; }

		[JsonInclude]
		[JsonPropertyName("sum_bucket")]
		Aggregations.ISumBucketAggregation? SumBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("terms")]
		Aggregations.ITermsAggregation? Terms { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_hits")]
		Aggregations.ITopHitsAggregation? TopHits { get; set; }

		[JsonInclude]
		[JsonPropertyName("t_test")]
		Aggregations.ITTestAggregation? TTest { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_metrics")]
		Aggregations.ITopMetricsAggregation? TopMetrics { get; set; }

		[JsonInclude]
		[JsonPropertyName("value_count")]
		Aggregations.IValueCountAggregation? ValueCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("weighted_avg")]
		Aggregations.IWeightedAverageAggregation? WeightedAvg { get; set; }

		[JsonInclude]
		[JsonPropertyName("variable_width_histogram")]
		Aggregations.IVariableWidthHistogramAggregation? VariableWidthHistogram { get; set; }
	}

	public partial class AggregationContainer : Aggregations.IAggregationContainer
	{
		public AggregationContainer(IAggregationContainerVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private Aggregations.IAdjacencyMatrixAggregation? _adjacencyMatrix;
		//private Dictionary<string, Aggregations.IAggregationContainer>? _aggregations;
		private Aggregations.IAutoDateHistogramAggregation? _autoDateHistogram;
		private Aggregations.IAverageAggregation? _avg;
		private Aggregations.IAverageBucketAggregation? _avgBucket;
		private Aggregations.IBoxplotAggregation? _boxplot;
		private Aggregations.IBucketScriptAggregation? _bucketScript;
		private Aggregations.IBucketSelectorAggregation? _bucketSelector;
		private Aggregations.IBucketSortAggregation? _bucketSort;
		private Aggregations.ICardinalityAggregation? _cardinality;
		private Aggregations.IChildrenAggregation? _children;
		private Aggregations.ICompositeAggregation? _composite;
		private Aggregations.ICumulativeCardinalityAggregation? _cumulativeCardinality;
		private Aggregations.ICumulativeSumAggregation? _cumulativeSum;
		private Aggregations.IDateHistogramAggregation? _dateHistogram;
		private Aggregations.IDateRangeAggregation? _dateRange;
		private Aggregations.IDerivativeAggregation? _derivative;
		private Aggregations.IDiversifiedSamplerAggregation? _diversifiedSampler;
		private Aggregations.IExtendedStatsAggregation? _extendedStats;
		private Aggregations.IExtendedStatsBucketAggregation? _extendedStatsBucket;
		private QueryDsl.IQueryContainer? _filter;
		private Aggregations.IFiltersAggregation? _filters;
		private Aggregations.IGeoBoundsAggregation? _geoBounds;
		private Aggregations.IGeoCentroidAggregation? _geoCentroid;
		private Aggregations.IGeoDistanceAggregation? _geoDistance;
		private Aggregations.IGeoHashGridAggregation? _geohashGrid;
		private Aggregations.IGeoLineAggregation? _geoLine;
		private Aggregations.IGeoTileGridAggregation? _geotileGrid;
		private Aggregations.IGlobalAggregation? _global;
		private Aggregations.IHistogramAggregation? _histogram;
		private Aggregations.IIpRangeAggregation? _ipRange;
		private Aggregations.IInferenceAggregation? _inference;
		private Aggregations.IGeoLineAggregation? _line;
		private Aggregations.IMatrixStatsAggregation? _matrixStats;
		private Aggregations.IMaxAggregation? _max;
		private Aggregations.IMaxBucketAggregation? _maxBucket;
		private Aggregations.IMedianAbsoluteDeviationAggregation? _medianAbsoluteDeviation;
		private Aggregations.IMinAggregation? _min;
		private Aggregations.IMinBucketAggregation? _minBucket;
		private Aggregations.IMissingAggregation? _missing;
		private Aggregations.IMovingAverageAggregation? _movingAvg;
		private Aggregations.IMovingPercentilesAggregation? _movingPercentiles;
		private Aggregations.IMovingFunctionAggregation? _movingFn;
		private Aggregations.IMultiTermsAggregation? _multiTerms;
		private Aggregations.INestedAggregation? _nested;
		private Aggregations.INormalizeAggregation? _normalize;
		private Aggregations.IParentAggregation? _parent;
		private Aggregations.IPercentileRanksAggregation? _percentileRanks;
		private Aggregations.IPercentilesAggregation? _percentiles;
		private Aggregations.IPercentilesBucketAggregation? _percentilesBucket;
		private Aggregations.IRangeAggregation? _range;
		private Aggregations.IRareTermsAggregation? _rareTerms;
		private Aggregations.IRateAggregation? _rate;
		private Aggregations.IReverseNestedAggregation? _reverseNested;
		private Aggregations.ISamplerAggregation? _sampler;
		private Aggregations.IScriptedMetricAggregation? _scriptedMetric;
		private Aggregations.ISerialDifferencingAggregation? _serialDiff;
		private Aggregations.ISignificantTermsAggregation? _significantTerms;
		private Aggregations.ISignificantTextAggregation? _significantText;
		private Aggregations.IStatsAggregation? _stats;
		private Aggregations.IStatsBucketAggregation? _statsBucket;
		private Aggregations.IStringStatsAggregation? _stringStats;
		private Aggregations.ISumAggregation? _sum;
		private Aggregations.ISumBucketAggregation? _sumBucket;
		private Aggregations.ITermsAggregation? _terms;
		private Aggregations.ITopHitsAggregation? _topHits;
		private Aggregations.ITTestAggregation? _tTest;
		private Aggregations.ITopMetricsAggregation? _topMetrics;
		private Aggregations.IValueCountAggregation? _valueCount;
		private Aggregations.IWeightedAverageAggregation? _weightedAvg;
		private Aggregations.IVariableWidthHistogramAggregation? _variableWidthHistogram;
		Aggregations.IAdjacencyMatrixAggregation? IAggregationContainer.AdjacencyMatrix { get => _adjacencyMatrix; set => _adjacencyMatrix = Set(value); }

		//Dictionary<string, Aggregations.IAggregationContainer>? IAggregationContainer.Aggregations { get => _aggregations; set => _aggregations = Set(value); }

		Aggregations.IAutoDateHistogramAggregation? IAggregationContainer.AutoDateHistogram { get => _autoDateHistogram; set => _autoDateHistogram = Set(value); }

		Aggregations.IAverageAggregation? IAggregationContainer.Avg { get => _avg; set => _avg = Set(value); }

		Aggregations.IAverageBucketAggregation? IAggregationContainer.AvgBucket { get => _avgBucket; set => _avgBucket = Set(value); }

		Aggregations.IBoxplotAggregation? IAggregationContainer.Boxplot { get => _boxplot; set => _boxplot = Set(value); }

		Aggregations.IBucketScriptAggregation? IAggregationContainer.BucketScript { get => _bucketScript; set => _bucketScript = Set(value); }

		Aggregations.IBucketSelectorAggregation? IAggregationContainer.BucketSelector { get => _bucketSelector; set => _bucketSelector = Set(value); }

		Aggregations.IBucketSortAggregation? IAggregationContainer.BucketSort { get => _bucketSort; set => _bucketSort = Set(value); }

		Aggregations.ICardinalityAggregation? IAggregationContainer.Cardinality { get => _cardinality; set => _cardinality = Set(value); }

		Aggregations.IChildrenAggregation? IAggregationContainer.Children { get => _children; set => _children = Set(value); }

		Aggregations.ICompositeAggregation? IAggregationContainer.Composite { get => _composite; set => _composite = Set(value); }

		Aggregations.ICumulativeCardinalityAggregation? IAggregationContainer.CumulativeCardinality { get => _cumulativeCardinality; set => _cumulativeCardinality = Set(value); }

		Aggregations.ICumulativeSumAggregation? IAggregationContainer.CumulativeSum { get => _cumulativeSum; set => _cumulativeSum = Set(value); }

		Aggregations.IDateHistogramAggregation? IAggregationContainer.DateHistogram { get => _dateHistogram; set => _dateHistogram = Set(value); }

		Aggregations.IDateRangeAggregation? IAggregationContainer.DateRange { get => _dateRange; set => _dateRange = Set(value); }

		Aggregations.IDerivativeAggregation? IAggregationContainer.Derivative { get => _derivative; set => _derivative = Set(value); }

		Aggregations.IDiversifiedSamplerAggregation? IAggregationContainer.DiversifiedSampler { get => _diversifiedSampler; set => _diversifiedSampler = Set(value); }

		Aggregations.IExtendedStatsAggregation? IAggregationContainer.ExtendedStats { get => _extendedStats; set => _extendedStats = Set(value); }

		Aggregations.IExtendedStatsBucketAggregation? IAggregationContainer.ExtendedStatsBucket { get => _extendedStatsBucket; set => _extendedStatsBucket = Set(value); }

		QueryDsl.IQueryContainer? IAggregationContainer.Filter { get => _filter; set => _filter = Set(value); }

		Aggregations.IFiltersAggregation? IAggregationContainer.Filters { get => _filters; set => _filters = Set(value); }

		Aggregations.IGeoBoundsAggregation? IAggregationContainer.GeoBounds { get => _geoBounds; set => _geoBounds = Set(value); }

		Aggregations.IGeoCentroidAggregation? IAggregationContainer.GeoCentroid { get => _geoCentroid; set => _geoCentroid = Set(value); }

		Aggregations.IGeoDistanceAggregation? IAggregationContainer.GeoDistance { get => _geoDistance; set => _geoDistance = Set(value); }

		Aggregations.IGeoHashGridAggregation? IAggregationContainer.GeohashGrid { get => _geohashGrid; set => _geohashGrid = Set(value); }

		Aggregations.IGeoLineAggregation? IAggregationContainer.GeoLine { get => _geoLine; set => _geoLine = Set(value); }

		Aggregations.IGeoTileGridAggregation? IAggregationContainer.GeotileGrid { get => _geotileGrid; set => _geotileGrid = Set(value); }

		Aggregations.IGlobalAggregation? IAggregationContainer.Global { get => _global; set => _global = Set(value); }

		Aggregations.IHistogramAggregation? IAggregationContainer.Histogram { get => _histogram; set => _histogram = Set(value); }

		Aggregations.IIpRangeAggregation? IAggregationContainer.IpRange { get => _ipRange; set => _ipRange = Set(value); }

		Aggregations.IInferenceAggregation? IAggregationContainer.Inference { get => _inference; set => _inference = Set(value); }

		Aggregations.IGeoLineAggregation? IAggregationContainer.Line { get => _line; set => _line = Set(value); }

		Aggregations.IMatrixStatsAggregation? IAggregationContainer.MatrixStats { get => _matrixStats; set => _matrixStats = Set(value); }

		Aggregations.IMaxAggregation? IAggregationContainer.Max { get => _max; set => _max = Set(value); }

		Aggregations.IMaxBucketAggregation? IAggregationContainer.MaxBucket { get => _maxBucket; set => _maxBucket = Set(value); }

		Aggregations.IMedianAbsoluteDeviationAggregation? IAggregationContainer.MedianAbsoluteDeviation { get => _medianAbsoluteDeviation; set => _medianAbsoluteDeviation = Set(value); }

		Aggregations.IMinAggregation? IAggregationContainer.Min { get => _min; set => _min = Set(value); }

		Aggregations.IMinBucketAggregation? IAggregationContainer.MinBucket { get => _minBucket; set => _minBucket = Set(value); }

		Aggregations.IMissingAggregation? IAggregationContainer.Missing { get => _missing; set => _missing = Set(value); }

		Aggregations.IMovingAverageAggregation? IAggregationContainer.MovingAvg { get => _movingAvg; set => _movingAvg = Set(value); }

		Aggregations.IMovingPercentilesAggregation? IAggregationContainer.MovingPercentiles { get => _movingPercentiles; set => _movingPercentiles = Set(value); }

		Aggregations.IMovingFunctionAggregation? IAggregationContainer.MovingFn { get => _movingFn; set => _movingFn = Set(value); }

		Aggregations.IMultiTermsAggregation? IAggregationContainer.MultiTerms { get => _multiTerms; set => _multiTerms = Set(value); }

		Aggregations.INestedAggregation? IAggregationContainer.Nested { get => _nested; set => _nested = Set(value); }

		Aggregations.INormalizeAggregation? IAggregationContainer.Normalize { get => _normalize; set => _normalize = Set(value); }

		Aggregations.IParentAggregation? IAggregationContainer.Parent { get => _parent; set => _parent = Set(value); }

		Aggregations.IPercentileRanksAggregation? IAggregationContainer.PercentileRanks { get => _percentileRanks; set => _percentileRanks = Set(value); }

		Aggregations.IPercentilesAggregation? IAggregationContainer.Percentiles { get => _percentiles; set => _percentiles = Set(value); }

		Aggregations.IPercentilesBucketAggregation? IAggregationContainer.PercentilesBucket { get => _percentilesBucket; set => _percentilesBucket = Set(value); }

		Aggregations.IRangeAggregation? IAggregationContainer.Range { get => _range; set => _range = Set(value); }

		Aggregations.IRareTermsAggregation? IAggregationContainer.RareTerms { get => _rareTerms; set => _rareTerms = Set(value); }

		Aggregations.IRateAggregation? IAggregationContainer.Rate { get => _rate; set => _rate = Set(value); }

		Aggregations.IReverseNestedAggregation? IAggregationContainer.ReverseNested { get => _reverseNested; set => _reverseNested = Set(value); }

		Aggregations.ISamplerAggregation? IAggregationContainer.Sampler { get => _sampler; set => _sampler = Set(value); }

		Aggregations.IScriptedMetricAggregation? IAggregationContainer.ScriptedMetric { get => _scriptedMetric; set => _scriptedMetric = Set(value); }

		Aggregations.ISerialDifferencingAggregation? IAggregationContainer.SerialDiff { get => _serialDiff; set => _serialDiff = Set(value); }

		Aggregations.ISignificantTermsAggregation? IAggregationContainer.SignificantTerms { get => _significantTerms; set => _significantTerms = Set(value); }

		Aggregations.ISignificantTextAggregation? IAggregationContainer.SignificantText { get => _significantText; set => _significantText = Set(value); }

		Aggregations.IStatsAggregation? IAggregationContainer.Stats { get => _stats; set => _stats = Set(value); }

		Aggregations.IStatsBucketAggregation? IAggregationContainer.StatsBucket { get => _statsBucket; set => _statsBucket = Set(value); }

		Aggregations.IStringStatsAggregation? IAggregationContainer.StringStats { get => _stringStats; set => _stringStats = Set(value); }

		Aggregations.ISumAggregation? IAggregationContainer.Sum { get => _sum; set => _sum = Set(value); }

		Aggregations.ISumBucketAggregation? IAggregationContainer.SumBucket { get => _sumBucket; set => _sumBucket = Set(value); }

		Aggregations.ITermsAggregation? IAggregationContainer.Terms { get => _terms; set => _terms = Set(value); }

		Aggregations.ITopHitsAggregation? IAggregationContainer.TopHits { get => _topHits; set => _topHits = Set(value); }

		Aggregations.ITTestAggregation? IAggregationContainer.TTest { get => _tTest; set => _tTest = Set(value); }

		Aggregations.ITopMetricsAggregation? IAggregationContainer.TopMetrics { get => _topMetrics; set => _topMetrics = Set(value); }

		Aggregations.IValueCountAggregation? IAggregationContainer.ValueCount { get => _valueCount; set => _valueCount = Set(value); }

		Aggregations.IWeightedAverageAggregation? IAggregationContainer.WeightedAvg { get => _weightedAvg; set => _weightedAvg = Set(value); }

		Aggregations.IVariableWidthHistogramAggregation? IAggregationContainer.VariableWidthHistogram { get => _variableWidthHistogram; set => _variableWidthHistogram = Set(value); }

		[JsonInclude]
		[JsonPropertyName("aggs")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		[JsonInclude]
		[JsonPropertyName("meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonIgnore]
		internal IAggregationContainerVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IAggregationContainerVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}
	}

	public partial class AggregationContainerDescriptor : IAggregationContainer
	{
		Dictionary<string, Aggregations.IAggregationContainer>? IAggregationContainer.Aggs { get; set; }

		Dictionary<string, object>? IAggregationContainer.Meta { get; set; }

		Aggregations.IAdjacencyMatrixAggregation? IAggregationContainer.AdjacencyMatrix { get; set; }

		//Dictionary<string, Aggregations.IAggregationContainer>? IAggregationContainer.Aggregations { get; set; }

		Aggregations.IAutoDateHistogramAggregation? IAggregationContainer.AutoDateHistogram { get; set; }

		Aggregations.IAverageAggregation? IAggregationContainer.Avg { get; set; }

		Aggregations.IAverageBucketAggregation? IAggregationContainer.AvgBucket { get; set; }

		Aggregations.IBoxplotAggregation? IAggregationContainer.Boxplot { get; set; }

		Aggregations.IBucketScriptAggregation? IAggregationContainer.BucketScript { get; set; }

		Aggregations.IBucketSelectorAggregation? IAggregationContainer.BucketSelector { get; set; }

		Aggregations.IBucketSortAggregation? IAggregationContainer.BucketSort { get; set; }

		Aggregations.ICardinalityAggregation? IAggregationContainer.Cardinality { get; set; }

		Aggregations.IChildrenAggregation? IAggregationContainer.Children { get; set; }

		Aggregations.ICompositeAggregation? IAggregationContainer.Composite { get; set; }

		Aggregations.ICumulativeCardinalityAggregation? IAggregationContainer.CumulativeCardinality { get; set; }

		Aggregations.ICumulativeSumAggregation? IAggregationContainer.CumulativeSum { get; set; }

		Aggregations.IDateHistogramAggregation? IAggregationContainer.DateHistogram { get; set; }

		Aggregations.IDateRangeAggregation? IAggregationContainer.DateRange { get; set; }

		Aggregations.IDerivativeAggregation? IAggregationContainer.Derivative { get; set; }

		Aggregations.IDiversifiedSamplerAggregation? IAggregationContainer.DiversifiedSampler { get; set; }

		Aggregations.IExtendedStatsAggregation? IAggregationContainer.ExtendedStats { get; set; }

		Aggregations.IExtendedStatsBucketAggregation? IAggregationContainer.ExtendedStatsBucket { get; set; }

		QueryDsl.IQueryContainer? IAggregationContainer.Filter { get; set; }

		Aggregations.IFiltersAggregation? IAggregationContainer.Filters { get; set; }

		Aggregations.IGeoBoundsAggregation? IAggregationContainer.GeoBounds { get; set; }

		Aggregations.IGeoCentroidAggregation? IAggregationContainer.GeoCentroid { get; set; }

		Aggregations.IGeoDistanceAggregation? IAggregationContainer.GeoDistance { get; set; }

		Aggregations.IGeoHashGridAggregation? IAggregationContainer.GeohashGrid { get; set; }

		Aggregations.IGeoLineAggregation? IAggregationContainer.GeoLine { get; set; }

		Aggregations.IGeoTileGridAggregation? IAggregationContainer.GeotileGrid { get; set; }

		Aggregations.IGlobalAggregation? IAggregationContainer.Global { get; set; }

		Aggregations.IHistogramAggregation? IAggregationContainer.Histogram { get; set; }

		Aggregations.IIpRangeAggregation? IAggregationContainer.IpRange { get; set; }

		Aggregations.IInferenceAggregation? IAggregationContainer.Inference { get; set; }

		Aggregations.IGeoLineAggregation? IAggregationContainer.Line { get; set; }

		Aggregations.IMatrixStatsAggregation? IAggregationContainer.MatrixStats { get; set; }

		Aggregations.IMaxAggregation? IAggregationContainer.Max { get; set; }

		Aggregations.IMaxBucketAggregation? IAggregationContainer.MaxBucket { get; set; }

		Aggregations.IMedianAbsoluteDeviationAggregation? IAggregationContainer.MedianAbsoluteDeviation { get; set; }

		Aggregations.IMinAggregation? IAggregationContainer.Min { get; set; }

		Aggregations.IMinBucketAggregation? IAggregationContainer.MinBucket { get; set; }

		Aggregations.IMissingAggregation? IAggregationContainer.Missing { get; set; }

		Aggregations.IMovingAverageAggregation? IAggregationContainer.MovingAvg { get; set; }

		Aggregations.IMovingPercentilesAggregation? IAggregationContainer.MovingPercentiles { get; set; }

		Aggregations.IMovingFunctionAggregation? IAggregationContainer.MovingFn { get; set; }

		Aggregations.IMultiTermsAggregation? IAggregationContainer.MultiTerms { get; set; }

		Aggregations.INestedAggregation? IAggregationContainer.Nested { get; set; }

		Aggregations.INormalizeAggregation? IAggregationContainer.Normalize { get; set; }

		Aggregations.IParentAggregation? IAggregationContainer.Parent { get; set; }

		Aggregations.IPercentileRanksAggregation? IAggregationContainer.PercentileRanks { get; set; }

		Aggregations.IPercentilesAggregation? IAggregationContainer.Percentiles { get; set; }

		Aggregations.IPercentilesBucketAggregation? IAggregationContainer.PercentilesBucket { get; set; }

		Aggregations.IRangeAggregation? IAggregationContainer.Range { get; set; }

		Aggregations.IRareTermsAggregation? IAggregationContainer.RareTerms { get; set; }

		Aggregations.IRateAggregation? IAggregationContainer.Rate { get; set; }

		Aggregations.IReverseNestedAggregation? IAggregationContainer.ReverseNested { get; set; }

		Aggregations.ISamplerAggregation? IAggregationContainer.Sampler { get; set; }

		Aggregations.IScriptedMetricAggregation? IAggregationContainer.ScriptedMetric { get; set; }

		Aggregations.ISerialDifferencingAggregation? IAggregationContainer.SerialDiff { get; set; }

		Aggregations.ISignificantTermsAggregation? IAggregationContainer.SignificantTerms { get; set; }

		Aggregations.ISignificantTextAggregation? IAggregationContainer.SignificantText { get; set; }

		Aggregations.IStatsAggregation? IAggregationContainer.Stats { get; set; }

		Aggregations.IStatsBucketAggregation? IAggregationContainer.StatsBucket { get; set; }

		Aggregations.IStringStatsAggregation? IAggregationContainer.StringStats { get; set; }

		Aggregations.ISumAggregation? IAggregationContainer.Sum { get; set; }

		Aggregations.ISumBucketAggregation? IAggregationContainer.SumBucket { get; set; }

		Aggregations.ITermsAggregation? IAggregationContainer.Terms { get; set; }

		Aggregations.ITopHitsAggregation? IAggregationContainer.TopHits { get; set; }

		Aggregations.ITTestAggregation? IAggregationContainer.TTest { get; set; }

		Aggregations.ITopMetricsAggregation? IAggregationContainer.TopMetrics { get; set; }

		Aggregations.IValueCountAggregation? IAggregationContainer.ValueCount { get; set; }

		Aggregations.IWeightedAverageAggregation? IAggregationContainer.WeightedAvg { get; set; }

		Aggregations.IVariableWidthHistogramAggregation? IAggregationContainer.VariableWidthHistogram { get; set; }
	}

	[ConvertAs(typeof(AggregationRange))]
	public partial interface IAggregationRange
	{
		Union<double?, string?>? From { get; set; }

		string? Key { get; set; }

		Union<double?, string?>? To { get; set; }
	}

	public partial class AggregationRange : Aggregations.IAggregationRange
	{
		[JsonInclude]
		[JsonPropertyName("from")]
		public Union<double?, string?>? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("key")]
		public string? Key { get; set; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public Union<double?, string?>? To { get; set; }
	}

	public partial class AggregationRangeDescriptor : DescriptorBase<AggregationRangeDescriptor, IAggregationRange>, IAggregationRange
	{
		Union<double?, string?>? IAggregationRange.From { get; set; }

		string? IAggregationRange.Key { get; set; }

		Union<double?, string?>? IAggregationRange.To { get; set; }
	}

	public partial class AutoDateHistogramAggregate<TBucket> : Aggregations.MultiBucketAggregate<TBucket>
	{
		[JsonInclude]
		[JsonPropertyName("interval")]
		public string Interval
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(AutoDateHistogramAggregation))]
	public partial interface IAutoDateHistogramAggregation : Aggregations.IAggregationContainerVariant
	{
		int? Buckets { get; set; }

		string? Field { get; set; }

		string? Format { get; set; }

		Aggregations.MinimumInterval? MinimumInterval { get; set; }

		string? Missing { get; set; }

		string? Offset { get; set; }

		Dictionary<string, object>? Params { get; set; }

		Script? Script { get; set; }

		string? TimeZone { get; set; }
	}

	public partial class AutoDateHistogramAggregation : Aggregations.BucketAggregationBase, Aggregations.IAutoDateHistogramAggregation
	{
		[JsonInclude]
		[JsonPropertyName("buckets")]
		public int? Buckets { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_interval")]
		public Aggregations.MinimumInterval? MinimumInterval { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public string? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("offset")]
		public string? Offset { get; set; }

		[JsonInclude]
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.AutoDateHistogram = this;
	}

	[ConvertAs(typeof(AverageAggregation))]
	public partial interface IAverageAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class AverageAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IAverageAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Avg = this;
	}

	[ConvertAs(typeof(AverageBucketAggregation))]
	public partial interface IAverageBucketAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class AverageBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IAverageBucketAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.AvgBucket = this;
	}

	public partial class BoxPlotAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("q1")]
		public double Q1
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("q2")]
		public double Q2
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("q3")]
		public double Q3
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(BoxplotAggregation))]
	public partial interface IBoxplotAggregation : Aggregations.IAggregationContainerVariant
	{
		double? Compression { get; set; }
	}

	public partial class BoxplotAggregation : Aggregations.MetricAggregationBase, Aggregations.IBoxplotAggregation
	{
		[JsonInclude]
		[JsonPropertyName("compression")]
		public double? Compression { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Boxplot = this;
	}

	public partial class BucketAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("after_key")]
		public Dictionary<string, object> AfterKey
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("bg_count")]
		public object BgCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public object DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("doc_count_error_upper_bound")]
		public object DocCountErrorUpperBound
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("sum_other_doc_count")]
		public object SumOtherDocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("interval")]
		public string Interval
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("items")]
		public Aggregations.Bucket Items
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(BucketAggregationBase))]
	public partial interface IBucketAggregationBase
	{
		Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }
	}

	public abstract partial class BucketAggregationBase : Aggregations.Aggregation, Aggregations.IBucketAggregationBase
	{
		[JsonInclude]
		[JsonPropertyName("aggregations")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }
	}

	[ConvertAs(typeof(BucketScriptAggregation))]
	public partial interface IBucketScriptAggregation : Aggregations.IAggregationContainerVariant
	{
		Script? Script { get; set; }
	}

	public partial class BucketScriptAggregation : Aggregations.PipelineAggregationBase, Aggregations.IBucketScriptAggregation
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.BucketScript = this;
	}

	[ConvertAs(typeof(BucketSelectorAggregation))]
	public partial interface IBucketSelectorAggregation : Aggregations.IAggregationContainerVariant
	{
		Script? Script { get; set; }
	}

	public partial class BucketSelectorAggregation : Aggregations.PipelineAggregationBase, Aggregations.IBucketSelectorAggregation
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.BucketSelector = this;
	}

	[ConvertAs(typeof(BucketSortAggregation))]
	public partial interface IBucketSortAggregation : Aggregations.IAggregationContainerVariant
	{
		int? From { get; set; }

		Aggregations.GapPolicy? GapPolicy { get; set; }

		int? Size { get; set; }

		Sort? Sort { get; set; }
	}

	public partial class BucketSortAggregation : Aggregations.Aggregation, Aggregations.IBucketSortAggregation
	{
		[JsonInclude]
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("gap_policy")]
		public Aggregations.GapPolicy? GapPolicy { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.BucketSort = this;
	}

	[ConvertAs(typeof(CardinalityAggregation))]
	public partial interface ICardinalityAggregation : Aggregations.IAggregationContainerVariant
	{
		int? PrecisionThreshold { get; set; }

		bool? Rehash { get; set; }
	}

	public partial class CardinalityAggregation : Aggregations.MetricAggregationBase, Aggregations.ICardinalityAggregation
	{
		[JsonInclude]
		[JsonPropertyName("precision_threshold")]
		public int? PrecisionThreshold { get; set; }

		[JsonInclude]
		[JsonPropertyName("rehash")]
		public bool? Rehash { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Cardinality = this;
	}

	[ConvertAs(typeof(ChildrenAggregation))]
	public partial interface IChildrenAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Type { get; set; }
	}

	public partial class ChildrenAggregation : Aggregations.BucketAggregationBase, Aggregations.IChildrenAggregation
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string? Type { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Children = this;
	}

	[ConvertAs(typeof(ChiSquareHeuristic))]
	public partial interface IChiSquareHeuristic
	{
		bool BackgroundIsSuperset { get; set; }

		bool IncludeNegatives { get; set; }
	}

	public partial class ChiSquareHeuristic : Aggregations.IChiSquareHeuristic
	{
		[JsonInclude]
		[JsonPropertyName("background_is_superset")]
		public bool BackgroundIsSuperset { get; set; }

		[JsonInclude]
		[JsonPropertyName("include_negatives")]
		public bool IncludeNegatives { get; set; }
	}

	[ConvertAs(typeof(ClassificationInferenceOptions))]
	public partial interface IClassificationInferenceOptions
	{
		int? NumTopClasses { get; set; }

		int? NumTopFeatureImportanceValues { get; set; }

		string? PredictionFieldType { get; set; }

		string? ResultsField { get; set; }

		string? TopClassesResultsField { get; set; }
	}

	public partial class ClassificationInferenceOptions : Aggregations.IClassificationInferenceOptions
	{
		[JsonInclude]
		[JsonPropertyName("num_top_classes")]
		public int? NumTopClasses { get; set; }

		[JsonInclude]
		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues { get; set; }

		[JsonInclude]
		[JsonPropertyName("prediction_field_type")]
		public string? PredictionFieldType { get; set; }

		[JsonInclude]
		[JsonPropertyName("results_field")]
		public string? ResultsField { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_classes_results_field")]
		public string? TopClassesResultsField { get; set; }
	}

	public partial class ClassificationInferenceOptionsDescriptor : DescriptorBase<ClassificationInferenceOptionsDescriptor, IClassificationInferenceOptions>, IClassificationInferenceOptions
	{
		int? IClassificationInferenceOptions.NumTopClasses { get; set; }

		int? IClassificationInferenceOptions.NumTopFeatureImportanceValues { get; set; }

		string? IClassificationInferenceOptions.PredictionFieldType { get; set; }

		string? IClassificationInferenceOptions.ResultsField { get; set; }

		string? IClassificationInferenceOptions.TopClassesResultsField { get; set; }
	}

	[ConvertAs(typeof(CompositeAggregation))]
	public partial interface ICompositeAggregation : Aggregations.IAggregationContainerVariant
	{
		int? Size { get; set; }

		IEnumerable<Dictionary<string, Aggregations.ICompositeAggregationSource>>? Sources { get; set; }
	}

	public partial class CompositeAggregation : Aggregations.BucketAggregationBase, Aggregations.ICompositeAggregation
	{
		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("sources")]
		public IEnumerable<Dictionary<string, Aggregations.ICompositeAggregationSource>>? Sources { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Composite = this;
	}

	[ConvertAs(typeof(CompositeAggregationSource))]
	public partial interface ICompositeAggregationSource
	{
		Aggregations.ITermsAggregation? Terms { get; set; }

		Aggregations.IHistogramAggregation? Histogram { get; set; }

		Aggregations.IDateHistogramAggregation? DateHistogram { get; set; }

		Aggregations.IGeoTileGridAggregation? GeotileGrid { get; set; }
	}

	public partial class CompositeAggregationSource : Aggregations.ICompositeAggregationSource
	{
		[JsonInclude]
		[JsonPropertyName("terms")]
		public Aggregations.ITermsAggregation? Terms { get; set; }

		[JsonInclude]
		[JsonPropertyName("histogram")]
		public Aggregations.IHistogramAggregation? Histogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("date_histogram")]
		public Aggregations.IDateHistogramAggregation? DateHistogram { get; set; }

		[JsonInclude]
		[JsonPropertyName("geotile_grid")]
		public Aggregations.IGeoTileGridAggregation? GeotileGrid { get; set; }
	}

	public partial class CompositeAggregationSourceDescriptor : DescriptorBase<CompositeAggregationSourceDescriptor, ICompositeAggregationSource>, ICompositeAggregationSource
	{
		Aggregations.ITermsAggregation? ICompositeAggregationSource.Terms { get; set; }

		Aggregations.IHistogramAggregation? ICompositeAggregationSource.Histogram { get; set; }

		Aggregations.IDateHistogramAggregation? ICompositeAggregationSource.DateHistogram { get; set; }

		Aggregations.IGeoTileGridAggregation? ICompositeAggregationSource.GeotileGrid { get; set; }
	}

	public partial class CompositeBucket
	{
	}

	public partial class CompositeBucketAggregate<TBucket> : Aggregations.MultiBucketAggregate<TBucket>
	{
		[JsonInclude]
		[JsonPropertyName("after_key")]
		public Dictionary<string, object> AfterKey
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(CumulativeCardinalityAggregation))]
	public partial interface ICumulativeCardinalityAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class CumulativeCardinalityAggregation : Aggregations.PipelineAggregationBase, Aggregations.ICumulativeCardinalityAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.CumulativeCardinality = this;
	}

	[ConvertAs(typeof(CumulativeSumAggregation))]
	public partial interface ICumulativeSumAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class CumulativeSumAggregation : Aggregations.PipelineAggregationBase, Aggregations.ICumulativeSumAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.CumulativeSum = this;
	}

	[ConvertAs(typeof(DateHistogramAggregation))]
	public partial interface IDateHistogramAggregation : Aggregations.IAggregationContainerVariant, TransformManagement.IPivotGroupByContainerVariant
	{
		Union<Aggregations.DateInterval?, Time?>? CalendarInterval { get; set; }

		string? Field { get; set; }

		Union<Aggregations.DateInterval?, Time?>? FixedInterval { get; set; }

		string? Format { get; set; }

		Union<Aggregations.DateInterval?, Time?>? Interval { get; set; }

		int? MinDocCount { get; set; }

		string? Missing { get; set; }

		Time? Offset { get; set; }

		Aggregations.IHistogramOrder? Order { get; set; }

		Dictionary<string, object>? Params { get; set; }

		Script? Script { get; set; }

		string? TimeZone { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class DateHistogramAggregation : Aggregations.BucketAggregationBase, Aggregations.IDateHistogramAggregation
	{
		[JsonInclude]
		[JsonPropertyName("calendar_interval")]
		public Union<Aggregations.DateInterval?, Time?>? CalendarInterval { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("fixed_interval")]
		public Union<Aggregations.DateInterval?, Time?>? FixedInterval { get; set; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("interval")]
		public Union<Aggregations.DateInterval?, Time?>? Interval { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public string? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("offset")]
		public Time? Offset { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Aggregations.IHistogramOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.DateHistogram = this;
		void TransformManagement.IPivotGroupByContainerVariant.WrapInContainer(TransformManagement.IPivotGroupByContainer container) => container.DateHistogram = this;
	}

	public partial class DateHistogramBucket
	{
	}

	[ConvertAs(typeof(DateRangeAggregation))]
	public partial interface IDateRangeAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Field { get; set; }

		string? Format { get; set; }

		Aggregations.Missing? Missing { get; set; }

		IEnumerable<Aggregations.IDateRangeExpression>? Ranges { get; set; }

		string? TimeZone { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class DateRangeAggregation : Aggregations.BucketAggregationBase, Aggregations.IDateRangeAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Aggregations.Missing? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("ranges")]
		public IEnumerable<Aggregations.IDateRangeExpression>? Ranges { get; set; }

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public string? TimeZone { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.DateRange = this;
	}

	[ConvertAs(typeof(DateRangeExpression))]
	public partial interface IDateRangeExpression
	{
		Union<string?, float?>? From { get; set; }

		string? FromAsString { get; set; }

		string? ToAsString { get; set; }

		string? Key { get; set; }

		Union<string?, float?>? To { get; set; }

		object? DocCount { get; set; }
	}

	public partial class DateRangeExpression : Aggregations.IDateRangeExpression
	{
		[JsonInclude]
		[JsonPropertyName("from")]
		public Union<string?, float?>? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("from_as_string")]
		public string? FromAsString { get; set; }

		[JsonInclude]
		[JsonPropertyName("to_as_string")]
		public string? ToAsString { get; set; }

		[JsonInclude]
		[JsonPropertyName("key")]
		public string? Key { get; set; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public Union<string?, float?>? To { get; set; }

		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public object? DocCount { get; set; }
	}

	public partial class DateRangeExpressionDescriptor : DescriptorBase<DateRangeExpressionDescriptor, IDateRangeExpression>, IDateRangeExpression
	{
		Union<string?, float?>? IDateRangeExpression.From { get; set; }

		string? IDateRangeExpression.FromAsString { get; set; }

		string? IDateRangeExpression.ToAsString { get; set; }

		string? IDateRangeExpression.Key { get; set; }

		Union<string?, float?>? IDateRangeExpression.To { get; set; }

		object? IDateRangeExpression.DocCount { get; set; }
	}

	[ConvertAs(typeof(DerivativeAggregation))]
	public partial interface IDerivativeAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class DerivativeAggregation : Aggregations.PipelineAggregationBase, Aggregations.IDerivativeAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Derivative = this;
	}

	[ConvertAs(typeof(DiversifiedSamplerAggregation))]
	public partial interface IDiversifiedSamplerAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.SamplerAggregationExecutionHint? ExecutionHint { get; set; }

		int? MaxDocsPerValue { get; set; }

		Script? Script { get; set; }

		int? ShardSize { get; set; }

		string? Field { get; set; }
	}

	public partial class DiversifiedSamplerAggregation : Aggregations.BucketAggregationBase, Aggregations.IDiversifiedSamplerAggregation
	{
		[JsonInclude]
		[JsonPropertyName("execution_hint")]
		public Aggregations.SamplerAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_docs_per_value")]
		public int? MaxDocsPerValue { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.DiversifiedSampler = this;
	}

	public partial class EwmaModelSettings
	{
		[JsonInclude]
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(ExtendedBounds<>))]
	public partial interface IExtendedBounds<T>
	{
		T Max { get; set; }

		T Min { get; set; }
	}

	public partial class ExtendedBounds<T> : Aggregations.IExtendedBounds<T>
	{
		[JsonInclude]
		[JsonPropertyName("max")]
		public T Max { get; set; }

		[JsonInclude]
		[JsonPropertyName("min")]
		public T Min { get; set; }
	}

	public partial class ExtendedStatsAggregate : Aggregations.StatsAggregate
	{
		[JsonInclude]
		[JsonPropertyName("std_deviation_bounds")]
		public Aggregations.StandardDeviationBounds StdDeviationBounds
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("sum_of_squares")]
		public double? SumOfSquares
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("variance")]
		public double? Variance
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("variance_population")]
		public double? VariancePopulation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("variance_sampling")]
		public double? VarianceSampling
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("std_deviation")]
		public double? StdDeviation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("std_deviation_population")]
		public double? StdDeviationPopulation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("std_deviation_sampling")]
		public double? StdDeviationSampling
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(ExtendedStatsAggregation))]
	public partial interface IExtendedStatsAggregation : Aggregations.IAggregationContainerVariant
	{
		double? Sigma { get; set; }
	}

	public partial class ExtendedStatsAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IExtendedStatsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("sigma")]
		public double? Sigma { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.ExtendedStats = this;
	}

	[ConvertAs(typeof(ExtendedStatsBucketAggregation))]
	public partial interface IExtendedStatsBucketAggregation : Aggregations.IAggregationContainerVariant
	{
		double? Sigma { get; set; }
	}

	public partial class ExtendedStatsBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IExtendedStatsBucketAggregation
	{
		[JsonInclude]
		[JsonPropertyName("sigma")]
		public double? Sigma { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.ExtendedStatsBucket = this;
	}

	public partial class FiltersAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("buckets")]
		public Union<IReadOnlyCollection<Aggregations.FiltersBucketItem>, Dictionary<string, Aggregations.FiltersBucketItem>> Buckets
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(FiltersAggregation))]
	public partial interface IFiltersAggregation : Aggregations.IAggregationContainerVariant
	{
		Union<Dictionary<string, QueryDsl.IQueryContainer>?, IEnumerable<QueryDsl.IQueryContainer>?>? Filters { get; set; }

		bool? OtherBucket { get; set; }

		string? OtherBucketKey { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class FiltersAggregation : Aggregations.BucketAggregationBase, Aggregations.IFiltersAggregation
	{
		[JsonInclude]
		[JsonPropertyName("filters")]
		public Union<Dictionary<string, QueryDsl.IQueryContainer>?, IEnumerable<QueryDsl.IQueryContainer>?>? Filters { get; set; }

		[JsonInclude]
		[JsonPropertyName("other_bucket")]
		public bool? OtherBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("other_bucket_key")]
		public string? OtherBucketKey { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Filters = this;
	}

	public partial class FiltersBucketItem
	{
		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public object DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(FormatMetricAggregationBase))]
	public partial interface IFormatMetricAggregationBase
	{
		string? Format { get; set; }
	}

	public abstract partial class FormatMetricAggregationBase : Aggregations.MetricAggregationBase, Aggregations.IFormatMetricAggregationBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }
	}

	[ConvertAs(typeof(FormattableMetricAggregation))]
	public partial interface IFormattableMetricAggregation
	{
		string? Format { get; set; }
	}

	public partial class FormattableMetricAggregation : Aggregations.MetricAggregationBase, Aggregations.IFormattableMetricAggregation
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }
	}

	[ConvertAs(typeof(GeoBounds))]
	public partial interface IGeoBounds
	{
		ILatLon BottomRight { get; set; }

		ILatLon TopLeft { get; set; }
	}

	public partial class GeoBounds : Aggregations.IGeoBounds
	{
		[JsonInclude]
		[JsonPropertyName("bottom_right")]
		public ILatLon BottomRight { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_left")]
		public ILatLon TopLeft { get; set; }
	}

	public partial class GeoBoundsAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("bounds")]
		public Aggregations.IGeoBounds Bounds
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(GeoBoundsAggregation))]
	public partial interface IGeoBoundsAggregation : Aggregations.IAggregationContainerVariant
	{
		bool? WrapLongitude { get; set; }
	}

	public partial class GeoBoundsAggregation : Aggregations.MetricAggregationBase, Aggregations.IGeoBoundsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("wrap_longitude")]
		public bool? WrapLongitude { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeoBounds = this;
	}

	public partial class GeoCentroidAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public object Count
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("location")]
		public QueryDsl.GeoLocation Location
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(GeoCentroidAggregation))]
	public partial interface IGeoCentroidAggregation : Aggregations.IAggregationContainerVariant
	{
		object? Count { get; set; }

		QueryDsl.GeoLocation? Location { get; set; }
	}

	public partial class GeoCentroidAggregation : Aggregations.MetricAggregationBase, Aggregations.IGeoCentroidAggregation
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public object? Count { get; set; }

		[JsonInclude]
		[JsonPropertyName("location")]
		public QueryDsl.GeoLocation? Location { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeoCentroid = this;
	}

	[ConvertAs(typeof(GeoDistanceAggregation))]
	public partial interface IGeoDistanceAggregation : Aggregations.IAggregationContainerVariant
	{
		GeoDistanceType? DistanceType { get; set; }

		string? Field { get; set; }

		Union<QueryDsl.GeoLocation?, string?>? Origin { get; set; }

		IEnumerable<Aggregations.IAggregationRange>? Ranges { get; set; }

		DistanceUnit? Unit { get; set; }
	}

	public partial class GeoDistanceAggregation : Aggregations.BucketAggregationBase, Aggregations.IGeoDistanceAggregation
	{
		[JsonInclude]
		[JsonPropertyName("distance_type")]
		public GeoDistanceType? DistanceType { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("origin")]
		public Union<QueryDsl.GeoLocation?, string?>? Origin { get; set; }

		[JsonInclude]
		[JsonPropertyName("ranges")]
		public IEnumerable<Aggregations.IAggregationRange>? Ranges { get; set; }

		[JsonInclude]
		[JsonPropertyName("unit")]
		public DistanceUnit? Unit { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeoDistance = this;
	}

	[ConvertAs(typeof(GeoHashGridAggregation))]
	public partial interface IGeoHashGridAggregation : Aggregations.IAggregationContainerVariant
	{
		QueryDsl.IBoundingBox? Bounds { get; set; }

		string? Field { get; set; }

		double? Precision { get; set; }

		int? ShardSize { get; set; }

		int? Size { get; set; }
	}

	public partial class GeoHashGridAggregation : Aggregations.BucketAggregationBase, Aggregations.IGeoHashGridAggregation
	{
		[JsonInclude]
		[JsonPropertyName("bounds")]
		public QueryDsl.IBoundingBox? Bounds { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public double? Precision { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeohashGrid = this;
	}

	public partial class GeoLineAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("geometry")]
		public Aggregations.LineStringGeoShape Geometry
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("properties")]
		public Aggregations.GeoLineProperties Properties
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(GeoLineAggregation))]
	public partial interface IGeoLineAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.IGeoLinePoint Point { get; set; }

		Aggregations.IGeoLineSort Sort { get; set; }

		bool? IncludeSort { get; set; }

		SortOrder? SortOrder { get; set; }

		int? Size { get; set; }
	}

	public partial class GeoLineAggregation : Aggregations.IGeoLineAggregation
	{
		[JsonInclude]
		[JsonPropertyName("point")]
		public Aggregations.IGeoLinePoint Point { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Aggregations.IGeoLineSort Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("include_sort")]
		public bool? IncludeSort { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort_order")]
		public SortOrder? SortOrder { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeoLine = this;
	}

	[ConvertAs(typeof(GeoLinePoint))]
	public partial interface IGeoLinePoint
	{
		string Field { get; set; }
	}

	public partial class GeoLinePoint : Aggregations.IGeoLinePoint
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }
	}

	public partial class GeoLineProperties
	{
		[JsonInclude]
		[JsonPropertyName("complete")]
		public bool Complete
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("sort_values")]
		public IReadOnlyCollection<double> SortValues
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(GeoLineSort))]
	public partial interface IGeoLineSort
	{
		string Field { get; set; }
	}

	public partial class GeoLineSort : Aggregations.IGeoLineSort
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }
	}

	[ConvertAs(typeof(GeoTileGridAggregation))]
	public partial interface IGeoTileGridAggregation : Aggregations.IAggregationContainerVariant, TransformManagement.IPivotGroupByContainerVariant
	{
		string? Field { get; set; }

		double? Precision { get; set; }

		int? ShardSize { get; set; }

		int? Size { get; set; }

		Aggregations.IGeoBounds? Bounds { get; set; }
	}

	public partial class GeoTileGridAggregation : Aggregations.BucketAggregationBase, Aggregations.IGeoTileGridAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public double? Precision { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("bounds")]
		public Aggregations.IGeoBounds? Bounds { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.GeotileGrid = this;
		void TransformManagement.IPivotGroupByContainerVariant.WrapInContainer(TransformManagement.IPivotGroupByContainer container) => container.GeotileGrid = this;
	}

	[ConvertAs(typeof(GlobalAggregation))]
	public partial interface IGlobalAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class GlobalAggregation : Aggregations.BucketAggregationBase, Aggregations.IGlobalAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Global = this;
	}

	[ConvertAs(typeof(GoogleNormalizedDistanceHeuristic))]
	public partial interface IGoogleNormalizedDistanceHeuristic
	{
		bool? BackgroundIsSuperset { get; set; }
	}

	public partial class GoogleNormalizedDistanceHeuristic : Aggregations.IGoogleNormalizedDistanceHeuristic
	{
		[JsonInclude]
		[JsonPropertyName("background_is_superset")]
		public bool? BackgroundIsSuperset { get; set; }
	}

	[ConvertAs(typeof(HdrMethod))]
	public partial interface IHdrMethod
	{
		int? NumberOfSignificantValueDigits { get; set; }
	}

	public partial class HdrMethod : Aggregations.IHdrMethod
	{
		[JsonInclude]
		[JsonPropertyName("number_of_significant_value_digits")]
		public int? NumberOfSignificantValueDigits { get; set; }
	}

	public partial class HdrPercentileItem
	{
		[JsonInclude]
		[JsonPropertyName("key")]
		public double Key
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HdrPercentilesAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("values")]
		public IReadOnlyCollection<Aggregations.HdrPercentileItem> Values
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(HistogramAggregation))]
	public partial interface IHistogramAggregation : Aggregations.IAggregationContainerVariant, TransformManagement.IPivotGroupByContainerVariant
	{
		string? Field { get; set; }

		double? Interval { get; set; }

		int? MinDocCount { get; set; }

		double? Missing { get; set; }

		double? Offset { get; set; }

		Aggregations.IHistogramOrder? Order { get; set; }

		Script? Script { get; set; }

		string? Format { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class HistogramAggregation : Aggregations.BucketAggregationBase, Aggregations.IHistogramAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("interval")]
		public double? Interval { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("offset")]
		public double? Offset { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Aggregations.IHistogramOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Histogram = this;
		void TransformManagement.IPivotGroupByContainerVariant.WrapInContainer(TransformManagement.IPivotGroupByContainer container) => container.Histogram = this;
	}

	[ConvertAs(typeof(HistogramOrder))]
	public partial interface IHistogramOrder
	{
		SortOrder? Count { get; set; }

		SortOrder? Key { get; set; }
	}

	public partial class HistogramOrder : Aggregations.IHistogramOrder
	{
		[JsonInclude]
		[JsonPropertyName("_count")]
		public SortOrder? Count { get; set; }

		[JsonInclude]
		[JsonPropertyName("_key")]
		public SortOrder? Key { get; set; }
	}

	public partial class HoltLinearModelSettings
	{
		[JsonInclude]
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HoltWintersModelSettings
	{
		[JsonInclude]
		[JsonPropertyName("alpha")]
		public float? Alpha
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("beta")]
		public float? Beta
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("gamma")]
		public float? Gamma
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("pad")]
		public bool? Pad
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("period")]
		public int? Period
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("type")]
		public Aggregations.HoltWintersType? Type
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(InferenceAggregation))]
	public partial interface IInferenceAggregation : Aggregations.IAggregationContainerVariant
	{
		string ModelId { get; set; }

		Aggregations.IInferenceConfigContainer? InferenceConfig { get; set; }
	}

	public partial class InferenceAggregation : Aggregations.PipelineAggregationBase, Aggregations.IInferenceAggregation
	{
		[JsonInclude]
		[JsonPropertyName("model_id")]
		public string ModelId { get; set; }

		[JsonInclude]
		[JsonPropertyName("inference_config")]
		public Aggregations.IInferenceConfigContainer? InferenceConfig { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Inference = this;
	}

	[ConvertAs(typeof(InferenceConfigContainer))]
	public partial interface IInferenceConfigContainer
	{
		Aggregations.IRegressionInferenceOptions? Regression { get; set; }

		Aggregations.IClassificationInferenceOptions? Classification { get; set; }
	}

	public partial class InferenceConfigContainer : Aggregations.IInferenceConfigContainer
	{
		[JsonInclude]
		[JsonPropertyName("regression")]
		public Aggregations.IRegressionInferenceOptions? Regression { get; set; }

		[JsonInclude]
		[JsonPropertyName("classification")]
		public Aggregations.IClassificationInferenceOptions? Classification { get; set; }
	}

	[ConvertAs(typeof(IpRangeAggregation))]
	public partial interface IIpRangeAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Field { get; set; }

		IEnumerable<Aggregations.IIpRangeAggregationRange>? Ranges { get; set; }
	}

	public partial class IpRangeAggregation : Aggregations.BucketAggregationBase, Aggregations.IIpRangeAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("ranges")]
		public IEnumerable<Aggregations.IIpRangeAggregationRange>? Ranges { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.IpRange = this;
	}

	[ConvertAs(typeof(IpRangeAggregationRange))]
	public partial interface IIpRangeAggregationRange
	{
		string? From { get; set; }

		string? Mask { get; set; }

		string? To { get; set; }
	}

	public partial class IpRangeAggregationRange : Aggregations.IIpRangeAggregationRange
	{
		[JsonInclude]
		[JsonPropertyName("from")]
		public string? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("mask")]
		public string? Mask { get; set; }

		[JsonInclude]
		[JsonPropertyName("to")]
		public string? To { get; set; }
	}

	public partial class IpRangeAggregationRangeDescriptor : DescriptorBase<IpRangeAggregationRangeDescriptor, IIpRangeAggregationRange>, IIpRangeAggregationRange
	{
		string? IIpRangeAggregationRange.From { get; set; }

		string? IIpRangeAggregationRange.Mask { get; set; }

		string? IIpRangeAggregationRange.To { get; set; }
	}

	public partial class IpRangeBucket
	{
	}

	public partial class KeyedBucket<TKey>
	{
		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public object DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("key")]
		public TKey Key
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("key_as_string")]
		public string KeyAsString
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeyedValueAggregate : Aggregations.ValueAggregate
	{
		[JsonInclude]
		[JsonPropertyName("keys")]
		public IReadOnlyCollection<string> Keys
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LineStringGeoShape
	{
		[JsonInclude]
		[JsonPropertyName("coordinates")]
		public IReadOnlyCollection<QueryDsl.GeoCoordinate> Coordinates
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(MatrixAggregation))]
	public partial interface IMatrixAggregation
	{
		Fields? Fields { get; set; }

		Dictionary<string, double>? Missing { get; set; }
	}

	public partial class MatrixAggregation : Aggregations.Aggregation, Aggregations.IMatrixAggregation
	{
		[JsonInclude]
		[JsonPropertyName("fields")]
		public Fields? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Dictionary<string, double>? Missing { get; set; }
	}

	public partial class MatrixStatsAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("correlation")]
		public Dictionary<string, double> Correlation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("covariance")]
		public Dictionary<string, double> Covariance
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("kurtosis")]
		public double Kurtosis
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("mean")]
		public double Mean
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("skewness")]
		public double Skewness
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("variance")]
		public double Variance
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("name")]
		public string Name
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(MatrixStatsAggregation))]
	public partial interface IMatrixStatsAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.MatrixStatsMode? Mode { get; set; }
	}

	public partial class MatrixStatsAggregation : Aggregations.MatrixAggregation, Aggregations.IMatrixStatsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("mode")]
		public Aggregations.MatrixStatsMode? Mode { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MatrixStats = this;
	}

	[ConvertAs(typeof(MaxAggregation))]
	public partial interface IMaxAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class MaxAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IMaxAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Max = this;
	}

	[ConvertAs(typeof(MaxBucketAggregation))]
	public partial interface IMaxBucketAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class MaxBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IMaxBucketAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MaxBucket = this;
	}

	[ConvertAs(typeof(MedianAbsoluteDeviationAggregation))]
	public partial interface IMedianAbsoluteDeviationAggregation : Aggregations.IAggregationContainerVariant
	{
		double? Compression { get; set; }
	}

	public partial class MedianAbsoluteDeviationAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IMedianAbsoluteDeviationAggregation
	{
		[JsonInclude]
		[JsonPropertyName("compression")]
		public double? Compression { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MedianAbsoluteDeviation = this;
	}

	[ConvertAs(typeof(MetricAggregationBase))]
	public partial interface IMetricAggregationBase
	{
		string? Field { get; set; }

		Aggregations.Missing? Missing { get; set; }

		Script? Script { get; set; }
	}

	public abstract partial class MetricAggregationBase : Aggregations.IMetricAggregationBase
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Aggregations.Missing? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class MetricAggregationBaseDescriptor : DescriptorBase<MetricAggregationBaseDescriptor, IMetricAggregationBase>, IMetricAggregationBase
	{
		string? IMetricAggregationBase.Field { get; set; }

		Aggregations.Missing? IMetricAggregationBase.Missing { get; set; }

		Script? IMetricAggregationBase.Script { get; set; }
	}

	[ConvertAs(typeof(MinAggregation))]
	public partial interface IMinAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class MinAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IMinAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Min = this;
	}

	[ConvertAs(typeof(MinBucketAggregation))]
	public partial interface IMinBucketAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class MinBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IMinBucketAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MinBucket = this;
	}

	[ConvertAs(typeof(MissingAggregation))]
	public partial interface IMissingAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Field { get; set; }

		Aggregations.Missing? Missing { get; set; }
	}

	public partial class MissingAggregation : Aggregations.BucketAggregationBase, Aggregations.IMissingAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Aggregations.Missing? Missing { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Missing = this;
	}

	[ConvertAs(typeof(MovingAverageAggregation))]
	public partial interface IMovingAverageAggregation : Aggregations.IAggregationContainerVariant
	{
		bool? Minimize { get; set; }

		Aggregations.MovingAverageModel? Model { get; set; }

		Aggregations.MovingAverageSettings Settings { get; set; }

		int? Predict { get; set; }

		int? Window { get; set; }
	}

	public partial class MovingAverageAggregation : Aggregations.PipelineAggregationBase, Aggregations.IMovingAverageAggregation
	{
		[JsonInclude]
		[JsonPropertyName("minimize")]
		public bool? Minimize { get; set; }

		[JsonInclude]
		[JsonPropertyName("model")]
		public Aggregations.MovingAverageModel? Model { get; set; }

		[JsonInclude]
		[JsonPropertyName("settings")]
		public Aggregations.MovingAverageSettings Settings { get; set; }

		[JsonInclude]
		[JsonPropertyName("predict")]
		public int? Predict { get; set; }

		[JsonInclude]
		[JsonPropertyName("window")]
		public int? Window { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MovingAvg = this;
	}

	[ConvertAs(typeof(MovingFunctionAggregation))]
	public partial interface IMovingFunctionAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Script { get; set; }

		int? Shift { get; set; }

		int? Window { get; set; }
	}

	public partial class MovingFunctionAggregation : Aggregations.PipelineAggregationBase, Aggregations.IMovingFunctionAggregation
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public string? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("shift")]
		public int? Shift { get; set; }

		[JsonInclude]
		[JsonPropertyName("window")]
		public int? Window { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MovingFn = this;
	}

	[ConvertAs(typeof(MovingPercentilesAggregation))]
	public partial interface IMovingPercentilesAggregation : Aggregations.IAggregationContainerVariant
	{
		int? Window { get; set; }

		int? Shift { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class MovingPercentilesAggregation : Aggregations.PipelineAggregationBase, Aggregations.IMovingPercentilesAggregation
	{
		[JsonInclude]
		[JsonPropertyName("window")]
		public int? Window { get; set; }

		[JsonInclude]
		[JsonPropertyName("shift")]
		public int? Shift { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MovingPercentiles = this;
	}

	public partial class MultiBucketAggregate<TBucket> : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("buckets")]
		public IReadOnlyCollection<TBucket> Buckets
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(MultiTermLookup))]
	public partial interface IMultiTermLookup
	{
		string Field { get; set; }
	}

	public partial class MultiTermLookup : Aggregations.IMultiTermLookup
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }
	}

	[ConvertAs(typeof(MultiTermsAggregation))]
	public partial interface IMultiTermsAggregation : Aggregations.IAggregationContainerVariant
	{
		IEnumerable<Aggregations.IMultiTermLookup> Terms { get; set; }
	}

	public partial class MultiTermsAggregation : Aggregations.BucketAggregationBase, Aggregations.IMultiTermsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("terms")]
		public IEnumerable<Aggregations.IMultiTermLookup> Terms { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.MultiTerms = this;
	}

	[ConvertAs(typeof(MutualInformationHeuristic))]
	public partial interface IMutualInformationHeuristic
	{
		bool? BackgroundIsSuperset { get; set; }

		bool? IncludeNegatives { get; set; }
	}

	public partial class MutualInformationHeuristic : Aggregations.IMutualInformationHeuristic
	{
		[JsonInclude]
		[JsonPropertyName("background_is_superset")]
		public bool? BackgroundIsSuperset { get; set; }

		[JsonInclude]
		[JsonPropertyName("include_negatives")]
		public bool? IncludeNegatives { get; set; }
	}

	[ConvertAs(typeof(NestedAggregation))]
	public partial interface INestedAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Path { get; set; }
	}

	public partial class NestedAggregation : Aggregations.BucketAggregationBase, Aggregations.INestedAggregation
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Nested = this;
	}

	[ConvertAs(typeof(NormalizeAggregation))]
	public partial interface INormalizeAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.NormalizeMethod? Method { get; set; }
	}

	public partial class NormalizeAggregation : Aggregations.PipelineAggregationBase, Aggregations.INormalizeAggregation
	{
		[JsonInclude]
		[JsonPropertyName("method")]
		public Aggregations.NormalizeMethod? Method { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Normalize = this;
	}

	[ConvertAs(typeof(ParentAggregation))]
	public partial interface IParentAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Type { get; set; }
	}

	public partial class ParentAggregation : Aggregations.BucketAggregationBase, Aggregations.IParentAggregation
	{
		[JsonInclude]
		[JsonPropertyName("type")]
		public string? Type { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Parent = this;
	}

	[ConvertAs(typeof(PercentageScoreHeuristic))]
	public partial interface IPercentageScoreHeuristic
	{
	}

	public partial class PercentageScoreHeuristic : Aggregations.IPercentageScoreHeuristic
	{
	}

	public partial class PercentileItem
	{
		[JsonInclude]
		[JsonPropertyName("percentile")]
		public double Percentile
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(PercentileRanksAggregation))]
	public partial interface IPercentileRanksAggregation : Aggregations.IAggregationContainerVariant
	{
		bool? Keyed { get; set; }

		IEnumerable<double>? Values { get; set; }

		Aggregations.IHdrMethod? Hdr { get; set; }

		Aggregations.ITDigest? Tdigest { get; set; }
	}

	public partial class PercentileRanksAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IPercentileRanksAggregation
	{
		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		[JsonInclude]
		[JsonPropertyName("values")]
		public IEnumerable<double>? Values { get; set; }

		[JsonInclude]
		[JsonPropertyName("hdr")]
		public Aggregations.IHdrMethod? Hdr { get; set; }

		[JsonInclude]
		[JsonPropertyName("tdigest")]
		public Aggregations.ITDigest? Tdigest { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.PercentileRanks = this;
	}

	public partial class PercentilesAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("items")]
		public IReadOnlyCollection<Aggregations.PercentileItem> Items
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(PercentilesAggregation))]
	public partial interface IPercentilesAggregation : Aggregations.IAggregationContainerVariant
	{
		bool? Keyed { get; set; }

		IEnumerable<double>? Percents { get; set; }

		Aggregations.IHdrMethod? Hdr { get; set; }

		Aggregations.ITDigest? Tdigest { get; set; }
	}

	public partial class PercentilesAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IPercentilesAggregation
	{
		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		[JsonInclude]
		[JsonPropertyName("percents")]
		public IEnumerable<double>? Percents { get; set; }

		[JsonInclude]
		[JsonPropertyName("hdr")]
		public Aggregations.IHdrMethod? Hdr { get; set; }

		[JsonInclude]
		[JsonPropertyName("tdigest")]
		public Aggregations.ITDigest? Tdigest { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Percentiles = this;
	}

	[ConvertAs(typeof(PercentilesBucketAggregation))]
	public partial interface IPercentilesBucketAggregation : Aggregations.IAggregationContainerVariant
	{
		IEnumerable<double>? Percents { get; set; }
	}

	public partial class PercentilesBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IPercentilesBucketAggregation
	{
		[JsonInclude]
		[JsonPropertyName("percents")]
		public IEnumerable<double>? Percents { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.PercentilesBucket = this;
	}

	[ConvertAs(typeof(PipelineAggregationBase))]
	public partial interface IPipelineAggregationBase
	{
		string? Format { get; set; }

		Aggregations.GapPolicy? GapPolicy { get; set; }
	}

	public abstract partial class PipelineAggregationBase : Aggregations.Aggregation, Aggregations.IPipelineAggregationBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("gap_policy")]
		public Aggregations.GapPolicy? GapPolicy { get; set; }
	}

	public partial class PipelineAggregationBaseDescriptor : DescriptorBase<PipelineAggregationBaseDescriptor, IPipelineAggregationBase>, IPipelineAggregationBase
	{
		string? IPipelineAggregationBase.Format { get; set; }

		Aggregations.GapPolicy? IPipelineAggregationBase.GapPolicy { get; set; }
	}

	[ConvertAs(typeof(RangeAggregation))]
	public partial interface IRangeAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Field { get; set; }

		int? Missing { get; set; }

		IEnumerable<Aggregations.IAggregationRange>? Ranges { get; set; }

		Script? Script { get; set; }

		bool? Keyed { get; set; }
	}

	public partial class RangeAggregation : Aggregations.BucketAggregationBase, Aggregations.IRangeAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public int? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("ranges")]
		public IEnumerable<Aggregations.IAggregationRange>? Ranges { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("keyed")]
		public bool? Keyed { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Range = this;
	}

	public partial class RangeBucket
	{
	}

	[ConvertAs(typeof(RareTermsAggregation))]
	public partial interface IRareTermsAggregation : Aggregations.IAggregationContainerVariant
	{
		IEnumerable<string>? Exclude { get; set; }

		string? Field { get; set; }

		object? MaxDocCount { get; set; }

		Aggregations.Missing? Missing { get; set; }

		double? Precision { get; set; }

		string? ValueType { get; set; }
	}

	public partial class RareTermsAggregation : Aggregations.BucketAggregationBase, Aggregations.IRareTermsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("exclude")]
		public IEnumerable<string>? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_doc_count")]
		public object? MaxDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Aggregations.Missing? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("precision")]
		public double? Precision { get; set; }

		[JsonInclude]
		[JsonPropertyName("value_type")]
		public string? ValueType { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.RareTerms = this;
	}

	public partial class RareTermsBucket<TKey>
	{
	}

	[ConvertAs(typeof(RateAggregation))]
	public partial interface IRateAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.DateInterval? Unit { get; set; }

		Aggregations.RateMode? Mode { get; set; }
	}

	public partial class RateAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IRateAggregation
	{
		[JsonInclude]
		[JsonPropertyName("unit")]
		public Aggregations.DateInterval? Unit { get; set; }

		[JsonInclude]
		[JsonPropertyName("mode")]
		public Aggregations.RateMode? Mode { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Rate = this;
	}

	[ConvertAs(typeof(RegressionInferenceOptions))]
	public partial interface IRegressionInferenceOptions
	{
		string? ResultsField { get; set; }

		int? NumTopFeatureImportanceValues { get; set; }
	}

	public partial class RegressionInferenceOptions : Aggregations.IRegressionInferenceOptions
	{
		[JsonInclude]
		[JsonPropertyName("results_field")]
		public string? ResultsField { get; set; }

		[JsonInclude]
		[JsonPropertyName("num_top_feature_importance_values")]
		public int? NumTopFeatureImportanceValues { get; set; }
	}

	[ConvertAs(typeof(ReverseNestedAggregation))]
	public partial interface IReverseNestedAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Path { get; set; }
	}

	public partial class ReverseNestedAggregation : Aggregations.BucketAggregationBase, Aggregations.IReverseNestedAggregation
	{
		[JsonInclude]
		[JsonPropertyName("path")]
		public string? Path { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.ReverseNested = this;
	}

	[ConvertAs(typeof(SamplerAggregation))]
	public partial interface ISamplerAggregation : Aggregations.IAggregationContainerVariant
	{
		int? ShardSize { get; set; }
	}

	public partial class SamplerAggregation : Aggregations.BucketAggregationBase, Aggregations.ISamplerAggregation
	{
		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Sampler = this;
	}

	[ConvertAs(typeof(ScriptedHeuristic))]
	public partial interface IScriptedHeuristic
	{
		Script Script { get; set; }
	}

	public partial class ScriptedHeuristic : Aggregations.IScriptedHeuristic
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Script Script { get; set; }
	}

	public partial class ScriptedMetricAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(ScriptedMetricAggregation))]
	public partial interface IScriptedMetricAggregation : Aggregations.IAggregationContainerVariant
	{
		Script? CombineScript { get; set; }

		Script? InitScript { get; set; }

		Script? MapScript { get; set; }

		Dictionary<string, object>? Params { get; set; }

		Script? ReduceScript { get; set; }
	}

	public partial class ScriptedMetricAggregation : Aggregations.MetricAggregationBase, Aggregations.IScriptedMetricAggregation
	{
		[JsonInclude]
		[JsonPropertyName("combine_script")]
		public Script? CombineScript { get; set; }

		[JsonInclude]
		[JsonPropertyName("init_script")]
		public Script? InitScript { get; set; }

		[JsonInclude]
		[JsonPropertyName("map_script")]
		public Script? MapScript { get; set; }

		[JsonInclude]
		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonInclude]
		[JsonPropertyName("reduce_script")]
		public Script? ReduceScript { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.ScriptedMetric = this;
	}

	[ConvertAs(typeof(SerialDifferencingAggregation))]
	public partial interface ISerialDifferencingAggregation : Aggregations.IAggregationContainerVariant
	{
		int? Lag { get; set; }
	}

	public partial class SerialDifferencingAggregation : Aggregations.PipelineAggregationBase, Aggregations.ISerialDifferencingAggregation
	{
		[JsonInclude]
		[JsonPropertyName("lag")]
		public int? Lag { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.SerialDiff = this;
	}

	public partial class SignificantTermsAggregate<TBucket, TKey> : Aggregations.MultiBucketAggregate<TBucket>
	{
		[JsonInclude]
		[JsonPropertyName("bg_count")]
		public object BgCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public object DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(SignificantTermsAggregation))]
	public partial interface ISignificantTermsAggregation : Aggregations.IAggregationContainerVariant
	{
		QueryDsl.IQueryContainer? BackgroundFilter { get; set; }

		Aggregations.IChiSquareHeuristic? ChiSquare { get; set; }

		IEnumerable<string>? Exclude { get; set; }

		Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		string? Field { get; set; }

		Aggregations.IGoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		IEnumerable<string>? Include { get; set; }

		object? MinDocCount { get; set; }

		Aggregations.IMutualInformationHeuristic? MutualInformation { get; set; }

		Aggregations.IPercentageScoreHeuristic? Percentage { get; set; }

		Aggregations.IScriptedHeuristic? ScriptHeuristic { get; set; }

		object? ShardMinDocCount { get; set; }

		int? ShardSize { get; set; }

		int? Size { get; set; }
	}

	public partial class SignificantTermsAggregation : Aggregations.BucketAggregationBase, Aggregations.ISignificantTermsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("background_filter")]
		public QueryDsl.IQueryContainer? BackgroundFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("chi_square")]
		public Aggregations.IChiSquareHeuristic? ChiSquare { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public IEnumerable<string>? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("execution_hint")]
		public Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("gnd")]
		public Aggregations.IGoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public IEnumerable<string>? Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public object? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("mutual_information")]
		public Aggregations.IMutualInformationHeuristic? MutualInformation { get; set; }

		[JsonInclude]
		[JsonPropertyName("percentage")]
		public Aggregations.IPercentageScoreHeuristic? Percentage { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_heuristic")]
		public Aggregations.IScriptedHeuristic? ScriptHeuristic { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_min_doc_count")]
		public object? ShardMinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.SignificantTerms = this;
	}

	public partial class SignificantTermsBucket<TKey>
	{
	}

	[ConvertAs(typeof(SignificantTextAggregation))]
	public partial interface ISignificantTextAggregation : Aggregations.IAggregationContainerVariant
	{
		QueryDsl.IQueryContainer? BackgroundFilter { get; set; }

		Aggregations.IChiSquareHeuristic? ChiSquare { get; set; }

		IEnumerable<string>? Exclude { get; set; }

		Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		string? Field { get; set; }

		bool? FilterDuplicateText { get; set; }

		Aggregations.IGoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		IEnumerable<string>? Include { get; set; }

		object? MinDocCount { get; set; }

		Aggregations.IMutualInformationHeuristic? MutualInformation { get; set; }

		Aggregations.IPercentageScoreHeuristic? Percentage { get; set; }

		Aggregations.IScriptedHeuristic? ScriptHeuristic { get; set; }

		object? ShardMinDocCount { get; set; }

		int? ShardSize { get; set; }

		int? Size { get; set; }

		Fields? SourceFields { get; set; }
	}

	public partial class SignificantTextAggregation : Aggregations.BucketAggregationBase, Aggregations.ISignificantTextAggregation
	{
		[JsonInclude]
		[JsonPropertyName("background_filter")]
		public QueryDsl.IQueryContainer? BackgroundFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("chi_square")]
		public Aggregations.IChiSquareHeuristic? ChiSquare { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public IEnumerable<string>? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("execution_hint")]
		public Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter_duplicate_text")]
		public bool? FilterDuplicateText { get; set; }

		[JsonInclude]
		[JsonPropertyName("gnd")]
		public Aggregations.IGoogleNormalizedDistanceHeuristic? Gnd { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public IEnumerable<string>? Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public object? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("mutual_information")]
		public Aggregations.IMutualInformationHeuristic? MutualInformation { get; set; }

		[JsonInclude]
		[JsonPropertyName("percentage")]
		public Aggregations.IPercentageScoreHeuristic? Percentage { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_heuristic")]
		public Aggregations.IScriptedHeuristic? ScriptHeuristic { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_min_doc_count")]
		public object? ShardMinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("source_fields")]
		public Fields? SourceFields { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.SignificantText = this;
	}

	public partial class SingleBucketAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public double DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StandardDeviationBounds
	{
		[JsonInclude]
		[JsonPropertyName("lower")]
		public double? Lower
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("upper")]
		public double? Upper
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lower_population")]
		public double? LowerPopulation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("upper_population")]
		public double? UpperPopulation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lower_sampling")]
		public double? LowerSampling
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("upper_sampling")]
		public double? UpperSampling
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StatsAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public double Count
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("sum")]
		public double Sum
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("avg")]
		public double? Avg
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("max")]
		public double? Max
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("min")]
		public double? Min
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(StatsAggregation))]
	public partial interface IStatsAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class StatsAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.IStatsAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Stats = this;
	}

	[ConvertAs(typeof(StatsBucketAggregation))]
	public partial interface IStatsBucketAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class StatsBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.IStatsBucketAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.StatsBucket = this;
	}

	public partial class StringStatsAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("count")]
		public object Count
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("min_length")]
		public int MinLength
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("max_length")]
		public int MaxLength
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("avg_length")]
		public double AvgLength
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("entropy")]
		public double Entropy
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("distribution")]
		public Dictionary<string, double>? Distribution
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(StringStatsAggregation))]
	public partial interface IStringStatsAggregation : Aggregations.IAggregationContainerVariant
	{
		bool? ShowDistribution { get; set; }
	}

	public partial class StringStatsAggregation : Aggregations.MetricAggregationBase, Aggregations.IStringStatsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("show_distribution")]
		public bool? ShowDistribution { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.StringStats = this;
	}

	[ConvertAs(typeof(SumAggregation))]
	public partial interface ISumAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class SumAggregation : Aggregations.FormatMetricAggregationBase, Aggregations.ISumAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Sum = this;
	}

	[ConvertAs(typeof(SumBucketAggregation))]
	public partial interface ISumBucketAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class SumBucketAggregation : Aggregations.PipelineAggregationBase, Aggregations.ISumBucketAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.SumBucket = this;
	}

	[ConvertAs(typeof(TDigest))]
	public partial interface ITDigest
	{
		int? Compression { get; set; }
	}

	public partial class TDigest : Aggregations.ITDigest
	{
		[JsonInclude]
		[JsonPropertyName("compression")]
		public int? Compression { get; set; }
	}

	public partial class TDigestPercentilesAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("values")]
		public Dictionary<string, double> Values
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TermsAggregate<TBucket, TKey> : Aggregations.MultiBucketAggregate<TBucket>
	{
		[JsonInclude]
		[JsonPropertyName("doc_count_error_upper_bound")]
		public object DocCountErrorUpperBound
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("sum_other_doc_count")]
		public object SumOtherDocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(TermsAggregation))]
	public partial interface ITermsAggregation : Aggregations.IAggregationContainerVariant, TransformManagement.IPivotGroupByContainerVariant
	{
		Aggregations.TermsAggregationCollectMode? CollectMode { get; set; }

		IEnumerable<string>? Exclude { get; set; }

		Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		string? Field { get; set; }

		int? MinDocCount { get; set; }

		Aggregations.Missing? Missing { get; set; }

		Aggregations.MissingOrder? MissingOrder { get; set; }

		bool? MissingBucket { get; set; }

		string? ValueType { get; set; }

		Aggregations.TermsAggregationOrder? Order { get; set; }

		Script? Script { get; set; }

		int? ShardSize { get; set; }

		bool? ShowTermDocCountError { get; set; }

		int? Size { get; set; }
	}

	public partial class TermsAggregation : Aggregations.BucketAggregationBase, Aggregations.ITermsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("collect_mode")]
		public Aggregations.TermsAggregationCollectMode? CollectMode { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude")]
		public IEnumerable<string>? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("execution_hint")]
		public Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public int? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public Aggregations.Missing? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing_order")]
		public Aggregations.MissingOrder? MissingOrder { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing_bucket")]
		public bool? MissingBucket { get; set; }

		[JsonInclude]
		[JsonPropertyName("value_type")]
		public string? ValueType { get; set; }

		[JsonInclude]
		[JsonPropertyName("order")]
		public Aggregations.TermsAggregationOrder? Order { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("show_term_doc_count_error")]
		public bool? ShowTermDocCountError { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.Terms = this;
		void TransformManagement.IPivotGroupByContainerVariant.WrapInContainer(TransformManagement.IPivotGroupByContainer container) => container.Terms = this;
	}

	[ConvertAs(typeof(TermsInclude))]
	public partial interface ITermsInclude
	{
		object NumPartitions { get; set; }

		object Partition { get; set; }
	}

	public partial class TermsInclude : Aggregations.ITermsInclude
	{
		[JsonInclude]
		[JsonPropertyName("num_partitions")]
		public object NumPartitions { get; set; }

		[JsonInclude]
		[JsonPropertyName("partition")]
		public object Partition { get; set; }
	}

	[ConvertAs(typeof(TestPopulation))]
	public partial interface ITestPopulation
	{
		string Field { get; set; }

		Script? Script { get; set; }

		QueryDsl.IQueryContainer? Filter { get; set; }
	}

	public partial class TestPopulation : Aggregations.ITestPopulation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IQueryContainer? Filter { get; set; }
	}

	public partial class TestPopulationDescriptor : DescriptorBase<TestPopulationDescriptor, ITestPopulation>, ITestPopulation
	{
		string ITestPopulation.Field { get; set; }

		Script? ITestPopulation.Script { get; set; }

		QueryDsl.IQueryContainer? ITestPopulation.Filter { get; set; }
	}

	public partial class TopHitsAggregate : Aggregations.AggregateBase
	{
	}

	[ConvertAs(typeof(TopHitsAggregation))]
	public partial interface ITopHitsAggregation : Aggregations.IAggregationContainerVariant
	{
		Fields? DocvalueFields { get; set; }

		bool? Explain { get; set; }

		int? From { get; set; }

		IHighlight? Highlight { get; set; }

		Dictionary<string, IScriptField>? ScriptFields { get; set; }

		int? Size { get; set; }

		Sort? Sort { get; set; }

		Fields? StoredFields { get; set; }

		bool? TrackScores { get; set; }

		bool? Version { get; set; }

		bool? SeqNoPrimaryTerm { get; set; }
	}

	public partial class TopHitsAggregation : Aggregations.MetricAggregationBase, Aggregations.ITopHitsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("docvalue_fields")]
		public Fields? DocvalueFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public IHighlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, IScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("stored_fields")]
		public Fields? StoredFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public bool? Version { get; set; }

		[JsonInclude]
		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.TopHits = this;
	}

	public partial class TopMetrics
	{
	}

	public partial class TopMetricsAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("top")]
		public IReadOnlyCollection<Aggregations.TopMetrics> Top
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(TopMetricsAggregation))]
	public partial interface ITopMetricsAggregation : Aggregations.IAggregationContainerVariant
	{
		IEnumerable<Aggregations.ITopMetricsValue>? Metrics { get; set; }

		int? Size { get; set; }

		Sort? Sort { get; set; }
	}

	public partial class TopMetricsAggregation : Aggregations.MetricAggregationBase, Aggregations.ITopMetricsAggregation
	{
		[JsonInclude]
		[JsonPropertyName("metrics")]
		public IEnumerable<Aggregations.ITopMetricsValue>? Metrics { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Sort? Sort { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.TopMetrics = this;
	}

	[ConvertAs(typeof(TopMetricsValue))]
	public partial interface ITopMetricsValue
	{
		string Field { get; set; }
	}

	public partial class TopMetricsValue : Aggregations.ITopMetricsValue
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }
	}

	[ConvertAs(typeof(TTestAggregation))]
	public partial interface ITTestAggregation : Aggregations.IAggregationContainerVariant
	{
		Aggregations.ITestPopulation? a { get; set; }

		Aggregations.ITestPopulation? b { get; set; }

		Aggregations.TTestType? Type { get; set; }
	}

	public partial class TTestAggregation : Aggregations.Aggregation, Aggregations.ITTestAggregation
	{
		[JsonInclude]
		[JsonPropertyName("a")]
		public Aggregations.ITestPopulation? a { get; set; }

		[JsonInclude]
		[JsonPropertyName("b")]
		public Aggregations.ITestPopulation? b { get; set; }

		[JsonInclude]
		[JsonPropertyName("type")]
		public Aggregations.TTestType? Type { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.TTest = this;
	}

	public partial class ValueAggregate : Aggregations.AggregateBase
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("value_as_string")]
		public string? ValueAsString
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(ValueCountAggregation))]
	public partial interface IValueCountAggregation : Aggregations.IAggregationContainerVariant
	{
	}

	public partial class ValueCountAggregation : Aggregations.FormattableMetricAggregation, Aggregations.IValueCountAggregation
	{
		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.ValueCount = this;
	}

	[ConvertAs(typeof(VariableWidthHistogramAggregation))]
	public partial interface IVariableWidthHistogramAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Field { get; set; }

		int? Buckets { get; set; }

		int? ShardSize { get; set; }

		int? InitialBuffer { get; set; }
	}

	public partial class VariableWidthHistogramAggregation : Aggregations.IVariableWidthHistogramAggregation
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("buckets")]
		public int? Buckets { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_size")]
		public int? ShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("initial_buffer")]
		public int? InitialBuffer { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.VariableWidthHistogram = this;
	}

	[ConvertAs(typeof(WeightedAverageAggregation))]
	public partial interface IWeightedAverageAggregation : Aggregations.IAggregationContainerVariant
	{
		string? Format { get; set; }

		Aggregations.IWeightedAverageValue? Value { get; set; }

		Aggregations.ValueType? ValueType { get; set; }

		Aggregations.IWeightedAverageValue? Weight { get; set; }
	}

	public partial class WeightedAverageAggregation : Aggregations.Aggregation, Aggregations.IWeightedAverageAggregation
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonInclude]
		[JsonPropertyName("value")]
		public Aggregations.IWeightedAverageValue? Value { get; set; }

		[JsonInclude]
		[JsonPropertyName("value_type")]
		public Aggregations.ValueType? ValueType { get; set; }

		[JsonInclude]
		[JsonPropertyName("weight")]
		public Aggregations.IWeightedAverageValue? Weight { get; set; }

		void Aggregations.IAggregationContainerVariant.WrapInContainer(Aggregations.IAggregationContainer container) => container.WeightedAvg = this;
	}

	[ConvertAs(typeof(WeightedAverageValue))]
	public partial interface IWeightedAverageValue
	{
		string? Field { get; set; }

		double? Missing { get; set; }

		Script? Script { get; set; }
	}

	public partial class WeightedAverageValue : Aggregations.IWeightedAverageValue
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Script? Script { get; set; }
	}

	public partial class WeightedAverageValueDescriptor : DescriptorBase<WeightedAverageValueDescriptor, IWeightedAverageValue>, IWeightedAverageValue
	{
		string? IWeightedAverageValue.Field { get; set; }

		double? IWeightedAverageValue.Missing { get; set; }

		Script? IWeightedAverageValue.Script { get; set; }
	}
}
