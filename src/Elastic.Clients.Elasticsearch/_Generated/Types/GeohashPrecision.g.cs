// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

/// <summary>
/// <para>
/// A precision that can be expressed as a geohash length between 1 and 12, or a distance measure like "1km", "10m".
/// </para>
/// </summary>
[JsonConverter(typeof(GeohashPrecisionConverter))]
public sealed partial class GeohashPrecision : Union<double, string>
{
	public GeohashPrecision(double geohashLength) : base(geohashLength)
	{
	}

	public GeohashPrecision(string distance) : base(distance)
	{
	}

	public static implicit operator GeohashPrecision(double geohashLength) => new GeohashPrecision(geohashLength);
	public static implicit operator GeohashPrecision(string distance) => new GeohashPrecision(distance);
}

internal sealed partial class GeohashPrecisionConverter : System.Text.Json.Serialization.JsonConverter<GeohashPrecision>
{
	public override GeohashPrecision Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		var selector = static (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => JsonUnionSelector.ByTokenType(ref r, o, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.Number, Elastic.Clients.Elasticsearch.Serialization.JsonTokenTypes.String);
		return selector(ref reader, options) switch
		{
			Elastic.Clients.Elasticsearch.UnionTag.T1 => new GeohashPrecision(reader.ReadValue<double>(options, null)),
			Elastic.Clients.Elasticsearch.UnionTag.T2 => new GeohashPrecision(reader.ReadValue<string>(options, null)),
			_ => throw new System.InvalidOperationException($"Failed to select a union variant for type '{nameof(GeohashPrecision)}")
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, GeohashPrecision value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value.Tag)
		{
			case Elastic.Clients.Elasticsearch.UnionTag.T1:
				{
					writer.WriteValue(options, value.Value1, null);
					break;
				}

			case Elastic.Clients.Elasticsearch.UnionTag.T2:
				{
					writer.WriteValue(options, value.Value2, null);
					break;
				}

			default:
				throw new System.InvalidOperationException($"Unrecognized tag value: {value.Tag}");
		}
	}
}