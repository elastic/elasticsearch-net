// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Snapshot
{
	public partial class RepositorySettings
	{
		[JsonInclude]
		[JsonPropertyName("chunk_size")]
		public string? ChunkSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("compress")]
		public Union<string?, bool?>? Compress { get; set; }

		[JsonInclude]
		[JsonPropertyName("concurrent_streams")]
		public Union<string?, int?>? ConcurrentStreams { get; set; }

		[JsonInclude]
		[JsonPropertyName("location")]
		public string Location { get; set; }

		[JsonInclude]
		[JsonPropertyName("read_only")]
		public Union<string?, bool?>? ReadOnly { get; set; }
	}

	public sealed partial class RepositorySettingsDescriptor : SerializableDescriptorBase<RepositorySettingsDescriptor>
	{
		internal RepositorySettingsDescriptor(Action<RepositorySettingsDescriptor> configure) => configure.Invoke(this);
		public RepositorySettingsDescriptor() : base()
		{
		}

		private string? ChunkSizeValue { get; set; }

		private Union<string?, bool?>? CompressValue { get; set; }

		private Union<string?, int?>? ConcurrentStreamsValue { get; set; }

		private string LocationValue { get; set; }

		private Union<string?, bool?>? ReadOnlyValue { get; set; }

		public RepositorySettingsDescriptor ChunkSize(string? chunkSize)
		{
			ChunkSizeValue = chunkSize;
			return Self;
		}

		public RepositorySettingsDescriptor Compress(Union<string?, bool?>? compress)
		{
			CompressValue = compress;
			return Self;
		}

		public RepositorySettingsDescriptor ConcurrentStreams(Union<string?, int?>? concurrentStreams)
		{
			ConcurrentStreamsValue = concurrentStreams;
			return Self;
		}

		public RepositorySettingsDescriptor Location(string location)
		{
			LocationValue = location;
			return Self;
		}

		public RepositorySettingsDescriptor ReadOnly(Union<string?, bool?>? readOnly)
		{
			ReadOnlyValue = readOnly;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(ChunkSizeValue))
			{
				writer.WritePropertyName("chunk_size");
				writer.WriteStringValue(ChunkSizeValue);
			}

			if (CompressValue is not null)
			{
				writer.WritePropertyName("compress");
				JsonSerializer.Serialize(writer, CompressValue, options);
			}

			if (ConcurrentStreamsValue is not null)
			{
				writer.WritePropertyName("concurrent_streams");
				JsonSerializer.Serialize(writer, ConcurrentStreamsValue, options);
			}

			writer.WritePropertyName("location");
			writer.WriteStringValue(LocationValue);
			if (ReadOnlyValue is not null)
			{
				writer.WritePropertyName("read_only");
				JsonSerializer.Serialize(writer, ReadOnlyValue, options);
			}

			writer.WriteEndObject();
		}
	}
}