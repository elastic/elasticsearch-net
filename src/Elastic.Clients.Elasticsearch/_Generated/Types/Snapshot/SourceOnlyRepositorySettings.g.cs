// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Snapshot;

internal sealed partial class SourceOnlyRepositorySettingsConverter : System.Text.Json.Serialization.JsonConverter<SourceOnlyRepositorySettings>
{
	private static readonly System.Text.Json.JsonEncodedText PropChunkSize = System.Text.Json.JsonEncodedText.Encode("chunk_size");
	private static readonly System.Text.Json.JsonEncodedText PropCompress = System.Text.Json.JsonEncodedText.Encode("compress");
	private static readonly System.Text.Json.JsonEncodedText PropDelegateType = System.Text.Json.JsonEncodedText.Encode("delegate_type");
	private static readonly System.Text.Json.JsonEncodedText PropMaxNumberOfSnapshots = System.Text.Json.JsonEncodedText.Encode("max_number_of_snapshots");
	private static readonly System.Text.Json.JsonEncodedText PropMaxRestoreBytesPerSec = System.Text.Json.JsonEncodedText.Encode("max_restore_bytes_per_sec");
	private static readonly System.Text.Json.JsonEncodedText PropMaxSnapshotBytesPerSec = System.Text.Json.JsonEncodedText.Encode("max_snapshot_bytes_per_sec");
	private static readonly System.Text.Json.JsonEncodedText PropReadOnly = System.Text.Json.JsonEncodedText.Encode("read_only");
	private static readonly System.Text.Json.JsonEncodedText PropReadOnly1 = System.Text.Json.JsonEncodedText.Encode("readonly");

	public override SourceOnlyRepositorySettings Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.ByteSize?> propChunkSize = default;
		LocalJsonValue<bool?> propCompress = default;
		LocalJsonValue<string?> propDelegateType = default;
		LocalJsonValue<int?> propMaxNumberOfSnapshots = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.ByteSize?> propMaxRestoreBytesPerSec = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.ByteSize?> propMaxSnapshotBytesPerSec = default;
		LocalJsonValue<bool?> propReadOnly = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propChunkSize.TryRead(ref reader, options, PropChunkSize))
			{
				continue;
			}

			if (propCompress.TryRead(ref reader, options, PropCompress))
			{
				continue;
			}

			if (propDelegateType.TryRead(ref reader, options, PropDelegateType))
			{
				continue;
			}

			if (propMaxNumberOfSnapshots.TryRead(ref reader, options, PropMaxNumberOfSnapshots))
			{
				continue;
			}

			if (propMaxRestoreBytesPerSec.TryRead(ref reader, options, PropMaxRestoreBytesPerSec))
			{
				continue;
			}

			if (propMaxSnapshotBytesPerSec.TryRead(ref reader, options, PropMaxSnapshotBytesPerSec))
			{
				continue;
			}

			if (propReadOnly.TryRead(ref reader, options, PropReadOnly) || propReadOnly.TryRead(ref reader, options, PropReadOnly1))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new SourceOnlyRepositorySettings
		{
			ChunkSize = propChunkSize.Value
,
			Compress = propCompress.Value
,
			DelegateType = propDelegateType.Value
,
			MaxNumberOfSnapshots = propMaxNumberOfSnapshots.Value
,
			MaxRestoreBytesPerSec = propMaxRestoreBytesPerSec.Value
,
			MaxSnapshotBytesPerSec = propMaxSnapshotBytesPerSec.Value
,
			ReadOnly = propReadOnly.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, SourceOnlyRepositorySettings value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropChunkSize, value.ChunkSize);
		writer.WriteProperty(options, PropCompress, value.Compress);
		writer.WriteProperty(options, PropDelegateType, value.DelegateType);
		writer.WriteProperty(options, PropMaxNumberOfSnapshots, value.MaxNumberOfSnapshots);
		writer.WriteProperty(options, PropMaxRestoreBytesPerSec, value.MaxRestoreBytesPerSec);
		writer.WriteProperty(options, PropMaxSnapshotBytesPerSec, value.MaxSnapshotBytesPerSec);
		writer.WriteProperty(options, PropReadOnly, value.ReadOnly);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(SourceOnlyRepositorySettingsConverter))]
public sealed partial class SourceOnlyRepositorySettings
{
	public Elastic.Clients.Elasticsearch.ByteSize? ChunkSize { get; set; }
	public bool? Compress { get; set; }
	public string? DelegateType { get; set; }
	public int? MaxNumberOfSnapshots { get; set; }
	public Elastic.Clients.Elasticsearch.ByteSize? MaxRestoreBytesPerSec { get; set; }
	public Elastic.Clients.Elasticsearch.ByteSize? MaxSnapshotBytesPerSec { get; set; }
	public bool? ReadOnly { get; set; }
}

public sealed partial class SourceOnlyRepositorySettingsDescriptor : SerializableDescriptor<SourceOnlyRepositorySettingsDescriptor>
{
	internal SourceOnlyRepositorySettingsDescriptor(Action<SourceOnlyRepositorySettingsDescriptor> configure) => configure.Invoke(this);

	public SourceOnlyRepositorySettingsDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.ByteSize? ChunkSizeValue { get; set; }
	private bool? CompressValue { get; set; }
	private string? DelegateTypeValue { get; set; }
	private int? MaxNumberOfSnapshotsValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MaxRestoreBytesPerSecValue { get; set; }
	private Elastic.Clients.Elasticsearch.ByteSize? MaxSnapshotBytesPerSecValue { get; set; }
	private bool? ReadOnlyValue { get; set; }

	public SourceOnlyRepositorySettingsDescriptor ChunkSize(Elastic.Clients.Elasticsearch.ByteSize? chunkSize)
	{
		ChunkSizeValue = chunkSize;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor Compress(bool? compress = true)
	{
		CompressValue = compress;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor DelegateType(string? delegateType)
	{
		DelegateTypeValue = delegateType;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor MaxNumberOfSnapshots(int? maxNumberOfSnapshots)
	{
		MaxNumberOfSnapshotsValue = maxNumberOfSnapshots;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor MaxRestoreBytesPerSec(Elastic.Clients.Elasticsearch.ByteSize? maxRestoreBytesPerSec)
	{
		MaxRestoreBytesPerSecValue = maxRestoreBytesPerSec;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor MaxSnapshotBytesPerSec(Elastic.Clients.Elasticsearch.ByteSize? maxSnapshotBytesPerSec)
	{
		MaxSnapshotBytesPerSecValue = maxSnapshotBytesPerSec;
		return Self;
	}

	public SourceOnlyRepositorySettingsDescriptor ReadOnly(bool? readOnly = true)
	{
		ReadOnlyValue = readOnly;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ChunkSizeValue is not null)
		{
			writer.WritePropertyName("chunk_size");
			JsonSerializer.Serialize(writer, ChunkSizeValue, options);
		}

		if (CompressValue.HasValue)
		{
			writer.WritePropertyName("compress");
			writer.WriteBooleanValue(CompressValue.Value);
		}

		if (!string.IsNullOrEmpty(DelegateTypeValue))
		{
			writer.WritePropertyName("delegate_type");
			writer.WriteStringValue(DelegateTypeValue);
		}

		if (MaxNumberOfSnapshotsValue.HasValue)
		{
			writer.WritePropertyName("max_number_of_snapshots");
			writer.WriteNumberValue(MaxNumberOfSnapshotsValue.Value);
		}

		if (MaxRestoreBytesPerSecValue is not null)
		{
			writer.WritePropertyName("max_restore_bytes_per_sec");
			JsonSerializer.Serialize(writer, MaxRestoreBytesPerSecValue, options);
		}

		if (MaxSnapshotBytesPerSecValue is not null)
		{
			writer.WritePropertyName("max_snapshot_bytes_per_sec");
			JsonSerializer.Serialize(writer, MaxSnapshotBytesPerSecValue, options);
		}

		if (ReadOnlyValue.HasValue)
		{
			writer.WritePropertyName("read_only");
			writer.WriteBooleanValue(ReadOnlyValue.Value);
		}

		writer.WriteEndObject();
	}
}