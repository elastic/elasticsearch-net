// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Enrich;

internal sealed partial class EnrichPolicyConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy>
{
	private static readonly System.Text.Json.JsonEncodedText PropElasticsearchVersion = System.Text.Json.JsonEncodedText.Encode("elasticsearch_version");
	private static readonly System.Text.Json.JsonEncodedText PropEnrichFields = System.Text.Json.JsonEncodedText.Encode("enrich_fields");
	private static readonly System.Text.Json.JsonEncodedText PropIndices = System.Text.Json.JsonEncodedText.Encode("indices");
	private static readonly System.Text.Json.JsonEncodedText PropMatchField = System.Text.Json.JsonEncodedText.Encode("match_field");
	private static readonly System.Text.Json.JsonEncodedText PropName = System.Text.Json.JsonEncodedText.Encode("name");
	private static readonly System.Text.Json.JsonEncodedText PropQuery = System.Text.Json.JsonEncodedText.Encode("query");

	public override Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propElasticsearchVersion = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields> propEnrichFields = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Indices> propIndices = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field> propMatchField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Name?> propName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.QueryDsl.Query?> propQuery = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propElasticsearchVersion.TryReadProperty(ref reader, options, PropElasticsearchVersion, null))
			{
				continue;
			}

			if (propEnrichFields.TryReadProperty(ref reader, options, PropEnrichFields, static Elastic.Clients.Elasticsearch.Fields (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.SingleOrManyFieldsMarker))))
			{
				continue;
			}

			if (propIndices.TryReadProperty(ref reader, options, PropIndices, null))
			{
				continue;
			}

			if (propMatchField.TryReadProperty(ref reader, options, PropMatchField, null))
			{
				continue;
			}

			if (propName.TryReadProperty(ref reader, options, PropName, null))
			{
				continue;
			}

			if (propQuery.TryReadProperty(ref reader, options, PropQuery, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			ElasticsearchVersion = propElasticsearchVersion.Value,
			EnrichFields = propEnrichFields.Value,
			Indices = propIndices.Value,
			MatchField = propMatchField.Value,
			Name = propName.Value,
			Query = propQuery.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropElasticsearchVersion, value.ElasticsearchVersion, null, null);
		writer.WriteProperty(options, PropEnrichFields, value.EnrichFields, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.SingleOrManyFieldsMarker)));
		writer.WriteProperty(options, PropIndices, value.Indices, null, null);
		writer.WriteProperty(options, PropMatchField, value.MatchField, null, null);
		writer.WriteProperty(options, PropName, value.Name, null, null);
		writer.WriteProperty(options, PropQuery, value.Query, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyConverter))]
public sealed partial class EnrichPolicy
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public EnrichPolicy(Elastic.Clients.Elasticsearch.Fields enrichFields, Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Field matchField)
	{
		EnrichFields = enrichFields;
		Indices = indices;
		MatchField = matchField;
	}
#if NET7_0_OR_GREATER
	public EnrichPolicy()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public EnrichPolicy()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	public string? ElasticsearchVersion { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.Fields EnrichFields { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.Indices Indices { get; set; }
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.Field MatchField { get; set; }
	public Elastic.Clients.Elasticsearch.Name? Name { get; set; }
	public Elastic.Clients.Elasticsearch.QueryDsl.Query? Query { get; set; }
}

public readonly partial struct EnrichPolicyDescriptor<TDocument>
{
	internal Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public EnrichPolicyDescriptor(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public EnrichPolicyDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument>(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy instance) => new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument>(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> descriptor) => descriptor.Instance;

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> ElasticsearchVersion(string? value)
	{
		Instance.ElasticsearchVersion = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> EnrichFields(Elastic.Clients.Elasticsearch.Fields value)
	{
		Instance.EnrichFields = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> EnrichFields(params System.Linq.Expressions.Expression<System.Func<TDocument, object?>>[] value)
	{
		Instance.EnrichFields = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices value)
	{
		Instance.Indices = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> MatchField(Elastic.Clients.Elasticsearch.Field value)
	{
		Instance.MatchField = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> MatchField(System.Linq.Expressions.Expression<System.Func<TDocument, object?>> value)
	{
		Instance.MatchField = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> Name(Elastic.Clients.Elasticsearch.Name? value)
	{
		Instance.Name = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? value)
	{
		Instance.Query = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument> Query(System.Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> action)
	{
		Instance.Query = Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>.Build(action);
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy Build(System.Action<Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument>> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor<TDocument>(new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}

public readonly partial struct EnrichPolicyDescriptor
{
	internal Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public EnrichPolicyDescriptor(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public EnrichPolicyDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy instance) => new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor descriptor) => descriptor.Instance;

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor ElasticsearchVersion(string? value)
	{
		Instance.ElasticsearchVersion = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor EnrichFields(Elastic.Clients.Elasticsearch.Fields value)
	{
		Instance.EnrichFields = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor EnrichFields<T>(params System.Linq.Expressions.Expression<System.Func<T, object?>>[] value)
	{
		Instance.EnrichFields = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor Indices(Elastic.Clients.Elasticsearch.Indices value)
	{
		Instance.Indices = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor MatchField(Elastic.Clients.Elasticsearch.Field value)
	{
		Instance.MatchField = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor MatchField<T>(System.Linq.Expressions.Expression<System.Func<T, object?>> value)
	{
		Instance.MatchField = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor Name(Elastic.Clients.Elasticsearch.Name? value)
	{
		Instance.Name = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? value)
	{
		Instance.Query = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor Query(System.Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> action)
	{
		Instance.Query = Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor.Build(action);
		return this;
	}

	public Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor Query<T>(System.Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<T>> action)
	{
		Instance.Query = Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<T>.Build(action);
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy Build(System.Action<Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicyDescriptor(new Elastic.Clients.Elasticsearch.Enrich.EnrichPolicy(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}