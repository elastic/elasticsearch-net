// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.DanglingIndices;

internal sealed partial class DanglingIndexConverter : System.Text.Json.Serialization.JsonConverter<DanglingIndex>
{
	private static readonly System.Text.Json.JsonEncodedText PropCreationDateMillis = System.Text.Json.JsonEncodedText.Encode("creation_date_millis");
	private static readonly System.Text.Json.JsonEncodedText PropIndexName = System.Text.Json.JsonEncodedText.Encode("index_name");
	private static readonly System.Text.Json.JsonEncodedText PropIndexUuid = System.Text.Json.JsonEncodedText.Encode("index_uuid");
	private static readonly System.Text.Json.JsonEncodedText PropNodeIds = System.Text.Json.JsonEncodedText.Encode("node_ids");

	public override DanglingIndex Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<long> propCreationDateMillis = default;
		LocalJsonValue<string> propIndexName = default;
		LocalJsonValue<string> propIndexUuid = default;
		LocalJsonValue<IReadOnlyCollection<string>> propNodeIds = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propCreationDateMillis.TryRead(ref reader, options, PropCreationDateMillis))
			{
				continue;
			}

			if (propIndexName.TryRead(ref reader, options, PropIndexName))
			{
				continue;
			}

			if (propIndexUuid.TryRead(ref reader, options, PropIndexUuid))
			{
				continue;
			}

			if (propNodeIds.TryRead(ref reader, options, PropNodeIds, typeof(SingleOrManyMarker<IReadOnlyCollection<string>, string>)))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new DanglingIndex
		{
			CreationDateMillis = propCreationDateMillis.Value
,
			IndexName = propIndexName.Value
,
			IndexUuid = propIndexUuid.Value
,
			NodeIds = propNodeIds.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DanglingIndex value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropCreationDateMillis, value.CreationDateMillis);
		writer.WriteProperty(options, PropIndexName, value.IndexName);
		writer.WriteProperty(options, PropIndexUuid, value.IndexUuid);
		writer.WriteProperty(options, PropNodeIds, value.NodeIds, null, typeof(SingleOrManyMarker<IReadOnlyCollection<string>, string>));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(DanglingIndexConverter))]
public sealed partial class DanglingIndex
{
	public long CreationDateMillis { get; init; }
	public string IndexName { get; init; }
	public string IndexUuid { get; init; }
	public IReadOnlyCollection<string> NodeIds { get; init; }
}