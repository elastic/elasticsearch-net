// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class MigrateReindex
{
	/// <summary>
	/// <para>
	/// Reindex mode. Currently only 'upgrade' is supported.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("mode")]
	public Elastic.Clients.Elasticsearch.IndexManagement.ModeEnum Mode { get; set; }

	/// <summary>
	/// <para>
	/// The source index or data stream (only data streams are currently supported).
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("source")]
	public Elastic.Clients.Elasticsearch.IndexManagement.SourceIndex Source { get; set; }
}

public sealed partial class MigrateReindexDescriptor : SerializableDescriptor<MigrateReindexDescriptor>
{
	internal MigrateReindexDescriptor(Action<MigrateReindexDescriptor> configure) => configure.Invoke(this);

	public MigrateReindexDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.IndexManagement.ModeEnum ModeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SourceIndex SourceValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SourceIndexDescriptor SourceDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SourceIndexDescriptor> SourceDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// Reindex mode. Currently only 'upgrade' is supported.
	/// </para>
	/// </summary>
	public MigrateReindexDescriptor Mode(Elastic.Clients.Elasticsearch.IndexManagement.ModeEnum mode)
	{
		ModeValue = mode;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The source index or data stream (only data streams are currently supported).
	/// </para>
	/// </summary>
	public MigrateReindexDescriptor Source(Elastic.Clients.Elasticsearch.IndexManagement.SourceIndex source)
	{
		SourceDescriptor = null;
		SourceDescriptorAction = null;
		SourceValue = source;
		return Self;
	}

	public MigrateReindexDescriptor Source(Elastic.Clients.Elasticsearch.IndexManagement.SourceIndexDescriptor descriptor)
	{
		SourceValue = null;
		SourceDescriptorAction = null;
		SourceDescriptor = descriptor;
		return Self;
	}

	public MigrateReindexDescriptor Source(Action<Elastic.Clients.Elasticsearch.IndexManagement.SourceIndexDescriptor> configure)
	{
		SourceValue = null;
		SourceDescriptor = null;
		SourceDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("mode");
		JsonSerializer.Serialize(writer, ModeValue, options);
		if (SourceDescriptor is not null)
		{
			writer.WritePropertyName("source");
			JsonSerializer.Serialize(writer, SourceDescriptor, options);
		}
		else if (SourceDescriptorAction is not null)
		{
			writer.WritePropertyName("source");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SourceIndexDescriptor(SourceDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("source");
			JsonSerializer.Serialize(writer, SourceValue, options);
		}

		writer.WriteEndObject();
	}
}