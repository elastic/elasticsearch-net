// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class IndexRoutingAllocation
	{
		[JsonInclude]
		[JsonPropertyName("enable")]
		public Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationOptions? Enable { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInclude? Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("initial_recovery")]
		public Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInitialRecovery? InitialRecovery { get; set; }

		[JsonInclude]
		[JsonPropertyName("disk")]
		public Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationDisk? Disk { get; set; }
	}

	public sealed partial class IndexRoutingAllocationDescriptor : DescriptorBase<IndexRoutingAllocationDescriptor>
	{
		public IndexRoutingAllocationDescriptor()
		{
		}

		internal IndexRoutingAllocationDescriptor(Action<IndexRoutingAllocationDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationOptions? EnableValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInclude? IncludeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInitialRecovery? InitialRecoveryValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationDisk? DiskValue { get; private set; }

		internal IndexRoutingAllocationIncludeDescriptor IncludeDescriptor { get; private set; }

		internal IndexRoutingAllocationInitialRecoveryDescriptor InitialRecoveryDescriptor { get; private set; }

		internal IndexRoutingAllocationDiskDescriptor DiskDescriptor { get; private set; }

		internal Action<IndexRoutingAllocationIncludeDescriptor> IncludeDescriptorAction { get; private set; }

		internal Action<IndexRoutingAllocationInitialRecoveryDescriptor> InitialRecoveryDescriptorAction { get; private set; }

		internal Action<IndexRoutingAllocationDiskDescriptor> DiskDescriptorAction { get; private set; }

		public IndexRoutingAllocationDescriptor Enable(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationOptions? enable) => Assign(enable, (a, v) => a.EnableValue = v);
		public IndexRoutingAllocationDescriptor Include(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInclude? include)
		{
			IncludeDescriptor = null;
			IncludeDescriptorAction = null;
			return Assign(include, (a, v) => a.IncludeValue = v);
		}

		public IndexRoutingAllocationDescriptor Include(IndexManagement.IndexRoutingAllocationIncludeDescriptor descriptor)
		{
			IncludeValue = null;
			IncludeDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.IncludeDescriptor = v);
		}

		public IndexRoutingAllocationDescriptor Include(Action<IndexManagement.IndexRoutingAllocationIncludeDescriptor> configure)
		{
			IncludeValue = null;
			IncludeDescriptorAction = null;
			return Assign(configure, (a, v) => a.IncludeDescriptorAction = v);
		}

		public IndexRoutingAllocationDescriptor InitialRecovery(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationInitialRecovery? initialRecovery)
		{
			InitialRecoveryDescriptor = null;
			InitialRecoveryDescriptorAction = null;
			return Assign(initialRecovery, (a, v) => a.InitialRecoveryValue = v);
		}

		public IndexRoutingAllocationDescriptor InitialRecovery(IndexManagement.IndexRoutingAllocationInitialRecoveryDescriptor descriptor)
		{
			InitialRecoveryValue = null;
			InitialRecoveryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.InitialRecoveryDescriptor = v);
		}

		public IndexRoutingAllocationDescriptor InitialRecovery(Action<IndexManagement.IndexRoutingAllocationInitialRecoveryDescriptor> configure)
		{
			InitialRecoveryValue = null;
			InitialRecoveryDescriptorAction = null;
			return Assign(configure, (a, v) => a.InitialRecoveryDescriptorAction = v);
		}

		public IndexRoutingAllocationDescriptor Disk(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingAllocationDisk? disk)
		{
			DiskDescriptor = null;
			DiskDescriptorAction = null;
			return Assign(disk, (a, v) => a.DiskValue = v);
		}

		public IndexRoutingAllocationDescriptor Disk(IndexManagement.IndexRoutingAllocationDiskDescriptor descriptor)
		{
			DiskValue = null;
			DiskDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.DiskDescriptor = v);
		}

		public IndexRoutingAllocationDescriptor Disk(Action<IndexManagement.IndexRoutingAllocationDiskDescriptor> configure)
		{
			DiskValue = null;
			DiskDescriptorAction = null;
			return Assign(configure, (a, v) => a.DiskDescriptorAction = v);
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (EnableValue is not null)
			{
				writer.WritePropertyName("enable");
				JsonSerializer.Serialize(writer, EnableValue, options);
			}

			if (IncludeDescriptor is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, IncludeDescriptor, options);
			}
			else if (IncludeDescriptorAction is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, new IndexManagement.IndexRoutingAllocationIncludeDescriptor(IncludeDescriptorAction), options);
			}
			else if (IncludeValue is not null)
			{
				writer.WritePropertyName("include");
				JsonSerializer.Serialize(writer, IncludeValue, options);
			}

			if (InitialRecoveryDescriptor is not null)
			{
				writer.WritePropertyName("initial_recovery");
				JsonSerializer.Serialize(writer, InitialRecoveryDescriptor, options);
			}
			else if (InitialRecoveryDescriptorAction is not null)
			{
				writer.WritePropertyName("initial_recovery");
				JsonSerializer.Serialize(writer, new IndexManagement.IndexRoutingAllocationInitialRecoveryDescriptor(InitialRecoveryDescriptorAction), options);
			}
			else if (InitialRecoveryValue is not null)
			{
				writer.WritePropertyName("initial_recovery");
				JsonSerializer.Serialize(writer, InitialRecoveryValue, options);
			}

			if (DiskDescriptor is not null)
			{
				writer.WritePropertyName("disk");
				JsonSerializer.Serialize(writer, DiskDescriptor, options);
			}
			else if (DiskDescriptorAction is not null)
			{
				writer.WritePropertyName("disk");
				JsonSerializer.Serialize(writer, new IndexManagement.IndexRoutingAllocationDiskDescriptor(DiskDescriptorAction), options);
			}
			else if (DiskValue is not null)
			{
				writer.WritePropertyName("disk");
				JsonSerializer.Serialize(writer, DiskValue, options);
			}

			writer.WriteEndObject();
		}
	}
}