// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class IndexSettingBlocks
	{
		[JsonInclude]
		[JsonPropertyName("read_only")]
		public bool? ReadOnly { get; set; }

		[JsonInclude]
		[JsonPropertyName("read_only_allow_delete")]
		public bool? ReadOnlyAllowDelete { get; set; }

		[JsonInclude]
		[JsonPropertyName("read")]
		public bool? Read { get; set; }

		[JsonInclude]
		[JsonPropertyName("write")]
		public Union<bool?, string?>? Write { get; set; }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public bool? Metadata { get; set; }
	}

	public sealed partial class IndexSettingBlocksDescriptor : DescriptorBase<IndexSettingBlocksDescriptor>
	{
		public IndexSettingBlocksDescriptor()
		{
		}

		internal IndexSettingBlocksDescriptor(Action<IndexSettingBlocksDescriptor> configure) => configure.Invoke(this);
		internal bool? ReadOnlyValue { get; private set; }

		internal bool? ReadOnlyAllowDeleteValue { get; private set; }

		internal bool? ReadValue { get; private set; }

		internal Union<bool?, string?>? WriteValue { get; private set; }

		internal bool? MetadataValue { get; private set; }

		public IndexSettingBlocksDescriptor ReadOnly(bool? readOnly = true) => Assign(readOnly, (a, v) => a.ReadOnlyValue = v);
		public IndexSettingBlocksDescriptor ReadOnlyAllowDelete(bool? readOnlyAllowDelete = true) => Assign(readOnlyAllowDelete, (a, v) => a.ReadOnlyAllowDeleteValue = v);
		public IndexSettingBlocksDescriptor Read(bool? read = true) => Assign(read, (a, v) => a.ReadValue = v);
		public IndexSettingBlocksDescriptor Write(Union<bool?, string?>? write) => Assign(write, (a, v) => a.WriteValue = v);
		public IndexSettingBlocksDescriptor Metadata(bool? metadata = true) => Assign(metadata, (a, v) => a.MetadataValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ReadOnlyValue.HasValue)
			{
				writer.WritePropertyName("read_only");
				writer.WriteBooleanValue(ReadOnlyValue.Value);
			}

			if (ReadOnlyAllowDeleteValue.HasValue)
			{
				writer.WritePropertyName("read_only_allow_delete");
				writer.WriteBooleanValue(ReadOnlyAllowDeleteValue.Value);
			}

			if (ReadValue.HasValue)
			{
				writer.WritePropertyName("read");
				writer.WriteBooleanValue(ReadValue.Value);
			}

			if (WriteValue is not null)
			{
				writer.WritePropertyName("write");
				JsonSerializer.Serialize(writer, WriteValue, options);
			}

			if (MetadataValue.HasValue)
			{
				writer.WritePropertyName("metadata");
				writer.WriteBooleanValue(MetadataValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}