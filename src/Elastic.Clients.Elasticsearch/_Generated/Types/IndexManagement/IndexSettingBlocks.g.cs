// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

internal sealed partial class IndexSettingBlocksConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks>
{
	private static readonly System.Text.Json.JsonEncodedText PropMetadata = System.Text.Json.JsonEncodedText.Encode("metadata");
	private static readonly System.Text.Json.JsonEncodedText PropRead = System.Text.Json.JsonEncodedText.Encode("read");
	private static readonly System.Text.Json.JsonEncodedText PropReadOnly = System.Text.Json.JsonEncodedText.Encode("read_only");
	private static readonly System.Text.Json.JsonEncodedText PropReadOnlyAllowDelete = System.Text.Json.JsonEncodedText.Encode("read_only_allow_delete");
	private static readonly System.Text.Json.JsonEncodedText PropWrite = System.Text.Json.JsonEncodedText.Encode("write");

	public override Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool?> propMetadata = default;
		LocalJsonValue<bool?> propRead = default;
		LocalJsonValue<bool?> propReadOnly = default;
		LocalJsonValue<bool?> propReadOnlyAllowDelete = default;
		LocalJsonValue<bool?> propWrite = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propMetadata.TryReadProperty(ref reader, options, PropMetadata, null))
			{
				continue;
			}

			if (propRead.TryReadProperty(ref reader, options, PropRead, null))
			{
				continue;
			}

			if (propReadOnly.TryReadProperty(ref reader, options, PropReadOnly, null))
			{
				continue;
			}

			if (propReadOnlyAllowDelete.TryReadProperty(ref reader, options, PropReadOnlyAllowDelete, null))
			{
				continue;
			}

			if (propWrite.TryReadProperty(ref reader, options, PropWrite, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			Metadata = propMetadata.Value,
			Read = propRead.Value,
			ReadOnly = propReadOnly.Value,
			ReadOnlyAllowDelete = propReadOnlyAllowDelete.Value,
			Write = propWrite.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropMetadata, value.Metadata, null, null);
		writer.WriteProperty(options, PropRead, value.Read, null, null);
		writer.WriteProperty(options, PropReadOnly, value.ReadOnly, null, null);
		writer.WriteProperty(options, PropReadOnlyAllowDelete, value.ReadOnlyAllowDelete, null, null);
		writer.WriteProperty(options, PropWrite, value.Write, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksConverter))]
public sealed partial class IndexSettingBlocks
{
#if NET7_0_OR_GREATER
	public IndexSettingBlocks()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	public IndexSettingBlocks()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal IndexSettingBlocks(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	public bool? Metadata { get; set; }
	public bool? Read { get; set; }
	public bool? ReadOnly { get; set; }
	public bool? ReadOnlyAllowDelete { get; set; }
	public bool? Write { get; set; }
}

public readonly partial struct IndexSettingBlocksDescriptor
{
	internal Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public IndexSettingBlocksDescriptor(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public IndexSettingBlocksDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks instance) => new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor descriptor) => descriptor.Instance;

	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor Metadata(bool? value = true)
	{
		Instance.Metadata = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor Read(bool? value = true)
	{
		Instance.Read = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor ReadOnly(bool? value = true)
	{
		Instance.ReadOnly = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor ReadOnlyAllowDelete(bool? value = true)
	{
		Instance.ReadOnlyAllowDelete = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor Write(bool? value = true)
	{
		Instance.Write = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks Build(System.Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor>? action)
	{
		if (action is null)
		{
			return new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
		}

		var builder = new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor(new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}