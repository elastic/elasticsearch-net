// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.PutIndexTemplate
{
	[InterfaceConverterAttribute(typeof(IndexTemplateMappingDescriptorConverter<IndexTemplateMapping>))]
	public partial interface IIndexTemplateMapping
	{
		Dictionary<Elastic.Clients.Elasticsearch.IndexName, IndexManagement.IAlias>? Aliases { get; set; }

		Mapping.ITypeMapping? Mappings { get; set; }

		IndexManagement.IIndexSettings? Settings { get; set; }
	}

	public partial class IndexTemplateMapping : IndexManagement.PutIndexTemplate.IIndexTemplateMapping
	{
		[JsonInclude]
		[JsonPropertyName("aliases")]
		public Dictionary<Elastic.Clients.Elasticsearch.IndexName, IndexManagement.IAlias>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("mappings")]
		public Mapping.ITypeMapping? Mappings { get; set; }

		[JsonInclude]
		[JsonPropertyName("settings")]
		public IndexManagement.IIndexSettings? Settings { get; set; }
	}

	public partial class IndexTemplateMappingDescriptor : DescriptorBase<IndexTemplateMappingDescriptor, IIndexTemplateMapping>, IIndexTemplateMapping
	{
		Dictionary<Elastic.Clients.Elasticsearch.IndexName, IndexManagement.IAlias>? IIndexTemplateMapping.Aliases { get; set; }

		Mapping.ITypeMapping? IIndexTemplateMapping.Mappings { get; set; }

		IndexManagement.IIndexSettings? IIndexTemplateMapping.Settings { get; set; }
	}

	internal sealed class IndexTemplateMappingDescriptorConverter<TReadAs> : JsonConverter<IIndexTemplateMapping> where TReadAs : class, IIndexTemplateMapping
	{
		public override IIndexTemplateMapping Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IIndexTemplateMapping value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Aliases is not null)
			{
				writer.WritePropertyName("aliases");
				JsonSerializer.Serialize(writer, value.Aliases, options);
			}

			if (value.Mappings is not null)
			{
				writer.WritePropertyName("mappings");
				JsonSerializer.Serialize(writer, value.Mappings, options);
			}

			if (value.Settings is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, value.Settings, options);
			}

			writer.WriteEndObject();
		}
	}
}