// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class CreateFrom
{
	/// <summary>
	/// <para>
	/// Mappings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("mappings_override")]
	public Elastic.Clients.Elasticsearch.Mapping.TypeMapping? MappingsOverride { get; set; }

	/// <summary>
	/// <para>
	/// If index blocks should be removed when creating destination index (optional)
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("remove_index_blocks")]
	public bool? RemoveIndexBlocks { get; set; }

	/// <summary>
	/// <para>
	/// Settings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("settings_override")]
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? SettingsOverride { get; set; }
}

public sealed partial class CreateFromDescriptor<TDocument> : SerializableDescriptor<CreateFromDescriptor<TDocument>>
{
	internal CreateFromDescriptor(Action<CreateFromDescriptor<TDocument>> configure) => configure.Invoke(this);

	public CreateFromDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Mapping.TypeMapping? MappingsOverrideValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor<TDocument> MappingsOverrideDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor<TDocument>> MappingsOverrideDescriptorAction { get; set; }
	private bool? RemoveIndexBlocksValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? SettingsOverrideValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> SettingsOverrideDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> SettingsOverrideDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// Mappings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor<TDocument> MappingsOverride(Elastic.Clients.Elasticsearch.Mapping.TypeMapping? mappingsOverride)
	{
		MappingsOverrideDescriptor = null;
		MappingsOverrideDescriptorAction = null;
		MappingsOverrideValue = mappingsOverride;
		return Self;
	}

	public CreateFromDescriptor<TDocument> MappingsOverride(Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor<TDocument> descriptor)
	{
		MappingsOverrideValue = null;
		MappingsOverrideDescriptorAction = null;
		MappingsOverrideDescriptor = descriptor;
		return Self;
	}

	public CreateFromDescriptor<TDocument> MappingsOverride(Action<Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor<TDocument>> configure)
	{
		MappingsOverrideValue = null;
		MappingsOverrideDescriptor = null;
		MappingsOverrideDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If index blocks should be removed when creating destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor<TDocument> RemoveIndexBlocks(bool? removeIndexBlocks = true)
	{
		RemoveIndexBlocksValue = removeIndexBlocks;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor<TDocument> SettingsOverride(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? settingsOverride)
	{
		SettingsOverrideDescriptor = null;
		SettingsOverrideDescriptorAction = null;
		SettingsOverrideValue = settingsOverride;
		return Self;
	}

	public CreateFromDescriptor<TDocument> SettingsOverride(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> descriptor)
	{
		SettingsOverrideValue = null;
		SettingsOverrideDescriptorAction = null;
		SettingsOverrideDescriptor = descriptor;
		return Self;
	}

	public CreateFromDescriptor<TDocument> SettingsOverride(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> configure)
	{
		SettingsOverrideValue = null;
		SettingsOverrideDescriptor = null;
		SettingsOverrideDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MappingsOverrideDescriptor is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, MappingsOverrideDescriptor, options);
		}
		else if (MappingsOverrideDescriptorAction is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor<TDocument>(MappingsOverrideDescriptorAction), options);
		}
		else if (MappingsOverrideValue is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, MappingsOverrideValue, options);
		}

		if (RemoveIndexBlocksValue.HasValue)
		{
			writer.WritePropertyName("remove_index_blocks");
			writer.WriteBooleanValue(RemoveIndexBlocksValue.Value);
		}

		if (SettingsOverrideDescriptor is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, SettingsOverrideDescriptor, options);
		}
		else if (SettingsOverrideDescriptorAction is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>(SettingsOverrideDescriptorAction), options);
		}
		else if (SettingsOverrideValue is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, SettingsOverrideValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class CreateFromDescriptor : SerializableDescriptor<CreateFromDescriptor>
{
	internal CreateFromDescriptor(Action<CreateFromDescriptor> configure) => configure.Invoke(this);

	public CreateFromDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Mapping.TypeMapping? MappingsOverrideValue { get; set; }
	private Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor MappingsOverrideDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor> MappingsOverrideDescriptorAction { get; set; }
	private bool? RemoveIndexBlocksValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? SettingsOverrideValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor SettingsOverrideDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> SettingsOverrideDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// Mappings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor MappingsOverride(Elastic.Clients.Elasticsearch.Mapping.TypeMapping? mappingsOverride)
	{
		MappingsOverrideDescriptor = null;
		MappingsOverrideDescriptorAction = null;
		MappingsOverrideValue = mappingsOverride;
		return Self;
	}

	public CreateFromDescriptor MappingsOverride(Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor descriptor)
	{
		MappingsOverrideValue = null;
		MappingsOverrideDescriptorAction = null;
		MappingsOverrideDescriptor = descriptor;
		return Self;
	}

	public CreateFromDescriptor MappingsOverride(Action<Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor> configure)
	{
		MappingsOverrideValue = null;
		MappingsOverrideDescriptor = null;
		MappingsOverrideDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If index blocks should be removed when creating destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor RemoveIndexBlocks(bool? removeIndexBlocks = true)
	{
		RemoveIndexBlocksValue = removeIndexBlocks;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings overrides to be applied to the destination index (optional)
	/// </para>
	/// </summary>
	public CreateFromDescriptor SettingsOverride(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? settingsOverride)
	{
		SettingsOverrideDescriptor = null;
		SettingsOverrideDescriptorAction = null;
		SettingsOverrideValue = settingsOverride;
		return Self;
	}

	public CreateFromDescriptor SettingsOverride(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor descriptor)
	{
		SettingsOverrideValue = null;
		SettingsOverrideDescriptorAction = null;
		SettingsOverrideDescriptor = descriptor;
		return Self;
	}

	public CreateFromDescriptor SettingsOverride(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> configure)
	{
		SettingsOverrideValue = null;
		SettingsOverrideDescriptor = null;
		SettingsOverrideDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MappingsOverrideDescriptor is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, MappingsOverrideDescriptor, options);
		}
		else if (MappingsOverrideDescriptorAction is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Mapping.TypeMappingDescriptor(MappingsOverrideDescriptorAction), options);
		}
		else if (MappingsOverrideValue is not null)
		{
			writer.WritePropertyName("mappings_override");
			JsonSerializer.Serialize(writer, MappingsOverrideValue, options);
		}

		if (RemoveIndexBlocksValue.HasValue)
		{
			writer.WritePropertyName("remove_index_blocks");
			writer.WriteBooleanValue(RemoveIndexBlocksValue.Value);
		}

		if (SettingsOverrideDescriptor is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, SettingsOverrideDescriptor, options);
		}
		else if (SettingsOverrideDescriptorAction is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor(SettingsOverrideDescriptorAction), options);
		}
		else if (SettingsOverrideValue is not null)
		{
			writer.WritePropertyName("settings_override");
			JsonSerializer.Serialize(writer, SettingsOverrideValue, options);
		}

		writer.WriteEndObject();
	}
}