// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.Rollover
{
	public partial class RolloverConditions
	{
		[JsonInclude]
		[JsonPropertyName("max_age")]
		public Elastic.Clients.Elasticsearch.Time? MaxAge { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_docs")]
		public long? MaxDocs { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_size")]
		public string? MaxSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_size_bytes")]
		public Elastic.Clients.Elasticsearch.ByteSize? MaxSizeBytes { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_primary_shard_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_primary_shard_size_bytes")]
		public Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSizeBytes { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_age_millis")]
		public Elastic.Clients.Elasticsearch.EpochMillis? MaxAgeMillis { get; set; }
	}

	public sealed partial class RolloverConditionsDescriptor : DescriptorBase<RolloverConditionsDescriptor>
	{
		public RolloverConditionsDescriptor()
		{
		}

		internal RolloverConditionsDescriptor(Action<RolloverConditionsDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Time? MaxAgeValue { get; private set; }

		internal long? MaxDocsValue { get; private set; }

		internal string? MaxSizeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.ByteSize? MaxSizeBytesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSizeValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSizeBytesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.EpochMillis? MaxAgeMillisValue { get; private set; }

		public RolloverConditionsDescriptor MaxAge(Elastic.Clients.Elasticsearch.Time? maxAge) => Assign(maxAge, (a, v) => a.MaxAgeValue = v);
		public RolloverConditionsDescriptor MaxDocs(long? maxDocs) => Assign(maxDocs, (a, v) => a.MaxDocsValue = v);
		public RolloverConditionsDescriptor MaxSize(string? maxSize) => Assign(maxSize, (a, v) => a.MaxSizeValue = v);
		public RolloverConditionsDescriptor MaxSizeBytes(Elastic.Clients.Elasticsearch.ByteSize? maxSizeBytes) => Assign(maxSizeBytes, (a, v) => a.MaxSizeBytesValue = v);
		public RolloverConditionsDescriptor MaxPrimaryShardSize(Elastic.Clients.Elasticsearch.ByteSize? maxPrimaryShardSize) => Assign(maxPrimaryShardSize, (a, v) => a.MaxPrimaryShardSizeValue = v);
		public RolloverConditionsDescriptor MaxPrimaryShardSizeBytes(Elastic.Clients.Elasticsearch.ByteSize? maxPrimaryShardSizeBytes) => Assign(maxPrimaryShardSizeBytes, (a, v) => a.MaxPrimaryShardSizeBytesValue = v);
		public RolloverConditionsDescriptor MaxAgeMillis(Elastic.Clients.Elasticsearch.EpochMillis? maxAgeMillis) => Assign(maxAgeMillis, (a, v) => a.MaxAgeMillisValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (MaxAgeValue is not null)
			{
				writer.WritePropertyName("max_age");
				JsonSerializer.Serialize(writer, MaxAgeValue, options);
			}

			if (MaxDocsValue.HasValue)
			{
				writer.WritePropertyName("max_docs");
				writer.WriteNumberValue(MaxDocsValue.Value);
			}

			if (!string.IsNullOrEmpty(MaxSizeValue))
			{
				writer.WritePropertyName("max_size");
				writer.WriteStringValue(MaxSizeValue);
			}

			if (MaxSizeBytesValue is not null)
			{
				writer.WritePropertyName("max_size_bytes");
				JsonSerializer.Serialize(writer, MaxSizeBytesValue, options);
			}

			if (MaxPrimaryShardSizeValue is not null)
			{
				writer.WritePropertyName("max_primary_shard_size");
				JsonSerializer.Serialize(writer, MaxPrimaryShardSizeValue, options);
			}

			if (MaxPrimaryShardSizeBytesValue is not null)
			{
				writer.WritePropertyName("max_primary_shard_size_bytes");
				JsonSerializer.Serialize(writer, MaxPrimaryShardSizeBytesValue, options);
			}

			if (MaxAgeMillisValue is not null)
			{
				writer.WritePropertyName("max_age_millis");
				JsonSerializer.Serialize(writer, MaxAgeMillisValue, options);
			}

			writer.WriteEndObject();
		}
	}
}