// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

internal sealed partial class IndexSegmentSortConverter : System.Text.Json.Serialization.JsonConverter<IndexSegmentSort>
{
	private static readonly System.Text.Json.JsonEncodedText PropField = System.Text.Json.JsonEncodedText.Encode("field");
	private static readonly System.Text.Json.JsonEncodedText PropMissing = System.Text.Json.JsonEncodedText.Encode("missing");
	private static readonly System.Text.Json.JsonEncodedText PropMode = System.Text.Json.JsonEncodedText.Encode("mode");
	private static readonly System.Text.Json.JsonEncodedText PropOrder = System.Text.Json.JsonEncodedText.Encode("order");

	public override IndexSegmentSort Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields?> propField = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>?> propMissing = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>?> propMode = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>?> propOrder = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propField.TryReadProperty(ref reader, options, PropField, static Elastic.Clients.Elasticsearch.Fields? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, typeof(SingleOrManyFieldsMarker))))
			{
				continue;
			}

			if (propMissing.TryReadProperty(ref reader, options, PropMissing, static ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>(o, null)))
			{
				continue;
			}

			if (propMode.TryReadProperty(ref reader, options, PropMode, static ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>(o, null)))
			{
				continue;
			}

			if (propOrder.TryReadProperty(ref reader, options, PropOrder, static ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>(o, null)))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new IndexSegmentSort
		{
			Field = propField.Value
,
			Missing = propMissing.Value
,
			Mode = propMode.Value
,
			Order = propOrder.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, IndexSegmentSort value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropField, value.Field, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields? v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields?>(o, v, typeof(SingleOrManyFieldsMarker)));
		writer.WriteProperty(options, PropMissing, value.Missing, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>(o, v, null));
		writer.WriteProperty(options, PropMode, value.Mode, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>(o, v, null));
		writer.WriteProperty(options, PropOrder, value.Order, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>(o, v, null));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(IndexSegmentSortConverter))]
public sealed partial class IndexSegmentSort
{
	public Elastic.Clients.Elasticsearch.Fields? Field { get; set; }
	public ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? Missing { get; set; }
	public ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? Mode { get; set; }
	public ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? Order { get; set; }
}

public sealed partial class IndexSegmentSortDescriptor<TDocument> : SerializableDescriptor<IndexSegmentSortDescriptor<TDocument>>
{
	internal IndexSegmentSortDescriptor(Action<IndexSegmentSortDescriptor<TDocument>> configure) => configure.Invoke(this);

	public IndexSegmentSortDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields? FieldValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? MissingValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? ModeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? OrderValue { get; set; }

	public IndexSegmentSortDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Fields? field)
	{
		FieldValue = field;
		return Self;
	}

	public IndexSegmentSortDescriptor<TDocument> Missing(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? missing)
	{
		MissingValue = missing;
		return Self;
	}

	public IndexSegmentSortDescriptor<TDocument> Mode(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public IndexSegmentSortDescriptor<TDocument> Order(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? order)
	{
		OrderValue = order;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>(MissingValue, writer, options);
		}

		if (ModeValue is not null)
		{
			writer.WritePropertyName("mode");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>(ModeValue, writer, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>(OrderValue, writer, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class IndexSegmentSortDescriptor : SerializableDescriptor<IndexSegmentSortDescriptor>
{
	internal IndexSegmentSortDescriptor(Action<IndexSegmentSortDescriptor> configure) => configure.Invoke(this);

	public IndexSegmentSortDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields? FieldValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? MissingValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? ModeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? OrderValue { get; set; }

	public IndexSegmentSortDescriptor Field(Elastic.Clients.Elasticsearch.Fields? field)
	{
		FieldValue = field;
		return Self;
	}

	public IndexSegmentSortDescriptor Missing(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>? missing)
	{
		MissingValue = missing;
		return Self;
	}

	public IndexSegmentSortDescriptor Mode(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public IndexSegmentSortDescriptor Order(ICollection<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>? order)
	{
		OrderValue = order;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (MissingValue is not null)
		{
			writer.WritePropertyName("missing");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMissing>(MissingValue, writer, options);
		}

		if (ModeValue is not null)
		{
			writer.WritePropertyName("mode");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortMode>(ModeValue, writer, options);
		}

		if (OrderValue is not null)
		{
			writer.WritePropertyName("order");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.IndexManagement.SegmentSortOrder>(OrderValue, writer, options);
		}

		writer.WriteEndObject();
	}
}