// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases
{
	public interface IActionVariant
	{
		void WrapInContainer(IAction container);
	}

	[InterfaceConverterAttribute(typeof(ActionDescriptorConverter<Action>))]
	public partial interface IAction
	{
		[JsonInclude]
		[JsonPropertyName("add")]
		IndexManagement.UpdateAliases.IAddAction? Add { get; set; }

		[JsonInclude]
		[JsonPropertyName("remove")]
		IndexManagement.UpdateAliases.IRemoveAction? Remove { get; set; }

		[JsonInclude]
		[JsonPropertyName("remove_index")]
		IndexManagement.UpdateAliases.IRemoveIndexAction? RemoveIndex { get; set; }
	}

	public partial class Action : IndexManagement.UpdateAliases.IAction
	{
		public Action(IActionVariant query)
		{
			if (query == null)
				return;
			query.WrapInContainer(this);
		}

		private IndexManagement.UpdateAliases.IAddAction? _add;
		private IndexManagement.UpdateAliases.IRemoveAction? _remove;
		private IndexManagement.UpdateAliases.IRemoveIndexAction? _removeIndex;
		IndexManagement.UpdateAliases.IAddAction? IAction.Add { get => _add; set => _add = Set(value); }

		IndexManagement.UpdateAliases.IRemoveAction? IAction.Remove { get => _remove; set => _remove = Set(value); }

		IndexManagement.UpdateAliases.IRemoveIndexAction? IAction.RemoveIndex { get => _removeIndex; set => _removeIndex = Set(value); }

		[JsonIgnore]
		internal IActionVariant ContainedVariant { get; set; }

		private T Set<T>(T value)
			where T : IActionVariant
		{
			if (ContainedVariant != null)
				throw new Exception("TODO");
			ContainedVariant = value;
			return value;
		}
	}

	public partial class ActionDescriptor : IAction
	{
		IndexManagement.UpdateAliases.IAddAction? IAction.Add { get; set; }

		IndexManagement.UpdateAliases.IRemoveAction? IAction.Remove { get; set; }

		IndexManagement.UpdateAliases.IRemoveIndexAction? IAction.RemoveIndex { get; set; }
	}

	internal sealed class ActionDescriptorConverter<TReadAs> : JsonConverter<IAction> where TReadAs : class, IAction
	{
		public override IAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IAction value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Add is not null)
			{
				writer.WritePropertyName("add");
				JsonSerializer.Serialize(writer, value.Add, options);
			}

			if (value.Remove is not null)
			{
				writer.WritePropertyName("remove");
				JsonSerializer.Serialize(writer, value.Remove, options);
			}

			if (value.RemoveIndex is not null)
			{
				writer.WritePropertyName("remove_index");
				JsonSerializer.Serialize(writer, value.RemoveIndex, options);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IAddAction, AddAction>))]
	public partial interface IAddAction : IndexManagement.UpdateAliases.IActionVariant
	{
		Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? Aliases { get; set; }

		QueryDsl.IQueryContainer? Filter { get; set; }

		Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		string? IndexRouting { get; set; }

		bool? IsHidden { get; set; }

		bool? IsWriteIndex { get; set; }

		string? Routing { get; set; }

		string? SearchRouting { get; set; }
	}

	public partial class AddAction : IndexManagement.UpdateAliases.IAddAction
	{
		[JsonInclude]
		[JsonPropertyName("alias")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_routing")]
		public string? IndexRouting { get; set; }

		[JsonInclude]
		[JsonPropertyName("is_hidden")]
		public bool? IsHidden { get; set; }

		[JsonInclude]
		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonInclude]
		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_routing")]
		public string? SearchRouting { get; set; }

		void IndexManagement.UpdateAliases.IActionVariant.WrapInContainer(IndexManagement.UpdateAliases.IAction container) => container.Add = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRemoveAction, RemoveAction>))]
	public partial interface IRemoveAction : IndexManagement.UpdateAliases.IActionVariant
	{
		Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? Aliases { get; set; }

		Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		bool? MustExist { get; set; }
	}

	public partial class RemoveAction : IndexManagement.UpdateAliases.IRemoveAction
	{
		[JsonInclude]
		[JsonPropertyName("alias")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("must_exist")]
		public bool? MustExist { get; set; }

		void IndexManagement.UpdateAliases.IActionVariant.WrapInContainer(IndexManagement.UpdateAliases.IAction container) => container.Remove = this;
	}

	[InterfaceConverterAttribute(typeof(SimpleInterfaceConverter<IRemoveIndexAction, RemoveIndexAction>))]
	public partial interface IRemoveIndexAction : IndexManagement.UpdateAliases.IActionVariant
	{
		Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }
	}

	public partial class RemoveIndexAction : IndexManagement.UpdateAliases.IRemoveIndexAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		void IndexManagement.UpdateAliases.IActionVariant.WrapInContainer(IndexManagement.UpdateAliases.IAction container) => container.RemoveIndex = this;
	}
}