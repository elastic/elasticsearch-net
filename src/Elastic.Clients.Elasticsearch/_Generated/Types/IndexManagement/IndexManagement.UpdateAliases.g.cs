// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases
{
	public interface IActionVariant
	{
		string ActionVariantName { get; }
	}

	[JsonConverter(typeof(ActionConverter))]
	public partial class Action : IContainer
	{
		public Action(IActionVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal IActionVariant Variant { get; }
	}

	internal sealed class ActionConverter : JsonConverter<Action>
	{
		public override Action Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			reader.Read();
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = reader.GetString();
			if (propertyName == "add")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.AddAction?>(ref reader, options);
				reader.Read();
				return new Action(variant);
			}

			if (propertyName == "remove")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.RemoveAction?>(ref reader, options);
				reader.Read();
				return new Action(variant);
			}

			if (propertyName == "remove_index")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.RemoveIndexAction?>(ref reader, options);
				reader.Read();
				return new Action(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, Action value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.ActionVariantName);
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.AddAction variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.RemoveAction variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases.RemoveIndexAction variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class ActionDescriptor<T> : DescriptorBase<ActionDescriptor<T>>
	{
		public ActionDescriptor()
		{
		}

		internal ActionDescriptor(Action<ActionDescriptor<T>> configure) => configure.Invoke(this);
		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal Action Container { get; private set; }

		internal object ContainerVariantDescriptorAction { get; private set; }

		private void Set(object descriptorAction, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainerVariantDescriptorAction = descriptorAction;
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		private void Set(IActionVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new Action(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		public void Add(AddAction variant) => Set(variant, "add");
		public void Add(Action<AddActionDescriptor<T>> configure) => Set(configure, "add");
		public void Remove(RemoveAction variant) => Set(variant, "remove");
		public void Remove(Action<RemoveActionDescriptor> configure) => Set(configure, "remove");
		public void RemoveIndex(RemoveIndexAction variant) => Set(variant, "remove_index");
		public void RemoveIndex(Action<RemoveIndexActionDescriptor> configure) => Set(configure, "remove_index");
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			writer.WriteStartObject();
			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
			}

			if (ContainedVariantName == "add")
			{
				var descriptor = new AddActionDescriptor<T>();
				((Action<AddActionDescriptor<T>>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
			}

			if (ContainedVariantName == "remove")
			{
				var descriptor = new RemoveActionDescriptor();
				((Action<RemoveActionDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
			}

			if (ContainedVariantName == "remove_index")
			{
				var descriptor = new RemoveIndexActionDescriptor();
				((Action<RemoveIndexActionDescriptor>)ContainerVariantDescriptorAction).Invoke(descriptor);
				JsonSerializer.Serialize(writer, descriptor, options);
			}

			writer.WriteEndObject();
			writer.WriteEndObject();
		}
	}

	public partial class AddAction : IActionVariant
	{
		[JsonIgnore]
		string IndexManagement.UpdateAliases.IActionVariant.ActionVariantName => "add";
		[JsonInclude]
		[JsonPropertyName("alias")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("index_routing")]
		public string? IndexRouting { get; set; }

		[JsonInclude]
		[JsonPropertyName("is_hidden")]
		public bool? IsHidden { get; set; }

		[JsonInclude]
		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonInclude]
		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonInclude]
		[JsonPropertyName("search_routing")]
		public string? SearchRouting { get; set; }
	}

	public sealed partial class AddActionDescriptor<T> : DescriptorBase<AddActionDescriptor<T>>
	{
		public AddActionDescriptor()
		{
		}

		internal AddActionDescriptor(Action<AddActionDescriptor<T>> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexAlias? AliasValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexAlias? AliasesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? FilterValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexName? IndexValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Indices? IndicesValue { get; private set; }

		internal string? IndexRoutingValue { get; private set; }

		internal bool? IsHiddenValue { get; private set; }

		internal bool? IsWriteIndexValue { get; private set; }

		internal string? RoutingValue { get; private set; }

		internal string? SearchRoutingValue { get; private set; }

		internal QueryDsl.QueryContainerDescriptor<T> FilterDescriptor { get; private set; }

		internal Action<QueryDsl.QueryContainerDescriptor<T>> FilterDescriptorAction { get; private set; }

		public AddActionDescriptor<T> Alias(Elastic.Clients.Elasticsearch.IndexAlias? alias) => Assign(alias, (a, v) => a.AliasValue = v);
		public AddActionDescriptor<T> Aliases(Elastic.Clients.Elasticsearch.IndexAlias? aliases) => Assign(aliases, (a, v) => a.AliasesValue = v);
		public AddActionDescriptor<T> Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? filter)
		{
			FilterDescriptor = null;
			FilterDescriptorAction = null;
			return Assign(filter, (a, v) => a.FilterValue = v);
		}

		public AddActionDescriptor<T> Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T> descriptor)
		{
			FilterValue = null;
			FilterDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.FilterDescriptor = v);
		}

		public AddActionDescriptor<T> Filter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryContainerDescriptor<T>> configure)
		{
			FilterValue = null;
			FilterDescriptorAction = null;
			return Assign(configure, (a, v) => a.FilterDescriptorAction = v);
		}

		public AddActionDescriptor<T> Index(Elastic.Clients.Elasticsearch.IndexName? index) => Assign(index, (a, v) => a.IndexValue = v);
		public AddActionDescriptor<T> Indices(Elastic.Clients.Elasticsearch.Indices? indices) => Assign(indices, (a, v) => a.IndicesValue = v);
		public AddActionDescriptor<T> IndexRouting(string? indexRouting) => Assign(indexRouting, (a, v) => a.IndexRoutingValue = v);
		public AddActionDescriptor<T> IsHidden(bool? isHidden = true) => Assign(isHidden, (a, v) => a.IsHiddenValue = v);
		public AddActionDescriptor<T> IsWriteIndex(bool? isWriteIndex = true) => Assign(isWriteIndex, (a, v) => a.IsWriteIndexValue = v);
		public AddActionDescriptor<T> Routing(string? routing) => Assign(routing, (a, v) => a.RoutingValue = v);
		public AddActionDescriptor<T> SearchRouting(string? searchRouting) => Assign(searchRouting, (a, v) => a.SearchRoutingValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (AliasValue is not null)
			{
				writer.WritePropertyName("alias");
				JsonSerializer.Serialize(writer, AliasValue, options);
			}

			if (AliasesValue is not null)
			{
				writer.WritePropertyName("aliases");
				JsonSerializer.Serialize(writer, AliasesValue, options);
			}

			if (FilterDescriptor is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterDescriptor, options);
			}
			else if (FilterDescriptorAction is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, new QueryDsl.QueryContainerDescriptor<T>(FilterDescriptorAction), options);
			}
			else if (FilterValue is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterValue, options);
			}

			if (IndexValue is not null)
			{
				writer.WritePropertyName("index");
				JsonSerializer.Serialize(writer, IndexValue, options);
			}

			if (IndicesValue is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, IndicesValue, options);
			}

			if (IndexRoutingValue is not null)
			{
				writer.WritePropertyName("index_routing");
				JsonSerializer.Serialize(writer, IndexRoutingValue, options);
			}

			if (IsHiddenValue.HasValue)
			{
				writer.WritePropertyName("is_hidden");
				writer.WriteBooleanValue(IsHiddenValue.Value);
			}

			if (IsWriteIndexValue.HasValue)
			{
				writer.WritePropertyName("is_write_index");
				writer.WriteBooleanValue(IsWriteIndexValue.Value);
			}

			if (RoutingValue is not null)
			{
				writer.WritePropertyName("routing");
				JsonSerializer.Serialize(writer, RoutingValue, options);
			}

			if (SearchRoutingValue is not null)
			{
				writer.WritePropertyName("search_routing");
				JsonSerializer.Serialize(writer, SearchRoutingValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class RemoveAction : IActionVariant
	{
		[JsonIgnore]
		string IndexManagement.UpdateAliases.IActionVariant.ActionVariantName => "remove";
		[JsonInclude]
		[JsonPropertyName("alias")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("must_exist")]
		public bool? MustExist { get; set; }
	}

	public sealed partial class RemoveActionDescriptor : DescriptorBase<RemoveActionDescriptor>
	{
		public RemoveActionDescriptor()
		{
		}

		internal RemoveActionDescriptor(Action<RemoveActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexAlias? AliasValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexAlias? AliasesValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexName? IndexValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Indices? IndicesValue { get; private set; }

		internal bool? MustExistValue { get; private set; }

		public RemoveActionDescriptor Alias(Elastic.Clients.Elasticsearch.IndexAlias? alias) => Assign(alias, (a, v) => a.AliasValue = v);
		public RemoveActionDescriptor Aliases(Elastic.Clients.Elasticsearch.IndexAlias? aliases) => Assign(aliases, (a, v) => a.AliasesValue = v);
		public RemoveActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName? index) => Assign(index, (a, v) => a.IndexValue = v);
		public RemoveActionDescriptor Indices(Elastic.Clients.Elasticsearch.Indices? indices) => Assign(indices, (a, v) => a.IndicesValue = v);
		public RemoveActionDescriptor MustExist(bool? mustExist = true) => Assign(mustExist, (a, v) => a.MustExistValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (AliasValue is not null)
			{
				writer.WritePropertyName("alias");
				JsonSerializer.Serialize(writer, AliasValue, options);
			}

			if (AliasesValue is not null)
			{
				writer.WritePropertyName("aliases");
				JsonSerializer.Serialize(writer, AliasesValue, options);
			}

			if (IndexValue is not null)
			{
				writer.WritePropertyName("index");
				JsonSerializer.Serialize(writer, IndexValue, options);
			}

			if (IndicesValue is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, IndicesValue, options);
			}

			if (MustExistValue.HasValue)
			{
				writer.WritePropertyName("must_exist");
				writer.WriteBooleanValue(MustExistValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class RemoveIndexAction : IActionVariant
	{
		[JsonIgnore]
		string IndexManagement.UpdateAliases.IActionVariant.ActionVariantName => "remove_index";
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }
	}

	public sealed partial class RemoveIndexActionDescriptor : DescriptorBase<RemoveIndexActionDescriptor>
	{
		public RemoveIndexActionDescriptor()
		{
		}

		internal RemoveIndexActionDescriptor(Action<RemoveIndexActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName? IndexValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Indices? IndicesValue { get; private set; }

		public RemoveIndexActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName? index) => Assign(index, (a, v) => a.IndexValue = v);
		public RemoveIndexActionDescriptor Indices(Elastic.Clients.Elasticsearch.Indices? indices) => Assign(indices, (a, v) => a.IndicesValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (IndexValue is not null)
			{
				writer.WritePropertyName("index");
				JsonSerializer.Serialize(writer, IndexValue, options);
			}

			if (IndicesValue is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, IndicesValue, options);
			}

			writer.WriteEndObject();
		}
	}
}