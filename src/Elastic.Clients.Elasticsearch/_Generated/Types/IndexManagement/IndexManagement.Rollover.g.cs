// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.Rollover
{
	public partial class RolloverConditions
	{
		[JsonInclude]
		[JsonPropertyName("max_age")]
		public Time? MaxAge { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_docs")]
		public long? MaxDocs { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_size")]
		public string? MaxSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_primary_shard_size")]
		public Elastic.Clients.Elasticsearch.ByteSize? MaxPrimaryShardSize { get; set; }
	}

	[JsonConverter(typeof(RolloverConditionsDescriptorConverter))]
	public sealed partial class RolloverConditionsDescriptor : DescriptorBase<RolloverConditionsDescriptor>
	{
		internal Time? _maxAge;
		internal long? _maxDocs;
		internal string? _maxSize;
		internal Elastic.Clients.Elasticsearch.ByteSize? _maxPrimaryShardSize;
	}

	internal sealed class RolloverConditionsDescriptorConverter : JsonConverter<RolloverConditionsDescriptor>
	{
		public override RolloverConditionsDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, RolloverConditionsDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._maxAge is not null)
			{
				writer.WritePropertyName("max_age");
				JsonSerializer.Serialize(writer, value._maxAge, options);
			}

			if (value._maxDocs.HasValue)
			{
				writer.WritePropertyName("max_docs");
				writer.WriteNumberValue(value._maxDocs.Value);
			}

			if (!string.IsNullOrEmpty(value._maxSize))
			{
				writer.WritePropertyName("max_size");
				writer.WriteStringValue(value._maxSize);
			}

			if (value._maxPrimaryShardSize is not null)
			{
				writer.WritePropertyName("max_primary_shard_size");
				JsonSerializer.Serialize(writer, value._maxPrimaryShardSize, options);
			}

			writer.WriteEndObject();
		}
	}
}