// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	internal sealed class ExplainAnalyzeTokenConverter : JsonConverter<ExplainAnalyzeToken>
	{
		public override ExplainAnalyzeToken Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			if (reader.TokenType != JsonTokenType.StartObject)
				throw new JsonException("Unexpected JSON detected.");
			var variant = new ExplainAnalyzeToken();
			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					var property = reader.GetString();
					if (property == "bytes")
					{
						variant.Bytes = JsonSerializer.Deserialize<string>(ref reader, options);
						continue;
					}

					if (property == "end_offset")
					{
						variant.EndOffset = JsonSerializer.Deserialize<long>(ref reader, options);
						continue;
					}

					if (property == "keyword")
					{
						variant.Keyword = JsonSerializer.Deserialize<bool?>(ref reader, options);
						continue;
					}

					if (property == "position")
					{
						variant.Position = JsonSerializer.Deserialize<long>(ref reader, options);
						continue;
					}

					if (property == "positionLength")
					{
						variant.Positionlength = JsonSerializer.Deserialize<long>(ref reader, options);
						continue;
					}

					if (property == "start_offset")
					{
						variant.StartOffset = JsonSerializer.Deserialize<long>(ref reader, options);
						continue;
					}

					if (property == "termFrequency")
					{
						variant.Termfrequency = JsonSerializer.Deserialize<long>(ref reader, options);
						continue;
					}

					if (property == "token")
					{
						variant.Token = JsonSerializer.Deserialize<string>(ref reader, options);
						continue;
					}

					if (property == "type")
					{
						variant.Type = JsonSerializer.Deserialize<string>(ref reader, options);
						continue;
					}
				}
			}

			reader.Read();
			return variant;
		}

		public override void Write(Utf8JsonWriter writer, ExplainAnalyzeToken value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("bytes");
			writer.WriteStringValue(value.Bytes);
			writer.WritePropertyName("end_offset");
			writer.WriteNumberValue(value.EndOffset);
			if (value.Keyword.HasValue)
			{
				writer.WritePropertyName("keyword");
				writer.WriteBooleanValue(value.Keyword.Value);
			}

			writer.WritePropertyName("position");
			writer.WriteNumberValue(value.Position);
			writer.WritePropertyName("positionLength");
			writer.WriteNumberValue(value.Positionlength);
			writer.WritePropertyName("start_offset");
			writer.WriteNumberValue(value.StartOffset);
			writer.WritePropertyName("termFrequency");
			writer.WriteNumberValue(value.Termfrequency);
			writer.WritePropertyName("token");
			writer.WriteStringValue(value.Token);
			writer.WritePropertyName("type");
			writer.WriteStringValue(value.Type);
			writer.WriteEndObject();
		}
	}

	[JsonConverter(typeof(ExplainAnalyzeTokenConverter))]
	public partial class ExplainAnalyzeToken
	{
		public Dictionary<string, object> Attributes { get; init; }

		public string Bytes { get; init; }

		public long EndOffset { get; init; }

		public bool? Keyword { get; init; }

		public long Position { get; init; }

		public long Positionlength { get; init; }

		public long StartOffset { get; init; }

		public long Termfrequency { get; init; }

		public string Token { get; init; }

		public string Type { get; init; }
	}
}