// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class Translog
	{
		[JsonInclude]
		[JsonPropertyName("durability")]
		public string? Durability { get; set; }

		[JsonInclude]
		[JsonPropertyName("flush_threshold_size")]
		public string? FlushThresholdSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("retention")]
		public Elastic.Clients.Elasticsearch.IndexManagement.TranslogRetention? Retention { get; set; }
	}

	public sealed partial class TranslogDescriptor : SerializableDescriptorBase<TranslogDescriptor>
	{
		internal TranslogDescriptor(Action<TranslogDescriptor> configure) => configure.Invoke(this);
		public TranslogDescriptor() : base()
		{
		}

		private string? DurabilityValue { get; set; }

		private string? FlushThresholdSizeValue { get; set; }

		private Elastic.Clients.Elasticsearch.IndexManagement.TranslogRetention? RetentionValue { get; set; }

		private TranslogRetentionDescriptor RetentionDescriptor { get; set; }

		private Action<TranslogRetentionDescriptor> RetentionDescriptorAction { get; set; }

		public TranslogDescriptor Durability(string? durability)
		{
			DurabilityValue = durability;
			return Self;
		}

		public TranslogDescriptor FlushThresholdSize(string? flushThresholdSize)
		{
			FlushThresholdSizeValue = flushThresholdSize;
			return Self;
		}

		public TranslogDescriptor Retention(Elastic.Clients.Elasticsearch.IndexManagement.TranslogRetention? retention)
		{
			RetentionDescriptor = null;
			RetentionDescriptorAction = null;
			RetentionValue = retention;
			return Self;
		}

		public TranslogDescriptor Retention(TranslogRetentionDescriptor descriptor)
		{
			RetentionValue = null;
			RetentionDescriptorAction = null;
			RetentionDescriptor = descriptor;
			return Self;
		}

		public TranslogDescriptor Retention(Action<TranslogRetentionDescriptor> configure)
		{
			RetentionValue = null;
			RetentionDescriptor = null;
			RetentionDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(DurabilityValue))
			{
				writer.WritePropertyName("durability");
				writer.WriteStringValue(DurabilityValue);
			}

			if (!string.IsNullOrEmpty(FlushThresholdSizeValue))
			{
				writer.WritePropertyName("flush_threshold_size");
				writer.WriteStringValue(FlushThresholdSizeValue);
			}

			if (RetentionDescriptor is not null)
			{
				writer.WritePropertyName("retention");
				JsonSerializer.Serialize(writer, RetentionDescriptor, options);
			}
			else if (RetentionDescriptorAction is not null)
			{
				writer.WritePropertyName("retention");
				JsonSerializer.Serialize(writer, new TranslogRetentionDescriptor(RetentionDescriptorAction), options);
			}
			else if (RetentionValue is not null)
			{
				writer.WritePropertyName("retention");
				JsonSerializer.Serialize(writer, RetentionValue, options);
			}

			writer.WriteEndObject();
		}
	}
}