// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement.UpdateAliases
{
	public partial class RemoveAction : IActionVariant
	{
		[JsonIgnore]
		string IndexManagement.UpdateAliases.IActionVariant.ActionVariantName => "remove";
		[JsonInclude]
		[JsonPropertyName("alias")]
		public Elastic.Clients.Elasticsearch.IndexAlias? Alias { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.Indices? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("must_exist")]
		public bool? MustExist { get; set; }
	}

	public sealed partial class RemoveActionDescriptor : DescriptorBase<RemoveActionDescriptor>
	{
		internal RemoveActionDescriptor(Action<RemoveActionDescriptor> configure) => configure.Invoke(this);
		public RemoveActionDescriptor() : base()
		{
		}

		private Elastic.Clients.Elasticsearch.IndexAlias? AliasValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? AliasesValue { get; set; }

		private Elastic.Clients.Elasticsearch.IndexName? IndexValue { get; set; }

		private Elastic.Clients.Elasticsearch.Indices? IndicesValue { get; set; }

		private bool? MustExistValue { get; set; }

		public RemoveActionDescriptor Alias(Elastic.Clients.Elasticsearch.IndexAlias? alias)
		{
			AliasValue = alias;
			return Self;
		}

		public RemoveActionDescriptor Aliases(IEnumerable<Elastic.Clients.Elasticsearch.IndexAlias>? aliases)
		{
			AliasesValue = aliases;
			return Self;
		}

		public RemoveActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName? index)
		{
			IndexValue = index;
			return Self;
		}

		public RemoveActionDescriptor Indices(Elastic.Clients.Elasticsearch.Indices? indices)
		{
			IndicesValue = indices;
			return Self;
		}

		public RemoveActionDescriptor MustExist(bool? mustExist = true)
		{
			MustExistValue = mustExist;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (AliasValue is not null)
			{
				writer.WritePropertyName("alias");
				JsonSerializer.Serialize(writer, AliasValue, options);
			}

			if (AliasesValue is not null)
			{
				writer.WritePropertyName("aliases");
				JsonSerializer.Serialize(writer, AliasesValue, options);
			}

			if (IndexValue is not null)
			{
				writer.WritePropertyName("index");
				JsonSerializer.Serialize(writer, IndexValue, options);
			}

			if (IndicesValue is not null)
			{
				writer.WritePropertyName("indices");
				JsonSerializer.Serialize(writer, IndicesValue, options);
			}

			if (MustExistValue.HasValue)
			{
				writer.WritePropertyName("must_exist");
				writer.WriteBooleanValue(MustExistValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}