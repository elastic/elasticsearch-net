// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

internal sealed partial class ShardStoreConverter : System.Text.Json.Serialization.JsonConverter<ShardStore>
{
	private static readonly System.Text.Json.JsonEncodedText PropAllocation = System.Text.Json.JsonEncodedText.Encode("allocation");
	private static readonly System.Text.Json.JsonEncodedText PropAllocationId = System.Text.Json.JsonEncodedText.Encode("allocation_id");
	private static readonly System.Text.Json.JsonEncodedText PropStoreException = System.Text.Json.JsonEncodedText.Encode("store_exception");

	public override ShardStore Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreNode> propNode = default;
		LocalJsonValue<string> propNodeId = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreAllocation> propAllocation = default;
		LocalJsonValue<string?> propAllocationId = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreException?> propStoreException = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAllocation.TryReadProperty(ref reader, options, PropAllocation, null))
			{
				continue;
			}

			if (propAllocationId.TryReadProperty(ref reader, options, PropAllocationId, null))
			{
				continue;
			}

			if (propStoreException.TryReadProperty(ref reader, options, PropStoreException, null))
			{
				continue;
			}

			propNodeId.Initialized = propNode.Initialized = true;
			reader.ReadProperty(options, out propNodeId.Value, out propNode.Value, null, null);
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new ShardStore
		{
			Node = propNode.Value
,
			NodeId = propNodeId.Value
,
			Allocation = propAllocation.Value
,
			AllocationId = propAllocationId.Value
,
			StoreException = propStoreException.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ShardStore value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAllocation, value.Allocation, null, null);
		writer.WriteProperty(options, PropAllocationId, value.AllocationId, null, null);
		writer.WriteProperty(options, PropStoreException, value.StoreException, null, null);
		writer.WriteProperty(options, value.NodeId, value.Node, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(ShardStoreConverter))]
public sealed partial class ShardStore
{
	public Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreAllocation Allocation { get; init; }
	public string? AllocationId { get; init; }
	public Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreNode Node { get; init; }
	public string NodeId { get; init; }
	public Elastic.Clients.Elasticsearch.IndexManagement.ShardStoreException? StoreException { get; init; }
}