// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class MergeScheduler
	{
		[JsonInclude]
		[JsonPropertyName("max_merge_count")]
		public int? MaxMergeCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_thread_count")]
		public int? MaxThreadCount { get; set; }
	}

	public sealed partial class MergeSchedulerDescriptor : DescriptorBase<MergeSchedulerDescriptor>
	{
		public MergeSchedulerDescriptor()
		{
		}

		internal MergeSchedulerDescriptor(Action<MergeSchedulerDescriptor> configure) => configure.Invoke(this);
		internal int? MaxMergeCountValue { get; private set; }

		internal int? MaxThreadCountValue { get; private set; }

		public MergeSchedulerDescriptor MaxMergeCount(int? maxMergeCount) => Assign(maxMergeCount, (a, v) => a.MaxMergeCountValue = v);
		public MergeSchedulerDescriptor MaxThreadCount(int? maxThreadCount) => Assign(maxThreadCount, (a, v) => a.MaxThreadCountValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (MaxMergeCountValue.HasValue)
			{
				writer.WritePropertyName("max_merge_count");
				writer.WriteNumberValue(MaxMergeCountValue.Value);
			}

			if (MaxThreadCountValue.HasValue)
			{
				writer.WritePropertyName("max_thread_count");
				writer.WriteNumberValue(MaxThreadCountValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}