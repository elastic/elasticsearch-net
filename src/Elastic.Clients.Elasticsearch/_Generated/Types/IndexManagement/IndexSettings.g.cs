// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

internal sealed partial class IndexSettingsConverter : System.Text.Json.Serialization.JsonConverter<IndexSettings>
{
	private static readonly System.Text.Json.JsonEncodedText PropAnalysis = System.Text.Json.JsonEncodedText.Encode("analysis");
	private static readonly System.Text.Json.JsonEncodedText PropAnalyze = System.Text.Json.JsonEncodedText.Encode("analyze");
	private static readonly System.Text.Json.JsonEncodedText PropAutoExpandReplicas = System.Text.Json.JsonEncodedText.Encode("auto_expand_replicas");
	private static readonly System.Text.Json.JsonEncodedText PropBlocks = System.Text.Json.JsonEncodedText.Encode("blocks");
	private static readonly System.Text.Json.JsonEncodedText PropCheckOnStartup = System.Text.Json.JsonEncodedText.Encode("check_on_startup");
	private static readonly System.Text.Json.JsonEncodedText PropCodec = System.Text.Json.JsonEncodedText.Encode("codec");
	private static readonly System.Text.Json.JsonEncodedText PropCreationDate = System.Text.Json.JsonEncodedText.Encode("creation_date");
	private static readonly System.Text.Json.JsonEncodedText PropCreationDateString = System.Text.Json.JsonEncodedText.Encode("creation_date_string");
	private static readonly System.Text.Json.JsonEncodedText PropDefaultPipeline = System.Text.Json.JsonEncodedText.Encode("default_pipeline");
	private static readonly System.Text.Json.JsonEncodedText PropFinalPipeline = System.Text.Json.JsonEncodedText.Encode("final_pipeline");
	private static readonly System.Text.Json.JsonEncodedText PropFormat = System.Text.Json.JsonEncodedText.Encode("format");
	private static readonly System.Text.Json.JsonEncodedText PropGcDeletes = System.Text.Json.JsonEncodedText.Encode("gc_deletes");
	private static readonly System.Text.Json.JsonEncodedText PropHidden = System.Text.Json.JsonEncodedText.Encode("hidden");
	private static readonly System.Text.Json.JsonEncodedText PropHighlight = System.Text.Json.JsonEncodedText.Encode("highlight");
	private static readonly System.Text.Json.JsonEncodedText PropIndex = System.Text.Json.JsonEncodedText.Encode("index");
	private static readonly System.Text.Json.JsonEncodedText PropIndexingPressure = System.Text.Json.JsonEncodedText.Encode("indexing_pressure");
	private static readonly System.Text.Json.JsonEncodedText PropIndexingSlowlog = System.Text.Json.JsonEncodedText.Encode("indexing.slowlog");
	private static readonly System.Text.Json.JsonEncodedText PropLifecycle = System.Text.Json.JsonEncodedText.Encode("lifecycle");
	private static readonly System.Text.Json.JsonEncodedText PropLoadFixedBitsetFiltersEagerly = System.Text.Json.JsonEncodedText.Encode("load_fixed_bitset_filters_eagerly");
	private static readonly System.Text.Json.JsonEncodedText PropMapping = System.Text.Json.JsonEncodedText.Encode("mapping");
	private static readonly System.Text.Json.JsonEncodedText PropMaxDocvalueFieldsSearch = System.Text.Json.JsonEncodedText.Encode("max_docvalue_fields_search");
	private static readonly System.Text.Json.JsonEncodedText PropMaxInnerResultWindow = System.Text.Json.JsonEncodedText.Encode("max_inner_result_window");
	private static readonly System.Text.Json.JsonEncodedText PropMaxNgramDiff = System.Text.Json.JsonEncodedText.Encode("max_ngram_diff");
	private static readonly System.Text.Json.JsonEncodedText PropMaxRefreshListeners = System.Text.Json.JsonEncodedText.Encode("max_refresh_listeners");
	private static readonly System.Text.Json.JsonEncodedText PropMaxRegexLength = System.Text.Json.JsonEncodedText.Encode("max_regex_length");
	private static readonly System.Text.Json.JsonEncodedText PropMaxRescoreWindow = System.Text.Json.JsonEncodedText.Encode("max_rescore_window");
	private static readonly System.Text.Json.JsonEncodedText PropMaxResultWindow = System.Text.Json.JsonEncodedText.Encode("max_result_window");
	private static readonly System.Text.Json.JsonEncodedText PropMaxScriptFields = System.Text.Json.JsonEncodedText.Encode("max_script_fields");
	private static readonly System.Text.Json.JsonEncodedText PropMaxShingleDiff = System.Text.Json.JsonEncodedText.Encode("max_shingle_diff");
	private static readonly System.Text.Json.JsonEncodedText PropMaxSlicesPerScroll = System.Text.Json.JsonEncodedText.Encode("max_slices_per_scroll");
	private static readonly System.Text.Json.JsonEncodedText PropMaxTermsCount = System.Text.Json.JsonEncodedText.Encode("max_terms_count");
	private static readonly System.Text.Json.JsonEncodedText PropMerge = System.Text.Json.JsonEncodedText.Encode("merge");
	private static readonly System.Text.Json.JsonEncodedText PropMode = System.Text.Json.JsonEncodedText.Encode("mode");
	private static readonly System.Text.Json.JsonEncodedText PropNumberOfReplicas = System.Text.Json.JsonEncodedText.Encode("number_of_replicas");
	private static readonly System.Text.Json.JsonEncodedText PropNumberOfRoutingShards = System.Text.Json.JsonEncodedText.Encode("number_of_routing_shards");
	private static readonly System.Text.Json.JsonEncodedText PropNumberOfShards = System.Text.Json.JsonEncodedText.Encode("number_of_shards");
	private static readonly System.Text.Json.JsonEncodedText PropPriority = System.Text.Json.JsonEncodedText.Encode("priority");
	private static readonly System.Text.Json.JsonEncodedText PropProvidedName = System.Text.Json.JsonEncodedText.Encode("provided_name");
	private static readonly System.Text.Json.JsonEncodedText PropQueries = System.Text.Json.JsonEncodedText.Encode("queries");
	private static readonly System.Text.Json.JsonEncodedText PropQueryString = System.Text.Json.JsonEncodedText.Encode("query_string");
	private static readonly System.Text.Json.JsonEncodedText PropRefreshInterval = System.Text.Json.JsonEncodedText.Encode("refresh_interval");
	private static readonly System.Text.Json.JsonEncodedText PropRouting = System.Text.Json.JsonEncodedText.Encode("routing");
	private static readonly System.Text.Json.JsonEncodedText PropRoutingPartitionSize = System.Text.Json.JsonEncodedText.Encode("routing_partition_size");
	private static readonly System.Text.Json.JsonEncodedText PropRoutingPath = System.Text.Json.JsonEncodedText.Encode("routing_path");
	private static readonly System.Text.Json.JsonEncodedText PropSearch = System.Text.Json.JsonEncodedText.Encode("search");
	private static readonly System.Text.Json.JsonEncodedText PropSettings = System.Text.Json.JsonEncodedText.Encode("settings");
	private static readonly System.Text.Json.JsonEncodedText PropSimilarity = System.Text.Json.JsonEncodedText.Encode("similarity");
	private static readonly System.Text.Json.JsonEncodedText PropSoftDeletes = System.Text.Json.JsonEncodedText.Encode("soft_deletes");
	private static readonly System.Text.Json.JsonEncodedText PropSort = System.Text.Json.JsonEncodedText.Encode("sort");
	private static readonly System.Text.Json.JsonEncodedText PropStore = System.Text.Json.JsonEncodedText.Encode("store");
	private static readonly System.Text.Json.JsonEncodedText PropTimeSeries = System.Text.Json.JsonEncodedText.Encode("time_series");
	private static readonly System.Text.Json.JsonEncodedText PropTopMetricsMaxSize = System.Text.Json.JsonEncodedText.Encode("top_metrics_max_size");
	private static readonly System.Text.Json.JsonEncodedText PropTranslog = System.Text.Json.JsonEncodedText.Encode("translog");
	private static readonly System.Text.Json.JsonEncodedText PropUuid = System.Text.Json.JsonEncodedText.Encode("uuid");
	private static readonly System.Text.Json.JsonEncodedText PropVerifiedBeforeClose = System.Text.Json.JsonEncodedText.Encode("verified_before_close");
	private static readonly System.Text.Json.JsonEncodedText PropVersion = System.Text.Json.JsonEncodedText.Encode("version");

	public override IndexSettings Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		System.Collections.Generic.Dictionary<string, object> propOtherSettings = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis?> propAnalysis = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze?> propAnalyze = default;
		LocalJsonValue<string?> propAutoExpandReplicas = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks?> propBlocks = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup?> propCheckOnStartup = default;
		LocalJsonValue<string?> propCodec = default;
		LocalJsonValue<long?> propCreationDate = default;
		LocalJsonValue<DateTimeOffset?> propCreationDateString = default;
		LocalJsonValue<string?> propDefaultPipeline = default;
		LocalJsonValue<string?> propFinalPipeline = default;
		LocalJsonValue<object?> propFormat = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propGcDeletes = default;
		LocalJsonValue<object?> propHidden = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight?> propHighlight = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings?> propIndex = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure?> propIndexingPressure = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings?> propIndexingSlowlog = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle?> propLifecycle = default;
		LocalJsonValue<bool?> propLoadFixedBitsetFiltersEagerly = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings?> propMapping = default;
		LocalJsonValue<int?> propMaxDocvalueFieldsSearch = default;
		LocalJsonValue<int?> propMaxInnerResultWindow = default;
		LocalJsonValue<int?> propMaxNgramDiff = default;
		LocalJsonValue<int?> propMaxRefreshListeners = default;
		LocalJsonValue<int?> propMaxRegexLength = default;
		LocalJsonValue<int?> propMaxRescoreWindow = default;
		LocalJsonValue<int?> propMaxResultWindow = default;
		LocalJsonValue<int?> propMaxScriptFields = default;
		LocalJsonValue<int?> propMaxShingleDiff = default;
		LocalJsonValue<int?> propMaxSlicesPerScroll = default;
		LocalJsonValue<int?> propMaxTermsCount = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.Merge?> propMerge = default;
		LocalJsonValue<string?> propMode = default;
		LocalJsonValue<object?> propNumberOfReplicas = default;
		LocalJsonValue<int?> propNumberOfRoutingShards = default;
		LocalJsonValue<object?> propNumberOfShards = default;
		LocalJsonValue<object?> propPriority = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Name?> propProvidedName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.Queries?> propQueries = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString?> propQueryString = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propRefreshInterval = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting?> propRouting = default;
		LocalJsonValue<int?> propRoutingPartitionSize = default;
		LocalJsonValue<ICollection<string>?> propRoutingPath = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch?> propSearch = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings?> propSettings = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities?> propSimilarity = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes?> propSoftDeletes = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort?> propSort = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.Storage?> propStore = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries?> propTimeSeries = default;
		LocalJsonValue<int?> propTopMetricsMaxSize = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.Translog?> propTranslog = default;
		LocalJsonValue<string?> propUuid = default;
		LocalJsonValue<object?> propVerifiedBeforeClose = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning?> propVersion = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAnalysis.TryReadProperty(ref reader, options, PropAnalysis, null))
			{
				continue;
			}

			if (propAnalyze.TryReadProperty(ref reader, options, PropAnalyze, null))
			{
				continue;
			}

			if (propAutoExpandReplicas.TryReadProperty(ref reader, options, PropAutoExpandReplicas, null))
			{
				continue;
			}

			if (propBlocks.TryReadProperty(ref reader, options, PropBlocks, null))
			{
				continue;
			}

			if (propCheckOnStartup.TryReadProperty(ref reader, options, PropCheckOnStartup, null))
			{
				continue;
			}

			if (propCodec.TryReadProperty(ref reader, options, PropCodec, null))
			{
				continue;
			}

			if (propCreationDate.TryReadProperty(ref reader, options, PropCreationDate, null))
			{
				continue;
			}

			if (propCreationDateString.TryReadProperty(ref reader, options, PropCreationDateString, null))
			{
				continue;
			}

			if (propDefaultPipeline.TryReadProperty(ref reader, options, PropDefaultPipeline, null))
			{
				continue;
			}

			if (propFinalPipeline.TryReadProperty(ref reader, options, PropFinalPipeline, null))
			{
				continue;
			}

			if (propFormat.TryReadProperty(ref reader, options, PropFormat, null))
			{
				continue;
			}

			if (propGcDeletes.TryReadProperty(ref reader, options, PropGcDeletes, null))
			{
				continue;
			}

			if (propHidden.TryReadProperty(ref reader, options, PropHidden, null))
			{
				continue;
			}

			if (propHighlight.TryReadProperty(ref reader, options, PropHighlight, null))
			{
				continue;
			}

			if (propIndex.TryReadProperty(ref reader, options, PropIndex, null))
			{
				continue;
			}

			if (propIndexingPressure.TryReadProperty(ref reader, options, PropIndexingPressure, null))
			{
				continue;
			}

			if (propIndexingSlowlog.TryReadProperty(ref reader, options, PropIndexingSlowlog, null))
			{
				continue;
			}

			if (propLifecycle.TryReadProperty(ref reader, options, PropLifecycle, null))
			{
				continue;
			}

			if (propLoadFixedBitsetFiltersEagerly.TryReadProperty(ref reader, options, PropLoadFixedBitsetFiltersEagerly, null))
			{
				continue;
			}

			if (propMapping.TryReadProperty(ref reader, options, PropMapping, null))
			{
				continue;
			}

			if (propMaxDocvalueFieldsSearch.TryReadProperty(ref reader, options, PropMaxDocvalueFieldsSearch, null))
			{
				continue;
			}

			if (propMaxInnerResultWindow.TryReadProperty(ref reader, options, PropMaxInnerResultWindow, null))
			{
				continue;
			}

			if (propMaxNgramDiff.TryReadProperty(ref reader, options, PropMaxNgramDiff, null))
			{
				continue;
			}

			if (propMaxRefreshListeners.TryReadProperty(ref reader, options, PropMaxRefreshListeners, null))
			{
				continue;
			}

			if (propMaxRegexLength.TryReadProperty(ref reader, options, PropMaxRegexLength, null))
			{
				continue;
			}

			if (propMaxRescoreWindow.TryReadProperty(ref reader, options, PropMaxRescoreWindow, null))
			{
				continue;
			}

			if (propMaxResultWindow.TryReadProperty(ref reader, options, PropMaxResultWindow, null))
			{
				continue;
			}

			if (propMaxScriptFields.TryReadProperty(ref reader, options, PropMaxScriptFields, null))
			{
				continue;
			}

			if (propMaxShingleDiff.TryReadProperty(ref reader, options, PropMaxShingleDiff, null))
			{
				continue;
			}

			if (propMaxSlicesPerScroll.TryReadProperty(ref reader, options, PropMaxSlicesPerScroll, null))
			{
				continue;
			}

			if (propMaxTermsCount.TryReadProperty(ref reader, options, PropMaxTermsCount, null))
			{
				continue;
			}

			if (propMerge.TryReadProperty(ref reader, options, PropMerge, null))
			{
				continue;
			}

			if (propMode.TryReadProperty(ref reader, options, PropMode, null))
			{
				continue;
			}

			if (propNumberOfReplicas.TryReadProperty(ref reader, options, PropNumberOfReplicas, null))
			{
				continue;
			}

			if (propNumberOfRoutingShards.TryReadProperty(ref reader, options, PropNumberOfRoutingShards, null))
			{
				continue;
			}

			if (propNumberOfShards.TryReadProperty(ref reader, options, PropNumberOfShards, null))
			{
				continue;
			}

			if (propPriority.TryReadProperty(ref reader, options, PropPriority, null))
			{
				continue;
			}

			if (propProvidedName.TryReadProperty(ref reader, options, PropProvidedName, null))
			{
				continue;
			}

			if (propQueries.TryReadProperty(ref reader, options, PropQueries, null))
			{
				continue;
			}

			if (propQueryString.TryReadProperty(ref reader, options, PropQueryString, null))
			{
				continue;
			}

			if (propRefreshInterval.TryReadProperty(ref reader, options, PropRefreshInterval, null))
			{
				continue;
			}

			if (propRouting.TryReadProperty(ref reader, options, PropRouting, null))
			{
				continue;
			}

			if (propRoutingPartitionSize.TryReadProperty(ref reader, options, PropRoutingPartitionSize, null))
			{
				continue;
			}

			if (propRoutingPath.TryReadProperty(ref reader, options, PropRoutingPath, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propSearch.TryReadProperty(ref reader, options, PropSearch, null))
			{
				continue;
			}

			if (propSettings.TryReadProperty(ref reader, options, PropSettings, null))
			{
				continue;
			}

			if (propSimilarity.TryReadProperty(ref reader, options, PropSimilarity, null))
			{
				continue;
			}

			if (propSoftDeletes.TryReadProperty(ref reader, options, PropSoftDeletes, null))
			{
				continue;
			}

			if (propSort.TryReadProperty(ref reader, options, PropSort, null))
			{
				continue;
			}

			if (propStore.TryReadProperty(ref reader, options, PropStore, null))
			{
				continue;
			}

			if (propTimeSeries.TryReadProperty(ref reader, options, PropTimeSeries, null))
			{
				continue;
			}

			if (propTopMetricsMaxSize.TryReadProperty(ref reader, options, PropTopMetricsMaxSize, null))
			{
				continue;
			}

			if (propTranslog.TryReadProperty(ref reader, options, PropTranslog, null))
			{
				continue;
			}

			if (propUuid.TryReadProperty(ref reader, options, PropUuid, null))
			{
				continue;
			}

			if (propVerifiedBeforeClose.TryReadProperty(ref reader, options, PropVerifiedBeforeClose, null))
			{
				continue;
			}

			if (propVersion.TryReadProperty(ref reader, options, PropVersion, null))
			{
				continue;
			}

			propOtherSettings ??= new System.Collections.Generic.Dictionary<string, object>();
			reader.ReadProperty(options, out string key, out object value);
			propOtherSettings[key] = value;
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new IndexSettings
		{
			OtherSettings = propOtherSettings
,
			Analysis = propAnalysis.Value
,
			Analyze = propAnalyze.Value
,
			AutoExpandReplicas = propAutoExpandReplicas.Value
,
			Blocks = propBlocks.Value
,
			CheckOnStartup = propCheckOnStartup.Value
,
			Codec = propCodec.Value
,
			CreationDate = propCreationDate.Value
,
			CreationDateString = propCreationDateString.Value
,
			DefaultPipeline = propDefaultPipeline.Value
,
			FinalPipeline = propFinalPipeline.Value
,
			Format = propFormat.Value
,
			GcDeletes = propGcDeletes.Value
,
			Hidden = propHidden.Value
,
			Highlight = propHighlight.Value
,
			Index = propIndex.Value
,
			IndexingPressure = propIndexingPressure.Value
,
			IndexingSlowlog = propIndexingSlowlog.Value
,
			Lifecycle = propLifecycle.Value
,
			LoadFixedBitsetFiltersEagerly = propLoadFixedBitsetFiltersEagerly.Value
,
			Mapping = propMapping.Value
,
			MaxDocvalueFieldsSearch = propMaxDocvalueFieldsSearch.Value
,
			MaxInnerResultWindow = propMaxInnerResultWindow.Value
,
			MaxNgramDiff = propMaxNgramDiff.Value
,
			MaxRefreshListeners = propMaxRefreshListeners.Value
,
			MaxRegexLength = propMaxRegexLength.Value
,
			MaxRescoreWindow = propMaxRescoreWindow.Value
,
			MaxResultWindow = propMaxResultWindow.Value
,
			MaxScriptFields = propMaxScriptFields.Value
,
			MaxShingleDiff = propMaxShingleDiff.Value
,
			MaxSlicesPerScroll = propMaxSlicesPerScroll.Value
,
			MaxTermsCount = propMaxTermsCount.Value
,
			Merge = propMerge.Value
,
			Mode = propMode.Value
,
			NumberOfReplicas = propNumberOfReplicas.Value
,
			NumberOfRoutingShards = propNumberOfRoutingShards.Value
,
			NumberOfShards = propNumberOfShards.Value
,
			Priority = propPriority.Value
,
			ProvidedName = propProvidedName.Value
,
			Queries = propQueries.Value
,
			QueryString = propQueryString.Value
,
			RefreshInterval = propRefreshInterval.Value
,
			Routing = propRouting.Value
,
			RoutingPartitionSize = propRoutingPartitionSize.Value
,
			RoutingPath = propRoutingPath.Value
,
			Search = propSearch.Value
,
			Settings = propSettings.Value
,
			Similarity = propSimilarity.Value
,
			SoftDeletes = propSoftDeletes.Value
,
			Sort = propSort.Value
,
			Store = propStore.Value
,
			TimeSeries = propTimeSeries.Value
,
			TopMetricsMaxSize = propTopMetricsMaxSize.Value
,
			Translog = propTranslog.Value
,
			Uuid = propUuid.Value
,
			VerifiedBeforeClose = propVerifiedBeforeClose.Value
,
			Version = propVersion.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, IndexSettings value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAnalysis, value.Analysis, null, null);
		writer.WriteProperty(options, PropAnalyze, value.Analyze, null, null);
		writer.WriteProperty(options, PropAutoExpandReplicas, value.AutoExpandReplicas, null, null);
		writer.WriteProperty(options, PropBlocks, value.Blocks, null, null);
		writer.WriteProperty(options, PropCheckOnStartup, value.CheckOnStartup, null, null);
		writer.WriteProperty(options, PropCodec, value.Codec, null, null);
		writer.WriteProperty(options, PropCreationDate, value.CreationDate, null, null);
		writer.WriteProperty(options, PropCreationDateString, value.CreationDateString, null, null);
		writer.WriteProperty(options, PropDefaultPipeline, value.DefaultPipeline, null, null);
		writer.WriteProperty(options, PropFinalPipeline, value.FinalPipeline, null, null);
		writer.WriteProperty(options, PropFormat, value.Format, null, null);
		writer.WriteProperty(options, PropGcDeletes, value.GcDeletes, null, null);
		writer.WriteProperty(options, PropHidden, value.Hidden, null, null);
		writer.WriteProperty(options, PropHighlight, value.Highlight, null, null);
		writer.WriteProperty(options, PropIndex, value.Index, null, null);
		writer.WriteProperty(options, PropIndexingPressure, value.IndexingPressure, null, null);
		writer.WriteProperty(options, PropIndexingSlowlog, value.IndexingSlowlog, null, null);
		writer.WriteProperty(options, PropLifecycle, value.Lifecycle, null, null);
		writer.WriteProperty(options, PropLoadFixedBitsetFiltersEagerly, value.LoadFixedBitsetFiltersEagerly, null, null);
		writer.WriteProperty(options, PropMapping, value.Mapping, null, null);
		writer.WriteProperty(options, PropMaxDocvalueFieldsSearch, value.MaxDocvalueFieldsSearch, null, null);
		writer.WriteProperty(options, PropMaxInnerResultWindow, value.MaxInnerResultWindow, null, null);
		writer.WriteProperty(options, PropMaxNgramDiff, value.MaxNgramDiff, null, null);
		writer.WriteProperty(options, PropMaxRefreshListeners, value.MaxRefreshListeners, null, null);
		writer.WriteProperty(options, PropMaxRegexLength, value.MaxRegexLength, null, null);
		writer.WriteProperty(options, PropMaxRescoreWindow, value.MaxRescoreWindow, null, null);
		writer.WriteProperty(options, PropMaxResultWindow, value.MaxResultWindow, null, null);
		writer.WriteProperty(options, PropMaxScriptFields, value.MaxScriptFields, null, null);
		writer.WriteProperty(options, PropMaxShingleDiff, value.MaxShingleDiff, null, null);
		writer.WriteProperty(options, PropMaxSlicesPerScroll, value.MaxSlicesPerScroll, null, null);
		writer.WriteProperty(options, PropMaxTermsCount, value.MaxTermsCount, null, null);
		writer.WriteProperty(options, PropMerge, value.Merge, null, null);
		writer.WriteProperty(options, PropMode, value.Mode, null, null);
		writer.WriteProperty(options, PropNumberOfReplicas, value.NumberOfReplicas, null, null);
		writer.WriteProperty(options, PropNumberOfRoutingShards, value.NumberOfRoutingShards, null, null);
		writer.WriteProperty(options, PropNumberOfShards, value.NumberOfShards, null, null);
		writer.WriteProperty(options, PropPriority, value.Priority, null, null);
		writer.WriteProperty(options, PropProvidedName, value.ProvidedName, null, null);
		writer.WriteProperty(options, PropQueries, value.Queries, null, null);
		writer.WriteProperty(options, PropQueryString, value.QueryString, null, null);
		writer.WriteProperty(options, PropRefreshInterval, value.RefreshInterval, null, null);
		writer.WriteProperty(options, PropRouting, value.Routing, null, null);
		writer.WriteProperty(options, PropRoutingPartitionSize, value.RoutingPartitionSize, null, null);
		writer.WriteProperty(options, PropRoutingPath, value.RoutingPath, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropSearch, value.Search, null, null);
		writer.WriteProperty(options, PropSettings, value.Settings, null, null);
		writer.WriteProperty(options, PropSimilarity, value.Similarity, null, null);
		writer.WriteProperty(options, PropSoftDeletes, value.SoftDeletes, null, null);
		writer.WriteProperty(options, PropSort, value.Sort, null, null);
		writer.WriteProperty(options, PropStore, value.Store, null, null);
		writer.WriteProperty(options, PropTimeSeries, value.TimeSeries, null, null);
		writer.WriteProperty(options, PropTopMetricsMaxSize, value.TopMetricsMaxSize, null, null);
		writer.WriteProperty(options, PropTranslog, value.Translog, null, null);
		writer.WriteProperty(options, PropUuid, value.Uuid, null, null);
		writer.WriteProperty(options, PropVerifiedBeforeClose, value.VerifiedBeforeClose, null, null);
		writer.WriteProperty(options, PropVersion, value.Version, null, null);
		if (value.OtherSettings is not null)
		{
			foreach (var item in value.OtherSettings)
			{
				writer.WriteProperty(options, item.Key, item.Value);
			}
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index-modules.html#index-modules-settings">Learn more about this API in the Elasticsearch documentation.</see></para>
/// </summary>
[JsonConverter(typeof(IndexSettingsConverter))]
public sealed partial class IndexSettings
{
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis? Analysis { get; set; }

	/// <summary>
	/// <para>
	/// Settings to define analyzers, tokenizers, token filters and character filters.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze? Analyze { get; set; }
	public string? AutoExpandReplicas { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks? Blocks { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup? CheckOnStartup { get; set; }
	public string? Codec { get; set; }
	public long? CreationDate { get; set; }
	public DateTimeOffset? CreationDateString { get; set; }
	public string? DefaultPipeline { get; set; }
	public string? FinalPipeline { get; set; }
	public object? Format { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? GcDeletes { get; set; }
	public object? Hidden { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight? Highlight { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? Index { get; set; }

	/// <summary>
	/// <para>
	/// Configure indexing back pressure limits.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure? IndexingPressure { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings? IndexingSlowlog { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle? Lifecycle { get; set; }
	public bool? LoadFixedBitsetFiltersEagerly { get; set; }

	/// <summary>
	/// <para>
	/// Enable or disable dynamic mapping for an index.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings? Mapping { get; set; }
	public int? MaxDocvalueFieldsSearch { get; set; }
	public int? MaxInnerResultWindow { get; set; }
	public int? MaxNgramDiff { get; set; }
	public int? MaxRefreshListeners { get; set; }
	public int? MaxRegexLength { get; set; }
	public int? MaxRescoreWindow { get; set; }
	public int? MaxResultWindow { get; set; }
	public int? MaxScriptFields { get; set; }
	public int? MaxShingleDiff { get; set; }
	public int? MaxSlicesPerScroll { get; set; }
	public int? MaxTermsCount { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.Merge? Merge { get; set; }
	public string? Mode { get; set; }
	public object? NumberOfReplicas { get; set; }
	public int? NumberOfRoutingShards { get; set; }
	public object? NumberOfShards { get; set; }

	/// <summary>
	/// <para>
	/// Additional settings not covered in this type. Unless these settings are defined by a plugin, please open an issue on the <a href="https://github.com/elastic/elasticsearch-specification">Elasticsearch API specification</a> so that they can be added in a future release
	/// </para>
	/// </summary>
	public IDictionary<string, object> OtherSettings { get; set; }
	public object? Priority { get; set; }
	public Elastic.Clients.Elasticsearch.Name? ProvidedName { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.Queries? Queries { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString? QueryString { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? RefreshInterval { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting? Routing { get; set; }
	public int? RoutingPartitionSize { get; set; }
	public ICollection<string>? RoutingPath { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch? Search { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? Settings { get; set; }

	/// <summary>
	/// <para>
	/// Configure custom similarity settings to customize how search results are scored.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities? Similarity { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes? SoftDeletes { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort? Sort { get; set; }

	/// <summary>
	/// <para>
	/// The store module allows you to control how index data is stored and accessed on disk.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.Storage? Store { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries? TimeSeries { get; set; }
	public int? TopMetricsMaxSize { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.Translog? Translog { get; set; }
	public string? Uuid { get; set; }
	public object? VerifiedBeforeClose { get; set; }
	public Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning? Version { get; set; }
}

/// <summary>
/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index-modules.html#index-modules-settings">Learn more about this API in the Elasticsearch documentation.</see></para>
/// </summary>
public sealed partial class IndexSettingsDescriptor<TDocument> : SerializableDescriptor<IndexSettingsDescriptor<TDocument>>
{
	internal IndexSettingsDescriptor(Action<IndexSettingsDescriptor<TDocument>> configure) => configure.Invoke(this);

	public IndexSettingsDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis? AnalysisValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor AnalysisDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor> AnalysisDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze? AnalyzeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor AnalyzeDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor> AnalyzeDescriptorAction { get; set; }
	private string? AutoExpandReplicasValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks? BlocksValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor BlocksDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor> BlocksDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup? CheckOnStartupValue { get; set; }
	private string? CodecValue { get; set; }
	private long? CreationDateValue { get; set; }
	private DateTimeOffset? CreationDateStringValue { get; set; }
	private string? DefaultPipelineValue { get; set; }
	private string? FinalPipelineValue { get; set; }
	private object? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? GcDeletesValue { get; set; }
	private object? HiddenValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight? HighlightValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor HighlightDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor> HighlightDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? IndexValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> IndexDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> IndexDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure? IndexingPressureValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor IndexingPressureDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor> IndexingPressureDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings? IndexingSlowlogValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor IndexingSlowlogDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor> IndexingSlowlogDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle? LifecycleValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor LifecycleDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor> LifecycleDescriptorAction { get; set; }
	private bool? LoadFixedBitsetFiltersEagerlyValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings? MappingValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor MappingDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor> MappingDescriptorAction { get; set; }
	private int? MaxDocvalueFieldsSearchValue { get; set; }
	private int? MaxInnerResultWindowValue { get; set; }
	private int? MaxNgramDiffValue { get; set; }
	private int? MaxRefreshListenersValue { get; set; }
	private int? MaxRegexLengthValue { get; set; }
	private int? MaxRescoreWindowValue { get; set; }
	private int? MaxResultWindowValue { get; set; }
	private int? MaxScriptFieldsValue { get; set; }
	private int? MaxShingleDiffValue { get; set; }
	private int? MaxSlicesPerScrollValue { get; set; }
	private int? MaxTermsCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Merge? MergeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor MergeDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor> MergeDescriptorAction { get; set; }
	private string? ModeValue { get; set; }
	private object? NumberOfReplicasValue { get; set; }
	private int? NumberOfRoutingShardsValue { get; set; }
	private object? NumberOfShardsValue { get; set; }
	private IDictionary<string, object> OtherSettingsValue { get; set; }
	private object? PriorityValue { get; set; }
	private Elastic.Clients.Elasticsearch.Name? ProvidedNameValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Queries? QueriesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor QueriesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor> QueriesDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString? QueryStringValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor QueryStringDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor> QueryStringDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? RefreshIntervalValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting? RoutingValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor RoutingDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor> RoutingDescriptorAction { get; set; }
	private int? RoutingPartitionSizeValue { get; set; }
	private ICollection<string>? RoutingPathValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch? SearchValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor SearchDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor> SearchDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? SettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> SettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> SettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities? SimilarityValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes? SoftDeletesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor SoftDeletesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor> SoftDeletesDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort? SortValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor<TDocument> SortDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor<TDocument>> SortDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Storage? StoreValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor StoreDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor> StoreDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries? TimeSeriesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor TimeSeriesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor> TimeSeriesDescriptorAction { get; set; }
	private int? TopMetricsMaxSizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Translog? TranslogValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor TranslogDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor> TranslogDescriptorAction { get; set; }
	private string? UuidValue { get; set; }
	private object? VerifiedBeforeCloseValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning? VersionValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor VersionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor> VersionDescriptorAction { get; set; }

	public IndexSettingsDescriptor<TDocument> Analysis(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis? analysis)
	{
		AnalysisDescriptor = null;
		AnalysisDescriptorAction = null;
		AnalysisValue = analysis;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Analysis(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor descriptor)
	{
		AnalysisValue = null;
		AnalysisDescriptorAction = null;
		AnalysisDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Analysis(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor> configure)
	{
		AnalysisValue = null;
		AnalysisDescriptor = null;
		AnalysisDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings to define analyzers, tokenizers, token filters and character filters.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> Analyze(Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze? analyze)
	{
		AnalyzeDescriptor = null;
		AnalyzeDescriptorAction = null;
		AnalyzeValue = analyze;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Analyze(Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor descriptor)
	{
		AnalyzeValue = null;
		AnalyzeDescriptorAction = null;
		AnalyzeDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Analyze(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor> configure)
	{
		AnalyzeValue = null;
		AnalyzeDescriptor = null;
		AnalyzeDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> AutoExpandReplicas(string? autoExpandReplicas)
	{
		AutoExpandReplicasValue = autoExpandReplicas;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Blocks(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks? blocks)
	{
		BlocksDescriptor = null;
		BlocksDescriptorAction = null;
		BlocksValue = blocks;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Blocks(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor descriptor)
	{
		BlocksValue = null;
		BlocksDescriptorAction = null;
		BlocksDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Blocks(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor> configure)
	{
		BlocksValue = null;
		BlocksDescriptor = null;
		BlocksDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> CheckOnStartup(Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup? checkOnStartup)
	{
		CheckOnStartupValue = checkOnStartup;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Codec(string? codec)
	{
		CodecValue = codec;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> CreationDate(long? creationDate)
	{
		CreationDateValue = creationDate;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> CreationDateString(DateTimeOffset? creationDateString)
	{
		CreationDateStringValue = creationDateString;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> DefaultPipeline(string? defaultPipeline)
	{
		DefaultPipelineValue = defaultPipeline;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> FinalPipeline(string? finalPipeline)
	{
		FinalPipelineValue = finalPipeline;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Format(object? format)
	{
		FormatValue = format;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> GcDeletes(Elastic.Clients.Elasticsearch.Duration? gcDeletes)
	{
		GcDeletesValue = gcDeletes;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Hidden(object? hidden)
	{
		HiddenValue = hidden;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Highlight(Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight? highlight)
	{
		HighlightDescriptor = null;
		HighlightDescriptorAction = null;
		HighlightValue = highlight;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Highlight(Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor descriptor)
	{
		HighlightValue = null;
		HighlightDescriptorAction = null;
		HighlightDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Highlight(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor> configure)
	{
		HighlightValue = null;
		HighlightDescriptor = null;
		HighlightDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? index)
	{
		IndexDescriptor = null;
		IndexDescriptorAction = null;
		IndexValue = index;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> descriptor)
	{
		IndexValue = null;
		IndexDescriptorAction = null;
		IndexDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Index(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> configure)
	{
		IndexValue = null;
		IndexDescriptor = null;
		IndexDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Configure indexing back pressure limits.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> IndexingPressure(Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure? indexingPressure)
	{
		IndexingPressureDescriptor = null;
		IndexingPressureDescriptorAction = null;
		IndexingPressureValue = indexingPressure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> IndexingPressure(Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor descriptor)
	{
		IndexingPressureValue = null;
		IndexingPressureDescriptorAction = null;
		IndexingPressureDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> IndexingPressure(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor> configure)
	{
		IndexingPressureValue = null;
		IndexingPressureDescriptor = null;
		IndexingPressureDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> IndexingSlowlog(Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings? indexingSlowlog)
	{
		IndexingSlowlogDescriptor = null;
		IndexingSlowlogDescriptorAction = null;
		IndexingSlowlogValue = indexingSlowlog;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> IndexingSlowlog(Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor descriptor)
	{
		IndexingSlowlogValue = null;
		IndexingSlowlogDescriptorAction = null;
		IndexingSlowlogDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> IndexingSlowlog(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor> configure)
	{
		IndexingSlowlogValue = null;
		IndexingSlowlogDescriptor = null;
		IndexingSlowlogDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Lifecycle(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle? lifecycle)
	{
		LifecycleDescriptor = null;
		LifecycleDescriptorAction = null;
		LifecycleValue = lifecycle;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Lifecycle(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor descriptor)
	{
		LifecycleValue = null;
		LifecycleDescriptorAction = null;
		LifecycleDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Lifecycle(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor> configure)
	{
		LifecycleValue = null;
		LifecycleDescriptor = null;
		LifecycleDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> LoadFixedBitsetFiltersEagerly(bool? loadFixedBitsetFiltersEagerly = true)
	{
		LoadFixedBitsetFiltersEagerlyValue = loadFixedBitsetFiltersEagerly;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enable or disable dynamic mapping for an index.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> Mapping(Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings? mapping)
	{
		MappingDescriptor = null;
		MappingDescriptorAction = null;
		MappingValue = mapping;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Mapping(Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor descriptor)
	{
		MappingValue = null;
		MappingDescriptorAction = null;
		MappingDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Mapping(Action<Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor> configure)
	{
		MappingValue = null;
		MappingDescriptor = null;
		MappingDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxDocvalueFieldsSearch(int? maxDocvalueFieldsSearch)
	{
		MaxDocvalueFieldsSearchValue = maxDocvalueFieldsSearch;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxInnerResultWindow(int? maxInnerResultWindow)
	{
		MaxInnerResultWindowValue = maxInnerResultWindow;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxNgramDiff(int? maxNgramDiff)
	{
		MaxNgramDiffValue = maxNgramDiff;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxRefreshListeners(int? maxRefreshListeners)
	{
		MaxRefreshListenersValue = maxRefreshListeners;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxRegexLength(int? maxRegexLength)
	{
		MaxRegexLengthValue = maxRegexLength;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxRescoreWindow(int? maxRescoreWindow)
	{
		MaxRescoreWindowValue = maxRescoreWindow;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxResultWindow(int? maxResultWindow)
	{
		MaxResultWindowValue = maxResultWindow;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxScriptFields(int? maxScriptFields)
	{
		MaxScriptFieldsValue = maxScriptFields;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxShingleDiff(int? maxShingleDiff)
	{
		MaxShingleDiffValue = maxShingleDiff;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxSlicesPerScroll(int? maxSlicesPerScroll)
	{
		MaxSlicesPerScrollValue = maxSlicesPerScroll;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> MaxTermsCount(int? maxTermsCount)
	{
		MaxTermsCountValue = maxTermsCount;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Merge(Elastic.Clients.Elasticsearch.IndexManagement.Merge? merge)
	{
		MergeDescriptor = null;
		MergeDescriptorAction = null;
		MergeValue = merge;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Merge(Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor descriptor)
	{
		MergeValue = null;
		MergeDescriptorAction = null;
		MergeDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Merge(Action<Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor> configure)
	{
		MergeValue = null;
		MergeDescriptor = null;
		MergeDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Mode(string? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> NumberOfReplicas(object? numberOfReplicas)
	{
		NumberOfReplicasValue = numberOfReplicas;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> NumberOfRoutingShards(int? numberOfRoutingShards)
	{
		NumberOfRoutingShardsValue = numberOfRoutingShards;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> NumberOfShards(object? numberOfShards)
	{
		NumberOfShardsValue = numberOfShards;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Additional settings not covered in this type. Unless these settings are defined by a plugin, please open an issue on the <a href="https://github.com/elastic/elasticsearch-specification">Elasticsearch API specification</a> so that they can be added in a future release
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> OtherSettings(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		OtherSettingsValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Priority(object? priority)
	{
		PriorityValue = priority;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> ProvidedName(Elastic.Clients.Elasticsearch.Name? providedName)
	{
		ProvidedNameValue = providedName;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Queries(Elastic.Clients.Elasticsearch.IndexManagement.Queries? queries)
	{
		QueriesDescriptor = null;
		QueriesDescriptorAction = null;
		QueriesValue = queries;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Queries(Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor descriptor)
	{
		QueriesValue = null;
		QueriesDescriptorAction = null;
		QueriesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Queries(Action<Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor> configure)
	{
		QueriesValue = null;
		QueriesDescriptor = null;
		QueriesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> QueryString(Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString? queryString)
	{
		QueryStringDescriptor = null;
		QueryStringDescriptorAction = null;
		QueryStringValue = queryString;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> QueryString(Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor descriptor)
	{
		QueryStringValue = null;
		QueryStringDescriptorAction = null;
		QueryStringDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> QueryString(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor> configure)
	{
		QueryStringValue = null;
		QueryStringDescriptor = null;
		QueryStringDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> RefreshInterval(Elastic.Clients.Elasticsearch.Duration? refreshInterval)
	{
		RefreshIntervalValue = refreshInterval;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Routing(Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting? routing)
	{
		RoutingDescriptor = null;
		RoutingDescriptorAction = null;
		RoutingValue = routing;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Routing(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor descriptor)
	{
		RoutingValue = null;
		RoutingDescriptorAction = null;
		RoutingDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Routing(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor> configure)
	{
		RoutingValue = null;
		RoutingDescriptor = null;
		RoutingDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> RoutingPartitionSize(int? routingPartitionSize)
	{
		RoutingPartitionSizeValue = routingPartitionSize;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> RoutingPath(ICollection<string>? routingPath)
	{
		RoutingPathValue = routingPath;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Search(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch? search)
	{
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchValue = search;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Search(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor descriptor)
	{
		SearchValue = null;
		SearchDescriptorAction = null;
		SearchDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Search(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor> configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Settings(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? settings)
	{
		SettingsDescriptor = null;
		SettingsDescriptorAction = null;
		SettingsValue = settings;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Settings(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument> descriptor)
	{
		SettingsValue = null;
		SettingsDescriptorAction = null;
		SettingsDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Settings(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>> configure)
	{
		SettingsValue = null;
		SettingsDescriptor = null;
		SettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Configure custom similarity settings to customize how search results are scored.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> Similarity(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities? similarity)
	{
		SimilarityValue = similarity;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Similarity(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor descriptor)
	{
		SimilarityValue = descriptor.PromisedValue;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Similarity(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor();
		configure?.Invoke(descriptor);
		SimilarityValue = descriptor.PromisedValue;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> SoftDeletes(Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes? softDeletes)
	{
		SoftDeletesDescriptor = null;
		SoftDeletesDescriptorAction = null;
		SoftDeletesValue = softDeletes;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> SoftDeletes(Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor descriptor)
	{
		SoftDeletesValue = null;
		SoftDeletesDescriptorAction = null;
		SoftDeletesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> SoftDeletes(Action<Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor> configure)
	{
		SoftDeletesValue = null;
		SoftDeletesDescriptor = null;
		SoftDeletesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort? sort)
	{
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortValue = sort;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor<TDocument> descriptor)
	{
		SortValue = null;
		SortDescriptorAction = null;
		SortDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Sort(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor<TDocument>> configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The store module allows you to control how index data is stored and accessed on disk.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor<TDocument> Store(Elastic.Clients.Elasticsearch.IndexManagement.Storage? store)
	{
		StoreDescriptor = null;
		StoreDescriptorAction = null;
		StoreValue = store;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Store(Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor descriptor)
	{
		StoreValue = null;
		StoreDescriptorAction = null;
		StoreDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Store(Action<Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor> configure)
	{
		StoreValue = null;
		StoreDescriptor = null;
		StoreDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> TimeSeries(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries? timeSeries)
	{
		TimeSeriesDescriptor = null;
		TimeSeriesDescriptorAction = null;
		TimeSeriesValue = timeSeries;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> TimeSeries(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor descriptor)
	{
		TimeSeriesValue = null;
		TimeSeriesDescriptorAction = null;
		TimeSeriesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> TimeSeries(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor> configure)
	{
		TimeSeriesValue = null;
		TimeSeriesDescriptor = null;
		TimeSeriesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> TopMetricsMaxSize(int? topMetricsMaxSize)
	{
		TopMetricsMaxSizeValue = topMetricsMaxSize;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Translog(Elastic.Clients.Elasticsearch.IndexManagement.Translog? translog)
	{
		TranslogDescriptor = null;
		TranslogDescriptorAction = null;
		TranslogValue = translog;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Translog(Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor descriptor)
	{
		TranslogValue = null;
		TranslogDescriptorAction = null;
		TranslogDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Translog(Action<Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor> configure)
	{
		TranslogValue = null;
		TranslogDescriptor = null;
		TranslogDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Uuid(string? uuid)
	{
		UuidValue = uuid;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> VerifiedBeforeClose(object? verifiedBeforeClose)
	{
		VerifiedBeforeCloseValue = verifiedBeforeClose;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Version(Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning? version)
	{
		VersionDescriptor = null;
		VersionDescriptorAction = null;
		VersionValue = version;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Version(Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor descriptor)
	{
		VersionValue = null;
		VersionDescriptorAction = null;
		VersionDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor<TDocument> Version(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor> configure)
	{
		VersionValue = null;
		VersionDescriptor = null;
		VersionDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AnalysisDescriptor is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, AnalysisDescriptor, options);
		}
		else if (AnalysisDescriptorAction is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor(AnalysisDescriptorAction), options);
		}
		else if (AnalysisValue is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, AnalysisValue, options);
		}

		if (AnalyzeDescriptor is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, AnalyzeDescriptor, options);
		}
		else if (AnalyzeDescriptorAction is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor(AnalyzeDescriptorAction), options);
		}
		else if (AnalyzeValue is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, AnalyzeValue, options);
		}

		if (!string.IsNullOrEmpty(AutoExpandReplicasValue))
		{
			writer.WritePropertyName("auto_expand_replicas");
			writer.WriteStringValue(AutoExpandReplicasValue);
		}

		if (BlocksDescriptor is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, BlocksDescriptor, options);
		}
		else if (BlocksDescriptorAction is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor(BlocksDescriptorAction), options);
		}
		else if (BlocksValue is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, BlocksValue, options);
		}

		if (CheckOnStartupValue is not null)
		{
			writer.WritePropertyName("check_on_startup");
			JsonSerializer.Serialize(writer, CheckOnStartupValue, options);
		}

		if (!string.IsNullOrEmpty(CodecValue))
		{
			writer.WritePropertyName("codec");
			writer.WriteStringValue(CodecValue);
		}

		if (CreationDateValue.HasValue)
		{
			writer.WritePropertyName("creation_date");
			writer.WriteNumberValue(CreationDateValue.Value);
		}

		if (CreationDateStringValue is not null)
		{
			writer.WritePropertyName("creation_date_string");
			JsonSerializer.Serialize(writer, CreationDateStringValue, options);
		}

		if (!string.IsNullOrEmpty(DefaultPipelineValue))
		{
			writer.WritePropertyName("default_pipeline");
			writer.WriteStringValue(DefaultPipelineValue);
		}

		if (!string.IsNullOrEmpty(FinalPipelineValue))
		{
			writer.WritePropertyName("final_pipeline");
			writer.WriteStringValue(FinalPipelineValue);
		}

		if (FormatValue is not null)
		{
			writer.WritePropertyName("format");
			JsonSerializer.Serialize(writer, FormatValue, options);
		}

		if (GcDeletesValue is not null)
		{
			writer.WritePropertyName("gc_deletes");
			JsonSerializer.Serialize(writer, GcDeletesValue, options);
		}

		if (HiddenValue is not null)
		{
			writer.WritePropertyName("hidden");
			JsonSerializer.Serialize(writer, HiddenValue, options);
		}

		if (HighlightDescriptor is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, HighlightDescriptor, options);
		}
		else if (HighlightDescriptorAction is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor(HighlightDescriptorAction), options);
		}
		else if (HighlightValue is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, HighlightValue, options);
		}

		if (IndexDescriptor is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, IndexDescriptor, options);
		}
		else if (IndexDescriptorAction is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>(IndexDescriptorAction), options);
		}
		else if (IndexValue is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, IndexValue, options);
		}

		if (IndexingPressureDescriptor is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, IndexingPressureDescriptor, options);
		}
		else if (IndexingPressureDescriptorAction is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor(IndexingPressureDescriptorAction), options);
		}
		else if (IndexingPressureValue is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, IndexingPressureValue, options);
		}

		if (IndexingSlowlogDescriptor is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, IndexingSlowlogDescriptor, options);
		}
		else if (IndexingSlowlogDescriptorAction is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor(IndexingSlowlogDescriptorAction), options);
		}
		else if (IndexingSlowlogValue is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, IndexingSlowlogValue, options);
		}

		if (LifecycleDescriptor is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, LifecycleDescriptor, options);
		}
		else if (LifecycleDescriptorAction is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor(LifecycleDescriptorAction), options);
		}
		else if (LifecycleValue is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, LifecycleValue, options);
		}

		if (LoadFixedBitsetFiltersEagerlyValue.HasValue)
		{
			writer.WritePropertyName("load_fixed_bitset_filters_eagerly");
			writer.WriteBooleanValue(LoadFixedBitsetFiltersEagerlyValue.Value);
		}

		if (MappingDescriptor is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, MappingDescriptor, options);
		}
		else if (MappingDescriptorAction is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor(MappingDescriptorAction), options);
		}
		else if (MappingValue is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, MappingValue, options);
		}

		if (MaxDocvalueFieldsSearchValue.HasValue)
		{
			writer.WritePropertyName("max_docvalue_fields_search");
			writer.WriteNumberValue(MaxDocvalueFieldsSearchValue.Value);
		}

		if (MaxInnerResultWindowValue.HasValue)
		{
			writer.WritePropertyName("max_inner_result_window");
			writer.WriteNumberValue(MaxInnerResultWindowValue.Value);
		}

		if (MaxNgramDiffValue.HasValue)
		{
			writer.WritePropertyName("max_ngram_diff");
			writer.WriteNumberValue(MaxNgramDiffValue.Value);
		}

		if (MaxRefreshListenersValue.HasValue)
		{
			writer.WritePropertyName("max_refresh_listeners");
			writer.WriteNumberValue(MaxRefreshListenersValue.Value);
		}

		if (MaxRegexLengthValue.HasValue)
		{
			writer.WritePropertyName("max_regex_length");
			writer.WriteNumberValue(MaxRegexLengthValue.Value);
		}

		if (MaxRescoreWindowValue.HasValue)
		{
			writer.WritePropertyName("max_rescore_window");
			writer.WriteNumberValue(MaxRescoreWindowValue.Value);
		}

		if (MaxResultWindowValue.HasValue)
		{
			writer.WritePropertyName("max_result_window");
			writer.WriteNumberValue(MaxResultWindowValue.Value);
		}

		if (MaxScriptFieldsValue.HasValue)
		{
			writer.WritePropertyName("max_script_fields");
			writer.WriteNumberValue(MaxScriptFieldsValue.Value);
		}

		if (MaxShingleDiffValue.HasValue)
		{
			writer.WritePropertyName("max_shingle_diff");
			writer.WriteNumberValue(MaxShingleDiffValue.Value);
		}

		if (MaxSlicesPerScrollValue.HasValue)
		{
			writer.WritePropertyName("max_slices_per_scroll");
			writer.WriteNumberValue(MaxSlicesPerScrollValue.Value);
		}

		if (MaxTermsCountValue.HasValue)
		{
			writer.WritePropertyName("max_terms_count");
			writer.WriteNumberValue(MaxTermsCountValue.Value);
		}

		if (MergeDescriptor is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, MergeDescriptor, options);
		}
		else if (MergeDescriptorAction is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor(MergeDescriptorAction), options);
		}
		else if (MergeValue is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, MergeValue, options);
		}

		if (!string.IsNullOrEmpty(ModeValue))
		{
			writer.WritePropertyName("mode");
			writer.WriteStringValue(ModeValue);
		}

		if (NumberOfReplicasValue is not null)
		{
			writer.WritePropertyName("number_of_replicas");
			JsonSerializer.Serialize(writer, NumberOfReplicasValue, options);
		}

		if (NumberOfRoutingShardsValue.HasValue)
		{
			writer.WritePropertyName("number_of_routing_shards");
			writer.WriteNumberValue(NumberOfRoutingShardsValue.Value);
		}

		if (NumberOfShardsValue is not null)
		{
			writer.WritePropertyName("number_of_shards");
			JsonSerializer.Serialize(writer, NumberOfShardsValue, options);
		}

		if (PriorityValue is not null)
		{
			writer.WritePropertyName("priority");
			JsonSerializer.Serialize(writer, PriorityValue, options);
		}

		if (ProvidedNameValue is not null)
		{
			writer.WritePropertyName("provided_name");
			JsonSerializer.Serialize(writer, ProvidedNameValue, options);
		}

		if (QueriesDescriptor is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, QueriesDescriptor, options);
		}
		else if (QueriesDescriptorAction is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor(QueriesDescriptorAction), options);
		}
		else if (QueriesValue is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, QueriesValue, options);
		}

		if (QueryStringDescriptor is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, QueryStringDescriptor, options);
		}
		else if (QueryStringDescriptorAction is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor(QueryStringDescriptorAction), options);
		}
		else if (QueryStringValue is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, QueryStringValue, options);
		}

		if (RefreshIntervalValue is not null)
		{
			writer.WritePropertyName("refresh_interval");
			JsonSerializer.Serialize(writer, RefreshIntervalValue, options);
		}

		if (RoutingDescriptor is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, RoutingDescriptor, options);
		}
		else if (RoutingDescriptorAction is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor(RoutingDescriptorAction), options);
		}
		else if (RoutingValue is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, RoutingValue, options);
		}

		if (RoutingPartitionSizeValue.HasValue)
		{
			writer.WritePropertyName("routing_partition_size");
			writer.WriteNumberValue(RoutingPartitionSizeValue.Value);
		}

		if (RoutingPathValue is not null)
		{
			writer.WritePropertyName("routing_path");
			SingleOrManySerializationHelper.Serialize<string>(RoutingPathValue, writer, options);
		}

		if (SearchDescriptor is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchDescriptor, options);
		}
		else if (SearchDescriptorAction is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor(SearchDescriptorAction), options);
		}
		else if (SearchValue is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchValue, options);
		}

		if (SettingsDescriptor is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, SettingsDescriptor, options);
		}
		else if (SettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor<TDocument>(SettingsDescriptorAction), options);
		}
		else if (SettingsValue is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, SettingsValue, options);
		}

		if (SimilarityValue is not null)
		{
			writer.WritePropertyName("similarity");
			JsonSerializer.Serialize(writer, SimilarityValue, options);
		}

		if (SoftDeletesDescriptor is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, SoftDeletesDescriptor, options);
		}
		else if (SoftDeletesDescriptorAction is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor(SoftDeletesDescriptorAction), options);
		}
		else if (SoftDeletesValue is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, SoftDeletesValue, options);
		}

		if (SortDescriptor is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortDescriptor, options);
		}
		else if (SortDescriptorAction is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor<TDocument>(SortDescriptorAction), options);
		}
		else if (SortValue is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortValue, options);
		}

		if (StoreDescriptor is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, StoreDescriptor, options);
		}
		else if (StoreDescriptorAction is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor(StoreDescriptorAction), options);
		}
		else if (StoreValue is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, StoreValue, options);
		}

		if (TimeSeriesDescriptor is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, TimeSeriesDescriptor, options);
		}
		else if (TimeSeriesDescriptorAction is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor(TimeSeriesDescriptorAction), options);
		}
		else if (TimeSeriesValue is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, TimeSeriesValue, options);
		}

		if (TopMetricsMaxSizeValue.HasValue)
		{
			writer.WritePropertyName("top_metrics_max_size");
			writer.WriteNumberValue(TopMetricsMaxSizeValue.Value);
		}

		if (TranslogDescriptor is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, TranslogDescriptor, options);
		}
		else if (TranslogDescriptorAction is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor(TranslogDescriptorAction), options);
		}
		else if (TranslogValue is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, TranslogValue, options);
		}

		if (!string.IsNullOrEmpty(UuidValue))
		{
			writer.WritePropertyName("uuid");
			writer.WriteStringValue(UuidValue);
		}

		if (VerifiedBeforeCloseValue is not null)
		{
			writer.WritePropertyName("verified_before_close");
			JsonSerializer.Serialize(writer, VerifiedBeforeCloseValue, options);
		}

		if (VersionDescriptor is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionDescriptor, options);
		}
		else if (VersionDescriptorAction is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor(VersionDescriptorAction), options);
		}
		else if (VersionValue is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionValue, options);
		}

		if (OtherSettingsValue is not null)
		{
			foreach (var additionalProperty in OtherSettingsValue)
			{
				writer.WritePropertyName(additionalProperty.Key);
				JsonSerializer.Serialize(writer, additionalProperty.Value, options);
			}
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.17/index-modules.html#index-modules-settings">Learn more about this API in the Elasticsearch documentation.</see></para>
/// </summary>
public sealed partial class IndexSettingsDescriptor : SerializableDescriptor<IndexSettingsDescriptor>
{
	internal IndexSettingsDescriptor(Action<IndexSettingsDescriptor> configure) => configure.Invoke(this);

	public IndexSettingsDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis? AnalysisValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor AnalysisDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor> AnalysisDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze? AnalyzeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor AnalyzeDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor> AnalyzeDescriptorAction { get; set; }
	private string? AutoExpandReplicasValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks? BlocksValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor BlocksDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor> BlocksDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup? CheckOnStartupValue { get; set; }
	private string? CodecValue { get; set; }
	private long? CreationDateValue { get; set; }
	private DateTimeOffset? CreationDateStringValue { get; set; }
	private string? DefaultPipelineValue { get; set; }
	private string? FinalPipelineValue { get; set; }
	private object? FormatValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? GcDeletesValue { get; set; }
	private object? HiddenValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight? HighlightValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor HighlightDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor> HighlightDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? IndexValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor IndexDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> IndexDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure? IndexingPressureValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor IndexingPressureDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor> IndexingPressureDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings? IndexingSlowlogValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor IndexingSlowlogDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor> IndexingSlowlogDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle? LifecycleValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor LifecycleDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor> LifecycleDescriptorAction { get; set; }
	private bool? LoadFixedBitsetFiltersEagerlyValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings? MappingValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor MappingDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor> MappingDescriptorAction { get; set; }
	private int? MaxDocvalueFieldsSearchValue { get; set; }
	private int? MaxInnerResultWindowValue { get; set; }
	private int? MaxNgramDiffValue { get; set; }
	private int? MaxRefreshListenersValue { get; set; }
	private int? MaxRegexLengthValue { get; set; }
	private int? MaxRescoreWindowValue { get; set; }
	private int? MaxResultWindowValue { get; set; }
	private int? MaxScriptFieldsValue { get; set; }
	private int? MaxShingleDiffValue { get; set; }
	private int? MaxSlicesPerScrollValue { get; set; }
	private int? MaxTermsCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Merge? MergeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor MergeDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor> MergeDescriptorAction { get; set; }
	private string? ModeValue { get; set; }
	private object? NumberOfReplicasValue { get; set; }
	private int? NumberOfRoutingShardsValue { get; set; }
	private object? NumberOfShardsValue { get; set; }
	private IDictionary<string, object> OtherSettingsValue { get; set; }
	private object? PriorityValue { get; set; }
	private Elastic.Clients.Elasticsearch.Name? ProvidedNameValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Queries? QueriesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor QueriesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor> QueriesDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString? QueryStringValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor QueryStringDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor> QueryStringDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? RefreshIntervalValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting? RoutingValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor RoutingDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor> RoutingDescriptorAction { get; set; }
	private int? RoutingPartitionSizeValue { get; set; }
	private ICollection<string>? RoutingPathValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch? SearchValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor SearchDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor> SearchDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? SettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor SettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> SettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities? SimilarityValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes? SoftDeletesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor SoftDeletesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor> SoftDeletesDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort? SortValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor SortDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor> SortDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Storage? StoreValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor StoreDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor> StoreDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries? TimeSeriesValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor TimeSeriesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor> TimeSeriesDescriptorAction { get; set; }
	private int? TopMetricsMaxSizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.Translog? TranslogValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor TranslogDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor> TranslogDescriptorAction { get; set; }
	private string? UuidValue { get; set; }
	private object? VerifiedBeforeCloseValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning? VersionValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor VersionDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor> VersionDescriptorAction { get; set; }

	public IndexSettingsDescriptor Analysis(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysis? analysis)
	{
		AnalysisDescriptor = null;
		AnalysisDescriptorAction = null;
		AnalysisValue = analysis;
		return Self;
	}

	public IndexSettingsDescriptor Analysis(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor descriptor)
	{
		AnalysisValue = null;
		AnalysisDescriptorAction = null;
		AnalysisDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Analysis(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor> configure)
	{
		AnalysisValue = null;
		AnalysisDescriptor = null;
		AnalysisDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings to define analyzers, tokenizers, token filters and character filters.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor Analyze(Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyze? analyze)
	{
		AnalyzeDescriptor = null;
		AnalyzeDescriptorAction = null;
		AnalyzeValue = analyze;
		return Self;
	}

	public IndexSettingsDescriptor Analyze(Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor descriptor)
	{
		AnalyzeValue = null;
		AnalyzeDescriptorAction = null;
		AnalyzeDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Analyze(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor> configure)
	{
		AnalyzeValue = null;
		AnalyzeDescriptor = null;
		AnalyzeDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor AutoExpandReplicas(string? autoExpandReplicas)
	{
		AutoExpandReplicasValue = autoExpandReplicas;
		return Self;
	}

	public IndexSettingsDescriptor Blocks(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocks? blocks)
	{
		BlocksDescriptor = null;
		BlocksDescriptorAction = null;
		BlocksValue = blocks;
		return Self;
	}

	public IndexSettingsDescriptor Blocks(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor descriptor)
	{
		BlocksValue = null;
		BlocksDescriptorAction = null;
		BlocksDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Blocks(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor> configure)
	{
		BlocksValue = null;
		BlocksDescriptor = null;
		BlocksDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor CheckOnStartup(Elastic.Clients.Elasticsearch.IndexManagement.IndexCheckOnStartup? checkOnStartup)
	{
		CheckOnStartupValue = checkOnStartup;
		return Self;
	}

	public IndexSettingsDescriptor Codec(string? codec)
	{
		CodecValue = codec;
		return Self;
	}

	public IndexSettingsDescriptor CreationDate(long? creationDate)
	{
		CreationDateValue = creationDate;
		return Self;
	}

	public IndexSettingsDescriptor CreationDateString(DateTimeOffset? creationDateString)
	{
		CreationDateStringValue = creationDateString;
		return Self;
	}

	public IndexSettingsDescriptor DefaultPipeline(string? defaultPipeline)
	{
		DefaultPipelineValue = defaultPipeline;
		return Self;
	}

	public IndexSettingsDescriptor FinalPipeline(string? finalPipeline)
	{
		FinalPipelineValue = finalPipeline;
		return Self;
	}

	public IndexSettingsDescriptor Format(object? format)
	{
		FormatValue = format;
		return Self;
	}

	public IndexSettingsDescriptor GcDeletes(Elastic.Clients.Elasticsearch.Duration? gcDeletes)
	{
		GcDeletesValue = gcDeletes;
		return Self;
	}

	public IndexSettingsDescriptor Hidden(object? hidden)
	{
		HiddenValue = hidden;
		return Self;
	}

	public IndexSettingsDescriptor Highlight(Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlight? highlight)
	{
		HighlightDescriptor = null;
		HighlightDescriptorAction = null;
		HighlightValue = highlight;
		return Self;
	}

	public IndexSettingsDescriptor Highlight(Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor descriptor)
	{
		HighlightValue = null;
		HighlightDescriptorAction = null;
		HighlightDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Highlight(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor> configure)
	{
		HighlightValue = null;
		HighlightDescriptor = null;
		HighlightDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Index(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? index)
	{
		IndexDescriptor = null;
		IndexDescriptorAction = null;
		IndexValue = index;
		return Self;
	}

	public IndexSettingsDescriptor Index(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor descriptor)
	{
		IndexValue = null;
		IndexDescriptorAction = null;
		IndexDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Index(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> configure)
	{
		IndexValue = null;
		IndexDescriptor = null;
		IndexDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Configure indexing back pressure limits.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor IndexingPressure(Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressure? indexingPressure)
	{
		IndexingPressureDescriptor = null;
		IndexingPressureDescriptorAction = null;
		IndexingPressureValue = indexingPressure;
		return Self;
	}

	public IndexSettingsDescriptor IndexingPressure(Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor descriptor)
	{
		IndexingPressureValue = null;
		IndexingPressureDescriptorAction = null;
		IndexingPressureDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor IndexingPressure(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor> configure)
	{
		IndexingPressureValue = null;
		IndexingPressureDescriptor = null;
		IndexingPressureDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor IndexingSlowlog(Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettings? indexingSlowlog)
	{
		IndexingSlowlogDescriptor = null;
		IndexingSlowlogDescriptorAction = null;
		IndexingSlowlogValue = indexingSlowlog;
		return Self;
	}

	public IndexSettingsDescriptor IndexingSlowlog(Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor descriptor)
	{
		IndexingSlowlogValue = null;
		IndexingSlowlogDescriptorAction = null;
		IndexingSlowlogDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor IndexingSlowlog(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor> configure)
	{
		IndexingSlowlogValue = null;
		IndexingSlowlogDescriptor = null;
		IndexingSlowlogDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Lifecycle(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycle? lifecycle)
	{
		LifecycleDescriptor = null;
		LifecycleDescriptorAction = null;
		LifecycleValue = lifecycle;
		return Self;
	}

	public IndexSettingsDescriptor Lifecycle(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor descriptor)
	{
		LifecycleValue = null;
		LifecycleDescriptorAction = null;
		LifecycleDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Lifecycle(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor> configure)
	{
		LifecycleValue = null;
		LifecycleDescriptor = null;
		LifecycleDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor LoadFixedBitsetFiltersEagerly(bool? loadFixedBitsetFiltersEagerly = true)
	{
		LoadFixedBitsetFiltersEagerlyValue = loadFixedBitsetFiltersEagerly;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enable or disable dynamic mapping for an index.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor Mapping(Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettings? mapping)
	{
		MappingDescriptor = null;
		MappingDescriptorAction = null;
		MappingValue = mapping;
		return Self;
	}

	public IndexSettingsDescriptor Mapping(Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor descriptor)
	{
		MappingValue = null;
		MappingDescriptorAction = null;
		MappingDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Mapping(Action<Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor> configure)
	{
		MappingValue = null;
		MappingDescriptor = null;
		MappingDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor MaxDocvalueFieldsSearch(int? maxDocvalueFieldsSearch)
	{
		MaxDocvalueFieldsSearchValue = maxDocvalueFieldsSearch;
		return Self;
	}

	public IndexSettingsDescriptor MaxInnerResultWindow(int? maxInnerResultWindow)
	{
		MaxInnerResultWindowValue = maxInnerResultWindow;
		return Self;
	}

	public IndexSettingsDescriptor MaxNgramDiff(int? maxNgramDiff)
	{
		MaxNgramDiffValue = maxNgramDiff;
		return Self;
	}

	public IndexSettingsDescriptor MaxRefreshListeners(int? maxRefreshListeners)
	{
		MaxRefreshListenersValue = maxRefreshListeners;
		return Self;
	}

	public IndexSettingsDescriptor MaxRegexLength(int? maxRegexLength)
	{
		MaxRegexLengthValue = maxRegexLength;
		return Self;
	}

	public IndexSettingsDescriptor MaxRescoreWindow(int? maxRescoreWindow)
	{
		MaxRescoreWindowValue = maxRescoreWindow;
		return Self;
	}

	public IndexSettingsDescriptor MaxResultWindow(int? maxResultWindow)
	{
		MaxResultWindowValue = maxResultWindow;
		return Self;
	}

	public IndexSettingsDescriptor MaxScriptFields(int? maxScriptFields)
	{
		MaxScriptFieldsValue = maxScriptFields;
		return Self;
	}

	public IndexSettingsDescriptor MaxShingleDiff(int? maxShingleDiff)
	{
		MaxShingleDiffValue = maxShingleDiff;
		return Self;
	}

	public IndexSettingsDescriptor MaxSlicesPerScroll(int? maxSlicesPerScroll)
	{
		MaxSlicesPerScrollValue = maxSlicesPerScroll;
		return Self;
	}

	public IndexSettingsDescriptor MaxTermsCount(int? maxTermsCount)
	{
		MaxTermsCountValue = maxTermsCount;
		return Self;
	}

	public IndexSettingsDescriptor Merge(Elastic.Clients.Elasticsearch.IndexManagement.Merge? merge)
	{
		MergeDescriptor = null;
		MergeDescriptorAction = null;
		MergeValue = merge;
		return Self;
	}

	public IndexSettingsDescriptor Merge(Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor descriptor)
	{
		MergeValue = null;
		MergeDescriptorAction = null;
		MergeDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Merge(Action<Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor> configure)
	{
		MergeValue = null;
		MergeDescriptor = null;
		MergeDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Mode(string? mode)
	{
		ModeValue = mode;
		return Self;
	}

	public IndexSettingsDescriptor NumberOfReplicas(object? numberOfReplicas)
	{
		NumberOfReplicasValue = numberOfReplicas;
		return Self;
	}

	public IndexSettingsDescriptor NumberOfRoutingShards(int? numberOfRoutingShards)
	{
		NumberOfRoutingShardsValue = numberOfRoutingShards;
		return Self;
	}

	public IndexSettingsDescriptor NumberOfShards(object? numberOfShards)
	{
		NumberOfShardsValue = numberOfShards;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Additional settings not covered in this type. Unless these settings are defined by a plugin, please open an issue on the <a href="https://github.com/elastic/elasticsearch-specification">Elasticsearch API specification</a> so that they can be added in a future release
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor OtherSettings(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		OtherSettingsValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	public IndexSettingsDescriptor Priority(object? priority)
	{
		PriorityValue = priority;
		return Self;
	}

	public IndexSettingsDescriptor ProvidedName(Elastic.Clients.Elasticsearch.Name? providedName)
	{
		ProvidedNameValue = providedName;
		return Self;
	}

	public IndexSettingsDescriptor Queries(Elastic.Clients.Elasticsearch.IndexManagement.Queries? queries)
	{
		QueriesDescriptor = null;
		QueriesDescriptorAction = null;
		QueriesValue = queries;
		return Self;
	}

	public IndexSettingsDescriptor Queries(Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor descriptor)
	{
		QueriesValue = null;
		QueriesDescriptorAction = null;
		QueriesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Queries(Action<Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor> configure)
	{
		QueriesValue = null;
		QueriesDescriptor = null;
		QueriesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor QueryString(Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryString? queryString)
	{
		QueryStringDescriptor = null;
		QueryStringDescriptorAction = null;
		QueryStringValue = queryString;
		return Self;
	}

	public IndexSettingsDescriptor QueryString(Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor descriptor)
	{
		QueryStringValue = null;
		QueryStringDescriptorAction = null;
		QueryStringDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor QueryString(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor> configure)
	{
		QueryStringValue = null;
		QueryStringDescriptor = null;
		QueryStringDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor RefreshInterval(Elastic.Clients.Elasticsearch.Duration? refreshInterval)
	{
		RefreshIntervalValue = refreshInterval;
		return Self;
	}

	public IndexSettingsDescriptor Routing(Elastic.Clients.Elasticsearch.IndexManagement.IndexRouting? routing)
	{
		RoutingDescriptor = null;
		RoutingDescriptorAction = null;
		RoutingValue = routing;
		return Self;
	}

	public IndexSettingsDescriptor Routing(Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor descriptor)
	{
		RoutingValue = null;
		RoutingDescriptorAction = null;
		RoutingDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Routing(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor> configure)
	{
		RoutingValue = null;
		RoutingDescriptor = null;
		RoutingDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor RoutingPartitionSize(int? routingPartitionSize)
	{
		RoutingPartitionSizeValue = routingPartitionSize;
		return Self;
	}

	public IndexSettingsDescriptor RoutingPath(ICollection<string>? routingPath)
	{
		RoutingPathValue = routingPath;
		return Self;
	}

	public IndexSettingsDescriptor Search(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearch? search)
	{
		SearchDescriptor = null;
		SearchDescriptorAction = null;
		SearchValue = search;
		return Self;
	}

	public IndexSettingsDescriptor Search(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor descriptor)
	{
		SearchValue = null;
		SearchDescriptorAction = null;
		SearchDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Search(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor> configure)
	{
		SearchValue = null;
		SearchDescriptor = null;
		SearchDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Settings(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings? settings)
	{
		SettingsDescriptor = null;
		SettingsDescriptorAction = null;
		SettingsValue = settings;
		return Self;
	}

	public IndexSettingsDescriptor Settings(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor descriptor)
	{
		SettingsValue = null;
		SettingsDescriptorAction = null;
		SettingsDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Settings(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor> configure)
	{
		SettingsValue = null;
		SettingsDescriptor = null;
		SettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Configure custom similarity settings to customize how search results are scored.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor Similarity(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilarities? similarity)
	{
		SimilarityValue = similarity;
		return Self;
	}

	public IndexSettingsDescriptor Similarity(Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor descriptor)
	{
		SimilarityValue = descriptor.PromisedValue;
		return Self;
	}

	public IndexSettingsDescriptor Similarity(Action<Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor> configure)
	{
		var descriptor = new Elastic.Clients.Elasticsearch.IndexManagement.SettingsSimilaritiesDescriptor();
		configure?.Invoke(descriptor);
		SimilarityValue = descriptor.PromisedValue;
		return Self;
	}

	public IndexSettingsDescriptor SoftDeletes(Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletes? softDeletes)
	{
		SoftDeletesDescriptor = null;
		SoftDeletesDescriptorAction = null;
		SoftDeletesValue = softDeletes;
		return Self;
	}

	public IndexSettingsDescriptor SoftDeletes(Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor descriptor)
	{
		SoftDeletesValue = null;
		SoftDeletesDescriptorAction = null;
		SoftDeletesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor SoftDeletes(Action<Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor> configure)
	{
		SoftDeletesValue = null;
		SoftDeletesDescriptor = null;
		SoftDeletesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Sort(Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSort? sort)
	{
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortValue = sort;
		return Self;
	}

	public IndexSettingsDescriptor Sort(Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor descriptor)
	{
		SortValue = null;
		SortDescriptorAction = null;
		SortDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Sort(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor> configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The store module allows you to control how index data is stored and accessed on disk.
	/// </para>
	/// </summary>
	public IndexSettingsDescriptor Store(Elastic.Clients.Elasticsearch.IndexManagement.Storage? store)
	{
		StoreDescriptor = null;
		StoreDescriptorAction = null;
		StoreValue = store;
		return Self;
	}

	public IndexSettingsDescriptor Store(Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor descriptor)
	{
		StoreValue = null;
		StoreDescriptorAction = null;
		StoreDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Store(Action<Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor> configure)
	{
		StoreValue = null;
		StoreDescriptor = null;
		StoreDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor TimeSeries(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeries? timeSeries)
	{
		TimeSeriesDescriptor = null;
		TimeSeriesDescriptorAction = null;
		TimeSeriesValue = timeSeries;
		return Self;
	}

	public IndexSettingsDescriptor TimeSeries(Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor descriptor)
	{
		TimeSeriesValue = null;
		TimeSeriesDescriptorAction = null;
		TimeSeriesDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor TimeSeries(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor> configure)
	{
		TimeSeriesValue = null;
		TimeSeriesDescriptor = null;
		TimeSeriesDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor TopMetricsMaxSize(int? topMetricsMaxSize)
	{
		TopMetricsMaxSizeValue = topMetricsMaxSize;
		return Self;
	}

	public IndexSettingsDescriptor Translog(Elastic.Clients.Elasticsearch.IndexManagement.Translog? translog)
	{
		TranslogDescriptor = null;
		TranslogDescriptorAction = null;
		TranslogValue = translog;
		return Self;
	}

	public IndexSettingsDescriptor Translog(Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor descriptor)
	{
		TranslogValue = null;
		TranslogDescriptorAction = null;
		TranslogDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Translog(Action<Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor> configure)
	{
		TranslogValue = null;
		TranslogDescriptor = null;
		TranslogDescriptorAction = configure;
		return Self;
	}

	public IndexSettingsDescriptor Uuid(string? uuid)
	{
		UuidValue = uuid;
		return Self;
	}

	public IndexSettingsDescriptor VerifiedBeforeClose(object? verifiedBeforeClose)
	{
		VerifiedBeforeCloseValue = verifiedBeforeClose;
		return Self;
	}

	public IndexSettingsDescriptor Version(Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioning? version)
	{
		VersionDescriptor = null;
		VersionDescriptorAction = null;
		VersionValue = version;
		return Self;
	}

	public IndexSettingsDescriptor Version(Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor descriptor)
	{
		VersionValue = null;
		VersionDescriptorAction = null;
		VersionDescriptor = descriptor;
		return Self;
	}

	public IndexSettingsDescriptor Version(Action<Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor> configure)
	{
		VersionValue = null;
		VersionDescriptor = null;
		VersionDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AnalysisDescriptor is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, AnalysisDescriptor, options);
		}
		else if (AnalysisDescriptorAction is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsAnalysisDescriptor(AnalysisDescriptorAction), options);
		}
		else if (AnalysisValue is not null)
		{
			writer.WritePropertyName("analysis");
			JsonSerializer.Serialize(writer, AnalysisValue, options);
		}

		if (AnalyzeDescriptor is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, AnalyzeDescriptor, options);
		}
		else if (AnalyzeDescriptorAction is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsAnalyzeDescriptor(AnalyzeDescriptorAction), options);
		}
		else if (AnalyzeValue is not null)
		{
			writer.WritePropertyName("analyze");
			JsonSerializer.Serialize(writer, AnalyzeValue, options);
		}

		if (!string.IsNullOrEmpty(AutoExpandReplicasValue))
		{
			writer.WritePropertyName("auto_expand_replicas");
			writer.WriteStringValue(AutoExpandReplicasValue);
		}

		if (BlocksDescriptor is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, BlocksDescriptor, options);
		}
		else if (BlocksDescriptorAction is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingBlocksDescriptor(BlocksDescriptorAction), options);
		}
		else if (BlocksValue is not null)
		{
			writer.WritePropertyName("blocks");
			JsonSerializer.Serialize(writer, BlocksValue, options);
		}

		if (CheckOnStartupValue is not null)
		{
			writer.WritePropertyName("check_on_startup");
			JsonSerializer.Serialize(writer, CheckOnStartupValue, options);
		}

		if (!string.IsNullOrEmpty(CodecValue))
		{
			writer.WritePropertyName("codec");
			writer.WriteStringValue(CodecValue);
		}

		if (CreationDateValue.HasValue)
		{
			writer.WritePropertyName("creation_date");
			writer.WriteNumberValue(CreationDateValue.Value);
		}

		if (CreationDateStringValue is not null)
		{
			writer.WritePropertyName("creation_date_string");
			JsonSerializer.Serialize(writer, CreationDateStringValue, options);
		}

		if (!string.IsNullOrEmpty(DefaultPipelineValue))
		{
			writer.WritePropertyName("default_pipeline");
			writer.WriteStringValue(DefaultPipelineValue);
		}

		if (!string.IsNullOrEmpty(FinalPipelineValue))
		{
			writer.WritePropertyName("final_pipeline");
			writer.WriteStringValue(FinalPipelineValue);
		}

		if (FormatValue is not null)
		{
			writer.WritePropertyName("format");
			JsonSerializer.Serialize(writer, FormatValue, options);
		}

		if (GcDeletesValue is not null)
		{
			writer.WritePropertyName("gc_deletes");
			JsonSerializer.Serialize(writer, GcDeletesValue, options);
		}

		if (HiddenValue is not null)
		{
			writer.WritePropertyName("hidden");
			JsonSerializer.Serialize(writer, HiddenValue, options);
		}

		if (HighlightDescriptor is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, HighlightDescriptor, options);
		}
		else if (HighlightDescriptorAction is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsHighlightDescriptor(HighlightDescriptorAction), options);
		}
		else if (HighlightValue is not null)
		{
			writer.WritePropertyName("highlight");
			JsonSerializer.Serialize(writer, HighlightValue, options);
		}

		if (IndexDescriptor is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, IndexDescriptor, options);
		}
		else if (IndexDescriptorAction is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor(IndexDescriptorAction), options);
		}
		else if (IndexValue is not null)
		{
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, IndexValue, options);
		}

		if (IndexingPressureDescriptor is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, IndexingPressureDescriptor, options);
		}
		else if (IndexingPressureDescriptorAction is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexingPressureDescriptor(IndexingPressureDescriptorAction), options);
		}
		else if (IndexingPressureValue is not null)
		{
			writer.WritePropertyName("indexing_pressure");
			JsonSerializer.Serialize(writer, IndexingPressureValue, options);
		}

		if (IndexingSlowlogDescriptor is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, IndexingSlowlogDescriptor, options);
		}
		else if (IndexingSlowlogDescriptorAction is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexingSlowlogSettingsDescriptor(IndexingSlowlogDescriptorAction), options);
		}
		else if (IndexingSlowlogValue is not null)
		{
			writer.WritePropertyName("indexing.slowlog");
			JsonSerializer.Serialize(writer, IndexingSlowlogValue, options);
		}

		if (LifecycleDescriptor is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, LifecycleDescriptor, options);
		}
		else if (LifecycleDescriptorAction is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsLifecycleDescriptor(LifecycleDescriptorAction), options);
		}
		else if (LifecycleValue is not null)
		{
			writer.WritePropertyName("lifecycle");
			JsonSerializer.Serialize(writer, LifecycleValue, options);
		}

		if (LoadFixedBitsetFiltersEagerlyValue.HasValue)
		{
			writer.WritePropertyName("load_fixed_bitset_filters_eagerly");
			writer.WriteBooleanValue(LoadFixedBitsetFiltersEagerlyValue.Value);
		}

		if (MappingDescriptor is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, MappingDescriptor, options);
		}
		else if (MappingDescriptorAction is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.MappingLimitSettingsDescriptor(MappingDescriptorAction), options);
		}
		else if (MappingValue is not null)
		{
			writer.WritePropertyName("mapping");
			JsonSerializer.Serialize(writer, MappingValue, options);
		}

		if (MaxDocvalueFieldsSearchValue.HasValue)
		{
			writer.WritePropertyName("max_docvalue_fields_search");
			writer.WriteNumberValue(MaxDocvalueFieldsSearchValue.Value);
		}

		if (MaxInnerResultWindowValue.HasValue)
		{
			writer.WritePropertyName("max_inner_result_window");
			writer.WriteNumberValue(MaxInnerResultWindowValue.Value);
		}

		if (MaxNgramDiffValue.HasValue)
		{
			writer.WritePropertyName("max_ngram_diff");
			writer.WriteNumberValue(MaxNgramDiffValue.Value);
		}

		if (MaxRefreshListenersValue.HasValue)
		{
			writer.WritePropertyName("max_refresh_listeners");
			writer.WriteNumberValue(MaxRefreshListenersValue.Value);
		}

		if (MaxRegexLengthValue.HasValue)
		{
			writer.WritePropertyName("max_regex_length");
			writer.WriteNumberValue(MaxRegexLengthValue.Value);
		}

		if (MaxRescoreWindowValue.HasValue)
		{
			writer.WritePropertyName("max_rescore_window");
			writer.WriteNumberValue(MaxRescoreWindowValue.Value);
		}

		if (MaxResultWindowValue.HasValue)
		{
			writer.WritePropertyName("max_result_window");
			writer.WriteNumberValue(MaxResultWindowValue.Value);
		}

		if (MaxScriptFieldsValue.HasValue)
		{
			writer.WritePropertyName("max_script_fields");
			writer.WriteNumberValue(MaxScriptFieldsValue.Value);
		}

		if (MaxShingleDiffValue.HasValue)
		{
			writer.WritePropertyName("max_shingle_diff");
			writer.WriteNumberValue(MaxShingleDiffValue.Value);
		}

		if (MaxSlicesPerScrollValue.HasValue)
		{
			writer.WritePropertyName("max_slices_per_scroll");
			writer.WriteNumberValue(MaxSlicesPerScrollValue.Value);
		}

		if (MaxTermsCountValue.HasValue)
		{
			writer.WritePropertyName("max_terms_count");
			writer.WriteNumberValue(MaxTermsCountValue.Value);
		}

		if (MergeDescriptor is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, MergeDescriptor, options);
		}
		else if (MergeDescriptorAction is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.MergeDescriptor(MergeDescriptorAction), options);
		}
		else if (MergeValue is not null)
		{
			writer.WritePropertyName("merge");
			JsonSerializer.Serialize(writer, MergeValue, options);
		}

		if (!string.IsNullOrEmpty(ModeValue))
		{
			writer.WritePropertyName("mode");
			writer.WriteStringValue(ModeValue);
		}

		if (NumberOfReplicasValue is not null)
		{
			writer.WritePropertyName("number_of_replicas");
			JsonSerializer.Serialize(writer, NumberOfReplicasValue, options);
		}

		if (NumberOfRoutingShardsValue.HasValue)
		{
			writer.WritePropertyName("number_of_routing_shards");
			writer.WriteNumberValue(NumberOfRoutingShardsValue.Value);
		}

		if (NumberOfShardsValue is not null)
		{
			writer.WritePropertyName("number_of_shards");
			JsonSerializer.Serialize(writer, NumberOfShardsValue, options);
		}

		if (PriorityValue is not null)
		{
			writer.WritePropertyName("priority");
			JsonSerializer.Serialize(writer, PriorityValue, options);
		}

		if (ProvidedNameValue is not null)
		{
			writer.WritePropertyName("provided_name");
			JsonSerializer.Serialize(writer, ProvidedNameValue, options);
		}

		if (QueriesDescriptor is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, QueriesDescriptor, options);
		}
		else if (QueriesDescriptorAction is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.QueriesDescriptor(QueriesDescriptorAction), options);
		}
		else if (QueriesValue is not null)
		{
			writer.WritePropertyName("queries");
			JsonSerializer.Serialize(writer, QueriesValue, options);
		}

		if (QueryStringDescriptor is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, QueryStringDescriptor, options);
		}
		else if (QueryStringDescriptorAction is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsQueryStringDescriptor(QueryStringDescriptorAction), options);
		}
		else if (QueryStringValue is not null)
		{
			writer.WritePropertyName("query_string");
			JsonSerializer.Serialize(writer, QueryStringValue, options);
		}

		if (RefreshIntervalValue is not null)
		{
			writer.WritePropertyName("refresh_interval");
			JsonSerializer.Serialize(writer, RefreshIntervalValue, options);
		}

		if (RoutingDescriptor is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, RoutingDescriptor, options);
		}
		else if (RoutingDescriptorAction is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexRoutingDescriptor(RoutingDescriptorAction), options);
		}
		else if (RoutingValue is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, RoutingValue, options);
		}

		if (RoutingPartitionSizeValue.HasValue)
		{
			writer.WritePropertyName("routing_partition_size");
			writer.WriteNumberValue(RoutingPartitionSizeValue.Value);
		}

		if (RoutingPathValue is not null)
		{
			writer.WritePropertyName("routing_path");
			SingleOrManySerializationHelper.Serialize<string>(RoutingPathValue, writer, options);
		}

		if (SearchDescriptor is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchDescriptor, options);
		}
		else if (SearchDescriptorAction is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SettingsSearchDescriptor(SearchDescriptorAction), options);
		}
		else if (SearchValue is not null)
		{
			writer.WritePropertyName("search");
			JsonSerializer.Serialize(writer, SearchValue, options);
		}

		if (SettingsDescriptor is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, SettingsDescriptor, options);
		}
		else if (SettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsDescriptor(SettingsDescriptorAction), options);
		}
		else if (SettingsValue is not null)
		{
			writer.WritePropertyName("settings");
			JsonSerializer.Serialize(writer, SettingsValue, options);
		}

		if (SimilarityValue is not null)
		{
			writer.WritePropertyName("similarity");
			JsonSerializer.Serialize(writer, SimilarityValue, options);
		}

		if (SoftDeletesDescriptor is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, SoftDeletesDescriptor, options);
		}
		else if (SoftDeletesDescriptorAction is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.SoftDeletesDescriptor(SoftDeletesDescriptorAction), options);
		}
		else if (SoftDeletesValue is not null)
		{
			writer.WritePropertyName("soft_deletes");
			JsonSerializer.Serialize(writer, SoftDeletesValue, options);
		}

		if (SortDescriptor is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortDescriptor, options);
		}
		else if (SortDescriptorAction is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSegmentSortDescriptor(SortDescriptorAction), options);
		}
		else if (SortValue is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortValue, options);
		}

		if (StoreDescriptor is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, StoreDescriptor, options);
		}
		else if (StoreDescriptorAction is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.StorageDescriptor(StoreDescriptorAction), options);
		}
		else if (StoreValue is not null)
		{
			writer.WritePropertyName("store");
			JsonSerializer.Serialize(writer, StoreValue, options);
		}

		if (TimeSeriesDescriptor is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, TimeSeriesDescriptor, options);
		}
		else if (TimeSeriesDescriptorAction is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingsTimeSeriesDescriptor(TimeSeriesDescriptorAction), options);
		}
		else if (TimeSeriesValue is not null)
		{
			writer.WritePropertyName("time_series");
			JsonSerializer.Serialize(writer, TimeSeriesValue, options);
		}

		if (TopMetricsMaxSizeValue.HasValue)
		{
			writer.WritePropertyName("top_metrics_max_size");
			writer.WriteNumberValue(TopMetricsMaxSizeValue.Value);
		}

		if (TranslogDescriptor is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, TranslogDescriptor, options);
		}
		else if (TranslogDescriptorAction is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.TranslogDescriptor(TranslogDescriptorAction), options);
		}
		else if (TranslogValue is not null)
		{
			writer.WritePropertyName("translog");
			JsonSerializer.Serialize(writer, TranslogValue, options);
		}

		if (!string.IsNullOrEmpty(UuidValue))
		{
			writer.WritePropertyName("uuid");
			writer.WriteStringValue(UuidValue);
		}

		if (VerifiedBeforeCloseValue is not null)
		{
			writer.WritePropertyName("verified_before_close");
			JsonSerializer.Serialize(writer, VerifiedBeforeCloseValue, options);
		}

		if (VersionDescriptor is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionDescriptor, options);
		}
		else if (VersionDescriptorAction is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.IndexManagement.IndexVersioningDescriptor(VersionDescriptorAction), options);
		}
		else if (VersionValue is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionValue, options);
		}

		if (OtherSettingsValue is not null)
		{
			foreach (var additionalProperty in OtherSettingsValue)
			{
				writer.WritePropertyName(additionalProperty.Key);
				JsonSerializer.Serialize(writer, additionalProperty.Value, options);
			}
		}

		writer.WriteEndObject();
	}
}