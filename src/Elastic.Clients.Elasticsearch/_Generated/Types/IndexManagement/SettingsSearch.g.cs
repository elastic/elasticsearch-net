// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class SettingsSearch
	{
		[JsonInclude]
		[JsonPropertyName("idle")]
		public Elastic.Clients.Elasticsearch.IndexManagement.SearchIdle Idle { get; set; }
	}

	public sealed partial class SettingsSearchDescriptor : DescriptorBase<SettingsSearchDescriptor>
	{
		public SettingsSearchDescriptor()
		{
		}

		internal SettingsSearchDescriptor(Action<SettingsSearchDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexManagement.SearchIdle IdleValue { get; private set; }

		internal SearchIdleDescriptor IdleDescriptor { get; private set; }

		internal Action<SearchIdleDescriptor> IdleDescriptorAction { get; private set; }

		public SettingsSearchDescriptor Idle(Elastic.Clients.Elasticsearch.IndexManagement.SearchIdle idle)
		{
			IdleDescriptor = null;
			IdleDescriptorAction = null;
			return Assign(idle, (a, v) => a.IdleValue = v);
		}

		public SettingsSearchDescriptor Idle(IndexManagement.SearchIdleDescriptor descriptor)
		{
			IdleValue = null;
			IdleDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.IdleDescriptor = v);
		}

		public SettingsSearchDescriptor Idle(Action<IndexManagement.SearchIdleDescriptor> configure)
		{
			IdleValue = null;
			IdleDescriptorAction = null;
			return Assign(configure, (a, v) => a.IdleDescriptorAction = v);
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (IdleDescriptor is not null)
			{
				writer.WritePropertyName("idle");
				JsonSerializer.Serialize(writer, IdleDescriptor, options);
			}
			else if (IdleDescriptorAction is not null)
			{
				writer.WritePropertyName("idle");
				JsonSerializer.Serialize(writer, new IndexManagement.SearchIdleDescriptor(IdleDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("idle");
				JsonSerializer.Serialize(writer, IdleValue, options);
			}

			writer.WriteEndObject();
		}
	}
}