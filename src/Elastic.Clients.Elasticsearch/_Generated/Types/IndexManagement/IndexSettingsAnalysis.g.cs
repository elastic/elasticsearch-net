// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public partial class IndexSettingsAnalysis
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public Elastic.Clients.Elasticsearch.Analysis.Analyzers? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("char_filter")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.CharFilter>? CharFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.TokenFilter>? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public Elastic.Clients.Elasticsearch.Analysis.Normalizers? Normalizer { get; set; }

		[JsonInclude]
		[JsonPropertyName("tokenizer")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.Tokenizer>? Tokenizer { get; set; }
	}

	public sealed partial class IndexSettingsAnalysisDescriptor : DescriptorBase<IndexSettingsAnalysisDescriptor>
	{
		public IndexSettingsAnalysisDescriptor()
		{
		}

		internal IndexSettingsAnalysisDescriptor(Action<IndexSettingsAnalysisDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Analysis.Analyzers? AnalyzerValue { get; private set; }

		internal Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.CharFilter>? CharFilterValue { get; private set; }

		internal Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.TokenFilter>? FilterValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Analysis.Normalizers? NormalizerValue { get; private set; }

		internal Dictionary<string, Elastic.Clients.Elasticsearch.Analysis.Tokenizer>? TokenizerValue { get; private set; }

		public IndexSettingsAnalysisDescriptor Analyzer(Elastic.Clients.Elasticsearch.Analysis.Analyzers? analyzer) => Assign(analyzer, (a, v) => a.AnalyzerValue = v);
		public IndexSettingsAnalysisDescriptor CharFilter(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.CharFilter>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.CharFilter>> selector) => Assign(selector, (a, v) => a.CharFilterValue = v?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.CharFilter>()));
		public IndexSettingsAnalysisDescriptor Filter(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.TokenFilter>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.TokenFilter>> selector) => Assign(selector, (a, v) => a.FilterValue = v?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.TokenFilter>()));
		public IndexSettingsAnalysisDescriptor Normalizer(Elastic.Clients.Elasticsearch.Analysis.Normalizers? normalizer) => Assign(normalizer, (a, v) => a.NormalizerValue = v);
		public IndexSettingsAnalysisDescriptor Tokenizer(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.Tokenizer>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.Tokenizer>> selector) => Assign(selector, (a, v) => a.TokenizerValue = v?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Analysis.Tokenizer>()));
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (AnalyzerValue is not null)
			{
				writer.WritePropertyName("analyzer");
				JsonSerializer.Serialize(writer, AnalyzerValue, options);
			}

			if (CharFilterValue is not null)
			{
				writer.WritePropertyName("char_filter");
				JsonSerializer.Serialize(writer, CharFilterValue, options);
			}

			if (FilterValue is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterValue, options);
			}

			if (NormalizerValue is not null)
			{
				writer.WritePropertyName("normalizer");
				JsonSerializer.Serialize(writer, NormalizerValue, options);
			}

			if (TokenizerValue is not null)
			{
				writer.WritePropertyName("tokenizer");
				JsonSerializer.Serialize(writer, TokenizerValue, options);
			}

			writer.WriteEndObject();
		}
	}
}