// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

internal sealed partial class UpdatedDataStreamSettingsConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.IndexManagement.UpdatedDataStreamSettings>
{
	private static readonly System.Text.Json.JsonEncodedText PropAppliedToDataStream = System.Text.Json.JsonEncodedText.Encode("applied_to_data_stream");
	private static readonly System.Text.Json.JsonEncodedText PropEffectiveSettings = System.Text.Json.JsonEncodedText.Encode("effective_settings");
	private static readonly System.Text.Json.JsonEncodedText PropError = System.Text.Json.JsonEncodedText.Encode("error");
	private static readonly System.Text.Json.JsonEncodedText PropIndexSettingsResults = System.Text.Json.JsonEncodedText.Encode("index_settings_results");
	private static readonly System.Text.Json.JsonEncodedText PropName = System.Text.Json.JsonEncodedText.Encode("name");
	private static readonly System.Text.Json.JsonEncodedText PropSettings = System.Text.Json.JsonEncodedText.Encode("settings");

	public override Elastic.Clients.Elasticsearch.IndexManagement.UpdatedDataStreamSettings Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool> propAppliedToDataStream = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings> propEffectiveSettings = default;
		LocalJsonValue<string?> propError = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingResults> propIndexSettingsResults = default;
		LocalJsonValue<string> propName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings> propSettings = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAppliedToDataStream.TryReadProperty(ref reader, options, PropAppliedToDataStream, null))
			{
				continue;
			}

			if (propEffectiveSettings.TryReadProperty(ref reader, options, PropEffectiveSettings, null))
			{
				continue;
			}

			if (propError.TryReadProperty(ref reader, options, PropError, null))
			{
				continue;
			}

			if (propIndexSettingsResults.TryReadProperty(ref reader, options, PropIndexSettingsResults, null))
			{
				continue;
			}

			if (propName.TryReadProperty(ref reader, options, PropName, null))
			{
				continue;
			}

			if (propSettings.TryReadProperty(ref reader, options, PropSettings, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.IndexManagement.UpdatedDataStreamSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			AppliedToDataStream = propAppliedToDataStream.Value,
			EffectiveSettings = propEffectiveSettings.Value,
			Error = propError.Value,
			IndexSettingsResults = propIndexSettingsResults.Value,
			Name = propName.Value,
			Settings = propSettings.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.IndexManagement.UpdatedDataStreamSettings value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAppliedToDataStream, value.AppliedToDataStream, null, null);
		writer.WriteProperty(options, PropEffectiveSettings, value.EffectiveSettings, null, null);
		writer.WriteProperty(options, PropError, value.Error, null, null);
		writer.WriteProperty(options, PropIndexSettingsResults, value.IndexSettingsResults, null, null);
		writer.WriteProperty(options, PropName, value.Name, null, null);
		writer.WriteProperty(options, PropSettings, value.Settings, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.IndexManagement.UpdatedDataStreamSettingsConverter))]
public sealed partial class UpdatedDataStreamSettings
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public UpdatedDataStreamSettings(bool appliedToDataStream, Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings effectiveSettings, Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingResults indexSettingsResults, string name, Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings settings)
	{
		AppliedToDataStream = appliedToDataStream;
		EffectiveSettings = effectiveSettings;
		IndexSettingsResults = indexSettingsResults;
		Name = name;
		Settings = settings;
	}
#if NET7_0_OR_GREATER
	public UpdatedDataStreamSettings()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public UpdatedDataStreamSettings()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal UpdatedDataStreamSettings(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// If the settings were successfully applied to the data stream (or would have been, if running in <c>dry_run</c>
	/// mode), it is <c>true</c>. If an error occurred, it is <c>false</c>.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	bool AppliedToDataStream { get; set; }

	/// <summary>
	/// <para>
	/// The settings that are effective on this data stream, taking into account the settings from the matching index
	/// template and the settings specific to this data stream.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings EffectiveSettings { get; set; }

	/// <summary>
	/// <para>
	/// A message explaining why the settings could not be applied to the data stream.
	/// </para>
	/// </summary>
	public string? Error { get; set; }

	/// <summary>
	/// <para>
	/// Information about whether and where each setting was applied.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.IndexManagement.IndexSettingResults IndexSettingsResults { get; set; }

	/// <summary>
	/// <para>
	/// The data stream name.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	string Name { get; set; }

	/// <summary>
	/// <para>
	/// The settings that are specfic to this data stream that will override any settings from the matching index template.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	Elastic.Clients.Elasticsearch.IndexManagement.IndexSettings Settings { get; set; }
}