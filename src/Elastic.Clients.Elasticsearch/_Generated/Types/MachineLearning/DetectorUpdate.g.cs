// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.MachineLearning;

public sealed partial class DetectorUpdate
{
	/// <summary>
	/// <para>
	/// An array of custom rule objects, which enable you to customize the way detectors operate.
	/// For example, a rule may dictate to the detector conditions under which results should be skipped.
	/// Kibana refers to custom rules as job rules.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("custom_rules")]
	public ICollection<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRule>? CustomRules { get; set; }

	/// <summary>
	/// <para>
	/// A description of the detector.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("description")]
	public string? Description { get; set; }

	/// <summary>
	/// <para>
	/// A unique identifier for the detector.
	/// This identifier is based on the order of the detectors in the <c>analysis_config</c>, starting at zero.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("detector_index")]
	public int DetectorIndex { get; set; }
}

public sealed partial class DetectorUpdateDescriptor<TDocument> : SerializableDescriptor<DetectorUpdateDescriptor<TDocument>>
{
	internal DetectorUpdateDescriptor(Action<DetectorUpdateDescriptor<TDocument>> configure) => configure.Invoke(this);

	public DetectorUpdateDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRule>? CustomRulesValue { get; set; }
	private Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument> CustomRulesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>> CustomRulesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>>[] CustomRulesDescriptorActions { get; set; }
	private string? DescriptionValue { get; set; }
	private int DetectorIndexValue { get; set; }

	/// <summary>
	/// <para>
	/// An array of custom rule objects, which enable you to customize the way detectors operate.
	/// For example, a rule may dictate to the detector conditions under which results should be skipped.
	/// Kibana refers to custom rules as job rules.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor<TDocument> CustomRules(ICollection<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRule>? customRules)
	{
		CustomRulesDescriptor = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = null;
		CustomRulesValue = customRules;
		return Self;
	}

	public DetectorUpdateDescriptor<TDocument> CustomRules(Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument> descriptor)
	{
		CustomRulesValue = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = null;
		CustomRulesDescriptor = descriptor;
		return Self;
	}

	public DetectorUpdateDescriptor<TDocument> CustomRules(Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>> configure)
	{
		CustomRulesValue = null;
		CustomRulesDescriptor = null;
		CustomRulesDescriptorActions = null;
		CustomRulesDescriptorAction = configure;
		return Self;
	}

	public DetectorUpdateDescriptor<TDocument> CustomRules(params Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>>[] configure)
	{
		CustomRulesValue = null;
		CustomRulesDescriptor = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A description of the detector.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor<TDocument> Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A unique identifier for the detector.
	/// This identifier is based on the order of the detectors in the <c>analysis_config</c>, starting at zero.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor<TDocument> DetectorIndex(int detectorIndex)
	{
		DetectorIndexValue = detectorIndex;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CustomRulesDescriptor is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, CustomRulesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (CustomRulesDescriptorAction is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>(CustomRulesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (CustomRulesDescriptorActions is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			foreach (var action in CustomRulesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor<TDocument>(action), options);
			}

			writer.WriteEndArray();
		}
		else if (CustomRulesValue is not null)
		{
			writer.WritePropertyName("custom_rules");
			JsonSerializer.Serialize(writer, CustomRulesValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		writer.WritePropertyName("detector_index");
		writer.WriteNumberValue(DetectorIndexValue);
		writer.WriteEndObject();
	}
}

public sealed partial class DetectorUpdateDescriptor : SerializableDescriptor<DetectorUpdateDescriptor>
{
	internal DetectorUpdateDescriptor(Action<DetectorUpdateDescriptor> configure) => configure.Invoke(this);

	public DetectorUpdateDescriptor() : base()
	{
	}

	private ICollection<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRule>? CustomRulesValue { get; set; }
	private Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor CustomRulesDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor> CustomRulesDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor>[] CustomRulesDescriptorActions { get; set; }
	private string? DescriptionValue { get; set; }
	private int DetectorIndexValue { get; set; }

	/// <summary>
	/// <para>
	/// An array of custom rule objects, which enable you to customize the way detectors operate.
	/// For example, a rule may dictate to the detector conditions under which results should be skipped.
	/// Kibana refers to custom rules as job rules.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor CustomRules(ICollection<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRule>? customRules)
	{
		CustomRulesDescriptor = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = null;
		CustomRulesValue = customRules;
		return Self;
	}

	public DetectorUpdateDescriptor CustomRules(Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor descriptor)
	{
		CustomRulesValue = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = null;
		CustomRulesDescriptor = descriptor;
		return Self;
	}

	public DetectorUpdateDescriptor CustomRules(Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor> configure)
	{
		CustomRulesValue = null;
		CustomRulesDescriptor = null;
		CustomRulesDescriptorActions = null;
		CustomRulesDescriptorAction = configure;
		return Self;
	}

	public DetectorUpdateDescriptor CustomRules(params Action<Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor>[] configure)
	{
		CustomRulesValue = null;
		CustomRulesDescriptor = null;
		CustomRulesDescriptorAction = null;
		CustomRulesDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A description of the detector.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor Description(string? description)
	{
		DescriptionValue = description;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A unique identifier for the detector.
	/// This identifier is based on the order of the detectors in the <c>analysis_config</c>, starting at zero.
	/// </para>
	/// </summary>
	public DetectorUpdateDescriptor DetectorIndex(int detectorIndex)
	{
		DetectorIndexValue = detectorIndex;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CustomRulesDescriptor is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, CustomRulesDescriptor, options);
			writer.WriteEndArray();
		}
		else if (CustomRulesDescriptorAction is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor(CustomRulesDescriptorAction), options);
			writer.WriteEndArray();
		}
		else if (CustomRulesDescriptorActions is not null)
		{
			writer.WritePropertyName("custom_rules");
			writer.WriteStartArray();
			foreach (var action in CustomRulesDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.MachineLearning.DetectionRuleDescriptor(action), options);
			}

			writer.WriteEndArray();
		}
		else if (CustomRulesValue is not null)
		{
			writer.WritePropertyName("custom_rules");
			JsonSerializer.Serialize(writer, CustomRulesValue, options);
		}

		if (!string.IsNullOrEmpty(DescriptionValue))
		{
			writer.WritePropertyName("description");
			writer.WriteStringValue(DescriptionValue);
		}

		writer.WritePropertyName("detector_index");
		writer.WriteNumberValue(DetectorIndexValue);
		writer.WriteEndObject();
	}
}