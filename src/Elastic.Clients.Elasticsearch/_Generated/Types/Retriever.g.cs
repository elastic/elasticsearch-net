// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

[JsonConverter(typeof(RetrieverConverter))]
public sealed partial class Retriever
{
	internal Retriever(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantType = variantName;
		Variant = variant;
	}

	internal Retriever()
	{
	}

	public object Variant { get; internal set; }
	public string VariantType { get; internal set; }

	public static Retriever Knn(Elastic.Clients.Elasticsearch.KnnRetriever knnRetriever) => new Retriever("knn", knnRetriever);
	public static Retriever Rrf(Elastic.Clients.Elasticsearch.RRFRetriever rRFRetriever) => new Retriever("rrf", rRFRetriever);
	public static Retriever Rule(Elastic.Clients.Elasticsearch.RuleRetriever ruleRetriever) => new Retriever("rule", ruleRetriever);
	public static Retriever Standard(Elastic.Clients.Elasticsearch.StandardRetriever standardRetriever) => new Retriever("standard", standardRetriever);
	public static Retriever TextSimilarityReranker(Elastic.Clients.Elasticsearch.TextSimilarityReranker textSimilarityReranker) => new Retriever("text_similarity_reranker", textSimilarityReranker);

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class RetrieverConverter : System.Text.Json.Serialization.JsonConverter<Retriever>
{
	private static readonly System.Text.Json.JsonEncodedText VariantKnn = System.Text.Json.JsonEncodedText.Encode("knn");
	private static readonly System.Text.Json.JsonEncodedText VariantRrf = System.Text.Json.JsonEncodedText.Encode("rrf");
	private static readonly System.Text.Json.JsonEncodedText VariantRule = System.Text.Json.JsonEncodedText.Encode("rule");
	private static readonly System.Text.Json.JsonEncodedText VariantStandard = System.Text.Json.JsonEncodedText.Encode("standard");
	private static readonly System.Text.Json.JsonEncodedText VariantTextSimilarityReranker = System.Text.Json.JsonEncodedText.Encode("text_similarity_reranker");

	public override Retriever Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var variantType = string.Empty;
		object? variant = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.ValueTextEquals(VariantKnn))
			{
				variantType = VariantKnn.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.KnnRetriever?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRrf))
			{
				variantType = VariantRrf.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.RRFRetriever?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantRule))
			{
				variantType = VariantRule.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.RuleRetriever?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantStandard))
			{
				variantType = VariantStandard.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.StandardRetriever?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantTextSimilarityReranker))
			{
				variantType = VariantTextSimilarityReranker.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.TextSimilarityReranker?>(options, null);
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Retriever { VariantType = variantType, Variant = variant };
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Retriever value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		switch (value.VariantType)
		{
			case "":
				break;
			case "knn":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.KnnRetriever?)value.Variant, null, null);
				break;
			case "rrf":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.RRFRetriever?)value.Variant, null, null);
				break;
			case "rule":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.RuleRetriever?)value.Variant, null, null);
				break;
			case "standard":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.StandardRetriever?)value.Variant, null, null);
				break;
			case "text_similarity_reranker":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.TextSimilarityReranker?)value.Variant, null, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.VariantType}' is not supported for type '{nameof(Retriever)}'.");
		}

		writer.WriteEndObject();
	}
}

public sealed partial class RetrieverDescriptor<TDocument> : SerializableDescriptor<RetrieverDescriptor<TDocument>>
{
	internal RetrieverDescriptor(Action<RetrieverDescriptor<TDocument>> configure) => configure.Invoke(this);

	public RetrieverDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private RetrieverDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private RetrieverDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public RetrieverDescriptor<TDocument> Knn(Elastic.Clients.Elasticsearch.KnnRetriever knnRetriever) => Set(knnRetriever, "knn");
	public RetrieverDescriptor<TDocument> Knn(Action<Elastic.Clients.Elasticsearch.KnnRetrieverDescriptor<TDocument>> configure) => Set(configure, "knn");
	public RetrieverDescriptor<TDocument> Rrf(Elastic.Clients.Elasticsearch.RRFRetriever rRFRetriever) => Set(rRFRetriever, "rrf");
	public RetrieverDescriptor<TDocument> Rrf(Action<Elastic.Clients.Elasticsearch.RRFRetrieverDescriptor<TDocument>> configure) => Set(configure, "rrf");
	public RetrieverDescriptor<TDocument> Rule(Elastic.Clients.Elasticsearch.RuleRetriever ruleRetriever) => Set(ruleRetriever, "rule");
	public RetrieverDescriptor<TDocument> Rule(Action<Elastic.Clients.Elasticsearch.RuleRetrieverDescriptor<TDocument>> configure) => Set(configure, "rule");
	public RetrieverDescriptor<TDocument> Standard(Elastic.Clients.Elasticsearch.StandardRetriever standardRetriever) => Set(standardRetriever, "standard");
	public RetrieverDescriptor<TDocument> Standard(Action<Elastic.Clients.Elasticsearch.StandardRetrieverDescriptor<TDocument>> configure) => Set(configure, "standard");
	public RetrieverDescriptor<TDocument> TextSimilarityReranker(Elastic.Clients.Elasticsearch.TextSimilarityReranker textSimilarityReranker) => Set(textSimilarityReranker, "text_similarity_reranker");
	public RetrieverDescriptor<TDocument> TextSimilarityReranker(Action<Elastic.Clients.Elasticsearch.TextSimilarityRerankerDescriptor<TDocument>> configure) => Set(configure, "text_similarity_reranker");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class RetrieverDescriptor : SerializableDescriptor<RetrieverDescriptor>
{
	internal RetrieverDescriptor(Action<RetrieverDescriptor> configure) => configure.Invoke(this);

	public RetrieverDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private RetrieverDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private RetrieverDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public RetrieverDescriptor Knn(Elastic.Clients.Elasticsearch.KnnRetriever knnRetriever) => Set(knnRetriever, "knn");
	public RetrieverDescriptor Knn<TDocument>(Action<Elastic.Clients.Elasticsearch.KnnRetrieverDescriptor> configure) => Set(configure, "knn");
	public RetrieverDescriptor Rrf(Elastic.Clients.Elasticsearch.RRFRetriever rRFRetriever) => Set(rRFRetriever, "rrf");
	public RetrieverDescriptor Rrf<TDocument>(Action<Elastic.Clients.Elasticsearch.RRFRetrieverDescriptor> configure) => Set(configure, "rrf");
	public RetrieverDescriptor Rule(Elastic.Clients.Elasticsearch.RuleRetriever ruleRetriever) => Set(ruleRetriever, "rule");
	public RetrieverDescriptor Rule<TDocument>(Action<Elastic.Clients.Elasticsearch.RuleRetrieverDescriptor> configure) => Set(configure, "rule");
	public RetrieverDescriptor Standard(Elastic.Clients.Elasticsearch.StandardRetriever standardRetriever) => Set(standardRetriever, "standard");
	public RetrieverDescriptor Standard<TDocument>(Action<Elastic.Clients.Elasticsearch.StandardRetrieverDescriptor> configure) => Set(configure, "standard");
	public RetrieverDescriptor TextSimilarityReranker(Elastic.Clients.Elasticsearch.TextSimilarityReranker textSimilarityReranker) => Set(textSimilarityReranker, "text_similarity_reranker");
	public RetrieverDescriptor TextSimilarityReranker<TDocument>(Action<Elastic.Clients.Elasticsearch.TextSimilarityRerankerDescriptor> configure) => Set(configure, "text_similarity_reranker");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}