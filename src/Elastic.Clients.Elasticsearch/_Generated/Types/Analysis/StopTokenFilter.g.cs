// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public sealed partial class StopTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// If <c>true</c>, stop word matching is case insensitive. For example, if <c>true</c>, a stop word of the matches and removes <c>The</c>, <c>THE</c>, or <c>the</c>. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("ignore_case")]
	public bool? IgnoreCase { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the last token of a stream is removed if it’s a stop word. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("remove_trailing")]
	public bool? RemoveTrailing { get; set; }

	/// <summary>
	/// <para>
	/// Language value, such as <c>_arabic_</c> or <c>_thai_</c>. Defaults to <c>_english_</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("stopwords")]
	public Elastic.Clients.Elasticsearch.Analysis.StopWords? Stopwords { get; set; }

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of stop words to remove.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each stop word in the file must be separated by a line break.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("stopwords_path")]
	public string? StopwordsPath { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "stop";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class StopTokenFilterDescriptor : SerializableDescriptor<StopTokenFilterDescriptor>, IBuildableDescriptor<StopTokenFilter>
{
	internal StopTokenFilterDescriptor(Action<StopTokenFilterDescriptor> configure) => configure.Invoke(this);

	public StopTokenFilterDescriptor() : base()
	{
	}

	private bool? IgnoreCaseValue { get; set; }
	private bool? RemoveTrailingValue { get; set; }
	private Elastic.Clients.Elasticsearch.Analysis.StopWords? StopwordsValue { get; set; }
	private string? StopwordsPathValue { get; set; }
	private string? VersionValue { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, stop word matching is case insensitive. For example, if <c>true</c>, a stop word of the matches and removes <c>The</c>, <c>THE</c>, or <c>the</c>. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public StopTokenFilterDescriptor IgnoreCase(bool? ignoreCase = true)
	{
		IgnoreCaseValue = ignoreCase;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the last token of a stream is removed if it’s a stop word. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	public StopTokenFilterDescriptor RemoveTrailing(bool? removeTrailing = true)
	{
		RemoveTrailingValue = removeTrailing;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Language value, such as <c>_arabic_</c> or <c>_thai_</c>. Defaults to <c>_english_</c>.
	/// </para>
	/// </summary>
	public StopTokenFilterDescriptor Stopwords(Elastic.Clients.Elasticsearch.Analysis.StopWords? stopwords)
	{
		StopwordsValue = stopwords;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of stop words to remove.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each stop word in the file must be separated by a line break.
	/// </para>
	/// </summary>
	public StopTokenFilterDescriptor StopwordsPath(string? stopwordsPath)
	{
		StopwordsPathValue = stopwordsPath;
		return Self;
	}

	public StopTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (IgnoreCaseValue.HasValue)
		{
			writer.WritePropertyName("ignore_case");
			writer.WriteBooleanValue(IgnoreCaseValue.Value);
		}

		if (RemoveTrailingValue.HasValue)
		{
			writer.WritePropertyName("remove_trailing");
			writer.WriteBooleanValue(RemoveTrailingValue.Value);
		}

		if (StopwordsValue is not null)
		{
			writer.WritePropertyName("stopwords");
			JsonSerializer.Serialize(writer, StopwordsValue, options);
		}

		if (!string.IsNullOrEmpty(StopwordsPathValue))
		{
			writer.WritePropertyName("stopwords_path");
			writer.WriteStringValue(StopwordsPathValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("stop");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	StopTokenFilter IBuildableDescriptor<StopTokenFilter>.Build() => new()
	{
		IgnoreCase = IgnoreCaseValue,
		RemoveTrailing = RemoveTrailingValue,
		Stopwords = StopwordsValue,
		StopwordsPath = StopwordsPathValue,
		Version = VersionValue
	};
}