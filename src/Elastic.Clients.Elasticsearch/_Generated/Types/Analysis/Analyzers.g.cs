// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public partial class Analyzers : IsADictionary<string, IAnalyzer>
{
	public Analyzers()
	{
	}

	public Analyzers(IDictionary<string, IAnalyzer> container) : base(container)
	{
	}

	public void Add(string name, IAnalyzer analyzer) => BackingDictionary.Add(Sanitize(name), analyzer);
	public bool TryGetAnalyzer(string name, [NotNullWhen(returnValue: true)] out IAnalyzer analyzer) => BackingDictionary.TryGetValue(Sanitize(name), out analyzer);

	public bool TryGetAnalyzer<T>(string name, [NotNullWhen(returnValue: true)] out T? analyzer) where T : class, IAnalyzer
	{
		if (BackingDictionary.TryGetValue(Sanitize(name), out var matchedValue) && matchedValue is T finalValue)
		{
			analyzer = finalValue;
			return true;
		}

		analyzer = null;
		return false;
	}
}

public sealed partial class AnalyzersDescriptor : IsADictionaryDescriptor<AnalyzersDescriptor, Analyzers, string, IAnalyzer>
{
	public AnalyzersDescriptor() : base(new Analyzers())
	{
	}

	public AnalyzersDescriptor(Analyzers analyzers) : base(analyzers ?? new Analyzers())
	{
	}

	public AnalyzersDescriptor Arabic(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ArabicAnalyzerDescriptor, ArabicAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Arabic(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.ArabicAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ArabicAnalyzerDescriptor, ArabicAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Arabic(string analyzerName, ArabicAnalyzer arabicAnalyzer) => AssignVariant(analyzerName, arabicAnalyzer);
	public AnalyzersDescriptor Armenian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ArmenianAnalyzerDescriptor, ArmenianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Armenian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.ArmenianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ArmenianAnalyzerDescriptor, ArmenianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Armenian(string analyzerName, ArmenianAnalyzer armenianAnalyzer) => AssignVariant(analyzerName, armenianAnalyzer);
	public AnalyzersDescriptor Basque(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BasqueAnalyzerDescriptor, BasqueAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Basque(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.BasqueAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BasqueAnalyzerDescriptor, BasqueAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Basque(string analyzerName, BasqueAnalyzer basqueAnalyzer) => AssignVariant(analyzerName, basqueAnalyzer);
	public AnalyzersDescriptor Bengali(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BengaliAnalyzerDescriptor, BengaliAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Bengali(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.BengaliAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BengaliAnalyzerDescriptor, BengaliAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Bengali(string analyzerName, BengaliAnalyzer bengaliAnalyzer) => AssignVariant(analyzerName, bengaliAnalyzer);
	public AnalyzersDescriptor Brazilian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BrazilianAnalyzerDescriptor, BrazilianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Brazilian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.BrazilianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BrazilianAnalyzerDescriptor, BrazilianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Brazilian(string analyzerName, BrazilianAnalyzer brazilianAnalyzer) => AssignVariant(analyzerName, brazilianAnalyzer);
	public AnalyzersDescriptor Bulgarian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BulgarianAnalyzerDescriptor, BulgarianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Bulgarian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.BulgarianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.BulgarianAnalyzerDescriptor, BulgarianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Bulgarian(string analyzerName, BulgarianAnalyzer bulgarianAnalyzer) => AssignVariant(analyzerName, bulgarianAnalyzer);
	public AnalyzersDescriptor Catalan(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CatalanAnalyzerDescriptor, CatalanAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Catalan(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.CatalanAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CatalanAnalyzerDescriptor, CatalanAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Catalan(string analyzerName, CatalanAnalyzer catalanAnalyzer) => AssignVariant(analyzerName, catalanAnalyzer);
	public AnalyzersDescriptor Chinese(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ChineseAnalyzerDescriptor, ChineseAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Chinese(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.ChineseAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ChineseAnalyzerDescriptor, ChineseAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Chinese(string analyzerName, ChineseAnalyzer chineseAnalyzer) => AssignVariant(analyzerName, chineseAnalyzer);
	public AnalyzersDescriptor Cjk(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CjkAnalyzerDescriptor, CjkAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Cjk(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.CjkAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CjkAnalyzerDescriptor, CjkAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Cjk(string analyzerName, CjkAnalyzer cjkAnalyzer) => AssignVariant(analyzerName, cjkAnalyzer);
	public AnalyzersDescriptor Custom(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CustomAnalyzerDescriptor, CustomAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Custom(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.CustomAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CustomAnalyzerDescriptor, CustomAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Custom(string analyzerName, CustomAnalyzer customAnalyzer) => AssignVariant(analyzerName, customAnalyzer);
	public AnalyzersDescriptor Czech(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CzechAnalyzerDescriptor, CzechAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Czech(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.CzechAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CzechAnalyzerDescriptor, CzechAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Czech(string analyzerName, CzechAnalyzer czechAnalyzer) => AssignVariant(analyzerName, czechAnalyzer);
	public AnalyzersDescriptor Danish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DanishAnalyzerDescriptor, DanishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Danish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.DanishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DanishAnalyzerDescriptor, DanishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Danish(string analyzerName, DanishAnalyzer danishAnalyzer) => AssignVariant(analyzerName, danishAnalyzer);
	public AnalyzersDescriptor Dutch(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DutchAnalyzerDescriptor, DutchAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Dutch(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.DutchAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DutchAnalyzerDescriptor, DutchAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Dutch(string analyzerName, DutchAnalyzer dutchAnalyzer) => AssignVariant(analyzerName, dutchAnalyzer);
	public AnalyzersDescriptor English(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EnglishAnalyzerDescriptor, EnglishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor English(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.EnglishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EnglishAnalyzerDescriptor, EnglishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor English(string analyzerName, EnglishAnalyzer englishAnalyzer) => AssignVariant(analyzerName, englishAnalyzer);
	public AnalyzersDescriptor Estonian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EstonianAnalyzerDescriptor, EstonianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Estonian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.EstonianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EstonianAnalyzerDescriptor, EstonianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Estonian(string analyzerName, EstonianAnalyzer estonianAnalyzer) => AssignVariant(analyzerName, estonianAnalyzer);
	public AnalyzersDescriptor Fingerprint(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FingerprintAnalyzerDescriptor, FingerprintAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Fingerprint(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.FingerprintAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FingerprintAnalyzerDescriptor, FingerprintAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Fingerprint(string analyzerName, FingerprintAnalyzer fingerprintAnalyzer) => AssignVariant(analyzerName, fingerprintAnalyzer);
	public AnalyzersDescriptor Finnish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FinnishAnalyzerDescriptor, FinnishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Finnish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.FinnishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FinnishAnalyzerDescriptor, FinnishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Finnish(string analyzerName, FinnishAnalyzer finnishAnalyzer) => AssignVariant(analyzerName, finnishAnalyzer);
	public AnalyzersDescriptor French(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FrenchAnalyzerDescriptor, FrenchAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor French(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.FrenchAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FrenchAnalyzerDescriptor, FrenchAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor French(string analyzerName, FrenchAnalyzer frenchAnalyzer) => AssignVariant(analyzerName, frenchAnalyzer);
	public AnalyzersDescriptor Galician(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GalicianAnalyzerDescriptor, GalicianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Galician(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.GalicianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GalicianAnalyzerDescriptor, GalicianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Galician(string analyzerName, GalicianAnalyzer galicianAnalyzer) => AssignVariant(analyzerName, galicianAnalyzer);
	public AnalyzersDescriptor German(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GermanAnalyzerDescriptor, GermanAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor German(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.GermanAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GermanAnalyzerDescriptor, GermanAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor German(string analyzerName, GermanAnalyzer germanAnalyzer) => AssignVariant(analyzerName, germanAnalyzer);
	public AnalyzersDescriptor Greek(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GreekAnalyzerDescriptor, GreekAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Greek(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.GreekAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.GreekAnalyzerDescriptor, GreekAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Greek(string analyzerName, GreekAnalyzer greekAnalyzer) => AssignVariant(analyzerName, greekAnalyzer);
	public AnalyzersDescriptor Hindi(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HindiAnalyzerDescriptor, HindiAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Hindi(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.HindiAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HindiAnalyzerDescriptor, HindiAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Hindi(string analyzerName, HindiAnalyzer hindiAnalyzer) => AssignVariant(analyzerName, hindiAnalyzer);
	public AnalyzersDescriptor Hungarian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HungarianAnalyzerDescriptor, HungarianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Hungarian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.HungarianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HungarianAnalyzerDescriptor, HungarianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Hungarian(string analyzerName, HungarianAnalyzer hungarianAnalyzer) => AssignVariant(analyzerName, hungarianAnalyzer);
	public AnalyzersDescriptor Icu(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuAnalyzerDescriptor, IcuAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Icu(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.IcuAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuAnalyzerDescriptor, IcuAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Icu(string analyzerName, IcuAnalyzer icuAnalyzer) => AssignVariant(analyzerName, icuAnalyzer);
	public AnalyzersDescriptor Indonesian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IndonesianAnalyzerDescriptor, IndonesianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Indonesian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.IndonesianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IndonesianAnalyzerDescriptor, IndonesianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Indonesian(string analyzerName, IndonesianAnalyzer indonesianAnalyzer) => AssignVariant(analyzerName, indonesianAnalyzer);
	public AnalyzersDescriptor Irish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IrishAnalyzerDescriptor, IrishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Irish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.IrishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IrishAnalyzerDescriptor, IrishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Irish(string analyzerName, IrishAnalyzer irishAnalyzer) => AssignVariant(analyzerName, irishAnalyzer);
	public AnalyzersDescriptor Italian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ItalianAnalyzerDescriptor, ItalianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Italian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.ItalianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ItalianAnalyzerDescriptor, ItalianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Italian(string analyzerName, ItalianAnalyzer italianAnalyzer) => AssignVariant(analyzerName, italianAnalyzer);
	public AnalyzersDescriptor Keyword(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeywordAnalyzerDescriptor, KeywordAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Keyword(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.KeywordAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeywordAnalyzerDescriptor, KeywordAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Keyword(string analyzerName, KeywordAnalyzer keywordAnalyzer) => AssignVariant(analyzerName, keywordAnalyzer);
	public AnalyzersDescriptor Kuromoji(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiAnalyzerDescriptor, KuromojiAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Kuromoji(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.KuromojiAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiAnalyzerDescriptor, KuromojiAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Kuromoji(string analyzerName, KuromojiAnalyzer kuromojiAnalyzer) => AssignVariant(analyzerName, kuromojiAnalyzer);
	public AnalyzersDescriptor Language(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LanguageAnalyzerDescriptor, LanguageAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Language(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.LanguageAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LanguageAnalyzerDescriptor, LanguageAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Language(string analyzerName, LanguageAnalyzer languageAnalyzer) => AssignVariant(analyzerName, languageAnalyzer);
	public AnalyzersDescriptor Latvian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LatvianAnalyzerDescriptor, LatvianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Latvian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.LatvianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LatvianAnalyzerDescriptor, LatvianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Latvian(string analyzerName, LatvianAnalyzer latvianAnalyzer) => AssignVariant(analyzerName, latvianAnalyzer);
	public AnalyzersDescriptor Lithuanian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LithuanianAnalyzerDescriptor, LithuanianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Lithuanian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.LithuanianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LithuanianAnalyzerDescriptor, LithuanianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Lithuanian(string analyzerName, LithuanianAnalyzer lithuanianAnalyzer) => AssignVariant(analyzerName, lithuanianAnalyzer);
	public AnalyzersDescriptor Nori(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NoriAnalyzerDescriptor, NoriAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Nori(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.NoriAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NoriAnalyzerDescriptor, NoriAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Nori(string analyzerName, NoriAnalyzer noriAnalyzer) => AssignVariant(analyzerName, noriAnalyzer);
	public AnalyzersDescriptor Norwegian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NorwegianAnalyzerDescriptor, NorwegianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Norwegian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.NorwegianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NorwegianAnalyzerDescriptor, NorwegianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Norwegian(string analyzerName, NorwegianAnalyzer norwegianAnalyzer) => AssignVariant(analyzerName, norwegianAnalyzer);
	public AnalyzersDescriptor Pattern(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternAnalyzerDescriptor, PatternAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Pattern(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.PatternAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternAnalyzerDescriptor, PatternAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Pattern(string analyzerName, PatternAnalyzer patternAnalyzer) => AssignVariant(analyzerName, patternAnalyzer);
	public AnalyzersDescriptor Persian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PersianAnalyzerDescriptor, PersianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Persian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.PersianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PersianAnalyzerDescriptor, PersianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Persian(string analyzerName, PersianAnalyzer persianAnalyzer) => AssignVariant(analyzerName, persianAnalyzer);
	public AnalyzersDescriptor Portuguese(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PortugueseAnalyzerDescriptor, PortugueseAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Portuguese(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.PortugueseAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PortugueseAnalyzerDescriptor, PortugueseAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Portuguese(string analyzerName, PortugueseAnalyzer portugueseAnalyzer) => AssignVariant(analyzerName, portugueseAnalyzer);
	public AnalyzersDescriptor Romanian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RomanianAnalyzerDescriptor, RomanianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Romanian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.RomanianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RomanianAnalyzerDescriptor, RomanianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Romanian(string analyzerName, RomanianAnalyzer romanianAnalyzer) => AssignVariant(analyzerName, romanianAnalyzer);
	public AnalyzersDescriptor Russian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RussianAnalyzerDescriptor, RussianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Russian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.RussianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RussianAnalyzerDescriptor, RussianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Russian(string analyzerName, RussianAnalyzer russianAnalyzer) => AssignVariant(analyzerName, russianAnalyzer);
	public AnalyzersDescriptor Serbian(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SerbianAnalyzerDescriptor, SerbianAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Serbian(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SerbianAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SerbianAnalyzerDescriptor, SerbianAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Serbian(string analyzerName, SerbianAnalyzer serbianAnalyzer) => AssignVariant(analyzerName, serbianAnalyzer);
	public AnalyzersDescriptor Simple(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SimpleAnalyzerDescriptor, SimpleAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Simple(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SimpleAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SimpleAnalyzerDescriptor, SimpleAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Simple(string analyzerName, SimpleAnalyzer simpleAnalyzer) => AssignVariant(analyzerName, simpleAnalyzer);
	public AnalyzersDescriptor Snowball(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SnowballAnalyzerDescriptor, SnowballAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Snowball(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SnowballAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SnowballAnalyzerDescriptor, SnowballAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Snowball(string analyzerName, SnowballAnalyzer snowballAnalyzer) => AssignVariant(analyzerName, snowballAnalyzer);
	public AnalyzersDescriptor Sorani(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SoraniAnalyzerDescriptor, SoraniAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Sorani(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SoraniAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SoraniAnalyzerDescriptor, SoraniAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Sorani(string analyzerName, SoraniAnalyzer soraniAnalyzer) => AssignVariant(analyzerName, soraniAnalyzer);
	public AnalyzersDescriptor Spanish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SpanishAnalyzerDescriptor, SpanishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Spanish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SpanishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SpanishAnalyzerDescriptor, SpanishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Spanish(string analyzerName, SpanishAnalyzer spanishAnalyzer) => AssignVariant(analyzerName, spanishAnalyzer);
	public AnalyzersDescriptor Standard(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StandardAnalyzerDescriptor, StandardAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Standard(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.StandardAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StandardAnalyzerDescriptor, StandardAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Standard(string analyzerName, StandardAnalyzer standardAnalyzer) => AssignVariant(analyzerName, standardAnalyzer);
	public AnalyzersDescriptor Stop(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StopAnalyzerDescriptor, StopAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Stop(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.StopAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StopAnalyzerDescriptor, StopAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Stop(string analyzerName, StopAnalyzer stopAnalyzer) => AssignVariant(analyzerName, stopAnalyzer);
	public AnalyzersDescriptor Swedish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SwedishAnalyzerDescriptor, SwedishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Swedish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.SwedishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SwedishAnalyzerDescriptor, SwedishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Swedish(string analyzerName, SwedishAnalyzer swedishAnalyzer) => AssignVariant(analyzerName, swedishAnalyzer);
	public AnalyzersDescriptor Thai(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ThaiAnalyzerDescriptor, ThaiAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Thai(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.ThaiAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ThaiAnalyzerDescriptor, ThaiAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Thai(string analyzerName, ThaiAnalyzer thaiAnalyzer) => AssignVariant(analyzerName, thaiAnalyzer);
	public AnalyzersDescriptor Turkish(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TurkishAnalyzerDescriptor, TurkishAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Turkish(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.TurkishAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TurkishAnalyzerDescriptor, TurkishAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Turkish(string analyzerName, TurkishAnalyzer turkishAnalyzer) => AssignVariant(analyzerName, turkishAnalyzer);
	public AnalyzersDescriptor Whitespace(string analyzerName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WhitespaceAnalyzerDescriptor, WhitespaceAnalyzer>(analyzerName, null);
	public AnalyzersDescriptor Whitespace(string analyzerName, Action<Elastic.Clients.Elasticsearch.Analysis.WhitespaceAnalyzerDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WhitespaceAnalyzerDescriptor, WhitespaceAnalyzer>(analyzerName, configure);
	public AnalyzersDescriptor Whitespace(string analyzerName, WhitespaceAnalyzer whitespaceAnalyzer) => AssignVariant(analyzerName, whitespaceAnalyzer);
}

internal sealed partial class AnalyzerInterfaceConverter : System.Text.Json.Serialization.JsonConverter<IAnalyzer>
{
	private static readonly System.Text.Json.JsonEncodedText PropDiscriminator = System.Text.Json.JsonEncodedText.Encode("type");

	public override IAnalyzer Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var readerSnapshot = reader;
		string? discriminator = "custom";
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.TryReadProperty(options, PropDiscriminator, ref discriminator))
			{
				break;
			}

			reader.Skip();
		}

		reader = readerSnapshot;
		return discriminator switch
		{
			"arabic" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ArabicAnalyzer>(options),
			"armenian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ArmenianAnalyzer>(options),
			"basque" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.BasqueAnalyzer>(options),
			"bengali" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.BengaliAnalyzer>(options),
			"brazilian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.BrazilianAnalyzer>(options),
			"bulgarian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.BulgarianAnalyzer>(options),
			"catalan" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CatalanAnalyzer>(options),
			"chinese" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ChineseAnalyzer>(options),
			"cjk" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CjkAnalyzer>(options),
			"custom" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CustomAnalyzer>(options),
			"czech" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CzechAnalyzer>(options),
			"danish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.DanishAnalyzer>(options),
			"dutch" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.DutchAnalyzer>(options),
			"english" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.EnglishAnalyzer>(options),
			"estonian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.EstonianAnalyzer>(options),
			"fingerprint" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.FingerprintAnalyzer>(options),
			"finnish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.FinnishAnalyzer>(options),
			"french" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.FrenchAnalyzer>(options),
			"galician" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.GalicianAnalyzer>(options),
			"german" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.GermanAnalyzer>(options),
			"greek" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.GreekAnalyzer>(options),
			"hindi" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.HindiAnalyzer>(options),
			"hungarian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.HungarianAnalyzer>(options),
			"icu_analyzer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuAnalyzer>(options),
			"indonesian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IndonesianAnalyzer>(options),
			"irish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IrishAnalyzer>(options),
			"italian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ItalianAnalyzer>(options),
			"keyword" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KeywordAnalyzer>(options),
			"kuromoji" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KuromojiAnalyzer>(options),
			"language" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LanguageAnalyzer>(options),
			"latvian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LatvianAnalyzer>(options),
			"lithuanian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LithuanianAnalyzer>(options),
			"nori" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NoriAnalyzer>(options),
			"norwegian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NorwegianAnalyzer>(options),
			"pattern" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PatternAnalyzer>(options),
			"persian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PersianAnalyzer>(options),
			"portuguese" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PortugueseAnalyzer>(options),
			"romanian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.RomanianAnalyzer>(options),
			"russian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.RussianAnalyzer>(options),
			"serbian" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SerbianAnalyzer>(options),
			"simple" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SimpleAnalyzer>(options),
			"snowball" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SnowballAnalyzer>(options),
			"sorani" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SoraniAnalyzer>(options),
			"spanish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SpanishAnalyzer>(options),
			"standard" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StandardAnalyzer>(options),
			"stop" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StopAnalyzer>(options),
			"swedish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SwedishAnalyzer>(options),
			"thai" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ThaiAnalyzer>(options),
			"turkish" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.TurkishAnalyzer>(options),
			"whitespace" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.WhitespaceAnalyzer>(options),
			_ => throw new System.Text.Json.JsonException($"Variant '{discriminator}' is not supported for type '{nameof(IAnalyzer)}'.")
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, IAnalyzer value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value.Type)
		{
			case "arabic":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ArabicAnalyzer)value);
				break;
			case "armenian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ArmenianAnalyzer)value);
				break;
			case "basque":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.BasqueAnalyzer)value);
				break;
			case "bengali":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.BengaliAnalyzer)value);
				break;
			case "brazilian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.BrazilianAnalyzer)value);
				break;
			case "bulgarian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.BulgarianAnalyzer)value);
				break;
			case "catalan":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CatalanAnalyzer)value);
				break;
			case "chinese":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ChineseAnalyzer)value);
				break;
			case "cjk":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CjkAnalyzer)value);
				break;
			case "custom":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CustomAnalyzer)value);
				break;
			case "czech":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CzechAnalyzer)value);
				break;
			case "danish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.DanishAnalyzer)value);
				break;
			case "dutch":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.DutchAnalyzer)value);
				break;
			case "english":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.EnglishAnalyzer)value);
				break;
			case "estonian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.EstonianAnalyzer)value);
				break;
			case "fingerprint":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.FingerprintAnalyzer)value);
				break;
			case "finnish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.FinnishAnalyzer)value);
				break;
			case "french":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.FrenchAnalyzer)value);
				break;
			case "galician":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.GalicianAnalyzer)value);
				break;
			case "german":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.GermanAnalyzer)value);
				break;
			case "greek":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.GreekAnalyzer)value);
				break;
			case "hindi":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.HindiAnalyzer)value);
				break;
			case "hungarian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.HungarianAnalyzer)value);
				break;
			case "icu_analyzer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuAnalyzer)value);
				break;
			case "indonesian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IndonesianAnalyzer)value);
				break;
			case "irish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IrishAnalyzer)value);
				break;
			case "italian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ItalianAnalyzer)value);
				break;
			case "keyword":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KeywordAnalyzer)value);
				break;
			case "kuromoji":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KuromojiAnalyzer)value);
				break;
			case "language":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LanguageAnalyzer)value);
				break;
			case "latvian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LatvianAnalyzer)value);
				break;
			case "lithuanian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LithuanianAnalyzer)value);
				break;
			case "nori":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NoriAnalyzer)value);
				break;
			case "norwegian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NorwegianAnalyzer)value);
				break;
			case "pattern":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PatternAnalyzer)value);
				break;
			case "persian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PersianAnalyzer)value);
				break;
			case "portuguese":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PortugueseAnalyzer)value);
				break;
			case "romanian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.RomanianAnalyzer)value);
				break;
			case "russian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.RussianAnalyzer)value);
				break;
			case "serbian":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SerbianAnalyzer)value);
				break;
			case "simple":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SimpleAnalyzer)value);
				break;
			case "snowball":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SnowballAnalyzer)value);
				break;
			case "sorani":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SoraniAnalyzer)value);
				break;
			case "spanish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SpanishAnalyzer)value);
				break;
			case "standard":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StandardAnalyzer)value);
				break;
			case "stop":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StopAnalyzer)value);
				break;
			case "swedish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SwedishAnalyzer)value);
				break;
			case "thai":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ThaiAnalyzer)value);
				break;
			case "turkish":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.TurkishAnalyzer)value);
				break;
			case "whitespace":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.WhitespaceAnalyzer)value);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.Type}' is not supported for type '{nameof(IAnalyzer)}'.");
		}
	}
}

[JsonConverter(typeof(AnalyzerInterfaceConverter))]
public partial interface IAnalyzer
{
	public string? Type { get; }
}