// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public sealed partial class MinHashTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// Number of buckets to which hashes are assigned. Defaults to <c>512</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("bucket_count")]
	public int? BucketCount { get; set; }

	/// <summary>
	/// <para>
	/// Number of ways to hash each token in the stream. Defaults to <c>1</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("hash_count")]
	public int? HashCount { get; set; }

	/// <summary>
	/// <para>
	/// Number of hashes to keep from each bucket. Defaults to <c>1</c>.
	/// Hashes are retained by ascending size, starting with the bucket’s smallest hash first.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("hash_set_size")]
	public int? HashSetSize { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "min_hash";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the filter fills empty buckets with the value of the first non-empty bucket to its circular right if the <c>hash_set_size</c> is <c>1</c>. If the <c>bucket_count</c> argument is greater than 1, this parameter defaults to <c>true</c>. Otherwise, this parameter defaults to <c>false</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("with_rotation")]
	public bool? WithRotation { get; set; }
}

public sealed partial class MinHashTokenFilterDescriptor : SerializableDescriptor<MinHashTokenFilterDescriptor>, IBuildableDescriptor<MinHashTokenFilter>
{
	internal MinHashTokenFilterDescriptor(Action<MinHashTokenFilterDescriptor> configure) => configure.Invoke(this);

	public MinHashTokenFilterDescriptor() : base()
	{
	}

	private int? BucketCountValue { get; set; }
	private int? HashCountValue { get; set; }
	private int? HashSetSizeValue { get; set; }
	private string? VersionValue { get; set; }
	private bool? WithRotationValue { get; set; }

	/// <summary>
	/// <para>
	/// Number of buckets to which hashes are assigned. Defaults to <c>512</c>.
	/// </para>
	/// </summary>
	public MinHashTokenFilterDescriptor BucketCount(int? bucketCount)
	{
		BucketCountValue = bucketCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Number of ways to hash each token in the stream. Defaults to <c>1</c>.
	/// </para>
	/// </summary>
	public MinHashTokenFilterDescriptor HashCount(int? hashCount)
	{
		HashCountValue = hashCount;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Number of hashes to keep from each bucket. Defaults to <c>1</c>.
	/// Hashes are retained by ascending size, starting with the bucket’s smallest hash first.
	/// </para>
	/// </summary>
	public MinHashTokenFilterDescriptor HashSetSize(int? hashSetSize)
	{
		HashSetSizeValue = hashSetSize;
		return Self;
	}

	public MinHashTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the filter fills empty buckets with the value of the first non-empty bucket to its circular right if the <c>hash_set_size</c> is <c>1</c>. If the <c>bucket_count</c> argument is greater than 1, this parameter defaults to <c>true</c>. Otherwise, this parameter defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public MinHashTokenFilterDescriptor WithRotation(bool? withRotation = true)
	{
		WithRotationValue = withRotation;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BucketCountValue.HasValue)
		{
			writer.WritePropertyName("bucket_count");
			writer.WriteNumberValue(BucketCountValue.Value);
		}

		if (HashCountValue.HasValue)
		{
			writer.WritePropertyName("hash_count");
			writer.WriteNumberValue(HashCountValue.Value);
		}

		if (HashSetSizeValue.HasValue)
		{
			writer.WritePropertyName("hash_set_size");
			writer.WriteNumberValue(HashSetSizeValue.Value);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("min_hash");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		if (WithRotationValue.HasValue)
		{
			writer.WritePropertyName("with_rotation");
			writer.WriteBooleanValue(WithRotationValue.Value);
		}

		writer.WriteEndObject();
	}

	MinHashTokenFilter IBuildableDescriptor<MinHashTokenFilter>.Build() => new()
	{
		BucketCount = BucketCountValue,
		HashCount = HashCountValue,
		HashSetSize = HashSetSizeValue,
		Version = VersionValue,
		WithRotation = WithRotationValue
	};
}