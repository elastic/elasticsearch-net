// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Analysis
{
	public partial class TokenFilterDefinitions : IsADictionaryBase<string, ITokenFilterDefinition>
	{
		public TokenFilterDefinitions()
		{
		}

		public TokenFilterDefinitions(IDictionary<string, ITokenFilterDefinition> container) : base(container)
		{
		}

		public void Add(string name, ITokenFilterDefinition tokenFilterDefinitions) => BackingDictionary.Add(name, tokenFilterDefinitions);
	}

	public sealed partial class TokenFilterDefinitionsDescriptor : IsADictionaryDescriptor<TokenFilterDefinitionsDescriptor, TokenFilterDefinitions, string, ITokenFilterDefinition>
	{
		public TokenFilterDefinitionsDescriptor() : base(new TokenFilterDefinitions())
		{
		}

		public TokenFilterDefinitionsDescriptor(TokenFilterDefinitions tokenFilterDefinitions) : base(tokenFilterDefinitions ?? new TokenFilterDefinitions())
		{
		}

		public TokenFilterDefinitionsDescriptor AsciiFoldingTokenFilter(string tokenFilterDefinitions) => AssignVariant<AsciiFoldingTokenFilterDescriptor, AsciiFoldingTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor AsciiFoldingTokenFilter(string tokenFilterDefinitions, Action<AsciiFoldingTokenFilterDescriptor> configure) => AssignVariant<AsciiFoldingTokenFilterDescriptor, AsciiFoldingTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor AsciiFoldingTokenFilter(string tokenFilterDefinitions, AsciiFoldingTokenFilter asciiFoldingTokenFilter) => AssignVariant(tokenFilterDefinitions, asciiFoldingTokenFilter);
		public TokenFilterDefinitionsDescriptor CommonGramsTokenFilter(string tokenFilterDefinitions) => AssignVariant<CommonGramsTokenFilterDescriptor, CommonGramsTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor CommonGramsTokenFilter(string tokenFilterDefinitions, Action<CommonGramsTokenFilterDescriptor> configure) => AssignVariant<CommonGramsTokenFilterDescriptor, CommonGramsTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor CommonGramsTokenFilter(string tokenFilterDefinitions, CommonGramsTokenFilter commonGramsTokenFilter) => AssignVariant(tokenFilterDefinitions, commonGramsTokenFilter);
		public TokenFilterDefinitionsDescriptor ConditionTokenFilter(string tokenFilterDefinitions) => AssignVariant<ConditionTokenFilterDescriptor, ConditionTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor ConditionTokenFilter(string tokenFilterDefinitions, Action<ConditionTokenFilterDescriptor> configure) => AssignVariant<ConditionTokenFilterDescriptor, ConditionTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor ConditionTokenFilter(string tokenFilterDefinitions, ConditionTokenFilter conditionTokenFilter) => AssignVariant(tokenFilterDefinitions, conditionTokenFilter);
		public TokenFilterDefinitionsDescriptor DelimitedPayloadTokenFilter(string tokenFilterDefinitions) => AssignVariant<DelimitedPayloadTokenFilterDescriptor, DelimitedPayloadTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor DelimitedPayloadTokenFilter(string tokenFilterDefinitions, Action<DelimitedPayloadTokenFilterDescriptor> configure) => AssignVariant<DelimitedPayloadTokenFilterDescriptor, DelimitedPayloadTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor DelimitedPayloadTokenFilter(string tokenFilterDefinitions, DelimitedPayloadTokenFilter delimitedPayloadTokenFilter) => AssignVariant(tokenFilterDefinitions, delimitedPayloadTokenFilter);
		public TokenFilterDefinitionsDescriptor DictionaryDecompounderTokenFilter(string tokenFilterDefinitions) => AssignVariant<DictionaryDecompounderTokenFilterDescriptor, DictionaryDecompounderTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor DictionaryDecompounderTokenFilter(string tokenFilterDefinitions, Action<DictionaryDecompounderTokenFilterDescriptor> configure) => AssignVariant<DictionaryDecompounderTokenFilterDescriptor, DictionaryDecompounderTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor DictionaryDecompounderTokenFilter(string tokenFilterDefinitions, DictionaryDecompounderTokenFilter dictionaryDecompounderTokenFilter) => AssignVariant(tokenFilterDefinitions, dictionaryDecompounderTokenFilter);
		public TokenFilterDefinitionsDescriptor EdgeNGramTokenFilter(string tokenFilterDefinitions) => AssignVariant<EdgeNGramTokenFilterDescriptor, EdgeNGramTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor EdgeNGramTokenFilter(string tokenFilterDefinitions, Action<EdgeNGramTokenFilterDescriptor> configure) => AssignVariant<EdgeNGramTokenFilterDescriptor, EdgeNGramTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor EdgeNGramTokenFilter(string tokenFilterDefinitions, EdgeNGramTokenFilter edgeNGramTokenFilter) => AssignVariant(tokenFilterDefinitions, edgeNGramTokenFilter);
		public TokenFilterDefinitionsDescriptor ElisionTokenFilter(string tokenFilterDefinitions) => AssignVariant<ElisionTokenFilterDescriptor, ElisionTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor ElisionTokenFilter(string tokenFilterDefinitions, Action<ElisionTokenFilterDescriptor> configure) => AssignVariant<ElisionTokenFilterDescriptor, ElisionTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor ElisionTokenFilter(string tokenFilterDefinitions, ElisionTokenFilter elisionTokenFilter) => AssignVariant(tokenFilterDefinitions, elisionTokenFilter);
		public TokenFilterDefinitionsDescriptor FingerprintTokenFilter(string tokenFilterDefinitions) => AssignVariant<FingerprintTokenFilterDescriptor, FingerprintTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor FingerprintTokenFilter(string tokenFilterDefinitions, Action<FingerprintTokenFilterDescriptor> configure) => AssignVariant<FingerprintTokenFilterDescriptor, FingerprintTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor FingerprintTokenFilter(string tokenFilterDefinitions, FingerprintTokenFilter fingerprintTokenFilter) => AssignVariant(tokenFilterDefinitions, fingerprintTokenFilter);
		public TokenFilterDefinitionsDescriptor HunspellTokenFilter(string tokenFilterDefinitions) => AssignVariant<HunspellTokenFilterDescriptor, HunspellTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor HunspellTokenFilter(string tokenFilterDefinitions, Action<HunspellTokenFilterDescriptor> configure) => AssignVariant<HunspellTokenFilterDescriptor, HunspellTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor HunspellTokenFilter(string tokenFilterDefinitions, HunspellTokenFilter hunspellTokenFilter) => AssignVariant(tokenFilterDefinitions, hunspellTokenFilter);
		public TokenFilterDefinitionsDescriptor HyphenationDecompounderTokenFilter(string tokenFilterDefinitions) => AssignVariant<HyphenationDecompounderTokenFilterDescriptor, HyphenationDecompounderTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor HyphenationDecompounderTokenFilter(string tokenFilterDefinitions, Action<HyphenationDecompounderTokenFilterDescriptor> configure) => AssignVariant<HyphenationDecompounderTokenFilterDescriptor, HyphenationDecompounderTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor HyphenationDecompounderTokenFilter(string tokenFilterDefinitions, HyphenationDecompounderTokenFilter hyphenationDecompounderTokenFilter) => AssignVariant(tokenFilterDefinitions, hyphenationDecompounderTokenFilter);
		public TokenFilterDefinitionsDescriptor IcuCollationTokenFilter(string tokenFilterDefinitions) => AssignVariant<IcuCollationTokenFilterDescriptor, IcuCollationTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor IcuCollationTokenFilter(string tokenFilterDefinitions, Action<IcuCollationTokenFilterDescriptor> configure) => AssignVariant<IcuCollationTokenFilterDescriptor, IcuCollationTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor IcuCollationTokenFilter(string tokenFilterDefinitions, IcuCollationTokenFilter icuCollationTokenFilter) => AssignVariant(tokenFilterDefinitions, icuCollationTokenFilter);
		public TokenFilterDefinitionsDescriptor IcuFoldingTokenFilter(string tokenFilterDefinitions) => AssignVariant<IcuFoldingTokenFilterDescriptor, IcuFoldingTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor IcuFoldingTokenFilter(string tokenFilterDefinitions, Action<IcuFoldingTokenFilterDescriptor> configure) => AssignVariant<IcuFoldingTokenFilterDescriptor, IcuFoldingTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor IcuFoldingTokenFilter(string tokenFilterDefinitions, IcuFoldingTokenFilter icuFoldingTokenFilter) => AssignVariant(tokenFilterDefinitions, icuFoldingTokenFilter);
		public TokenFilterDefinitionsDescriptor IcuNormalizationTokenFilter(string tokenFilterDefinitions) => AssignVariant<IcuNormalizationTokenFilterDescriptor, IcuNormalizationTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor IcuNormalizationTokenFilter(string tokenFilterDefinitions, Action<IcuNormalizationTokenFilterDescriptor> configure) => AssignVariant<IcuNormalizationTokenFilterDescriptor, IcuNormalizationTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor IcuNormalizationTokenFilter(string tokenFilterDefinitions, IcuNormalizationTokenFilter icuNormalizationTokenFilter) => AssignVariant(tokenFilterDefinitions, icuNormalizationTokenFilter);
		public TokenFilterDefinitionsDescriptor IcuTokenizer(string tokenFilterDefinitions) => AssignVariant<IcuTokenizerDescriptor, IcuTokenizer>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor IcuTokenizer(string tokenFilterDefinitions, Action<IcuTokenizerDescriptor> configure) => AssignVariant<IcuTokenizerDescriptor, IcuTokenizer>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor IcuTokenizer(string tokenFilterDefinitions, IcuTokenizer icuTokenizer) => AssignVariant(tokenFilterDefinitions, icuTokenizer);
		public TokenFilterDefinitionsDescriptor IcuTransformTokenFilter(string tokenFilterDefinitions) => AssignVariant<IcuTransformTokenFilterDescriptor, IcuTransformTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor IcuTransformTokenFilter(string tokenFilterDefinitions, Action<IcuTransformTokenFilterDescriptor> configure) => AssignVariant<IcuTransformTokenFilterDescriptor, IcuTransformTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor IcuTransformTokenFilter(string tokenFilterDefinitions, IcuTransformTokenFilter icuTransformTokenFilter) => AssignVariant(tokenFilterDefinitions, icuTransformTokenFilter);
		public TokenFilterDefinitionsDescriptor KeepTypesTokenFilter(string tokenFilterDefinitions) => AssignVariant<KeepTypesTokenFilterDescriptor, KeepTypesTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KeepTypesTokenFilter(string tokenFilterDefinitions, Action<KeepTypesTokenFilterDescriptor> configure) => AssignVariant<KeepTypesTokenFilterDescriptor, KeepTypesTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KeepTypesTokenFilter(string tokenFilterDefinitions, KeepTypesTokenFilter keepTypesTokenFilter) => AssignVariant(tokenFilterDefinitions, keepTypesTokenFilter);
		public TokenFilterDefinitionsDescriptor KeepWordsTokenFilter(string tokenFilterDefinitions) => AssignVariant<KeepWordsTokenFilterDescriptor, KeepWordsTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KeepWordsTokenFilter(string tokenFilterDefinitions, Action<KeepWordsTokenFilterDescriptor> configure) => AssignVariant<KeepWordsTokenFilterDescriptor, KeepWordsTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KeepWordsTokenFilter(string tokenFilterDefinitions, KeepWordsTokenFilter keepWordsTokenFilter) => AssignVariant(tokenFilterDefinitions, keepWordsTokenFilter);
		public TokenFilterDefinitionsDescriptor KeywordMarkerTokenFilter(string tokenFilterDefinitions) => AssignVariant<KeywordMarkerTokenFilterDescriptor, KeywordMarkerTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KeywordMarkerTokenFilter(string tokenFilterDefinitions, Action<KeywordMarkerTokenFilterDescriptor> configure) => AssignVariant<KeywordMarkerTokenFilterDescriptor, KeywordMarkerTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KeywordMarkerTokenFilter(string tokenFilterDefinitions, KeywordMarkerTokenFilter keywordMarkerTokenFilter) => AssignVariant(tokenFilterDefinitions, keywordMarkerTokenFilter);
		public TokenFilterDefinitionsDescriptor KStemTokenFilter(string tokenFilterDefinitions) => AssignVariant<KStemTokenFilterDescriptor, KStemTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KStemTokenFilter(string tokenFilterDefinitions, Action<KStemTokenFilterDescriptor> configure) => AssignVariant<KStemTokenFilterDescriptor, KStemTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KStemTokenFilter(string tokenFilterDefinitions, KStemTokenFilter kStemTokenFilter) => AssignVariant(tokenFilterDefinitions, kStemTokenFilter);
		public TokenFilterDefinitionsDescriptor KuromojiPartOfSpeechTokenFilter(string tokenFilterDefinitions) => AssignVariant<KuromojiPartOfSpeechTokenFilterDescriptor, KuromojiPartOfSpeechTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KuromojiPartOfSpeechTokenFilter(string tokenFilterDefinitions, Action<KuromojiPartOfSpeechTokenFilterDescriptor> configure) => AssignVariant<KuromojiPartOfSpeechTokenFilterDescriptor, KuromojiPartOfSpeechTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KuromojiPartOfSpeechTokenFilter(string tokenFilterDefinitions, KuromojiPartOfSpeechTokenFilter kuromojiPartOfSpeechTokenFilter) => AssignVariant(tokenFilterDefinitions, kuromojiPartOfSpeechTokenFilter);
		public TokenFilterDefinitionsDescriptor KuromojiReadingFormTokenFilter(string tokenFilterDefinitions) => AssignVariant<KuromojiReadingFormTokenFilterDescriptor, KuromojiReadingFormTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KuromojiReadingFormTokenFilter(string tokenFilterDefinitions, Action<KuromojiReadingFormTokenFilterDescriptor> configure) => AssignVariant<KuromojiReadingFormTokenFilterDescriptor, KuromojiReadingFormTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KuromojiReadingFormTokenFilter(string tokenFilterDefinitions, KuromojiReadingFormTokenFilter kuromojiReadingFormTokenFilter) => AssignVariant(tokenFilterDefinitions, kuromojiReadingFormTokenFilter);
		public TokenFilterDefinitionsDescriptor KuromojiStemmerTokenFilter(string tokenFilterDefinitions) => AssignVariant<KuromojiStemmerTokenFilterDescriptor, KuromojiStemmerTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor KuromojiStemmerTokenFilter(string tokenFilterDefinitions, Action<KuromojiStemmerTokenFilterDescriptor> configure) => AssignVariant<KuromojiStemmerTokenFilterDescriptor, KuromojiStemmerTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor KuromojiStemmerTokenFilter(string tokenFilterDefinitions, KuromojiStemmerTokenFilter kuromojiStemmerTokenFilter) => AssignVariant(tokenFilterDefinitions, kuromojiStemmerTokenFilter);
		public TokenFilterDefinitionsDescriptor LengthTokenFilter(string tokenFilterDefinitions) => AssignVariant<LengthTokenFilterDescriptor, LengthTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor LengthTokenFilter(string tokenFilterDefinitions, Action<LengthTokenFilterDescriptor> configure) => AssignVariant<LengthTokenFilterDescriptor, LengthTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor LengthTokenFilter(string tokenFilterDefinitions, LengthTokenFilter lengthTokenFilter) => AssignVariant(tokenFilterDefinitions, lengthTokenFilter);
		public TokenFilterDefinitionsDescriptor LimitTokenCountTokenFilter(string tokenFilterDefinitions) => AssignVariant<LimitTokenCountTokenFilterDescriptor, LimitTokenCountTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor LimitTokenCountTokenFilter(string tokenFilterDefinitions, Action<LimitTokenCountTokenFilterDescriptor> configure) => AssignVariant<LimitTokenCountTokenFilterDescriptor, LimitTokenCountTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor LimitTokenCountTokenFilter(string tokenFilterDefinitions, LimitTokenCountTokenFilter limitTokenCountTokenFilter) => AssignVariant(tokenFilterDefinitions, limitTokenCountTokenFilter);
		public TokenFilterDefinitionsDescriptor LowercaseTokenFilter(string tokenFilterDefinitions) => AssignVariant<LowercaseTokenFilterDescriptor, LowercaseTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor LowercaseTokenFilter(string tokenFilterDefinitions, Action<LowercaseTokenFilterDescriptor> configure) => AssignVariant<LowercaseTokenFilterDescriptor, LowercaseTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor LowercaseTokenFilter(string tokenFilterDefinitions, LowercaseTokenFilter lowercaseTokenFilter) => AssignVariant(tokenFilterDefinitions, lowercaseTokenFilter);
		public TokenFilterDefinitionsDescriptor MultiplexerTokenFilter(string tokenFilterDefinitions) => AssignVariant<MultiplexerTokenFilterDescriptor, MultiplexerTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor MultiplexerTokenFilter(string tokenFilterDefinitions, Action<MultiplexerTokenFilterDescriptor> configure) => AssignVariant<MultiplexerTokenFilterDescriptor, MultiplexerTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor MultiplexerTokenFilter(string tokenFilterDefinitions, MultiplexerTokenFilter multiplexerTokenFilter) => AssignVariant(tokenFilterDefinitions, multiplexerTokenFilter);
		public TokenFilterDefinitionsDescriptor NGramTokenFilter(string tokenFilterDefinitions) => AssignVariant<NGramTokenFilterDescriptor, NGramTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor NGramTokenFilter(string tokenFilterDefinitions, Action<NGramTokenFilterDescriptor> configure) => AssignVariant<NGramTokenFilterDescriptor, NGramTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor NGramTokenFilter(string tokenFilterDefinitions, NGramTokenFilter nGramTokenFilter) => AssignVariant(tokenFilterDefinitions, nGramTokenFilter);
		public TokenFilterDefinitionsDescriptor NoriPartOfSpeechTokenFilter(string tokenFilterDefinitions) => AssignVariant<NoriPartOfSpeechTokenFilterDescriptor, NoriPartOfSpeechTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor NoriPartOfSpeechTokenFilter(string tokenFilterDefinitions, Action<NoriPartOfSpeechTokenFilterDescriptor> configure) => AssignVariant<NoriPartOfSpeechTokenFilterDescriptor, NoriPartOfSpeechTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor NoriPartOfSpeechTokenFilter(string tokenFilterDefinitions, NoriPartOfSpeechTokenFilter noriPartOfSpeechTokenFilter) => AssignVariant(tokenFilterDefinitions, noriPartOfSpeechTokenFilter);
		public TokenFilterDefinitionsDescriptor PatternCaptureTokenFilter(string tokenFilterDefinitions) => AssignVariant<PatternCaptureTokenFilterDescriptor, PatternCaptureTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor PatternCaptureTokenFilter(string tokenFilterDefinitions, Action<PatternCaptureTokenFilterDescriptor> configure) => AssignVariant<PatternCaptureTokenFilterDescriptor, PatternCaptureTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor PatternCaptureTokenFilter(string tokenFilterDefinitions, PatternCaptureTokenFilter patternCaptureTokenFilter) => AssignVariant(tokenFilterDefinitions, patternCaptureTokenFilter);
		public TokenFilterDefinitionsDescriptor PatternReplaceTokenFilter(string tokenFilterDefinitions) => AssignVariant<PatternReplaceTokenFilterDescriptor, PatternReplaceTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor PatternReplaceTokenFilter(string tokenFilterDefinitions, Action<PatternReplaceTokenFilterDescriptor> configure) => AssignVariant<PatternReplaceTokenFilterDescriptor, PatternReplaceTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor PatternReplaceTokenFilter(string tokenFilterDefinitions, PatternReplaceTokenFilter patternReplaceTokenFilter) => AssignVariant(tokenFilterDefinitions, patternReplaceTokenFilter);
		public TokenFilterDefinitionsDescriptor PhoneticTokenFilter(string tokenFilterDefinitions) => AssignVariant<PhoneticTokenFilterDescriptor, PhoneticTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor PhoneticTokenFilter(string tokenFilterDefinitions, Action<PhoneticTokenFilterDescriptor> configure) => AssignVariant<PhoneticTokenFilterDescriptor, PhoneticTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor PhoneticTokenFilter(string tokenFilterDefinitions, PhoneticTokenFilter phoneticTokenFilter) => AssignVariant(tokenFilterDefinitions, phoneticTokenFilter);
		public TokenFilterDefinitionsDescriptor PorterStemTokenFilter(string tokenFilterDefinitions) => AssignVariant<PorterStemTokenFilterDescriptor, PorterStemTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor PorterStemTokenFilter(string tokenFilterDefinitions, Action<PorterStemTokenFilterDescriptor> configure) => AssignVariant<PorterStemTokenFilterDescriptor, PorterStemTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor PorterStemTokenFilter(string tokenFilterDefinitions, PorterStemTokenFilter porterStemTokenFilter) => AssignVariant(tokenFilterDefinitions, porterStemTokenFilter);
		public TokenFilterDefinitionsDescriptor PredicateTokenFilter(string tokenFilterDefinitions) => AssignVariant<PredicateTokenFilterDescriptor, PredicateTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor PredicateTokenFilter(string tokenFilterDefinitions, Action<PredicateTokenFilterDescriptor> configure) => AssignVariant<PredicateTokenFilterDescriptor, PredicateTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor PredicateTokenFilter(string tokenFilterDefinitions, PredicateTokenFilter predicateTokenFilter) => AssignVariant(tokenFilterDefinitions, predicateTokenFilter);
		public TokenFilterDefinitionsDescriptor RemoveDuplicatesTokenFilter(string tokenFilterDefinitions) => AssignVariant<RemoveDuplicatesTokenFilterDescriptor, RemoveDuplicatesTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor RemoveDuplicatesTokenFilter(string tokenFilterDefinitions, Action<RemoveDuplicatesTokenFilterDescriptor> configure) => AssignVariant<RemoveDuplicatesTokenFilterDescriptor, RemoveDuplicatesTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor RemoveDuplicatesTokenFilter(string tokenFilterDefinitions, RemoveDuplicatesTokenFilter removeDuplicatesTokenFilter) => AssignVariant(tokenFilterDefinitions, removeDuplicatesTokenFilter);
		public TokenFilterDefinitionsDescriptor ReverseTokenFilter(string tokenFilterDefinitions) => AssignVariant<ReverseTokenFilterDescriptor, ReverseTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor ReverseTokenFilter(string tokenFilterDefinitions, Action<ReverseTokenFilterDescriptor> configure) => AssignVariant<ReverseTokenFilterDescriptor, ReverseTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor ReverseTokenFilter(string tokenFilterDefinitions, ReverseTokenFilter reverseTokenFilter) => AssignVariant(tokenFilterDefinitions, reverseTokenFilter);
		public TokenFilterDefinitionsDescriptor ShingleTokenFilter(string tokenFilterDefinitions) => AssignVariant<ShingleTokenFilterDescriptor, ShingleTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor ShingleTokenFilter(string tokenFilterDefinitions, Action<ShingleTokenFilterDescriptor> configure) => AssignVariant<ShingleTokenFilterDescriptor, ShingleTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor ShingleTokenFilter(string tokenFilterDefinitions, ShingleTokenFilter shingleTokenFilter) => AssignVariant(tokenFilterDefinitions, shingleTokenFilter);
		public TokenFilterDefinitionsDescriptor SnowballTokenFilter(string tokenFilterDefinitions) => AssignVariant<SnowballTokenFilterDescriptor, SnowballTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor SnowballTokenFilter(string tokenFilterDefinitions, Action<SnowballTokenFilterDescriptor> configure) => AssignVariant<SnowballTokenFilterDescriptor, SnowballTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor SnowballTokenFilter(string tokenFilterDefinitions, SnowballTokenFilter snowballTokenFilter) => AssignVariant(tokenFilterDefinitions, snowballTokenFilter);
		public TokenFilterDefinitionsDescriptor StemmerOverrideTokenFilter(string tokenFilterDefinitions) => AssignVariant<StemmerOverrideTokenFilterDescriptor, StemmerOverrideTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor StemmerOverrideTokenFilter(string tokenFilterDefinitions, Action<StemmerOverrideTokenFilterDescriptor> configure) => AssignVariant<StemmerOverrideTokenFilterDescriptor, StemmerOverrideTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor StemmerOverrideTokenFilter(string tokenFilterDefinitions, StemmerOverrideTokenFilter stemmerOverrideTokenFilter) => AssignVariant(tokenFilterDefinitions, stemmerOverrideTokenFilter);
		public TokenFilterDefinitionsDescriptor StemmerTokenFilter(string tokenFilterDefinitions) => AssignVariant<StemmerTokenFilterDescriptor, StemmerTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor StemmerTokenFilter(string tokenFilterDefinitions, Action<StemmerTokenFilterDescriptor> configure) => AssignVariant<StemmerTokenFilterDescriptor, StemmerTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor StemmerTokenFilter(string tokenFilterDefinitions, StemmerTokenFilter stemmerTokenFilter) => AssignVariant(tokenFilterDefinitions, stemmerTokenFilter);
		public TokenFilterDefinitionsDescriptor StopTokenFilter(string tokenFilterDefinitions) => AssignVariant<StopTokenFilterDescriptor, StopTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor StopTokenFilter(string tokenFilterDefinitions, Action<StopTokenFilterDescriptor> configure) => AssignVariant<StopTokenFilterDescriptor, StopTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor StopTokenFilter(string tokenFilterDefinitions, StopTokenFilter stopTokenFilter) => AssignVariant(tokenFilterDefinitions, stopTokenFilter);
		public TokenFilterDefinitionsDescriptor SynonymGraphTokenFilter(string tokenFilterDefinitions) => AssignVariant<SynonymGraphTokenFilterDescriptor, SynonymGraphTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor SynonymGraphTokenFilter(string tokenFilterDefinitions, Action<SynonymGraphTokenFilterDescriptor> configure) => AssignVariant<SynonymGraphTokenFilterDescriptor, SynonymGraphTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor SynonymGraphTokenFilter(string tokenFilterDefinitions, SynonymGraphTokenFilter synonymGraphTokenFilter) => AssignVariant(tokenFilterDefinitions, synonymGraphTokenFilter);
		public TokenFilterDefinitionsDescriptor SynonymTokenFilter(string tokenFilterDefinitions) => AssignVariant<SynonymTokenFilterDescriptor, SynonymTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor SynonymTokenFilter(string tokenFilterDefinitions, Action<SynonymTokenFilterDescriptor> configure) => AssignVariant<SynonymTokenFilterDescriptor, SynonymTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor SynonymTokenFilter(string tokenFilterDefinitions, SynonymTokenFilter synonymTokenFilter) => AssignVariant(tokenFilterDefinitions, synonymTokenFilter);
		public TokenFilterDefinitionsDescriptor TrimTokenFilter(string tokenFilterDefinitions) => AssignVariant<TrimTokenFilterDescriptor, TrimTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor TrimTokenFilter(string tokenFilterDefinitions, Action<TrimTokenFilterDescriptor> configure) => AssignVariant<TrimTokenFilterDescriptor, TrimTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor TrimTokenFilter(string tokenFilterDefinitions, TrimTokenFilter trimTokenFilter) => AssignVariant(tokenFilterDefinitions, trimTokenFilter);
		public TokenFilterDefinitionsDescriptor TruncateTokenFilter(string tokenFilterDefinitions) => AssignVariant<TruncateTokenFilterDescriptor, TruncateTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor TruncateTokenFilter(string tokenFilterDefinitions, Action<TruncateTokenFilterDescriptor> configure) => AssignVariant<TruncateTokenFilterDescriptor, TruncateTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor TruncateTokenFilter(string tokenFilterDefinitions, TruncateTokenFilter truncateTokenFilter) => AssignVariant(tokenFilterDefinitions, truncateTokenFilter);
		public TokenFilterDefinitionsDescriptor UniqueTokenFilter(string tokenFilterDefinitions) => AssignVariant<UniqueTokenFilterDescriptor, UniqueTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor UniqueTokenFilter(string tokenFilterDefinitions, Action<UniqueTokenFilterDescriptor> configure) => AssignVariant<UniqueTokenFilterDescriptor, UniqueTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor UniqueTokenFilter(string tokenFilterDefinitions, UniqueTokenFilter uniqueTokenFilter) => AssignVariant(tokenFilterDefinitions, uniqueTokenFilter);
		public TokenFilterDefinitionsDescriptor UppercaseTokenFilter(string tokenFilterDefinitions) => AssignVariant<UppercaseTokenFilterDescriptor, UppercaseTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor UppercaseTokenFilter(string tokenFilterDefinitions, Action<UppercaseTokenFilterDescriptor> configure) => AssignVariant<UppercaseTokenFilterDescriptor, UppercaseTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor UppercaseTokenFilter(string tokenFilterDefinitions, UppercaseTokenFilter uppercaseTokenFilter) => AssignVariant(tokenFilterDefinitions, uppercaseTokenFilter);
		public TokenFilterDefinitionsDescriptor WordDelimiterGraphTokenFilter(string tokenFilterDefinitions) => AssignVariant<WordDelimiterGraphTokenFilterDescriptor, WordDelimiterGraphTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor WordDelimiterGraphTokenFilter(string tokenFilterDefinitions, Action<WordDelimiterGraphTokenFilterDescriptor> configure) => AssignVariant<WordDelimiterGraphTokenFilterDescriptor, WordDelimiterGraphTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor WordDelimiterGraphTokenFilter(string tokenFilterDefinitions, WordDelimiterGraphTokenFilter wordDelimiterGraphTokenFilter) => AssignVariant(tokenFilterDefinitions, wordDelimiterGraphTokenFilter);
		public TokenFilterDefinitionsDescriptor WordDelimiterTokenFilter(string tokenFilterDefinitions) => AssignVariant<WordDelimiterTokenFilterDescriptor, WordDelimiterTokenFilter>(tokenFilterDefinitions, null);
		public TokenFilterDefinitionsDescriptor WordDelimiterTokenFilter(string tokenFilterDefinitions, Action<WordDelimiterTokenFilterDescriptor> configure) => AssignVariant<WordDelimiterTokenFilterDescriptor, WordDelimiterTokenFilter>(tokenFilterDefinitions, configure);
		public TokenFilterDefinitionsDescriptor WordDelimiterTokenFilter(string tokenFilterDefinitions, WordDelimiterTokenFilter wordDelimiterTokenFilter) => AssignVariant(tokenFilterDefinitions, wordDelimiterTokenFilter);
	}

	internal sealed partial class TokenFilterDefinitionInterfaceConverter
	{
		private static ITokenFilterDefinition DeserializeVariant(string type, ref Utf8JsonReader reader, JsonSerializerOptions options)
		{
			switch (type)
			{
				case "dictionary_decompounder":
					return JsonSerializer.Deserialize<DictionaryDecompounderTokenFilter>(ref reader, options);
				case "phonetic":
					return JsonSerializer.Deserialize<PhoneticTokenFilter>(ref reader, options);
				case "icu_transform":
					return JsonSerializer.Deserialize<IcuTransformTokenFilter>(ref reader, options);
				case "icu_normalizer":
					return JsonSerializer.Deserialize<IcuNormalizationTokenFilter>(ref reader, options);
				case "icu_folding":
					return JsonSerializer.Deserialize<IcuFoldingTokenFilter>(ref reader, options);
				case "icu_collation":
					return JsonSerializer.Deserialize<IcuCollationTokenFilter>(ref reader, options);
				case "icu_tokenizer":
					return JsonSerializer.Deserialize<IcuTokenizer>(ref reader, options);
				case "kuromoji_part_of_speech":
					return JsonSerializer.Deserialize<KuromojiPartOfSpeechTokenFilter>(ref reader, options);
				case "kuromoji_readingform":
					return JsonSerializer.Deserialize<KuromojiReadingFormTokenFilter>(ref reader, options);
				case "kuromoji_stemmer":
					return JsonSerializer.Deserialize<KuromojiStemmerTokenFilter>(ref reader, options);
				case "word_delimiter":
					return JsonSerializer.Deserialize<WordDelimiterTokenFilter>(ref reader, options);
				case "word_delimiter_graph":
					return JsonSerializer.Deserialize<WordDelimiterGraphTokenFilter>(ref reader, options);
				case "uppercase":
					return JsonSerializer.Deserialize<UppercaseTokenFilter>(ref reader, options);
				case "unique":
					return JsonSerializer.Deserialize<UniqueTokenFilter>(ref reader, options);
				case "truncate":
					return JsonSerializer.Deserialize<TruncateTokenFilter>(ref reader, options);
				case "trim":
					return JsonSerializer.Deserialize<TrimTokenFilter>(ref reader, options);
				case "synonym":
					return JsonSerializer.Deserialize<SynonymTokenFilter>(ref reader, options);
				case "synonym_graph":
					return JsonSerializer.Deserialize<SynonymGraphTokenFilter>(ref reader, options);
				case "stop":
					return JsonSerializer.Deserialize<StopTokenFilter>(ref reader, options);
				case "stemmer":
					return JsonSerializer.Deserialize<StemmerTokenFilter>(ref reader, options);
				case "stemmer_override":
					return JsonSerializer.Deserialize<StemmerOverrideTokenFilter>(ref reader, options);
				case "snowball":
					return JsonSerializer.Deserialize<SnowballTokenFilter>(ref reader, options);
				case "shingle":
					return JsonSerializer.Deserialize<ShingleTokenFilter>(ref reader, options);
				case "reverse":
					return JsonSerializer.Deserialize<ReverseTokenFilter>(ref reader, options);
				case "remove_duplicates":
					return JsonSerializer.Deserialize<RemoveDuplicatesTokenFilter>(ref reader, options);
				case "predicate_token_filter":
					return JsonSerializer.Deserialize<PredicateTokenFilter>(ref reader, options);
				case "porter_stem":
					return JsonSerializer.Deserialize<PorterStemTokenFilter>(ref reader, options);
				case "pattern_replace":
					return JsonSerializer.Deserialize<PatternReplaceTokenFilter>(ref reader, options);
				case "pattern_capture":
					return JsonSerializer.Deserialize<PatternCaptureTokenFilter>(ref reader, options);
				case "nori_part_of_speech":
					return JsonSerializer.Deserialize<NoriPartOfSpeechTokenFilter>(ref reader, options);
				case "ngram":
					return JsonSerializer.Deserialize<NGramTokenFilter>(ref reader, options);
				case "multiplexer":
					return JsonSerializer.Deserialize<MultiplexerTokenFilter>(ref reader, options);
				case "lowercase":
					return JsonSerializer.Deserialize<LowercaseTokenFilter>(ref reader, options);
				case "limit":
					return JsonSerializer.Deserialize<LimitTokenCountTokenFilter>(ref reader, options);
				case "length":
					return JsonSerializer.Deserialize<LengthTokenFilter>(ref reader, options);
				case "kstem":
					return JsonSerializer.Deserialize<KStemTokenFilter>(ref reader, options);
				case "keyword_marker":
					return JsonSerializer.Deserialize<KeywordMarkerTokenFilter>(ref reader, options);
				case "keep":
					return JsonSerializer.Deserialize<KeepWordsTokenFilter>(ref reader, options);
				case "keep_types":
					return JsonSerializer.Deserialize<KeepTypesTokenFilter>(ref reader, options);
				case "hyphenation_decompounder":
					return JsonSerializer.Deserialize<HyphenationDecompounderTokenFilter>(ref reader, options);
				case "hunspell":
					return JsonSerializer.Deserialize<HunspellTokenFilter>(ref reader, options);
				case "fingerprint":
					return JsonSerializer.Deserialize<FingerprintTokenFilter>(ref reader, options);
				case "elision":
					return JsonSerializer.Deserialize<ElisionTokenFilter>(ref reader, options);
				case "edge_ngram":
					return JsonSerializer.Deserialize<EdgeNGramTokenFilter>(ref reader, options);
				case "delimited_payload":
					return JsonSerializer.Deserialize<DelimitedPayloadTokenFilter>(ref reader, options);
				case "condition":
					return JsonSerializer.Deserialize<ConditionTokenFilter>(ref reader, options);
				case "common_grams":
					return JsonSerializer.Deserialize<CommonGramsTokenFilter>(ref reader, options);
				case "asciifolding":
					return JsonSerializer.Deserialize<AsciiFoldingTokenFilter>(ref reader, options);
				default:
					throw new JsonException("Encounted an unknown variant type which could not be deserialised.");
			}
		}
	}

	public partial interface ITokenFilterDefinition
	{
		public string Type { get; }
	}
}