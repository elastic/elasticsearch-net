// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Core;
using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public partial class TokenFilters : IsADictionary<string, ITokenFilter>
{
	public TokenFilters()
	{
	}

	public TokenFilters(IDictionary<string, ITokenFilter> container) : base(container)
	{
	}

	public void Add(string name, ITokenFilter tokenFilter) => BackingDictionary.Add(Sanitize(name), tokenFilter);
	public bool TryGetTokenFilter(string name, [NotNullWhen(returnValue: true)] out ITokenFilter tokenFilter) => BackingDictionary.TryGetValue(Sanitize(name), out tokenFilter);

	public bool TryGetTokenFilter<T>(string name, [NotNullWhen(returnValue: true)] out T? tokenFilter) where T : class, ITokenFilter
	{
		if (BackingDictionary.TryGetValue(Sanitize(name), out var matchedValue) && matchedValue is T finalValue)
		{
			tokenFilter = finalValue;
			return true;
		}

		tokenFilter = null;
		return false;
	}
}

public sealed partial class TokenFiltersDescriptor : IsADictionaryDescriptor<TokenFiltersDescriptor, TokenFilters, string, ITokenFilter>
{
	public TokenFiltersDescriptor() : base(new TokenFilters())
	{
	}

	public TokenFiltersDescriptor(TokenFilters tokenFilters) : base(tokenFilters ?? new TokenFilters())
	{
	}

	public TokenFiltersDescriptor AsciiFolding(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.AsciiFoldingTokenFilterDescriptor, AsciiFoldingTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor AsciiFolding(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.AsciiFoldingTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.AsciiFoldingTokenFilterDescriptor, AsciiFoldingTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor AsciiFolding(string tokenFilterName, AsciiFoldingTokenFilter asciiFoldingTokenFilter) => AssignVariant(tokenFilterName, asciiFoldingTokenFilter);
	public TokenFiltersDescriptor CommonGrams(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CommonGramsTokenFilterDescriptor, CommonGramsTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor CommonGrams(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.CommonGramsTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.CommonGramsTokenFilterDescriptor, CommonGramsTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor CommonGrams(string tokenFilterName, CommonGramsTokenFilter commonGramsTokenFilter) => AssignVariant(tokenFilterName, commonGramsTokenFilter);
	public TokenFiltersDescriptor Condition(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ConditionTokenFilterDescriptor, ConditionTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Condition(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.ConditionTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ConditionTokenFilterDescriptor, ConditionTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Condition(string tokenFilterName, ConditionTokenFilter conditionTokenFilter) => AssignVariant(tokenFilterName, conditionTokenFilter);
	public TokenFiltersDescriptor DelimitedPayload(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DelimitedPayloadTokenFilterDescriptor, DelimitedPayloadTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor DelimitedPayload(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.DelimitedPayloadTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DelimitedPayloadTokenFilterDescriptor, DelimitedPayloadTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor DelimitedPayload(string tokenFilterName, DelimitedPayloadTokenFilter delimitedPayloadTokenFilter) => AssignVariant(tokenFilterName, delimitedPayloadTokenFilter);
	public TokenFiltersDescriptor DictionaryDecompounder(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DictionaryDecompounderTokenFilterDescriptor, DictionaryDecompounderTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor DictionaryDecompounder(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.DictionaryDecompounderTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.DictionaryDecompounderTokenFilterDescriptor, DictionaryDecompounderTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor DictionaryDecompounder(string tokenFilterName, DictionaryDecompounderTokenFilter dictionaryDecompounderTokenFilter) => AssignVariant(tokenFilterName, dictionaryDecompounderTokenFilter);
	public TokenFiltersDescriptor EdgeNGram(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenFilterDescriptor, EdgeNGramTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor EdgeNGram(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenFilterDescriptor, EdgeNGramTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor EdgeNGram(string tokenFilterName, EdgeNGramTokenFilter edgeNGramTokenFilter) => AssignVariant(tokenFilterName, edgeNGramTokenFilter);
	public TokenFiltersDescriptor Elision(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ElisionTokenFilterDescriptor, ElisionTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Elision(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.ElisionTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ElisionTokenFilterDescriptor, ElisionTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Elision(string tokenFilterName, ElisionTokenFilter elisionTokenFilter) => AssignVariant(tokenFilterName, elisionTokenFilter);
	public TokenFiltersDescriptor Fingerprint(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FingerprintTokenFilterDescriptor, FingerprintTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Fingerprint(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.FingerprintTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.FingerprintTokenFilterDescriptor, FingerprintTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Fingerprint(string tokenFilterName, FingerprintTokenFilter fingerprintTokenFilter) => AssignVariant(tokenFilterName, fingerprintTokenFilter);
	public TokenFiltersDescriptor Hunspell(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HunspellTokenFilterDescriptor, HunspellTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Hunspell(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.HunspellTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HunspellTokenFilterDescriptor, HunspellTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Hunspell(string tokenFilterName, HunspellTokenFilter hunspellTokenFilter) => AssignVariant(tokenFilterName, hunspellTokenFilter);
	public TokenFiltersDescriptor HyphenationDecompounder(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor, HyphenationDecompounderTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor HyphenationDecompounder(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor, HyphenationDecompounderTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor HyphenationDecompounder(string tokenFilterName, HyphenationDecompounderTokenFilter hyphenationDecompounderTokenFilter) => AssignVariant(tokenFilterName, hyphenationDecompounderTokenFilter);
	public TokenFiltersDescriptor IcuCollation(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuCollationTokenFilterDescriptor, IcuCollationTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor IcuCollation(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.IcuCollationTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuCollationTokenFilterDescriptor, IcuCollationTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor IcuCollation(string tokenFilterName, IcuCollationTokenFilter icuCollationTokenFilter) => AssignVariant(tokenFilterName, icuCollationTokenFilter);
	public TokenFiltersDescriptor IcuFolding(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuFoldingTokenFilterDescriptor, IcuFoldingTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor IcuFolding(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.IcuFoldingTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuFoldingTokenFilterDescriptor, IcuFoldingTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor IcuFolding(string tokenFilterName, IcuFoldingTokenFilter icuFoldingTokenFilter) => AssignVariant(tokenFilterName, icuFoldingTokenFilter);
	public TokenFiltersDescriptor IcuNormalization(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuNormalizationTokenFilterDescriptor, IcuNormalizationTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor IcuNormalization(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.IcuNormalizationTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuNormalizationTokenFilterDescriptor, IcuNormalizationTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor IcuNormalization(string tokenFilterName, IcuNormalizationTokenFilter icuNormalizationTokenFilter) => AssignVariant(tokenFilterName, icuNormalizationTokenFilter);
	public TokenFiltersDescriptor IcuTransform(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuTransformTokenFilterDescriptor, IcuTransformTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor IcuTransform(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.IcuTransformTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.IcuTransformTokenFilterDescriptor, IcuTransformTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor IcuTransform(string tokenFilterName, IcuTransformTokenFilter icuTransformTokenFilter) => AssignVariant(tokenFilterName, icuTransformTokenFilter);
	public TokenFiltersDescriptor KeepTypes(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeepTypesTokenFilterDescriptor, KeepTypesTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KeepTypes(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KeepTypesTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeepTypesTokenFilterDescriptor, KeepTypesTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KeepTypes(string tokenFilterName, KeepTypesTokenFilter keepTypesTokenFilter) => AssignVariant(tokenFilterName, keepTypesTokenFilter);
	public TokenFiltersDescriptor KeepWords(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeepWordsTokenFilterDescriptor, KeepWordsTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KeepWords(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KeepWordsTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeepWordsTokenFilterDescriptor, KeepWordsTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KeepWords(string tokenFilterName, KeepWordsTokenFilter keepWordsTokenFilter) => AssignVariant(tokenFilterName, keepWordsTokenFilter);
	public TokenFiltersDescriptor KeywordMarker(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeywordMarkerTokenFilterDescriptor, KeywordMarkerTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KeywordMarker(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KeywordMarkerTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KeywordMarkerTokenFilterDescriptor, KeywordMarkerTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KeywordMarker(string tokenFilterName, KeywordMarkerTokenFilter keywordMarkerTokenFilter) => AssignVariant(tokenFilterName, keywordMarkerTokenFilter);
	public TokenFiltersDescriptor KStem(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KStemTokenFilterDescriptor, KStemTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KStem(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KStemTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KStemTokenFilterDescriptor, KStemTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KStem(string tokenFilterName, KStemTokenFilter kStemTokenFilter) => AssignVariant(tokenFilterName, kStemTokenFilter);
	public TokenFiltersDescriptor KuromojiPartOfSpeech(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiPartOfSpeechTokenFilterDescriptor, KuromojiPartOfSpeechTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KuromojiPartOfSpeech(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KuromojiPartOfSpeechTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiPartOfSpeechTokenFilterDescriptor, KuromojiPartOfSpeechTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KuromojiPartOfSpeech(string tokenFilterName, KuromojiPartOfSpeechTokenFilter kuromojiPartOfSpeechTokenFilter) => AssignVariant(tokenFilterName, kuromojiPartOfSpeechTokenFilter);
	public TokenFiltersDescriptor KuromojiReadingForm(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiReadingFormTokenFilterDescriptor, KuromojiReadingFormTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KuromojiReadingForm(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KuromojiReadingFormTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiReadingFormTokenFilterDescriptor, KuromojiReadingFormTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KuromojiReadingForm(string tokenFilterName, KuromojiReadingFormTokenFilter kuromojiReadingFormTokenFilter) => AssignVariant(tokenFilterName, kuromojiReadingFormTokenFilter);
	public TokenFiltersDescriptor KuromojiStemmer(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiStemmerTokenFilterDescriptor, KuromojiStemmerTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor KuromojiStemmer(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.KuromojiStemmerTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.KuromojiStemmerTokenFilterDescriptor, KuromojiStemmerTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor KuromojiStemmer(string tokenFilterName, KuromojiStemmerTokenFilter kuromojiStemmerTokenFilter) => AssignVariant(tokenFilterName, kuromojiStemmerTokenFilter);
	public TokenFiltersDescriptor Length(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LengthTokenFilterDescriptor, LengthTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Length(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.LengthTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LengthTokenFilterDescriptor, LengthTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Length(string tokenFilterName, LengthTokenFilter lengthTokenFilter) => AssignVariant(tokenFilterName, lengthTokenFilter);
	public TokenFiltersDescriptor LimitTokenCount(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LimitTokenCountTokenFilterDescriptor, LimitTokenCountTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor LimitTokenCount(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.LimitTokenCountTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LimitTokenCountTokenFilterDescriptor, LimitTokenCountTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor LimitTokenCount(string tokenFilterName, LimitTokenCountTokenFilter limitTokenCountTokenFilter) => AssignVariant(tokenFilterName, limitTokenCountTokenFilter);
	public TokenFiltersDescriptor Lowercase(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenFilterDescriptor, LowercaseTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Lowercase(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenFilterDescriptor, LowercaseTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Lowercase(string tokenFilterName, LowercaseTokenFilter lowercaseTokenFilter) => AssignVariant(tokenFilterName, lowercaseTokenFilter);
	public TokenFiltersDescriptor Multiplexer(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.MultiplexerTokenFilterDescriptor, MultiplexerTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Multiplexer(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.MultiplexerTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.MultiplexerTokenFilterDescriptor, MultiplexerTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Multiplexer(string tokenFilterName, MultiplexerTokenFilter multiplexerTokenFilter) => AssignVariant(tokenFilterName, multiplexerTokenFilter);
	public TokenFiltersDescriptor NGram(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NGramTokenFilterDescriptor, NGramTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor NGram(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.NGramTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NGramTokenFilterDescriptor, NGramTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor NGram(string tokenFilterName, NGramTokenFilter nGramTokenFilter) => AssignVariant(tokenFilterName, nGramTokenFilter);
	public TokenFiltersDescriptor NoriPartOfSpeech(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NoriPartOfSpeechTokenFilterDescriptor, NoriPartOfSpeechTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor NoriPartOfSpeech(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.NoriPartOfSpeechTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.NoriPartOfSpeechTokenFilterDescriptor, NoriPartOfSpeechTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor NoriPartOfSpeech(string tokenFilterName, NoriPartOfSpeechTokenFilter noriPartOfSpeechTokenFilter) => AssignVariant(tokenFilterName, noriPartOfSpeechTokenFilter);
	public TokenFiltersDescriptor PatternCapture(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternCaptureTokenFilterDescriptor, PatternCaptureTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor PatternCapture(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.PatternCaptureTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternCaptureTokenFilterDescriptor, PatternCaptureTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor PatternCapture(string tokenFilterName, PatternCaptureTokenFilter patternCaptureTokenFilter) => AssignVariant(tokenFilterName, patternCaptureTokenFilter);
	public TokenFiltersDescriptor PatternReplace(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternReplaceTokenFilterDescriptor, PatternReplaceTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor PatternReplace(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.PatternReplaceTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PatternReplaceTokenFilterDescriptor, PatternReplaceTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor PatternReplace(string tokenFilterName, PatternReplaceTokenFilter patternReplaceTokenFilter) => AssignVariant(tokenFilterName, patternReplaceTokenFilter);
	public TokenFiltersDescriptor Phonetic(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PhoneticTokenFilterDescriptor, PhoneticTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Phonetic(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.PhoneticTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PhoneticTokenFilterDescriptor, PhoneticTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Phonetic(string tokenFilterName, PhoneticTokenFilter phoneticTokenFilter) => AssignVariant(tokenFilterName, phoneticTokenFilter);
	public TokenFiltersDescriptor PorterStem(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PorterStemTokenFilterDescriptor, PorterStemTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor PorterStem(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.PorterStemTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PorterStemTokenFilterDescriptor, PorterStemTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor PorterStem(string tokenFilterName, PorterStemTokenFilter porterStemTokenFilter) => AssignVariant(tokenFilterName, porterStemTokenFilter);
	public TokenFiltersDescriptor Predicate(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PredicateTokenFilterDescriptor, PredicateTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Predicate(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.PredicateTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.PredicateTokenFilterDescriptor, PredicateTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Predicate(string tokenFilterName, PredicateTokenFilter predicateTokenFilter) => AssignVariant(tokenFilterName, predicateTokenFilter);
	public TokenFiltersDescriptor RemoveDuplicates(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RemoveDuplicatesTokenFilterDescriptor, RemoveDuplicatesTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor RemoveDuplicates(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.RemoveDuplicatesTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.RemoveDuplicatesTokenFilterDescriptor, RemoveDuplicatesTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor RemoveDuplicates(string tokenFilterName, RemoveDuplicatesTokenFilter removeDuplicatesTokenFilter) => AssignVariant(tokenFilterName, removeDuplicatesTokenFilter);
	public TokenFiltersDescriptor Reverse(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ReverseTokenFilterDescriptor, ReverseTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Reverse(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.ReverseTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ReverseTokenFilterDescriptor, ReverseTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Reverse(string tokenFilterName, ReverseTokenFilter reverseTokenFilter) => AssignVariant(tokenFilterName, reverseTokenFilter);
	public TokenFiltersDescriptor Shingle(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ShingleTokenFilterDescriptor, ShingleTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Shingle(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.ShingleTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.ShingleTokenFilterDescriptor, ShingleTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Shingle(string tokenFilterName, ShingleTokenFilter shingleTokenFilter) => AssignVariant(tokenFilterName, shingleTokenFilter);
	public TokenFiltersDescriptor Snowball(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SnowballTokenFilterDescriptor, SnowballTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Snowball(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.SnowballTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SnowballTokenFilterDescriptor, SnowballTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Snowball(string tokenFilterName, SnowballTokenFilter snowballTokenFilter) => AssignVariant(tokenFilterName, snowballTokenFilter);
	public TokenFiltersDescriptor StemmerOverride(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StemmerOverrideTokenFilterDescriptor, StemmerOverrideTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor StemmerOverride(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.StemmerOverrideTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StemmerOverrideTokenFilterDescriptor, StemmerOverrideTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor StemmerOverride(string tokenFilterName, StemmerOverrideTokenFilter stemmerOverrideTokenFilter) => AssignVariant(tokenFilterName, stemmerOverrideTokenFilter);
	public TokenFiltersDescriptor Stemmer(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StemmerTokenFilterDescriptor, StemmerTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Stemmer(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.StemmerTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StemmerTokenFilterDescriptor, StemmerTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Stemmer(string tokenFilterName, StemmerTokenFilter stemmerTokenFilter) => AssignVariant(tokenFilterName, stemmerTokenFilter);
	public TokenFiltersDescriptor Stop(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StopTokenFilterDescriptor, StopTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Stop(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.StopTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.StopTokenFilterDescriptor, StopTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Stop(string tokenFilterName, StopTokenFilter stopTokenFilter) => AssignVariant(tokenFilterName, stopTokenFilter);
	public TokenFiltersDescriptor SynonymGraph(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SynonymGraphTokenFilterDescriptor, SynonymGraphTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor SynonymGraph(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.SynonymGraphTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SynonymGraphTokenFilterDescriptor, SynonymGraphTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor SynonymGraph(string tokenFilterName, SynonymGraphTokenFilter synonymGraphTokenFilter) => AssignVariant(tokenFilterName, synonymGraphTokenFilter);
	public TokenFiltersDescriptor Synonym(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SynonymTokenFilterDescriptor, SynonymTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Synonym(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.SynonymTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.SynonymTokenFilterDescriptor, SynonymTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Synonym(string tokenFilterName, SynonymTokenFilter synonymTokenFilter) => AssignVariant(tokenFilterName, synonymTokenFilter);
	public TokenFiltersDescriptor Trim(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TrimTokenFilterDescriptor, TrimTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Trim(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.TrimTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TrimTokenFilterDescriptor, TrimTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Trim(string tokenFilterName, TrimTokenFilter trimTokenFilter) => AssignVariant(tokenFilterName, trimTokenFilter);
	public TokenFiltersDescriptor Truncate(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TruncateTokenFilterDescriptor, TruncateTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Truncate(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.TruncateTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.TruncateTokenFilterDescriptor, TruncateTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Truncate(string tokenFilterName, TruncateTokenFilter truncateTokenFilter) => AssignVariant(tokenFilterName, truncateTokenFilter);
	public TokenFiltersDescriptor Unique(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.UniqueTokenFilterDescriptor, UniqueTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Unique(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.UniqueTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.UniqueTokenFilterDescriptor, UniqueTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Unique(string tokenFilterName, UniqueTokenFilter uniqueTokenFilter) => AssignVariant(tokenFilterName, uniqueTokenFilter);
	public TokenFiltersDescriptor Uppercase(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.UppercaseTokenFilterDescriptor, UppercaseTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor Uppercase(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.UppercaseTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.UppercaseTokenFilterDescriptor, UppercaseTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor Uppercase(string tokenFilterName, UppercaseTokenFilter uppercaseTokenFilter) => AssignVariant(tokenFilterName, uppercaseTokenFilter);
	public TokenFiltersDescriptor WordDelimiterGraph(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterGraphTokenFilterDescriptor, WordDelimiterGraphTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor WordDelimiterGraph(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterGraphTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterGraphTokenFilterDescriptor, WordDelimiterGraphTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor WordDelimiterGraph(string tokenFilterName, WordDelimiterGraphTokenFilter wordDelimiterGraphTokenFilter) => AssignVariant(tokenFilterName, wordDelimiterGraphTokenFilter);
	public TokenFiltersDescriptor WordDelimiter(string tokenFilterName) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterTokenFilterDescriptor, WordDelimiterTokenFilter>(tokenFilterName, null);
	public TokenFiltersDescriptor WordDelimiter(string tokenFilterName, Action<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterTokenFilterDescriptor> configure) => AssignVariant<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterTokenFilterDescriptor, WordDelimiterTokenFilter>(tokenFilterName, configure);
	public TokenFiltersDescriptor WordDelimiter(string tokenFilterName, WordDelimiterTokenFilter wordDelimiterTokenFilter) => AssignVariant(tokenFilterName, wordDelimiterTokenFilter);
}

internal sealed partial class TokenFilterInterfaceConverter : System.Text.Json.Serialization.JsonConverter<ITokenFilter>
{
	private static readonly System.Text.Json.JsonEncodedText PropDiscriminator = System.Text.Json.JsonEncodedText.Encode("type");

	public override ITokenFilter Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var readerSnapshot = reader;
		string? discriminator = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.TryReadProperty(options, PropDiscriminator, ref discriminator, null))
			{
				break;
			}

			reader.Skip();
		}

		reader = readerSnapshot;
		return discriminator switch
		{
			"asciifolding" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.AsciiFoldingTokenFilter>(options, null),
			"common_grams" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CommonGramsTokenFilter>(options, null),
			"condition" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ConditionTokenFilter>(options, null),
			"delimited_payload" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.DelimitedPayloadTokenFilter>(options, null),
			"dictionary_decompounder" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.DictionaryDecompounderTokenFilter>(options, null),
			"edge_ngram" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenFilter>(options, null),
			"elision" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ElisionTokenFilter>(options, null),
			"fingerprint" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.FingerprintTokenFilter>(options, null),
			"hunspell" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.HunspellTokenFilter>(options, null),
			"hyphenation_decompounder" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter>(options, null),
			"icu_collation" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuCollationTokenFilter>(options, null),
			"icu_folding" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuFoldingTokenFilter>(options, null),
			"icu_normalizer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuNormalizationTokenFilter>(options, null),
			"icu_transform" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuTransformTokenFilter>(options, null),
			"keep_types" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KeepTypesTokenFilter>(options, null),
			"keep" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KeepWordsTokenFilter>(options, null),
			"keyword_marker" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KeywordMarkerTokenFilter>(options, null),
			"kstem" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KStemTokenFilter>(options, null),
			"kuromoji_part_of_speech" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KuromojiPartOfSpeechTokenFilter>(options, null),
			"kuromoji_readingform" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KuromojiReadingFormTokenFilter>(options, null),
			"kuromoji_stemmer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KuromojiStemmerTokenFilter>(options, null),
			"length" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LengthTokenFilter>(options, null),
			"limit" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LimitTokenCountTokenFilter>(options, null),
			"lowercase" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenFilter>(options, null),
			"multiplexer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.MultiplexerTokenFilter>(options, null),
			"ngram" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NGramTokenFilter>(options, null),
			"nori_part_of_speech" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NoriPartOfSpeechTokenFilter>(options, null),
			"pattern_capture" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PatternCaptureTokenFilter>(options, null),
			"pattern_replace" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PatternReplaceTokenFilter>(options, null),
			"phonetic" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticTokenFilter>(options, null),
			"porter_stem" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PorterStemTokenFilter>(options, null),
			"predicate_token_filter" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PredicateTokenFilter>(options, null),
			"remove_duplicates" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.RemoveDuplicatesTokenFilter>(options, null),
			"reverse" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ReverseTokenFilter>(options, null),
			"shingle" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ShingleTokenFilter>(options, null),
			"snowball" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SnowballTokenFilter>(options, null),
			"stemmer_override" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StemmerOverrideTokenFilter>(options, null),
			"stemmer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StemmerTokenFilter>(options, null),
			"stop" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StopTokenFilter>(options, null),
			"synonym_graph" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SynonymGraphTokenFilter>(options, null),
			"synonym" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SynonymTokenFilter>(options, null),
			"trim" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.TrimTokenFilter>(options, null),
			"truncate" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.TruncateTokenFilter>(options, null),
			"unique" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.UniqueTokenFilter>(options, null),
			"uppercase" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.UppercaseTokenFilter>(options, null),
			"word_delimiter_graph" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterGraphTokenFilter>(options, null),
			"word_delimiter" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.WordDelimiterTokenFilter>(options, null),
			_ => throw new System.Text.Json.JsonException($"Variant '{discriminator}' is not supported for type '{nameof(ITokenFilter)}'.")
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ITokenFilter value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value.Type)
		{
			case "asciifolding":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.AsciiFoldingTokenFilter)value, null);
				break;
			case "common_grams":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CommonGramsTokenFilter)value, null);
				break;
			case "condition":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ConditionTokenFilter)value, null);
				break;
			case "delimited_payload":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.DelimitedPayloadTokenFilter)value, null);
				break;
			case "dictionary_decompounder":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.DictionaryDecompounderTokenFilter)value, null);
				break;
			case "edge_ngram":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenFilter)value, null);
				break;
			case "elision":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ElisionTokenFilter)value, null);
				break;
			case "fingerprint":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.FingerprintTokenFilter)value, null);
				break;
			case "hunspell":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.HunspellTokenFilter)value, null);
				break;
			case "hyphenation_decompounder":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter)value, null);
				break;
			case "icu_collation":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuCollationTokenFilter)value, null);
				break;
			case "icu_folding":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuFoldingTokenFilter)value, null);
				break;
			case "icu_normalizer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuNormalizationTokenFilter)value, null);
				break;
			case "icu_transform":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuTransformTokenFilter)value, null);
				break;
			case "keep_types":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KeepTypesTokenFilter)value, null);
				break;
			case "keep":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KeepWordsTokenFilter)value, null);
				break;
			case "keyword_marker":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KeywordMarkerTokenFilter)value, null);
				break;
			case "kstem":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KStemTokenFilter)value, null);
				break;
			case "kuromoji_part_of_speech":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KuromojiPartOfSpeechTokenFilter)value, null);
				break;
			case "kuromoji_readingform":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KuromojiReadingFormTokenFilter)value, null);
				break;
			case "kuromoji_stemmer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KuromojiStemmerTokenFilter)value, null);
				break;
			case "length":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LengthTokenFilter)value, null);
				break;
			case "limit":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LimitTokenCountTokenFilter)value, null);
				break;
			case "lowercase":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenFilter)value, null);
				break;
			case "multiplexer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.MultiplexerTokenFilter)value, null);
				break;
			case "ngram":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NGramTokenFilter)value, null);
				break;
			case "nori_part_of_speech":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NoriPartOfSpeechTokenFilter)value, null);
				break;
			case "pattern_capture":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PatternCaptureTokenFilter)value, null);
				break;
			case "pattern_replace":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PatternReplaceTokenFilter)value, null);
				break;
			case "phonetic":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PhoneticTokenFilter)value, null);
				break;
			case "porter_stem":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PorterStemTokenFilter)value, null);
				break;
			case "predicate_token_filter":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PredicateTokenFilter)value, null);
				break;
			case "remove_duplicates":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.RemoveDuplicatesTokenFilter)value, null);
				break;
			case "reverse":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ReverseTokenFilter)value, null);
				break;
			case "shingle":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ShingleTokenFilter)value, null);
				break;
			case "snowball":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SnowballTokenFilter)value, null);
				break;
			case "stemmer_override":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StemmerOverrideTokenFilter)value, null);
				break;
			case "stemmer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StemmerTokenFilter)value, null);
				break;
			case "stop":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StopTokenFilter)value, null);
				break;
			case "synonym_graph":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SynonymGraphTokenFilter)value, null);
				break;
			case "synonym":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SynonymTokenFilter)value, null);
				break;
			case "trim":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.TrimTokenFilter)value, null);
				break;
			case "truncate":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.TruncateTokenFilter)value, null);
				break;
			case "unique":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.UniqueTokenFilter)value, null);
				break;
			case "uppercase":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.UppercaseTokenFilter)value, null);
				break;
			case "word_delimiter_graph":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.WordDelimiterGraphTokenFilter)value, null);
				break;
			case "word_delimiter":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.WordDelimiterTokenFilter)value, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.Type}' is not supported for type '{nameof(ITokenFilter)}'.");
		}
	}
}

[JsonConverter(typeof(TokenFilterInterfaceConverter))]
public partial interface ITokenFilter
{
	public string? Type { get; }
}