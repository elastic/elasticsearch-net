// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class ITokenizerConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Analysis.ITokenizer>
{
	private static readonly System.Text.Json.JsonEncodedText PropDiscriminator = System.Text.Json.JsonEncodedText.Encode("type");

	public override Elastic.Clients.Elasticsearch.Analysis.ITokenizer Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		var readerSnapshot = reader;
		string? discriminator = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (reader.TryReadProperty(options, PropDiscriminator, ref discriminator, null))
			{
				break;
			}

			reader.Skip();
		}

		reader = readerSnapshot;
		return discriminator switch
		{
			"char_group" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.CharGroupTokenizer>(options, null),
			"classic" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizer>(options, null),
			"edge_ngram" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizer>(options, null),
			"icu_tokenizer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.IcuTokenizer>(options, null),
			"keyword" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizer>(options, null),
			"kuromoji_tokenizer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.KuromojiTokenizer>(options, null),
			"letter" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LetterTokenizer>(options, null),
			"lowercase" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizer>(options, null),
			"ngram" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NGramTokenizer>(options, null),
			"nori_tokenizer" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.NoriTokenizer>(options, null),
			"path_hierarchy" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizer>(options, null),
			"pattern" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.PatternTokenizer>(options, null),
			"simple_pattern" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizer>(options, null),
			"simple_pattern_split" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizer>(options, null),
			"standard" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.StandardTokenizer>(options, null),
			"thai" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizer>(options, null),
			"uax_url_email" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizer>(options, null),
			"whitespace" => reader.ReadValue<Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizer>(options, null),
			_ => throw new System.Text.Json.JsonException($"Variant '{discriminator}' is not supported for type '{nameof(Elastic.Clients.Elasticsearch.Analysis.ITokenizer)}'.")
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Analysis.ITokenizer value, System.Text.Json.JsonSerializerOptions options)
	{
		switch (value.Type)
		{
			case "char_group":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.CharGroupTokenizer)value, null);
				break;
			case "classic":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizer)value, null);
				break;
			case "edge_ngram":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizer)value, null);
				break;
			case "icu_tokenizer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.IcuTokenizer)value, null);
				break;
			case "keyword":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizer)value, null);
				break;
			case "kuromoji_tokenizer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.KuromojiTokenizer)value, null);
				break;
			case "letter":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LetterTokenizer)value, null);
				break;
			case "lowercase":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizer)value, null);
				break;
			case "ngram":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NGramTokenizer)value, null);
				break;
			case "nori_tokenizer":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.NoriTokenizer)value, null);
				break;
			case "path_hierarchy":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizer)value, null);
				break;
			case "pattern":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.PatternTokenizer)value, null);
				break;
			case "simple_pattern":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizer)value, null);
				break;
			case "simple_pattern_split":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizer)value, null);
				break;
			case "standard":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.StandardTokenizer)value, null);
				break;
			case "thai":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizer)value, null);
				break;
			case "uax_url_email":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizer)value, null);
				break;
			case "whitespace":
				writer.WriteValue(options, (Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizer)value, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.Type}' is not supported for type '{nameof(Elastic.Clients.Elasticsearch.Analysis.ITokenizer)}'.");
		}
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Analysis.ITokenizerConverter))]
public partial interface ITokenizer
{
	public string Type { get; }
}

public readonly partial struct TokenizerFactory
{
	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer CharGroup(Elastic.Clients.Elasticsearch.Analysis.CharGroupTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer CharGroup(System.Action<Elastic.Clients.Elasticsearch.Analysis.CharGroupTokenizerDescriptor> action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.CharGroupTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Classic(Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Classic()
	{
		return Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Classic(System.Action<Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.ClassicTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer EdgeNGram(Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer EdgeNGram()
	{
		return Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer EdgeNGram(System.Action<Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.EdgeNGramTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Icu(Elastic.Clients.Elasticsearch.Analysis.IcuTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Icu(System.Action<Elastic.Clients.Elasticsearch.Analysis.IcuTokenizerDescriptor> action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.IcuTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Keyword(Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Keyword()
	{
		return Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Keyword(System.Action<Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.KeywordTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Kuromoji(Elastic.Clients.Elasticsearch.Analysis.KuromojiTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Kuromoji(System.Action<Elastic.Clients.Elasticsearch.Analysis.KuromojiTokenizerDescriptor> action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.KuromojiTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Letter(Elastic.Clients.Elasticsearch.Analysis.LetterTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Letter()
	{
		return Elastic.Clients.Elasticsearch.Analysis.LetterTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Letter(System.Action<Elastic.Clients.Elasticsearch.Analysis.LetterTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.LetterTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Lowercase(Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Lowercase()
	{
		return Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Lowercase(System.Action<Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.LowercaseTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer NGram(Elastic.Clients.Elasticsearch.Analysis.NGramTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer NGram()
	{
		return Elastic.Clients.Elasticsearch.Analysis.NGramTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer NGram(System.Action<Elastic.Clients.Elasticsearch.Analysis.NGramTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.NGramTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Nori(Elastic.Clients.Elasticsearch.Analysis.NoriTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Nori()
	{
		return Elastic.Clients.Elasticsearch.Analysis.NoriTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Nori(System.Action<Elastic.Clients.Elasticsearch.Analysis.NoriTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.NoriTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer PathHierarchy(Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer PathHierarchy()
	{
		return Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer PathHierarchy(System.Action<Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.PathHierarchyTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Pattern(Elastic.Clients.Elasticsearch.Analysis.PatternTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Pattern()
	{
		return Elastic.Clients.Elasticsearch.Analysis.PatternTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Pattern(System.Action<Elastic.Clients.Elasticsearch.Analysis.PatternTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.PatternTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePattern(Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePattern()
	{
		return Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePattern(System.Action<Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.SimplePatternTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePatternSplit(Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePatternSplit()
	{
		return Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer SimplePatternSplit(System.Action<Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.SimplePatternSplitTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Standard(Elastic.Clients.Elasticsearch.Analysis.StandardTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Standard()
	{
		return Elastic.Clients.Elasticsearch.Analysis.StandardTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Standard(System.Action<Elastic.Clients.Elasticsearch.Analysis.StandardTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.StandardTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Thai(Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Thai()
	{
		return Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Thai(System.Action<Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.ThaiTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer UaxEmailUrl(Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer UaxEmailUrl()
	{
		return Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer UaxEmailUrl(System.Action<Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.UaxEmailUrlTokenizerDescriptor.Build(action);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Whitespace(Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizer value)
	{
		return value;
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Whitespace()
	{
		return Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizerDescriptor.Build(null);
	}

	public Elastic.Clients.Elasticsearch.Analysis.ITokenizer Whitespace(System.Action<Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizerDescriptor>? action)
	{
		return Elastic.Clients.Elasticsearch.Analysis.WhitespaceTokenizerDescriptor.Build(action);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Analysis.ITokenizer Build(System.Func<Elastic.Clients.Elasticsearch.Analysis.TokenizerFactory, Elastic.Clients.Elasticsearch.Analysis.ITokenizer> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Analysis.TokenizerFactory();
		return action.Invoke(builder);
	}
}