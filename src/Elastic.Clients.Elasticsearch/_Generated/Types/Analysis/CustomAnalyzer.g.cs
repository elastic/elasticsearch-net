// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class CustomAnalyzerConverter : System.Text.Json.Serialization.JsonConverter<CustomAnalyzer>
{
	private static readonly System.Text.Json.JsonEncodedText PropCharFilter = System.Text.Json.JsonEncodedText.Encode("char_filter");
	private static readonly System.Text.Json.JsonEncodedText PropFilter = System.Text.Json.JsonEncodedText.Encode("filter");
	private static readonly System.Text.Json.JsonEncodedText PropPositionIncrementGap = System.Text.Json.JsonEncodedText.Encode("position_increment_gap");
	private static readonly System.Text.Json.JsonEncodedText PropPositionOffsetGap = System.Text.Json.JsonEncodedText.Encode("position_offset_gap");
	private static readonly System.Text.Json.JsonEncodedText PropTokenizer = System.Text.Json.JsonEncodedText.Encode("tokenizer");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");

	public override CustomAnalyzer Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<ICollection<string>?> propCharFilter = default;
		LocalJsonValue<ICollection<string>?> propFilter = default;
		LocalJsonValue<int?> propPositionIncrementGap = default;
		LocalJsonValue<int?> propPositionOffsetGap = default;
		LocalJsonValue<string> propTokenizer = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propCharFilter.TryReadProperty(ref reader, options, PropCharFilter, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propFilter.TryReadProperty(ref reader, options, PropFilter, static ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propPositionIncrementGap.TryReadProperty(ref reader, options, PropPositionIncrementGap, null))
			{
				continue;
			}

			if (propPositionOffsetGap.TryReadProperty(ref reader, options, PropPositionOffsetGap, null))
			{
				continue;
			}

			if (propTokenizer.TryReadProperty(ref reader, options, PropTokenizer, null))
			{
				continue;
			}

			if (reader.ValueTextEquals(PropType))
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new CustomAnalyzer
		{
			CharFilter = propCharFilter.Value
,
			Filter = propFilter.Value
,
			PositionIncrementGap = propPositionIncrementGap.Value
,
			PositionOffsetGap = propPositionOffsetGap.Value
,
			Tokenizer = propTokenizer.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CustomAnalyzer value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropCharFilter, value.CharFilter, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropFilter, value.Filter, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<string>? v) => w.WriteSingleOrManyCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropPositionIncrementGap, value.PositionIncrementGap, null, null);
		writer.WriteProperty(options, PropPositionOffsetGap, value.PositionOffsetGap, null, null);
		writer.WriteProperty(options, PropTokenizer, value.Tokenizer, null, null);
		writer.WriteProperty(options, PropType, value.Type, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(CustomAnalyzerConverter))]
public sealed partial class CustomAnalyzer : IAnalyzer
{
	public ICollection<string>? CharFilter { get; set; }
	public ICollection<string>? Filter { get; set; }
	public int? PositionIncrementGap { get; set; }
	public int? PositionOffsetGap { get; set; }
	public string Tokenizer { get; set; }

	public string Type => "custom";
}

public sealed partial class CustomAnalyzerDescriptor : SerializableDescriptor<CustomAnalyzerDescriptor>, IBuildableDescriptor<CustomAnalyzer>
{
	internal CustomAnalyzerDescriptor(Action<CustomAnalyzerDescriptor> configure) => configure.Invoke(this);

	public CustomAnalyzerDescriptor() : base()
	{
	}

	private ICollection<string>? CharFilterValue { get; set; }
	private ICollection<string>? FilterValue { get; set; }
	private int? PositionIncrementGapValue { get; set; }
	private int? PositionOffsetGapValue { get; set; }
	private string TokenizerValue { get; set; }

	public CustomAnalyzerDescriptor CharFilter(ICollection<string>? charFilter)
	{
		CharFilterValue = charFilter;
		return Self;
	}

	public CustomAnalyzerDescriptor Filter(ICollection<string>? filter)
	{
		FilterValue = filter;
		return Self;
	}

	public CustomAnalyzerDescriptor PositionIncrementGap(int? positionIncrementGap)
	{
		PositionIncrementGapValue = positionIncrementGap;
		return Self;
	}

	public CustomAnalyzerDescriptor PositionOffsetGap(int? positionOffsetGap)
	{
		PositionOffsetGapValue = positionOffsetGap;
		return Self;
	}

	public CustomAnalyzerDescriptor Tokenizer(string tokenizer)
	{
		TokenizerValue = tokenizer;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (CharFilterValue is not null)
		{
			writer.WritePropertyName("char_filter");
			SingleOrManySerializationHelper.Serialize<string>(CharFilterValue, writer, options);
		}

		if (FilterValue is not null)
		{
			writer.WritePropertyName("filter");
			SingleOrManySerializationHelper.Serialize<string>(FilterValue, writer, options);
		}

		if (PositionIncrementGapValue.HasValue)
		{
			writer.WritePropertyName("position_increment_gap");
			writer.WriteNumberValue(PositionIncrementGapValue.Value);
		}

		if (PositionOffsetGapValue.HasValue)
		{
			writer.WritePropertyName("position_offset_gap");
			writer.WriteNumberValue(PositionOffsetGapValue.Value);
		}

		writer.WritePropertyName("tokenizer");
		writer.WriteStringValue(TokenizerValue);
		writer.WritePropertyName("type");
		writer.WriteStringValue("custom");
		writer.WriteEndObject();
	}

	CustomAnalyzer IBuildableDescriptor<CustomAnalyzer>.Build() => new()
	{
		CharFilter = CharFilterValue,
		Filter = FilterValue,
		PositionIncrementGap = PositionIncrementGapValue,
		PositionOffsetGap = PositionOffsetGapValue,
		Tokenizer = TokenizerValue
	};
}