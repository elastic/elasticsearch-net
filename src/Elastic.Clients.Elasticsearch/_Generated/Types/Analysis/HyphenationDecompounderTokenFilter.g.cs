// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class HyphenationDecompounderTokenFilterConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter>
{
	private static readonly System.Text.Json.JsonEncodedText PropHyphenationPatternsPath = System.Text.Json.JsonEncodedText.Encode("hyphenation_patterns_path");
	private static readonly System.Text.Json.JsonEncodedText PropMaxSubwordSize = System.Text.Json.JsonEncodedText.Encode("max_subword_size");
	private static readonly System.Text.Json.JsonEncodedText PropMinSubwordSize = System.Text.Json.JsonEncodedText.Encode("min_subword_size");
	private static readonly System.Text.Json.JsonEncodedText PropMinWordSize = System.Text.Json.JsonEncodedText.Encode("min_word_size");
	private static readonly System.Text.Json.JsonEncodedText PropNoOverlappingMatches = System.Text.Json.JsonEncodedText.Encode("no_overlapping_matches");
	private static readonly System.Text.Json.JsonEncodedText PropNoSubMatches = System.Text.Json.JsonEncodedText.Encode("no_sub_matches");
	private static readonly System.Text.Json.JsonEncodedText PropOnlyLongestMatch = System.Text.Json.JsonEncodedText.Encode("only_longest_match");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");
	private static readonly System.Text.Json.JsonEncodedText PropVersion = System.Text.Json.JsonEncodedText.Encode("version");
	private static readonly System.Text.Json.JsonEncodedText PropWordList = System.Text.Json.JsonEncodedText.Encode("word_list");
	private static readonly System.Text.Json.JsonEncodedText PropWordListPath = System.Text.Json.JsonEncodedText.Encode("word_list_path");

	public override Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string> propHyphenationPatternsPath = default;
		LocalJsonValue<int?> propMaxSubwordSize = default;
		LocalJsonValue<int?> propMinSubwordSize = default;
		LocalJsonValue<int?> propMinWordSize = default;
		LocalJsonValue<bool?> propNoOverlappingMatches = default;
		LocalJsonValue<bool?> propNoSubMatches = default;
		LocalJsonValue<bool?> propOnlyLongestMatch = default;
		LocalJsonValue<string?> propVersion = default;
		LocalJsonValue<System.Collections.Generic.ICollection<string>?> propWordList = default;
		LocalJsonValue<string?> propWordListPath = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propHyphenationPatternsPath.TryReadProperty(ref reader, options, PropHyphenationPatternsPath, null))
			{
				continue;
			}

			if (propMaxSubwordSize.TryReadProperty(ref reader, options, PropMaxSubwordSize, static int? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<int>(o)))
			{
				continue;
			}

			if (propMinSubwordSize.TryReadProperty(ref reader, options, PropMinSubwordSize, static int? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<int>(o)))
			{
				continue;
			}

			if (propMinWordSize.TryReadProperty(ref reader, options, PropMinWordSize, static int? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<int>(o)))
			{
				continue;
			}

			if (propNoOverlappingMatches.TryReadProperty(ref reader, options, PropNoOverlappingMatches, static bool? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<bool>(o)))
			{
				continue;
			}

			if (propNoSubMatches.TryReadProperty(ref reader, options, PropNoSubMatches, static bool? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<bool>(o)))
			{
				continue;
			}

			if (propOnlyLongestMatch.TryReadProperty(ref reader, options, PropOnlyLongestMatch, static bool? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadNullableValue<bool>(o)))
			{
				continue;
			}

			if (reader.ValueTextEquals(PropType))
			{
				reader.Skip();
				continue;
			}

			if (propVersion.TryReadProperty(ref reader, options, PropVersion, null))
			{
				continue;
			}

			if (propWordList.TryReadProperty(ref reader, options, PropWordList, static System.Collections.Generic.ICollection<string>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<string>(o, null)))
			{
				continue;
			}

			if (propWordListPath.TryReadProperty(ref reader, options, PropWordListPath, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			HyphenationPatternsPath = propHyphenationPatternsPath.Value,
			MaxSubwordSize = propMaxSubwordSize.Value,
			MinSubwordSize = propMinSubwordSize.Value,
			MinWordSize = propMinWordSize.Value,
			NoOverlappingMatches = propNoOverlappingMatches.Value,
			NoSubMatches = propNoSubMatches.Value,
			OnlyLongestMatch = propOnlyLongestMatch.Value,
			Version = propVersion.Value,
			WordList = propWordList.Value,
			WordListPath = propWordListPath.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropHyphenationPatternsPath, value.HyphenationPatternsPath, null, null);
		writer.WriteProperty(options, PropMaxSubwordSize, value.MaxSubwordSize, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, int? v) => w.WriteNullableValue<int>(o, v));
		writer.WriteProperty(options, PropMinSubwordSize, value.MinSubwordSize, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, int? v) => w.WriteNullableValue<int>(o, v));
		writer.WriteProperty(options, PropMinWordSize, value.MinWordSize, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, int? v) => w.WriteNullableValue<int>(o, v));
		writer.WriteProperty(options, PropNoOverlappingMatches, value.NoOverlappingMatches, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, bool? v) => w.WriteNullableValue<bool>(o, v));
		writer.WriteProperty(options, PropNoSubMatches, value.NoSubMatches, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, bool? v) => w.WriteNullableValue<bool>(o, v));
		writer.WriteProperty(options, PropOnlyLongestMatch, value.OnlyLongestMatch, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, bool? v) => w.WriteNullableValue<bool>(o, v));
		writer.WriteProperty(options, PropType, value.Type, null, null);
		writer.WriteProperty(options, PropVersion, value.Version, null, null);
		writer.WriteProperty(options, PropWordList, value.WordList, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.Collections.Generic.ICollection<string>? v) => w.WriteCollectionValue<string>(o, v, null));
		writer.WriteProperty(options, PropWordListPath, value.WordListPath, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterConverter))]
public sealed partial class HyphenationDecompounderTokenFilter : Elastic.Clients.Elasticsearch.Analysis.ITokenFilter
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public HyphenationDecompounderTokenFilter(string hyphenationPatternsPath)
	{
		HyphenationPatternsPath = hyphenationPatternsPath;
	}
#if NET7_0_OR_GREATER
	public HyphenationDecompounderTokenFilter()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public HyphenationDecompounderTokenFilter()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal HyphenationDecompounderTokenFilter(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// Path to an Apache FOP (Formatting Objects Processor) XML hyphenation pattern file.
	/// This path must be absolute or relative to the <c>config</c> location. Only FOP v1.2 compatible files are supported.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	string HyphenationPatternsPath { get; set; }

	/// <summary>
	/// <para>
	/// Maximum subword character length. Longer subword tokens are excluded from the output. Defaults to <c>15</c>.
	/// </para>
	/// </summary>
	public int? MaxSubwordSize { get; set; }

	/// <summary>
	/// <para>
	/// Minimum subword character length. Shorter subword tokens are excluded from the output. Defaults to <c>2</c>.
	/// </para>
	/// </summary>
	public int? MinSubwordSize { get; set; }

	/// <summary>
	/// <para>
	/// Minimum word character length. Shorter word tokens are excluded from the output. Defaults to <c>5</c>.
	/// </para>
	/// </summary>
	public int? MinWordSize { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, do not allow overlapping tokens. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public bool? NoOverlappingMatches { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, do not match sub tokens in tokens that are in the word list. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public bool? NoSubMatches { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, only include the longest matching subword. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public bool? OnlyLongestMatch { get; set; }

	public string Type => "hyphenation_decompounder";

	public string? Version { get; set; }

	/// <summary>
	/// <para>
	/// A list of subwords to look for in the token stream. If found, the subword is included in the token output.
	/// Either this parameter or <c>word_list_path</c> must be specified.
	/// </para>
	/// </summary>
	public System.Collections.Generic.ICollection<string>? WordList { get; set; }

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of subwords to find in the token stream. If found, the subword is included in the token output.
	/// This path must be absolute or relative to the config location, and the file must be UTF-8 encoded. Each token in the file must be separated by a line break.
	/// Either this parameter or <c>word_list</c> must be specified.
	/// </para>
	/// </summary>
	public string? WordListPath { get; set; }
}

public readonly partial struct HyphenationDecompounderTokenFilterDescriptor
{
	internal Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public HyphenationDecompounderTokenFilterDescriptor(Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public HyphenationDecompounderTokenFilterDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor(Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter instance) => new Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter(Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// Path to an Apache FOP (Formatting Objects Processor) XML hyphenation pattern file.
	/// This path must be absolute or relative to the <c>config</c> location. Only FOP v1.2 compatible files are supported.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor HyphenationPatternsPath(string value)
	{
		Instance.HyphenationPatternsPath = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Maximum subword character length. Longer subword tokens are excluded from the output. Defaults to <c>15</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor MaxSubwordSize(int? value)
	{
		Instance.MaxSubwordSize = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Minimum subword character length. Shorter subword tokens are excluded from the output. Defaults to <c>2</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor MinSubwordSize(int? value)
	{
		Instance.MinSubwordSize = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// Minimum word character length. Shorter word tokens are excluded from the output. Defaults to <c>5</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor MinWordSize(int? value)
	{
		Instance.MinWordSize = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, do not allow overlapping tokens. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor NoOverlappingMatches(bool? value = true)
	{
		Instance.NoOverlappingMatches = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, do not match sub tokens in tokens that are in the word list. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor NoSubMatches(bool? value = true)
	{
		Instance.NoSubMatches = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, only include the longest matching subword. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor OnlyLongestMatch(bool? value = true)
	{
		Instance.OnlyLongestMatch = value;
		return this;
	}

	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor Version(string? value)
	{
		Instance.Version = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of subwords to look for in the token stream. If found, the subword is included in the token output.
	/// Either this parameter or <c>word_list_path</c> must be specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor WordList(System.Collections.Generic.ICollection<string>? value)
	{
		Instance.WordList = value;
		return this;
	}

	/// <summary>
	/// <para>
	/// A list of subwords to look for in the token stream. If found, the subword is included in the token output.
	/// Either this parameter or <c>word_list_path</c> must be specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor WordList(params string[] values)
	{
		Instance.WordList = [.. values];
		return this;
	}

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of subwords to find in the token stream. If found, the subword is included in the token output.
	/// This path must be absolute or relative to the config location, and the file must be UTF-8 encoded. Each token in the file must be separated by a line break.
	/// Either this parameter or <c>word_list</c> must be specified.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor WordListPath(string? value)
	{
		Instance.WordListPath = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter Build(System.Action<Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilterDescriptor(new Elastic.Clients.Elasticsearch.Analysis.HyphenationDecompounderTokenFilter(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}