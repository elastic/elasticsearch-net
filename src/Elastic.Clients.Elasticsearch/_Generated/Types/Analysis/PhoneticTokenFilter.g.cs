// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class PhoneticTokenFilterConverter : System.Text.Json.Serialization.JsonConverter<PhoneticTokenFilter>
{
	private static readonly System.Text.Json.JsonEncodedText PropEncoder = System.Text.Json.JsonEncodedText.Encode("encoder");
	private static readonly System.Text.Json.JsonEncodedText PropLanguageset = System.Text.Json.JsonEncodedText.Encode("languageset");
	private static readonly System.Text.Json.JsonEncodedText PropMaxCodeLen = System.Text.Json.JsonEncodedText.Encode("max_code_len");
	private static readonly System.Text.Json.JsonEncodedText PropNameType = System.Text.Json.JsonEncodedText.Encode("name_type");
	private static readonly System.Text.Json.JsonEncodedText PropReplace = System.Text.Json.JsonEncodedText.Encode("replace");
	private static readonly System.Text.Json.JsonEncodedText PropRuleType = System.Text.Json.JsonEncodedText.Encode("rule_type");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");
	private static readonly System.Text.Json.JsonEncodedText PropVersion = System.Text.Json.JsonEncodedText.Encode("version");

	public override PhoneticTokenFilter Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticEncoder> propEncoder = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>?> propLanguageset = default;
		LocalJsonValue<int?> propMaxCodeLen = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticNameType?> propNameType = default;
		LocalJsonValue<bool?> propReplace = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticRuleType?> propRuleType = default;
		LocalJsonValue<string?> propVersion = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propEncoder.TryReadProperty(ref reader, options, PropEncoder, null))
			{
				continue;
			}

			if (propLanguageset.TryReadProperty(ref reader, options, PropLanguageset, static ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>(o, null)))
			{
				continue;
			}

			if (propMaxCodeLen.TryReadProperty(ref reader, options, PropMaxCodeLen, null))
			{
				continue;
			}

			if (propNameType.TryReadProperty(ref reader, options, PropNameType, null))
			{
				continue;
			}

			if (propReplace.TryReadProperty(ref reader, options, PropReplace, null))
			{
				continue;
			}

			if (propRuleType.TryReadProperty(ref reader, options, PropRuleType, null))
			{
				continue;
			}

			if (reader.ValueTextEquals(PropType))
			{
				reader.Skip();
				continue;
			}

			if (propVersion.TryReadProperty(ref reader, options, PropVersion, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new PhoneticTokenFilter
		{
			Encoder = propEncoder.Value
,
			Languageset = propLanguageset.Value
,
			MaxCodeLen = propMaxCodeLen.Value
,
			NameType = propNameType.Value
,
			Replace = propReplace.Value
,
			RuleType = propRuleType.Value
,
			Version = propVersion.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, PhoneticTokenFilter value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropEncoder, value.Encoder, null, null);
		writer.WriteProperty(options, PropLanguageset, value.Languageset, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>(o, v, null));
		writer.WriteProperty(options, PropMaxCodeLen, value.MaxCodeLen, null, null);
		writer.WriteProperty(options, PropNameType, value.NameType, null, null);
		writer.WriteProperty(options, PropReplace, value.Replace, null, null);
		writer.WriteProperty(options, PropRuleType, value.RuleType, null, null);
		writer.WriteProperty(options, PropType, value.Type, null, null);
		writer.WriteProperty(options, PropVersion, value.Version, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(PhoneticTokenFilterConverter))]
public sealed partial class PhoneticTokenFilter : ITokenFilter
{
	public Elastic.Clients.Elasticsearch.Analysis.PhoneticEncoder Encoder { get; set; }
	public ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>? Languageset { get; set; }
	public int? MaxCodeLen { get; set; }
	public Elastic.Clients.Elasticsearch.Analysis.PhoneticNameType? NameType { get; set; }
	public bool? Replace { get; set; }
	public Elastic.Clients.Elasticsearch.Analysis.PhoneticRuleType? RuleType { get; set; }

	public string Type => "phonetic";

	public string? Version { get; set; }
}

public sealed partial class PhoneticTokenFilterDescriptor : SerializableDescriptor<PhoneticTokenFilterDescriptor>, IBuildableDescriptor<PhoneticTokenFilter>
{
	internal PhoneticTokenFilterDescriptor(Action<PhoneticTokenFilterDescriptor> configure) => configure.Invoke(this);

	public PhoneticTokenFilterDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Analysis.PhoneticEncoder EncoderValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>? LanguagesetValue { get; set; }
	private int? MaxCodeLenValue { get; set; }
	private Elastic.Clients.Elasticsearch.Analysis.PhoneticNameType? NameTypeValue { get; set; }
	private bool? ReplaceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Analysis.PhoneticRuleType? RuleTypeValue { get; set; }
	private string? VersionValue { get; set; }

	public PhoneticTokenFilterDescriptor Encoder(Elastic.Clients.Elasticsearch.Analysis.PhoneticEncoder encoder)
	{
		EncoderValue = encoder;
		return Self;
	}

	public PhoneticTokenFilterDescriptor Languageset(ICollection<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>? languageset)
	{
		LanguagesetValue = languageset;
		return Self;
	}

	public PhoneticTokenFilterDescriptor MaxCodeLen(int? maxCodeLen)
	{
		MaxCodeLenValue = maxCodeLen;
		return Self;
	}

	public PhoneticTokenFilterDescriptor NameType(Elastic.Clients.Elasticsearch.Analysis.PhoneticNameType? nameType)
	{
		NameTypeValue = nameType;
		return Self;
	}

	public PhoneticTokenFilterDescriptor Replace(bool? replace = true)
	{
		ReplaceValue = replace;
		return Self;
	}

	public PhoneticTokenFilterDescriptor RuleType(Elastic.Clients.Elasticsearch.Analysis.PhoneticRuleType? ruleType)
	{
		RuleTypeValue = ruleType;
		return Self;
	}

	public PhoneticTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("encoder");
		JsonSerializer.Serialize(writer, EncoderValue, options);
		if (LanguagesetValue is not null)
		{
			writer.WritePropertyName("languageset");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.Analysis.PhoneticLanguage>(LanguagesetValue, writer, options);
		}

		if (MaxCodeLenValue.HasValue)
		{
			writer.WritePropertyName("max_code_len");
			writer.WriteNumberValue(MaxCodeLenValue.Value);
		}

		if (NameTypeValue is not null)
		{
			writer.WritePropertyName("name_type");
			JsonSerializer.Serialize(writer, NameTypeValue, options);
		}

		if (ReplaceValue.HasValue)
		{
			writer.WritePropertyName("replace");
			writer.WriteBooleanValue(ReplaceValue.Value);
		}

		if (RuleTypeValue is not null)
		{
			writer.WritePropertyName("rule_type");
			JsonSerializer.Serialize(writer, RuleTypeValue, options);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("phonetic");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	PhoneticTokenFilter IBuildableDescriptor<PhoneticTokenFilter>.Build() => new()
	{
		Encoder = EncoderValue,
		Languageset = LanguagesetValue,
		MaxCodeLen = MaxCodeLenValue,
		NameType = NameTypeValue,
		Replace = ReplaceValue,
		RuleType = RuleTypeValue,
		Version = VersionValue
	};
}