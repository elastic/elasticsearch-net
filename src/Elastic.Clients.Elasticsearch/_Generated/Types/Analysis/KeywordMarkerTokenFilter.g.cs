// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class KeywordMarkerTokenFilterConverter : System.Text.Json.Serialization.JsonConverter<KeywordMarkerTokenFilter>
{
	private static readonly System.Text.Json.JsonEncodedText PropIgnoreCase = System.Text.Json.JsonEncodedText.Encode("ignore_case");
	private static readonly System.Text.Json.JsonEncodedText PropKeywords = System.Text.Json.JsonEncodedText.Encode("keywords");
	private static readonly System.Text.Json.JsonEncodedText PropKeywordsPath = System.Text.Json.JsonEncodedText.Encode("keywords_path");
	private static readonly System.Text.Json.JsonEncodedText PropKeywordsPattern = System.Text.Json.JsonEncodedText.Encode("keywords_pattern");
	private static readonly System.Text.Json.JsonEncodedText PropType = System.Text.Json.JsonEncodedText.Encode("type");
	private static readonly System.Text.Json.JsonEncodedText PropVersion = System.Text.Json.JsonEncodedText.Encode("version");

	public override KeywordMarkerTokenFilter Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool?> propIgnoreCase = default;
		LocalJsonValue<ICollection<string>?> propKeywords = default;
		LocalJsonValue<string?> propKeywordsPath = default;
		LocalJsonValue<string?> propKeywordsPattern = default;
		LocalJsonValue<string?> propVersion = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propIgnoreCase.TryRead(ref reader, options, PropIgnoreCase))
			{
				continue;
			}

			if (propKeywords.TryRead(ref reader, options, PropKeywords, typeof(SingleOrManyMarker<ICollection<string>?, string>)))
			{
				continue;
			}

			if (propKeywordsPath.TryRead(ref reader, options, PropKeywordsPath))
			{
				continue;
			}

			if (propKeywordsPattern.TryRead(ref reader, options, PropKeywordsPattern))
			{
				continue;
			}

			if (reader.ValueTextEquals(PropType))
			{
				reader.Skip();
				continue;
			}

			if (propVersion.TryRead(ref reader, options, PropVersion))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new KeywordMarkerTokenFilter
		{
			IgnoreCase = propIgnoreCase.Value
,
			Keywords = propKeywords.Value
,
			KeywordsPath = propKeywordsPath.Value
,
			KeywordsPattern = propKeywordsPattern.Value
,
			Version = propVersion.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, KeywordMarkerTokenFilter value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropIgnoreCase, value.IgnoreCase);
		writer.WriteProperty(options, PropKeywords, value.Keywords, null, typeof(SingleOrManyMarker<ICollection<string>?, string>));
		writer.WriteProperty(options, PropKeywordsPath, value.KeywordsPath);
		writer.WriteProperty(options, PropKeywordsPattern, value.KeywordsPattern);
		writer.WriteProperty(options, PropType, value.Type);
		writer.WriteProperty(options, PropVersion, value.Version);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(KeywordMarkerTokenFilterConverter))]
public sealed partial class KeywordMarkerTokenFilter : ITokenFilter
{
	public bool? IgnoreCase { get; set; }
	public ICollection<string>? Keywords { get; set; }
	public string? KeywordsPath { get; set; }
	public string? KeywordsPattern { get; set; }

	public string Type => "keyword_marker";

	public string? Version { get; set; }
}

public sealed partial class KeywordMarkerTokenFilterDescriptor : SerializableDescriptor<KeywordMarkerTokenFilterDescriptor>, IBuildableDescriptor<KeywordMarkerTokenFilter>
{
	internal KeywordMarkerTokenFilterDescriptor(Action<KeywordMarkerTokenFilterDescriptor> configure) => configure.Invoke(this);

	public KeywordMarkerTokenFilterDescriptor() : base()
	{
	}

	private bool? IgnoreCaseValue { get; set; }
	private ICollection<string>? KeywordsValue { get; set; }
	private string? KeywordsPathValue { get; set; }
	private string? KeywordsPatternValue { get; set; }
	private string? VersionValue { get; set; }

	public KeywordMarkerTokenFilterDescriptor IgnoreCase(bool? ignoreCase = true)
	{
		IgnoreCaseValue = ignoreCase;
		return Self;
	}

	public KeywordMarkerTokenFilterDescriptor Keywords(ICollection<string>? keywords)
	{
		KeywordsValue = keywords;
		return Self;
	}

	public KeywordMarkerTokenFilterDescriptor KeywordsPath(string? keywordsPath)
	{
		KeywordsPathValue = keywordsPath;
		return Self;
	}

	public KeywordMarkerTokenFilterDescriptor KeywordsPattern(string? keywordsPattern)
	{
		KeywordsPatternValue = keywordsPattern;
		return Self;
	}

	public KeywordMarkerTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (IgnoreCaseValue.HasValue)
		{
			writer.WritePropertyName("ignore_case");
			writer.WriteBooleanValue(IgnoreCaseValue.Value);
		}

		if (KeywordsValue is not null)
		{
			writer.WritePropertyName("keywords");
			SingleOrManySerializationHelper.Serialize<string>(KeywordsValue, writer, options);
		}

		if (!string.IsNullOrEmpty(KeywordsPathValue))
		{
			writer.WritePropertyName("keywords_path");
			writer.WriteStringValue(KeywordsPathValue);
		}

		if (!string.IsNullOrEmpty(KeywordsPatternValue))
		{
			writer.WritePropertyName("keywords_pattern");
			writer.WriteStringValue(KeywordsPatternValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("keyword_marker");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	KeywordMarkerTokenFilter IBuildableDescriptor<KeywordMarkerTokenFilter>.Build() => new()
	{
		IgnoreCase = IgnoreCaseValue,
		Keywords = KeywordsValue,
		KeywordsPath = KeywordsPathValue,
		KeywordsPattern = KeywordsPatternValue,
		Version = VersionValue
	};
}