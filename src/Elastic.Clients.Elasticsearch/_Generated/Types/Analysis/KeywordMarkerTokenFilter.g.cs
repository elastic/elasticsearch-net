// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public sealed partial class KeywordMarkerTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// If <c>true</c>, matching for the <c>keywords</c> and <c>keywords_path</c> parameters ignores letter case. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("ignore_case")]
	public bool? IgnoreCase { get; set; }

	/// <summary>
	/// <para>
	/// Array of keywords. Tokens that match these keywords are not stemmed.
	/// This parameter, <c>keywords_path</c>, or <c>keywords_pattern</c> must be specified. You cannot specify this parameter and <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("keywords")]
	[SingleOrManyCollectionConverter(typeof(string))]
	public ICollection<string>? Keywords { get; set; }

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of keywords. Tokens that match these keywords are not stemmed.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each word in the file must be separated by a line break.
	/// This parameter, <c>keywords</c>, or <c>keywords_pattern</c> must be specified. You cannot specify this parameter and <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("keywords_path")]
	public string? KeywordsPath { get; set; }

	/// <summary>
	/// <para>
	/// Java regular expression used to match tokens. Tokens that match this expression are marked as keywords and not stemmed.
	/// This parameter, <c>keywords</c>, or <c>keywords_path</c> must be specified. You cannot specify this parameter and <c>keywords</c> or <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("keywords_pattern")]
	public string? KeywordsPattern { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "keyword_marker";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class KeywordMarkerTokenFilterDescriptor : SerializableDescriptor<KeywordMarkerTokenFilterDescriptor>, IBuildableDescriptor<KeywordMarkerTokenFilter>
{
	internal KeywordMarkerTokenFilterDescriptor(Action<KeywordMarkerTokenFilterDescriptor> configure) => configure.Invoke(this);

	public KeywordMarkerTokenFilterDescriptor() : base()
	{
	}

	private bool? IgnoreCaseValue { get; set; }
	private ICollection<string>? KeywordsValue { get; set; }
	private string? KeywordsPathValue { get; set; }
	private string? KeywordsPatternValue { get; set; }
	private string? VersionValue { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, matching for the <c>keywords</c> and <c>keywords_path</c> parameters ignores letter case. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public KeywordMarkerTokenFilterDescriptor IgnoreCase(bool? ignoreCase = true)
	{
		IgnoreCaseValue = ignoreCase;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Array of keywords. Tokens that match these keywords are not stemmed.
	/// This parameter, <c>keywords_path</c>, or <c>keywords_pattern</c> must be specified. You cannot specify this parameter and <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	public KeywordMarkerTokenFilterDescriptor Keywords(ICollection<string>? keywords)
	{
		KeywordsValue = keywords;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of keywords. Tokens that match these keywords are not stemmed.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each word in the file must be separated by a line break.
	/// This parameter, <c>keywords</c>, or <c>keywords_pattern</c> must be specified. You cannot specify this parameter and <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	public KeywordMarkerTokenFilterDescriptor KeywordsPath(string? keywordsPath)
	{
		KeywordsPathValue = keywordsPath;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Java regular expression used to match tokens. Tokens that match this expression are marked as keywords and not stemmed.
	/// This parameter, <c>keywords</c>, or <c>keywords_path</c> must be specified. You cannot specify this parameter and <c>keywords</c> or <c>keywords_pattern</c>.
	/// </para>
	/// </summary>
	public KeywordMarkerTokenFilterDescriptor KeywordsPattern(string? keywordsPattern)
	{
		KeywordsPatternValue = keywordsPattern;
		return Self;
	}

	public KeywordMarkerTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (IgnoreCaseValue.HasValue)
		{
			writer.WritePropertyName("ignore_case");
			writer.WriteBooleanValue(IgnoreCaseValue.Value);
		}

		if (KeywordsValue is not null)
		{
			writer.WritePropertyName("keywords");
			SingleOrManySerializationHelper.Serialize<string>(KeywordsValue, writer, options);
		}

		if (!string.IsNullOrEmpty(KeywordsPathValue))
		{
			writer.WritePropertyName("keywords_path");
			writer.WriteStringValue(KeywordsPathValue);
		}

		if (!string.IsNullOrEmpty(KeywordsPatternValue))
		{
			writer.WritePropertyName("keywords_pattern");
			writer.WriteStringValue(KeywordsPatternValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("keyword_marker");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	KeywordMarkerTokenFilter IBuildableDescriptor<KeywordMarkerTokenFilter>.Build() => new()
	{
		IgnoreCase = IgnoreCaseValue,
		Keywords = KeywordsValue,
		KeywordsPath = KeywordsPathValue,
		KeywordsPattern = KeywordsPatternValue,
		Version = VersionValue
	};
}