// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public sealed partial class ElisionTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// List of elisions to remove.
	/// To be removed, the elision must be at the beginning of a token and be immediately followed by an apostrophe. Both the elision and apostrophe are removed.
	/// For custom <c>elision</c> filters, either this parameter or <c>articles_path</c> must be specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("articles")]
	public ICollection<string>? Articles { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, elision matching is case insensitive. If <c>false</c>, elision matching is case sensitive. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("articles_case")]
	public bool? ArticlesCase { get; set; }

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of elisions to remove.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each elision in the file must be separated by a line break.
	/// To be removed, the elision must be at the beginning of a token and be immediately followed by an apostrophe. Both the elision and apostrophe are removed.
	/// For custom <c>elision</c> filters, either this parameter or <c>articles</c> must be specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("articles_path")]
	public string? ArticlesPath { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "elision";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class ElisionTokenFilterDescriptor : SerializableDescriptor<ElisionTokenFilterDescriptor>, IBuildableDescriptor<ElisionTokenFilter>
{
	internal ElisionTokenFilterDescriptor(Action<ElisionTokenFilterDescriptor> configure) => configure.Invoke(this);

	public ElisionTokenFilterDescriptor() : base()
	{
	}

	private ICollection<string>? ArticlesValue { get; set; }
	private bool? ArticlesCaseValue { get; set; }
	private string? ArticlesPathValue { get; set; }
	private string? VersionValue { get; set; }

	/// <summary>
	/// <para>
	/// List of elisions to remove.
	/// To be removed, the elision must be at the beginning of a token and be immediately followed by an apostrophe. Both the elision and apostrophe are removed.
	/// For custom <c>elision</c> filters, either this parameter or <c>articles_path</c> must be specified.
	/// </para>
	/// </summary>
	public ElisionTokenFilterDescriptor Articles(ICollection<string>? articles)
	{
		ArticlesValue = articles;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, elision matching is case insensitive. If <c>false</c>, elision matching is case sensitive. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public ElisionTokenFilterDescriptor ArticlesCase(bool? articlesCase = true)
	{
		ArticlesCaseValue = articlesCase;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Path to a file that contains a list of elisions to remove.
	/// This path must be absolute or relative to the <c>config</c> location, and the file must be UTF-8 encoded. Each elision in the file must be separated by a line break.
	/// To be removed, the elision must be at the beginning of a token and be immediately followed by an apostrophe. Both the elision and apostrophe are removed.
	/// For custom <c>elision</c> filters, either this parameter or <c>articles</c> must be specified.
	/// </para>
	/// </summary>
	public ElisionTokenFilterDescriptor ArticlesPath(string? articlesPath)
	{
		ArticlesPathValue = articlesPath;
		return Self;
	}

	public ElisionTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ArticlesValue is not null)
		{
			writer.WritePropertyName("articles");
			JsonSerializer.Serialize(writer, ArticlesValue, options);
		}

		if (ArticlesCaseValue.HasValue)
		{
			writer.WritePropertyName("articles_case");
			writer.WriteBooleanValue(ArticlesCaseValue.Value);
		}

		if (!string.IsNullOrEmpty(ArticlesPathValue))
		{
			writer.WritePropertyName("articles_path");
			writer.WriteStringValue(ArticlesPathValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("elision");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	ElisionTokenFilter IBuildableDescriptor<ElisionTokenFilter>.Build() => new()
	{
		Articles = ArticlesValue,
		ArticlesCase = ArticlesCaseValue,
		ArticlesPath = ArticlesPathValue,
		Version = VersionValue
	};
}