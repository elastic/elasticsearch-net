// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

internal sealed partial class HunspellTokenFilterConverter : JsonConverter<HunspellTokenFilter>
{
	public override HunspellTokenFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		var variant = new HunspellTokenFilter();
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				var property = reader.GetString();
				if (property == "dedup")
				{
					variant.Dedup = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "dictionary")
				{
					variant.Dictionary = JsonSerializer.Deserialize<string?>(ref reader, options);
					continue;
				}

				if (property == "locale" || property == "lang" || property == "language")
				{
					variant.Locale = JsonSerializer.Deserialize<string>(ref reader, options);
					continue;
				}

				if (property == "longest_only")
				{
					variant.LongestOnly = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "version")
				{
					variant.Version = JsonSerializer.Deserialize<string?>(ref reader, options);
					continue;
				}
			}
		}

		return variant;
	}

	public override void Write(Utf8JsonWriter writer, HunspellTokenFilter value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		if (value.Dedup.HasValue)
		{
			writer.WritePropertyName("dedup");
			writer.WriteBooleanValue(value.Dedup.Value);
		}

		if (!string.IsNullOrEmpty(value.Dictionary))
		{
			writer.WritePropertyName("dictionary");
			writer.WriteStringValue(value.Dictionary);
		}

		writer.WritePropertyName("locale");
		writer.WriteStringValue(value.Locale);
		if (value.LongestOnly.HasValue)
		{
			writer.WritePropertyName("longest_only");
			writer.WriteBooleanValue(value.LongestOnly.Value);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("hunspell");
		if (!string.IsNullOrEmpty(value.Version))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(value.Version);
		}

		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(HunspellTokenFilterConverter))]
public sealed partial class HunspellTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// If <c>true</c>, duplicate tokens are removed from the filter’s output. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	public bool? Dedup { get; set; }

	/// <summary>
	/// <para>
	/// One or more <c>.dic</c> files (e.g, <c>en_US.dic</c>, my_custom.dic) to use for the Hunspell dictionary.
	/// By default, the <c>hunspell</c> filter uses all <c>.dic</c> files in the <c>&lt;$ES_PATH_CONF>/hunspell/&lt;locale></c> directory specified using the <c>lang</c>, <c>language</c>, or <c>locale</c> parameter.
	/// </para>
	/// </summary>
	public string? Dictionary { get; set; }

	/// <summary>
	/// <para>
	/// Locale directory used to specify the <c>.aff</c> and <c>.dic</c> files for a Hunspell dictionary.
	/// </para>
	/// </summary>
	public string Locale { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, only the longest stemmed version of each token is included in the output. If <c>false</c>, all stemmed versions of the token are included. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public bool? LongestOnly { get; set; }

	public string Type => "hunspell";

	public string? Version { get; set; }
}

public sealed partial class HunspellTokenFilterDescriptor : SerializableDescriptor<HunspellTokenFilterDescriptor>, IBuildableDescriptor<HunspellTokenFilter>
{
	internal HunspellTokenFilterDescriptor(Action<HunspellTokenFilterDescriptor> configure) => configure.Invoke(this);

	public HunspellTokenFilterDescriptor() : base()
	{
	}

	private bool? DedupValue { get; set; }
	private string? DictionaryValue { get; set; }
	private string LocaleValue { get; set; }
	private bool? LongestOnlyValue { get; set; }
	private string? VersionValue { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, duplicate tokens are removed from the filter’s output. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	public HunspellTokenFilterDescriptor Dedup(bool? dedup = true)
	{
		DedupValue = dedup;
		return Self;
	}

	/// <summary>
	/// <para>
	/// One or more <c>.dic</c> files (e.g, <c>en_US.dic</c>, my_custom.dic) to use for the Hunspell dictionary.
	/// By default, the <c>hunspell</c> filter uses all <c>.dic</c> files in the <c>&lt;$ES_PATH_CONF>/hunspell/&lt;locale></c> directory specified using the <c>lang</c>, <c>language</c>, or <c>locale</c> parameter.
	/// </para>
	/// </summary>
	public HunspellTokenFilterDescriptor Dictionary(string? dictionary)
	{
		DictionaryValue = dictionary;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Locale directory used to specify the <c>.aff</c> and <c>.dic</c> files for a Hunspell dictionary.
	/// </para>
	/// </summary>
	public HunspellTokenFilterDescriptor Locale(string locale)
	{
		LocaleValue = locale;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, only the longest stemmed version of each token is included in the output. If <c>false</c>, all stemmed versions of the token are included. Defaults to <c>false</c>.
	/// </para>
	/// </summary>
	public HunspellTokenFilterDescriptor LongestOnly(bool? longestOnly = true)
	{
		LongestOnlyValue = longestOnly;
		return Self;
	}

	public HunspellTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (DedupValue.HasValue)
		{
			writer.WritePropertyName("dedup");
			writer.WriteBooleanValue(DedupValue.Value);
		}

		if (!string.IsNullOrEmpty(DictionaryValue))
		{
			writer.WritePropertyName("dictionary");
			writer.WriteStringValue(DictionaryValue);
		}

		writer.WritePropertyName("locale");
		writer.WriteStringValue(LocaleValue);
		if (LongestOnlyValue.HasValue)
		{
			writer.WritePropertyName("longest_only");
			writer.WriteBooleanValue(LongestOnlyValue.Value);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("hunspell");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	HunspellTokenFilter IBuildableDescriptor<HunspellTokenFilter>.Build() => new()
	{
		Dedup = DedupValue,
		Dictionary = DictionaryValue,
		Locale = LocaleValue,
		LongestOnly = LongestOnlyValue,
		Version = VersionValue
	};
}