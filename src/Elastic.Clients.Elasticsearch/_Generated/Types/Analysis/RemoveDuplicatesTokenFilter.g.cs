// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Analysis;
public sealed partial class RemoveDuplicatesTokenFilter : ITokenFilterDefinition
{
	[JsonInclude]
	[JsonPropertyName("type")]
	public string Type => "remove_duplicates";
	[JsonInclude]
	[JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class RemoveDuplicatesTokenFilterDescriptor : SerializableDescriptor<RemoveDuplicatesTokenFilterDescriptor>, IBuildableDescriptor<RemoveDuplicatesTokenFilter>
{
	internal RemoveDuplicatesTokenFilterDescriptor(Action<RemoveDuplicatesTokenFilterDescriptor> configure) => configure.Invoke(this);
	public RemoveDuplicatesTokenFilterDescriptor() : base()
	{
	}

	private string? VersionValue { get; set; }

	public RemoveDuplicatesTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("type");
		writer.WriteStringValue("remove_duplicates");
		if (VersionValue is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionValue, options);
		}

		writer.WriteEndObject();
	}

	RemoveDuplicatesTokenFilter IBuildableDescriptor<RemoveDuplicatesTokenFilter>.Build() => new()
	{ Version = VersionValue };
}