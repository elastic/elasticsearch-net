// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Analysis;

public sealed partial class PatternReplaceTokenFilter : ITokenFilter
{
	/// <summary>
	/// <para>
	/// If <c>true</c>, all substrings matching the pattern parameter’s regular expression are replaced. If <c>false</c>, the filter replaces only the first matching substring in each token. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("all")]
	public bool? All { get; set; }

	/// <summary>
	/// <para>
	/// Regular expression, written in Java’s regular expression syntax. The filter replaces token substrings matching this pattern with the substring in the <c>replacement</c> parameter.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("pattern")]
	public string Pattern { get; set; }

	/// <summary>
	/// <para>
	/// Replacement substring. Defaults to an empty substring (<c>""</c>).
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("replacement")]
	public string? Replacement { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "pattern_replace";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class PatternReplaceTokenFilterDescriptor : SerializableDescriptor<PatternReplaceTokenFilterDescriptor>, IBuildableDescriptor<PatternReplaceTokenFilter>
{
	internal PatternReplaceTokenFilterDescriptor(Action<PatternReplaceTokenFilterDescriptor> configure) => configure.Invoke(this);

	public PatternReplaceTokenFilterDescriptor() : base()
	{
	}

	private bool? AllValue { get; set; }
	private string PatternValue { get; set; }
	private string? ReplacementValue { get; set; }
	private string? VersionValue { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, all substrings matching the pattern parameter’s regular expression are replaced. If <c>false</c>, the filter replaces only the first matching substring in each token. Defaults to <c>true</c>.
	/// </para>
	/// </summary>
	public PatternReplaceTokenFilterDescriptor All(bool? all = true)
	{
		AllValue = all;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Regular expression, written in Java’s regular expression syntax. The filter replaces token substrings matching this pattern with the substring in the <c>replacement</c> parameter.
	/// </para>
	/// </summary>
	public PatternReplaceTokenFilterDescriptor Pattern(string pattern)
	{
		PatternValue = pattern;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Replacement substring. Defaults to an empty substring (<c>""</c>).
	/// </para>
	/// </summary>
	public PatternReplaceTokenFilterDescriptor Replacement(string? replacement)
	{
		ReplacementValue = replacement;
		return Self;
	}

	public PatternReplaceTokenFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AllValue.HasValue)
		{
			writer.WritePropertyName("all");
			writer.WriteBooleanValue(AllValue.Value);
		}

		writer.WritePropertyName("pattern");
		writer.WriteStringValue(PatternValue);
		if (!string.IsNullOrEmpty(ReplacementValue))
		{
			writer.WritePropertyName("replacement");
			writer.WriteStringValue(ReplacementValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("pattern_replace");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	PatternReplaceTokenFilter IBuildableDescriptor<PatternReplaceTokenFilter>.Build() => new()
	{
		All = AllValue,
		Pattern = PatternValue,
		Replacement = ReplacementValue,
		Version = VersionValue
	};
}