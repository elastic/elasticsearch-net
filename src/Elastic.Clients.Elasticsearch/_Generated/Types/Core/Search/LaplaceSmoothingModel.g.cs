// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.Search;

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Core.Search.Json.LaplaceSmoothingModelConverter))]
public sealed partial class LaplaceSmoothingModel
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public LaplaceSmoothingModel(double alpha)
	{
		Alpha = alpha;
	}
#if NET7_0_OR_GREATER
	public LaplaceSmoothingModel()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public LaplaceSmoothingModel()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal LaplaceSmoothingModel(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// A constant that is added to all counts to balance weights.
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	double Alpha { get; set; }
}

public readonly partial struct LaplaceSmoothingModelDescriptor
{
	internal Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel Instance { get; init; }

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public LaplaceSmoothingModelDescriptor(Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel instance)
	{
		Instance = instance;
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public LaplaceSmoothingModelDescriptor()
	{
		Instance = new Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance);
	}

	public static explicit operator Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor(Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel instance) => new Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor(instance);
	public static implicit operator Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel(Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor descriptor) => descriptor.Instance;

	/// <summary>
	/// <para>
	/// A constant that is added to all counts to balance weights.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor Alpha(double value)
	{
		Instance.Alpha = value;
		return this;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	internal static Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel Build(System.Action<Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModelDescriptor(new Elastic.Clients.Elasticsearch.Core.Search.LaplaceSmoothingModel(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance));
		action.Invoke(builder);
		return builder.Instance;
	}
}