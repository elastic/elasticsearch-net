// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.Search;

[JsonConverter(typeof(RescoreConverter))]
public sealed partial class Rescore
{
	internal Rescore(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantType = variantName;
		Variant = variant;
	}

	internal Rescore()
	{
	}

	public object Variant { get; internal set; }
	public string VariantType { get; internal set; }

	public static Rescore LearningToRank(Elastic.Clients.Elasticsearch.Core.Search.LearningToRank learningToRank) => new Rescore("learning_to_rank", learningToRank);
	public static Rescore Query(Elastic.Clients.Elasticsearch.Core.Search.RescoreQuery rescoreQuery) => new Rescore("query", rescoreQuery);

	[JsonInclude, JsonPropertyName("window_size")]
	public int? WindowSize { get; set; }

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class RescoreConverter : System.Text.Json.Serialization.JsonConverter<Rescore>
{
	private static readonly System.Text.Json.JsonEncodedText PropWindowSize = System.Text.Json.JsonEncodedText.Encode("window_size");
	private static readonly System.Text.Json.JsonEncodedText VariantLearningToRank = System.Text.Json.JsonEncodedText.Encode("learning_to_rank");
	private static readonly System.Text.Json.JsonEncodedText VariantQuery = System.Text.Json.JsonEncodedText.Encode("query");

	public override Rescore Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<int?> propWindowSize = default;
		var variantType = string.Empty;
		object? variant = null;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propWindowSize.TryReadProperty(ref reader, options, PropWindowSize, null))
			{
				continue;
			}

			if (reader.ValueTextEquals(VariantLearningToRank))
			{
				variantType = VariantLearningToRank.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Core.Search.LearningToRank?>(options, null);
				continue;
			}

			if (reader.ValueTextEquals(VariantQuery))
			{
				variantType = VariantQuery.Value;
				reader.Read();
				variant = reader.ReadValue<Elastic.Clients.Elasticsearch.Core.Search.RescoreQuery?>(options, null);
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Rescore
		{
			VariantType = variantType,
			Variant = variant,
			WindowSize = propWindowSize.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Rescore value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		switch (value.VariantType)
		{
			case "":
				break;
			case "learning_to_rank":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Core.Search.LearningToRank?)value.Variant, null, null);
				break;
			case "query":
				writer.WriteProperty(options, value.VariantType, (Elastic.Clients.Elasticsearch.Core.Search.RescoreQuery?)value.Variant, null, null);
				break;
			default:
				throw new System.Text.Json.JsonException($"Variant '{value.VariantType}' is not supported for type '{nameof(Rescore)}'.");
		}

		writer.WriteProperty(options, PropWindowSize, value.WindowSize, null, null);
		writer.WriteEndObject();
	}
}

public sealed partial class RescoreDescriptor<TDocument> : SerializableDescriptor<RescoreDescriptor<TDocument>>
{
	internal RescoreDescriptor(Action<RescoreDescriptor<TDocument>> configure) => configure.Invoke(this);

	public RescoreDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private RescoreDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private RescoreDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private int? WindowSizeValue { get; set; }

	public RescoreDescriptor<TDocument> WindowSize(int? windowSize)
	{
		WindowSizeValue = windowSize;
		return Self;
	}

	public RescoreDescriptor<TDocument> LearningToRank(Elastic.Clients.Elasticsearch.Core.Search.LearningToRank learningToRank) => Set(learningToRank, "learning_to_rank");
	public RescoreDescriptor<TDocument> LearningToRank(Action<Elastic.Clients.Elasticsearch.Core.Search.LearningToRankDescriptor> configure) => Set(configure, "learning_to_rank");
	public RescoreDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.Core.Search.RescoreQuery rescoreQuery) => Set(rescoreQuery, "query");
	public RescoreDescriptor<TDocument> Query(Action<Elastic.Clients.Elasticsearch.Core.Search.RescoreQueryDescriptor<TDocument>> configure) => Set(configure, "query");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (WindowSizeValue.HasValue)
		{
			writer.WritePropertyName("window_size");
			writer.WriteNumberValue(WindowSizeValue.Value);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class RescoreDescriptor : SerializableDescriptor<RescoreDescriptor>
{
	internal RescoreDescriptor(Action<RescoreDescriptor> configure) => configure.Invoke(this);

	public RescoreDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private RescoreDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private RescoreDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	private int? WindowSizeValue { get; set; }

	public RescoreDescriptor WindowSize(int? windowSize)
	{
		WindowSizeValue = windowSize;
		return Self;
	}

	public RescoreDescriptor LearningToRank(Elastic.Clients.Elasticsearch.Core.Search.LearningToRank learningToRank) => Set(learningToRank, "learning_to_rank");
	public RescoreDescriptor LearningToRank(Action<Elastic.Clients.Elasticsearch.Core.Search.LearningToRankDescriptor> configure) => Set(configure, "learning_to_rank");
	public RescoreDescriptor Query(Elastic.Clients.Elasticsearch.Core.Search.RescoreQuery rescoreQuery) => Set(rescoreQuery, "query");
	public RescoreDescriptor Query<TDocument>(Action<Elastic.Clients.Elasticsearch.Core.Search.RescoreQueryDescriptor> configure) => Set(configure, "query");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (WindowSizeValue.HasValue)
		{
			writer.WritePropertyName("window_size");
			writer.WriteNumberValue(WindowSizeValue.Value);
		}

		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}