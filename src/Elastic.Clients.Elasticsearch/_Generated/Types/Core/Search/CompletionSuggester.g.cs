// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.Search;

internal sealed partial class CompletionSuggesterConverter : System.Text.Json.Serialization.JsonConverter<CompletionSuggester>
{
	private static readonly System.Text.Json.JsonEncodedText PropAnalyzer = System.Text.Json.JsonEncodedText.Encode("analyzer");
	private static readonly System.Text.Json.JsonEncodedText PropContexts = System.Text.Json.JsonEncodedText.Encode("contexts");
	private static readonly System.Text.Json.JsonEncodedText PropField = System.Text.Json.JsonEncodedText.Encode("field");
	private static readonly System.Text.Json.JsonEncodedText PropFuzzy = System.Text.Json.JsonEncodedText.Encode("fuzzy");
	private static readonly System.Text.Json.JsonEncodedText PropRegex = System.Text.Json.JsonEncodedText.Encode("regex");
	private static readonly System.Text.Json.JsonEncodedText PropSize = System.Text.Json.JsonEncodedText.Encode("size");
	private static readonly System.Text.Json.JsonEncodedText PropSkipDuplicates = System.Text.Json.JsonEncodedText.Encode("skip_duplicates");

	public override CompletionSuggester Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propAnalyzer = default;
		LocalJsonValue<IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>?> propContexts = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field> propField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness?> propFuzzy = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Core.Search.RegexOptions?> propRegex = default;
		LocalJsonValue<int?> propSize = default;
		LocalJsonValue<bool?> propSkipDuplicates = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAnalyzer.TryReadProperty(ref reader, options, PropAnalyzer, null))
			{
				continue;
			}

			if (propContexts.TryReadProperty(ref reader, options, PropContexts, static IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>(o, null, static Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>> (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadUnionValue<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>(o, static (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => JsonUnionSelector.ByPropertyOfT1(ref r, o, "dummy"), null, static ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext> (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>(o, null)!)!)))
			{
				continue;
			}

			if (propField.TryReadProperty(ref reader, options, PropField, null))
			{
				continue;
			}

			if (propFuzzy.TryReadProperty(ref reader, options, PropFuzzy, null))
			{
				continue;
			}

			if (propRegex.TryReadProperty(ref reader, options, PropRegex, null))
			{
				continue;
			}

			if (propSize.TryReadProperty(ref reader, options, PropSize, null))
			{
				continue;
			}

			if (propSkipDuplicates.TryReadProperty(ref reader, options, PropSkipDuplicates, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new CompletionSuggester
		{
			Analyzer = propAnalyzer.Value
,
			Contexts = propContexts.Value
,
			Field = propField.Value
,
			Fuzzy = propFuzzy.Value
,
			Regex = propRegex.Value
,
			Size = propSize.Value
,
			SkipDuplicates = propSkipDuplicates.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CompletionSuggester value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAnalyzer, value.Analyzer, null, null);
		writer.WriteProperty(options, PropContexts, value.Contexts, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>? v) => w.WriteDictionaryValue<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>(o, v, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>> v) => w.WriteUnionValue<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>(o, v, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext> v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>(o, v, null))));
		writer.WriteProperty(options, PropField, value.Field, null, null);
		writer.WriteProperty(options, PropFuzzy, value.Fuzzy, null, null);
		writer.WriteProperty(options, PropRegex, value.Regex, null, null);
		writer.WriteProperty(options, PropSize, value.Size, null, null);
		writer.WriteProperty(options, PropSkipDuplicates, value.SkipDuplicates, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(CompletionSuggesterConverter))]
public sealed partial class CompletionSuggester
{
	/// <summary>
	/// <para>
	/// The analyzer to analyze the suggest text with.
	/// Defaults to the search analyzer of the suggest field.
	/// </para>
	/// </summary>
	public string? Analyzer { get; set; }

	/// <summary>
	/// <para>
	/// A value, geo point object, or a geo hash string to filter or boost the suggestion on.
	/// </para>
	/// </summary>
	public IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>? Contexts { get; set; }

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field Field { get; set; }

	/// <summary>
	/// <para>
	/// Enables fuzziness, meaning you can have a typo in your search and still get results back.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness? Fuzzy { get; set; }

	/// <summary>
	/// <para>
	/// A regex query that expresses a prefix as a regular expression.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Core.Search.RegexOptions? Regex { get; set; }

	/// <summary>
	/// <para>
	/// The maximum corrections to be returned per suggest text token.
	/// </para>
	/// </summary>
	public int? Size { get; set; }

	/// <summary>
	/// <para>
	/// Whether duplicate suggestions should be filtered out.
	/// </para>
	/// </summary>
	public bool? SkipDuplicates { get; set; }

	public static implicit operator Elastic.Clients.Elasticsearch.Core.Search.FieldSuggester(CompletionSuggester completionSuggester) => Elastic.Clients.Elasticsearch.Core.Search.FieldSuggester.Completion(completionSuggester);
}

public sealed partial class CompletionSuggesterDescriptor<TDocument> : SerializableDescriptor<CompletionSuggesterDescriptor<TDocument>>
{
	internal CompletionSuggesterDescriptor(Action<CompletionSuggesterDescriptor<TDocument>> configure) => configure.Invoke(this);

	public CompletionSuggesterDescriptor() : base()
	{
	}

	private string? AnalyzerValue { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>? ContextsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness? FuzzyValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor FuzzyDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor> FuzzyDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.RegexOptions? RegexValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor RegexDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor> RegexDescriptorAction { get; set; }
	private int? SizeValue { get; set; }
	private bool? SkipDuplicatesValue { get; set; }

	/// <summary>
	/// <para>
	/// The analyzer to analyze the suggest text with.
	/// Defaults to the search analyzer of the suggest field.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Analyzer(string? analyzer)
	{
		AnalyzerValue = analyzer;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A value, geo point object, or a geo hash string to filter or boost the suggestion on.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Contexts(Func<FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>, FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>> selector)
	{
		ContextsValue = selector?.Invoke(new FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Field(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enables fuzziness, meaning you can have a typo in your search and still get results back.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Fuzzy(Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness? fuzzy)
	{
		FuzzyDescriptor = null;
		FuzzyDescriptorAction = null;
		FuzzyValue = fuzzy;
		return Self;
	}

	public CompletionSuggesterDescriptor<TDocument> Fuzzy(Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor descriptor)
	{
		FuzzyValue = null;
		FuzzyDescriptorAction = null;
		FuzzyDescriptor = descriptor;
		return Self;
	}

	public CompletionSuggesterDescriptor<TDocument> Fuzzy(Action<Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor> configure)
	{
		FuzzyValue = null;
		FuzzyDescriptor = null;
		FuzzyDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A regex query that expresses a prefix as a regular expression.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Regex(Elastic.Clients.Elasticsearch.Core.Search.RegexOptions? regex)
	{
		RegexDescriptor = null;
		RegexDescriptorAction = null;
		RegexValue = regex;
		return Self;
	}

	public CompletionSuggesterDescriptor<TDocument> Regex(Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor descriptor)
	{
		RegexValue = null;
		RegexDescriptorAction = null;
		RegexDescriptor = descriptor;
		return Self;
	}

	public CompletionSuggesterDescriptor<TDocument> Regex(Action<Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor> configure)
	{
		RegexValue = null;
		RegexDescriptor = null;
		RegexDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The maximum corrections to be returned per suggest text token.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether duplicate suggestions should be filtered out.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor<TDocument> SkipDuplicates(bool? skipDuplicates = true)
	{
		SkipDuplicatesValue = skipDuplicates;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(AnalyzerValue))
		{
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(AnalyzerValue);
		}

		if (ContextsValue is not null)
		{
			writer.WritePropertyName("contexts");
			JsonSerializer.Serialize(writer, ContextsValue, options);
		}

		writer.WritePropertyName("field");
		JsonSerializer.Serialize(writer, FieldValue, options);
		if (FuzzyDescriptor is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, FuzzyDescriptor, options);
		}
		else if (FuzzyDescriptorAction is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor(FuzzyDescriptorAction), options);
		}
		else if (FuzzyValue is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, FuzzyValue, options);
		}

		if (RegexDescriptor is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, RegexDescriptor, options);
		}
		else if (RegexDescriptorAction is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor(RegexDescriptorAction), options);
		}
		else if (RegexValue is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, RegexValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SkipDuplicatesValue.HasValue)
		{
			writer.WritePropertyName("skip_duplicates");
			writer.WriteBooleanValue(SkipDuplicatesValue.Value);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class CompletionSuggesterDescriptor : SerializableDescriptor<CompletionSuggesterDescriptor>
{
	internal CompletionSuggesterDescriptor(Action<CompletionSuggesterDescriptor> configure) => configure.Invoke(this);

	public CompletionSuggesterDescriptor() : base()
	{
	}

	private string? AnalyzerValue { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>? ContextsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness? FuzzyValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor FuzzyDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor> FuzzyDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.RegexOptions? RegexValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor RegexDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor> RegexDescriptorAction { get; set; }
	private int? SizeValue { get; set; }
	private bool? SkipDuplicatesValue { get; set; }

	/// <summary>
	/// <para>
	/// The analyzer to analyze the suggest text with.
	/// Defaults to the search analyzer of the suggest field.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Analyzer(string? analyzer)
	{
		AnalyzerValue = analyzer;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A value, geo point object, or a geo hash string to filter or boost the suggestion on.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Contexts(Func<FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>, FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>> selector)
	{
		ContextsValue = selector?.Invoke(new FluentDictionary<Elastic.Clients.Elasticsearch.Field, Union<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext, ICollection<Elastic.Clients.Elasticsearch.Core.Search.CompletionContext>>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Field(Elastic.Clients.Elasticsearch.Field field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The field to fetch the candidate suggestions from.
	/// Needs to be set globally or per suggestion.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Enables fuzziness, meaning you can have a typo in your search and still get results back.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Fuzzy(Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzziness? fuzzy)
	{
		FuzzyDescriptor = null;
		FuzzyDescriptorAction = null;
		FuzzyValue = fuzzy;
		return Self;
	}

	public CompletionSuggesterDescriptor Fuzzy(Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor descriptor)
	{
		FuzzyValue = null;
		FuzzyDescriptorAction = null;
		FuzzyDescriptor = descriptor;
		return Self;
	}

	public CompletionSuggesterDescriptor Fuzzy(Action<Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor> configure)
	{
		FuzzyValue = null;
		FuzzyDescriptor = null;
		FuzzyDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A regex query that expresses a prefix as a regular expression.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Regex(Elastic.Clients.Elasticsearch.Core.Search.RegexOptions? regex)
	{
		RegexDescriptor = null;
		RegexDescriptorAction = null;
		RegexValue = regex;
		return Self;
	}

	public CompletionSuggesterDescriptor Regex(Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor descriptor)
	{
		RegexValue = null;
		RegexDescriptorAction = null;
		RegexDescriptor = descriptor;
		return Self;
	}

	public CompletionSuggesterDescriptor Regex(Action<Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor> configure)
	{
		RegexValue = null;
		RegexDescriptor = null;
		RegexDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The maximum corrections to be returned per suggest text token.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether duplicate suggestions should be filtered out.
	/// </para>
	/// </summary>
	public CompletionSuggesterDescriptor SkipDuplicates(bool? skipDuplicates = true)
	{
		SkipDuplicatesValue = skipDuplicates;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(AnalyzerValue))
		{
			writer.WritePropertyName("analyzer");
			writer.WriteStringValue(AnalyzerValue);
		}

		if (ContextsValue is not null)
		{
			writer.WritePropertyName("contexts");
			JsonSerializer.Serialize(writer, ContextsValue, options);
		}

		writer.WritePropertyName("field");
		JsonSerializer.Serialize(writer, FieldValue, options);
		if (FuzzyDescriptor is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, FuzzyDescriptor, options);
		}
		else if (FuzzyDescriptorAction is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Core.Search.SuggestFuzzinessDescriptor(FuzzyDescriptorAction), options);
		}
		else if (FuzzyValue is not null)
		{
			writer.WritePropertyName("fuzzy");
			JsonSerializer.Serialize(writer, FuzzyValue, options);
		}

		if (RegexDescriptor is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, RegexDescriptor, options);
		}
		else if (RegexDescriptorAction is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Core.Search.RegexOptionsDescriptor(RegexDescriptorAction), options);
		}
		else if (RegexValue is not null)
		{
			writer.WritePropertyName("regex");
			JsonSerializer.Serialize(writer, RegexValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SkipDuplicatesValue.HasValue)
		{
			writer.WritePropertyName("skip_duplicates");
			writer.WriteBooleanValue(SkipDuplicatesValue.Value);
		}

		writer.WriteEndObject();
	}
}