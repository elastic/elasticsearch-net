// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.Search;

internal sealed partial class CompletionContextConverter : System.Text.Json.Serialization.JsonConverter<CompletionContext>
{
	private static readonly System.Text.Json.JsonEncodedText PropBoost = System.Text.Json.JsonEncodedText.Encode("boost");
	private static readonly System.Text.Json.JsonEncodedText PropContext = System.Text.Json.JsonEncodedText.Encode("context");
	private static readonly System.Text.Json.JsonEncodedText PropNeighbours = System.Text.Json.JsonEncodedText.Encode("neighbours");
	private static readonly System.Text.Json.JsonEncodedText PropPrecision = System.Text.Json.JsonEncodedText.Encode("precision");
	private static readonly System.Text.Json.JsonEncodedText PropPrefix = System.Text.Json.JsonEncodedText.Encode("prefix");

	public override CompletionContext Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		var readerSnapshot = reader;
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<double?> propBoost = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Core.Search.Context> propContext = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>?> propNeighbours = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.GeohashPrecision?> propPrecision = default;
		LocalJsonValue<bool?> propPrefix = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBoost.TryReadProperty(ref reader, options, PropBoost, null))
			{
				continue;
			}

			if (propContext.TryReadProperty(ref reader, options, PropContext, null))
			{
				continue;
			}

			if (propNeighbours.TryReadProperty(ref reader, options, PropNeighbours, static ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.GeohashPrecision>(o, null)))
			{
				continue;
			}

			if (propPrecision.TryReadProperty(ref reader, options, PropPrecision, null))
			{
				continue;
			}

			if (propPrefix.TryReadProperty(ref reader, options, PropPrefix, null))
			{
				continue;
			}

			try
			{
				reader = readerSnapshot;
				var result = reader.ReadValue<Elastic.Clients.Elasticsearch.Core.Search.Context>(options, null);
				return new CompletionContext { Context = result };
			}
			catch (System.Text.Json.JsonException)
			{
				throw;
			}
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new CompletionContext
		{
			Boost = propBoost.Value
,
			Context = propContext.Value
,
			Neighbours = propNeighbours.Value
,
			Precision = propPrecision.Value
,
			Prefix = propPrefix.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, CompletionContext value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBoost, value.Boost, null, null);
		writer.WriteProperty(options, PropContext, value.Context, null, null);
		writer.WriteProperty(options, PropNeighbours, value.Neighbours, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.GeohashPrecision>(o, v, null));
		writer.WriteProperty(options, PropPrecision, value.Precision, null, null);
		writer.WriteProperty(options, PropPrefix, value.Prefix, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(CompletionContextConverter))]
public sealed partial class CompletionContext
{
	/// <summary>
	/// <para>
	/// The factor by which the score of the suggestion should be boosted.
	/// The score is computed by multiplying the boost with the suggestion weight.
	/// </para>
	/// </summary>
	public double? Boost { get; set; }

	/// <summary>
	/// <para>
	/// The value of the category to filter/boost on.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Core.Search.Context Context { get; set; }

	/// <summary>
	/// <para>
	/// An array of precision values at which neighboring geohashes should be taken into account.
	/// Precision value can be a distance value (<c>5m</c>, <c>10km</c>, etc.) or a raw geohash precision (<c>1</c>..<c>12</c>).
	/// Defaults to generating neighbors for index time precision level.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>? Neighbours { get; set; }

	/// <summary>
	/// <para>
	/// The precision of the geohash to encode the query geo point.
	/// Can be specified as a distance value (<c>5m</c>, <c>10km</c>, etc.), or as a raw geohash precision (<c>1</c>..<c>12</c>).
	/// Defaults to index time precision level.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.GeohashPrecision? Precision { get; set; }

	/// <summary>
	/// <para>
	/// Whether the category value should be treated as a prefix or not.
	/// </para>
	/// </summary>
	public bool? Prefix { get; set; }
}

public sealed partial class CompletionContextDescriptor : SerializableDescriptor<CompletionContextDescriptor>
{
	internal CompletionContextDescriptor(Action<CompletionContextDescriptor> configure) => configure.Invoke(this);

	public CompletionContextDescriptor() : base()
	{
	}

	private double? BoostValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.Context ContextValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>? NeighboursValue { get; set; }
	private Elastic.Clients.Elasticsearch.GeohashPrecision? PrecisionValue { get; set; }
	private bool? PrefixValue { get; set; }

	/// <summary>
	/// <para>
	/// The factor by which the score of the suggestion should be boosted.
	/// The score is computed by multiplying the boost with the suggestion weight.
	/// </para>
	/// </summary>
	public CompletionContextDescriptor Boost(double? boost)
	{
		BoostValue = boost;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The value of the category to filter/boost on.
	/// </para>
	/// </summary>
	public CompletionContextDescriptor Context(Elastic.Clients.Elasticsearch.Core.Search.Context context)
	{
		ContextValue = context;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An array of precision values at which neighboring geohashes should be taken into account.
	/// Precision value can be a distance value (<c>5m</c>, <c>10km</c>, etc.) or a raw geohash precision (<c>1</c>..<c>12</c>).
	/// Defaults to generating neighbors for index time precision level.
	/// </para>
	/// </summary>
	public CompletionContextDescriptor Neighbours(ICollection<Elastic.Clients.Elasticsearch.GeohashPrecision>? neighbours)
	{
		NeighboursValue = neighbours;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The precision of the geohash to encode the query geo point.
	/// Can be specified as a distance value (<c>5m</c>, <c>10km</c>, etc.), or as a raw geohash precision (<c>1</c>..<c>12</c>).
	/// Defaults to index time precision level.
	/// </para>
	/// </summary>
	public CompletionContextDescriptor Precision(Elastic.Clients.Elasticsearch.GeohashPrecision? precision)
	{
		PrecisionValue = precision;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Whether the category value should be treated as a prefix or not.
	/// </para>
	/// </summary>
	public CompletionContextDescriptor Prefix(bool? prefix = true)
	{
		PrefixValue = prefix;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (BoostValue.HasValue)
		{
			writer.WritePropertyName("boost");
			writer.WriteNumberValue(BoostValue.Value);
		}

		writer.WritePropertyName("context");
		JsonSerializer.Serialize(writer, ContextValue, options);
		if (NeighboursValue is not null)
		{
			writer.WritePropertyName("neighbours");
			JsonSerializer.Serialize(writer, NeighboursValue, options);
		}

		if (PrecisionValue is not null)
		{
			writer.WritePropertyName("precision");
			JsonSerializer.Serialize(writer, PrecisionValue, options);
		}

		if (PrefixValue.HasValue)
		{
			writer.WritePropertyName("prefix");
			writer.WriteBooleanValue(PrefixValue.Value);
		}

		writer.WriteEndObject();
	}
}