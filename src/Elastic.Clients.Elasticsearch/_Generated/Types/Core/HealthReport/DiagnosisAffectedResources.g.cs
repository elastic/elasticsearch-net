// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Core.HealthReport;

internal sealed partial class DiagnosisAffectedResourcesConverter : System.Text.Json.Serialization.JsonConverter<DiagnosisAffectedResources>
{
	private static readonly System.Text.Json.JsonEncodedText PropFeatureStates = System.Text.Json.JsonEncodedText.Encode("feature_states");
	private static readonly System.Text.Json.JsonEncodedText PropIndices = System.Text.Json.JsonEncodedText.Encode("indices");
	private static readonly System.Text.Json.JsonEncodedText PropNodes = System.Text.Json.JsonEncodedText.Encode("nodes");
	private static readonly System.Text.Json.JsonEncodedText PropSlmPolicies = System.Text.Json.JsonEncodedText.Encode("slm_policies");
	private static readonly System.Text.Json.JsonEncodedText PropSnapshotRepositories = System.Text.Json.JsonEncodedText.Encode("snapshot_repositories");

	public override DiagnosisAffectedResources Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IReadOnlyCollection<string>?> propFeatureStates = default;
		LocalJsonValue<IReadOnlyCollection<string>?> propIndices = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Core.HealthReport.IndicatorNode>?> propNodes = default;
		LocalJsonValue<IReadOnlyCollection<string>?> propSlmPolicies = default;
		LocalJsonValue<IReadOnlyCollection<string>?> propSnapshotRepositories = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propFeatureStates.TryRead(ref reader, options, PropFeatureStates))
			{
				continue;
			}

			if (propIndices.TryRead(ref reader, options, PropIndices, typeof(SingleOrManyMarker<IReadOnlyCollection<string>?, string>)))
			{
				continue;
			}

			if (propNodes.TryRead(ref reader, options, PropNodes))
			{
				continue;
			}

			if (propSlmPolicies.TryRead(ref reader, options, PropSlmPolicies))
			{
				continue;
			}

			if (propSnapshotRepositories.TryRead(ref reader, options, PropSnapshotRepositories))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new DiagnosisAffectedResources
		{
			FeatureStates = propFeatureStates.Value
,
			Indices = propIndices.Value
,
			Nodes = propNodes.Value
,
			SlmPolicies = propSlmPolicies.Value
,
			SnapshotRepositories = propSnapshotRepositories.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DiagnosisAffectedResources value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropFeatureStates, value.FeatureStates);
		writer.WriteProperty(options, PropIndices, value.Indices, null, typeof(SingleOrManyMarker<IReadOnlyCollection<string>?, string>));
		writer.WriteProperty(options, PropNodes, value.Nodes);
		writer.WriteProperty(options, PropSlmPolicies, value.SlmPolicies);
		writer.WriteProperty(options, PropSnapshotRepositories, value.SnapshotRepositories);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(DiagnosisAffectedResourcesConverter))]
public sealed partial class DiagnosisAffectedResources
{
	public IReadOnlyCollection<string>? FeatureStates { get; init; }
	public IReadOnlyCollection<string>? Indices { get; init; }
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Core.HealthReport.IndicatorNode>? Nodes { get; init; }
	public IReadOnlyCollection<string>? SlmPolicies { get; init; }
	public IReadOnlyCollection<string>? SnapshotRepositories { get; init; }
}