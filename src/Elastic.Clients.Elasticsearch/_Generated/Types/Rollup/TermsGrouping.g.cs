// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Rollup;

internal sealed partial class TermsGroupingConverter : System.Text.Json.Serialization.JsonConverter<TermsGrouping>
{
	private static readonly System.Text.Json.JsonEncodedText PropFields = System.Text.Json.JsonEncodedText.Encode("fields");

	public override TermsGrouping Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.Fields> propFields = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propFields.TryReadProperty(ref reader, options, PropFields, static Elastic.Clients.Elasticsearch.Fields (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<Elastic.Clients.Elasticsearch.Fields>(o, typeof(SingleOrManyFieldsMarker))!))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new TermsGrouping
		{
			Fields = propFields.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, TermsGrouping value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropFields, value.Fields, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, Elastic.Clients.Elasticsearch.Fields v) => w.WriteValueEx<Elastic.Clients.Elasticsearch.Fields>(o, v, typeof(SingleOrManyFieldsMarker)));
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(TermsGroupingConverter))]
public sealed partial class TermsGrouping
{
	/// <summary>
	/// <para>
	/// The set of fields that you wish to collect terms for.
	/// This array can contain fields that are both keyword and numerics.
	/// Order does not matter.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Fields Fields { get; set; }
}

public sealed partial class TermsGroupingDescriptor<TDocument> : SerializableDescriptor<TermsGroupingDescriptor<TDocument>>
{
	internal TermsGroupingDescriptor(Action<TermsGroupingDescriptor<TDocument>> configure) => configure.Invoke(this);

	public TermsGroupingDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields FieldsValue { get; set; }

	/// <summary>
	/// <para>
	/// The set of fields that you wish to collect terms for.
	/// This array can contain fields that are both keyword and numerics.
	/// Order does not matter.
	/// </para>
	/// </summary>
	public TermsGroupingDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Fields fields)
	{
		FieldsValue = fields;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("fields");
		JsonSerializer.Serialize(writer, FieldsValue, options);
		writer.WriteEndObject();
	}
}

public sealed partial class TermsGroupingDescriptor : SerializableDescriptor<TermsGroupingDescriptor>
{
	internal TermsGroupingDescriptor(Action<TermsGroupingDescriptor> configure) => configure.Invoke(this);

	public TermsGroupingDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Fields FieldsValue { get; set; }

	/// <summary>
	/// <para>
	/// The set of fields that you wish to collect terms for.
	/// This array can contain fields that are both keyword and numerics.
	/// Order does not matter.
	/// </para>
	/// </summary>
	public TermsGroupingDescriptor Fields(Elastic.Clients.Elasticsearch.Fields fields)
	{
		FieldsValue = fields;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("fields");
		JsonSerializer.Serialize(writer, FieldsValue, options);
		writer.WriteEndObject();
	}
}