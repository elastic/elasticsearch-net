// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Nodes;

internal sealed partial class StatsConverter : System.Text.Json.Serialization.JsonConverter<Stats>
{
	private static readonly System.Text.Json.JsonEncodedText PropAdaptiveSelection = System.Text.Json.JsonEncodedText.Encode("adaptive_selection");
	private static readonly System.Text.Json.JsonEncodedText PropAttributes = System.Text.Json.JsonEncodedText.Encode("attributes");
	private static readonly System.Text.Json.JsonEncodedText PropBreakers = System.Text.Json.JsonEncodedText.Encode("breakers");
	private static readonly System.Text.Json.JsonEncodedText PropDiscovery = System.Text.Json.JsonEncodedText.Encode("discovery");
	private static readonly System.Text.Json.JsonEncodedText PropFs = System.Text.Json.JsonEncodedText.Encode("fs");
	private static readonly System.Text.Json.JsonEncodedText PropHost = System.Text.Json.JsonEncodedText.Encode("host");
	private static readonly System.Text.Json.JsonEncodedText PropHttp = System.Text.Json.JsonEncodedText.Encode("http");
	private static readonly System.Text.Json.JsonEncodedText PropIndexingPressure = System.Text.Json.JsonEncodedText.Encode("indexing_pressure");
	private static readonly System.Text.Json.JsonEncodedText PropIndices = System.Text.Json.JsonEncodedText.Encode("indices");
	private static readonly System.Text.Json.JsonEncodedText PropIngest = System.Text.Json.JsonEncodedText.Encode("ingest");
	private static readonly System.Text.Json.JsonEncodedText PropIp = System.Text.Json.JsonEncodedText.Encode("ip");
	private static readonly System.Text.Json.JsonEncodedText PropJvm = System.Text.Json.JsonEncodedText.Encode("jvm");
	private static readonly System.Text.Json.JsonEncodedText PropName = System.Text.Json.JsonEncodedText.Encode("name");
	private static readonly System.Text.Json.JsonEncodedText PropOs = System.Text.Json.JsonEncodedText.Encode("os");
	private static readonly System.Text.Json.JsonEncodedText PropProcess = System.Text.Json.JsonEncodedText.Encode("process");
	private static readonly System.Text.Json.JsonEncodedText PropRoles = System.Text.Json.JsonEncodedText.Encode("roles");
	private static readonly System.Text.Json.JsonEncodedText PropScript = System.Text.Json.JsonEncodedText.Encode("script");
	private static readonly System.Text.Json.JsonEncodedText PropScriptCache = System.Text.Json.JsonEncodedText.Encode("script_cache");
	private static readonly System.Text.Json.JsonEncodedText PropThreadPool = System.Text.Json.JsonEncodedText.Encode("thread_pool");
	private static readonly System.Text.Json.JsonEncodedText PropTimestamp = System.Text.Json.JsonEncodedText.Encode("timestamp");
	private static readonly System.Text.Json.JsonEncodedText PropTransport = System.Text.Json.JsonEncodedText.Encode("transport");
	private static readonly System.Text.Json.JsonEncodedText PropTransportAddress = System.Text.Json.JsonEncodedText.Encode("transport_address");

	public override Stats Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.AdaptiveSelection>?> propAdaptiveSelection = default;
		LocalJsonValue<IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Field, string>?> propAttributes = default;
		LocalJsonValue<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.Breaker>?> propBreakers = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Discovery?> propDiscovery = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.FileSystem?> propFs = default;
		LocalJsonValue<string?> propHost = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Http?> propHttp = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.IndexingPressure?> propIndexingPressure = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.IndexManagement.ShardStats?> propIndices = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Ingest?> propIngest = default;
		LocalJsonValue<IReadOnlyCollection<string>?> propIp = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Jvm?> propJvm = default;
		LocalJsonValue<string?> propName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.OperatingSystem?> propOs = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Process?> propProcess = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.NodeRole>?> propRoles = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Scripting?> propScript = default;
		LocalJsonValue<IReadOnlyDictionary<string, Union<Elastic.Clients.Elasticsearch.Nodes.ScriptCache, IReadOnlyCollection<Elastic.Clients.Elasticsearch.Nodes.ScriptCache>>>?> propScriptCache = default;
		LocalJsonValue<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.ThreadCount>?> propThreadPool = default;
		LocalJsonValue<long?> propTimestamp = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Transport?> propTransport = default;
		LocalJsonValue<string?> propTransportAddress = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAdaptiveSelection.TryRead(ref reader, options, PropAdaptiveSelection))
			{
				continue;
			}

			if (propAttributes.TryRead(ref reader, options, PropAttributes))
			{
				continue;
			}

			if (propBreakers.TryRead(ref reader, options, PropBreakers))
			{
				continue;
			}

			if (propDiscovery.TryRead(ref reader, options, PropDiscovery))
			{
				continue;
			}

			if (propFs.TryRead(ref reader, options, PropFs))
			{
				continue;
			}

			if (propHost.TryRead(ref reader, options, PropHost))
			{
				continue;
			}

			if (propHttp.TryRead(ref reader, options, PropHttp))
			{
				continue;
			}

			if (propIndexingPressure.TryRead(ref reader, options, PropIndexingPressure))
			{
				continue;
			}

			if (propIndices.TryRead(ref reader, options, PropIndices))
			{
				continue;
			}

			if (propIngest.TryRead(ref reader, options, PropIngest))
			{
				continue;
			}

			if (propIp.TryRead(ref reader, options, PropIp, typeof(SingleOrManyMarker<IReadOnlyCollection<string>?, string>)))
			{
				continue;
			}

			if (propJvm.TryRead(ref reader, options, PropJvm))
			{
				continue;
			}

			if (propName.TryRead(ref reader, options, PropName))
			{
				continue;
			}

			if (propOs.TryRead(ref reader, options, PropOs))
			{
				continue;
			}

			if (propProcess.TryRead(ref reader, options, PropProcess))
			{
				continue;
			}

			if (propRoles.TryRead(ref reader, options, PropRoles))
			{
				continue;
			}

			if (propScript.TryRead(ref reader, options, PropScript))
			{
				continue;
			}

			if (propScriptCache.TryRead(ref reader, options, PropScriptCache))
			{
				continue;
			}

			if (propThreadPool.TryRead(ref reader, options, PropThreadPool))
			{
				continue;
			}

			if (propTimestamp.TryRead(ref reader, options, PropTimestamp))
			{
				continue;
			}

			if (propTransport.TryRead(ref reader, options, PropTransport))
			{
				continue;
			}

			if (propTransportAddress.TryRead(ref reader, options, PropTransportAddress))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Stats
		{
			AdaptiveSelection = propAdaptiveSelection.Value
,
			Attributes = propAttributes.Value
,
			Breakers = propBreakers.Value
,
			Discovery = propDiscovery.Value
,
			Fs = propFs.Value
,
			Host = propHost.Value
,
			Http = propHttp.Value
,
			IndexingPressure = propIndexingPressure.Value
,
			Indices = propIndices.Value
,
			Ingest = propIngest.Value
,
			Ip = propIp.Value
,
			Jvm = propJvm.Value
,
			Name = propName.Value
,
			Os = propOs.Value
,
			Process = propProcess.Value
,
			Roles = propRoles.Value
,
			Script = propScript.Value
,
			ScriptCache = propScriptCache.Value
,
			ThreadPool = propThreadPool.Value
,
			Timestamp = propTimestamp.Value
,
			Transport = propTransport.Value
,
			TransportAddress = propTransportAddress.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Stats value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAdaptiveSelection, value.AdaptiveSelection);
		writer.WriteProperty(options, PropAttributes, value.Attributes);
		writer.WriteProperty(options, PropBreakers, value.Breakers);
		writer.WriteProperty(options, PropDiscovery, value.Discovery);
		writer.WriteProperty(options, PropFs, value.Fs);
		writer.WriteProperty(options, PropHost, value.Host);
		writer.WriteProperty(options, PropHttp, value.Http);
		writer.WriteProperty(options, PropIndexingPressure, value.IndexingPressure);
		writer.WriteProperty(options, PropIndices, value.Indices);
		writer.WriteProperty(options, PropIngest, value.Ingest);
		writer.WriteProperty(options, PropIp, value.Ip, null, typeof(SingleOrManyMarker<IReadOnlyCollection<string>?, string>));
		writer.WriteProperty(options, PropJvm, value.Jvm);
		writer.WriteProperty(options, PropName, value.Name);
		writer.WriteProperty(options, PropOs, value.Os);
		writer.WriteProperty(options, PropProcess, value.Process);
		writer.WriteProperty(options, PropRoles, value.Roles);
		writer.WriteProperty(options, PropScript, value.Script);
		writer.WriteProperty(options, PropScriptCache, value.ScriptCache);
		writer.WriteProperty(options, PropThreadPool, value.ThreadPool);
		writer.WriteProperty(options, PropTimestamp, value.Timestamp);
		writer.WriteProperty(options, PropTransport, value.Transport);
		writer.WriteProperty(options, PropTransportAddress, value.TransportAddress);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(StatsConverter))]
public sealed partial class Stats
{
	/// <summary>
	/// <para>
	/// Statistics about adaptive replica selection.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.AdaptiveSelection>? AdaptiveSelection { get; init; }

	/// <summary>
	/// <para>
	/// Contains a list of attributes for the node.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Field, string>? Attributes { get; init; }

	/// <summary>
	/// <para>
	/// Statistics about the field data circuit breaker.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.Breaker>? Breakers { get; init; }

	/// <summary>
	/// <para>
	/// Contains node discovery statistics for the node.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Discovery? Discovery { get; init; }

	/// <summary>
	/// <para>
	/// File system information, data path, free disk space, read/write stats.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.FileSystem? Fs { get; init; }

	/// <summary>
	/// <para>
	/// Network host for the node, based on the network host setting.
	/// </para>
	/// </summary>
	public string? Host { get; init; }

	/// <summary>
	/// <para>
	/// HTTP connection information.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Http? Http { get; init; }

	/// <summary>
	/// <para>
	/// Contains indexing pressure statistics for the node.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.IndexingPressure? IndexingPressure { get; init; }

	/// <summary>
	/// <para>
	/// Indices stats about size, document count, indexing and deletion times, search times, field cache size, merges and flushes.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexManagement.ShardStats? Indices { get; init; }

	/// <summary>
	/// <para>
	/// Statistics about ingest preprocessing.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Ingest? Ingest { get; init; }

	/// <summary>
	/// <para>
	/// IP address and port for the node.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<string>? Ip { get; init; }

	/// <summary>
	/// <para>
	/// JVM stats, memory pool information, garbage collection, buffer pools, number of loaded/unloaded classes.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Jvm? Jvm { get; init; }

	/// <summary>
	/// <para>
	/// Human-readable identifier for the node.
	/// Based on the node name setting.
	/// </para>
	/// </summary>
	public string? Name { get; init; }

	/// <summary>
	/// <para>
	/// Operating system stats, load average, mem, swap.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.OperatingSystem? Os { get; init; }

	/// <summary>
	/// <para>
	/// Process statistics, memory consumption, cpu usage, open file descriptors.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Process? Process { get; init; }

	/// <summary>
	/// <para>
	/// Roles assigned to the node.
	/// </para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.NodeRole>? Roles { get; init; }

	/// <summary>
	/// <para>
	/// Contains script statistics for the node.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Scripting? Script { get; init; }
	public IReadOnlyDictionary<string, Union<Elastic.Clients.Elasticsearch.Nodes.ScriptCache, IReadOnlyCollection<Elastic.Clients.Elasticsearch.Nodes.ScriptCache>>>? ScriptCache { get; init; }

	/// <summary>
	/// <para>
	/// Statistics about each thread pool, including current size, queue and rejected tasks.
	/// </para>
	/// </summary>
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.ThreadCount>? ThreadPool { get; init; }
	public long? Timestamp { get; init; }

	/// <summary>
	/// <para>
	/// Transport statistics about sent and received bytes in cluster communication.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Nodes.Transport? Transport { get; init; }

	/// <summary>
	/// <para>
	/// Host and port for the transport layer, used for internal communication between nodes in a cluster.
	/// </para>
	/// </summary>
	public string? TransportAddress { get; init; }
}