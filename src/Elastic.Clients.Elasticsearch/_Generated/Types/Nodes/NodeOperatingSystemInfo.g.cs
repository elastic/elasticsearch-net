// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Nodes;

public sealed partial class NodeOperatingSystemInfo
{
	/// <summary>
	/// <para>
	/// The number of processors actually used to calculate thread pool size. This number can be set with the node.processors setting of a node and defaults to the number of processors reported by the OS.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("allocated_processors")]
	public int? AllocatedProcessors { get; init; }

	/// <summary>
	/// <para>
	/// Name of the JVM architecture (ex: amd64, x86)
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("arch")]
	public string Arch { get; init; }

	/// <summary>
	/// <para>
	/// Number of processors available to the Java virtual machine
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("available_processors")]
	public int AvailableProcessors { get; init; }
	[JsonInclude, JsonPropertyName("cpu")]
	public Elastic.Clients.Elasticsearch.Nodes.NodeInfoOSCPU? Cpu { get; init; }
	[JsonInclude, JsonPropertyName("mem")]
	public Elastic.Clients.Elasticsearch.Nodes.NodeInfoMemory? Mem { get; init; }

	/// <summary>
	/// <para>
	/// Name of the operating system (ex: Linux, Windows, Mac OS X)
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("name")]
	public string Name { get; init; }
	[JsonInclude, JsonPropertyName("pretty_name")]
	public string PrettyName { get; init; }

	/// <summary>
	/// <para>
	/// Refresh interval for the OS statistics
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("refresh_interval_in_millis")]
	public long RefreshIntervalInMillis { get; init; }
	[JsonInclude, JsonPropertyName("swap")]
	public Elastic.Clients.Elasticsearch.Nodes.NodeInfoMemory? Swap { get; init; }

	/// <summary>
	/// <para>
	/// Version of the operating system
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("version")]
	public string Version { get; init; }
}