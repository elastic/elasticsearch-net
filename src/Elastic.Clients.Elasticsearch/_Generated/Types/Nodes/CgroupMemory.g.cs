// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Nodes;

internal sealed partial class CgroupMemoryConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Nodes.CgroupMemory>
{
	private static readonly System.Text.Json.JsonEncodedText PropControlGroup = System.Text.Json.JsonEncodedText.Encode("control_group");
	private static readonly System.Text.Json.JsonEncodedText PropLimitInBytes = System.Text.Json.JsonEncodedText.Encode("limit_in_bytes");
	private static readonly System.Text.Json.JsonEncodedText PropUsageInBytes = System.Text.Json.JsonEncodedText.Encode("usage_in_bytes");

	public override Elastic.Clients.Elasticsearch.Nodes.CgroupMemory Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string?> propControlGroup = default;
		LocalJsonValue<string?> propLimitInBytes = default;
		LocalJsonValue<string?> propUsageInBytes = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propControlGroup.TryReadProperty(ref reader, options, PropControlGroup, null))
			{
				continue;
			}

			if (propLimitInBytes.TryReadProperty(ref reader, options, PropLimitInBytes, null))
			{
				continue;
			}

			if (propUsageInBytes.TryReadProperty(ref reader, options, PropUsageInBytes, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Nodes.CgroupMemory(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			ControlGroup = propControlGroup.Value,
			LimitInBytes = propLimitInBytes.Value,
			UsageInBytes = propUsageInBytes.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Nodes.CgroupMemory value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropControlGroup, value.ControlGroup, null, null);
		writer.WriteProperty(options, PropLimitInBytes, value.LimitInBytes, null, null);
		writer.WriteProperty(options, PropUsageInBytes, value.UsageInBytes, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Nodes.CgroupMemoryConverter))]
public sealed partial class CgroupMemory
{
#if NET7_0_OR_GREATER
	public CgroupMemory()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	public CgroupMemory()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal CgroupMemory(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// The <c>memory</c> control group to which the Elasticsearch process belongs.
	/// </para>
	/// </summary>
	public string? ControlGroup { get; set; }

	/// <summary>
	/// <para>
	/// The maximum amount of user memory (including file cache) allowed for all tasks in the same cgroup as the Elasticsearch process.
	/// This value can be too big to store in a <c>long</c>, so is returned as a string so that the value returned can exactly match what the underlying operating system interface returns.
	/// Any value that is too large to parse into a <c>long</c> almost certainly means no limit has been set for the cgroup.
	/// </para>
	/// </summary>
	public string? LimitInBytes { get; set; }

	/// <summary>
	/// <para>
	/// The total current memory usage by processes in the cgroup, in bytes, by all tasks in the same cgroup as the Elasticsearch process.
	/// This value is stored as a string for consistency with <c>limit_in_bytes</c>.
	/// </para>
	/// </summary>
	public string? UsageInBytes { get; set; }
}