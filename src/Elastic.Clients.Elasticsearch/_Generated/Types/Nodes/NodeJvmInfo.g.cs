// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Nodes;

internal sealed partial class NodeJvmInfoConverter : System.Text.Json.Serialization.JsonConverter<NodeJvmInfo>
{
	private static readonly System.Text.Json.JsonEncodedText PropGcCollectors = System.Text.Json.JsonEncodedText.Encode("gc_collectors");
	private static readonly System.Text.Json.JsonEncodedText PropInputArguments = System.Text.Json.JsonEncodedText.Encode("input_arguments");
	private static readonly System.Text.Json.JsonEncodedText PropMem = System.Text.Json.JsonEncodedText.Encode("mem");
	private static readonly System.Text.Json.JsonEncodedText PropMemoryPools = System.Text.Json.JsonEncodedText.Encode("memory_pools");
	private static readonly System.Text.Json.JsonEncodedText PropPid = System.Text.Json.JsonEncodedText.Encode("pid");
	private static readonly System.Text.Json.JsonEncodedText PropStartTimeInMillis = System.Text.Json.JsonEncodedText.Encode("start_time_in_millis");
	private static readonly System.Text.Json.JsonEncodedText PropUsingBundledJdk = System.Text.Json.JsonEncodedText.Encode("using_bundled_jdk");
	private static readonly System.Text.Json.JsonEncodedText PropUsingBundledJdk1 = System.Text.Json.JsonEncodedText.Encode("bundled_jdk");
	private static readonly System.Text.Json.JsonEncodedText PropUsingCompressedOrdinaryObjectPointers = System.Text.Json.JsonEncodedText.Encode("using_compressed_ordinary_object_pointers");
	private static readonly System.Text.Json.JsonEncodedText PropVersion = System.Text.Json.JsonEncodedText.Encode("version");
	private static readonly System.Text.Json.JsonEncodedText PropVmName = System.Text.Json.JsonEncodedText.Encode("vm_name");
	private static readonly System.Text.Json.JsonEncodedText PropVmVendor = System.Text.Json.JsonEncodedText.Encode("vm_vendor");
	private static readonly System.Text.Json.JsonEncodedText PropVmVersion = System.Text.Json.JsonEncodedText.Encode("vm_version");

	public override NodeJvmInfo Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<IReadOnlyCollection<string>> propGcCollectors = default;
		LocalJsonValue<IReadOnlyCollection<string>> propInputArguments = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.NodeInfoJvmMemory> propMem = default;
		LocalJsonValue<IReadOnlyCollection<string>> propMemoryPools = default;
		LocalJsonValue<int> propPid = default;
		LocalJsonValue<long> propStartTimeInMillis = default;
		LocalJsonValue<bool> propUsingBundledJdk = default;
		LocalJsonValue<object?> propUsingCompressedOrdinaryObjectPointers = default;
		LocalJsonValue<string> propVersion = default;
		LocalJsonValue<string> propVmName = default;
		LocalJsonValue<string> propVmVendor = default;
		LocalJsonValue<string> propVmVersion = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propGcCollectors.TryRead(ref reader, options, PropGcCollectors))
			{
				continue;
			}

			if (propInputArguments.TryRead(ref reader, options, PropInputArguments))
			{
				continue;
			}

			if (propMem.TryRead(ref reader, options, PropMem))
			{
				continue;
			}

			if (propMemoryPools.TryRead(ref reader, options, PropMemoryPools))
			{
				continue;
			}

			if (propPid.TryRead(ref reader, options, PropPid))
			{
				continue;
			}

			if (propStartTimeInMillis.TryRead(ref reader, options, PropStartTimeInMillis))
			{
				continue;
			}

			if (propUsingBundledJdk.TryRead(ref reader, options, PropUsingBundledJdk) || propUsingBundledJdk.TryRead(ref reader, options, PropUsingBundledJdk1))
			{
				continue;
			}

			if (propUsingCompressedOrdinaryObjectPointers.TryRead(ref reader, options, PropUsingCompressedOrdinaryObjectPointers))
			{
				continue;
			}

			if (propVersion.TryRead(ref reader, options, PropVersion))
			{
				continue;
			}

			if (propVmName.TryRead(ref reader, options, PropVmName))
			{
				continue;
			}

			if (propVmVendor.TryRead(ref reader, options, PropVmVendor))
			{
				continue;
			}

			if (propVmVersion.TryRead(ref reader, options, PropVmVersion))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new NodeJvmInfo
		{
			GcCollectors = propGcCollectors.Value
,
			InputArguments = propInputArguments.Value
,
			Mem = propMem.Value
,
			MemoryPools = propMemoryPools.Value
,
			Pid = propPid.Value
,
			StartTimeInMillis = propStartTimeInMillis.Value
,
			UsingBundledJdk = propUsingBundledJdk.Value
,
			UsingCompressedOrdinaryObjectPointers = propUsingCompressedOrdinaryObjectPointers.Value
,
			Version = propVersion.Value
,
			VmName = propVmName.Value
,
			VmVendor = propVmVendor.Value
,
			VmVersion = propVmVersion.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, NodeJvmInfo value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropGcCollectors, value.GcCollectors);
		writer.WriteProperty(options, PropInputArguments, value.InputArguments);
		writer.WriteProperty(options, PropMem, value.Mem);
		writer.WriteProperty(options, PropMemoryPools, value.MemoryPools);
		writer.WriteProperty(options, PropPid, value.Pid);
		writer.WriteProperty(options, PropStartTimeInMillis, value.StartTimeInMillis);
		writer.WriteProperty(options, PropUsingBundledJdk, value.UsingBundledJdk);
		writer.WriteProperty(options, PropUsingCompressedOrdinaryObjectPointers, value.UsingCompressedOrdinaryObjectPointers);
		writer.WriteProperty(options, PropVersion, value.Version);
		writer.WriteProperty(options, PropVmName, value.VmName);
		writer.WriteProperty(options, PropVmVendor, value.VmVendor);
		writer.WriteProperty(options, PropVmVersion, value.VmVersion);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(NodeJvmInfoConverter))]
public sealed partial class NodeJvmInfo
{
	public IReadOnlyCollection<string> GcCollectors { get; init; }
	public IReadOnlyCollection<string> InputArguments { get; init; }
	public Elastic.Clients.Elasticsearch.Nodes.NodeInfoJvmMemory Mem { get; init; }
	public IReadOnlyCollection<string> MemoryPools { get; init; }
	public int Pid { get; init; }
	public long StartTimeInMillis { get; init; }
	public bool UsingBundledJdk { get; init; }
	public object? UsingCompressedOrdinaryObjectPointers { get; init; }
	public string Version { get; init; }
	public string VmName { get; init; }
	public string VmVendor { get; init; }
	public string VmVersion { get; init; }
}