// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public partial class OneHotEncodingPreprocessor : IPreprocessorVariant
	{
		[JsonIgnore]
		string IPreprocessorVariant.PreprocessorVariantName => "one_hot_encoding";
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("hot_map")]
		public Dictionary<string, string> HotMap { get; set; }
	}

	public sealed partial class OneHotEncodingPreprocessorDescriptor<TDocument> : SerializableDescriptorBase<OneHotEncodingPreprocessorDescriptor<TDocument>>
	{
		internal OneHotEncodingPreprocessorDescriptor(Action<OneHotEncodingPreprocessorDescriptor<TDocument>> configure) => configure.Invoke(this);
		public OneHotEncodingPreprocessorDescriptor() : base()
		{
		}

		private string FieldValue { get; set; }

		private Dictionary<string, string> HotMapValue { get; set; }

		public OneHotEncodingPreprocessorDescriptor<TDocument> Field(string field)
		{
			FieldValue = field;
			return Self;
		}

		public OneHotEncodingPreprocessorDescriptor<TDocument> HotMap(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
		{
			HotMapValue = selector?.Invoke(new FluentDictionary<string, string>());
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			writer.WriteStringValue(FieldValue);
			writer.WritePropertyName("hot_map");
			JsonSerializer.Serialize(writer, HotMapValue, options);
			writer.WriteEndObject();
		}
	}

	public sealed partial class OneHotEncodingPreprocessorDescriptor : SerializableDescriptorBase<OneHotEncodingPreprocessorDescriptor>
	{
		internal OneHotEncodingPreprocessorDescriptor(Action<OneHotEncodingPreprocessorDescriptor> configure) => configure.Invoke(this);
		public OneHotEncodingPreprocessorDescriptor() : base()
		{
		}

		private string FieldValue { get; set; }

		private Dictionary<string, string> HotMapValue { get; set; }

		public OneHotEncodingPreprocessorDescriptor Field(string field)
		{
			FieldValue = field;
			return Self;
		}

		public OneHotEncodingPreprocessorDescriptor HotMap(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
		{
			HotMapValue = selector?.Invoke(new FluentDictionary<string, string>());
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("field");
			writer.WriteStringValue(FieldValue);
			writer.WritePropertyName("hot_map");
			JsonSerializer.Serialize(writer, HotMapValue, options);
			writer.WriteEndObject();
		}
	}
}