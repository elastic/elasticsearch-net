// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public partial class PerPartitionCategorization
	{
		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("stop_on_warn")]
		public bool? StopOnWarn { get; set; }
	}

	public sealed partial class PerPartitionCategorizationDescriptor : SerializableDescriptorBase<PerPartitionCategorizationDescriptor>
	{
		internal PerPartitionCategorizationDescriptor(Action<PerPartitionCategorizationDescriptor> configure) => configure.Invoke(this);
		public PerPartitionCategorizationDescriptor() : base()
		{
		}

		private bool? EnabledValue { get; set; }

		private bool? StopOnWarnValue { get; set; }

		public PerPartitionCategorizationDescriptor Enabled(bool? enabled = true)
		{
			EnabledValue = enabled;
			return Self;
		}

		public PerPartitionCategorizationDescriptor StopOnWarn(bool? stopOnWarn = true)
		{
			StopOnWarnValue = stopOnWarn;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (EnabledValue.HasValue)
			{
				writer.WritePropertyName("enabled");
				writer.WriteBooleanValue(EnabledValue.Value);
			}

			if (StopOnWarnValue.HasValue)
			{
				writer.WritePropertyName("stop_on_warn");
				writer.WriteBooleanValue(StopOnWarnValue.Value);
			}

			writer.WriteEndObject();
		}
	}
}