// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public interface IInferenceConfigUpdateContainerVariant
	{
		string InferenceConfigUpdateContainerVariantName { get; }
	}

	[JsonConverter(typeof(InferenceConfigUpdateContainerConverter))]
	public partial class InferenceConfigUpdateContainer : IContainer
	{
		public InferenceConfigUpdateContainer(IInferenceConfigUpdateContainerVariant variant) => Variant = variant ?? throw new ArgumentNullException(nameof(variant));
		internal IInferenceConfigUpdateContainerVariant Variant { get; }
	}

	internal sealed class InferenceConfigUpdateContainerConverter : JsonConverter<InferenceConfigUpdateContainer>
	{
		public override InferenceConfigUpdateContainer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var readerCopy = reader;
			readerCopy.Read();
			if (readerCopy.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException();
			}

			var propertyName = readerCopy.GetString();
			if (propertyName == "classification")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.ClassificationInferenceOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "fill_mask")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.FillMaskInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "ner")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.NerInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "pass_through")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.PassThroughInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "question_answering")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.QuestionAnsweringInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "regression")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.RegressionInferenceOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "text_classification")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.TextClassificationInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "text_embedding")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.TextEmbeddingInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			if (propertyName == "zero_shot_classification")
			{
				var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Ml.ZeroShotClassificationInferenceUpdateOptions?>(ref reader, options);
				return new InferenceConfigUpdateContainer(variant);
			}

			throw new JsonException();
		}

		public override void Write(Utf8JsonWriter writer, InferenceConfigUpdateContainer value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName(value.Variant.InferenceConfigUpdateContainerVariantName);
			switch (value.Variant)
			{
				case Elastic.Clients.Elasticsearch.Ml.ClassificationInferenceOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.FillMaskInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.NerInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.PassThroughInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.QuestionAnsweringInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.RegressionInferenceOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.TextClassificationInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.TextEmbeddingInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
				case Elastic.Clients.Elasticsearch.Ml.ZeroShotClassificationInferenceUpdateOptions variant:
					JsonSerializer.Serialize(writer, variant, options);
					break;
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class InferenceConfigUpdateContainerDescriptor<TDocument> : SerializableDescriptorBase<InferenceConfigUpdateContainerDescriptor<TDocument>>
	{
		internal InferenceConfigUpdateContainerDescriptor(Action<InferenceConfigUpdateContainerDescriptor<TDocument>> configure) => configure.Invoke(this);
		public InferenceConfigUpdateContainerDescriptor() : base()
		{
		}

		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal InferenceConfigUpdateContainer Container { get; private set; }

		internal Descriptor Descriptor { get; private set; }

		internal Type DescriptorType { get; private set; }

		private void Set<T>(Action<T> descriptorAction, string variantName)
			where T : Descriptor, new()
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainedVariantName = variantName;
			ContainsVariant = true;
			DescriptorType = typeof(T);
			var descriptor = new T();
			descriptorAction?.Invoke(descriptor);
			Descriptor = descriptor;
		}

		private void Set(IInferenceConfigUpdateContainerVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new InferenceConfigUpdateContainer(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			JsonSerializer.Serialize(writer, Descriptor, DescriptorType, options);
			writer.WriteEndObject();
		}

		public void Classification(ClassificationInferenceOptions variant) => Set(variant, "classification");
		public void Classification(Action<ClassificationInferenceOptionsDescriptor> configure) => Set(configure, "classification");
		public void FillMask(FillMaskInferenceUpdateOptions variant) => Set(variant, "fill_mask");
		public void FillMask(Action<FillMaskInferenceUpdateOptionsDescriptor> configure) => Set(configure, "fill_mask");
		public void Ner(NerInferenceUpdateOptions variant) => Set(variant, "ner");
		public void Ner(Action<NerInferenceUpdateOptionsDescriptor> configure) => Set(configure, "ner");
		public void PassThrough(PassThroughInferenceUpdateOptions variant) => Set(variant, "pass_through");
		public void PassThrough(Action<PassThroughInferenceUpdateOptionsDescriptor> configure) => Set(configure, "pass_through");
		public void QuestionAnswering(QuestionAnsweringInferenceUpdateOptions variant) => Set(variant, "question_answering");
		public void QuestionAnswering(Action<QuestionAnsweringInferenceUpdateOptionsDescriptor> configure) => Set(configure, "question_answering");
		public void Regression(RegressionInferenceOptions variant) => Set(variant, "regression");
		public void Regression(Action<RegressionInferenceOptionsDescriptor<TDocument>> configure) => Set(configure, "regression");
		public void TextClassification(TextClassificationInferenceUpdateOptions variant) => Set(variant, "text_classification");
		public void TextClassification(Action<TextClassificationInferenceUpdateOptionsDescriptor> configure) => Set(configure, "text_classification");
		public void TextEmbedding(TextEmbeddingInferenceUpdateOptions variant) => Set(variant, "text_embedding");
		public void TextEmbedding(Action<TextEmbeddingInferenceUpdateOptionsDescriptor> configure) => Set(configure, "text_embedding");
		public void ZeroShotClassification(ZeroShotClassificationInferenceUpdateOptions variant) => Set(variant, "zero_shot_classification");
		public void ZeroShotClassification(Action<ZeroShotClassificationInferenceUpdateOptionsDescriptor> configure) => Set(configure, "zero_shot_classification");
	}

	public sealed partial class InferenceConfigUpdateContainerDescriptor : SerializableDescriptorBase<InferenceConfigUpdateContainerDescriptor>
	{
		internal InferenceConfigUpdateContainerDescriptor(Action<InferenceConfigUpdateContainerDescriptor> configure) => configure.Invoke(this);
		public InferenceConfigUpdateContainerDescriptor() : base()
		{
		}

		internal bool ContainsVariant { get; private set; }

		internal string ContainedVariantName { get; private set; }

		internal InferenceConfigUpdateContainer Container { get; private set; }

		internal Descriptor Descriptor { get; private set; }

		internal Type DescriptorType { get; private set; }

		private void Set<T>(Action<T> descriptorAction, string variantName)
			where T : Descriptor, new()
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			ContainedVariantName = variantName;
			ContainsVariant = true;
			DescriptorType = typeof(T);
			var descriptor = new T();
			descriptorAction?.Invoke(descriptor);
			Descriptor = descriptor;
		}

		private void Set(IInferenceConfigUpdateContainerVariant variant, string variantName)
		{
			if (ContainsVariant)
				throw new Exception("TODO");
			Container = new InferenceConfigUpdateContainer(variant);
			ContainedVariantName = variantName;
			ContainsVariant = true;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			if (!ContainsVariant)
			{
				writer.WriteNullValue();
				return;
			}

			if (Container is not null)
			{
				JsonSerializer.Serialize(writer, Container, options);
				return;
			}

			writer.WriteStartObject();
			writer.WritePropertyName(ContainedVariantName);
			JsonSerializer.Serialize(writer, Descriptor, DescriptorType, options);
			writer.WriteEndObject();
		}

		public void Classification(ClassificationInferenceOptions variant) => Set(variant, "classification");
		public void Classification(Action<ClassificationInferenceOptionsDescriptor> configure) => Set(configure, "classification");
		public void FillMask(FillMaskInferenceUpdateOptions variant) => Set(variant, "fill_mask");
		public void FillMask(Action<FillMaskInferenceUpdateOptionsDescriptor> configure) => Set(configure, "fill_mask");
		public void Ner(NerInferenceUpdateOptions variant) => Set(variant, "ner");
		public void Ner(Action<NerInferenceUpdateOptionsDescriptor> configure) => Set(configure, "ner");
		public void PassThrough(PassThroughInferenceUpdateOptions variant) => Set(variant, "pass_through");
		public void PassThrough(Action<PassThroughInferenceUpdateOptionsDescriptor> configure) => Set(configure, "pass_through");
		public void QuestionAnswering(QuestionAnsweringInferenceUpdateOptions variant) => Set(variant, "question_answering");
		public void QuestionAnswering(Action<QuestionAnsweringInferenceUpdateOptionsDescriptor> configure) => Set(configure, "question_answering");
		public void Regression(RegressionInferenceOptions variant) => Set(variant, "regression");
		public void Regression(Action<RegressionInferenceOptionsDescriptor> configure) => Set(configure, "regression");
		public void Regression<TDocument>(Action<RegressionInferenceOptionsDescriptor<TDocument>> configure) => Set(configure, "regression");
		public void TextClassification(TextClassificationInferenceUpdateOptions variant) => Set(variant, "text_classification");
		public void TextClassification(Action<TextClassificationInferenceUpdateOptionsDescriptor> configure) => Set(configure, "text_classification");
		public void TextEmbedding(TextEmbeddingInferenceUpdateOptions variant) => Set(variant, "text_embedding");
		public void TextEmbedding(Action<TextEmbeddingInferenceUpdateOptionsDescriptor> configure) => Set(configure, "text_embedding");
		public void ZeroShotClassification(ZeroShotClassificationInferenceUpdateOptions variant) => Set(variant, "zero_shot_classification");
		public void ZeroShotClassification(Action<ZeroShotClassificationInferenceUpdateOptionsDescriptor> configure) => Set(configure, "zero_shot_classification");
	}
}