// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame
{
	public partial class ConfusionMatrixItem
	{
		[JsonPropertyName("actual_class")]
		public Elastic.Clients.Elasticsearch.Name ActualClass
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("actual_class_doc_count")]
		public int ActualClassDocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("other_predicted_class_doc_count")]
		public int OtherPredictedClassDocCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("predicted_classes")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.ConfusionMatrixPrediction> PredictedClasses
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConfusionMatrixPrediction
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("predicted_class")]
		public Elastic.Clients.Elasticsearch.Name PredictedClass
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConfusionMatrixThreshold
	{
		[JsonPropertyName("fn")]
		public int false_negative
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fp")]
		public int false_positive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tn")]
		public int true_negative
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tp")]
		public int true_positive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeClassificationSummary
	{
		[JsonPropertyName("accuracy")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeClassificationSummaryAccuracy? Accuracy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("auc_roc")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationSummaryAucRoc? AucRoc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("multiclass_confusion_matrix")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeClassificationSummaryMulticlassConfusionMatrix? MulticlassConfusionMatrix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeClassificationSummaryPrecision? Precision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("recall")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeClassificationSummaryRecall? Recall
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeClassificationSummaryAccuracy
	{
		[JsonPropertyName("classes")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationClass> Classes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("overall_accuracy")]
		public double OverallAccuracy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeClassificationSummaryMulticlassConfusionMatrix
	{
		[JsonPropertyName("confusion_matrix")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.ConfusionMatrixItem> ConfusionMatrix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("other_actual_class_count")]
		public int OtherActualClassCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeClassificationSummaryPrecision
	{
		[JsonPropertyName("avg_precision")]
		public double AvgPrecision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("classes")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationClass> Classes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeClassificationSummaryRecall
	{
		[JsonPropertyName("avg_recall")]
		public double AvgRecall
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("classes")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationClass> Classes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeEvaluationClass : Ml.EvaluateDataFrame.DataframeEvaluationValue
	{
		[JsonPropertyName("class_name")]
		public Elastic.Clients.Elasticsearch.Name ClassName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeEvaluationSummaryAucRoc : Ml.EvaluateDataFrame.DataframeEvaluationValue
	{
		[JsonPropertyName("curve")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationSummaryAucRocCurveItem>? Curve
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeEvaluationSummaryAucRocCurveItem
	{
		[JsonPropertyName("fpr")]
		public double Fpr
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("threshold")]
		public double Threshold
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tpr")]
		public double Tpr
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeEvaluationValue
	{
		[JsonPropertyName("value")]
		public double Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeOutlierDetectionSummary
	{
		[JsonPropertyName("auc_roc")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationSummaryAucRoc? AucRoc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("confusion_matrix")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.ConfusionMatrixThreshold>? ConfusionMatrix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("precision")]
		public Dictionary<string, double>? Precision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("recall")]
		public Dictionary<string, double>? Recall
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DataframeRegressionSummary
	{
		[JsonPropertyName("huber")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationValue? Huber
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mse")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationValue? Mse
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("msle")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationValue? Msle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("r_squared")]
		public Elastic.Clients.Elasticsearch.Ml.EvaluateDataFrame.DataframeEvaluationValue? RSquared
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}