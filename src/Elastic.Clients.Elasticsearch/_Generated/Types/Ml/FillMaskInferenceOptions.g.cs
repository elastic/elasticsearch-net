// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public partial class FillMaskInferenceOptions : IInferenceConfigCreateContainerVariant
	{
		[JsonIgnore]
		string IInferenceConfigCreateContainerVariant.InferenceConfigCreateContainerVariantName => "fill_mask";
		[JsonInclude]
		[JsonPropertyName("num_top_classes")]
		public int? NumTopClasses { get; set; }

		[JsonInclude]
		[JsonPropertyName("results_field")]
		public string? ResultsField { get; set; }

		[JsonInclude]
		[JsonPropertyName("tokenization")]
		public Elastic.Clients.Elasticsearch.Ml.TokenizationConfigContainer? Tokenization { get; set; }
	}

	public sealed partial class FillMaskInferenceOptionsDescriptor : SerializableDescriptorBase<FillMaskInferenceOptionsDescriptor>
	{
		internal FillMaskInferenceOptionsDescriptor(Action<FillMaskInferenceOptionsDescriptor> configure) => configure.Invoke(this);
		public FillMaskInferenceOptionsDescriptor() : base()
		{
		}

		private int? NumTopClassesValue { get; set; }

		private string? ResultsFieldValue { get; set; }

		private Elastic.Clients.Elasticsearch.Ml.TokenizationConfigContainer? TokenizationValue { get; set; }

		private TokenizationConfigContainerDescriptor TokenizationDescriptor { get; set; }

		private Action<TokenizationConfigContainerDescriptor> TokenizationDescriptorAction { get; set; }

		public FillMaskInferenceOptionsDescriptor NumTopClasses(int? numTopClasses)
		{
			NumTopClassesValue = numTopClasses;
			return Self;
		}

		public FillMaskInferenceOptionsDescriptor ResultsField(string? resultsField)
		{
			ResultsFieldValue = resultsField;
			return Self;
		}

		public FillMaskInferenceOptionsDescriptor Tokenization(Elastic.Clients.Elasticsearch.Ml.TokenizationConfigContainer? tokenization)
		{
			TokenizationDescriptor = null;
			TokenizationDescriptorAction = null;
			TokenizationValue = tokenization;
			return Self;
		}

		public FillMaskInferenceOptionsDescriptor Tokenization(TokenizationConfigContainerDescriptor descriptor)
		{
			TokenizationValue = null;
			TokenizationDescriptorAction = null;
			TokenizationDescriptor = descriptor;
			return Self;
		}

		public FillMaskInferenceOptionsDescriptor Tokenization(Action<TokenizationConfigContainerDescriptor> configure)
		{
			TokenizationValue = null;
			TokenizationDescriptor = null;
			TokenizationDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (NumTopClassesValue.HasValue)
			{
				writer.WritePropertyName("num_top_classes");
				writer.WriteNumberValue(NumTopClassesValue.Value);
			}

			if (!string.IsNullOrEmpty(ResultsFieldValue))
			{
				writer.WritePropertyName("results_field");
				writer.WriteStringValue(ResultsFieldValue);
			}

			if (TokenizationDescriptor is not null)
			{
				writer.WritePropertyName("tokenization");
				JsonSerializer.Serialize(writer, TokenizationDescriptor, options);
			}
			else if (TokenizationDescriptorAction is not null)
			{
				writer.WritePropertyName("tokenization");
				JsonSerializer.Serialize(writer, new TokenizationConfigContainerDescriptor(TokenizationDescriptorAction), options);
			}
			else if (TokenizationValue is not null)
			{
				writer.WritePropertyName("tokenization");
				JsonSerializer.Serialize(writer, TokenizationValue, options);
			}

			writer.WriteEndObject();
		}
	}
}