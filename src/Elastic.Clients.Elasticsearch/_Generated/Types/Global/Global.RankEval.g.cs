// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Global.RankEval
{
	public partial class DocumentRating
	{
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; set; }

		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonPropertyName("rating")]
		public int Rating { get; set; }
	}

	public partial class RankEvalHit
	{
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id Id
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public double Score
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public Elastic.Clients.Elasticsearch.DocType? Type
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RankEvalHitItem
	{
		[JsonPropertyName("hit")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalHit Hit
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rating")]
		public double? Rating
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RankEvalMetric
	{
		[JsonPropertyName("dcg")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalMetricDiscountedCumulativeGain? Dcg { get; set; }

		[JsonPropertyName("expected_reciprocal_rank")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalMetricExpectedReciprocalRank? ExpectedReciprocalRank { get; set; }

		[JsonPropertyName("mean_reciprocal_rank")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalMetricMeanReciprocalRank? MeanReciprocalRank { get; set; }

		[JsonPropertyName("precision")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalMetricPrecision? Precision { get; set; }

		[JsonPropertyName("recall")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalMetricRecall? Recall { get; set; }
	}

	public partial class RankEvalMetricBase
	{
		[JsonPropertyName("k")]
		public int? k { get; set; }
	}

	public partial class RankEvalMetricDetail
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalHitItem> Hits
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("metric_details")]
		public Dictionary<string, Dictionary<string, object>> MetricDetails
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("metric_score")]
		public double MetricScore
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unrated_docs")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Global.RankEval.UnratedDocument> UnratedDocs
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RankEvalMetricDiscountedCumulativeGain : Global.RankEval.RankEvalMetricBase
	{
		[JsonPropertyName("normalize")]
		public bool? Normalize { get; set; }
	}

	public partial class RankEvalMetricExpectedReciprocalRank : Global.RankEval.RankEvalMetricBase
	{
		[JsonPropertyName("maximum_relevance")]
		public int MaximumRelevance { get; set; }
	}

	public partial class RankEvalMetricMeanReciprocalRank : Global.RankEval.RankEvalMetricRatingTreshold
	{
	}

	public partial class RankEvalMetricPrecision : Global.RankEval.RankEvalMetricRatingTreshold
	{
		[JsonPropertyName("ignore_unlabeled")]
		public bool? IgnoreUnlabeled { get; set; }
	}

	public partial class RankEvalMetricRatingTreshold : Global.RankEval.RankEvalMetricBase
	{
		[JsonPropertyName("relevant_rating_threshold")]
		public int? RelevantRatingThreshold { get; set; }
	}

	public partial class RankEvalMetricRecall : Global.RankEval.RankEvalMetricRatingTreshold
	{
	}

	public partial class RankEvalQuery
	{
		[JsonPropertyName("query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer Query { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	public partial class RankEvalRequestItem
	{
		[JsonPropertyName("id")]
		public Elastic.Clients.Elasticsearch.Id Id { get; set; }

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params { get; set; }

		[JsonPropertyName("ratings")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Global.RankEval.DocumentRating> Ratings { get; set; }

		[JsonPropertyName("request")]
		public Elastic.Clients.Elasticsearch.Global.RankEval.RankEvalQuery? Request { get; set; }

		[JsonPropertyName("template_id")]
		public Elastic.Clients.Elasticsearch.Id? TemplateId { get; set; }
	}

	public partial class UnratedDocument
	{
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id Id
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName Index
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}
}