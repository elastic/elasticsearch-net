// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Cluster;

internal sealed partial class SnapshotCurrentCountsConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.Cluster.SnapshotCurrentCounts>
{
	private static readonly System.Text.Json.JsonEncodedText PropCleanups = System.Text.Json.JsonEncodedText.Encode("cleanups");
	private static readonly System.Text.Json.JsonEncodedText PropConcurrentOperations = System.Text.Json.JsonEncodedText.Encode("concurrent_operations");
	private static readonly System.Text.Json.JsonEncodedText PropShardSnapshots = System.Text.Json.JsonEncodedText.Encode("shard_snapshots");
	private static readonly System.Text.Json.JsonEncodedText PropSnapshotDeletions = System.Text.Json.JsonEncodedText.Encode("snapshot_deletions");
	private static readonly System.Text.Json.JsonEncodedText PropSnapshots = System.Text.Json.JsonEncodedText.Encode("snapshots");

	public override Elastic.Clients.Elasticsearch.Cluster.SnapshotCurrentCounts Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<int> propCleanups = default;
		LocalJsonValue<int> propConcurrentOperations = default;
		LocalJsonValue<int> propShardSnapshots = default;
		LocalJsonValue<int> propSnapshotDeletions = default;
		LocalJsonValue<int> propSnapshots = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propCleanups.TryReadProperty(ref reader, options, PropCleanups, null))
			{
				continue;
			}

			if (propConcurrentOperations.TryReadProperty(ref reader, options, PropConcurrentOperations, null))
			{
				continue;
			}

			if (propShardSnapshots.TryReadProperty(ref reader, options, PropShardSnapshots, null))
			{
				continue;
			}

			if (propSnapshotDeletions.TryReadProperty(ref reader, options, PropSnapshotDeletions, null))
			{
				continue;
			}

			if (propSnapshots.TryReadProperty(ref reader, options, PropSnapshots, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.Cluster.SnapshotCurrentCounts(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			Cleanups = propCleanups.Value,
			ConcurrentOperations = propConcurrentOperations.Value,
			ShardSnapshots = propShardSnapshots.Value,
			SnapshotDeletions = propSnapshotDeletions.Value,
			Snapshots = propSnapshots.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.Cluster.SnapshotCurrentCounts value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropCleanups, value.Cleanups, null, null);
		writer.WriteProperty(options, PropConcurrentOperations, value.ConcurrentOperations, null, null);
		writer.WriteProperty(options, PropShardSnapshots, value.ShardSnapshots, null, null);
		writer.WriteProperty(options, PropSnapshotDeletions, value.SnapshotDeletions, null, null);
		writer.WriteProperty(options, PropSnapshots, value.Snapshots, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.Cluster.SnapshotCurrentCountsConverter))]
public sealed partial class SnapshotCurrentCounts
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public SnapshotCurrentCounts(int cleanups, int concurrentOperations, int shardSnapshots, int snapshotDeletions, int snapshots)
	{
		Cleanups = cleanups;
		ConcurrentOperations = concurrentOperations;
		ShardSnapshots = shardSnapshots;
		SnapshotDeletions = snapshotDeletions;
		Snapshots = snapshots;
	}
#if NET7_0_OR_GREATER
	public SnapshotCurrentCounts()
	{
	}
#endif
#if !NET7_0_OR_GREATER
	[System.Obsolete("The type contains required properties that must be initialized. Please use an alternative constructor to ensure all required values are properly set.")]
	public SnapshotCurrentCounts()
	{
	}
#endif
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal SnapshotCurrentCounts(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// Cleanups in progress, not counted in concurrent_operations as they are not concurrent
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int Cleanups { get; set; }

	/// <summary>
	/// <para>
	/// Sum of snapshots and snapshot_deletions
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int ConcurrentOperations { get; set; }

	/// <summary>
	/// <para>
	/// Incomplete shard snapshots
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int ShardSnapshots { get; set; }

	/// <summary>
	/// <para>
	/// Snapshots deletions in progress
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int SnapshotDeletions { get; set; }

	/// <summary>
	/// <para>
	/// Snapshots currently in progress
	/// </para>
	/// </summary>
	public
#if NET7_0_OR_GREATER
	required
#endif
	int Snapshots { get; set; }
}