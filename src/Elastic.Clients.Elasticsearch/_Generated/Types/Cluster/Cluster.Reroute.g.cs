// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster.Reroute
{
	public partial class Command
	{
		[JsonInclude]
		[JsonPropertyName("cancel")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? Cancel { get; set; }

		[JsonInclude]
		[JsonPropertyName("move")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? Move { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_replica")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? AllocateReplica { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_stale_primary")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_empty_primary")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }
	}

	[JsonConverter(typeof(CommandDescriptorConverter))]
	public partial class CommandDescriptor : DescriptorBase<CommandDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? _cancel;
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? _move;
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? _allocateReplica;
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? _allocateStalePrimary;
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? _allocateEmptyPrimary;
		public CommandDescriptor Cancel(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? cancel) => Assign(cancel, (a, v) => a._cancel = v);
		public CommandDescriptor Move(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? move) => Assign(move, (a, v) => a._move = v);
		public CommandDescriptor AllocateReplica(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? allocateReplica) => Assign(allocateReplica, (a, v) => a._allocateReplica = v);
		public CommandDescriptor AllocateStalePrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? allocateStalePrimary) => Assign(allocateStalePrimary, (a, v) => a._allocateStalePrimary = v);
		public CommandDescriptor AllocateEmptyPrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? allocateEmptyPrimary) => Assign(allocateEmptyPrimary, (a, v) => a._allocateEmptyPrimary = v);
	}

	internal sealed class CommandDescriptorConverter : JsonConverter<CommandDescriptor>
	{
		public override CommandDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._cancel is not null)
			{
				writer.WritePropertyName("cancel");
				JsonSerializer.Serialize(writer, value._cancel, options);
			}

			if (value._move is not null)
			{
				writer.WritePropertyName("move");
				JsonSerializer.Serialize(writer, value._move, options);
			}

			if (value._allocateReplica is not null)
			{
				writer.WritePropertyName("allocate_replica");
				JsonSerializer.Serialize(writer, value._allocateReplica, options);
			}

			if (value._allocateStalePrimary is not null)
			{
				writer.WritePropertyName("allocate_stale_primary");
				JsonSerializer.Serialize(writer, value._allocateStalePrimary, options);
			}

			if (value._allocateEmptyPrimary is not null)
			{
				writer.WritePropertyName("allocate_empty_primary");
				JsonSerializer.Serialize(writer, value._allocateEmptyPrimary, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class CommandAllocatePrimaryAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("accept_data_loss")]
		public bool AcceptDataLoss { get; set; }
	}

	[JsonConverter(typeof(CommandAllocatePrimaryActionDescriptorConverter))]
	public partial class CommandAllocatePrimaryActionDescriptor : DescriptorBase<CommandAllocatePrimaryActionDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.IndexName _index;
		internal int _shard;
		internal string _node;
		internal bool _acceptDataLoss;
		public CommandAllocatePrimaryActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a._index = v);
		public CommandAllocatePrimaryActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a._shard = v);
		public CommandAllocatePrimaryActionDescriptor Node(string node) => Assign(node, (a, v) => a._node = v);
		public CommandAllocatePrimaryActionDescriptor AcceptDataLoss(bool acceptDataLoss = true) => Assign(acceptDataLoss, (a, v) => a._acceptDataLoss = v);
	}

	internal sealed class CommandAllocatePrimaryActionDescriptorConverter : JsonConverter<CommandAllocatePrimaryActionDescriptor>
	{
		public override CommandAllocatePrimaryActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandAllocatePrimaryActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value._index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value._shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value._node);
			writer.WritePropertyName("accept_data_loss");
			writer.WriteBooleanValue(value._acceptDataLoss);
			writer.WriteEndObject();
		}
	}

	public partial class CommandAllocateReplicaAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }
	}

	[JsonConverter(typeof(CommandAllocateReplicaActionDescriptorConverter))]
	public partial class CommandAllocateReplicaActionDescriptor : DescriptorBase<CommandAllocateReplicaActionDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.IndexName _index;
		internal int _shard;
		internal string _node;
		public CommandAllocateReplicaActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a._index = v);
		public CommandAllocateReplicaActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a._shard = v);
		public CommandAllocateReplicaActionDescriptor Node(string node) => Assign(node, (a, v) => a._node = v);
	}

	internal sealed class CommandAllocateReplicaActionDescriptorConverter : JsonConverter<CommandAllocateReplicaActionDescriptor>
	{
		public override CommandAllocateReplicaActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandAllocateReplicaActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value._index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value._shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value._node);
			writer.WriteEndObject();
		}
	}

	public partial class CommandCancelAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool? AllowPrimary { get; set; }
	}

	[JsonConverter(typeof(CommandCancelActionDescriptorConverter))]
	public partial class CommandCancelActionDescriptor : DescriptorBase<CommandCancelActionDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.IndexName _index;
		internal int _shard;
		internal string _node;
		internal bool? _allowPrimary;
		public CommandCancelActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a._index = v);
		public CommandCancelActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a._shard = v);
		public CommandCancelActionDescriptor Node(string node) => Assign(node, (a, v) => a._node = v);
		public CommandCancelActionDescriptor AllowPrimary(bool? allowPrimary = true) => Assign(allowPrimary, (a, v) => a._allowPrimary = v);
	}

	internal sealed class CommandCancelActionDescriptorConverter : JsonConverter<CommandCancelActionDescriptor>
	{
		public override CommandCancelActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandCancelActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value._index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value._shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value._node);
			if (value._allowPrimary.HasValue)
			{
				writer.WritePropertyName("allow_primary");
				writer.WriteBooleanValue(value._allowPrimary.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class CommandMoveAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	[JsonConverter(typeof(CommandMoveActionDescriptorConverter))]
	public partial class CommandMoveActionDescriptor : DescriptorBase<CommandMoveActionDescriptor>
	{
		internal Elastic.Clients.Elasticsearch.IndexName _index;
		internal int _shard;
		internal string _fromNode;
		internal string _toNode;
		public CommandMoveActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a._index = v);
		public CommandMoveActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a._shard = v);
		public CommandMoveActionDescriptor FromNode(string fromNode) => Assign(fromNode, (a, v) => a._fromNode = v);
		public CommandMoveActionDescriptor ToNode(string toNode) => Assign(toNode, (a, v) => a._toNode = v);
	}

	internal sealed class CommandMoveActionDescriptorConverter : JsonConverter<CommandMoveActionDescriptor>
	{
		public override CommandMoveActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandMoveActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value._index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value._shard);
			writer.WritePropertyName("from_node");
			writer.WriteStringValue(value._fromNode);
			writer.WritePropertyName("to_node");
			writer.WriteStringValue(value._toNode);
			writer.WriteEndObject();
		}
	}

	public partial class RerouteDecision
	{
		[JsonInclude]
		[JsonPropertyName("decider")]
		public string Decider { get; init; }

		[JsonInclude]
		[JsonPropertyName("decision")]
		public string Decision { get; init; }

		[JsonInclude]
		[JsonPropertyName("explanation")]
		public string Explanation { get; init; }
	}

	public partial class RerouteExplanation
	{
		[JsonInclude]
		[JsonPropertyName("command")]
		public string Command { get; init; }

		[JsonInclude]
		[JsonPropertyName("decisions")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteDecision> Decisions { get; init; }

		[JsonInclude]
		[JsonPropertyName("parameters")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteParameters Parameters { get; init; }
	}

	public partial class RerouteParameters
	{
		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string? FromNode { get; init; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string? ToNode { get; init; }
	}
}