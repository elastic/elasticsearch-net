// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster.Reroute
{
	[InterfaceConverterAttribute(typeof(CommandDescriptorConverter<Command>))]
	public partial interface ICommand
	{
		Cluster.Reroute.ICommandCancelAction? Cancel { get; set; }

		Cluster.Reroute.ICommandMoveAction? Move { get; set; }

		Cluster.Reroute.ICommandAllocateReplicaAction? AllocateReplica { get; set; }

		Cluster.Reroute.ICommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		Cluster.Reroute.ICommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }
	}

	public partial class Command : Cluster.Reroute.ICommand
	{
		[JsonInclude]
		[JsonPropertyName("cancel")]
		public Cluster.Reroute.ICommandCancelAction? Cancel { get; set; }

		[JsonInclude]
		[JsonPropertyName("move")]
		public Cluster.Reroute.ICommandMoveAction? Move { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_replica")]
		public Cluster.Reroute.ICommandAllocateReplicaAction? AllocateReplica { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_stale_primary")]
		public Cluster.Reroute.ICommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_empty_primary")]
		public Cluster.Reroute.ICommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }
	}

	public partial class CommandDescriptor : DescriptorBase<CommandDescriptor, ICommand>, ICommand
	{
		Cluster.Reroute.ICommandCancelAction? ICommand.Cancel { get; set; }

		Cluster.Reroute.ICommandMoveAction? ICommand.Move { get; set; }

		Cluster.Reroute.ICommandAllocateReplicaAction? ICommand.AllocateReplica { get; set; }

		Cluster.Reroute.ICommandAllocatePrimaryAction? ICommand.AllocateStalePrimary { get; set; }

		Cluster.Reroute.ICommandAllocatePrimaryAction? ICommand.AllocateEmptyPrimary { get; set; }
	}

	internal sealed class CommandDescriptorConverter<TReadAs> : JsonConverter<ICommand> where TReadAs : class, ICommand
	{
		public override ICommand Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ICommand value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.Cancel is not null)
			{
				writer.WritePropertyName("cancel");
				JsonSerializer.Serialize(writer, value.Cancel, options);
			}

			if (value.Move is not null)
			{
				writer.WritePropertyName("move");
				JsonSerializer.Serialize(writer, value.Move, options);
			}

			if (value.AllocateReplica is not null)
			{
				writer.WritePropertyName("allocate_replica");
				JsonSerializer.Serialize(writer, value.AllocateReplica, options);
			}

			if (value.AllocateStalePrimary is not null)
			{
				writer.WritePropertyName("allocate_stale_primary");
				JsonSerializer.Serialize(writer, value.AllocateStalePrimary, options);
			}

			if (value.AllocateEmptyPrimary is not null)
			{
				writer.WritePropertyName("allocate_empty_primary");
				JsonSerializer.Serialize(writer, value.AllocateEmptyPrimary, options);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(CommandAllocatePrimaryActionDescriptorConverter<CommandAllocatePrimaryAction>))]
	public partial interface ICommandAllocatePrimaryAction
	{
		Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		int Shard { get; set; }

		string Node { get; set; }

		bool AcceptDataLoss { get; set; }
	}

	public partial class CommandAllocatePrimaryAction : Cluster.Reroute.ICommandAllocatePrimaryAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("accept_data_loss")]
		public bool AcceptDataLoss { get; set; }
	}

	public partial class CommandAllocatePrimaryActionDescriptor : DescriptorBase<CommandAllocatePrimaryActionDescriptor, ICommandAllocatePrimaryAction>, ICommandAllocatePrimaryAction
	{
		Elastic.Clients.Elasticsearch.IndexName ICommandAllocatePrimaryAction.Index { get; set; }

		int ICommandAllocatePrimaryAction.Shard { get; set; }

		string ICommandAllocatePrimaryAction.Node { get; set; }

		bool ICommandAllocatePrimaryAction.AcceptDataLoss { get; set; }
	}

	internal sealed class CommandAllocatePrimaryActionDescriptorConverter<TReadAs> : JsonConverter<ICommandAllocatePrimaryAction> where TReadAs : class, ICommandAllocatePrimaryAction
	{
		public override ICommandAllocatePrimaryAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ICommandAllocatePrimaryAction value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.Index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.Shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.Node);
			writer.WritePropertyName("accept_data_loss");
			writer.WriteBooleanValue(value.AcceptDataLoss);
			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(CommandAllocateReplicaActionDescriptorConverter<CommandAllocateReplicaAction>))]
	public partial interface ICommandAllocateReplicaAction
	{
		Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		int Shard { get; set; }

		string Node { get; set; }
	}

	public partial class CommandAllocateReplicaAction : Cluster.Reroute.ICommandAllocateReplicaAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }
	}

	public partial class CommandAllocateReplicaActionDescriptor : DescriptorBase<CommandAllocateReplicaActionDescriptor, ICommandAllocateReplicaAction>, ICommandAllocateReplicaAction
	{
		Elastic.Clients.Elasticsearch.IndexName ICommandAllocateReplicaAction.Index { get; set; }

		int ICommandAllocateReplicaAction.Shard { get; set; }

		string ICommandAllocateReplicaAction.Node { get; set; }
	}

	internal sealed class CommandAllocateReplicaActionDescriptorConverter<TReadAs> : JsonConverter<ICommandAllocateReplicaAction> where TReadAs : class, ICommandAllocateReplicaAction
	{
		public override ICommandAllocateReplicaAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ICommandAllocateReplicaAction value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.Index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.Shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.Node);
			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(CommandCancelActionDescriptorConverter<CommandCancelAction>))]
	public partial interface ICommandCancelAction
	{
		Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		int Shard { get; set; }

		string Node { get; set; }

		bool? AllowPrimary { get; set; }
	}

	public partial class CommandCancelAction : Cluster.Reroute.ICommandCancelAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool? AllowPrimary { get; set; }
	}

	public partial class CommandCancelActionDescriptor : DescriptorBase<CommandCancelActionDescriptor, ICommandCancelAction>, ICommandCancelAction
	{
		Elastic.Clients.Elasticsearch.IndexName ICommandCancelAction.Index { get; set; }

		int ICommandCancelAction.Shard { get; set; }

		string ICommandCancelAction.Node { get; set; }

		bool? ICommandCancelAction.AllowPrimary { get; set; }
	}

	internal sealed class CommandCancelActionDescriptorConverter<TReadAs> : JsonConverter<ICommandCancelAction> where TReadAs : class, ICommandCancelAction
	{
		public override ICommandCancelAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ICommandCancelAction value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.Index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.Shard);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.Node);
			if (value.AllowPrimary.HasValue)
			{
				writer.WritePropertyName("allow_primary");
				writer.WriteBooleanValue(value.AllowPrimary.Value);
			}

			writer.WriteEndObject();
		}
	}

	[InterfaceConverterAttribute(typeof(CommandMoveActionDescriptorConverter<CommandMoveAction>))]
	public partial interface ICommandMoveAction
	{
		Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		int Shard { get; set; }

		string FromNode { get; set; }

		string ToNode { get; set; }
	}

	public partial class CommandMoveAction : Cluster.Reroute.ICommandMoveAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	public partial class CommandMoveActionDescriptor : DescriptorBase<CommandMoveActionDescriptor, ICommandMoveAction>, ICommandMoveAction
	{
		Elastic.Clients.Elasticsearch.IndexName ICommandMoveAction.Index { get; set; }

		int ICommandMoveAction.Shard { get; set; }

		string ICommandMoveAction.FromNode { get; set; }

		string ICommandMoveAction.ToNode { get; set; }
	}

	internal sealed class CommandMoveActionDescriptorConverter<TReadAs> : JsonConverter<ICommandMoveAction> where TReadAs : class, ICommandMoveAction
	{
		public override ICommandMoveAction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, ICommandMoveAction value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.Index, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.Shard);
			writer.WritePropertyName("from_node");
			writer.WriteStringValue(value.FromNode);
			writer.WritePropertyName("to_node");
			writer.WriteStringValue(value.ToNode);
			writer.WriteEndObject();
		}
	}

	public partial class RerouteDecision
	{
		[JsonInclude]
		[JsonPropertyName("decider")]
		public string Decider { get; init; }

		[JsonInclude]
		[JsonPropertyName("decision")]
		public string Decision { get; init; }

		[JsonInclude]
		[JsonPropertyName("explanation")]
		public string Explanation { get; init; }
	}

	public partial class RerouteExplanation
	{
		[JsonInclude]
		[JsonPropertyName("command")]
		public string Command { get; init; }

		[JsonInclude]
		[JsonPropertyName("decisions")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteDecision> Decisions { get; init; }

		[JsonInclude]
		[JsonPropertyName("parameters")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteParameters Parameters { get; init; }
	}

	public partial class RerouteParameters
	{
		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string? FromNode { get; init; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string? ToNode { get; init; }
	}
}