// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster.Reroute
{
	public partial class Command
	{
		[JsonInclude]
		[JsonPropertyName("cancel")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? Cancel { get; set; }

		[JsonInclude]
		[JsonPropertyName("move")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? Move { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_replica")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? AllocateReplica { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_stale_primary")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		[JsonInclude]
		[JsonPropertyName("allocate_empty_primary")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }
	}

	[JsonConverter(typeof(CommandDescriptorConverter))]
	public sealed partial class CommandDescriptor : DescriptorBase<CommandDescriptor>
	{
		public CommandDescriptor()
		{
		}

		internal CommandDescriptor(Action<CommandDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? CancelValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? MoveValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? AllocateReplicaValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateStalePrimaryValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? AllocateEmptyPrimaryValue { get; private set; }

		internal CommandCancelActionDescriptor CancelDescriptor { get; private set; }

		internal CommandMoveActionDescriptor MoveDescriptor { get; private set; }

		internal CommandAllocateReplicaActionDescriptor AllocateReplicaDescriptor { get; private set; }

		internal CommandAllocatePrimaryActionDescriptor AllocateStalePrimaryDescriptor { get; private set; }

		internal CommandAllocatePrimaryActionDescriptor AllocateEmptyPrimaryDescriptor { get; private set; }

		internal Action<CommandCancelActionDescriptor> CancelDescriptorAction { get; private set; }

		internal Action<CommandMoveActionDescriptor> MoveDescriptorAction { get; private set; }

		internal Action<CommandAllocateReplicaActionDescriptor> AllocateReplicaDescriptorAction { get; private set; }

		internal Action<CommandAllocatePrimaryActionDescriptor> AllocateStalePrimaryDescriptorAction { get; private set; }

		internal Action<CommandAllocatePrimaryActionDescriptor> AllocateEmptyPrimaryDescriptorAction { get; private set; }

		public CommandDescriptor Cancel(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelAction? cancel)
		{
			CancelDescriptor = null;
			CancelDescriptorAction = null;
			return Assign(cancel, (a, v) => a.CancelValue = v);
		}

		public CommandDescriptor Cancel(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelActionDescriptor descriptor)
		{
			CancelValue = null;
			CancelDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.CancelDescriptor = v);
		}

		public CommandDescriptor Cancel(Action<Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandCancelActionDescriptor> configure)
		{
			CancelValue = null;
			CancelDescriptorAction = null;
			return Assign(configure, (a, v) => a.CancelDescriptorAction = v);
		}

		public CommandDescriptor Move(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveAction? move)
		{
			MoveDescriptor = null;
			MoveDescriptorAction = null;
			return Assign(move, (a, v) => a.MoveValue = v);
		}

		public CommandDescriptor Move(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveActionDescriptor descriptor)
		{
			MoveValue = null;
			MoveDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.MoveDescriptor = v);
		}

		public CommandDescriptor Move(Action<Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandMoveActionDescriptor> configure)
		{
			MoveValue = null;
			MoveDescriptorAction = null;
			return Assign(configure, (a, v) => a.MoveDescriptorAction = v);
		}

		public CommandDescriptor AllocateReplica(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaAction? allocateReplica)
		{
			AllocateReplicaDescriptor = null;
			AllocateReplicaDescriptorAction = null;
			return Assign(allocateReplica, (a, v) => a.AllocateReplicaValue = v);
		}

		public CommandDescriptor AllocateReplica(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaActionDescriptor descriptor)
		{
			AllocateReplicaValue = null;
			AllocateReplicaDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.AllocateReplicaDescriptor = v);
		}

		public CommandDescriptor AllocateReplica(Action<Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocateReplicaActionDescriptor> configure)
		{
			AllocateReplicaValue = null;
			AllocateReplicaDescriptorAction = null;
			return Assign(configure, (a, v) => a.AllocateReplicaDescriptorAction = v);
		}

		public CommandDescriptor AllocateStalePrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? allocateStalePrimary)
		{
			AllocateStalePrimaryDescriptor = null;
			AllocateStalePrimaryDescriptorAction = null;
			return Assign(allocateStalePrimary, (a, v) => a.AllocateStalePrimaryValue = v);
		}

		public CommandDescriptor AllocateStalePrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryActionDescriptor descriptor)
		{
			AllocateStalePrimaryValue = null;
			AllocateStalePrimaryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.AllocateStalePrimaryDescriptor = v);
		}

		public CommandDescriptor AllocateStalePrimary(Action<Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryActionDescriptor> configure)
		{
			AllocateStalePrimaryValue = null;
			AllocateStalePrimaryDescriptorAction = null;
			return Assign(configure, (a, v) => a.AllocateStalePrimaryDescriptorAction = v);
		}

		public CommandDescriptor AllocateEmptyPrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryAction? allocateEmptyPrimary)
		{
			AllocateEmptyPrimaryDescriptor = null;
			AllocateEmptyPrimaryDescriptorAction = null;
			return Assign(allocateEmptyPrimary, (a, v) => a.AllocateEmptyPrimaryValue = v);
		}

		public CommandDescriptor AllocateEmptyPrimary(Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryActionDescriptor descriptor)
		{
			AllocateEmptyPrimaryValue = null;
			AllocateEmptyPrimaryDescriptorAction = null;
			return Assign(descriptor, (a, v) => a.AllocateEmptyPrimaryDescriptor = v);
		}

		public CommandDescriptor AllocateEmptyPrimary(Action<Elastic.Clients.Elasticsearch.Cluster.Reroute.CommandAllocatePrimaryActionDescriptor> configure)
		{
			AllocateEmptyPrimaryValue = null;
			AllocateEmptyPrimaryDescriptorAction = null;
			return Assign(configure, (a, v) => a.AllocateEmptyPrimaryDescriptorAction = v);
		}
	}

	internal sealed class CommandDescriptorConverter : JsonConverter<CommandDescriptor>
	{
		public override CommandDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.CancelDescriptor is not null)
			{
				writer.WritePropertyName("cancel");
				JsonSerializer.Serialize(writer, value.CancelDescriptor, options);
			}
			else if (value.CancelDescriptorAction is not null)
			{
				writer.WritePropertyName("cancel");
				JsonSerializer.Serialize(writer, new CommandCancelActionDescriptor(value.CancelDescriptorAction), options);
			}
			else if (value.CancelValue is not null)
			{
				writer.WritePropertyName("cancel");
				JsonSerializer.Serialize(writer, value.CancelValue, options);
			}

			if (value.MoveDescriptor is not null)
			{
				writer.WritePropertyName("move");
				JsonSerializer.Serialize(writer, value.MoveDescriptor, options);
			}
			else if (value.MoveDescriptorAction is not null)
			{
				writer.WritePropertyName("move");
				JsonSerializer.Serialize(writer, new CommandMoveActionDescriptor(value.MoveDescriptorAction), options);
			}
			else if (value.MoveValue is not null)
			{
				writer.WritePropertyName("move");
				JsonSerializer.Serialize(writer, value.MoveValue, options);
			}

			if (value.AllocateReplicaDescriptor is not null)
			{
				writer.WritePropertyName("allocate_replica");
				JsonSerializer.Serialize(writer, value.AllocateReplicaDescriptor, options);
			}
			else if (value.AllocateReplicaDescriptorAction is not null)
			{
				writer.WritePropertyName("allocate_replica");
				JsonSerializer.Serialize(writer, new CommandAllocateReplicaActionDescriptor(value.AllocateReplicaDescriptorAction), options);
			}
			else if (value.AllocateReplicaValue is not null)
			{
				writer.WritePropertyName("allocate_replica");
				JsonSerializer.Serialize(writer, value.AllocateReplicaValue, options);
			}

			if (value.AllocateStalePrimaryDescriptor is not null)
			{
				writer.WritePropertyName("allocate_stale_primary");
				JsonSerializer.Serialize(writer, value.AllocateStalePrimaryDescriptor, options);
			}
			else if (value.AllocateStalePrimaryDescriptorAction is not null)
			{
				writer.WritePropertyName("allocate_stale_primary");
				JsonSerializer.Serialize(writer, new CommandAllocatePrimaryActionDescriptor(value.AllocateStalePrimaryDescriptorAction), options);
			}
			else if (value.AllocateStalePrimaryValue is not null)
			{
				writer.WritePropertyName("allocate_stale_primary");
				JsonSerializer.Serialize(writer, value.AllocateStalePrimaryValue, options);
			}

			if (value.AllocateEmptyPrimaryDescriptor is not null)
			{
				writer.WritePropertyName("allocate_empty_primary");
				JsonSerializer.Serialize(writer, value.AllocateEmptyPrimaryDescriptor, options);
			}
			else if (value.AllocateEmptyPrimaryDescriptorAction is not null)
			{
				writer.WritePropertyName("allocate_empty_primary");
				JsonSerializer.Serialize(writer, new CommandAllocatePrimaryActionDescriptor(value.AllocateEmptyPrimaryDescriptorAction), options);
			}
			else if (value.AllocateEmptyPrimaryValue is not null)
			{
				writer.WritePropertyName("allocate_empty_primary");
				JsonSerializer.Serialize(writer, value.AllocateEmptyPrimaryValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public partial class CommandAllocatePrimaryAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("accept_data_loss")]
		public bool AcceptDataLoss { get; set; }
	}

	[JsonConverter(typeof(CommandAllocatePrimaryActionDescriptorConverter))]
	public sealed partial class CommandAllocatePrimaryActionDescriptor : DescriptorBase<CommandAllocatePrimaryActionDescriptor>
	{
		public CommandAllocatePrimaryActionDescriptor()
		{
		}

		internal CommandAllocatePrimaryActionDescriptor(Action<CommandAllocatePrimaryActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName IndexValue { get; private set; }

		internal int ShardValue { get; private set; }

		internal string NodeValue { get; private set; }

		internal bool AcceptDataLossValue { get; private set; }

		public CommandAllocatePrimaryActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.IndexValue = v);
		public CommandAllocatePrimaryActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a.ShardValue = v);
		public CommandAllocatePrimaryActionDescriptor Node(string node) => Assign(node, (a, v) => a.NodeValue = v);
		public CommandAllocatePrimaryActionDescriptor AcceptDataLoss(bool acceptDataLoss = true) => Assign(acceptDataLoss, (a, v) => a.AcceptDataLossValue = v);
	}

	internal sealed class CommandAllocatePrimaryActionDescriptorConverter : JsonConverter<CommandAllocatePrimaryActionDescriptor>
	{
		public override CommandAllocatePrimaryActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandAllocatePrimaryActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.IndexValue, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.ShardValue);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.NodeValue);
			writer.WritePropertyName("accept_data_loss");
			writer.WriteBooleanValue(value.AcceptDataLossValue);
			writer.WriteEndObject();
		}
	}

	public partial class CommandAllocateReplicaAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }
	}

	[JsonConverter(typeof(CommandAllocateReplicaActionDescriptorConverter))]
	public sealed partial class CommandAllocateReplicaActionDescriptor : DescriptorBase<CommandAllocateReplicaActionDescriptor>
	{
		public CommandAllocateReplicaActionDescriptor()
		{
		}

		internal CommandAllocateReplicaActionDescriptor(Action<CommandAllocateReplicaActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName IndexValue { get; private set; }

		internal int ShardValue { get; private set; }

		internal string NodeValue { get; private set; }

		public CommandAllocateReplicaActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.IndexValue = v);
		public CommandAllocateReplicaActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a.ShardValue = v);
		public CommandAllocateReplicaActionDescriptor Node(string node) => Assign(node, (a, v) => a.NodeValue = v);
	}

	internal sealed class CommandAllocateReplicaActionDescriptorConverter : JsonConverter<CommandAllocateReplicaActionDescriptor>
	{
		public override CommandAllocateReplicaActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandAllocateReplicaActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.IndexValue, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.ShardValue);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.NodeValue);
			writer.WriteEndObject();
		}
	}

	public partial class CommandCancelAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool? AllowPrimary { get; set; }
	}

	[JsonConverter(typeof(CommandCancelActionDescriptorConverter))]
	public sealed partial class CommandCancelActionDescriptor : DescriptorBase<CommandCancelActionDescriptor>
	{
		public CommandCancelActionDescriptor()
		{
		}

		internal CommandCancelActionDescriptor(Action<CommandCancelActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName IndexValue { get; private set; }

		internal int ShardValue { get; private set; }

		internal string NodeValue { get; private set; }

		internal bool? AllowPrimaryValue { get; private set; }

		public CommandCancelActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.IndexValue = v);
		public CommandCancelActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a.ShardValue = v);
		public CommandCancelActionDescriptor Node(string node) => Assign(node, (a, v) => a.NodeValue = v);
		public CommandCancelActionDescriptor AllowPrimary(bool? allowPrimary = true) => Assign(allowPrimary, (a, v) => a.AllowPrimaryValue = v);
	}

	internal sealed class CommandCancelActionDescriptorConverter : JsonConverter<CommandCancelActionDescriptor>
	{
		public override CommandCancelActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandCancelActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.IndexValue, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.ShardValue);
			writer.WritePropertyName("node");
			writer.WriteStringValue(value.NodeValue);
			if (value.AllowPrimaryValue.HasValue)
			{
				writer.WritePropertyName("allow_primary");
				writer.WriteBooleanValue(value.AllowPrimaryValue.Value);
			}

			writer.WriteEndObject();
		}
	}

	public partial class CommandMoveAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	[JsonConverter(typeof(CommandMoveActionDescriptorConverter))]
	public sealed partial class CommandMoveActionDescriptor : DescriptorBase<CommandMoveActionDescriptor>
	{
		public CommandMoveActionDescriptor()
		{
		}

		internal CommandMoveActionDescriptor(Action<CommandMoveActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName IndexValue { get; private set; }

		internal int ShardValue { get; private set; }

		internal string FromNodeValue { get; private set; }

		internal string ToNodeValue { get; private set; }

		public CommandMoveActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.IndexValue = v);
		public CommandMoveActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a.ShardValue = v);
		public CommandMoveActionDescriptor FromNode(string fromNode) => Assign(fromNode, (a, v) => a.FromNodeValue = v);
		public CommandMoveActionDescriptor ToNode(string toNode) => Assign(toNode, (a, v) => a.ToNodeValue = v);
	}

	internal sealed class CommandMoveActionDescriptorConverter : JsonConverter<CommandMoveActionDescriptor>
	{
		public override CommandMoveActionDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, CommandMoveActionDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, value.IndexValue, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(value.ShardValue);
			writer.WritePropertyName("from_node");
			writer.WriteStringValue(value.FromNodeValue);
			writer.WritePropertyName("to_node");
			writer.WriteStringValue(value.ToNodeValue);
			writer.WriteEndObject();
		}
	}

	public partial class RerouteDecision
	{
		[JsonInclude]
		[JsonPropertyName("decider")]
		public string Decider { get; init; }

		[JsonInclude]
		[JsonPropertyName("decision")]
		public string Decision { get; init; }

		[JsonInclude]
		[JsonPropertyName("explanation")]
		public string Explanation { get; init; }
	}

	public partial class RerouteExplanation
	{
		[JsonInclude]
		[JsonPropertyName("command")]
		public string Command { get; init; }

		[JsonInclude]
		[JsonPropertyName("decisions")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteDecision> Decisions { get; init; }

		[JsonInclude]
		[JsonPropertyName("parameters")]
		public Elastic.Clients.Elasticsearch.Cluster.Reroute.RerouteParameters Parameters { get; init; }
	}

	public partial class RerouteParameters
	{
		[JsonInclude]
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary { get; init; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; init; }

		[JsonInclude]
		[JsonPropertyName("node")]
		public string Node { get; init; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; init; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string? FromNode { get; init; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string? ToNode { get; init; }
	}
}