// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster.Reroute
{
	public partial class CommandMoveAction
	{
		[JsonInclude]
		[JsonPropertyName("index")]
		public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonInclude]
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonInclude]
		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	public sealed partial class CommandMoveActionDescriptor : DescriptorBase<CommandMoveActionDescriptor>
	{
		public CommandMoveActionDescriptor()
		{
		}

		internal CommandMoveActionDescriptor(Action<CommandMoveActionDescriptor> configure) => configure.Invoke(this);
		internal Elastic.Clients.Elasticsearch.IndexName IndexValue { get; private set; }

		internal int ShardValue { get; private set; }

		internal string FromNodeValue { get; private set; }

		internal string ToNodeValue { get; private set; }

		public CommandMoveActionDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.IndexValue = v);
		public CommandMoveActionDescriptor Shard(int shard) => Assign(shard, (a, v) => a.ShardValue = v);
		public CommandMoveActionDescriptor FromNode(string fromNode) => Assign(fromNode, (a, v) => a.FromNodeValue = v);
		public CommandMoveActionDescriptor ToNode(string toNode) => Assign(toNode, (a, v) => a.ToNodeValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("index");
			JsonSerializer.Serialize(writer, IndexValue, options);
			writer.WritePropertyName("shard");
			writer.WriteNumberValue(ShardValue);
			writer.WritePropertyName("from_node");
			writer.WriteStringValue(FromNodeValue);
			writer.WritePropertyName("to_node");
			writer.WriteStringValue(ToNodeValue);
			writer.WriteEndObject();
		}
	}
}