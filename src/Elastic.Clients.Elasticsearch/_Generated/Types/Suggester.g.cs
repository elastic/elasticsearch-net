// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	internal sealed class SuggesterConverter : JsonConverter<Suggester>
	{
		public override Suggester Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			if (reader.TokenType != JsonTokenType.StartObject)
				throw new JsonException("Unexpected JSON detected.");
			var variant = new Suggester();
			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					var property = reader.GetString();
					if (property == "text")
					{
						variant.Text = JsonSerializer.Deserialize<string?>(ref reader, options);
						continue;
					}
				}
			}

			reader.Read();
			return variant;
		}

		public override void Write(Utf8JsonWriter writer, Suggester value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value.Text))
			{
				writer.WritePropertyName("text");
				writer.WriteStringValue(value.Text);
			}

			writer.WriteEndObject();
		}
	}

	[JsonConverter(typeof(SuggesterConverter))]
	public partial class Suggester
	{
		public Dictionary<string, Elastic.Clients.Elasticsearch.FieldSuggester> Suggesters { get; set; }

		public string? Text { get; set; }
	}

	public sealed partial class SuggesterDescriptor : SerializableDescriptorBase<SuggesterDescriptor>
	{
		internal SuggesterDescriptor(Action<SuggesterDescriptor> configure) => configure.Invoke(this);
		public SuggesterDescriptor() : base()
		{
		}

		private string? TextValue { get; set; }

		public SuggesterDescriptor Text(string? text)
		{
			TextValue = text;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(TextValue))
			{
				writer.WritePropertyName("text");
				writer.WriteStringValue(TextValue);
			}

			writer.WriteEndObject();
		}
	}
}