// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ssl
{
	[ConvertAs(typeof(AuthenticateRequest))]
	public partial interface IAuthenticateRequest : IRequest<AuthenticateRequestParameters>
	{
	}

	public partial class AuthenticateRequest : PlainRequestBase<AuthenticateRequestParameters>, IAuthenticateRequest
	{
		protected IAuthenticateRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityAuthenticate;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/_authenticate</summary>
        public AuthenticateRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(ChangePasswordRequest))]
	public partial interface IChangePasswordRequest : IRequest<ChangePasswordRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Password? Password { get; set; }
	}

	public partial class ChangePasswordRequest : PlainRequestBase<ChangePasswordRequestParameters>, IChangePasswordRequest
	{
		protected IChangePasswordRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityChangePassword;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/user/{username}/_password</summary>
        public ChangePasswordRequest(Elastic.Clients.Elasticsearch.Username? username) : base(r => r.Optional("username", username))
		{
		}

		///<summary>/_security/user/_password</summary>
        public ChangePasswordRequest() : base()
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("password")]
		public Elastic.Clients.Elasticsearch.Password? Password { get; set; }
	}

	[ConvertAs(typeof(ClearApiKeyCacheRequest))]
	public partial interface IClearApiKeyCacheRequest : IRequest<ClearApiKeyCacheRequestParameters>
	{
	}

	public partial class ClearApiKeyCacheRequest : PlainRequestBase<ClearApiKeyCacheRequestParameters>, IClearApiKeyCacheRequest
	{
		protected IClearApiKeyCacheRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearApiKeyCache;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/api_key/{ids}/_clear_cache</summary>
        public ClearApiKeyCacheRequest(Elastic.Clients.Elasticsearch.Ids ids) : base(r => r.Required("ids", ids))
		{
		}
	}

	[ConvertAs(typeof(ClearCachedPrivilegesRequest))]
	public partial interface IClearCachedPrivilegesRequest : IRequest<ClearCachedPrivilegesRequestParameters>
	{
	}

	public partial class ClearCachedPrivilegesRequest : PlainRequestBase<ClearCachedPrivilegesRequestParameters>, IClearCachedPrivilegesRequest
	{
		protected IClearCachedPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/privilege/{application}/_clear_cache</summary>
        public ClearCachedPrivilegesRequest(Elastic.Clients.Elasticsearch.Name application) : base(r => r.Required("application", application))
		{
		}
	}

	[ConvertAs(typeof(ClearCachedRealmsRequest))]
	public partial interface IClearCachedRealmsRequest : IRequest<ClearCachedRealmsRequestParameters>
	{
	}

	public partial class ClearCachedRealmsRequest : PlainRequestBase<ClearCachedRealmsRequestParameters>, IClearCachedRealmsRequest
	{
		protected IClearCachedRealmsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRealms;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/realm/{realms}/_clear_cache</summary>
        public ClearCachedRealmsRequest(Elastic.Clients.Elasticsearch.Names realms) : base(r => r.Required("realms", realms))
		{
		}

		[JsonIgnore]
		public IEnumerable<string>? Usernames { get => Q<IEnumerable<string>?>("usernames"); set => Q("usernames", value); }
	}

	[ConvertAs(typeof(ClearCachedRolesRequest))]
	public partial interface IClearCachedRolesRequest : IRequest<ClearCachedRolesRequestParameters>
	{
	}

	public partial class ClearCachedRolesRequest : PlainRequestBase<ClearCachedRolesRequestParameters>, IClearCachedRolesRequest
	{
		protected IClearCachedRolesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRoles;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/role/{name}/_clear_cache</summary>
        public ClearCachedRolesRequest(Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("name", name))
		{
		}
	}

	[ConvertAs(typeof(ClearCachedServiceTokensRequest))]
	public partial interface IClearCachedServiceTokensRequest : IRequest<ClearCachedServiceTokensRequestParameters>
	{
	}

	public partial class ClearCachedServiceTokensRequest : PlainRequestBase<ClearCachedServiceTokensRequestParameters>, IClearCachedServiceTokensRequest
	{
		protected IClearCachedServiceTokensRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedServiceTokens;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}/_clear_cache</summary>
        public ClearCachedServiceTokensRequest(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}
	}

	[ConvertAs(typeof(CreateApiKeyRequest))]
	public partial interface ICreateApiKeyRequest : IRequest<CreateApiKeyRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Time? Expiration { get; set; }

		Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.Security.CreateApiKey.RoleDescriptor>? RoleDescriptors { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }
	}

	public partial class CreateApiKeyRequest : PlainRequestBase<CreateApiKeyRequestParameters>, ICreateApiKeyRequest
	{
		protected ICreateApiKeyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Expiration is null && RoleDescriptors is null;

		///<summary>/_security/api_key</summary>
        public CreateApiKeyRequest() : base()
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("expiration")]
		public Elastic.Clients.Elasticsearch.Time? Expiration { get; set; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("role_descriptors")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Security.CreateApiKey.RoleDescriptor>? RoleDescriptors { get; set; }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }
	}

	[ConvertAs(typeof(CreateServiceTokenRequest))]
	public partial interface ICreateServiceTokenRequest : IRequest<CreateServiceTokenRequestParameters>
	{
	}

	public partial class CreateServiceTokenRequest : PlainRequestBase<CreateServiceTokenRequestParameters>, ICreateServiceTokenRequest
	{
		protected ICreateServiceTokenRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public CreateServiceTokenRequest(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}

		///<summary>/_security/service/{namespace}/{service}/credential/token</summary>
        public CreateServiceTokenRequest(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	[ConvertAs(typeof(DeletePrivilegesRequest))]
	public partial interface IDeletePrivilegesRequest : IRequest<DeletePrivilegesRequestParameters>
	{
	}

	public partial class DeletePrivilegesRequest : PlainRequestBase<DeletePrivilegesRequestParameters>, IDeletePrivilegesRequest
	{
		protected IDeletePrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeletePrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/privilege/{application}/{name}</summary>
        public DeletePrivilegesRequest(Elastic.Clients.Elasticsearch.Name application, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("application", application).Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(DeleteRoleRequest))]
	public partial interface IDeleteRoleRequest : IRequest<DeleteRoleRequestParameters>
	{
	}

	public partial class DeleteRoleRequest : PlainRequestBase<DeleteRoleRequestParameters>, IDeleteRoleRequest
	{
		protected IDeleteRoleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRole;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/role/{name}</summary>
        public DeleteRoleRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(DeleteRoleMappingRequest))]
	public partial interface IDeleteRoleMappingRequest : IRequest<DeleteRoleMappingRequestParameters>
	{
	}

	public partial class DeleteRoleMappingRequest : PlainRequestBase<DeleteRoleMappingRequestParameters>, IDeleteRoleMappingRequest
	{
		protected IDeleteRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/role_mapping/{name}</summary>
        public DeleteRoleMappingRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(DeleteServiceTokenRequest))]
	public partial interface IDeleteServiceTokenRequest : IRequest<DeleteServiceTokenRequestParameters>
	{
	}

	public partial class DeleteServiceTokenRequest : PlainRequestBase<DeleteServiceTokenRequestParameters>, IDeleteServiceTokenRequest
	{
		protected IDeleteServiceTokenRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public DeleteServiceTokenRequest(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(DeleteUserRequest))]
	public partial interface IDeleteUserRequest : IRequest<DeleteUserRequestParameters>
	{
	}

	public partial class DeleteUserRequest : PlainRequestBase<DeleteUserRequestParameters>, IDeleteUserRequest
	{
		protected IDeleteUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteUser;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/user/{username}</summary>
        public DeleteUserRequest(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(DisableUserRequest))]
	public partial interface IDisableUserRequest : IRequest<DisableUserRequestParameters>
	{
	}

	public partial class DisableUserRequest : PlainRequestBase<DisableUserRequestParameters>, IDisableUserRequest
	{
		protected IDisableUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDisableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/user/{username}/_disable</summary>
        public DisableUserRequest(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(EnableUserRequest))]
	public partial interface IEnableUserRequest : IRequest<EnableUserRequestParameters>
	{
	}

	public partial class EnableUserRequest : PlainRequestBase<EnableUserRequestParameters>, IEnableUserRequest
	{
		protected IEnableUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityEnableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/user/{username}/_enable</summary>
        public EnableUserRequest(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(GetApiKeyRequest))]
	public partial interface IGetApiKeyRequest : IRequest<GetApiKeyRequestParameters>
	{
	}

	public partial class GetApiKeyRequest : PlainRequestBase<GetApiKeyRequestParameters>, IGetApiKeyRequest
	{
		protected IGetApiKeyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/api_key</summary>
        public GetApiKeyRequest() : base()
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Id? Id { get => Q<Elastic.Clients.Elasticsearch.Id?>("id"); set => Q("id", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Name? Name { get => Q<Elastic.Clients.Elasticsearch.Name?>("name"); set => Q("name", value); }

		[JsonIgnore]
		public bool? Owner { get => Q<bool?>("owner"); set => Q("owner", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Name? RealmName { get => Q<Elastic.Clients.Elasticsearch.Name?>("realm_name"); set => Q("realm_name", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Username? Username { get => Q<Elastic.Clients.Elasticsearch.Username?>("username"); set => Q("username", value); }
	}

	[ConvertAs(typeof(GetBuiltinPrivilegesRequest))]
	public partial interface IGetBuiltinPrivilegesRequest : IRequest<GetBuiltinPrivilegesRequestParameters>
	{
	}

	public partial class GetBuiltinPrivilegesRequest : PlainRequestBase<GetBuiltinPrivilegesRequestParameters>, IGetBuiltinPrivilegesRequest
	{
		protected IGetBuiltinPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetBuiltinPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/privilege/_builtin</summary>
        public GetBuiltinPrivilegesRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetPrivilegesRequest))]
	public partial interface IGetPrivilegesRequest : IRequest<GetPrivilegesRequestParameters>
	{
	}

	public partial class GetPrivilegesRequest : PlainRequestBase<GetPrivilegesRequestParameters>, IGetPrivilegesRequest
	{
		protected IGetPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/privilege</summary>
        public GetPrivilegesRequest() : base()
		{
		}

		///<summary>/_security/privilege/{application}</summary>
        public GetPrivilegesRequest(Elastic.Clients.Elasticsearch.Name? application) : base(r => r.Optional("application", application))
		{
		}

		///<summary>/_security/privilege/{application}/{name}</summary>
        public GetPrivilegesRequest(Elastic.Clients.Elasticsearch.Name? application, Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("application", application).Optional("name", name))
		{
		}
	}

	[ConvertAs(typeof(GetRoleRequest))]
	public partial interface IGetRoleRequest : IRequest<GetRoleRequestParameters>
	{
	}

	public partial class GetRoleRequest : PlainRequestBase<GetRoleRequestParameters>, IGetRoleRequest
	{
		protected IGetRoleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRole;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/role/{name}</summary>
        public GetRoleRequest(Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role</summary>
        public GetRoleRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetRoleMappingRequest))]
	public partial interface IGetRoleMappingRequest : IRequest<GetRoleMappingRequestParameters>
	{
	}

	public partial class GetRoleMappingRequest : PlainRequestBase<GetRoleMappingRequestParameters>, IGetRoleMappingRequest
	{
		protected IGetRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/role_mapping/{name}</summary>
        public GetRoleMappingRequest(Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role_mapping</summary>
        public GetRoleMappingRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetServiceAccountsRequest))]
	public partial interface IGetServiceAccountsRequest : IRequest<GetServiceAccountsRequestParameters>
	{
	}

	public partial class GetServiceAccountsRequest : PlainRequestBase<GetServiceAccountsRequestParameters>, IGetServiceAccountsRequest
	{
		protected IGetServiceAccountsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceAccounts;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/service/{namespace}/{service}</summary>
        public GetServiceAccountsRequest(Elastic.Clients.Elasticsearch.Namespace? ns, Elastic.Clients.Elasticsearch.Service? service) : base(r => r.Optional("ns", ns).Optional("service", service))
		{
		}

		///<summary>/_security/service/{namespace}</summary>
        public GetServiceAccountsRequest(Elastic.Clients.Elasticsearch.Namespace? ns) : base(r => r.Optional("ns", ns))
		{
		}

		///<summary>/_security/service</summary>
        public GetServiceAccountsRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetServiceCredentialsRequest))]
	public partial interface IGetServiceCredentialsRequest : IRequest<GetServiceCredentialsRequestParameters>
	{
	}

	public partial class GetServiceCredentialsRequest : PlainRequestBase<GetServiceCredentialsRequestParameters>, IGetServiceCredentialsRequest
	{
		protected IGetServiceCredentialsRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceCredentials;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/service/{namespace}/{service}/credential</summary>
        public GetServiceCredentialsRequest(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Name service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	[ConvertAs(typeof(GetTokenRequest))]
	public partial interface IGetTokenRequest : IRequest<GetTokenRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Security.GetToken.AccessTokenGrantType? GrantType { get; set; }

		string? Scope { get; set; }

		Elastic.Clients.Elasticsearch.Password? Password { get; set; }

		string? KerberosTicket { get; set; }

		string? RefreshToken { get; set; }

		Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	public partial class GetTokenRequest : PlainRequestBase<GetTokenRequestParameters>, IGetTokenRequest
	{
		protected IGetTokenRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetToken;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => GrantType is null && Scope is null && KerberosTicket is null && RefreshToken is null;

		///<summary>/_security/oauth2/token</summary>
        public GetTokenRequest() : base()
		{
		}

		[JsonInclude]
		[JsonPropertyName("grant_type")]
		public Elastic.Clients.Elasticsearch.Security.GetToken.AccessTokenGrantType? GrantType { get; set; }

		[JsonInclude]
		[JsonPropertyName("scope")]
		public string? Scope { get; set; }

		[JsonInclude]
		[JsonPropertyName("password")]
		public Elastic.Clients.Elasticsearch.Password? Password { get; set; }

		[JsonInclude]
		[JsonPropertyName("kerberos_ticket")]
		public string? KerberosTicket { get; set; }

		[JsonInclude]
		[JsonPropertyName("refresh_token")]
		public string? RefreshToken { get; set; }

		[JsonInclude]
		[JsonPropertyName("username")]
		public Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	[ConvertAs(typeof(GetUserRequest))]
	public partial interface IGetUserRequest : IRequest<GetUserRequestParameters>
	{
	}

	public partial class GetUserRequest : PlainRequestBase<GetUserRequestParameters>, IGetUserRequest
	{
		protected IGetUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUser;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/user</summary>
        public GetUserRequest() : base()
		{
		}
	}

	[ConvertAs(typeof(GetUserPrivilegesRequest))]
	public partial interface IGetUserPrivilegesRequest : IRequest<GetUserPrivilegesRequestParameters>
	{
	}

	public partial class GetUserPrivilegesRequest : PlainRequestBase<GetUserPrivilegesRequestParameters>, IGetUserPrivilegesRequest
	{
		protected IGetUserPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUserPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/user/_privileges</summary>
        public GetUserPrivilegesRequest() : base()
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Name? Application { get => Q<Elastic.Clients.Elasticsearch.Name?>("application"); set => Q("application", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Name? Priviledge { get => Q<Elastic.Clients.Elasticsearch.Name?>("priviledge"); set => Q("priviledge", value); }
	}

	[ConvertAs(typeof(GrantApiKeyRequest))]
	public partial interface IGrantApiKeyRequest : IRequest<GrantApiKeyRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKey ApiKey { get; set; }

		Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKeyGrantType GrantType { get; set; }

		string? AccessToken { get; set; }

		Elastic.Clients.Elasticsearch.Username? Username { get; set; }

		Elastic.Clients.Elasticsearch.Password? Password { get; set; }
	}

	public partial class GrantApiKeyRequest : PlainRequestBase<GrantApiKeyRequestParameters>, IGrantApiKeyRequest
	{
		protected IGrantApiKeyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGrantApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/api_key/grant</summary>
        public GrantApiKeyRequest() : base()
		{
		}

		[JsonInclude]
		[JsonPropertyName("api_key")]
		public Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKey ApiKey { get; set; }

		[JsonInclude]
		[JsonPropertyName("grant_type")]
		public Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKeyGrantType GrantType { get; set; }

		[JsonInclude]
		[JsonPropertyName("access_token")]
		public string? AccessToken { get; set; }

		[JsonInclude]
		[JsonPropertyName("username")]
		public Elastic.Clients.Elasticsearch.Username? Username { get; set; }

		[JsonInclude]
		[JsonPropertyName("password")]
		public Elastic.Clients.Elasticsearch.Password? Password { get; set; }
	}

	[ConvertAs(typeof(HasPrivilegesRequest))]
	public partial interface IHasPrivilegesRequest : IRequest<HasPrivilegesRequestParameters>
	{
		IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.ApplicationPrivilegesCheck>? Application { get; set; }

		IEnumerable<string>? Cluster { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.IndexPrivilegesCheck>? Index { get; set; }
	}

	public partial class HasPrivilegesRequest : PlainRequestBase<HasPrivilegesRequestParameters>, IHasPrivilegesRequest
	{
		protected IHasPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityHasPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Application is null && Cluster is null && Index is null;

		///<summary>/_security/user/_has_privileges</summary>
        public HasPrivilegesRequest() : base()
		{
		}

		///<summary>/_security/user/{user}/_has_privileges</summary>
        public HasPrivilegesRequest(Elastic.Clients.Elasticsearch.Name? user) : base(r => r.Optional("user", user))
		{
		}

		[JsonInclude]
		[JsonPropertyName("application")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.ApplicationPrivilegesCheck>? Application { get; set; }

		[JsonInclude]
		[JsonPropertyName("cluster")]
		public IEnumerable<string>? Cluster { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.IndexPrivilegesCheck>? Index { get; set; }
	}

	[ConvertAs(typeof(InvalidateApiKeyRequest))]
	public partial interface IInvalidateApiKeyRequest : IRequest<InvalidateApiKeyRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Id? Id { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Id>? Ids { get; set; }

		Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		bool? Owner { get; set; }

		string? RealmName { get; set; }

		Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	public partial class InvalidateApiKeyRequest : PlainRequestBase<InvalidateApiKeyRequestParameters>, IInvalidateApiKeyRequest
	{
		protected IInvalidateApiKeyRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Owner is null && RealmName is null;

		///<summary>/_security/api_key</summary>
        public InvalidateApiKeyRequest() : base()
		{
		}

		[JsonInclude]
		[JsonPropertyName("id")]
		public Elastic.Clients.Elasticsearch.Id? Id { get; set; }

		[JsonInclude]
		[JsonPropertyName("ids")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Id>? Ids { get; set; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("owner")]
		public bool? Owner { get; set; }

		[JsonInclude]
		[JsonPropertyName("realm_name")]
		public string? RealmName { get; set; }

		[JsonInclude]
		[JsonPropertyName("username")]
		public Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	[ConvertAs(typeof(InvalidateTokenRequest))]
	public partial interface IInvalidateTokenRequest : IRequest<InvalidateTokenRequestParameters>
	{
		string? Token { get; set; }

		string? RefreshToken { get; set; }

		Elastic.Clients.Elasticsearch.Name? RealmName { get; set; }

		Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	public partial class InvalidateTokenRequest : PlainRequestBase<InvalidateTokenRequestParameters>, IInvalidateTokenRequest
	{
		protected IInvalidateTokenRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => Token is null && RefreshToken is null && RealmName is null;

		///<summary>/_security/oauth2/token</summary>
        public InvalidateTokenRequest() : base()
		{
		}

		[JsonInclude]
		[JsonPropertyName("token")]
		public string? Token { get; set; }

		[JsonInclude]
		[JsonPropertyName("refresh_token")]
		public string? RefreshToken { get; set; }

		[JsonInclude]
		[JsonPropertyName("realm_name")]
		public Elastic.Clients.Elasticsearch.Name? RealmName { get; set; }

		[JsonInclude]
		[JsonPropertyName("username")]
		public Elastic.Clients.Elasticsearch.Username? Username { get; set; }
	}

	[ConvertAs(typeof(PutPrivilegesRequest))]
	public partial interface IPutPrivilegesRequest : IRequest<PutPrivilegesRequestParameters>
	{
	}

	public partial class PutPrivilegesRequest : PlainRequestBase<PutPrivilegesRequestParameters>, IPutPrivilegesRequest
	{
		protected IPutPrivilegesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_security/privilege/</summary>
        public PutPrivilegesRequest() : base()
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	[ConvertAs(typeof(PutRoleRequest))]
	public partial interface IPutRoleRequest : IRequest<PutRoleRequestParameters>
	{
		IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; set; }

		IEnumerable<string>? Cluster { get; set; }

		Dictionary<string, object>? Global { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? Indices { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		IEnumerable<string>? RunAs { get; set; }

		Elastic.Clients.Elasticsearch.Security.GetRole.TransientMetadata? TransientMetadata { get; set; }
	}

	public partial class PutRoleRequest : PlainRequestBase<PutRoleRequestParameters>, IPutRoleRequest
	{
		protected IPutRoleRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRole;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/role/{name}</summary>
        public PutRoleRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("applications")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? Applications { get; set; }

		[JsonInclude]
		[JsonPropertyName("cluster")]
		public IEnumerable<string>? Cluster { get; set; }

		[JsonInclude]
		[JsonPropertyName("global")]
		public Dictionary<string, object>? Global { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? Indices { get; set; }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		[JsonInclude]
		[JsonPropertyName("run_as")]
		public IEnumerable<string>? RunAs { get; set; }

		[JsonInclude]
		[JsonPropertyName("transient_metadata")]
		public Elastic.Clients.Elasticsearch.Security.GetRole.TransientMetadata? TransientMetadata { get; set; }
	}

	[ConvertAs(typeof(PutRoleMappingRequest))]
	public partial interface IPutRoleMappingRequest : IRequest<PutRoleMappingRequestParameters>
	{
		bool? Enabled { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		IEnumerable<string>? Roles { get; set; }

		Elastic.Clients.Elasticsearch.Security.RoleMappingRuleBase? Rules { get; set; }

		IEnumerable<string>? RunAs { get; set; }
	}

	public partial class PutRoleMappingRequest : PlainRequestBase<PutRoleMappingRequestParameters>, IPutRoleMappingRequest
	{
		protected IPutRoleMappingRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/role_mapping/{name}</summary>
        public PutRoleMappingRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		[JsonInclude]
		[JsonPropertyName("roles")]
		public IEnumerable<string>? Roles { get; set; }

		[JsonInclude]
		[JsonPropertyName("rules")]
		public Elastic.Clients.Elasticsearch.Security.RoleMappingRuleBase? Rules { get; set; }

		[JsonInclude]
		[JsonPropertyName("run_as")]
		public IEnumerable<string>? RunAs { get; set; }
	}

	[ConvertAs(typeof(PutUserRequest))]
	public partial interface IPutUserRequest : IRequest<PutUserRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		Elastic.Clients.Elasticsearch.Password? Password { get; set; }

		string? PasswordHash { get; set; }

		IEnumerable<string>? Roles { get; set; }

		bool? Enabled { get; set; }
	}

	public partial class PutUserRequest : PlainRequestBase<PutUserRequestParameters>, IPutUserRequest
	{
		protected IPutUserRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		protected override bool CanBeEmpty => false;
		protected override bool IsEmpty => false;

		///<summary>/_security/user/{username}</summary>
        public PutUserRequest(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public Elastic.Clients.Elasticsearch.Metadata? Metadata { get; set; }

		[JsonInclude]
		[JsonPropertyName("password")]
		public Elastic.Clients.Elasticsearch.Password? Password { get; set; }

		[JsonInclude]
		[JsonPropertyName("password_hash")]
		public string? PasswordHash { get; set; }

		[JsonInclude]
		[JsonPropertyName("roles")]
		public IEnumerable<string>? Roles { get; set; }

		[JsonInclude]
		[JsonPropertyName("enabled")]
		public bool? Enabled { get; set; }
	}

	[ConvertAs(typeof(CertificatesRequest))]
	public partial interface ICertificatesRequest : IRequest<CertificatesRequestParameters>
	{
	}

	public partial class CertificatesRequest : PlainRequestBase<CertificatesRequestParameters>, ICertificatesRequest
	{
		protected ICertificatesRequest Self => this;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCertificates;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		protected override bool CanBeEmpty => true;
		protected override bool IsEmpty => true;

		///<summary>/_ssl/certificates</summary>
        public CertificatesRequest() : base()
		{
		}
	}
}