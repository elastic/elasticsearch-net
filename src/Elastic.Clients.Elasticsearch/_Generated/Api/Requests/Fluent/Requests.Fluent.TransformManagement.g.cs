// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.TransformManagement
{
	public partial class DeleteTransformDescriptor : RequestDescriptorBase<DeleteTransformDescriptor, DeleteTransformRequestParameters, IDeleteTransformRequest>, IDeleteTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementDeleteTransform;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}</summary>
        public DeleteTransformDescriptor(Elastic.Clients.Elasticsearch.Name transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		public DeleteTransformDescriptor Force(bool? force = true) => Qs("force", force);
	}

	public partial class GetTransformDescriptor : RequestDescriptorBase<GetTransformDescriptor, GetTransformRequestParameters, IGetTransformRequest>, IGetTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementGetTransform;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}</summary>
        public GetTransformDescriptor(Elastic.Clients.Elasticsearch.Name? transform_id) : base(r => r.Optional("transform_id", transform_id))
		{
		}

		///<summary>/_transform</summary>
        public GetTransformDescriptor() : base()
		{
		}

		public GetTransformDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public GetTransformDescriptor From(int? from) => Qs("from", from);
		public GetTransformDescriptor Size(int? size) => Qs("size", size);
		public GetTransformDescriptor ExcludeGenerated(bool? excludeGenerated = true) => Qs("exclude_generated", excludeGenerated);
	}

	public partial class GetTransformStatsDescriptor : RequestDescriptorBase<GetTransformStatsDescriptor, GetTransformStatsRequestParameters, IGetTransformStatsRequest>, IGetTransformStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementGetTransformStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}/_stats</summary>
        public GetTransformStatsDescriptor(Elastic.Clients.Elasticsearch.Name transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		public GetTransformStatsDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public GetTransformStatsDescriptor From(long? from) => Qs("from", from);
		public GetTransformStatsDescriptor Size(long? size) => Qs("size", size);
	}

	public partial class PreviewTransformDescriptor : RequestDescriptorBase<PreviewTransformDescriptor, PreviewTransformRequestParameters, IPreviewTransformRequest>, IPreviewTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementPreviewTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}/_preview</summary>
        public PreviewTransformDescriptor(Elastic.Clients.Elasticsearch.Id? transform_id) : base(r => r.Optional("transform_id", transform_id))
		{
		}

		///<summary>/_transform/_preview</summary>
        public PreviewTransformDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Global.Reindex.Destination? IPreviewTransformRequest.Dest { get; set; }

		string? IPreviewTransformRequest.Description { get; set; }

		Elastic.Clients.Elasticsearch.Time? IPreviewTransformRequest.Frequency { get; set; }

		Elastic.Clients.Elasticsearch.TransformManagement.Pivot? IPreviewTransformRequest.Pivot { get; set; }

		Elastic.Clients.Elasticsearch.Global.Reindex.Source? IPreviewTransformRequest.Source { get; set; }

		Elastic.Clients.Elasticsearch.TransformManagement.Settings? IPreviewTransformRequest.Settings { get; set; }

		Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? IPreviewTransformRequest.Sync { get; set; }

		Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? IPreviewTransformRequest.RetentionPolicy { get; set; }

		Elastic.Clients.Elasticsearch.TransformManagement.Latest? IPreviewTransformRequest.Latest { get; set; }

		public PreviewTransformDescriptor Dest(Elastic.Clients.Elasticsearch.Global.Reindex.Destination? dest) => Assign(dest, (a, v) => a.Dest = v);
		public PreviewTransformDescriptor Description(string? description) => Assign(description, (a, v) => a.Description = v);
		public PreviewTransformDescriptor Frequency(Elastic.Clients.Elasticsearch.Time? frequency) => Assign(frequency, (a, v) => a.Frequency = v);
		public PreviewTransformDescriptor Pivot(Elastic.Clients.Elasticsearch.TransformManagement.Pivot? pivot) => Assign(pivot, (a, v) => a.Pivot = v);
		public PreviewTransformDescriptor Source(Elastic.Clients.Elasticsearch.Global.Reindex.Source? source) => Assign(source, (a, v) => a.Source = v);
		public PreviewTransformDescriptor Settings(Elastic.Clients.Elasticsearch.TransformManagement.Settings? settings) => Assign(settings, (a, v) => a.Settings = v);
		public PreviewTransformDescriptor Sync(Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? sync) => Assign(sync, (a, v) => a.Sync = v);
		public PreviewTransformDescriptor RetentionPolicy(Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? retentionPolicy) => Assign(retentionPolicy, (a, v) => a.RetentionPolicy = v);
		public PreviewTransformDescriptor Latest(Elastic.Clients.Elasticsearch.TransformManagement.Latest? latest) => Assign(latest, (a, v) => a.Latest = v);
	}

	public partial class PutTransformDescriptor : RequestDescriptorBase<PutTransformDescriptor, PutTransformRequestParameters, IPutTransformRequest>, IPutTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementPutTransform;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}</summary>
        public PutTransformDescriptor(Elastic.Clients.Elasticsearch.Id transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		public PutTransformDescriptor DeferValidation(bool? deferValidation = true) => Qs("defer_validation", deferValidation);
	}

	public partial class StartTransformDescriptor : RequestDescriptorBase<StartTransformDescriptor, StartTransformRequestParameters, IStartTransformRequest>, IStartTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementStartTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}/_start</summary>
        public StartTransformDescriptor(Elastic.Clients.Elasticsearch.Name transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		public StartTransformDescriptor Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
	}

	public partial class StopTransformDescriptor : RequestDescriptorBase<StopTransformDescriptor, StopTransformRequestParameters, IStopTransformRequest>, IStopTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementStopTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_transform/{transform_id}/_stop</summary>
        public StopTransformDescriptor(Elastic.Clients.Elasticsearch.Name transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		public StopTransformDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public StopTransformDescriptor Force(bool? force = true) => Qs("force", force);
		public StopTransformDescriptor Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
		public StopTransformDescriptor WaitForCheckpoint(bool? waitForCheckpoint = true) => Qs("wait_for_checkpoint", waitForCheckpoint);
		public StopTransformDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);
	}

	public partial class UpdateTransformDescriptor : RequestDescriptorBase<UpdateTransformDescriptor, UpdateTransformRequestParameters, IUpdateTransformRequest>, IUpdateTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementUpdateTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
	}
}