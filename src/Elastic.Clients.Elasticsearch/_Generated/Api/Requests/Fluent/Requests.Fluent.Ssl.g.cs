// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ssl
{
	public partial class AuthenticateDescriptor : RequestDescriptorBase<AuthenticateDescriptor, AuthenticateRequestParameters, IAuthenticateRequest>, IAuthenticateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityAuthenticate;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/_authenticate</summary>
        public AuthenticateDescriptor() : base()
		{
		}
	}

	public partial class ChangePasswordDescriptor : RequestDescriptorBase<ChangePasswordDescriptor, ChangePasswordRequestParameters, IChangePasswordRequest>, IChangePasswordRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityChangePassword;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_password</summary>
        public ChangePasswordDescriptor(Elastic.Clients.Elasticsearch.Username? username) : base(r => r.Optional("username", username))
		{
		}

		///<summary>/_security/user/_password</summary>
        public ChangePasswordDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Password? IChangePasswordRequest.Password { get; set; }

		public ChangePasswordDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		public ChangePasswordDescriptor Password(Elastic.Clients.Elasticsearch.Password? password) => Assign(password, (a, v) => a.Password = v);
	}

	public partial class ClearApiKeyCacheDescriptor : RequestDescriptorBase<ClearApiKeyCacheDescriptor, ClearApiKeyCacheRequestParameters, IClearApiKeyCacheRequest>, IClearApiKeyCacheRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearApiKeyCache;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key/{ids}/_clear_cache</summary>
        public ClearApiKeyCacheDescriptor(Elastic.Clients.Elasticsearch.Ids ids) : base(r => r.Required("ids", ids))
		{
		}
	}

	public partial class ClearCachedPrivilegesDescriptor : RequestDescriptorBase<ClearCachedPrivilegesDescriptor, ClearCachedPrivilegesRequestParameters, IClearCachedPrivilegesRequest>, IClearCachedPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/{application}/_clear_cache</summary>
        public ClearCachedPrivilegesDescriptor(Elastic.Clients.Elasticsearch.Name application) : base(r => r.Required("application", application))
		{
		}
	}

	public partial class ClearCachedRealmsDescriptor : RequestDescriptorBase<ClearCachedRealmsDescriptor, ClearCachedRealmsRequestParameters, IClearCachedRealmsRequest>, IClearCachedRealmsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRealms;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/realm/{realms}/_clear_cache</summary>
        public ClearCachedRealmsDescriptor(Elastic.Clients.Elasticsearch.Names realms) : base(r => r.Required("realms", realms))
		{
		}

		public ClearCachedRealmsDescriptor Usernames(IEnumerable<string>? usernames) => Qs("usernames", usernames);
	}

	public partial class ClearCachedRolesDescriptor : RequestDescriptorBase<ClearCachedRolesDescriptor, ClearCachedRolesRequestParameters, IClearCachedRolesRequest>, IClearCachedRolesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedRoles;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}/_clear_cache</summary>
        public ClearCachedRolesDescriptor(Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class ClearCachedServiceTokensDescriptor : RequestDescriptorBase<ClearCachedServiceTokensDescriptor, ClearCachedServiceTokensRequestParameters, IClearCachedServiceTokensRequest>, IClearCachedServiceTokensRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityClearCachedServiceTokens;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}/_clear_cache</summary>
        public ClearCachedServiceTokensDescriptor(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}
	}

	public partial class CreateApiKeyDescriptor : RequestDescriptorBase<CreateApiKeyDescriptor, CreateApiKeyRequestParameters, ICreateApiKeyRequest>, ICreateApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public CreateApiKeyDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Time? ICreateApiKeyRequest.Expiration { get; set; }

		Elastic.Clients.Elasticsearch.Name? ICreateApiKeyRequest.Name { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.Security.CreateApiKey.RoleDescriptor>? ICreateApiKeyRequest.RoleDescriptors { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? ICreateApiKeyRequest.Metadata { get; set; }

		public CreateApiKeyDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		public CreateApiKeyDescriptor Expiration(Elastic.Clients.Elasticsearch.Time? expiration) => Assign(expiration, (a, v) => a.Expiration = v);
		public CreateApiKeyDescriptor Name(Elastic.Clients.Elasticsearch.Name? name) => Assign(name, (a, v) => a.Name = v);
		public CreateApiKeyDescriptor RoleDescriptors(Dictionary<string, Elastic.Clients.Elasticsearch.Security.CreateApiKey.RoleDescriptor>? roleDescriptors) => Assign(roleDescriptors, (a, v) => a.RoleDescriptors = v);
		public CreateApiKeyDescriptor Metadata(Elastic.Clients.Elasticsearch.Metadata? metadata) => Assign(metadata, (a, v) => a.Metadata = v);
	}

	public partial class CreateServiceTokenDescriptor : RequestDescriptorBase<CreateServiceTokenDescriptor, CreateServiceTokenRequestParameters, ICreateServiceTokenRequest>, ICreateServiceTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public CreateServiceTokenDescriptor(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}

		///<summary>/_security/service/{namespace}/{service}/credential/token</summary>
        public CreateServiceTokenDescriptor(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	public partial class DeletePrivilegesDescriptor : RequestDescriptorBase<DeletePrivilegesDescriptor, DeletePrivilegesRequestParameters, IDeletePrivilegesRequest>, IDeletePrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeletePrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/{application}/{name}</summary>
        public DeletePrivilegesDescriptor(Elastic.Clients.Elasticsearch.Name application, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("application", application).Required("name", name))
		{
		}

		public DeletePrivilegesDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class DeleteRoleDescriptor : RequestDescriptorBase<DeleteRoleDescriptor, DeleteRoleRequestParameters, IDeleteRoleRequest>, IDeleteRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRole;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public DeleteRoleDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		public DeleteRoleDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class DeleteRoleMappingDescriptor : RequestDescriptorBase<DeleteRoleMappingDescriptor, DeleteRoleMappingRequestParameters, IDeleteRoleMappingRequest>, IDeleteRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public DeleteRoleMappingDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		public DeleteRoleMappingDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class DeleteServiceTokenDescriptor : RequestDescriptorBase<DeleteServiceTokenDescriptor, DeleteServiceTokenRequestParameters, IDeleteServiceTokenRequest>, IDeleteServiceTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteServiceToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential/token/{name}</summary>
        public DeleteServiceTokenDescriptor(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("ns", ns).Required("service", service).Required("name", name))
		{
		}

		public DeleteServiceTokenDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class DeleteUserDescriptor : RequestDescriptorBase<DeleteUserDescriptor, DeleteUserRequestParameters, IDeleteUserRequest>, IDeleteUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDeleteUser;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}</summary>
        public DeleteUserDescriptor(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		public DeleteUserDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class DisableUserDescriptor : RequestDescriptorBase<DisableUserDescriptor, DisableUserRequestParameters, IDisableUserRequest>, IDisableUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityDisableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_disable</summary>
        public DisableUserDescriptor(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		public DisableUserDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class EnableUserDescriptor : RequestDescriptorBase<EnableUserDescriptor, EnableUserRequestParameters, IEnableUserRequest>, IEnableUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityEnableUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}/_enable</summary>
        public EnableUserDescriptor(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		public EnableUserDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class GetApiKeyDescriptor : RequestDescriptorBase<GetApiKeyDescriptor, GetApiKeyRequestParameters, IGetApiKeyRequest>, IGetApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public GetApiKeyDescriptor() : base()
		{
		}

		public GetApiKeyDescriptor Id(Elastic.Clients.Elasticsearch.Id? id) => Qs("id", id);
		public GetApiKeyDescriptor Name(Elastic.Clients.Elasticsearch.Name? name) => Qs("name", name);
		public GetApiKeyDescriptor Owner(bool? owner = true) => Qs("owner", owner);
		public GetApiKeyDescriptor RealmName(Elastic.Clients.Elasticsearch.Name? realmName) => Qs("realm_name", realmName);
		public GetApiKeyDescriptor Username(Elastic.Clients.Elasticsearch.Username? username) => Qs("username", username);
	}

	public partial class GetBuiltinPrivilegesDescriptor : RequestDescriptorBase<GetBuiltinPrivilegesDescriptor, GetBuiltinPrivilegesRequestParameters, IGetBuiltinPrivilegesRequest>, IGetBuiltinPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetBuiltinPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/_builtin</summary>
        public GetBuiltinPrivilegesDescriptor() : base()
		{
		}
	}

	public partial class GetPrivilegesDescriptor : RequestDescriptorBase<GetPrivilegesDescriptor, GetPrivilegesRequestParameters, IGetPrivilegesRequest>, IGetPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege</summary>
        public GetPrivilegesDescriptor() : base()
		{
		}

		///<summary>/_security/privilege/{application}</summary>
        public GetPrivilegesDescriptor(Elastic.Clients.Elasticsearch.Name? application) : base(r => r.Optional("application", application))
		{
		}

		///<summary>/_security/privilege/{application}/{name}</summary>
        public GetPrivilegesDescriptor(Elastic.Clients.Elasticsearch.Name? application, Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("application", application).Optional("name", name))
		{
		}
	}

	public partial class GetRoleDescriptor : RequestDescriptorBase<GetRoleDescriptor, GetRoleRequestParameters, IGetRoleRequest>, IGetRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRole;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public GetRoleDescriptor(Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role</summary>
        public GetRoleDescriptor() : base()
		{
		}
	}

	public partial class GetRoleMappingDescriptor : RequestDescriptorBase<GetRoleMappingDescriptor, GetRoleMappingRequestParameters, IGetRoleMappingRequest>, IGetRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public GetRoleMappingDescriptor(Elastic.Clients.Elasticsearch.Name? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_security/role_mapping</summary>
        public GetRoleMappingDescriptor() : base()
		{
		}
	}

	public partial class GetServiceAccountsDescriptor : RequestDescriptorBase<GetServiceAccountsDescriptor, GetServiceAccountsRequestParameters, IGetServiceAccountsRequest>, IGetServiceAccountsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceAccounts;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}</summary>
        public GetServiceAccountsDescriptor(Elastic.Clients.Elasticsearch.Namespace? ns, Elastic.Clients.Elasticsearch.Service? service) : base(r => r.Optional("ns", ns).Optional("service", service))
		{
		}

		///<summary>/_security/service/{namespace}</summary>
        public GetServiceAccountsDescriptor(Elastic.Clients.Elasticsearch.Namespace? ns) : base(r => r.Optional("ns", ns))
		{
		}

		///<summary>/_security/service</summary>
        public GetServiceAccountsDescriptor() : base()
		{
		}
	}

	public partial class GetServiceCredentialsDescriptor : RequestDescriptorBase<GetServiceCredentialsDescriptor, GetServiceCredentialsRequestParameters, IGetServiceCredentialsRequest>, IGetServiceCredentialsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetServiceCredentials;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/service/{namespace}/{service}/credential</summary>
        public GetServiceCredentialsDescriptor(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Name service) : base(r => r.Required("ns", ns).Required("service", service))
		{
		}
	}

	public partial class GetTokenDescriptor : RequestDescriptorBase<GetTokenDescriptor, GetTokenRequestParameters, IGetTokenRequest>, IGetTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetToken;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/oauth2/token</summary>
        public GetTokenDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Security.GetToken.AccessTokenGrantType? IGetTokenRequest.GrantType { get; set; }

		string? IGetTokenRequest.Scope { get; set; }

		Elastic.Clients.Elasticsearch.Password? IGetTokenRequest.Password { get; set; }

		string? IGetTokenRequest.KerberosTicket { get; set; }

		string? IGetTokenRequest.RefreshToken { get; set; }

		Elastic.Clients.Elasticsearch.Username? IGetTokenRequest.Username { get; set; }

		public GetTokenDescriptor GrantType(Elastic.Clients.Elasticsearch.Security.GetToken.AccessTokenGrantType? grantType) => Assign(grantType, (a, v) => a.GrantType = v);
		public GetTokenDescriptor Scope(string? scope) => Assign(scope, (a, v) => a.Scope = v);
		public GetTokenDescriptor Password(Elastic.Clients.Elasticsearch.Password? password) => Assign(password, (a, v) => a.Password = v);
		public GetTokenDescriptor KerberosTicket(string? kerberosTicket) => Assign(kerberosTicket, (a, v) => a.KerberosTicket = v);
		public GetTokenDescriptor RefreshToken(string? refreshToken) => Assign(refreshToken, (a, v) => a.RefreshToken = v);
		public GetTokenDescriptor Username(Elastic.Clients.Elasticsearch.Username? username) => Assign(username, (a, v) => a.Username = v);
	}

	public partial class GetUserDescriptor : RequestDescriptorBase<GetUserDescriptor, GetUserRequestParameters, IGetUserRequest>, IGetUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUser;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/user</summary>
        public GetUserDescriptor() : base()
		{
		}
	}

	public partial class GetUserPrivilegesDescriptor : RequestDescriptorBase<GetUserPrivilegesDescriptor, GetUserPrivilegesRequestParameters, IGetUserPrivilegesRequest>, IGetUserPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGetUserPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/_privileges</summary>
        public GetUserPrivilegesDescriptor() : base()
		{
		}

		public GetUserPrivilegesDescriptor Application(Elastic.Clients.Elasticsearch.Name? application) => Qs("application", application);
		public GetUserPrivilegesDescriptor Priviledge(Elastic.Clients.Elasticsearch.Name? priviledge) => Qs("priviledge", priviledge);
	}

	public partial class GrantApiKeyDescriptor : RequestDescriptorBase<GrantApiKeyDescriptor, GrantApiKeyRequestParameters, IGrantApiKeyRequest>, IGrantApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityGrantApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key/grant</summary>
        public GrantApiKeyDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKey IGrantApiKeyRequest.ApiKey { get; set; }

		Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKeyGrantType IGrantApiKeyRequest.GrantType { get; set; }

		string? IGrantApiKeyRequest.AccessToken { get; set; }

		Elastic.Clients.Elasticsearch.Username? IGrantApiKeyRequest.Username { get; set; }

		Elastic.Clients.Elasticsearch.Password? IGrantApiKeyRequest.Password { get; set; }

		public GrantApiKeyDescriptor ApiKey(Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKey apiKey) => Assign(apiKey, (a, v) => a.ApiKey = v);
		public GrantApiKeyDescriptor GrantType(Elastic.Clients.Elasticsearch.Security.GrantApiKey.ApiKeyGrantType grantType) => Assign(grantType, (a, v) => a.GrantType = v);
		public GrantApiKeyDescriptor AccessToken(string? accessToken) => Assign(accessToken, (a, v) => a.AccessToken = v);
		public GrantApiKeyDescriptor Username(Elastic.Clients.Elasticsearch.Username? username) => Assign(username, (a, v) => a.Username = v);
		public GrantApiKeyDescriptor Password(Elastic.Clients.Elasticsearch.Password? password) => Assign(password, (a, v) => a.Password = v);
	}

	public partial class HasPrivilegesDescriptor : RequestDescriptorBase<HasPrivilegesDescriptor, HasPrivilegesRequestParameters, IHasPrivilegesRequest>, IHasPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityHasPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/_has_privileges</summary>
        public HasPrivilegesDescriptor() : base()
		{
		}

		///<summary>/_security/user/{user}/_has_privileges</summary>
        public HasPrivilegesDescriptor(Elastic.Clients.Elasticsearch.Name? user) : base(r => r.Optional("user", user))
		{
		}

		IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.ApplicationPrivilegesCheck>? IHasPrivilegesRequest.Application { get; set; }

		IEnumerable<string>? IHasPrivilegesRequest.Cluster { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.IndexPrivilegesCheck>? IHasPrivilegesRequest.Index { get; set; }

		public HasPrivilegesDescriptor Application(IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.ApplicationPrivilegesCheck>? application) => Assign(application, (a, v) => a.Application = v);
		public HasPrivilegesDescriptor Cluster(IEnumerable<string>? cluster) => Assign(cluster, (a, v) => a.Cluster = v);
		public HasPrivilegesDescriptor Index(IEnumerable<Elastic.Clients.Elasticsearch.Security.HasPrivileges.IndexPrivilegesCheck>? index) => Assign(index, (a, v) => a.Index = v);
	}

	public partial class InvalidateApiKeyDescriptor : RequestDescriptorBase<InvalidateApiKeyDescriptor, InvalidateApiKeyRequestParameters, IInvalidateApiKeyRequest>, IInvalidateApiKeyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/api_key</summary>
        public InvalidateApiKeyDescriptor() : base()
		{
		}

		Elastic.Clients.Elasticsearch.Id? IInvalidateApiKeyRequest.Id { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Id>? IInvalidateApiKeyRequest.Ids { get; set; }

		Elastic.Clients.Elasticsearch.Name? IInvalidateApiKeyRequest.Name { get; set; }

		bool? IInvalidateApiKeyRequest.Owner { get; set; }

		string? IInvalidateApiKeyRequest.RealmName { get; set; }

		Elastic.Clients.Elasticsearch.Username? IInvalidateApiKeyRequest.Username { get; set; }

		public InvalidateApiKeyDescriptor Id(Elastic.Clients.Elasticsearch.Id? id) => Assign(id, (a, v) => a.Id = v);
		public InvalidateApiKeyDescriptor Ids(IEnumerable<Elastic.Clients.Elasticsearch.Id>? ids) => Assign(ids, (a, v) => a.Ids = v);
		public InvalidateApiKeyDescriptor Name(Elastic.Clients.Elasticsearch.Name? name) => Assign(name, (a, v) => a.Name = v);
		public InvalidateApiKeyDescriptor Owner(bool? owner = true) => Assign(owner, (a, v) => a.Owner = v);
		public InvalidateApiKeyDescriptor RealmName(string? realmName) => Assign(realmName, (a, v) => a.RealmName = v);
		public InvalidateApiKeyDescriptor Username(Elastic.Clients.Elasticsearch.Username? username) => Assign(username, (a, v) => a.Username = v);
	}

	public partial class InvalidateTokenDescriptor : RequestDescriptorBase<InvalidateTokenDescriptor, InvalidateTokenRequestParameters, IInvalidateTokenRequest>, IInvalidateTokenRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityInvalidateToken;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_security/oauth2/token</summary>
        public InvalidateTokenDescriptor() : base()
		{
		}

		string? IInvalidateTokenRequest.Token { get; set; }

		string? IInvalidateTokenRequest.RefreshToken { get; set; }

		Elastic.Clients.Elasticsearch.Name? IInvalidateTokenRequest.RealmName { get; set; }

		Elastic.Clients.Elasticsearch.Username? IInvalidateTokenRequest.Username { get; set; }

		public InvalidateTokenDescriptor Token(string? token) => Assign(token, (a, v) => a.Token = v);
		public InvalidateTokenDescriptor RefreshToken(string? refreshToken) => Assign(refreshToken, (a, v) => a.RefreshToken = v);
		public InvalidateTokenDescriptor RealmName(Elastic.Clients.Elasticsearch.Name? realmName) => Assign(realmName, (a, v) => a.RealmName = v);
		public InvalidateTokenDescriptor Username(Elastic.Clients.Elasticsearch.Username? username) => Assign(username, (a, v) => a.Username = v);
	}

	public partial class PutPrivilegesDescriptor : RequestDescriptorBase<PutPrivilegesDescriptor, PutPrivilegesRequestParameters, IPutPrivilegesRequest>, IPutPrivilegesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/privilege/</summary>
        public PutPrivilegesDescriptor() : base()
		{
		}

		public PutPrivilegesDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
	}

	public partial class PutRoleDescriptor : RequestDescriptorBase<PutRoleDescriptor, PutRoleRequestParameters, IPutRoleRequest>, IPutRoleRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRole;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/role/{name}</summary>
        public PutRoleDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? IPutRoleRequest.Applications { get; set; }

		IEnumerable<string>? IPutRoleRequest.Cluster { get; set; }

		Dictionary<string, object>? IPutRoleRequest.Global { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? IPutRoleRequest.Indices { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? IPutRoleRequest.Metadata { get; set; }

		IEnumerable<string>? IPutRoleRequest.RunAs { get; set; }

		Elastic.Clients.Elasticsearch.Security.GetRole.TransientMetadata? IPutRoleRequest.TransientMetadata { get; set; }

		public PutRoleDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		public PutRoleDescriptor Applications(IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivileges>? applications) => Assign(applications, (a, v) => a.Applications = v);
		public PutRoleDescriptor Cluster(IEnumerable<string>? cluster) => Assign(cluster, (a, v) => a.Cluster = v);
		public PutRoleDescriptor Global(Dictionary<string, object>? global) => Assign(global, (a, v) => a.Global = v);
		public PutRoleDescriptor Indices(IEnumerable<Elastic.Clients.Elasticsearch.Security.IndicesPrivileges>? indices) => Assign(indices, (a, v) => a.Indices = v);
		public PutRoleDescriptor Metadata(Elastic.Clients.Elasticsearch.Metadata? metadata) => Assign(metadata, (a, v) => a.Metadata = v);
		public PutRoleDescriptor RunAs(IEnumerable<string>? runAs) => Assign(runAs, (a, v) => a.RunAs = v);
		public PutRoleDescriptor TransientMetadata(Elastic.Clients.Elasticsearch.Security.GetRole.TransientMetadata? transientMetadata) => Assign(transientMetadata, (a, v) => a.TransientMetadata = v);
	}

	public partial class PutRoleMappingDescriptor : RequestDescriptorBase<PutRoleMappingDescriptor, PutRoleMappingRequestParameters, IPutRoleMappingRequest>, IPutRoleMappingRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutRoleMapping;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/role_mapping/{name}</summary>
        public PutRoleMappingDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		bool? IPutRoleMappingRequest.Enabled { get; set; }

		Elastic.Clients.Elasticsearch.Metadata? IPutRoleMappingRequest.Metadata { get; set; }

		IEnumerable<string>? IPutRoleMappingRequest.Roles { get; set; }

		Elastic.Clients.Elasticsearch.Security.RoleMappingRuleBase? IPutRoleMappingRequest.Rules { get; set; }

		IEnumerable<string>? IPutRoleMappingRequest.RunAs { get; set; }

		public PutRoleMappingDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		public PutRoleMappingDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a.Enabled = v);
		public PutRoleMappingDescriptor Metadata(Elastic.Clients.Elasticsearch.Metadata? metadata) => Assign(metadata, (a, v) => a.Metadata = v);
		public PutRoleMappingDescriptor Roles(IEnumerable<string>? roles) => Assign(roles, (a, v) => a.Roles = v);
		public PutRoleMappingDescriptor Rules(Elastic.Clients.Elasticsearch.Security.RoleMappingRuleBase? rules) => Assign(rules, (a, v) => a.Rules = v);
		public PutRoleMappingDescriptor RunAs(IEnumerable<string>? runAs) => Assign(runAs, (a, v) => a.RunAs = v);
	}

	public partial class PutUserDescriptor : RequestDescriptorBase<PutUserDescriptor, PutUserRequestParameters, IPutUserRequest>, IPutUserRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityPutUser;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_security/user/{username}</summary>
        public PutUserDescriptor(Elastic.Clients.Elasticsearch.Username username) : base(r => r.Required("username", username))
		{
		}

		Elastic.Clients.Elasticsearch.Metadata? IPutUserRequest.Metadata { get; set; }

		Elastic.Clients.Elasticsearch.Password? IPutUserRequest.Password { get; set; }

		string? IPutUserRequest.PasswordHash { get; set; }

		IEnumerable<string>? IPutUserRequest.Roles { get; set; }

		bool? IPutUserRequest.Enabled { get; set; }

		public PutUserDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		public PutUserDescriptor Metadata(Elastic.Clients.Elasticsearch.Metadata? metadata) => Assign(metadata, (a, v) => a.Metadata = v);
		public PutUserDescriptor Password(Elastic.Clients.Elasticsearch.Password? password) => Assign(password, (a, v) => a.Password = v);
		public PutUserDescriptor PasswordHash(string? passwordHash) => Assign(passwordHash, (a, v) => a.PasswordHash = v);
		public PutUserDescriptor Roles(IEnumerable<string>? roles) => Assign(roles, (a, v) => a.Roles = v);
		public PutUserDescriptor Enabled(bool? enabled = true) => Assign(enabled, (a, v) => a.Enabled = v);
	}

	public partial class CertificatesDescriptor : RequestDescriptorBase<CertificatesDescriptor, CertificatesRequestParameters, ICertificatesRequest>, ICertificatesRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCertificates;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_ssl/certificates</summary>
        public CertificatesDescriptor() : base()
		{
		}
	}
}