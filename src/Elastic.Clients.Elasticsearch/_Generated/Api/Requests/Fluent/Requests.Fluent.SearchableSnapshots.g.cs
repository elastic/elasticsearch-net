// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.SearchableSnapshots
{
	public partial class ClearCacheDescriptor : RequestDescriptorBase<ClearCacheDescriptor, ClearCacheRequestParameters, IClearCacheRequest>, IClearCacheRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SearchableSnapshotsClearCache;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_searchable_snapshots/cache/clear</summary>
        public ClearCacheDescriptor() : base()
		{
		}

		///<summary>/{index}/_searchable_snapshots/cache/clear</summary>
        public ClearCacheDescriptor(Elastic.Clients.Elasticsearch.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public ClearCacheDescriptor ExpandWildcards(Elastic.Clients.Elasticsearch.ExpandWildcards? expandWildcards) => Qs("expand_wildcards", expandWildcards);
		public ClearCacheDescriptor AllowNoIndices(bool? allowNoIndices = true) => Qs("allow_no_indices", allowNoIndices);
		public ClearCacheDescriptor IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);
	}

	public partial class MountDescriptor : RequestDescriptorBase<MountDescriptor, MountRequestParameters, IMountRequest>, IMountRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SearchableSnapshotsMount;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_snapshot/{repository}/{snapshot}/_mount</summary>
        public MountDescriptor(Elastic.Clients.Elasticsearch.Name repository, Elastic.Clients.Elasticsearch.Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
		{
		}

		Elastic.Clients.Elasticsearch.IndexName IMountRequest.Index { get; set; }

		Elastic.Clients.Elasticsearch.IndexName? IMountRequest.RenamedIndex { get; set; }

		Dictionary<string, object>? IMountRequest.IndexSettings { get; set; }

		IEnumerable<string>? IMountRequest.IgnoreIndexSettings { get; set; }

		public MountDescriptor MasterTimeout(Elastic.Clients.Elasticsearch.Time? masterTimeout) => Qs("master_timeout", masterTimeout);
		public MountDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);
		public MountDescriptor Storage(string? storage) => Qs("storage", storage);
		public MountDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index) => Assign(index, (a, v) => a.Index = v);
		public MountDescriptor RenamedIndex(Elastic.Clients.Elasticsearch.IndexName? renamedIndex) => Assign(renamedIndex, (a, v) => a.RenamedIndex = v);
		public MountDescriptor IndexSettings(Dictionary<string, object>? indexSettings) => Assign(indexSettings, (a, v) => a.IndexSettings = v);
		public MountDescriptor IgnoreIndexSettings(IEnumerable<string>? ignoreIndexSettings) => Assign(ignoreIndexSettings, (a, v) => a.IgnoreIndexSettings = v);
	}

	public partial class StatsDescriptor : RequestDescriptorBase<StatsDescriptor, StatsRequestParameters, IStatsRequest>, IStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SearchableSnapshotsStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_searchable_snapshots/stats</summary>
        public StatsDescriptor() : base()
		{
		}

		///<summary>/{index}/_searchable_snapshots/stats</summary>
        public StatsDescriptor(Elastic.Clients.Elasticsearch.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		public StatsDescriptor Level(Elastic.Clients.Elasticsearch.SearchableSnapshots.StatsLevel? level) => Qs("level", level);
	}
}