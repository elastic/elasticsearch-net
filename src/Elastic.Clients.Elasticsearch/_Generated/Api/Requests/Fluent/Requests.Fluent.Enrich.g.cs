// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Enrich
{
	public partial class DeletePolicyDescriptor : RequestDescriptorBase<DeletePolicyDescriptor, DeletePolicyRequestParameters, IDeletePolicyRequest>, IDeletePolicyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichDeletePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_enrich/policy/{name}</summary>
        public DeletePolicyDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}
	}

	public partial class ExecutePolicyDescriptor : RequestDescriptorBase<ExecutePolicyDescriptor, ExecutePolicyRequestParameters, IExecutePolicyRequest>, IExecutePolicyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichExecutePolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_enrich/policy/{name}/_execute</summary>
        public ExecutePolicyDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		public ExecutePolicyDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);
	}

	public partial class GetPolicyDescriptor : RequestDescriptorBase<GetPolicyDescriptor, GetPolicyRequestParameters, IGetPolicyRequest>, IGetPolicyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichGetPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_enrich/policy/{name}</summary>
        public GetPolicyDescriptor(Elastic.Clients.Elasticsearch.Names? name) : base(r => r.Optional("name", name))
		{
		}

		///<summary>/_enrich/policy</summary>
        public GetPolicyDescriptor() : base()
		{
		}
	}

	public partial class PutPolicyDescriptor : RequestDescriptorBase<PutPolicyDescriptor, PutPolicyRequestParameters, IPutPolicyRequest>, IPutPolicyRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichPutPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_enrich/policy/{name}</summary>
        public PutPolicyDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		Elastic.Clients.Elasticsearch.Enrich.Policy? IPutPolicyRequest.GeoMatch { get; set; }

		Elastic.Clients.Elasticsearch.Enrich.Policy? IPutPolicyRequest.Match { get; set; }

		public PutPolicyDescriptor GeoMatch(Elastic.Clients.Elasticsearch.Enrich.Policy? geoMatch) => Assign(geoMatch, (a, v) => a.GeoMatch = v);
		public PutPolicyDescriptor Match(Elastic.Clients.Elasticsearch.Enrich.Policy? match) => Assign(match, (a, v) => a.Match = v);
	}

	public partial class StatsDescriptor : RequestDescriptorBase<StatsDescriptor, StatsRequestParameters, IStatsRequest>, IStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_enrich/_stats</summary>
        public StatsDescriptor() : base()
		{
		}
	}
}