// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Rollup
{
	public partial class DeleteJobDescriptor : RequestDescriptorBase<DeleteJobDescriptor, DeleteJobRequestParameters, IDeleteJobRequest>, IDeleteJobRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupDeleteJob;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/job/{id}</summary>
        public DeleteJobDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}
	}

	public partial class GetJobsDescriptor : RequestDescriptorBase<GetJobsDescriptor, GetJobsRequestParameters, IGetJobsRequest>, IGetJobsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupGetJobs;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/job/{id}</summary>
        public GetJobsDescriptor(Elastic.Clients.Elasticsearch.Id? id) : base(r => r.Optional("id", id))
		{
		}

		///<summary>/_rollup/job/</summary>
        public GetJobsDescriptor() : base()
		{
		}
	}

	public partial class GetRollupCapsDescriptor : RequestDescriptorBase<GetRollupCapsDescriptor, GetRollupCapsRequestParameters, IGetRollupCapsRequest>, IGetRollupCapsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupGetRollupCaps;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/data/{id}</summary>
        public GetRollupCapsDescriptor(Elastic.Clients.Elasticsearch.Id? id) : base(r => r.Optional("id", id))
		{
		}

		///<summary>/_rollup/data/</summary>
        public GetRollupCapsDescriptor() : base()
		{
		}
	}

	public partial class GetRollupIndexCapsDescriptor : RequestDescriptorBase<GetRollupIndexCapsDescriptor, GetRollupIndexCapsRequestParameters, IGetRollupIndexCapsRequest>, IGetRollupIndexCapsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupGetRollupIndexCaps;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_rollup/data</summary>
        public GetRollupIndexCapsDescriptor(Elastic.Clients.Elasticsearch.Id index) : base(r => r.Required("index", index))
		{
		}
	}

	public partial class PutJobDescriptor : RequestDescriptorBase<PutJobDescriptor, PutJobRequestParameters, IPutJobRequest>, IPutJobRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupPutJob;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/job/{id}</summary>
        public PutJobDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}

		string? IPutJobRequest.Cron { get; set; }

		Elastic.Clients.Elasticsearch.Rollup.Groupings? IPutJobRequest.Groups { get; set; }

		string? IPutJobRequest.IndexPattern { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Rollup.FieldMetric>? IPutJobRequest.Metrics { get; set; }

		long? IPutJobRequest.PageSize { get; set; }

		Elastic.Clients.Elasticsearch.IndexName? IPutJobRequest.RollupIndex { get; set; }

		public PutJobDescriptor Cron(string? cron) => Assign(cron, (a, v) => a.Cron = v);
		public PutJobDescriptor Groups(Elastic.Clients.Elasticsearch.Rollup.Groupings? groups) => Assign(groups, (a, v) => a.Groups = v);
		public PutJobDescriptor IndexPattern(string? indexPattern) => Assign(indexPattern, (a, v) => a.IndexPattern = v);
		public PutJobDescriptor Metrics(IEnumerable<Elastic.Clients.Elasticsearch.Rollup.FieldMetric>? metrics) => Assign(metrics, (a, v) => a.Metrics = v);
		public PutJobDescriptor PageSize(long? pageSize) => Assign(pageSize, (a, v) => a.PageSize = v);
		public PutJobDescriptor RollupIndex(Elastic.Clients.Elasticsearch.IndexName? rollupIndex) => Assign(rollupIndex, (a, v) => a.RollupIndex = v);
	}

	public partial class RollupDescriptor : RequestDescriptorBase<RollupDescriptor, RollupRequestParameters, IRollupRequest>, IRollupRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupRollup;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_rollup/{rollup_index}</summary>
        public RollupDescriptor(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName rollup_index) : base(r => r.Required("index", index).Required("rollup_index", rollup_index))
		{
		}
	}

	public partial class RollupSearchDescriptor : RequestDescriptorBase<RollupSearchDescriptor, RollupSearchRequestParameters, IRollupSearchRequest>, IRollupSearchRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupRollupSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_rollup_search</summary>
        public RollupSearchDescriptor(Elastic.Clients.Elasticsearch.Indices index) : base(r => r.Required("index", index))
		{
		}

		Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? IRollupSearchRequest.Aggs { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? IRollupSearchRequest.Query { get; set; }

		int? IRollupSearchRequest.Size { get; set; }

		public RollupSearchDescriptor RestTotalHitsAsInt(bool? restTotalHitsAsInt = true) => Qs("rest_total_hits_as_int", restTotalHitsAsInt);
		public RollupSearchDescriptor TypedKeys(bool? typedKeys = true) => Qs("typed_keys", typedKeys);
		public RollupSearchDescriptor Aggs(Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? aggs) => Assign(aggs, (a, v) => a.Aggs = v);
		public RollupSearchDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? query) => Assign(query, (a, v) => a.Query = v);
		public RollupSearchDescriptor Size(int? size) => Assign(size, (a, v) => a.Size = v);
	}

	public partial class StartJobDescriptor : RequestDescriptorBase<StartJobDescriptor, StartJobRequestParameters, IStartJobRequest>, IStartJobRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupStartJob;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/job/{id}/_start</summary>
        public StartJobDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}
	}

	public partial class StopJobDescriptor : RequestDescriptorBase<StopJobDescriptor, StopJobRequestParameters, IStopJobRequest>, IStopJobRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.RollupStopJob;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_rollup/job/{id}/_stop</summary>
        public StopJobDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}

		public StopJobDescriptor Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
		public StopJobDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);
	}
}