// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Graph
{
	public partial class ExploreDescriptor : RequestDescriptorBase<ExploreDescriptor, ExploreRequestParameters, IExploreRequest>, IExploreRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.GraphExplore;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/{index}/_graph/explore</summary>
        public ExploreDescriptor(Elastic.Clients.Elasticsearch.Indices index) : base(r => r.Required("index", index))
		{
		}

		Elastic.Clients.Elasticsearch.Graph.Hop? IExploreRequest.Connections { get; set; }

		Elastic.Clients.Elasticsearch.Graph.ExploreControls? IExploreRequest.Controls { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer? IExploreRequest.Query { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Graph.VertexDefinition>? IExploreRequest.Vertices { get; set; }

		public ExploreDescriptor Routing(Elastic.Clients.Elasticsearch.Routing? routing) => Qs("routing", routing);
		public ExploreDescriptor Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
		public ExploreDescriptor Connections(Elastic.Clients.Elasticsearch.Graph.Hop? connections) => Assign(connections, (a, v) => a.Connections = v);
		public ExploreDescriptor Controls(Elastic.Clients.Elasticsearch.Graph.ExploreControls? controls) => Assign(controls, (a, v) => a.Controls = v);
		public ExploreDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer? query) => Assign(query, (a, v) => a.Query = v);
		public ExploreDescriptor Vertices(IEnumerable<Elastic.Clients.Elasticsearch.Graph.VertexDefinition>? vertices) => Assign(vertices, (a, v) => a.Vertices = v);
	}
}