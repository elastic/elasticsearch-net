// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;

#nullable restore
namespace Elastic.Clients.Elasticsearch.AsyncSearch
{
	public partial class DeleteDescriptor : RequestDescriptorBase<DeleteDescriptor, DeleteRequestParameters, IDeleteRequest>, IDeleteRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchDelete;
		protected override HttpMethod HttpMethod => HttpMethod.DELETE;
		protected override bool SupportsBody => false;
		///<summary>/_async_search/{id}</summary>
        public DeleteDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}
	}

	public partial class GetDescriptor : RequestDescriptorBase<GetDescriptor, GetRequestParameters, IGetRequest>, IGetRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchGet;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_async_search/{id}</summary>
        public GetDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}

		public GetDescriptor KeepAlive(Elastic.Clients.Elasticsearch.Time? keepAlive) => Qs("keep_alive", keepAlive);
		public GetDescriptor TypedKeys(bool? typedKeys = true) => Qs("typed_keys", typedKeys);
		public GetDescriptor WaitForCompletionTimeout(Elastic.Clients.Elasticsearch.Time? waitForCompletionTimeout) => Qs("wait_for_completion_timeout", waitForCompletionTimeout);
	}

	public partial class StatusDescriptor : RequestDescriptorBase<StatusDescriptor, StatusRequestParameters, IStatusRequest>, IStatusRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchStatus;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		///<summary>/_async_search/status/{id}</summary>
        public StatusDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
		{
		}
	}

	public partial class SubmitDescriptor : RequestDescriptorBase<SubmitDescriptor, SubmitRequestParameters, ISubmitRequest>, ISubmitRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.AsyncSearchSubmit;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => false;
		///<summary>/_async_search</summary>
        public SubmitDescriptor() : base()
		{
		}

		///<summary>/{index}/_async_search</summary>
        public SubmitDescriptor(Elastic.Clients.Elasticsearch.Indices? index) : base(r => r.Optional("index", index))
		{
		}

		Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? ISubmitRequest.Aggs { get; set; }

		bool? ISubmitRequest.AllowNoIndices { get; set; }

		bool? ISubmitRequest.AllowPartialSearchResults { get; set; }

		string? ISubmitRequest.Analyzer { get; set; }

		bool? ISubmitRequest.AnalyzeWildcard { get; set; }

		Elastic.Clients.Elasticsearch.Global.Search.FieldCollapse? ISubmitRequest.Collapse { get; set; }

		Elastic.Clients.Elasticsearch.DefaultOperator? ISubmitRequest.DefaultOperator { get; set; }

		string? ISubmitRequest.Df { get; set; }

		Elastic.Clients.Elasticsearch.Fields? ISubmitRequest.DocvalueFields { get; set; }

		Elastic.Clients.Elasticsearch.ExpandWildcards? ISubmitRequest.ExpandWildcards { get; set; }

		bool? ISubmitRequest.Explain { get; set; }

		int? ISubmitRequest.From { get; set; }

		Elastic.Clients.Elasticsearch.Global.Search.Highlight? ISubmitRequest.Highlight { get; set; }

		bool? ISubmitRequest.IgnoreThrottled { get; set; }

		bool? ISubmitRequest.IgnoreUnavailable { get; set; }

		IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? ISubmitRequest.IndicesBoost { get; set; }

		Elastic.Clients.Elasticsearch.Time? ISubmitRequest.KeepAlive { get; set; }

		bool? ISubmitRequest.Lenient { get; set; }

		long? ISubmitRequest.MaxConcurrentShardRequests { get; set; }

		double? ISubmitRequest.MinScore { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? ISubmitRequest.PostFilter { get; set; }

		string? ISubmitRequest.Preference { get; set; }

		bool? ISubmitRequest.Profile { get; set; }

		Elastic.Clients.Elasticsearch.Global.Search.PointInTimeReference? ISubmitRequest.Pit { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? ISubmitRequest.Query { get; set; }

		string? ISubmitRequest.QueryOnQueryString { get; set; }

		bool? ISubmitRequest.RequestCache { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Global.Search.Rescore>? ISubmitRequest.Rescore { get; set; }

		Elastic.Clients.Elasticsearch.Routing? ISubmitRequest.Routing { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? ISubmitRequest.ScriptFields { get; set; }

		Elastic.Clients.Elasticsearch.Global.Search.SortResults? ISubmitRequest.SearchAfter { get; set; }

		Elastic.Clients.Elasticsearch.SearchType? ISubmitRequest.SearchType { get; set; }

		bool? ISubmitRequest.SequenceNumberPrimaryTerm { get; set; }

		int? ISubmitRequest.Size { get; set; }

		Elastic.Clients.Elasticsearch.Global.Search.Sort? ISubmitRequest.Sort { get; set; }

		Union<bool, Elastic.Clients.Elasticsearch.Global.Search.SourceFilter>? ISubmitRequest.Source { get; set; }

		IEnumerable<string>? ISubmitRequest.Stats { get; set; }

		Elastic.Clients.Elasticsearch.Fields? ISubmitRequest.StoredFields { get; set; }

		Dictionary<string, Elastic.Clients.Elasticsearch.Global.Search.SuggestContainer>? ISubmitRequest.Suggest { get; set; }

		Elastic.Clients.Elasticsearch.Field? ISubmitRequest.SuggestField { get; set; }

		Elastic.Clients.Elasticsearch.SuggestMode? ISubmitRequest.SuggestMode { get; set; }

		long? ISubmitRequest.SuggestSize { get; set; }

		string? ISubmitRequest.SuggestText { get; set; }

		long? ISubmitRequest.TerminateAfter { get; set; }

		string? ISubmitRequest.Timeout { get; set; }

		bool? ISubmitRequest.TrackScores { get; set; }

		bool? ISubmitRequest.TrackTotalHits { get; set; }

		bool? ISubmitRequest.Version { get; set; }

		IEnumerable<Union<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.DateField>>? ISubmitRequest.Fields { get; set; }

		Elastic.Clients.Elasticsearch.Mapping.RuntimeFields? ISubmitRequest.RuntimeMappings { get; set; }

		public SubmitDescriptor BatchedReduceSize(long? batchedReduceSize) => Qs("batched_reduce_size", batchedReduceSize);
		public SubmitDescriptor WaitForCompletionTimeout(Elastic.Clients.Elasticsearch.Time? waitForCompletionTimeout) => Qs("wait_for_completion_timeout", waitForCompletionTimeout);
		public SubmitDescriptor KeepOnCompletion(bool? keepOnCompletion = true) => Qs("keep_on_completion", keepOnCompletion);
		public SubmitDescriptor TypedKeys(bool? typedKeys = true) => Qs("typed_keys", typedKeys);
		public SubmitDescriptor Aggs(Dictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationContainer>? aggs) => Assign(aggs, (a, v) => a.Aggs = v);
		public SubmitDescriptor AllowNoIndices(bool? allowNoIndices = true) => Assign(allowNoIndices, (a, v) => a.AllowNoIndices = v);
		public SubmitDescriptor AllowPartialSearchResults(bool? allowPartialSearchResults = true) => Assign(allowPartialSearchResults, (a, v) => a.AllowPartialSearchResults = v);
		public SubmitDescriptor Analyzer(string? analyzer) => Assign(analyzer, (a, v) => a.Analyzer = v);
		public SubmitDescriptor AnalyzeWildcard(bool? analyzeWildcard = true) => Assign(analyzeWildcard, (a, v) => a.AnalyzeWildcard = v);
		public SubmitDescriptor Collapse(Elastic.Clients.Elasticsearch.Global.Search.FieldCollapse? collapse) => Assign(collapse, (a, v) => a.Collapse = v);
		public SubmitDescriptor DefaultOperator(Elastic.Clients.Elasticsearch.DefaultOperator? defaultOperator) => Assign(defaultOperator, (a, v) => a.DefaultOperator = v);
		public SubmitDescriptor Df(string? df) => Assign(df, (a, v) => a.Df = v);
		public SubmitDescriptor DocvalueFields(Elastic.Clients.Elasticsearch.Fields? docvalueFields) => Assign(docvalueFields, (a, v) => a.DocvalueFields = v);
		public SubmitDescriptor ExpandWildcards(Elastic.Clients.Elasticsearch.ExpandWildcards? expandWildcards) => Assign(expandWildcards, (a, v) => a.ExpandWildcards = v);
		public SubmitDescriptor Explain(bool? explain = true) => Assign(explain, (a, v) => a.Explain = v);
		public SubmitDescriptor From(int? from) => Assign(from, (a, v) => a.From = v);
		public SubmitDescriptor Highlight(Elastic.Clients.Elasticsearch.Global.Search.Highlight? highlight) => Assign(highlight, (a, v) => a.Highlight = v);
		public SubmitDescriptor IgnoreThrottled(bool? ignoreThrottled = true) => Assign(ignoreThrottled, (a, v) => a.IgnoreThrottled = v);
		public SubmitDescriptor IgnoreUnavailable(bool? ignoreUnavailable = true) => Assign(ignoreUnavailable, (a, v) => a.IgnoreUnavailable = v);
		public SubmitDescriptor IndicesBoost(IEnumerable<Dictionary<Elastic.Clients.Elasticsearch.IndexName, double>>? indicesBoost) => Assign(indicesBoost, (a, v) => a.IndicesBoost = v);
		public SubmitDescriptor KeepAlive(Elastic.Clients.Elasticsearch.Time? keepAlive) => Assign(keepAlive, (a, v) => a.KeepAlive = v);
		public SubmitDescriptor Lenient(bool? lenient = true) => Assign(lenient, (a, v) => a.Lenient = v);
		public SubmitDescriptor MaxConcurrentShardRequests(long? maxConcurrentShardRequests) => Assign(maxConcurrentShardRequests, (a, v) => a.MaxConcurrentShardRequests = v);
		public SubmitDescriptor MinScore(double? minScore) => Assign(minScore, (a, v) => a.MinScore = v);
		public SubmitDescriptor PostFilter(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? postFilter) => Assign(postFilter, (a, v) => a.PostFilter = v);
		public SubmitDescriptor Preference(string? preference) => Assign(preference, (a, v) => a.Preference = v);
		public SubmitDescriptor Profile(bool? profile = true) => Assign(profile, (a, v) => a.Profile = v);
		public SubmitDescriptor Pit(Elastic.Clients.Elasticsearch.Global.Search.PointInTimeReference? pit) => Assign(pit, (a, v) => a.Pit = v);
		public SubmitDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryContainer? query) => Assign(query, (a, v) => a.Query = v);
		public SubmitDescriptor QueryOnQueryString(string? queryOnQueryString) => Assign(queryOnQueryString, (a, v) => a.QueryOnQueryString = v);
		public SubmitDescriptor RequestCache(bool? requestCache = true) => Assign(requestCache, (a, v) => a.RequestCache = v);
		public SubmitDescriptor Rescore(IEnumerable<Elastic.Clients.Elasticsearch.Global.Search.Rescore>? rescore) => Assign(rescore, (a, v) => a.Rescore = v);
		public SubmitDescriptor Routing(Elastic.Clients.Elasticsearch.Routing? routing) => Assign(routing, (a, v) => a.Routing = v);
		public SubmitDescriptor ScriptFields(Dictionary<string, Elastic.Clients.Elasticsearch.ScriptField>? scriptFields) => Assign(scriptFields, (a, v) => a.ScriptFields = v);
		public SubmitDescriptor SearchAfter(Elastic.Clients.Elasticsearch.Global.Search.SortResults? searchAfter) => Assign(searchAfter, (a, v) => a.SearchAfter = v);
		public SubmitDescriptor SearchType(Elastic.Clients.Elasticsearch.SearchType? searchType) => Assign(searchType, (a, v) => a.SearchType = v);
		public SubmitDescriptor SequenceNumberPrimaryTerm(bool? sequenceNumberPrimaryTerm = true) => Assign(sequenceNumberPrimaryTerm, (a, v) => a.SequenceNumberPrimaryTerm = v);
		public SubmitDescriptor Size(int? size) => Assign(size, (a, v) => a.Size = v);
		public SubmitDescriptor Sort(Elastic.Clients.Elasticsearch.Global.Search.Sort? sort) => Assign(sort, (a, v) => a.Sort = v);
		public SubmitDescriptor Source(Union<bool, Elastic.Clients.Elasticsearch.Global.Search.SourceFilter>? source) => Assign(source, (a, v) => a.Source = v);
		public SubmitDescriptor Stats(IEnumerable<string>? stats) => Assign(stats, (a, v) => a.Stats = v);
		public SubmitDescriptor StoredFields(Elastic.Clients.Elasticsearch.Fields? storedFields) => Assign(storedFields, (a, v) => a.StoredFields = v);
		public SubmitDescriptor Suggest(Dictionary<string, Elastic.Clients.Elasticsearch.Global.Search.SuggestContainer>? suggest) => Assign(suggest, (a, v) => a.Suggest = v);
		public SubmitDescriptor SuggestField(Elastic.Clients.Elasticsearch.Field? suggestField) => Assign(suggestField, (a, v) => a.SuggestField = v);
		public SubmitDescriptor SuggestMode(Elastic.Clients.Elasticsearch.SuggestMode? suggestMode) => Assign(suggestMode, (a, v) => a.SuggestMode = v);
		public SubmitDescriptor SuggestSize(long? suggestSize) => Assign(suggestSize, (a, v) => a.SuggestSize = v);
		public SubmitDescriptor SuggestText(string? suggestText) => Assign(suggestText, (a, v) => a.SuggestText = v);
		public SubmitDescriptor TerminateAfter(long? terminateAfter) => Assign(terminateAfter, (a, v) => a.TerminateAfter = v);
		public SubmitDescriptor Timeout(string? timeout) => Assign(timeout, (a, v) => a.Timeout = v);
		public SubmitDescriptor TrackScores(bool? trackScores = true) => Assign(trackScores, (a, v) => a.TrackScores = v);
		public SubmitDescriptor TrackTotalHits(bool? trackTotalHits = true) => Assign(trackTotalHits, (a, v) => a.TrackTotalHits = v);
		public SubmitDescriptor Version(bool? version = true) => Assign(version, (a, v) => a.Version = v);
		public SubmitDescriptor Fields(IEnumerable<Union<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.DateField>>? fields) => Assign(fields, (a, v) => a.Fields = v);
		public SubmitDescriptor RuntimeMappings(Elastic.Clients.Elasticsearch.Mapping.RuntimeFields? runtimeMappings) => Assign(runtimeMappings, (a, v) => a.RuntimeMappings = v);
	}
}