// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public class ScriptsPainlessExecuteRequestParameters : RequestParameters<ScriptsPainlessExecuteRequestParameters>
	{
	}

	public partial class ScriptsPainlessExecuteRequest : PlainRequestBase<ScriptsPainlessExecuteRequestParameters>
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScriptsPainlessExecute;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("context")]
		public string? Context { get; set; }

		[JsonInclude]
		[JsonPropertyName("context_setup")]
		public Elastic.Clients.Elasticsearch.PainlessContextSetup? ContextSetup { get; set; }

		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.InlineScript? Script { get; set; }
	}

	public sealed partial class ScriptsPainlessExecuteRequestDescriptor<TDocument> : RequestDescriptorBase<ScriptsPainlessExecuteRequestDescriptor<TDocument>, ScriptsPainlessExecuteRequestParameters>
	{
		internal ScriptsPainlessExecuteRequestDescriptor(Action<ScriptsPainlessExecuteRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		public ScriptsPainlessExecuteRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScriptsPainlessExecute;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		private Elastic.Clients.Elasticsearch.PainlessContextSetup? ContextSetupValue { get; set; }

		private PainlessContextSetupDescriptor<TDocument> ContextSetupDescriptor { get; set; }

		private Action<PainlessContextSetupDescriptor<TDocument>> ContextSetupDescriptorAction { get; set; }

		private string? ContextValue { get; set; }

		private Elastic.Clients.Elasticsearch.InlineScript? ScriptValue { get; set; }

		private InlineScriptDescriptor ScriptDescriptor { get; set; }

		private Action<InlineScriptDescriptor> ScriptDescriptorAction { get; set; }

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> ContextSetup(Elastic.Clients.Elasticsearch.PainlessContextSetup? contextSetup)
		{
			ContextSetupDescriptor = null;
			ContextSetupDescriptorAction = null;
			ContextSetupValue = contextSetup;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> ContextSetup(PainlessContextSetupDescriptor<TDocument> descriptor)
		{
			ContextSetupValue = null;
			ContextSetupDescriptorAction = null;
			ContextSetupDescriptor = descriptor;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> ContextSetup(Action<PainlessContextSetupDescriptor<TDocument>> configure)
		{
			ContextSetupValue = null;
			ContextSetupDescriptorAction = null;
			ContextSetupDescriptorAction = configure;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> Context(string? context)
		{
			ContextValue = context;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> Script(Elastic.Clients.Elasticsearch.InlineScript? script)
		{
			ScriptDescriptor = null;
			ScriptDescriptorAction = null;
			ScriptValue = script;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> Script(InlineScriptDescriptor descriptor)
		{
			ScriptValue = null;
			ScriptDescriptorAction = null;
			ScriptDescriptor = descriptor;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor<TDocument> Script(Action<InlineScriptDescriptor> configure)
		{
			ScriptValue = null;
			ScriptDescriptorAction = null;
			ScriptDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ContextSetupDescriptor is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, ContextSetupDescriptor, options);
			}
			else if (ContextSetupDescriptorAction is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, new PainlessContextSetupDescriptor<TDocument>(ContextSetupDescriptorAction), options);
			}
			else if (ContextSetupValue is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, ContextSetupValue, options);
			}

			if (!string.IsNullOrEmpty(ContextValue))
			{
				writer.WritePropertyName("context");
				writer.WriteStringValue(ContextValue);
			}

			if (ScriptDescriptor is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, ScriptDescriptor, options);
			}
			else if (ScriptDescriptorAction is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, new InlineScriptDescriptor(ScriptDescriptorAction), options);
			}
			else if (ScriptValue is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, ScriptValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class ScriptsPainlessExecuteRequestDescriptor : RequestDescriptorBase<ScriptsPainlessExecuteRequestDescriptor, ScriptsPainlessExecuteRequestParameters>
	{
		internal ScriptsPainlessExecuteRequestDescriptor(Action<ScriptsPainlessExecuteRequestDescriptor> configure) => configure.Invoke(this);
		public ScriptsPainlessExecuteRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceScriptsPainlessExecute;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		private Elastic.Clients.Elasticsearch.PainlessContextSetup? ContextSetupValue { get; set; }

		private PainlessContextSetupDescriptor ContextSetupDescriptor { get; set; }

		private Action<PainlessContextSetupDescriptor> ContextSetupDescriptorAction { get; set; }

		private string? ContextValue { get; set; }

		private Elastic.Clients.Elasticsearch.InlineScript? ScriptValue { get; set; }

		private InlineScriptDescriptor ScriptDescriptor { get; set; }

		private Action<InlineScriptDescriptor> ScriptDescriptorAction { get; set; }

		public ScriptsPainlessExecuteRequestDescriptor ContextSetup(Elastic.Clients.Elasticsearch.PainlessContextSetup? contextSetup)
		{
			ContextSetupDescriptor = null;
			ContextSetupDescriptorAction = null;
			ContextSetupValue = contextSetup;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor ContextSetup(PainlessContextSetupDescriptor descriptor)
		{
			ContextSetupValue = null;
			ContextSetupDescriptorAction = null;
			ContextSetupDescriptor = descriptor;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor ContextSetup(Action<PainlessContextSetupDescriptor> configure)
		{
			ContextSetupValue = null;
			ContextSetupDescriptorAction = null;
			ContextSetupDescriptorAction = configure;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor Context(string? context)
		{
			ContextValue = context;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor Script(Elastic.Clients.Elasticsearch.InlineScript? script)
		{
			ScriptDescriptor = null;
			ScriptDescriptorAction = null;
			ScriptValue = script;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor Script(InlineScriptDescriptor descriptor)
		{
			ScriptValue = null;
			ScriptDescriptorAction = null;
			ScriptDescriptor = descriptor;
			return Self;
		}

		public ScriptsPainlessExecuteRequestDescriptor Script(Action<InlineScriptDescriptor> configure)
		{
			ScriptValue = null;
			ScriptDescriptorAction = null;
			ScriptDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ContextSetupDescriptor is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, ContextSetupDescriptor, options);
			}
			else if (ContextSetupDescriptorAction is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, new PainlessContextSetupDescriptor(ContextSetupDescriptorAction), options);
			}
			else if (ContextSetupValue is not null)
			{
				writer.WritePropertyName("context_setup");
				JsonSerializer.Serialize(writer, ContextSetupValue, options);
			}

			if (!string.IsNullOrEmpty(ContextValue))
			{
				writer.WritePropertyName("context");
				writer.WriteStringValue(ContextValue);
			}

			if (ScriptDescriptor is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, ScriptDescriptor, options);
			}
			else if (ScriptDescriptorAction is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, new InlineScriptDescriptor(ScriptDescriptorAction), options);
			}
			else if (ScriptValue is not null)
			{
				writer.WritePropertyName("script");
				JsonSerializer.Serialize(writer, ScriptValue, options);
			}

			writer.WriteEndObject();
		}
	}
}