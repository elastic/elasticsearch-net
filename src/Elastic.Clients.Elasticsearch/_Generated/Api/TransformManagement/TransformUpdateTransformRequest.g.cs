// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.TransformManagement
{
	public class TransformUpdateTransformRequestParameters : RequestParameters<TransformUpdateTransformRequestParameters>
	{
		[JsonIgnore]
		public bool? DeferValidation { get => Q<bool?>("defer_validation"); set => Q("defer_validation", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? Timeout { get => Q<Elastic.Clients.Elasticsearch.Time?>("timeout"); set => Q("timeout", value); }
	}

	public partial class TransformUpdateTransformRequest : PlainRequestBase<TransformUpdateTransformRequestParameters>
	{
		public TransformUpdateTransformRequest(Elastic.Clients.Elasticsearch.Id transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementUpdateTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonIgnore]
		public bool? DeferValidation { get => Q<bool?>("defer_validation"); set => Q("defer_validation", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? Timeout { get => Q<Elastic.Clients.Elasticsearch.Time?>("timeout"); set => Q("timeout", value); }

		[JsonInclude]
		[JsonPropertyName("dest")]
		public Elastic.Clients.Elasticsearch.TransformManagement.Destination? Dest { get; set; }

		[JsonInclude]
		[JsonPropertyName("description")]
		public string? Description { get; set; }

		[JsonInclude]
		[JsonPropertyName("frequency")]
		public Elastic.Clients.Elasticsearch.Time? Frequency { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }

		[JsonInclude]
		[JsonPropertyName("source")]
		public Elastic.Clients.Elasticsearch.TransformManagement.Source? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("settings")]
		public Elastic.Clients.Elasticsearch.TransformManagement.Settings? Settings { get; set; }

		[JsonInclude]
		[JsonPropertyName("sync")]
		public Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? Sync { get; set; }

		[JsonInclude]
		[JsonPropertyName("retention_policy")]
		public Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? RetentionPolicy { get; set; }
	}

	public sealed partial class TransformUpdateTransformRequestDescriptor<TDocument> : RequestDescriptorBase<TransformUpdateTransformRequestDescriptor<TDocument>, TransformUpdateTransformRequestParameters>
	{
		internal TransformUpdateTransformRequestDescriptor(Action<TransformUpdateTransformRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		public TransformUpdateTransformRequestDescriptor(Elastic.Clients.Elasticsearch.Id transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		internal TransformUpdateTransformRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementUpdateTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public TransformUpdateTransformRequestDescriptor<TDocument> DeferValidation(bool? deferValidation = true) => Qs("defer_validation", deferValidation);
		public TransformUpdateTransformRequestDescriptor<TDocument> Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
		public TransformUpdateTransformRequestDescriptor<TDocument> TransformId(Elastic.Clients.Elasticsearch.Id transform_id)
		{
			RouteValues.Required("transform_id", transform_id);
			return Self;
		}

		private Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? RetentionPolicyValue { get; set; }

		private RetentionPolicyContainerDescriptor<TDocument> RetentionPolicyDescriptor { get; set; }

		private Action<RetentionPolicyContainerDescriptor<TDocument>> RetentionPolicyDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Source? SourceValue { get; set; }

		private SourceDescriptor<TDocument> SourceDescriptor { get; set; }

		private Action<SourceDescriptor<TDocument>> SourceDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? SyncValue { get; set; }

		private SyncContainerDescriptor<TDocument> SyncDescriptor { get; set; }

		private Action<SyncContainerDescriptor<TDocument>> SyncDescriptorAction { get; set; }

		private Dictionary<string, object>? MetaValue { get; set; }

		private string? DescriptionValue { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Destination? DestValue { get; set; }

		private DestinationDescriptor DestDescriptor { get; set; }

		private Action<DestinationDescriptor> DestDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.Time? FrequencyValue { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Settings? SettingsValue { get; set; }

		private SettingsDescriptor SettingsDescriptor { get; set; }

		private Action<SettingsDescriptor> SettingsDescriptorAction { get; set; }

		public TransformUpdateTransformRequestDescriptor<TDocument> RetentionPolicy(Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? retentionPolicy)
		{
			RetentionPolicyDescriptor = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyValue = retentionPolicy;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> RetentionPolicy(RetentionPolicyContainerDescriptor<TDocument> descriptor)
		{
			RetentionPolicyValue = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> RetentionPolicy(Action<RetentionPolicyContainerDescriptor<TDocument>> configure)
		{
			RetentionPolicyValue = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Source(Elastic.Clients.Elasticsearch.TransformManagement.Source? source)
		{
			SourceDescriptor = null;
			SourceDescriptorAction = null;
			SourceValue = source;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Source(SourceDescriptor<TDocument> descriptor)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			SourceDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Source(Action<SourceDescriptor<TDocument>> configure)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			SourceDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Sync(Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? sync)
		{
			SyncDescriptor = null;
			SyncDescriptorAction = null;
			SyncValue = sync;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Sync(SyncContainerDescriptor<TDocument> descriptor)
		{
			SyncValue = null;
			SyncDescriptorAction = null;
			SyncDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Sync(Action<SyncContainerDescriptor<TDocument>> configure)
		{
			SyncValue = null;
			SyncDescriptorAction = null;
			SyncDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
		{
			MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Description(string? description)
		{
			DescriptionValue = description;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Dest(Elastic.Clients.Elasticsearch.TransformManagement.Destination? dest)
		{
			DestDescriptor = null;
			DestDescriptorAction = null;
			DestValue = dest;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Dest(DestinationDescriptor descriptor)
		{
			DestValue = null;
			DestDescriptorAction = null;
			DestDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Dest(Action<DestinationDescriptor> configure)
		{
			DestValue = null;
			DestDescriptorAction = null;
			DestDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Frequency(Elastic.Clients.Elasticsearch.Time? frequency)
		{
			FrequencyValue = frequency;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Settings(Elastic.Clients.Elasticsearch.TransformManagement.Settings? settings)
		{
			SettingsDescriptor = null;
			SettingsDescriptorAction = null;
			SettingsValue = settings;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Settings(SettingsDescriptor descriptor)
		{
			SettingsValue = null;
			SettingsDescriptorAction = null;
			SettingsDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor<TDocument> Settings(Action<SettingsDescriptor> configure)
		{
			SettingsValue = null;
			SettingsDescriptorAction = null;
			SettingsDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (RetentionPolicyDescriptor is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, RetentionPolicyDescriptor, options);
			}
			else if (RetentionPolicyDescriptorAction is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, new RetentionPolicyContainerDescriptor<TDocument>(RetentionPolicyDescriptorAction), options);
			}
			else if (RetentionPolicyValue is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, RetentionPolicyValue, options);
			}

			if (SourceDescriptor is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, SourceDescriptor, options);
			}
			else if (SourceDescriptorAction is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, new SourceDescriptor<TDocument>(SourceDescriptorAction), options);
			}
			else if (SourceValue is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (SyncDescriptor is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, SyncDescriptor, options);
			}
			else if (SyncDescriptorAction is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, new SyncContainerDescriptor<TDocument>(SyncDescriptorAction), options);
			}
			else if (SyncValue is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, SyncValue, options);
			}

			if (MetaValue is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, MetaValue, options);
			}

			if (!string.IsNullOrEmpty(DescriptionValue))
			{
				writer.WritePropertyName("description");
				writer.WriteStringValue(DescriptionValue);
			}

			if (DestDescriptor is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, DestDescriptor, options);
			}
			else if (DestDescriptorAction is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, new DestinationDescriptor(DestDescriptorAction), options);
			}
			else if (DestValue is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, DestValue, options);
			}

			if (FrequencyValue is not null)
			{
				writer.WritePropertyName("frequency");
				JsonSerializer.Serialize(writer, FrequencyValue, options);
			}

			if (SettingsDescriptor is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, SettingsDescriptor, options);
			}
			else if (SettingsDescriptorAction is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, new SettingsDescriptor(SettingsDescriptorAction), options);
			}
			else if (SettingsValue is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, SettingsValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class TransformUpdateTransformRequestDescriptor : RequestDescriptorBase<TransformUpdateTransformRequestDescriptor, TransformUpdateTransformRequestParameters>
	{
		internal TransformUpdateTransformRequestDescriptor(Action<TransformUpdateTransformRequestDescriptor> configure) => configure.Invoke(this);
		public TransformUpdateTransformRequestDescriptor(Elastic.Clients.Elasticsearch.Id transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		internal TransformUpdateTransformRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementUpdateTransform;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public TransformUpdateTransformRequestDescriptor DeferValidation(bool? deferValidation = true) => Qs("defer_validation", deferValidation);
		public TransformUpdateTransformRequestDescriptor Timeout(Elastic.Clients.Elasticsearch.Time? timeout) => Qs("timeout", timeout);
		public TransformUpdateTransformRequestDescriptor TransformId(Elastic.Clients.Elasticsearch.Id transform_id)
		{
			RouteValues.Required("transform_id", transform_id);
			return Self;
		}

		private Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? RetentionPolicyValue { get; set; }

		private RetentionPolicyContainerDescriptor RetentionPolicyDescriptor { get; set; }

		private Action<RetentionPolicyContainerDescriptor> RetentionPolicyDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Source? SourceValue { get; set; }

		private SourceDescriptor SourceDescriptor { get; set; }

		private Action<SourceDescriptor> SourceDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? SyncValue { get; set; }

		private SyncContainerDescriptor SyncDescriptor { get; set; }

		private Action<SyncContainerDescriptor> SyncDescriptorAction { get; set; }

		private Dictionary<string, object>? MetaValue { get; set; }

		private string? DescriptionValue { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Destination? DestValue { get; set; }

		private DestinationDescriptor DestDescriptor { get; set; }

		private Action<DestinationDescriptor> DestDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.Time? FrequencyValue { get; set; }

		private Elastic.Clients.Elasticsearch.TransformManagement.Settings? SettingsValue { get; set; }

		private SettingsDescriptor SettingsDescriptor { get; set; }

		private Action<SettingsDescriptor> SettingsDescriptorAction { get; set; }

		public TransformUpdateTransformRequestDescriptor RetentionPolicy(Elastic.Clients.Elasticsearch.TransformManagement.RetentionPolicyContainer? retentionPolicy)
		{
			RetentionPolicyDescriptor = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyValue = retentionPolicy;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor RetentionPolicy(RetentionPolicyContainerDescriptor descriptor)
		{
			RetentionPolicyValue = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor RetentionPolicy(Action<RetentionPolicyContainerDescriptor> configure)
		{
			RetentionPolicyValue = null;
			RetentionPolicyDescriptorAction = null;
			RetentionPolicyDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Source(Elastic.Clients.Elasticsearch.TransformManagement.Source? source)
		{
			SourceDescriptor = null;
			SourceDescriptorAction = null;
			SourceValue = source;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Source(SourceDescriptor descriptor)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			SourceDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Source(Action<SourceDescriptor> configure)
		{
			SourceValue = null;
			SourceDescriptorAction = null;
			SourceDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Sync(Elastic.Clients.Elasticsearch.TransformManagement.SyncContainer? sync)
		{
			SyncDescriptor = null;
			SyncDescriptorAction = null;
			SyncValue = sync;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Sync(SyncContainerDescriptor descriptor)
		{
			SyncValue = null;
			SyncDescriptorAction = null;
			SyncDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Sync(Action<SyncContainerDescriptor> configure)
		{
			SyncValue = null;
			SyncDescriptorAction = null;
			SyncDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
		{
			MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Description(string? description)
		{
			DescriptionValue = description;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Dest(Elastic.Clients.Elasticsearch.TransformManagement.Destination? dest)
		{
			DestDescriptor = null;
			DestDescriptorAction = null;
			DestValue = dest;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Dest(DestinationDescriptor descriptor)
		{
			DestValue = null;
			DestDescriptorAction = null;
			DestDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Dest(Action<DestinationDescriptor> configure)
		{
			DestValue = null;
			DestDescriptorAction = null;
			DestDescriptorAction = configure;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Frequency(Elastic.Clients.Elasticsearch.Time? frequency)
		{
			FrequencyValue = frequency;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Settings(Elastic.Clients.Elasticsearch.TransformManagement.Settings? settings)
		{
			SettingsDescriptor = null;
			SettingsDescriptorAction = null;
			SettingsValue = settings;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Settings(SettingsDescriptor descriptor)
		{
			SettingsValue = null;
			SettingsDescriptorAction = null;
			SettingsDescriptor = descriptor;
			return Self;
		}

		public TransformUpdateTransformRequestDescriptor Settings(Action<SettingsDescriptor> configure)
		{
			SettingsValue = null;
			SettingsDescriptorAction = null;
			SettingsDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (RetentionPolicyDescriptor is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, RetentionPolicyDescriptor, options);
			}
			else if (RetentionPolicyDescriptorAction is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, new RetentionPolicyContainerDescriptor(RetentionPolicyDescriptorAction), options);
			}
			else if (RetentionPolicyValue is not null)
			{
				writer.WritePropertyName("retention_policy");
				JsonSerializer.Serialize(writer, RetentionPolicyValue, options);
			}

			if (SourceDescriptor is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, SourceDescriptor, options);
			}
			else if (SourceDescriptorAction is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, new SourceDescriptor(SourceDescriptorAction), options);
			}
			else if (SourceValue is not null)
			{
				writer.WritePropertyName("source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (SyncDescriptor is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, SyncDescriptor, options);
			}
			else if (SyncDescriptorAction is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, new SyncContainerDescriptor(SyncDescriptorAction), options);
			}
			else if (SyncValue is not null)
			{
				writer.WritePropertyName("sync");
				JsonSerializer.Serialize(writer, SyncValue, options);
			}

			if (MetaValue is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, MetaValue, options);
			}

			if (!string.IsNullOrEmpty(DescriptionValue))
			{
				writer.WritePropertyName("description");
				writer.WriteStringValue(DescriptionValue);
			}

			if (DestDescriptor is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, DestDescriptor, options);
			}
			else if (DestDescriptorAction is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, new DestinationDescriptor(DestDescriptorAction), options);
			}
			else if (DestValue is not null)
			{
				writer.WritePropertyName("dest");
				JsonSerializer.Serialize(writer, DestValue, options);
			}

			if (FrequencyValue is not null)
			{
				writer.WritePropertyName("frequency");
				JsonSerializer.Serialize(writer, FrequencyValue, options);
			}

			if (SettingsDescriptor is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, SettingsDescriptor, options);
			}
			else if (SettingsDescriptorAction is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, new SettingsDescriptor(SettingsDescriptorAction), options);
			}
			else if (SettingsValue is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, SettingsValue, options);
			}

			writer.WriteEndObject();
		}
	}
}