// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.TransformManagement
{
	public sealed class TransformGetTransformStatsRequestParameters : RequestParameters<TransformGetTransformStatsRequestParameters>
	{
		[JsonIgnore]
		public bool? AllowNoMatch { get => Q<bool?>("allow_no_match"); set => Q("allow_no_match", value); }

		[JsonIgnore]
		public long? From { get => Q<long?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public long? Size { get => Q<long?>("size"); set => Q("size", value); }
	}

	public partial class TransformGetTransformStatsRequest : PlainRequestBase<TransformGetTransformStatsRequestParameters>
	{
		public TransformGetTransformStatsRequest(Elastic.Clients.Elasticsearch.Names transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementGetTransformStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		[JsonIgnore]
		public bool? AllowNoMatch { get => Q<bool?>("allow_no_match"); set => Q("allow_no_match", value); }

		[JsonIgnore]
		public long? From { get => Q<long?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public long? Size { get => Q<long?>("size"); set => Q("size", value); }
	}

	public sealed partial class TransformGetTransformStatsRequestDescriptor : RequestDescriptorBase<TransformGetTransformStatsRequestDescriptor, TransformGetTransformStatsRequestParameters>
	{
		internal TransformGetTransformStatsRequestDescriptor(Action<TransformGetTransformStatsRequestDescriptor> configure) => configure.Invoke(this);
		public TransformGetTransformStatsRequestDescriptor(Elastic.Clients.Elasticsearch.Names transform_id) : base(r => r.Required("transform_id", transform_id))
		{
		}

		internal TransformGetTransformStatsRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.TransformManagementGetTransformStats;
		protected override HttpMethod HttpMethod => HttpMethod.GET;
		protected override bool SupportsBody => false;
		public TransformGetTransformStatsRequestDescriptor AllowNoMatch(bool? allowNoMatch = true) => Qs("allow_no_match", allowNoMatch);
		public TransformGetTransformStatsRequestDescriptor From(long? from) => Qs("from", from);
		public TransformGetTransformStatsRequestDescriptor Size(long? size) => Qs("size", size);
		public TransformGetTransformStatsRequestDescriptor TransformId(Elastic.Clients.Elasticsearch.Names transform_id)
		{
			RouteValues.Required("transform_id", transform_id);
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
		}
	}
}