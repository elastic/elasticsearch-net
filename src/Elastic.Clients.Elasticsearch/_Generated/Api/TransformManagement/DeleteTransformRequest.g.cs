// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.TransformManagement;

public sealed partial class DeleteTransformRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>If this value is true, the destination index is deleted together with the transform. If false, the destination<br/>index will not be deleted</para>
	/// </summary>
	public bool? DeleteDestIndex { get => Q<bool?>("delete_dest_index"); set => Q("delete_dest_index", value); }

	/// <summary>
	/// <para>If this value is false, the transform must be stopped before it can be deleted. If true, the transform is<br/>deleted regardless of its current state.</para>
	/// </summary>
	public bool? Force { get => Q<bool?>("force"); set => Q("force", value); }

	/// <summary>
	/// <para>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
}

/// <summary>
/// <para>Deletes a transform.</para>
/// </summary>
public sealed partial class DeleteTransformRequest : PlainRequest<DeleteTransformRequestParameters>
{
	public DeleteTransformRequest(Elastic.Clients.Elasticsearch.Id transformId) : base(r => r.Required("transform_id", transformId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.TransformManagementDeleteTransform;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => false;

	internal override string OperationName => "transform.delete_transform";

	/// <summary>
	/// <para>If this value is true, the destination index is deleted together with the transform. If false, the destination<br/>index will not be deleted</para>
	/// </summary>
	[JsonIgnore]
	public bool? DeleteDestIndex { get => Q<bool?>("delete_dest_index"); set => Q("delete_dest_index", value); }

	/// <summary>
	/// <para>If this value is false, the transform must be stopped before it can be deleted. If true, the transform is<br/>deleted regardless of its current state.</para>
	/// </summary>
	[JsonIgnore]
	public bool? Force { get => Q<bool?>("force"); set => Q("force", value); }

	/// <summary>
	/// <para>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
}

/// <summary>
/// <para>Deletes a transform.</para>
/// </summary>
public sealed partial class DeleteTransformRequestDescriptor : RequestDescriptor<DeleteTransformRequestDescriptor, DeleteTransformRequestParameters>
{
	internal DeleteTransformRequestDescriptor(Action<DeleteTransformRequestDescriptor> configure) => configure.Invoke(this);

	public DeleteTransformRequestDescriptor(Elastic.Clients.Elasticsearch.Id transformId) : base(r => r.Required("transform_id", transformId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.TransformManagementDeleteTransform;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => false;

	internal override string OperationName => "transform.delete_transform";

	public DeleteTransformRequestDescriptor DeleteDestIndex(bool? deleteDestIndex = true) => Qs("delete_dest_index", deleteDestIndex);
	public DeleteTransformRequestDescriptor Force(bool? force = true) => Qs("force", force);
	public DeleteTransformRequestDescriptor Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);

	public DeleteTransformRequestDescriptor TransformId(Elastic.Clients.Elasticsearch.Id transformId)
	{
		RouteValues.Required("transform_id", transformId);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}