// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexLifecycleManagement;

public sealed partial class MigrateToDataTiersRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// If true, simulates the migration from node attributes based allocation filters to data tiers, but does not perform the migration.
	/// This provides a way to retrieve the indices and ILM policies that need to be migrated.
	/// </para>
	/// </summary>
	public bool? DryRun { get => Q<bool?>("dry_run"); set => Q("dry_run", value); }
}

/// <summary>
/// <para>
/// Migrate to data tiers routing.
/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
/// Optionally, delete one legacy index template.
/// Using node roles enables ILM to automatically move the indices between data tiers.
/// </para>
/// <para>
/// Migrating away from custom node attributes routing can be manually performed.
/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
/// </para>
/// <list type="number">
/// <item>
/// <para>
/// Stop setting the custom hot attribute on new indices.
/// </para>
/// </item>
/// <item>
/// <para>
/// Remove custom allocation settings from existing ILM policies.
/// </para>
/// </item>
/// <item>
/// <para>
/// Replace custom allocation settings from existing indices with the corresponding tier preference.
/// </para>
/// </item>
/// </list>
/// <para>
/// ILM must be stopped before performing the migration.
/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
/// </para>
/// </summary>
public sealed partial class MigrateToDataTiersRequest : PlainRequest<MigrateToDataTiersRequestParameters>
{
	[JsonConstructor]
	internal MigrateToDataTiersRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexLifecycleManagementMigrateToDataTiers;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ilm.migrate_to_data_tiers";

	/// <summary>
	/// <para>
	/// If true, simulates the migration from node attributes based allocation filters to data tiers, but does not perform the migration.
	/// This provides a way to retrieve the indices and ILM policies that need to be migrated.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? DryRun { get => Q<bool?>("dry_run"); set => Q("dry_run", value); }
	[JsonInclude, JsonPropertyName("legacy_template_to_delete")]
	public string? LegacyTemplateToDelete { get; set; }
	[JsonInclude, JsonPropertyName("node_attribute")]
	public string? NodeAttribute { get; set; }
}

/// <summary>
/// <para>
/// Migrate to data tiers routing.
/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
/// Optionally, delete one legacy index template.
/// Using node roles enables ILM to automatically move the indices between data tiers.
/// </para>
/// <para>
/// Migrating away from custom node attributes routing can be manually performed.
/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
/// </para>
/// <list type="number">
/// <item>
/// <para>
/// Stop setting the custom hot attribute on new indices.
/// </para>
/// </item>
/// <item>
/// <para>
/// Remove custom allocation settings from existing ILM policies.
/// </para>
/// </item>
/// <item>
/// <para>
/// Replace custom allocation settings from existing indices with the corresponding tier preference.
/// </para>
/// </item>
/// </list>
/// <para>
/// ILM must be stopped before performing the migration.
/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
/// </para>
/// </summary>
public sealed partial class MigrateToDataTiersRequestDescriptor : RequestDescriptor<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersRequestParameters>
{
	internal MigrateToDataTiersRequestDescriptor(Action<MigrateToDataTiersRequestDescriptor> configure) => configure.Invoke(this);

	public MigrateToDataTiersRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexLifecycleManagementMigrateToDataTiers;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ilm.migrate_to_data_tiers";

	public MigrateToDataTiersRequestDescriptor DryRun(bool? dryRun = true) => Qs("dry_run", dryRun);

	private string? LegacyTemplateToDeleteValue { get; set; }
	private string? NodeAttributeValue { get; set; }

	public MigrateToDataTiersRequestDescriptor LegacyTemplateToDelete(string? legacyTemplateToDelete)
	{
		LegacyTemplateToDeleteValue = legacyTemplateToDelete;
		return Self;
	}

	public MigrateToDataTiersRequestDescriptor NodeAttribute(string? nodeAttribute)
	{
		NodeAttributeValue = nodeAttribute;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(LegacyTemplateToDeleteValue))
		{
			writer.WritePropertyName("legacy_template_to_delete");
			writer.WriteStringValue(LegacyTemplateToDeleteValue);
		}

		if (!string.IsNullOrEmpty(NodeAttributeValue))
		{
			writer.WritePropertyName("node_attribute");
			writer.WriteStringValue(NodeAttributeValue);
		}

		writer.WriteEndObject();
	}
}