// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch;

internal sealed partial class UpdateByQueryResponseConverter : System.Text.Json.Serialization.JsonConverter<Elastic.Clients.Elasticsearch.UpdateByQueryResponse>
{
	private static readonly System.Text.Json.JsonEncodedText PropBatches = System.Text.Json.JsonEncodedText.Encode("batches");
	private static readonly System.Text.Json.JsonEncodedText PropDeleted = System.Text.Json.JsonEncodedText.Encode("deleted");
	private static readonly System.Text.Json.JsonEncodedText PropFailures = System.Text.Json.JsonEncodedText.Encode("failures");
	private static readonly System.Text.Json.JsonEncodedText PropNoops = System.Text.Json.JsonEncodedText.Encode("noops");
	private static readonly System.Text.Json.JsonEncodedText PropRequestsPerSecond = System.Text.Json.JsonEncodedText.Encode("requests_per_second");
	private static readonly System.Text.Json.JsonEncodedText PropRetries = System.Text.Json.JsonEncodedText.Encode("retries");
	private static readonly System.Text.Json.JsonEncodedText PropTask = System.Text.Json.JsonEncodedText.Encode("task");
	private static readonly System.Text.Json.JsonEncodedText PropThrottled = System.Text.Json.JsonEncodedText.Encode("throttled");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledMillis = System.Text.Json.JsonEncodedText.Encode("throttled_millis");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledUntil = System.Text.Json.JsonEncodedText.Encode("throttled_until");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledUntilMillis = System.Text.Json.JsonEncodedText.Encode("throttled_until_millis");
	private static readonly System.Text.Json.JsonEncodedText PropTimedOut = System.Text.Json.JsonEncodedText.Encode("timed_out");
	private static readonly System.Text.Json.JsonEncodedText PropTook = System.Text.Json.JsonEncodedText.Encode("took");
	private static readonly System.Text.Json.JsonEncodedText PropTotal = System.Text.Json.JsonEncodedText.Encode("total");
	private static readonly System.Text.Json.JsonEncodedText PropUpdated = System.Text.Json.JsonEncodedText.Encode("updated");
	private static readonly System.Text.Json.JsonEncodedText PropVersionConflicts = System.Text.Json.JsonEncodedText.Encode("version_conflicts");

	public override Elastic.Clients.Elasticsearch.UpdateByQueryResponse Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<long?> propBatches = default;
		LocalJsonValue<long?> propDeleted = default;
		LocalJsonValue<System.Collections.Generic.IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>?> propFailures = default;
		LocalJsonValue<long?> propNoops = default;
		LocalJsonValue<float?> propRequestsPerSecond = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Retries?> propRetries = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.TaskId?> propTask = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propThrottled = default;
		LocalJsonValue<System.TimeSpan?> propThrottledMillis = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propThrottledUntil = default;
		LocalJsonValue<System.TimeSpan?> propThrottledUntilMillis = default;
		LocalJsonValue<bool?> propTimedOut = default;
		LocalJsonValue<System.TimeSpan?> propTook = default;
		LocalJsonValue<long?> propTotal = default;
		LocalJsonValue<long?> propUpdated = default;
		LocalJsonValue<long?> propVersionConflicts = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBatches.TryReadProperty(ref reader, options, PropBatches, null))
			{
				continue;
			}

			if (propDeleted.TryReadProperty(ref reader, options, PropDeleted, null))
			{
				continue;
			}

			if (propFailures.TryReadProperty(ref reader, options, PropFailures, static System.Collections.Generic.IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadCollectionValue<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>(o, null)))
			{
				continue;
			}

			if (propNoops.TryReadProperty(ref reader, options, PropNoops, null))
			{
				continue;
			}

			if (propRequestsPerSecond.TryReadProperty(ref reader, options, PropRequestsPerSecond, null))
			{
				continue;
			}

			if (propRetries.TryReadProperty(ref reader, options, PropRetries, null))
			{
				continue;
			}

			if (propTask.TryReadProperty(ref reader, options, PropTask, null))
			{
				continue;
			}

			if (propThrottled.TryReadProperty(ref reader, options, PropThrottled, null))
			{
				continue;
			}

			if (propThrottledMillis.TryReadProperty(ref reader, options, PropThrottledMillis, static System.TimeSpan? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<System.TimeSpan?>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker))))
			{
				continue;
			}

			if (propThrottledUntil.TryReadProperty(ref reader, options, PropThrottledUntil, null))
			{
				continue;
			}

			if (propThrottledUntilMillis.TryReadProperty(ref reader, options, PropThrottledUntilMillis, static System.TimeSpan? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<System.TimeSpan?>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker))))
			{
				continue;
			}

			if (propTimedOut.TryReadProperty(ref reader, options, PropTimedOut, null))
			{
				continue;
			}

			if (propTook.TryReadProperty(ref reader, options, PropTook, static System.TimeSpan? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadValueEx<System.TimeSpan?>(o, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker))))
			{
				continue;
			}

			if (propTotal.TryReadProperty(ref reader, options, PropTotal, null))
			{
				continue;
			}

			if (propUpdated.TryReadProperty(ref reader, options, PropUpdated, null))
			{
				continue;
			}

			if (propVersionConflicts.TryReadProperty(ref reader, options, PropVersionConflicts, null))
			{
				continue;
			}

			if (options.UnmappedMemberHandling is System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip)
			{
				reader.Skip();
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new Elastic.Clients.Elasticsearch.UpdateByQueryResponse(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel.Instance)
		{
			Batches = propBatches.Value,
			Deleted = propDeleted.Value,
			Failures = propFailures.Value,
			Noops = propNoops.Value,
			RequestsPerSecond = propRequestsPerSecond.Value,
			Retries = propRetries.Value,
			Task = propTask.Value,
			Throttled = propThrottled.Value,
			ThrottledMillis = propThrottledMillis.Value,
			ThrottledUntil = propThrottledUntil.Value,
			ThrottledUntilMillis = propThrottledUntilMillis.Value,
			TimedOut = propTimedOut.Value,
			Took = propTook.Value,
			Total = propTotal.Value,
			Updated = propUpdated.Value,
			VersionConflicts = propVersionConflicts.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, Elastic.Clients.Elasticsearch.UpdateByQueryResponse value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBatches, value.Batches, null, null);
		writer.WriteProperty(options, PropDeleted, value.Deleted, null, null);
		writer.WriteProperty(options, PropFailures, value.Failures, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.Collections.Generic.IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>? v) => w.WriteCollectionValue<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>(o, v, null));
		writer.WriteProperty(options, PropNoops, value.Noops, null, null);
		writer.WriteProperty(options, PropRequestsPerSecond, value.RequestsPerSecond, null, null);
		writer.WriteProperty(options, PropRetries, value.Retries, null, null);
		writer.WriteProperty(options, PropTask, value.Task, null, null);
		writer.WriteProperty(options, PropThrottled, value.Throttled, null, null);
		writer.WriteProperty(options, PropThrottledMillis, value.ThrottledMillis, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.TimeSpan? v) => w.WriteValueEx<System.TimeSpan?>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker)));
		writer.WriteProperty(options, PropThrottledUntil, value.ThrottledUntil, null, null);
		writer.WriteProperty(options, PropThrottledUntilMillis, value.ThrottledUntilMillis, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.TimeSpan? v) => w.WriteValueEx<System.TimeSpan?>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker)));
		writer.WriteProperty(options, PropTimedOut, value.TimedOut, null, null);
		writer.WriteProperty(options, PropTook, value.Took, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, System.TimeSpan? v) => w.WriteValueEx<System.TimeSpan?>(o, v, typeof(Elastic.Clients.Elasticsearch.Serialization.TimeSpanMillisMarker)));
		writer.WriteProperty(options, PropTotal, value.Total, null, null);
		writer.WriteProperty(options, PropUpdated, value.Updated, null, null);
		writer.WriteProperty(options, PropVersionConflicts, value.VersionConflicts, null, null);
		writer.WriteEndObject();
	}
}

[System.Text.Json.Serialization.JsonConverter(typeof(Elastic.Clients.Elasticsearch.UpdateByQueryResponseConverter))]
public sealed partial class UpdateByQueryResponse : Elastic.Transport.Products.Elasticsearch.ElasticsearchResponse
{
	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	public UpdateByQueryResponse()
	{
	}

	[System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
	internal UpdateByQueryResponse(Elastic.Clients.Elasticsearch.Serialization.JsonConstructorSentinel sentinel)
	{
		_ = sentinel;
	}

	/// <summary>
	/// <para>
	/// The number of scroll responses pulled back by the update by query.
	/// </para>
	/// </summary>
	public long? Batches { get; set; }

	/// <summary>
	/// <para>
	/// The number of documents that were successfully deleted.
	/// </para>
	/// </summary>
	public long? Deleted { get; set; }

	/// <summary>
	/// <para>
	/// Array of failures if there were any unrecoverable errors during the process.
	/// If this is non-empty then the request ended because of those failures.
	/// Update by query is implemented using batches.
	/// Any failure causes the entire process to end, but all failures in the current batch are collected into the array.
	/// You can use the <c>conflicts</c> option to prevent reindex from ending when version conflicts occur.
	/// </para>
	/// </summary>
	public System.Collections.Generic.IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>? Failures { get; set; }

	/// <summary>
	/// <para>
	/// The number of documents that were ignored because the script used for the update by query returned a noop value for <c>ctx.op</c>.
	/// </para>
	/// </summary>
	public long? Noops { get; set; }

	/// <summary>
	/// <para>
	/// The number of requests per second effectively run during the update by query.
	/// </para>
	/// </summary>
	public float? RequestsPerSecond { get; set; }

	/// <summary>
	/// <para>
	/// The number of retries attempted by update by query.
	/// <c>bulk</c> is the number of bulk actions retried.
	/// <c>search</c> is the number of search actions retried.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Retries? Retries { get; set; }
	public Elastic.Clients.Elasticsearch.TaskId? Task { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? Throttled { get; set; }

	/// <summary>
	/// <para>
	/// The number of milliseconds the request slept to conform to <c>requests_per_second</c>.
	/// </para>
	/// </summary>
	public System.TimeSpan? ThrottledMillis { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? ThrottledUntil { get; set; }

	/// <summary>
	/// <para>
	/// This field should always be equal to zero in an _update_by_query response.
	/// It only has meaning when using the task API, where it indicates the next time (in milliseconds since epoch) a throttled request will be run again in order to conform to <c>requests_per_second</c>.
	/// </para>
	/// </summary>
	public System.TimeSpan? ThrottledUntilMillis { get; set; }

	/// <summary>
	/// <para>
	/// If true, some requests timed out during the update by query.
	/// </para>
	/// </summary>
	public bool? TimedOut { get; set; }

	/// <summary>
	/// <para>
	/// The number of milliseconds from start to end of the whole operation.
	/// </para>
	/// </summary>
	public System.TimeSpan? Took { get; set; }

	/// <summary>
	/// <para>
	/// The number of documents that were successfully processed.
	/// </para>
	/// </summary>
	public long? Total { get; set; }

	/// <summary>
	/// <para>
	/// The number of documents that were successfully updated.
	/// </para>
	/// </summary>
	public long? Updated { get; set; }

	/// <summary>
	/// <para>
	/// The number of version conflicts that the update by query hit.
	/// </para>
	/// </summary>
	public long? VersionConflicts { get; set; }
}