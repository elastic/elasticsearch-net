// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport.Products.Elasticsearch;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Snapshot;

public sealed partial class RepositoryAnalyzeResponse : ElasticsearchResponse
{
	/// <summary>
	/// <para>
	/// The number of blobs written to the repository during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("blob_count")]
	public int BlobCount { get; init; }

	/// <summary>
	/// <para>
	/// The path in the repository under which all the blobs were written during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("blob_path")]
	public string BlobPath { get; init; }

	/// <summary>
	/// <para>
	/// The number of write operations performed concurrently during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("concurrency")]
	public int Concurrency { get; init; }

	/// <summary>
	/// <para>
	/// The node that coordinated the analysis and performed the final cleanup.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("coordinating_node")]
	public Elastic.Clients.Elasticsearch.Snapshot.SnapshotNodeInfo CoordinatingNode { get; init; }

	/// <summary>
	/// <para>
	/// The time it took to delete all the blobs in the container.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("delete_elapsed")]
	public Elastic.Clients.Elasticsearch.Duration DeleteElapsed { get; init; }

	/// <summary>
	/// <para>
	/// The time it took to delete all the blobs in the container, in nanoseconds.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("delete_elapsed_nanos")]
	public long DeleteElapsedNanos { get; init; }

	/// <summary>
	/// <para>
	/// A description of every read and write operation performed during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("details")]
	public Elastic.Clients.Elasticsearch.Snapshot.DetailsInfo Details { get; init; }

	/// <summary>
	/// <para>
	/// The limit on the number of nodes on which early read operations were performed after writing each blob.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("early_read_node_count")]
	public int EarlyReadNodeCount { get; init; }

	/// <summary>
	/// <para>
	/// A list of correctness issues detected, which is empty if the API succeeded.
	/// It is included to emphasize that a successful response does not guarantee correct behaviour in future.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("issues_detected")]
	public IReadOnlyCollection<string> IssuesDetected { get; init; }

	/// <summary>
	/// <para>
	/// The time it took to retrieve a list of all the blobs in the container.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("listing_elapsed")]
	public Elastic.Clients.Elasticsearch.Duration ListingElapsed { get; init; }

	/// <summary>
	/// <para>
	/// The time it took to retrieve a list of all the blobs in the container, in nanoseconds.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("listing_elapsed_nanos")]
	public long ListingElapsedNanos { get; init; }

	/// <summary>
	/// <para>
	/// The limit on the size of a blob written during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_blob_size")]
	public Elastic.Clients.Elasticsearch.ByteSize MaxBlobSize { get; init; }

	/// <summary>
	/// <para>
	/// The limit, in bytes, on the size of a blob written during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_blob_size_bytes")]
	public long MaxBlobSizeBytes { get; init; }

	/// <summary>
	/// <para>
	/// The limit on the total size of all blob written during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_total_data_size")]
	public Elastic.Clients.Elasticsearch.ByteSize MaxTotalDataSize { get; init; }

	/// <summary>
	/// <para>
	/// The limit, in bytes, on the total size of all blob written during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max_total_data_size_bytes")]
	public long MaxTotalDataSizeBytes { get; init; }

	/// <summary>
	/// <para>
	/// The probability of performing rare actions during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rare_action_probability")]
	public double RareActionProbability { get; init; }

	/// <summary>
	/// <para>
	/// The limit on the number of nodes on which read operations were performed after writing each blob.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("read_node_count")]
	public int ReadNodeCount { get; init; }

	/// <summary>
	/// <para>
	/// The name of the repository that was the subject of the analysis.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("repository")]
	public string Repository { get; init; }

	/// <summary>
	/// <para>
	/// The seed for the pseudo-random number generator used to generate the operations used during the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("seed")]
	public long Seed { get; init; }

	/// <summary>
	/// <para>
	/// A collection of statistics that summarize the results of the test.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("summary")]
	public Elastic.Clients.Elasticsearch.Snapshot.SummaryInfo Summary { get; init; }
}