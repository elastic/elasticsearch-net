// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

public sealed partial class TermVectorsRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// The node or shard the operation should be performed on.
	/// It is random by default.
	/// </para>
	/// </summary>
	public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

	/// <summary>
	/// <para>
	/// If true, the request is real-time as opposed to near-real-time.
	/// </para>
	/// </summary>
	public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }
}

/// <summary>
/// <para>
/// Get term vector information.
/// </para>
/// <para>
/// Get information and statistics about terms in the fields of a particular document.
/// </para>
/// <para>
/// You can retrieve term vectors for documents stored in the index or for artificial documents passed in the body of the request.
/// You can specify the fields you are interested in through the <c>fields</c> parameter or by adding the fields to the request body.
/// For example:
/// </para>
/// <code>
/// GET /my-index-000001/_termvectors/1?fields=message
/// </code>
/// <para>
/// Fields can be specified using wildcards, similar to the multi match query.
/// </para>
/// <para>
/// Term vectors are real-time by default, not near real-time.
/// This can be changed by setting <c>realtime</c> parameter to <c>false</c>.
/// </para>
/// <para>
/// You can request three types of values: <em>term information</em>, <em>term statistics</em>, and <em>field statistics</em>.
/// By default, all term information and field statistics are returned for all fields but term statistics are excluded.
/// </para>
/// <para>
/// <strong>Term information</strong>
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// term frequency in the field (always returned)
/// </para>
/// </item>
/// <item>
/// <para>
/// term positions (<c>positions: true</c>)
/// </para>
/// </item>
/// <item>
/// <para>
/// start and end offsets (<c>offsets: true</c>)
/// </para>
/// </item>
/// <item>
/// <para>
/// term payloads (<c>payloads: true</c>), as base64 encoded bytes
/// </para>
/// </item>
/// </list>
/// <para>
/// If the requested information wasn't stored in the index, it will be computed on the fly if possible.
/// Additionally, term vectors could be computed for documents not even existing in the index, but instead provided by the user.
/// </para>
/// <para>
/// warn
/// Start and end offsets assume UTF-16 encoding is being used. If you want to use these offsets in order to get the original text that produced this token, you should make sure that the string you are taking a sub-string of is also encoded using UTF-16.
/// </para>
/// <para>
/// <strong>Behaviour</strong>
/// </para>
/// <para>
/// The term and field statistics are not accurate.
/// Deleted documents are not taken into account.
/// The information is only retrieved for the shard the requested document resides in.
/// The term and field statistics are therefore only useful as relative measures whereas the absolute numbers have no meaning in this context.
/// By default, when requesting term vectors of artificial documents, a shard to get the statistics from is randomly selected.
/// Use <c>routing</c> only to hit a particular shard.
/// </para>
/// </summary>
public sealed partial class TermVectorsRequest<TDocument> : PlainRequest<TermVectorsRequestParameters>
{
	public TermVectorsRequest(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id? id) : base(r => r.Required("index", index).Optional("id", id))
	{
	}

	public TermVectorsRequest(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceTermvectors;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "termvectors";

	/// <summary>
	/// <para>
	/// The node or shard the operation should be performed on.
	/// It is random by default.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

	/// <summary>
	/// <para>
	/// If true, the request is real-time as opposed to near-real-time.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? Realtime { get => Q<bool?>("realtime"); set => Q("realtime", value); }

	/// <summary>
	/// <para>
	/// An artificial document (a document not present in the index) for which you want to retrieve term vectors.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("doc")]
	[SourceConverter]
	public TDocument? Doc { get; set; }

	/// <summary>
	/// <para>
	/// A list of fields to include in the statistics.
	/// It is used as the default list unless a specific field list is provided in the <c>completion_fields</c> or <c>fielddata_fields</c> parameters.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("fields")]
	[JsonConverter(typeof(SingleOrManyFieldsConverter))]
	public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// The document count (how many documents contain this field).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The sum of document frequencies (the sum of document frequencies for all terms in this field).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The sum of total term frequencies (the sum of total term frequencies of each term in this field).
	/// </para>
	/// </item>
	/// </list>
	/// </summary>
	[JsonInclude, JsonPropertyName("field_statistics")]
	public bool? FieldStatistics { get; set; }

	/// <summary>
	/// <para>
	/// Filter terms based on their tf-idf scores.
	/// This could be useful in order find out a good characteristic vector of a document.
	/// This feature works in a similar manner to the second phase of the More Like This Query.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("filter")]
	public Elastic.Clients.Elasticsearch.Core.TermVectors.Filter? Filter { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term offsets.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("offsets")]
	public bool? Offsets { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term payloads.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("payloads")]
	public bool? Payloads { get; set; }

	/// <summary>
	/// <para>
	/// Override the default per-field analyzer.
	/// This is useful in order to generate term vectors in any fashion, especially when using artificial documents.
	/// When providing an analyzer for a field that already stores term vectors, the term vectors will be regenerated.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("per_field_analyzer")]
	public IDictionary<Elastic.Clients.Elasticsearch.Field, string>? PerFieldAnalyzer { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term positions.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("positions")]
	public bool? Positions { get; set; }

	/// <summary>
	/// <para>
	/// A custom value that is used to route operations to a specific shard.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("routing")]
	public Elastic.Clients.Elasticsearch.Routing? Routing { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// The total term frequency (how often a term occurs in all documents).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The document frequency (the number of documents containing the current term).
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// By default these values are not returned since term statistics can have a serious performance impact.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("term_statistics")]
	public bool? TermStatistics { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, returns the document version as part of a hit.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("version")]
	public long? Version { get; set; }

	/// <summary>
	/// <para>
	/// The version type.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("version_type")]
	public Elastic.Clients.Elasticsearch.VersionType? VersionType { get; set; }
}

/// <summary>
/// <para>
/// Get term vector information.
/// </para>
/// <para>
/// Get information and statistics about terms in the fields of a particular document.
/// </para>
/// <para>
/// You can retrieve term vectors for documents stored in the index or for artificial documents passed in the body of the request.
/// You can specify the fields you are interested in through the <c>fields</c> parameter or by adding the fields to the request body.
/// For example:
/// </para>
/// <code>
/// GET /my-index-000001/_termvectors/1?fields=message
/// </code>
/// <para>
/// Fields can be specified using wildcards, similar to the multi match query.
/// </para>
/// <para>
/// Term vectors are real-time by default, not near real-time.
/// This can be changed by setting <c>realtime</c> parameter to <c>false</c>.
/// </para>
/// <para>
/// You can request three types of values: <em>term information</em>, <em>term statistics</em>, and <em>field statistics</em>.
/// By default, all term information and field statistics are returned for all fields but term statistics are excluded.
/// </para>
/// <para>
/// <strong>Term information</strong>
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// term frequency in the field (always returned)
/// </para>
/// </item>
/// <item>
/// <para>
/// term positions (<c>positions: true</c>)
/// </para>
/// </item>
/// <item>
/// <para>
/// start and end offsets (<c>offsets: true</c>)
/// </para>
/// </item>
/// <item>
/// <para>
/// term payloads (<c>payloads: true</c>), as base64 encoded bytes
/// </para>
/// </item>
/// </list>
/// <para>
/// If the requested information wasn't stored in the index, it will be computed on the fly if possible.
/// Additionally, term vectors could be computed for documents not even existing in the index, but instead provided by the user.
/// </para>
/// <para>
/// warn
/// Start and end offsets assume UTF-16 encoding is being used. If you want to use these offsets in order to get the original text that produced this token, you should make sure that the string you are taking a sub-string of is also encoded using UTF-16.
/// </para>
/// <para>
/// <strong>Behaviour</strong>
/// </para>
/// <para>
/// The term and field statistics are not accurate.
/// Deleted documents are not taken into account.
/// The information is only retrieved for the shard the requested document resides in.
/// The term and field statistics are therefore only useful as relative measures whereas the absolute numbers have no meaning in this context.
/// By default, when requesting term vectors of artificial documents, a shard to get the statistics from is randomly selected.
/// Use <c>routing</c> only to hit a particular shard.
/// </para>
/// </summary>
public sealed partial class TermVectorsRequestDescriptor<TDocument> : RequestDescriptor<TermVectorsRequestDescriptor<TDocument>, TermVectorsRequestParameters>
{
	internal TermVectorsRequestDescriptor(Action<TermVectorsRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public TermVectorsRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id? id) : base(r => r.Required("index", index).Optional("id", id))
	{
	}

	public TermVectorsRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	public TermVectorsRequestDescriptor(TDocument document) : this(typeof(TDocument), Elastic.Clients.Elasticsearch.Id.From(document))
	{
	}

	public TermVectorsRequestDescriptor(TDocument document, Elastic.Clients.Elasticsearch.IndexName index) : this(index, Elastic.Clients.Elasticsearch.Id.From(document))
	{
	}

	public TermVectorsRequestDescriptor(TDocument document, Elastic.Clients.Elasticsearch.Id? id) : this(typeof(TDocument), id)
	{
	}

	public TermVectorsRequestDescriptor(Elastic.Clients.Elasticsearch.Id? id) : this(typeof(TDocument), id)
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceTermvectors;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "termvectors";

	public TermVectorsRequestDescriptor<TDocument> Preference(string? preference) => Qs("preference", preference);
	public TermVectorsRequestDescriptor<TDocument> Realtime(bool? realtime = true) => Qs("realtime", realtime);

	public TermVectorsRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Id? id)
	{
		RouteValues.Optional("id", id);
		return Self;
	}

	public TermVectorsRequestDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	private TDocument? DocValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; set; }
	private bool? FieldStatisticsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.TermVectors.Filter? FilterValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.TermVectors.FilterDescriptor FilterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Core.TermVectors.FilterDescriptor> FilterDescriptorAction { get; set; }
	private bool? OffsetsValue { get; set; }
	private bool? PayloadsValue { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, string>? PerFieldAnalyzerValue { get; set; }
	private bool? PositionsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Routing? RoutingValue { get; set; }
	private bool? TermStatisticsValue { get; set; }
	private long? VersionValue { get; set; }
	private Elastic.Clients.Elasticsearch.VersionType? VersionTypeValue { get; set; }

	/// <summary>
	/// <para>
	/// An artificial document (a document not present in the index) for which you want to retrieve term vectors.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Doc(TDocument? doc)
	{
		DocValue = doc;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A list of fields to include in the statistics.
	/// It is used as the default list unless a specific field list is provided in the <c>completion_fields</c> or <c>fielddata_fields</c> parameters.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Fields? fields)
	{
		FieldsValue = fields;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// The document count (how many documents contain this field).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The sum of document frequencies (the sum of document frequencies for all terms in this field).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The sum of total term frequencies (the sum of total term frequencies of each term in this field).
	/// </para>
	/// </item>
	/// </list>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> FieldStatistics(bool? fieldStatistics = true)
	{
		FieldStatisticsValue = fieldStatistics;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Filter terms based on their tf-idf scores.
	/// This could be useful in order find out a good characteristic vector of a document.
	/// This feature works in a similar manner to the second phase of the More Like This Query.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Filter(Elastic.Clients.Elasticsearch.Core.TermVectors.Filter? filter)
	{
		FilterDescriptor = null;
		FilterDescriptorAction = null;
		FilterValue = filter;
		return Self;
	}

	public TermVectorsRequestDescriptor<TDocument> Filter(Elastic.Clients.Elasticsearch.Core.TermVectors.FilterDescriptor descriptor)
	{
		FilterValue = null;
		FilterDescriptorAction = null;
		FilterDescriptor = descriptor;
		return Self;
	}

	public TermVectorsRequestDescriptor<TDocument> Filter(Action<Elastic.Clients.Elasticsearch.Core.TermVectors.FilterDescriptor> configure)
	{
		FilterValue = null;
		FilterDescriptor = null;
		FilterDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term offsets.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Offsets(bool? offsets = true)
	{
		OffsetsValue = offsets;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term payloads.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Payloads(bool? payloads = true)
	{
		PayloadsValue = payloads;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Override the default per-field analyzer.
	/// This is useful in order to generate term vectors in any fashion, especially when using artificial documents.
	/// When providing an analyzer for a field that already stores term vectors, the term vectors will be regenerated.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> PerFieldAnalyzer(Func<FluentDictionary<Elastic.Clients.Elasticsearch.Field, string>, FluentDictionary<Elastic.Clients.Elasticsearch.Field, string>> selector)
	{
		PerFieldAnalyzerValue = selector?.Invoke(new FluentDictionary<Elastic.Clients.Elasticsearch.Field, string>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes term positions.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Positions(bool? positions = true)
	{
		PositionsValue = positions;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A custom value that is used to route operations to a specific shard.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Routing(Elastic.Clients.Elasticsearch.Routing? routing)
	{
		RoutingValue = routing;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the response includes:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// The total term frequency (how often a term occurs in all documents).
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The document frequency (the number of documents containing the current term).
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// By default these values are not returned since term statistics can have a serious performance impact.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> TermStatistics(bool? termStatistics = true)
	{
		TermStatisticsValue = termStatistics;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, returns the document version as part of a hit.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> Version(long? version)
	{
		VersionValue = version;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The version type.
	/// </para>
	/// </summary>
	public TermVectorsRequestDescriptor<TDocument> VersionType(Elastic.Clients.Elasticsearch.VersionType? versionType)
	{
		VersionTypeValue = versionType;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (DocValue is not null)
		{
			writer.WritePropertyName("doc");
			settings.SourceSerializer.Serialize(DocValue, writer);
		}

		if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
		}

		if (FieldStatisticsValue.HasValue)
		{
			writer.WritePropertyName("field_statistics");
			writer.WriteBooleanValue(FieldStatisticsValue.Value);
		}

		if (FilterDescriptor is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, FilterDescriptor, options);
		}
		else if (FilterDescriptorAction is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Core.TermVectors.FilterDescriptor(FilterDescriptorAction), options);
		}
		else if (FilterValue is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, FilterValue, options);
		}

		if (OffsetsValue.HasValue)
		{
			writer.WritePropertyName("offsets");
			writer.WriteBooleanValue(OffsetsValue.Value);
		}

		if (PayloadsValue.HasValue)
		{
			writer.WritePropertyName("payloads");
			writer.WriteBooleanValue(PayloadsValue.Value);
		}

		if (PerFieldAnalyzerValue is not null)
		{
			writer.WritePropertyName("per_field_analyzer");
			JsonSerializer.Serialize(writer, PerFieldAnalyzerValue, options);
		}

		if (PositionsValue.HasValue)
		{
			writer.WritePropertyName("positions");
			writer.WriteBooleanValue(PositionsValue.Value);
		}

		if (RoutingValue is not null)
		{
			writer.WritePropertyName("routing");
			JsonSerializer.Serialize(writer, RoutingValue, options);
		}

		if (TermStatisticsValue.HasValue)
		{
			writer.WritePropertyName("term_statistics");
			writer.WriteBooleanValue(TermStatisticsValue.Value);
		}

		if (VersionValue.HasValue)
		{
			writer.WritePropertyName("version");
			writer.WriteNumberValue(VersionValue.Value);
		}

		if (VersionTypeValue is not null)
		{
			writer.WritePropertyName("version_type");
			JsonSerializer.Serialize(writer, VersionTypeValue, options);
		}

		writer.WriteEndObject();
	}
}