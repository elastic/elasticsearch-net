// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial class GetResponse<TDocument> : ResponseBase, ISelfDeserializable
	{
		public Elastic.Clients.Elasticsearch.FieldValues? Fields { get; private set; }

		public bool Found { get; private set; }

		public Elastic.Clients.Elasticsearch.Id Id { get; private set; }

		public Elastic.Clients.Elasticsearch.IndexName Index { get; private set; }

		public long? PrimaryTerm { get; private set; }

		public string? Routing { get; private set; }

		public long? SeqNo { get; private set; }

		public TDocument? Source { get; private set; }

		public long? Version { get; private set; }

		public void Deserialize(ref Utf8JsonReader reader, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					if (reader.ValueTextEquals("_index"))
					{
						Index = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.IndexName>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("fields"))
					{
						Fields = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.FieldValues?>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("found"))
					{
						Found = JsonSerializer.Deserialize<bool>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("_id"))
					{
						Id = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Id>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("_primary_term"))
					{
						PrimaryTerm = JsonSerializer.Deserialize<long?>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("_routing"))
					{
						Routing = JsonSerializer.Deserialize<string?>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("_seq_no"))
					{
						SeqNo = JsonSerializer.Deserialize<long?>(ref reader, options);
						continue;
					}

					if (reader.ValueTextEquals("_source"))
					{
						Source = SourceSerialisation.Deserialize<TDocument>(ref reader, settings);
						continue;
					}

					if (reader.ValueTextEquals("_version"))
					{
						Version = JsonSerializer.Deserialize<long?>(ref reader, options);
						continue;
					}
				}
			}
		}
	}
}