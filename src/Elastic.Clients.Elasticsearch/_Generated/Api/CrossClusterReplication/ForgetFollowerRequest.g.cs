// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.CrossClusterReplication;

public sealed partial class ForgetFollowerRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Forget a follower.
/// Remove the cross-cluster replication follower retention leases from the leader.
/// </para>
/// <para>
/// A following index takes out retention leases on its leader index.
/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
/// </para>
/// <para>
/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
/// </para>
/// </summary>
public sealed partial class ForgetFollowerRequest : PlainRequest<ForgetFollowerRequestParameters>
{
	public ForgetFollowerRequest(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	[JsonConstructor]
	internal ForgetFollowerRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationForgetFollower;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ccr.forget_follower";

	/// <summary>
	/// <para>
	/// the name of the leader index for which specified follower retention leases should be removed
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.IndexName Index { get => P<Elastic.Clients.Elasticsearch.IndexName>("index"); set => PR("index", value); }
	[JsonInclude, JsonPropertyName("follower_cluster")]
	public string? FollowerCluster { get; set; }
	[JsonInclude, JsonPropertyName("follower_index")]
	public Elastic.Clients.Elasticsearch.IndexName? FollowerIndex { get; set; }
	[JsonInclude, JsonPropertyName("follower_index_uuid")]
	public string? FollowerIndexUuid { get; set; }
	[JsonInclude, JsonPropertyName("leader_remote_cluster")]
	public string? LeaderRemoteCluster { get; set; }
}

/// <summary>
/// <para>
/// Forget a follower.
/// Remove the cross-cluster replication follower retention leases from the leader.
/// </para>
/// <para>
/// A following index takes out retention leases on its leader index.
/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
/// </para>
/// <para>
/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
/// </para>
/// </summary>
public sealed partial class ForgetFollowerRequestDescriptor<TDocument> : RequestDescriptor<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerRequestParameters>
{
	internal ForgetFollowerRequestDescriptor(Action<ForgetFollowerRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ForgetFollowerRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	public ForgetFollowerRequestDescriptor() : this(typeof(TDocument))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationForgetFollower;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ccr.forget_follower";

	public ForgetFollowerRequestDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	private string? FollowerClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexName? FollowerIndexValue { get; set; }
	private string? FollowerIndexUuidValue { get; set; }
	private string? LeaderRemoteClusterValue { get; set; }

	public ForgetFollowerRequestDescriptor<TDocument> FollowerCluster(string? followerCluster)
	{
		FollowerClusterValue = followerCluster;
		return Self;
	}

	public ForgetFollowerRequestDescriptor<TDocument> FollowerIndex(Elastic.Clients.Elasticsearch.IndexName? followerIndex)
	{
		FollowerIndexValue = followerIndex;
		return Self;
	}

	public ForgetFollowerRequestDescriptor<TDocument> FollowerIndexUuid(string? followerIndexUuid)
	{
		FollowerIndexUuidValue = followerIndexUuid;
		return Self;
	}

	public ForgetFollowerRequestDescriptor<TDocument> LeaderRemoteCluster(string? leaderRemoteCluster)
	{
		LeaderRemoteClusterValue = leaderRemoteCluster;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(FollowerClusterValue))
		{
			writer.WritePropertyName("follower_cluster");
			writer.WriteStringValue(FollowerClusterValue);
		}

		if (FollowerIndexValue is not null)
		{
			writer.WritePropertyName("follower_index");
			JsonSerializer.Serialize(writer, FollowerIndexValue, options);
		}

		if (!string.IsNullOrEmpty(FollowerIndexUuidValue))
		{
			writer.WritePropertyName("follower_index_uuid");
			writer.WriteStringValue(FollowerIndexUuidValue);
		}

		if (!string.IsNullOrEmpty(LeaderRemoteClusterValue))
		{
			writer.WritePropertyName("leader_remote_cluster");
			writer.WriteStringValue(LeaderRemoteClusterValue);
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// Forget a follower.
/// Remove the cross-cluster replication follower retention leases from the leader.
/// </para>
/// <para>
/// A following index takes out retention leases on its leader index.
/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
/// </para>
/// <para>
/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
/// </para>
/// </summary>
public sealed partial class ForgetFollowerRequestDescriptor : RequestDescriptor<ForgetFollowerRequestDescriptor, ForgetFollowerRequestParameters>
{
	internal ForgetFollowerRequestDescriptor(Action<ForgetFollowerRequestDescriptor> configure) => configure.Invoke(this);

	public ForgetFollowerRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationForgetFollower;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ccr.forget_follower";

	public ForgetFollowerRequestDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	private string? FollowerClusterValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexName? FollowerIndexValue { get; set; }
	private string? FollowerIndexUuidValue { get; set; }
	private string? LeaderRemoteClusterValue { get; set; }

	public ForgetFollowerRequestDescriptor FollowerCluster(string? followerCluster)
	{
		FollowerClusterValue = followerCluster;
		return Self;
	}

	public ForgetFollowerRequestDescriptor FollowerIndex(Elastic.Clients.Elasticsearch.IndexName? followerIndex)
	{
		FollowerIndexValue = followerIndex;
		return Self;
	}

	public ForgetFollowerRequestDescriptor FollowerIndexUuid(string? followerIndexUuid)
	{
		FollowerIndexUuidValue = followerIndexUuid;
		return Self;
	}

	public ForgetFollowerRequestDescriptor LeaderRemoteCluster(string? leaderRemoteCluster)
	{
		LeaderRemoteClusterValue = leaderRemoteCluster;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(FollowerClusterValue))
		{
			writer.WritePropertyName("follower_cluster");
			writer.WriteStringValue(FollowerClusterValue);
		}

		if (FollowerIndexValue is not null)
		{
			writer.WritePropertyName("follower_index");
			JsonSerializer.Serialize(writer, FollowerIndexValue, options);
		}

		if (!string.IsNullOrEmpty(FollowerIndexUuidValue))
		{
			writer.WritePropertyName("follower_index_uuid");
			writer.WriteStringValue(FollowerIndexUuidValue);
		}

		if (!string.IsNullOrEmpty(LeaderRemoteClusterValue))
		{
			writer.WritePropertyName("leader_remote_cluster");
			writer.WriteStringValue(LeaderRemoteClusterValue);
		}

		writer.WriteEndObject();
	}
}