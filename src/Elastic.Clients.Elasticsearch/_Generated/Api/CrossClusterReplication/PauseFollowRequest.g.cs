// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.CrossClusterReplication;

public sealed partial class PauseFollowRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Pause a follower.
/// Pause a cross-cluster replication follower index.
/// The follower index will not fetch any additional operations from the leader index.
/// You can resume following with the resume follower API.
/// You can pause and resume a follower index to change the configuration of the following task.
/// </para>
/// </summary>
public sealed partial class PauseFollowRequest : PlainRequest<PauseFollowRequestParameters>
{
	public PauseFollowRequest(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	[JsonConstructor]
	internal PauseFollowRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationPauseFollow;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ccr.pause_follow";

	/// <summary>
	/// <para>
	/// The name of the follower index that should pause following its leader index.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.IndexName Index { get => P<Elastic.Clients.Elasticsearch.IndexName>("index"); set => PR("index", value); }
}

/// <summary>
/// <para>
/// Pause a follower.
/// Pause a cross-cluster replication follower index.
/// The follower index will not fetch any additional operations from the leader index.
/// You can resume following with the resume follower API.
/// You can pause and resume a follower index to change the configuration of the following task.
/// </para>
/// </summary>
public sealed partial class PauseFollowRequestDescriptor<TDocument> : RequestDescriptor<PauseFollowRequestDescriptor<TDocument>, PauseFollowRequestParameters>
{
	internal PauseFollowRequestDescriptor(Action<PauseFollowRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public PauseFollowRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	public PauseFollowRequestDescriptor() : this(typeof(TDocument))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationPauseFollow;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ccr.pause_follow";

	public PauseFollowRequestDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Pause a follower.
/// Pause a cross-cluster replication follower index.
/// The follower index will not fetch any additional operations from the leader index.
/// You can resume following with the resume follower API.
/// You can pause and resume a follower index to change the configuration of the following task.
/// </para>
/// </summary>
public sealed partial class PauseFollowRequestDescriptor : RequestDescriptor<PauseFollowRequestDescriptor, PauseFollowRequestParameters>
{
	internal PauseFollowRequestDescriptor(Action<PauseFollowRequestDescriptor> configure) => configure.Invoke(this);

	public PauseFollowRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName index) : base(r => r.Required("index", index))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.CrossClusterReplicationPauseFollow;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ccr.pause_follow";

	public PauseFollowRequestDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}