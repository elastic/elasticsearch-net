// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport.Products.Elasticsearch;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

internal sealed partial class DeleteByQueryResponseConverter : System.Text.Json.Serialization.JsonConverter<DeleteByQueryResponse>
{
	private static readonly System.Text.Json.JsonEncodedText PropBatches = System.Text.Json.JsonEncodedText.Encode("batches");
	private static readonly System.Text.Json.JsonEncodedText PropDeleted = System.Text.Json.JsonEncodedText.Encode("deleted");
	private static readonly System.Text.Json.JsonEncodedText PropFailures = System.Text.Json.JsonEncodedText.Encode("failures");
	private static readonly System.Text.Json.JsonEncodedText PropNoops = System.Text.Json.JsonEncodedText.Encode("noops");
	private static readonly System.Text.Json.JsonEncodedText PropRequestsPerSecond = System.Text.Json.JsonEncodedText.Encode("requests_per_second");
	private static readonly System.Text.Json.JsonEncodedText PropRetries = System.Text.Json.JsonEncodedText.Encode("retries");
	private static readonly System.Text.Json.JsonEncodedText PropSliceId = System.Text.Json.JsonEncodedText.Encode("slice_id");
	private static readonly System.Text.Json.JsonEncodedText PropTask = System.Text.Json.JsonEncodedText.Encode("task");
	private static readonly System.Text.Json.JsonEncodedText PropThrottled = System.Text.Json.JsonEncodedText.Encode("throttled");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledMillis = System.Text.Json.JsonEncodedText.Encode("throttled_millis");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledUntil = System.Text.Json.JsonEncodedText.Encode("throttled_until");
	private static readonly System.Text.Json.JsonEncodedText PropThrottledUntilMillis = System.Text.Json.JsonEncodedText.Encode("throttled_until_millis");
	private static readonly System.Text.Json.JsonEncodedText PropTimedOut = System.Text.Json.JsonEncodedText.Encode("timed_out");
	private static readonly System.Text.Json.JsonEncodedText PropTook = System.Text.Json.JsonEncodedText.Encode("took");
	private static readonly System.Text.Json.JsonEncodedText PropTotal = System.Text.Json.JsonEncodedText.Encode("total");
	private static readonly System.Text.Json.JsonEncodedText PropVersionConflicts = System.Text.Json.JsonEncodedText.Encode("version_conflicts");

	public override DeleteByQueryResponse Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<long?> propBatches = default;
		LocalJsonValue<long?> propDeleted = default;
		LocalJsonValue<IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>?> propFailures = default;
		LocalJsonValue<long?> propNoops = default;
		LocalJsonValue<float?> propRequestsPerSecond = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Retries?> propRetries = default;
		LocalJsonValue<int?> propSliceId = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.TaskId?> propTask = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propThrottled = default;
		LocalJsonValue<long?> propThrottledMillis = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propThrottledUntil = default;
		LocalJsonValue<long?> propThrottledUntilMillis = default;
		LocalJsonValue<bool?> propTimedOut = default;
		LocalJsonValue<long?> propTook = default;
		LocalJsonValue<long?> propTotal = default;
		LocalJsonValue<long?> propVersionConflicts = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propBatches.TryRead(ref reader, options, PropBatches))
			{
				continue;
			}

			if (propDeleted.TryRead(ref reader, options, PropDeleted))
			{
				continue;
			}

			if (propFailures.TryRead(ref reader, options, PropFailures))
			{
				continue;
			}

			if (propNoops.TryRead(ref reader, options, PropNoops))
			{
				continue;
			}

			if (propRequestsPerSecond.TryRead(ref reader, options, PropRequestsPerSecond))
			{
				continue;
			}

			if (propRetries.TryRead(ref reader, options, PropRetries))
			{
				continue;
			}

			if (propSliceId.TryRead(ref reader, options, PropSliceId))
			{
				continue;
			}

			if (propTask.TryRead(ref reader, options, PropTask))
			{
				continue;
			}

			if (propThrottled.TryRead(ref reader, options, PropThrottled))
			{
				continue;
			}

			if (propThrottledMillis.TryRead(ref reader, options, PropThrottledMillis))
			{
				continue;
			}

			if (propThrottledUntil.TryRead(ref reader, options, PropThrottledUntil))
			{
				continue;
			}

			if (propThrottledUntilMillis.TryRead(ref reader, options, PropThrottledUntilMillis))
			{
				continue;
			}

			if (propTimedOut.TryRead(ref reader, options, PropTimedOut))
			{
				continue;
			}

			if (propTook.TryRead(ref reader, options, PropTook))
			{
				continue;
			}

			if (propTotal.TryRead(ref reader, options, PropTotal))
			{
				continue;
			}

			if (propVersionConflicts.TryRead(ref reader, options, PropVersionConflicts))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new DeleteByQueryResponse
		{
			Batches = propBatches.Value
,
			Deleted = propDeleted.Value
,
			Failures = propFailures.Value
,
			Noops = propNoops.Value
,
			RequestsPerSecond = propRequestsPerSecond.Value
,
			Retries = propRetries.Value
,
			SliceId = propSliceId.Value
,
			Task = propTask.Value
,
			Throttled = propThrottled.Value
,
			ThrottledMillis = propThrottledMillis.Value
,
			ThrottledUntil = propThrottledUntil.Value
,
			ThrottledUntilMillis = propThrottledUntilMillis.Value
,
			TimedOut = propTimedOut.Value
,
			Took = propTook.Value
,
			Total = propTotal.Value
,
			VersionConflicts = propVersionConflicts.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DeleteByQueryResponse value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropBatches, value.Batches);
		writer.WriteProperty(options, PropDeleted, value.Deleted);
		writer.WriteProperty(options, PropFailures, value.Failures);
		writer.WriteProperty(options, PropNoops, value.Noops);
		writer.WriteProperty(options, PropRequestsPerSecond, value.RequestsPerSecond);
		writer.WriteProperty(options, PropRetries, value.Retries);
		writer.WriteProperty(options, PropSliceId, value.SliceId);
		writer.WriteProperty(options, PropTask, value.Task);
		writer.WriteProperty(options, PropThrottled, value.Throttled);
		writer.WriteProperty(options, PropThrottledMillis, value.ThrottledMillis);
		writer.WriteProperty(options, PropThrottledUntil, value.ThrottledUntil);
		writer.WriteProperty(options, PropThrottledUntilMillis, value.ThrottledUntilMillis);
		writer.WriteProperty(options, PropTimedOut, value.TimedOut);
		writer.WriteProperty(options, PropTook, value.Took);
		writer.WriteProperty(options, PropTotal, value.Total);
		writer.WriteProperty(options, PropVersionConflicts, value.VersionConflicts);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(DeleteByQueryResponseConverter))]
public sealed partial class DeleteByQueryResponse : ElasticsearchResponse
{
	public long? Batches { get; init; }
	public long? Deleted { get; init; }
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.BulkIndexByScrollFailure>? Failures { get; init; }
	public long? Noops { get; init; }
	public float? RequestsPerSecond { get; init; }
	public Elastic.Clients.Elasticsearch.Retries? Retries { get; init; }
	public int? SliceId { get; init; }
	public Elastic.Clients.Elasticsearch.TaskId? Task { get; init; }
	public Elastic.Clients.Elasticsearch.Duration? Throttled { get; init; }
	public long? ThrottledMillis { get; init; }
	public Elastic.Clients.Elasticsearch.Duration? ThrottledUntil { get; init; }
	public long? ThrottledUntilMillis { get; init; }
	public bool? TimedOut { get; init; }
	public long? Took { get; init; }
	public long? Total { get; init; }
	public long? VersionConflicts { get; init; }
}