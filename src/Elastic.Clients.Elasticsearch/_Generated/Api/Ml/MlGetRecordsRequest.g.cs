// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public sealed class MlGetRecordsRequestParameters : RequestParameters<MlGetRecordsRequestParameters>
	{
		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }
	}

	public partial class MlGetRecordsRequest : PlainRequestBase<MlGetRecordsRequestParameters>
	{
		public MlGetRecordsRequest(Elastic.Clients.Elasticsearch.Id job_id) : base(r => r.Required("job_id", job_id))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.MachineLearningGetRecords;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }

		[JsonInclude]
		[JsonPropertyName("desc")]
		public bool? Desc { get; set; }

		[JsonInclude]
		[JsonPropertyName("end")]
		public DateTimeOffset? End { get; set; }

		[JsonInclude]
		[JsonPropertyName("exclude_interim")]
		public bool? ExcludeInterim { get; set; }

		[JsonInclude]
		[JsonPropertyName("page")]
		public Elastic.Clients.Elasticsearch.Ml.Page? Page { get; set; }

		[JsonInclude]
		[JsonPropertyName("record_score")]
		public double? RecordScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("sort")]
		public Elastic.Clients.Elasticsearch.Field? Sort { get; set; }

		[JsonInclude]
		[JsonPropertyName("start")]
		public DateTimeOffset? Start { get; set; }
	}

	public sealed partial class MlGetRecordsRequestDescriptor<TDocument> : RequestDescriptorBase<MlGetRecordsRequestDescriptor<TDocument>, MlGetRecordsRequestParameters>
	{
		internal MlGetRecordsRequestDescriptor(Action<MlGetRecordsRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		public MlGetRecordsRequestDescriptor(Elastic.Clients.Elasticsearch.Id job_id) : base(r => r.Required("job_id", job_id))
		{
		}

		internal MlGetRecordsRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.MachineLearningGetRecords;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public MlGetRecordsRequestDescriptor<TDocument> From(int? from) => Qs("from", from);
		public MlGetRecordsRequestDescriptor<TDocument> Size(int? size) => Qs("size", size);
		public MlGetRecordsRequestDescriptor<TDocument> JobId(Elastic.Clients.Elasticsearch.Id job_id)
		{
			RouteValues.Required("job_id", job_id);
			return Self;
		}

		private bool? DescValue { get; set; }

		private DateTimeOffset? EndValue { get; set; }

		private bool? ExcludeInterimValue { get; set; }

		private Elastic.Clients.Elasticsearch.Ml.Page? PageValue { get; set; }

		private PageDescriptor PageDescriptor { get; set; }

		private Action<PageDescriptor> PageDescriptorAction { get; set; }

		private double? RecordScoreValue { get; set; }

		private Elastic.Clients.Elasticsearch.Field? SortValue { get; set; }

		private DateTimeOffset? StartValue { get; set; }

		public MlGetRecordsRequestDescriptor<TDocument> Desc(bool? desc = true)
		{
			DescValue = desc;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> End(DateTimeOffset? end)
		{
			EndValue = end;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> ExcludeInterim(bool? excludeInterim = true)
		{
			ExcludeInterimValue = excludeInterim;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Page(Elastic.Clients.Elasticsearch.Ml.Page? page)
		{
			PageDescriptor = null;
			PageDescriptorAction = null;
			PageValue = page;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Page(PageDescriptor descriptor)
		{
			PageValue = null;
			PageDescriptorAction = null;
			PageDescriptor = descriptor;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Page(Action<PageDescriptor> configure)
		{
			PageValue = null;
			PageDescriptor = null;
			PageDescriptorAction = configure;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> RecordScore(double? recordScore)
		{
			RecordScoreValue = recordScore;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.Field? sort)
		{
			SortValue = sort;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Sort<TValue>(Expression<Func<TDocument, TValue>> sort)
		{
			SortValue = sort;
			return Self;
		}

		public MlGetRecordsRequestDescriptor<TDocument> Start(DateTimeOffset? start)
		{
			StartValue = start;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (DescValue.HasValue)
			{
				writer.WritePropertyName("desc");
				writer.WriteBooleanValue(DescValue.Value);
			}

			if (EndValue is not null)
			{
				writer.WritePropertyName("end");
				JsonSerializer.Serialize(writer, EndValue, options);
			}

			if (ExcludeInterimValue.HasValue)
			{
				writer.WritePropertyName("exclude_interim");
				writer.WriteBooleanValue(ExcludeInterimValue.Value);
			}

			if (PageDescriptor is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, PageDescriptor, options);
			}
			else if (PageDescriptorAction is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, new PageDescriptor(PageDescriptorAction), options);
			}
			else if (PageValue is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, PageValue, options);
			}

			if (RecordScoreValue.HasValue)
			{
				writer.WritePropertyName("record_score");
				writer.WriteNumberValue(RecordScoreValue.Value);
			}

			if (SortValue is not null)
			{
				writer.WritePropertyName("sort");
				JsonSerializer.Serialize(writer, SortValue, options);
			}

			if (StartValue is not null)
			{
				writer.WritePropertyName("start");
				JsonSerializer.Serialize(writer, StartValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class MlGetRecordsRequestDescriptor : RequestDescriptorBase<MlGetRecordsRequestDescriptor, MlGetRecordsRequestParameters>
	{
		internal MlGetRecordsRequestDescriptor(Action<MlGetRecordsRequestDescriptor> configure) => configure.Invoke(this);
		public MlGetRecordsRequestDescriptor(Elastic.Clients.Elasticsearch.Id job_id) : base(r => r.Required("job_id", job_id))
		{
		}

		internal MlGetRecordsRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.MachineLearningGetRecords;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public MlGetRecordsRequestDescriptor From(int? from) => Qs("from", from);
		public MlGetRecordsRequestDescriptor Size(int? size) => Qs("size", size);
		public MlGetRecordsRequestDescriptor JobId(Elastic.Clients.Elasticsearch.Id job_id)
		{
			RouteValues.Required("job_id", job_id);
			return Self;
		}

		private bool? DescValue { get; set; }

		private DateTimeOffset? EndValue { get; set; }

		private bool? ExcludeInterimValue { get; set; }

		private Elastic.Clients.Elasticsearch.Ml.Page? PageValue { get; set; }

		private PageDescriptor PageDescriptor { get; set; }

		private Action<PageDescriptor> PageDescriptorAction { get; set; }

		private double? RecordScoreValue { get; set; }

		private Elastic.Clients.Elasticsearch.Field? SortValue { get; set; }

		private DateTimeOffset? StartValue { get; set; }

		public MlGetRecordsRequestDescriptor Desc(bool? desc = true)
		{
			DescValue = desc;
			return Self;
		}

		public MlGetRecordsRequestDescriptor End(DateTimeOffset? end)
		{
			EndValue = end;
			return Self;
		}

		public MlGetRecordsRequestDescriptor ExcludeInterim(bool? excludeInterim = true)
		{
			ExcludeInterimValue = excludeInterim;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Page(Elastic.Clients.Elasticsearch.Ml.Page? page)
		{
			PageDescriptor = null;
			PageDescriptorAction = null;
			PageValue = page;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Page(PageDescriptor descriptor)
		{
			PageValue = null;
			PageDescriptorAction = null;
			PageDescriptor = descriptor;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Page(Action<PageDescriptor> configure)
		{
			PageValue = null;
			PageDescriptor = null;
			PageDescriptorAction = configure;
			return Self;
		}

		public MlGetRecordsRequestDescriptor RecordScore(double? recordScore)
		{
			RecordScoreValue = recordScore;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Sort(Elastic.Clients.Elasticsearch.Field? sort)
		{
			SortValue = sort;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Sort<TDocument, TValue>(Expression<Func<TDocument, TValue>> sort)
		{
			SortValue = sort;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Sort<TDocument>(Expression<Func<TDocument, object>> sort)
		{
			SortValue = sort;
			return Self;
		}

		public MlGetRecordsRequestDescriptor Start(DateTimeOffset? start)
		{
			StartValue = start;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (DescValue.HasValue)
			{
				writer.WritePropertyName("desc");
				writer.WriteBooleanValue(DescValue.Value);
			}

			if (EndValue is not null)
			{
				writer.WritePropertyName("end");
				JsonSerializer.Serialize(writer, EndValue, options);
			}

			if (ExcludeInterimValue.HasValue)
			{
				writer.WritePropertyName("exclude_interim");
				writer.WriteBooleanValue(ExcludeInterimValue.Value);
			}

			if (PageDescriptor is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, PageDescriptor, options);
			}
			else if (PageDescriptorAction is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, new PageDescriptor(PageDescriptorAction), options);
			}
			else if (PageValue is not null)
			{
				writer.WritePropertyName("page");
				JsonSerializer.Serialize(writer, PageValue, options);
			}

			if (RecordScoreValue.HasValue)
			{
				writer.WritePropertyName("record_score");
				writer.WriteNumberValue(RecordScoreValue.Value);
			}

			if (SortValue is not null)
			{
				writer.WritePropertyName("sort");
				JsonSerializer.Serialize(writer, SortValue, options);
			}

			if (StartValue is not null)
			{
				writer.WritePropertyName("start");
				JsonSerializer.Serialize(writer, StartValue, options);
			}

			writer.WriteEndObject();
		}
	}
}