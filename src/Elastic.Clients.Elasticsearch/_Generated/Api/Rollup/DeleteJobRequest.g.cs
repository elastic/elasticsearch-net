// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Rollup;

public sealed partial class DeleteJobRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Delete a rollup job.
/// </para>
/// <para>
/// A job must be stopped before it can be deleted.
/// If you attempt to delete a started job, an error occurs.
/// Similarly, if you attempt to delete a nonexistent job, an exception occurs.
/// </para>
/// <para>
/// IMPORTANT: When you delete a job, you remove only the process that is actively monitoring and rolling up data.
/// The API does not delete any previously rolled up data.
/// This is by design; a user may wish to roll up a static data set.
/// Because the data set is static, after it has been fully rolled up there is no need to keep the indexing rollup job around (as there will be no new data).
/// Thus the job can be deleted, leaving behind the rolled up data for analysis.
/// If you wish to also remove the rollup data and the rollup index contains the data for only a single job, you can delete the whole rollup index.
/// If the rollup index stores data from several jobs, you must issue a delete-by-query that targets the rollup job's identifier in the rollup index. For example:
/// </para>
/// <code>
/// POST my_rollup_index/_delete_by_query
/// {
///   "query": {
///     "term": {
///       "_rollup.id": "the_rollup_job_id"
///     }
///   }
/// }
/// </code>
/// </summary>
public sealed partial class DeleteJobRequest : PlainRequest<DeleteJobRequestParameters>
{
	public DeleteJobRequest(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	[JsonConstructor]
	internal DeleteJobRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupDeleteJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.delete_job";

	/// <summary>
	/// <para>
	/// Identifier for the job.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Id Id { get => P<Elastic.Clients.Elasticsearch.Id>("id"); set => PR("id", value); }
}

/// <summary>
/// <para>
/// Delete a rollup job.
/// </para>
/// <para>
/// A job must be stopped before it can be deleted.
/// If you attempt to delete a started job, an error occurs.
/// Similarly, if you attempt to delete a nonexistent job, an exception occurs.
/// </para>
/// <para>
/// IMPORTANT: When you delete a job, you remove only the process that is actively monitoring and rolling up data.
/// The API does not delete any previously rolled up data.
/// This is by design; a user may wish to roll up a static data set.
/// Because the data set is static, after it has been fully rolled up there is no need to keep the indexing rollup job around (as there will be no new data).
/// Thus the job can be deleted, leaving behind the rolled up data for analysis.
/// If you wish to also remove the rollup data and the rollup index contains the data for only a single job, you can delete the whole rollup index.
/// If the rollup index stores data from several jobs, you must issue a delete-by-query that targets the rollup job's identifier in the rollup index. For example:
/// </para>
/// <code>
/// POST my_rollup_index/_delete_by_query
/// {
///   "query": {
///     "term": {
///       "_rollup.id": "the_rollup_job_id"
///     }
///   }
/// }
/// </code>
/// </summary>
public sealed partial class DeleteJobRequestDescriptor<TDocument> : RequestDescriptor<DeleteJobRequestDescriptor<TDocument>, DeleteJobRequestParameters>
{
	internal DeleteJobRequestDescriptor(Action<DeleteJobRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public DeleteJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupDeleteJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.delete_job";

	public DeleteJobRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Delete a rollup job.
/// </para>
/// <para>
/// A job must be stopped before it can be deleted.
/// If you attempt to delete a started job, an error occurs.
/// Similarly, if you attempt to delete a nonexistent job, an exception occurs.
/// </para>
/// <para>
/// IMPORTANT: When you delete a job, you remove only the process that is actively monitoring and rolling up data.
/// The API does not delete any previously rolled up data.
/// This is by design; a user may wish to roll up a static data set.
/// Because the data set is static, after it has been fully rolled up there is no need to keep the indexing rollup job around (as there will be no new data).
/// Thus the job can be deleted, leaving behind the rolled up data for analysis.
/// If you wish to also remove the rollup data and the rollup index contains the data for only a single job, you can delete the whole rollup index.
/// If the rollup index stores data from several jobs, you must issue a delete-by-query that targets the rollup job's identifier in the rollup index. For example:
/// </para>
/// <code>
/// POST my_rollup_index/_delete_by_query
/// {
///   "query": {
///     "term": {
///       "_rollup.id": "the_rollup_job_id"
///     }
///   }
/// }
/// </code>
/// </summary>
public sealed partial class DeleteJobRequestDescriptor : RequestDescriptor<DeleteJobRequestDescriptor, DeleteJobRequestParameters>
{
	internal DeleteJobRequestDescriptor(Action<DeleteJobRequestDescriptor> configure) => configure.Invoke(this);

	public DeleteJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupDeleteJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.delete_job";

	public DeleteJobRequestDescriptor Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}