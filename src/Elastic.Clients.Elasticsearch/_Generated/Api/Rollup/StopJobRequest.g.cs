// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Rollup;

public sealed partial class StopJobRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// If <c>wait_for_completion</c> is <c>true</c>, the API blocks for (at maximum) the specified duration while waiting for the job to stop.
	/// If more than <c>timeout</c> time has passed, the API throws a timeout exception.
	/// NOTE: Even if a timeout occurs, the stop request is still processing and eventually moves the job to STOPPED.
	/// The timeout simply means the API call itself timed out while waiting for the status change.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }

	/// <summary>
	/// <para>
	/// If set to <c>true</c>, causes the API to block until the indexer state completely stops.
	/// If set to <c>false</c>, the API returns immediately and the indexer is stopped asynchronously in the background.
	/// </para>
	/// </summary>
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
}

/// <summary>
/// <para>
/// Stop rollup jobs.
/// If you try to stop a job that does not exist, an exception occurs.
/// If you try to stop a job that is already stopped, nothing happens.
/// </para>
/// <para>
/// Since only a stopped job can be deleted, it can be useful to block the API until the indexer has fully stopped.
/// This is accomplished with the <c>wait_for_completion</c> query parameter, and optionally a timeout. For example:
/// </para>
/// <code>
/// POST _rollup/job/sensor/_stop?wait_for_completion=true&amp;timeout=10s
/// </code>
/// <para>
/// The parameter blocks the API call from returning until either the job has moved to STOPPED or the specified time has elapsed.
/// If the specified time elapses without the job moving to STOPPED, a timeout exception occurs.
/// </para>
/// </summary>
public sealed partial class StopJobRequest : PlainRequest<StopJobRequestParameters>
{
	public StopJobRequest(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStopJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.stop_job";

	/// <summary>
	/// <para>
	/// If <c>wait_for_completion</c> is <c>true</c>, the API blocks for (at maximum) the specified duration while waiting for the job to stop.
	/// If more than <c>timeout</c> time has passed, the API throws a timeout exception.
	/// NOTE: Even if a timeout occurs, the stop request is still processing and eventually moves the job to STOPPED.
	/// The timeout simply means the API call itself timed out while waiting for the status change.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }

	/// <summary>
	/// <para>
	/// If set to <c>true</c>, causes the API to block until the indexer state completely stops.
	/// If set to <c>false</c>, the API returns immediately and the indexer is stopped asynchronously in the background.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
}

/// <summary>
/// <para>
/// Stop rollup jobs.
/// If you try to stop a job that does not exist, an exception occurs.
/// If you try to stop a job that is already stopped, nothing happens.
/// </para>
/// <para>
/// Since only a stopped job can be deleted, it can be useful to block the API until the indexer has fully stopped.
/// This is accomplished with the <c>wait_for_completion</c> query parameter, and optionally a timeout. For example:
/// </para>
/// <code>
/// POST _rollup/job/sensor/_stop?wait_for_completion=true&amp;timeout=10s
/// </code>
/// <para>
/// The parameter blocks the API call from returning until either the job has moved to STOPPED or the specified time has elapsed.
/// If the specified time elapses without the job moving to STOPPED, a timeout exception occurs.
/// </para>
/// </summary>
public sealed partial class StopJobRequestDescriptor<TDocument> : RequestDescriptor<StopJobRequestDescriptor<TDocument>, StopJobRequestParameters>
{
	internal StopJobRequestDescriptor(Action<StopJobRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public StopJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStopJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.stop_job";

	public StopJobRequestDescriptor<TDocument> Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);
	public StopJobRequestDescriptor<TDocument> WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);

	public StopJobRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Stop rollup jobs.
/// If you try to stop a job that does not exist, an exception occurs.
/// If you try to stop a job that is already stopped, nothing happens.
/// </para>
/// <para>
/// Since only a stopped job can be deleted, it can be useful to block the API until the indexer has fully stopped.
/// This is accomplished with the <c>wait_for_completion</c> query parameter, and optionally a timeout. For example:
/// </para>
/// <code>
/// POST _rollup/job/sensor/_stop?wait_for_completion=true&amp;timeout=10s
/// </code>
/// <para>
/// The parameter blocks the API call from returning until either the job has moved to STOPPED or the specified time has elapsed.
/// If the specified time elapses without the job moving to STOPPED, a timeout exception occurs.
/// </para>
/// </summary>
public sealed partial class StopJobRequestDescriptor : RequestDescriptor<StopJobRequestDescriptor, StopJobRequestParameters>
{
	internal StopJobRequestDescriptor(Action<StopJobRequestDescriptor> configure) => configure.Invoke(this);

	public StopJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStopJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.stop_job";

	public StopJobRequestDescriptor Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);
	public StopJobRequestDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);

	public StopJobRequestDescriptor Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}