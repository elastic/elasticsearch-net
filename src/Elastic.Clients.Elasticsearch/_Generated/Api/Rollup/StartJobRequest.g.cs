// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Rollup;

public sealed partial class StartJobRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Start rollup jobs.
/// If you try to start a job that does not exist, an exception occurs.
/// If you try to start a job that is already started, nothing happens.
/// </para>
/// </summary>
public sealed partial class StartJobRequest : PlainRequest<StartJobRequestParameters>
{
	public StartJobRequest(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	[JsonConstructor]
	internal StartJobRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStartJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.start_job";

	/// <summary>
	/// <para>
	/// Identifier for the rollup job.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Id Id { get => P<Elastic.Clients.Elasticsearch.Id>("id"); set => PR("id", value); }
}

/// <summary>
/// <para>
/// Start rollup jobs.
/// If you try to start a job that does not exist, an exception occurs.
/// If you try to start a job that is already started, nothing happens.
/// </para>
/// </summary>
public sealed partial class StartJobRequestDescriptor<TDocument> : RequestDescriptor<StartJobRequestDescriptor<TDocument>, StartJobRequestParameters>
{
	internal StartJobRequestDescriptor(Action<StartJobRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public StartJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStartJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.start_job";

	public StartJobRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Start rollup jobs.
/// If you try to start a job that does not exist, an exception occurs.
/// If you try to start a job that is already started, nothing happens.
/// </para>
/// </summary>
public sealed partial class StartJobRequestDescriptor : RequestDescriptor<StartJobRequestDescriptor, StartJobRequestParameters>
{
	internal StartJobRequestDescriptor(Action<StartJobRequestDescriptor> configure) => configure.Invoke(this);

	public StartJobRequestDescriptor(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.RollupStartJob;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "rollup.start_job";

	public StartJobRequestDescriptor Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}