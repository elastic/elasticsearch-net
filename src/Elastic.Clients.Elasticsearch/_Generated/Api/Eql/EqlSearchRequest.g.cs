// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Eql;

public sealed partial class EqlSearchRequestParameters : RequestParameters
{
	public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }
	public ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? ExpandWildcards { get => Q<ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>?>("expand_wildcards"); set => Q("expand_wildcards", value); }

	/// <summary>
	/// <para>
	/// If true, missing or closed indices are not included in the response.
	/// </para>
	/// </summary>
	public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }
}

internal sealed partial class EqlSearchRequestConverter : System.Text.Json.Serialization.JsonConverter<EqlSearchRequest>
{
	private static readonly System.Text.Json.JsonEncodedText PropAllowPartialSearchResults = System.Text.Json.JsonEncodedText.Encode("allow_partial_search_results");
	private static readonly System.Text.Json.JsonEncodedText PropAllowPartialSequenceResults = System.Text.Json.JsonEncodedText.Encode("allow_partial_sequence_results");
	private static readonly System.Text.Json.JsonEncodedText PropCaseSensitive = System.Text.Json.JsonEncodedText.Encode("case_sensitive");
	private static readonly System.Text.Json.JsonEncodedText PropEventCategoryField = System.Text.Json.JsonEncodedText.Encode("event_category_field");
	private static readonly System.Text.Json.JsonEncodedText PropFetchSize = System.Text.Json.JsonEncodedText.Encode("fetch_size");
	private static readonly System.Text.Json.JsonEncodedText PropFields = System.Text.Json.JsonEncodedText.Encode("fields");
	private static readonly System.Text.Json.JsonEncodedText PropFilter = System.Text.Json.JsonEncodedText.Encode("filter");
	private static readonly System.Text.Json.JsonEncodedText PropKeepAlive = System.Text.Json.JsonEncodedText.Encode("keep_alive");
	private static readonly System.Text.Json.JsonEncodedText PropKeepOnCompletion = System.Text.Json.JsonEncodedText.Encode("keep_on_completion");
	private static readonly System.Text.Json.JsonEncodedText PropMaxSamplesPerKey = System.Text.Json.JsonEncodedText.Encode("max_samples_per_key");
	private static readonly System.Text.Json.JsonEncodedText PropQuery = System.Text.Json.JsonEncodedText.Encode("query");
	private static readonly System.Text.Json.JsonEncodedText PropResultPosition = System.Text.Json.JsonEncodedText.Encode("result_position");
	private static readonly System.Text.Json.JsonEncodedText PropRuntimeMappings = System.Text.Json.JsonEncodedText.Encode("runtime_mappings");
	private static readonly System.Text.Json.JsonEncodedText PropSize = System.Text.Json.JsonEncodedText.Encode("size");
	private static readonly System.Text.Json.JsonEncodedText PropTiebreakerField = System.Text.Json.JsonEncodedText.Encode("tiebreaker_field");
	private static readonly System.Text.Json.JsonEncodedText PropTimestampField = System.Text.Json.JsonEncodedText.Encode("timestamp_field");
	private static readonly System.Text.Json.JsonEncodedText PropWaitForCompletionTimeout = System.Text.Json.JsonEncodedText.Encode("wait_for_completion_timeout");

	public override EqlSearchRequest Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<bool?> propAllowPartialSearchResults = default;
		LocalJsonValue<bool?> propAllowPartialSequenceResults = default;
		LocalJsonValue<bool?> propCaseSensitive = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propEventCategoryField = default;
		LocalJsonValue<int?> propFetchSize = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>?> propFields = default;
		LocalJsonValue<ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>?> propFilter = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propKeepAlive = default;
		LocalJsonValue<bool?> propKeepOnCompletion = default;
		LocalJsonValue<int?> propMaxSamplesPerKey = default;
		LocalJsonValue<string> propQuery = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Eql.ResultPosition?> propResultPosition = default;
		LocalJsonValue<IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>?> propRuntimeMappings = default;
		LocalJsonValue<int?> propSize = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propTiebreakerField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Field?> propTimestampField = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Duration?> propWaitForCompletionTimeout = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propAllowPartialSearchResults.TryReadProperty(ref reader, options, PropAllowPartialSearchResults, null))
			{
				continue;
			}

			if (propAllowPartialSequenceResults.TryReadProperty(ref reader, options, PropAllowPartialSequenceResults, null))
			{
				continue;
			}

			if (propCaseSensitive.TryReadProperty(ref reader, options, PropCaseSensitive, null))
			{
				continue;
			}

			if (propEventCategoryField.TryReadProperty(ref reader, options, PropEventCategoryField, null))
			{
				continue;
			}

			if (propFetchSize.TryReadProperty(ref reader, options, PropFetchSize, null))
			{
				continue;
			}

			if (propFields.TryReadProperty(ref reader, options, PropFields, static ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>(o, null)))
			{
				continue;
			}

			if (propFilter.TryReadProperty(ref reader, options, PropFilter, static ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.Query>(o, null)))
			{
				continue;
			}

			if (propKeepAlive.TryReadProperty(ref reader, options, PropKeepAlive, null))
			{
				continue;
			}

			if (propKeepOnCompletion.TryReadProperty(ref reader, options, PropKeepOnCompletion, null))
			{
				continue;
			}

			if (propMaxSamplesPerKey.TryReadProperty(ref reader, options, PropMaxSamplesPerKey, null))
			{
				continue;
			}

			if (propQuery.TryReadProperty(ref reader, options, PropQuery, null))
			{
				continue;
			}

			if (propResultPosition.TryReadProperty(ref reader, options, PropResultPosition, null))
			{
				continue;
			}

			if (propRuntimeMappings.TryReadProperty(ref reader, options, PropRuntimeMappings, static IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? (ref System.Text.Json.Utf8JsonReader r, System.Text.Json.JsonSerializerOptions o) => r.ReadDictionaryValue<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>(o, null, null)))
			{
				continue;
			}

			if (propSize.TryReadProperty(ref reader, options, PropSize, null))
			{
				continue;
			}

			if (propTiebreakerField.TryReadProperty(ref reader, options, PropTiebreakerField, null))
			{
				continue;
			}

			if (propTimestampField.TryReadProperty(ref reader, options, PropTimestampField, null))
			{
				continue;
			}

			if (propWaitForCompletionTimeout.TryReadProperty(ref reader, options, PropWaitForCompletionTimeout, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new EqlSearchRequest
		{
			AllowPartialSearchResults = propAllowPartialSearchResults.Value
	,
			AllowPartialSequenceResults = propAllowPartialSequenceResults.Value
	,
			CaseSensitive = propCaseSensitive.Value
	,
			EventCategoryField = propEventCategoryField.Value
	,
			FetchSize = propFetchSize.Value
	,
			Fields = propFields.Value
	,
			Filter = propFilter.Value
	,
			KeepAlive = propKeepAlive.Value
	,
			KeepOnCompletion = propKeepOnCompletion.Value
	,
			MaxSamplesPerKey = propMaxSamplesPerKey.Value
	,
			Query = propQuery.Value
	,
			ResultPosition = propResultPosition.Value
	,
			RuntimeMappings = propRuntimeMappings.Value
	,
			Size = propSize.Value
	,
			TiebreakerField = propTiebreakerField.Value
	,
			TimestampField = propTimestampField.Value
	,
			WaitForCompletionTimeout = propWaitForCompletionTimeout.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, EqlSearchRequest value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropAllowPartialSearchResults, value.AllowPartialSearchResults, null, null);
		writer.WriteProperty(options, PropAllowPartialSequenceResults, value.AllowPartialSequenceResults, null, null);
		writer.WriteProperty(options, PropCaseSensitive, value.CaseSensitive, null, null);
		writer.WriteProperty(options, PropEventCategoryField, value.EventCategoryField, null, null);
		writer.WriteProperty(options, PropFetchSize, value.FetchSize, null, null);
		writer.WriteProperty(options, PropFields, value.Fields, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>(o, v, null));
		writer.WriteProperty(options, PropFilter, value.Filter, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? v) => w.WriteSingleOrManyCollectionValue<Elastic.Clients.Elasticsearch.QueryDsl.Query>(o, v, null));
		writer.WriteProperty(options, PropKeepAlive, value.KeepAlive, null, null);
		writer.WriteProperty(options, PropKeepOnCompletion, value.KeepOnCompletion, null, null);
		writer.WriteProperty(options, PropMaxSamplesPerKey, value.MaxSamplesPerKey, null, null);
		writer.WriteProperty(options, PropQuery, value.Query, null, null);
		writer.WriteProperty(options, PropResultPosition, value.ResultPosition, null, null);
		writer.WriteProperty(options, PropRuntimeMappings, value.RuntimeMappings, null, static (System.Text.Json.Utf8JsonWriter w, System.Text.Json.JsonSerializerOptions o, IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? v) => w.WriteDictionaryValue<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>(o, v, null, null));
		writer.WriteProperty(options, PropSize, value.Size, null, null);
		writer.WriteProperty(options, PropTiebreakerField, value.TiebreakerField, null, null);
		writer.WriteProperty(options, PropTimestampField, value.TimestampField, null, null);
		writer.WriteProperty(options, PropWaitForCompletionTimeout, value.WaitForCompletionTimeout, null, null);
		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// Get EQL search results.
/// Returns search results for an Event Query Language (EQL) query.
/// EQL assumes each document in a data stream or index corresponds to an event.
/// </para>
/// </summary>
[JsonConverter(typeof(EqlSearchRequestConverter))]
public sealed partial class EqlSearchRequest : PlainRequest<EqlSearchRequestParameters>
{
	public EqlSearchRequest(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	[JsonConstructor]
	internal EqlSearchRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.EqlSearch;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "eql.search";

	/// <summary>
	/// <para>
	/// The name of the index to scope the operation
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Indices Indices { get => P<Elastic.Clients.Elasticsearch.Indices>("index"); set => PR("index", value); }
	public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }
	public ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? ExpandWildcards { get => Q<ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>?>("expand_wildcards"); set => Q("expand_wildcards", value); }

	/// <summary>
	/// <para>
	/// If true, missing or closed indices are not included in the response.
	/// </para>
	/// </summary>
	public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }
	public bool? AllowPartialSearchResults { get; set; }
	public bool? AllowPartialSequenceResults { get; set; }
	public bool? CaseSensitive { get; set; }

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? EventCategoryField { get; set; }

	/// <summary>
	/// <para>
	/// Maximum number of events to search at a time for sequence queries.
	/// </para>
	/// </summary>
	public int? FetchSize { get; set; }

	/// <summary>
	/// <para>
	/// Array of wildcard (*) patterns. The response returns values for field names matching these patterns in the fields property of each hit.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? Fields { get; set; }

	/// <summary>
	/// <para>
	/// Query, written in Query DSL, used to filter the events on which the EQL query runs.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? Filter { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? KeepAlive { get; set; }
	public bool? KeepOnCompletion { get; set; }

	/// <summary>
	/// <para>
	/// By default, the response of a sample query contains up to <c>10</c> samples, with one sample per unique set of join keys. Use the <c>size</c>
	/// parameter to get a smaller or larger set of samples. To retrieve more than one sample per set of join keys, use the
	/// <c>max_samples_per_key</c> parameter. Pipes are not supported for sample queries.
	/// </para>
	/// </summary>
	public int? MaxSamplesPerKey { get; set; }

	/// <summary>
	/// <para>
	/// EQL query you wish to run.
	/// </para>
	/// </summary>
	public string Query { get; set; }
	public Elastic.Clients.Elasticsearch.Eql.ResultPosition? ResultPosition { get; set; }
	public IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? RuntimeMappings { get; set; }

	/// <summary>
	/// <para>
	/// For basic queries, the maximum number of matching events to return. Defaults to 10
	/// </para>
	/// </summary>
	public int? Size { get; set; }

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? TiebreakerField { get; set; }

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Field? TimestampField { get; set; }
	public Elastic.Clients.Elasticsearch.Duration? WaitForCompletionTimeout { get; set; }
}

/// <summary>
/// <para>
/// Get EQL search results.
/// Returns search results for an Event Query Language (EQL) query.
/// EQL assumes each document in a data stream or index corresponds to an event.
/// </para>
/// </summary>
public sealed partial class EqlSearchRequestDescriptor<TDocument> : RequestDescriptor<EqlSearchRequestDescriptor<TDocument>, EqlSearchRequestParameters>
{
	internal EqlSearchRequestDescriptor(Action<EqlSearchRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public EqlSearchRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	public EqlSearchRequestDescriptor() : this(typeof(TDocument))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.EqlSearch;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "eql.search";

	public EqlSearchRequestDescriptor<TDocument> AllowNoIndices(bool? allowNoIndices = true) => Qs("allow_no_indices", allowNoIndices);
	public EqlSearchRequestDescriptor<TDocument> ExpandWildcards(ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? expandWildcards) => Qs("expand_wildcards", expandWildcards);
	public EqlSearchRequestDescriptor<TDocument> IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);

	public EqlSearchRequestDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	private bool? AllowPartialSearchResultsValue { get; set; }
	private bool? AllowPartialSequenceResultsValue { get; set; }
	private bool? CaseSensitiveValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? EventCategoryFieldValue { get; set; }
	private int? FetchSizeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? FieldsValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument> FieldsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>> FieldsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>>[] FieldsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? FilterValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> FilterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> FilterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>>[] FilterDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? KeepAliveValue { get; set; }
	private bool? KeepOnCompletionValue { get; set; }
	private int? MaxSamplesPerKeyValue { get; set; }
	private string QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.Eql.ResultPosition? ResultPositionValue { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>> RuntimeMappingsValue { get; set; }
	private int? SizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? TiebreakerFieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? TimestampFieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? WaitForCompletionTimeoutValue { get; set; }

	public EqlSearchRequestDescriptor<TDocument> AllowPartialSearchResults(bool? allowPartialSearchResults = true)
	{
		AllowPartialSearchResultsValue = allowPartialSearchResults;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> AllowPartialSequenceResults(bool? allowPartialSequenceResults = true)
	{
		AllowPartialSequenceResultsValue = allowPartialSequenceResults;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> CaseSensitive(bool? caseSensitive = true)
	{
		CaseSensitiveValue = caseSensitive;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> EventCategoryField(Elastic.Clients.Elasticsearch.Field? eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> EventCategoryField<TValue>(Expression<Func<TDocument, TValue>> eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> EventCategoryField(Expression<Func<TDocument, object>> eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Maximum number of events to search at a time for sequence queries.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> FetchSize(int? fetchSize)
	{
		FetchSizeValue = fetchSize;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Array of wildcard (*) patterns. The response returns values for field names matching these patterns in the fields property of each hit.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> Fields(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? fields)
	{
		FieldsDescriptor = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = null;
		FieldsValue = fields;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument> descriptor)
	{
		FieldsValue = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = null;
		FieldsDescriptor = descriptor;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Fields(Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>> configure)
	{
		FieldsValue = null;
		FieldsDescriptor = null;
		FieldsDescriptorActions = null;
		FieldsDescriptorAction = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Fields(params Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>>[] configure)
	{
		FieldsValue = null;
		FieldsDescriptor = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Query, written in Query DSL, used to filter the events on which the EQL query runs.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> Filter(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? filter)
	{
		FilterDescriptor = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = null;
		FilterValue = filter;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> descriptor)
	{
		FilterValue = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = null;
		FilterDescriptor = descriptor;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Filter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> configure)
	{
		FilterValue = null;
		FilterDescriptor = null;
		FilterDescriptorActions = null;
		FilterDescriptorAction = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> Filter(params Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>>[] configure)
	{
		FilterValue = null;
		FilterDescriptor = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> KeepAlive(Elastic.Clients.Elasticsearch.Duration? keepAlive)
	{
		KeepAliveValue = keepAlive;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> KeepOnCompletion(bool? keepOnCompletion = true)
	{
		KeepOnCompletionValue = keepOnCompletion;
		return Self;
	}

	/// <summary>
	/// <para>
	/// By default, the response of a sample query contains up to <c>10</c> samples, with one sample per unique set of join keys. Use the <c>size</c>
	/// parameter to get a smaller or larger set of samples. To retrieve more than one sample per set of join keys, use the
	/// <c>max_samples_per_key</c> parameter. Pipes are not supported for sample queries.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> MaxSamplesPerKey(int? maxSamplesPerKey)
	{
		MaxSamplesPerKeyValue = maxSamplesPerKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// EQL query you wish to run.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> Query(string query)
	{
		QueryValue = query;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> ResultPosition(Elastic.Clients.Elasticsearch.Eql.ResultPosition? resultPosition)
	{
		ResultPositionValue = resultPosition;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> RuntimeMappings(Func<FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>, FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>> selector)
	{
		RuntimeMappingsValue = selector?.Invoke(new FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// For basic queries, the maximum number of matching events to return. Defaults to 10
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TiebreakerField(Elastic.Clients.Elasticsearch.Field? tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TiebreakerField<TValue>(Expression<Func<TDocument, TValue>> tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TiebreakerField(Expression<Func<TDocument, object>> tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TimestampField(Elastic.Clients.Elasticsearch.Field? timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TimestampField<TValue>(Expression<Func<TDocument, TValue>> timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor<TDocument> TimestampField(Expression<Func<TDocument, object>> timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	public EqlSearchRequestDescriptor<TDocument> WaitForCompletionTimeout(Elastic.Clients.Elasticsearch.Duration? waitForCompletionTimeout)
	{
		WaitForCompletionTimeoutValue = waitForCompletionTimeout;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AllowPartialSearchResultsValue.HasValue)
		{
			writer.WritePropertyName("allow_partial_search_results");
			writer.WriteBooleanValue(AllowPartialSearchResultsValue.Value);
		}

		if (AllowPartialSequenceResultsValue.HasValue)
		{
			writer.WritePropertyName("allow_partial_sequence_results");
			writer.WriteBooleanValue(AllowPartialSequenceResultsValue.Value);
		}

		if (CaseSensitiveValue.HasValue)
		{
			writer.WritePropertyName("case_sensitive");
			writer.WriteBooleanValue(CaseSensitiveValue.Value);
		}

		if (EventCategoryFieldValue is not null)
		{
			writer.WritePropertyName("event_category_field");
			JsonSerializer.Serialize(writer, EventCategoryFieldValue, options);
		}

		if (FetchSizeValue.HasValue)
		{
			writer.WritePropertyName("fetch_size");
			writer.WriteNumberValue(FetchSizeValue.Value);
		}

		if (FieldsDescriptor is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsDescriptor, options);
		}
		else if (FieldsDescriptorAction is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>(FieldsDescriptorAction), options);
		}
		else if (FieldsDescriptorActions is not null)
		{
			writer.WritePropertyName("fields");
			if (FieldsDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in FieldsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor<TDocument>(action), options);
			}

			if (FieldsDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>(FieldsValue, writer, options);
		}

		if (FilterDescriptor is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, FilterDescriptor, options);
		}
		else if (FilterDescriptorAction is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>(FilterDescriptorAction), options);
		}
		else if (FilterDescriptorActions is not null)
		{
			writer.WritePropertyName("filter");
			if (FilterDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in FilterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>(action), options);
			}

			if (FilterDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (FilterValue is not null)
		{
			writer.WritePropertyName("filter");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.QueryDsl.Query>(FilterValue, writer, options);
		}

		if (KeepAliveValue is not null)
		{
			writer.WritePropertyName("keep_alive");
			JsonSerializer.Serialize(writer, KeepAliveValue, options);
		}

		if (KeepOnCompletionValue.HasValue)
		{
			writer.WritePropertyName("keep_on_completion");
			writer.WriteBooleanValue(KeepOnCompletionValue.Value);
		}

		if (MaxSamplesPerKeyValue.HasValue)
		{
			writer.WritePropertyName("max_samples_per_key");
			writer.WriteNumberValue(MaxSamplesPerKeyValue.Value);
		}

		writer.WritePropertyName("query");
		writer.WriteStringValue(QueryValue);
		if (ResultPositionValue is not null)
		{
			writer.WritePropertyName("result_position");
			JsonSerializer.Serialize(writer, ResultPositionValue, options);
		}

		if (RuntimeMappingsValue is not null)
		{
			writer.WritePropertyName("runtime_mappings");
			JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (TiebreakerFieldValue is not null)
		{
			writer.WritePropertyName("tiebreaker_field");
			JsonSerializer.Serialize(writer, TiebreakerFieldValue, options);
		}

		if (TimestampFieldValue is not null)
		{
			writer.WritePropertyName("timestamp_field");
			JsonSerializer.Serialize(writer, TimestampFieldValue, options);
		}

		if (WaitForCompletionTimeoutValue is not null)
		{
			writer.WritePropertyName("wait_for_completion_timeout");
			JsonSerializer.Serialize(writer, WaitForCompletionTimeoutValue, options);
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// Get EQL search results.
/// Returns search results for an Event Query Language (EQL) query.
/// EQL assumes each document in a data stream or index corresponds to an event.
/// </para>
/// </summary>
public sealed partial class EqlSearchRequestDescriptor : RequestDescriptor<EqlSearchRequestDescriptor, EqlSearchRequestParameters>
{
	internal EqlSearchRequestDescriptor(Action<EqlSearchRequestDescriptor> configure) => configure.Invoke(this);

	public EqlSearchRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.EqlSearch;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "eql.search";

	public EqlSearchRequestDescriptor AllowNoIndices(bool? allowNoIndices = true) => Qs("allow_no_indices", allowNoIndices);
	public EqlSearchRequestDescriptor ExpandWildcards(ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? expandWildcards) => Qs("expand_wildcards", expandWildcards);
	public EqlSearchRequestDescriptor IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);

	public EqlSearchRequestDescriptor Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	private bool? AllowPartialSearchResultsValue { get; set; }
	private bool? AllowPartialSequenceResultsValue { get; set; }
	private bool? CaseSensitiveValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? EventCategoryFieldValue { get; set; }
	private int? FetchSizeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? FieldsValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor FieldsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor> FieldsDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor>[] FieldsDescriptorActions { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? FilterValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor FilterDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> FilterDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor>[] FilterDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? KeepAliveValue { get; set; }
	private bool? KeepOnCompletionValue { get; set; }
	private int? MaxSamplesPerKeyValue { get; set; }
	private string QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.Eql.ResultPosition? ResultPositionValue { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor> RuntimeMappingsValue { get; set; }
	private int? SizeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? TiebreakerFieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Field? TimestampFieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? WaitForCompletionTimeoutValue { get; set; }

	public EqlSearchRequestDescriptor AllowPartialSearchResults(bool? allowPartialSearchResults = true)
	{
		AllowPartialSearchResultsValue = allowPartialSearchResults;
		return Self;
	}

	public EqlSearchRequestDescriptor AllowPartialSequenceResults(bool? allowPartialSequenceResults = true)
	{
		AllowPartialSequenceResultsValue = allowPartialSequenceResults;
		return Self;
	}

	public EqlSearchRequestDescriptor CaseSensitive(bool? caseSensitive = true)
	{
		CaseSensitiveValue = caseSensitive;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor EventCategoryField(Elastic.Clients.Elasticsearch.Field? eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor EventCategoryField<TDocument, TValue>(Expression<Func<TDocument, TValue>> eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing the event classification, such as process, file, or network.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor EventCategoryField<TDocument>(Expression<Func<TDocument, object>> eventCategoryField)
	{
		EventCategoryFieldValue = eventCategoryField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Maximum number of events to search at a time for sequence queries.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor FetchSize(int? fetchSize)
	{
		FetchSizeValue = fetchSize;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Array of wildcard (*) patterns. The response returns values for field names matching these patterns in the fields property of each hit.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor Fields(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? fields)
	{
		FieldsDescriptor = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = null;
		FieldsValue = fields;
		return Self;
	}

	public EqlSearchRequestDescriptor Fields(Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor descriptor)
	{
		FieldsValue = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = null;
		FieldsDescriptor = descriptor;
		return Self;
	}

	public EqlSearchRequestDescriptor Fields(Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor> configure)
	{
		FieldsValue = null;
		FieldsDescriptor = null;
		FieldsDescriptorActions = null;
		FieldsDescriptorAction = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor Fields(params Action<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor>[] configure)
	{
		FieldsValue = null;
		FieldsDescriptor = null;
		FieldsDescriptorAction = null;
		FieldsDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Query, written in Query DSL, used to filter the events on which the EQL query runs.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor Filter(ICollection<Elastic.Clients.Elasticsearch.QueryDsl.Query>? filter)
	{
		FilterDescriptor = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = null;
		FilterValue = filter;
		return Self;
	}

	public EqlSearchRequestDescriptor Filter(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor descriptor)
	{
		FilterValue = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = null;
		FilterDescriptor = descriptor;
		return Self;
	}

	public EqlSearchRequestDescriptor Filter(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> configure)
	{
		FilterValue = null;
		FilterDescriptor = null;
		FilterDescriptorActions = null;
		FilterDescriptorAction = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor Filter(params Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor>[] configure)
	{
		FilterValue = null;
		FilterDescriptor = null;
		FilterDescriptorAction = null;
		FilterDescriptorActions = configure;
		return Self;
	}

	public EqlSearchRequestDescriptor KeepAlive(Elastic.Clients.Elasticsearch.Duration? keepAlive)
	{
		KeepAliveValue = keepAlive;
		return Self;
	}

	public EqlSearchRequestDescriptor KeepOnCompletion(bool? keepOnCompletion = true)
	{
		KeepOnCompletionValue = keepOnCompletion;
		return Self;
	}

	/// <summary>
	/// <para>
	/// By default, the response of a sample query contains up to <c>10</c> samples, with one sample per unique set of join keys. Use the <c>size</c>
	/// parameter to get a smaller or larger set of samples. To retrieve more than one sample per set of join keys, use the
	/// <c>max_samples_per_key</c> parameter. Pipes are not supported for sample queries.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor MaxSamplesPerKey(int? maxSamplesPerKey)
	{
		MaxSamplesPerKeyValue = maxSamplesPerKey;
		return Self;
	}

	/// <summary>
	/// <para>
	/// EQL query you wish to run.
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor Query(string query)
	{
		QueryValue = query;
		return Self;
	}

	public EqlSearchRequestDescriptor ResultPosition(Elastic.Clients.Elasticsearch.Eql.ResultPosition? resultPosition)
	{
		ResultPositionValue = resultPosition;
		return Self;
	}

	public EqlSearchRequestDescriptor RuntimeMappings(Func<FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>, FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>> selector)
	{
		RuntimeMappingsValue = selector?.Invoke(new FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// For basic queries, the maximum number of matching events to return. Defaults to 10
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TiebreakerField(Elastic.Clients.Elasticsearch.Field? tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TiebreakerField<TDocument, TValue>(Expression<Func<TDocument, TValue>> tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field used to sort hits with the same timestamp in ascending order
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TiebreakerField<TDocument>(Expression<Func<TDocument, object>> tiebreakerField)
	{
		TiebreakerFieldValue = tiebreakerField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TimestampField(Elastic.Clients.Elasticsearch.Field? timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TimestampField<TDocument, TValue>(Expression<Func<TDocument, TValue>> timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Field containing event timestamp. Default "@timestamp"
	/// </para>
	/// </summary>
	public EqlSearchRequestDescriptor TimestampField<TDocument>(Expression<Func<TDocument, object>> timestampField)
	{
		TimestampFieldValue = timestampField;
		return Self;
	}

	public EqlSearchRequestDescriptor WaitForCompletionTimeout(Elastic.Clients.Elasticsearch.Duration? waitForCompletionTimeout)
	{
		WaitForCompletionTimeoutValue = waitForCompletionTimeout;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AllowPartialSearchResultsValue.HasValue)
		{
			writer.WritePropertyName("allow_partial_search_results");
			writer.WriteBooleanValue(AllowPartialSearchResultsValue.Value);
		}

		if (AllowPartialSequenceResultsValue.HasValue)
		{
			writer.WritePropertyName("allow_partial_sequence_results");
			writer.WriteBooleanValue(AllowPartialSequenceResultsValue.Value);
		}

		if (CaseSensitiveValue.HasValue)
		{
			writer.WritePropertyName("case_sensitive");
			writer.WriteBooleanValue(CaseSensitiveValue.Value);
		}

		if (EventCategoryFieldValue is not null)
		{
			writer.WritePropertyName("event_category_field");
			JsonSerializer.Serialize(writer, EventCategoryFieldValue, options);
		}

		if (FetchSizeValue.HasValue)
		{
			writer.WritePropertyName("fetch_size");
			writer.WriteNumberValue(FetchSizeValue.Value);
		}

		if (FieldsDescriptor is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsDescriptor, options);
		}
		else if (FieldsDescriptorAction is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor(FieldsDescriptorAction), options);
		}
		else if (FieldsDescriptorActions is not null)
		{
			writer.WritePropertyName("fields");
			if (FieldsDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in FieldsDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormatDescriptor(action), options);
			}

			if (FieldsDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>(FieldsValue, writer, options);
		}

		if (FilterDescriptor is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, FilterDescriptor, options);
		}
		else if (FilterDescriptorAction is not null)
		{
			writer.WritePropertyName("filter");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor(FilterDescriptorAction), options);
		}
		else if (FilterDescriptorActions is not null)
		{
			writer.WritePropertyName("filter");
			if (FilterDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in FilterDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor(action), options);
			}

			if (FilterDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (FilterValue is not null)
		{
			writer.WritePropertyName("filter");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.QueryDsl.Query>(FilterValue, writer, options);
		}

		if (KeepAliveValue is not null)
		{
			writer.WritePropertyName("keep_alive");
			JsonSerializer.Serialize(writer, KeepAliveValue, options);
		}

		if (KeepOnCompletionValue.HasValue)
		{
			writer.WritePropertyName("keep_on_completion");
			writer.WriteBooleanValue(KeepOnCompletionValue.Value);
		}

		if (MaxSamplesPerKeyValue.HasValue)
		{
			writer.WritePropertyName("max_samples_per_key");
			writer.WriteNumberValue(MaxSamplesPerKeyValue.Value);
		}

		writer.WritePropertyName("query");
		writer.WriteStringValue(QueryValue);
		if (ResultPositionValue is not null)
		{
			writer.WritePropertyName("result_position");
			JsonSerializer.Serialize(writer, ResultPositionValue, options);
		}

		if (RuntimeMappingsValue is not null)
		{
			writer.WritePropertyName("runtime_mappings");
			JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (TiebreakerFieldValue is not null)
		{
			writer.WritePropertyName("tiebreaker_field");
			JsonSerializer.Serialize(writer, TiebreakerFieldValue, options);
		}

		if (TimestampFieldValue is not null)
		{
			writer.WritePropertyName("timestamp_field");
			JsonSerializer.Serialize(writer, TimestampFieldValue, options);
		}

		if (WaitForCompletionTimeoutValue is not null)
		{
			writer.WritePropertyName("wait_for_completion_timeout");
			JsonSerializer.Serialize(writer, WaitForCompletionTimeoutValue, options);
		}

		writer.WriteEndObject();
	}
}