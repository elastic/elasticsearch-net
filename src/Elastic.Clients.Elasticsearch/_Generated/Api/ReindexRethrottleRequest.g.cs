// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

public sealed partial class ReindexRethrottleRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// The throttle for this request in sub-requests per second.
	/// It can be either <c>-1</c> to turn off throttling or any decimal number like <c>1.7</c> or <c>12</c> to throttle to that level.
	/// </para>
	/// </summary>
	public float? RequestsPerSecond { get => Q<float?>("requests_per_second"); set => Q("requests_per_second", value); }
}

/// <summary>
/// <para>
/// Throttle a reindex operation.
/// </para>
/// <para>
/// Change the number of requests per second for a particular reindex operation.
/// For example:
/// </para>
/// <code>
/// POST _reindex/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1
/// </code>
/// <para>
/// Rethrottling that speeds up the query takes effect immediately.
/// Rethrottling that slows down the query will take effect after completing the current batch.
/// This behavior prevents scroll timeouts.
/// </para>
/// </summary>
public sealed partial class ReindexRethrottleRequest : PlainRequest<ReindexRethrottleRequestParameters>
{
	public ReindexRethrottleRequest(Elastic.Clients.Elasticsearch.Id taskId) : base(r => r.Required("task_id", taskId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceReindexRethrottle;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "reindex_rethrottle";

	/// <summary>
	/// <para>
	/// The throttle for this request in sub-requests per second.
	/// It can be either <c>-1</c> to turn off throttling or any decimal number like <c>1.7</c> or <c>12</c> to throttle to that level.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public float? RequestsPerSecond { get => Q<float?>("requests_per_second"); set => Q("requests_per_second", value); }
}

/// <summary>
/// <para>
/// Throttle a reindex operation.
/// </para>
/// <para>
/// Change the number of requests per second for a particular reindex operation.
/// For example:
/// </para>
/// <code>
/// POST _reindex/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1
/// </code>
/// <para>
/// Rethrottling that speeds up the query takes effect immediately.
/// Rethrottling that slows down the query will take effect after completing the current batch.
/// This behavior prevents scroll timeouts.
/// </para>
/// </summary>
public sealed partial class ReindexRethrottleRequestDescriptor : RequestDescriptor<ReindexRethrottleRequestDescriptor, ReindexRethrottleRequestParameters>
{
	internal ReindexRethrottleRequestDescriptor(Action<ReindexRethrottleRequestDescriptor> configure) => configure.Invoke(this);

	public ReindexRethrottleRequestDescriptor(Elastic.Clients.Elasticsearch.Id taskId) : base(r => r.Required("task_id", taskId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceReindexRethrottle;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "reindex_rethrottle";

	public ReindexRethrottleRequestDescriptor RequestsPerSecond(float? requestsPerSecond) => Qs("requests_per_second", requestsPerSecond);

	public ReindexRethrottleRequestDescriptor TaskId(Elastic.Clients.Elasticsearch.Id taskId)
	{
		RouteValues.Required("task_id", taskId);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}