// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class PutModelRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>Create an inference service model</para>
/// </summary>
public sealed partial class PutModelRequest : PlainRequest<PutModelRequestParameters>
{
	public PutModelRequest(Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Required("inference_id", inferenceId))
	{
	}

	public PutModelRequest(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Optional("task_type", taskType).Required("inference_id", inferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutModel;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_model";

	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Inference.ModelConfig ModelConfig { get; set; }
}

/// <summary>
/// <para>Create an inference service model</para>
/// </summary>
public sealed partial class PutModelRequestDescriptor : RequestDescriptor<PutModelRequestDescriptor, PutModelRequestParameters>
{
	internal PutModelRequestDescriptor(Action<PutModelRequestDescriptor> configure) => configure.Invoke(this);
	public PutModelRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Optional("task_type", taskType).Required("inference_id", inferenceId)) => ModelConfigValue = modelConfig;
	public PutModelRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Required("inference_id", inferenceId)) => ModelConfigValue = modelConfig;

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutModel;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_model";

	public PutModelRequestDescriptor InferenceId(Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		RouteValues.Required("inference_id", inferenceId);
		return Self;
	}

	public PutModelRequestDescriptor TaskType(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType)
	{
		RouteValues.Optional("task_type", taskType);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.ModelConfig ModelConfigValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.ModelConfigDescriptor ModelConfigDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.ModelConfigDescriptor> ModelConfigDescriptorAction { get; set; }

	public PutModelRequestDescriptor ModelConfig(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig)
	{
		ModelConfigDescriptor = null;
		ModelConfigDescriptorAction = null;
		ModelConfigValue = modelConfig;
		return Self;
	}

	public PutModelRequestDescriptor ModelConfig(Elastic.Clients.Elasticsearch.Inference.ModelConfigDescriptor descriptor)
	{
		ModelConfigValue = null;
		ModelConfigDescriptorAction = null;
		ModelConfigDescriptor = descriptor;
		return Self;
	}

	public PutModelRequestDescriptor ModelConfig(Action<Elastic.Clients.Elasticsearch.Inference.ModelConfigDescriptor> configure)
	{
		ModelConfigValue = null;
		ModelConfigDescriptor = null;
		ModelConfigDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}