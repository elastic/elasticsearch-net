// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class PutJinaaiRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Create an JinaAI inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>jinaai</c> service.
/// </para>
/// <para>
/// To review the available <c>rerank</c> models, refer to <a href="https://jina.ai/reranker">https://jina.ai/reranker</a>.
/// To review the available <c>text_embedding</c> models, refer to the <a href="https://jina.ai/embeddings/">https://jina.ai/embeddings/</a>.
/// </para>
/// </summary>
public sealed partial class PutJinaaiRequest : PlainRequest<PutJinaaiRequestParameters>
{
	public PutJinaaiRequest(Elastic.Clients.Elasticsearch.Inference.JinaAITaskType taskType, Elastic.Clients.Elasticsearch.Id jinaaiInferenceId) : base(r => r.Required("task_type", taskType).Required("jinaai_inference_id", jinaaiInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutJinaai;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_jinaai";

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("chunking_settings")]
	public Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettings { get; set; }

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>jinaai</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service")]
	public Elastic.Clients.Elasticsearch.Inference.JinaAIServiceType Service { get; set; }

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>jinaai</c> service.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service_settings")]
	public Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettings ServiceSettings { get; set; }

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("task_settings")]
	public Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettings? TaskSettings { get; set; }
}

/// <summary>
/// <para>
/// Create an JinaAI inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>jinaai</c> service.
/// </para>
/// <para>
/// To review the available <c>rerank</c> models, refer to <a href="https://jina.ai/reranker">https://jina.ai/reranker</a>.
/// To review the available <c>text_embedding</c> models, refer to the <a href="https://jina.ai/embeddings/">https://jina.ai/embeddings/</a>.
/// </para>
/// </summary>
public sealed partial class PutJinaaiRequestDescriptor : RequestDescriptor<PutJinaaiRequestDescriptor, PutJinaaiRequestParameters>
{
	internal PutJinaaiRequestDescriptor(Action<PutJinaaiRequestDescriptor> configure) => configure.Invoke(this);

	public PutJinaaiRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.JinaAITaskType taskType, Elastic.Clients.Elasticsearch.Id jinaaiInferenceId) : base(r => r.Required("task_type", taskType).Required("jinaai_inference_id", jinaaiInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutJinaai;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_jinaai";

	public PutJinaaiRequestDescriptor JinaaiInferenceId(Elastic.Clients.Elasticsearch.Id jinaaiInferenceId)
	{
		RouteValues.Required("jinaai_inference_id", jinaaiInferenceId);
		return Self;
	}

	public PutJinaaiRequestDescriptor TaskType(Elastic.Clients.Elasticsearch.Inference.JinaAITaskType taskType)
	{
		RouteValues.Required("task_type", taskType);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor ChunkingSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> ChunkingSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.JinaAIServiceType ServiceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettings ServiceSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettingsDescriptor ServiceSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettingsDescriptor> ServiceSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettings? TaskSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettingsDescriptor TaskSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettingsDescriptor> TaskSettingsDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	public PutJinaaiRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? chunkingSettings)
	{
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsValue = chunkingSettings;
		return Self;
	}

	public PutJinaaiRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor descriptor)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsDescriptor = descriptor;
		return Self;
	}

	public PutJinaaiRequestDescriptor ChunkingSettings(Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> configure)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>jinaai</c>.
	/// </para>
	/// </summary>
	public PutJinaaiRequestDescriptor Service(Elastic.Clients.Elasticsearch.Inference.JinaAIServiceType service)
	{
		ServiceValue = service;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>jinaai</c> service.
	/// </para>
	/// </summary>
	public PutJinaaiRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettings serviceSettings)
	{
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsValue = serviceSettings;
		return Self;
	}

	public PutJinaaiRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettingsDescriptor descriptor)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsDescriptor = descriptor;
		return Self;
	}

	public PutJinaaiRequestDescriptor ServiceSettings(Action<Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettingsDescriptor> configure)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	public PutJinaaiRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettings? taskSettings)
	{
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsValue = taskSettings;
		return Self;
	}

	public PutJinaaiRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettingsDescriptor descriptor)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsDescriptor = descriptor;
		return Self;
	}

	public PutJinaaiRequestDescriptor TaskSettings(Action<Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettingsDescriptor> configure)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ChunkingSettingsDescriptor is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsDescriptor, options);
		}
		else if (ChunkingSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor(ChunkingSettingsDescriptorAction), options);
		}
		else if (ChunkingSettingsValue is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsValue, options);
		}

		writer.WritePropertyName("service");
		JsonSerializer.Serialize(writer, ServiceValue, options);
		if (ServiceSettingsDescriptor is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsDescriptor, options);
		}
		else if (ServiceSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.JinaAIServiceSettingsDescriptor(ServiceSettingsDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsValue, options);
		}

		if (TaskSettingsDescriptor is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsDescriptor, options);
		}
		else if (TaskSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.JinaAITaskSettingsDescriptor(TaskSettingsDescriptorAction), options);
		}
		else if (TaskSettingsValue is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsValue, options);
		}

		writer.WriteEndObject();
	}
}