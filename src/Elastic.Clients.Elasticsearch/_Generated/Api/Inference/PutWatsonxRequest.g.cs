// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class PutWatsonxRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Create a Watsonx inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>watsonxai</c> service.
/// You need an IBM Cloud Databases for Elasticsearch deployment to use the <c>watsonxai</c> inference service.
/// You can provision one through the IBM catalog, the Cloud Databases CLI plug-in, the Cloud Databases API, or Terraform.
/// </para>
/// <para>
/// When you create an inference endpoint, the associated machine learning model is automatically deployed if it is not already running.
/// After creating the endpoint, wait for the model deployment to complete before using it.
/// To verify the deployment status, use the get trained model statistics API.
/// Look for <c>"state": "fully_allocated"</c> in the response and ensure that the <c>"allocation_count"</c> matches the <c>"target_allocation_count"</c>.
/// Avoid creating multiple endpoints for the same model unless required, as each endpoint consumes significant resources.
/// </para>
/// </summary>
public sealed partial class PutWatsonxRequest : PlainRequest<PutWatsonxRequestParameters>
{
	public PutWatsonxRequest(Elastic.Clients.Elasticsearch.Inference.WatsonxTaskType taskType, Elastic.Clients.Elasticsearch.Id watsonxInferenceId) : base(r => r.Required("task_type", taskType).Required("watsonx_inference_id", watsonxInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutWatsonx;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_watsonx";

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>watsonxai</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service")]
	public Elastic.Clients.Elasticsearch.Inference.WatsonxServiceType Service { get; set; }

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>watsonxai</c> service.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service_settings")]
	public Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettings ServiceSettings { get; set; }
}

/// <summary>
/// <para>
/// Create a Watsonx inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>watsonxai</c> service.
/// You need an IBM Cloud Databases for Elasticsearch deployment to use the <c>watsonxai</c> inference service.
/// You can provision one through the IBM catalog, the Cloud Databases CLI plug-in, the Cloud Databases API, or Terraform.
/// </para>
/// <para>
/// When you create an inference endpoint, the associated machine learning model is automatically deployed if it is not already running.
/// After creating the endpoint, wait for the model deployment to complete before using it.
/// To verify the deployment status, use the get trained model statistics API.
/// Look for <c>"state": "fully_allocated"</c> in the response and ensure that the <c>"allocation_count"</c> matches the <c>"target_allocation_count"</c>.
/// Avoid creating multiple endpoints for the same model unless required, as each endpoint consumes significant resources.
/// </para>
/// </summary>
public sealed partial class PutWatsonxRequestDescriptor : RequestDescriptor<PutWatsonxRequestDescriptor, PutWatsonxRequestParameters>
{
	internal PutWatsonxRequestDescriptor(Action<PutWatsonxRequestDescriptor> configure) => configure.Invoke(this);

	public PutWatsonxRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.WatsonxTaskType taskType, Elastic.Clients.Elasticsearch.Id watsonxInferenceId) : base(r => r.Required("task_type", taskType).Required("watsonx_inference_id", watsonxInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutWatsonx;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_watsonx";

	public PutWatsonxRequestDescriptor TaskType(Elastic.Clients.Elasticsearch.Inference.WatsonxTaskType taskType)
	{
		RouteValues.Required("task_type", taskType);
		return Self;
	}

	public PutWatsonxRequestDescriptor WatsonxInferenceId(Elastic.Clients.Elasticsearch.Id watsonxInferenceId)
	{
		RouteValues.Required("watsonx_inference_id", watsonxInferenceId);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.WatsonxServiceType ServiceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettings ServiceSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettingsDescriptor ServiceSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettingsDescriptor> ServiceSettingsDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>watsonxai</c>.
	/// </para>
	/// </summary>
	public PutWatsonxRequestDescriptor Service(Elastic.Clients.Elasticsearch.Inference.WatsonxServiceType service)
	{
		ServiceValue = service;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>watsonxai</c> service.
	/// </para>
	/// </summary>
	public PutWatsonxRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettings serviceSettings)
	{
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsValue = serviceSettings;
		return Self;
	}

	public PutWatsonxRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettingsDescriptor descriptor)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsDescriptor = descriptor;
		return Self;
	}

	public PutWatsonxRequestDescriptor ServiceSettings(Action<Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettingsDescriptor> configure)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("service");
		JsonSerializer.Serialize(writer, ServiceValue, options);
		if (ServiceSettingsDescriptor is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsDescriptor, options);
		}
		else if (ServiceSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.WatsonxServiceSettingsDescriptor(ServiceSettingsDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsValue, options);
		}

		writer.WriteEndObject();
	}
}