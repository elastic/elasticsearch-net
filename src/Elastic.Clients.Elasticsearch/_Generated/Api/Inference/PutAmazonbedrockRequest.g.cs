// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class PutAmazonbedrockRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Create an Amazon Bedrock inference endpoint.
/// </para>
/// <para>
/// Creates an inference endpoint to perform an inference task with the <c>amazonbedrock</c> service.
/// </para>
/// <para>
/// info
/// You need to provide the access and secret keys only once, during the inference model creation. The get inference API does not retrieve your access or secret keys. After creating the inference model, you cannot change the associated key pairs. If you want to use a different access and secret key pair, delete the inference model and recreate it with the same name and the updated keys.
/// </para>
/// </summary>
public sealed partial class PutAmazonbedrockRequest : PlainRequest<PutAmazonbedrockRequestParameters>
{
	public PutAmazonbedrockRequest(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskType taskType, Elastic.Clients.Elasticsearch.Id amazonbedrockInferenceId) : base(r => r.Required("task_type", taskType).Required("amazonbedrock_inference_id", amazonbedrockInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutAmazonbedrock;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_amazonbedrock";

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("chunking_settings")]
	public Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettings { get; set; }

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>amazonbedrock</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service")]
	public Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceType Service { get; set; }

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>amazonbedrock</c> service.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service_settings")]
	public Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettings ServiceSettings { get; set; }

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("task_settings")]
	public Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettings? TaskSettings { get; set; }
}

/// <summary>
/// <para>
/// Create an Amazon Bedrock inference endpoint.
/// </para>
/// <para>
/// Creates an inference endpoint to perform an inference task with the <c>amazonbedrock</c> service.
/// </para>
/// <para>
/// info
/// You need to provide the access and secret keys only once, during the inference model creation. The get inference API does not retrieve your access or secret keys. After creating the inference model, you cannot change the associated key pairs. If you want to use a different access and secret key pair, delete the inference model and recreate it with the same name and the updated keys.
/// </para>
/// </summary>
public sealed partial class PutAmazonbedrockRequestDescriptor : RequestDescriptor<PutAmazonbedrockRequestDescriptor, PutAmazonbedrockRequestParameters>
{
	internal PutAmazonbedrockRequestDescriptor(Action<PutAmazonbedrockRequestDescriptor> configure) => configure.Invoke(this);

	public PutAmazonbedrockRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskType taskType, Elastic.Clients.Elasticsearch.Id amazonbedrockInferenceId) : base(r => r.Required("task_type", taskType).Required("amazonbedrock_inference_id", amazonbedrockInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutAmazonbedrock;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_amazonbedrock";

	public PutAmazonbedrockRequestDescriptor AmazonbedrockInferenceId(Elastic.Clients.Elasticsearch.Id amazonbedrockInferenceId)
	{
		RouteValues.Required("amazonbedrock_inference_id", amazonbedrockInferenceId);
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor TaskType(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskType taskType)
	{
		RouteValues.Required("task_type", taskType);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor ChunkingSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> ChunkingSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceType ServiceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettings ServiceSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettingsDescriptor ServiceSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettingsDescriptor> ServiceSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettings? TaskSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettingsDescriptor TaskSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettingsDescriptor> TaskSettingsDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	public PutAmazonbedrockRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? chunkingSettings)
	{
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsValue = chunkingSettings;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor descriptor)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsDescriptor = descriptor;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor ChunkingSettings(Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> configure)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>amazonbedrock</c>.
	/// </para>
	/// </summary>
	public PutAmazonbedrockRequestDescriptor Service(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceType service)
	{
		ServiceValue = service;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>amazonbedrock</c> service.
	/// </para>
	/// </summary>
	public PutAmazonbedrockRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettings serviceSettings)
	{
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsValue = serviceSettings;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettingsDescriptor descriptor)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsDescriptor = descriptor;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor ServiceSettings(Action<Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettingsDescriptor> configure)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	public PutAmazonbedrockRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettings? taskSettings)
	{
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsValue = taskSettings;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettingsDescriptor descriptor)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsDescriptor = descriptor;
		return Self;
	}

	public PutAmazonbedrockRequestDescriptor TaskSettings(Action<Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettingsDescriptor> configure)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ChunkingSettingsDescriptor is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsDescriptor, options);
		}
		else if (ChunkingSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor(ChunkingSettingsDescriptorAction), options);
		}
		else if (ChunkingSettingsValue is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsValue, options);
		}

		writer.WritePropertyName("service");
		JsonSerializer.Serialize(writer, ServiceValue, options);
		if (ServiceSettingsDescriptor is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsDescriptor, options);
		}
		else if (ServiceSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.AmazonBedrockServiceSettingsDescriptor(ServiceSettingsDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsValue, options);
		}

		if (TaskSettingsDescriptor is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsDescriptor, options);
		}
		else if (TaskSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.AmazonBedrockTaskSettingsDescriptor(TaskSettingsDescriptorAction), options);
		}
		else if (TaskSettingsValue is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsValue, options);
		}

		writer.WriteEndObject();
	}
}