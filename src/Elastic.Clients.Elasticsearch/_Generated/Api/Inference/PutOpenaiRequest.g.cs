// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class PutOpenaiRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Create an OpenAI inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>openai</c> service or <c>openai</c> compatible APIs.
/// </para>
/// <para>
/// When you create an inference endpoint, the associated machine learning model is automatically deployed if it is not already running.
/// After creating the endpoint, wait for the model deployment to complete before using it.
/// To verify the deployment status, use the get trained model statistics API.
/// Look for <c>"state": "fully_allocated"</c> in the response and ensure that the <c>"allocation_count"</c> matches the <c>"target_allocation_count"</c>.
/// Avoid creating multiple endpoints for the same model unless required, as each endpoint consumes significant resources.
/// </para>
/// </summary>
public sealed partial class PutOpenaiRequest : PlainRequest<PutOpenaiRequestParameters>
{
	public PutOpenaiRequest(Elastic.Clients.Elasticsearch.Inference.OpenAITaskType taskType, Elastic.Clients.Elasticsearch.Id openaiInferenceId) : base(r => r.Required("task_type", taskType).Required("openai_inference_id", openaiInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutOpenai;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_openai";

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("chunking_settings")]
	public Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettings { get; set; }

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>openai</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service")]
	public Elastic.Clients.Elasticsearch.Inference.OpenAIServiceType Service { get; set; }

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>openai</c> service.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("service_settings")]
	public Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettings ServiceSettings { get; set; }

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("task_settings")]
	public Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettings? TaskSettings { get; set; }
}

/// <summary>
/// <para>
/// Create an OpenAI inference endpoint.
/// </para>
/// <para>
/// Create an inference endpoint to perform an inference task with the <c>openai</c> service or <c>openai</c> compatible APIs.
/// </para>
/// <para>
/// When you create an inference endpoint, the associated machine learning model is automatically deployed if it is not already running.
/// After creating the endpoint, wait for the model deployment to complete before using it.
/// To verify the deployment status, use the get trained model statistics API.
/// Look for <c>"state": "fully_allocated"</c> in the response and ensure that the <c>"allocation_count"</c> matches the <c>"target_allocation_count"</c>.
/// Avoid creating multiple endpoints for the same model unless required, as each endpoint consumes significant resources.
/// </para>
/// </summary>
public sealed partial class PutOpenaiRequestDescriptor : RequestDescriptor<PutOpenaiRequestDescriptor, PutOpenaiRequestParameters>
{
	internal PutOpenaiRequestDescriptor(Action<PutOpenaiRequestDescriptor> configure) => configure.Invoke(this);

	public PutOpenaiRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.OpenAITaskType taskType, Elastic.Clients.Elasticsearch.Id openaiInferenceId) : base(r => r.Required("task_type", taskType).Required("openai_inference_id", openaiInferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferencePutOpenai;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.put_openai";

	public PutOpenaiRequestDescriptor OpenaiInferenceId(Elastic.Clients.Elasticsearch.Id openaiInferenceId)
	{
		RouteValues.Required("openai_inference_id", openaiInferenceId);
		return Self;
	}

	public PutOpenaiRequestDescriptor TaskType(Elastic.Clients.Elasticsearch.Inference.OpenAITaskType taskType)
	{
		RouteValues.Required("task_type", taskType);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? ChunkingSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor ChunkingSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> ChunkingSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.OpenAIServiceType ServiceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettings ServiceSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettingsDescriptor ServiceSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettingsDescriptor> ServiceSettingsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettings? TaskSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettingsDescriptor TaskSettingsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettingsDescriptor> TaskSettingsDescriptorAction { get; set; }

	/// <summary>
	/// <para>
	/// The chunking configuration object.
	/// </para>
	/// </summary>
	public PutOpenaiRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettings? chunkingSettings)
	{
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsValue = chunkingSettings;
		return Self;
	}

	public PutOpenaiRequestDescriptor ChunkingSettings(Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor descriptor)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptorAction = null;
		ChunkingSettingsDescriptor = descriptor;
		return Self;
	}

	public PutOpenaiRequestDescriptor ChunkingSettings(Action<Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor> configure)
	{
		ChunkingSettingsValue = null;
		ChunkingSettingsDescriptor = null;
		ChunkingSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The type of service supported for the specified task type. In this case, <c>openai</c>.
	/// </para>
	/// </summary>
	public PutOpenaiRequestDescriptor Service(Elastic.Clients.Elasticsearch.Inference.OpenAIServiceType service)
	{
		ServiceValue = service;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings used to install the inference model. These settings are specific to the <c>openai</c> service.
	/// </para>
	/// </summary>
	public PutOpenaiRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettings serviceSettings)
	{
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsValue = serviceSettings;
		return Self;
	}

	public PutOpenaiRequestDescriptor ServiceSettings(Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettingsDescriptor descriptor)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptorAction = null;
		ServiceSettingsDescriptor = descriptor;
		return Self;
	}

	public PutOpenaiRequestDescriptor ServiceSettings(Action<Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettingsDescriptor> configure)
	{
		ServiceSettingsValue = null;
		ServiceSettingsDescriptor = null;
		ServiceSettingsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Settings to configure the inference task.
	/// These settings are specific to the task type you specified.
	/// </para>
	/// </summary>
	public PutOpenaiRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettings? taskSettings)
	{
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsValue = taskSettings;
		return Self;
	}

	public PutOpenaiRequestDescriptor TaskSettings(Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettingsDescriptor descriptor)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptorAction = null;
		TaskSettingsDescriptor = descriptor;
		return Self;
	}

	public PutOpenaiRequestDescriptor TaskSettings(Action<Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettingsDescriptor> configure)
	{
		TaskSettingsValue = null;
		TaskSettingsDescriptor = null;
		TaskSettingsDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ChunkingSettingsDescriptor is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsDescriptor, options);
		}
		else if (ChunkingSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.InferenceChunkingSettingsDescriptor(ChunkingSettingsDescriptorAction), options);
		}
		else if (ChunkingSettingsValue is not null)
		{
			writer.WritePropertyName("chunking_settings");
			JsonSerializer.Serialize(writer, ChunkingSettingsValue, options);
		}

		writer.WritePropertyName("service");
		JsonSerializer.Serialize(writer, ServiceValue, options);
		if (ServiceSettingsDescriptor is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsDescriptor, options);
		}
		else if (ServiceSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.OpenAIServiceSettingsDescriptor(ServiceSettingsDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("service_settings");
			JsonSerializer.Serialize(writer, ServiceSettingsValue, options);
		}

		if (TaskSettingsDescriptor is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsDescriptor, options);
		}
		else if (TaskSettingsDescriptorAction is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Inference.OpenAITaskSettingsDescriptor(TaskSettingsDescriptorAction), options);
		}
		else if (TaskSettingsValue is not null)
		{
			writer.WritePropertyName("task_settings");
			JsonSerializer.Serialize(writer, TaskSettingsValue, options);
		}

		writer.WriteEndObject();
	}
}