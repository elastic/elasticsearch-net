// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Inference;

public sealed partial class ChatCompletionUnifiedRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// Specifies the amount of time to wait for the inference request to complete.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
}

/// <summary>
/// <para>
/// Perform chat completion inference
/// </para>
/// <para>
/// The chat completion inference API enables real-time responses for chat completion tasks by delivering answers incrementally, reducing response times during computation.
/// It only works with the <c>chat_completion</c> task type for <c>openai</c> and <c>elastic</c> inference services.
/// </para>
/// <para>
/// IMPORTANT: The inference APIs enable you to use certain services, such as built-in machine learning models (ELSER, E5), models uploaded through Eland, Cohere, OpenAI, Azure, Google AI Studio, Google Vertex AI, Anthropic, Watsonx.ai, or Hugging Face.
/// For built-in models and models uploaded through Eland, the inference APIs offer an alternative way to use and manage trained models. However, if you do not plan to use the inference APIs to use these models or if you want to use non-NLP models, use the machine learning trained model APIs.
/// </para>
/// <para>
/// NOTE: The <c>chat_completion</c> task type is only available within the _stream API and only supports streaming.
/// The Chat completion inference API and the Stream inference API differ in their response structure and capabilities.
/// The Chat completion inference API provides more comprehensive customization options through more fields and function calling support.
/// If you use the <c>openai</c> service or the <c>elastic</c> service, use the Chat completion inference API.
/// </para>
/// </summary>
public sealed partial class ChatCompletionUnifiedRequest : PlainRequest<ChatCompletionUnifiedRequestParameters>, ISelfSerializable
{
	public ChatCompletionUnifiedRequest(Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Required("inference_id", inferenceId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferenceChatCompletionUnified;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.chat_completion_unified";

	/// <summary>
	/// <para>
	/// Specifies the amount of time to wait for the inference request to complete.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion ChatCompletionRequest { get; set; }

	void ISelfSerializable.Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ChatCompletionRequest, options);
	}
}

/// <summary>
/// <para>
/// Perform chat completion inference
/// </para>
/// <para>
/// The chat completion inference API enables real-time responses for chat completion tasks by delivering answers incrementally, reducing response times during computation.
/// It only works with the <c>chat_completion</c> task type for <c>openai</c> and <c>elastic</c> inference services.
/// </para>
/// <para>
/// IMPORTANT: The inference APIs enable you to use certain services, such as built-in machine learning models (ELSER, E5), models uploaded through Eland, Cohere, OpenAI, Azure, Google AI Studio, Google Vertex AI, Anthropic, Watsonx.ai, or Hugging Face.
/// For built-in models and models uploaded through Eland, the inference APIs offer an alternative way to use and manage trained models. However, if you do not plan to use the inference APIs to use these models or if you want to use non-NLP models, use the machine learning trained model APIs.
/// </para>
/// <para>
/// NOTE: The <c>chat_completion</c> task type is only available within the _stream API and only supports streaming.
/// The Chat completion inference API and the Stream inference API differ in their response structure and capabilities.
/// The Chat completion inference API provides more comprehensive customization options through more fields and function calling support.
/// If you use the <c>openai</c> service or the <c>elastic</c> service, use the Chat completion inference API.
/// </para>
/// </summary>
public sealed partial class ChatCompletionUnifiedRequestDescriptor : RequestDescriptor<ChatCompletionUnifiedRequestDescriptor, ChatCompletionUnifiedRequestParameters>
{
	internal ChatCompletionUnifiedRequestDescriptor(Action<ChatCompletionUnifiedRequestDescriptor> configure) => configure.Invoke(this);
	public ChatCompletionUnifiedRequestDescriptor(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion chatCompletionRequest, Elastic.Clients.Elasticsearch.Id inferenceId) : base(r => r.Required("inference_id", inferenceId)) => ChatCompletionRequestValue = chatCompletionRequest;

	internal override ApiUrls ApiUrls => ApiUrlLookup.InferenceChatCompletionUnified;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "inference.chat_completion_unified";

	public ChatCompletionUnifiedRequestDescriptor Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);

	public ChatCompletionUnifiedRequestDescriptor InferenceId(Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		RouteValues.Required("inference_id", inferenceId);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion ChatCompletionRequestValue { get; set; }
	private Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor ChatCompletionRequestDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor> ChatCompletionRequestDescriptorAction { get; set; }

	public ChatCompletionUnifiedRequestDescriptor ChatCompletionRequest(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletion chatCompletionRequest)
	{
		ChatCompletionRequestDescriptor = null;
		ChatCompletionRequestDescriptorAction = null;
		ChatCompletionRequestValue = chatCompletionRequest;
		return Self;
	}

	public ChatCompletionUnifiedRequestDescriptor ChatCompletionRequest(Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor descriptor)
	{
		ChatCompletionRequestValue = null;
		ChatCompletionRequestDescriptorAction = null;
		ChatCompletionRequestDescriptor = descriptor;
		return Self;
	}

	public ChatCompletionUnifiedRequestDescriptor ChatCompletionRequest(Action<Elastic.Clients.Elasticsearch.Inference.RequestChatCompletionDescriptor> configure)
	{
		ChatCompletionRequestValue = null;
		ChatCompletionRequestDescriptor = null;
		ChatCompletionRequestDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ChatCompletionRequestValue, options);
	}
}