// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexManagementCreateRequestParameters : RequestParameters<IndexManagementCreateRequestParameters>
	{
		[JsonIgnore]
		public bool? IncludeTypeName { get => Q<bool?>("include_type_name"); set => Q("include_type_name", value); }

		[JsonIgnore]
		public Time? MasterTimeout { get => Q<Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public WaitForActiveShards? WaitForActiveShards { get => Q<WaitForActiveShards?>("wait_for_active_shards"); set => Q("wait_for_active_shards", value); }
	}

	[ConvertAs(typeof(IndexManagementCreateRequest))]
	public partial interface IIndexManagementCreateRequest : IRequest<IndexManagementCreateRequestParameters>
	{
		Dictionary<IndexName, IndexManagement.IAlias>? Aliases { get; set; }

		Union<Dictionary<string, Mapping.ITypeMapping>?, Mapping.ITypeMapping?>? Mappings { get; set; }

		Dictionary<string, object>? Settings { get; set; }
	}

	public partial class IndexManagementCreateRequest : PlainRequestBase<IndexManagementCreateRequestParameters>, IIndexManagementCreateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementCreate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("aliases")]
		public Dictionary<IndexName, IndexManagement.IAlias>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("mappings")]
		public Union<Dictionary<string, Mapping.ITypeMapping>?, Mapping.ITypeMapping?>? Mappings { get; set; }

		[JsonInclude]
		[JsonPropertyName("settings")]
		public Dictionary<string, object>? Settings { get; set; }
	}

	public partial class IndexManagementCreateRequestDescriptor : RequestDescriptorBase<IndexManagementCreateRequestDescriptor, IndexManagementCreateRequestParameters, IIndexManagementCreateRequest>, IIndexManagementCreateRequest
	{
		///<summary>/{index}</summary>
        public IndexManagementCreateRequestDescriptor(IndexName index) : base(r => r.Required("index", index))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementCreate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		Dictionary<IndexName, IndexManagement.IAlias>? IIndexManagementCreateRequest.Aliases { get; set; }

		Union<Dictionary<string, Mapping.ITypeMapping>?, Mapping.ITypeMapping?>? IIndexManagementCreateRequest.Mappings { get; set; }

		Dictionary<string, object>? IIndexManagementCreateRequest.Settings { get; set; }

		public IndexManagementCreateRequestDescriptor Aliases(Dictionary<IndexName, IndexManagement.IAlias>? aliases) => Assign(aliases, (a, v) => a.Aliases = v);
		public IndexManagementCreateRequestDescriptor Mappings(Union<Dictionary<string, Mapping.ITypeMapping>?, Mapping.ITypeMapping?>? mappings) => Assign(mappings, (a, v) => a.Mappings = v);
		public IndexManagementCreateRequestDescriptor Settings(Dictionary<string, object>? settings) => Assign(settings, (a, v) => a.Settings = v);
	}
}