// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexPutIndexTemplateRequestParameters : RequestParameters<IndexPutIndexTemplateRequestParameters>
	{
	}

	[InterfaceConverterAttribute(typeof(IndexPutIndexTemplateRequestDescriptorConverter<IndexPutIndexTemplateRequest>))]
	public partial interface IIndexPutIndexTemplateRequest : IRequest<IndexPutIndexTemplateRequestParameters>
	{
		Elastic.Clients.Elasticsearch.Indices? IndexPatterns { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		IndexManagement.PutIndexTemplate.IIndexTemplateMapping? Template { get; set; }

		IndexManagement.IDataStream? DataStream { get; set; }

		int? Priority { get; set; }

		object? Version { get; set; }

		Dictionary<string, object>? Meta { get; set; }
	}

	public partial class IndexPutIndexTemplateRequest : PlainRequestBase<IndexPutIndexTemplateRequestParameters>, IIndexPutIndexTemplateRequest
	{
		public IndexPutIndexTemplateRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("index_patterns")]
		public Elastic.Clients.Elasticsearch.Indices? IndexPatterns { get; set; }

		[JsonInclude]
		[JsonPropertyName("composed_of")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("template")]
		public IndexManagement.PutIndexTemplate.IIndexTemplateMapping? Template { get; set; }

		[JsonInclude]
		[JsonPropertyName("data_stream")]
		public IndexManagement.IDataStream? DataStream { get; set; }

		[JsonInclude]
		[JsonPropertyName("priority")]
		public int? Priority { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public object? Version { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }
	}

	public partial class IndexPutIndexTemplateRequestDescriptor : RequestDescriptorBase<IndexPutIndexTemplateRequestDescriptor, IndexPutIndexTemplateRequestParameters, IIndexPutIndexTemplateRequest>, IIndexPutIndexTemplateRequest
	{
		///<summary>/_index_template/{name}</summary>
        public IndexPutIndexTemplateRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		Elastic.Clients.Elasticsearch.Indices? IIndexPutIndexTemplateRequest.IndexPatterns { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Name>? IIndexPutIndexTemplateRequest.ComposedOf { get; set; }

		IndexManagement.PutIndexTemplate.IIndexTemplateMapping? IIndexPutIndexTemplateRequest.Template { get; set; }

		IndexManagement.IDataStream? IIndexPutIndexTemplateRequest.DataStream { get; set; }

		int? IIndexPutIndexTemplateRequest.Priority { get; set; }

		object? IIndexPutIndexTemplateRequest.Version { get; set; }

		Dictionary<string, object>? IIndexPutIndexTemplateRequest.Meta { get; set; }

		public IndexPutIndexTemplateRequestDescriptor IndexPatterns(Elastic.Clients.Elasticsearch.Indices? indexPatterns) => Assign(indexPatterns, (a, v) => a.IndexPatterns = v);
		public IndexPutIndexTemplateRequestDescriptor ComposedOf(IEnumerable<Elastic.Clients.Elasticsearch.Name>? composedOf) => Assign(composedOf, (a, v) => a.ComposedOf = v);
		public IndexPutIndexTemplateRequestDescriptor Template(IndexManagement.PutIndexTemplate.IIndexTemplateMapping? template) => Assign(template, (a, v) => a.Template = v);
		public IndexPutIndexTemplateRequestDescriptor DataStream(IndexManagement.IDataStream? dataStream) => Assign(dataStream, (a, v) => a.DataStream = v);
		public IndexPutIndexTemplateRequestDescriptor Priority(int? priority) => Assign(priority, (a, v) => a.Priority = v);
		public IndexPutIndexTemplateRequestDescriptor Version(object? version) => Assign(version, (a, v) => a.Version = v);
		public IndexPutIndexTemplateRequestDescriptor Meta(Dictionary<string, object>? meta) => Assign(meta, (a, v) => a.Meta = v);
	}

	internal sealed class IndexPutIndexTemplateRequestDescriptorConverter<TReadAs> : JsonConverter<IIndexPutIndexTemplateRequest> where TReadAs : class, IIndexPutIndexTemplateRequest
	{
		public override IIndexPutIndexTemplateRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IIndexPutIndexTemplateRequest value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.IndexPatterns is not null)
			{
				writer.WritePropertyName("index_patterns");
				JsonSerializer.Serialize(writer, value.IndexPatterns, options);
			}

			if (value.ComposedOf is not null)
			{
				writer.WritePropertyName("composed_of");
				JsonSerializer.Serialize(writer, value.ComposedOf, options);
			}

			if (value.Template is not null)
			{
				writer.WritePropertyName("template");
				JsonSerializer.Serialize(writer, value.Template, options);
			}

			if (value.DataStream is not null)
			{
				writer.WritePropertyName("data_stream");
				JsonSerializer.Serialize(writer, value.DataStream, options);
			}

			if (value.Priority.HasValue)
			{
				writer.WritePropertyName("priority");
				writer.WriteNumberValue(value.Priority.Value);
			}

			if (value.Version is not null)
			{
				writer.WritePropertyName("version");
				JsonSerializer.Serialize(writer, value.Version, options);
			}

			if (value.Meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value.Meta, options);
			}

			writer.WriteEndObject();
		}
	}
}