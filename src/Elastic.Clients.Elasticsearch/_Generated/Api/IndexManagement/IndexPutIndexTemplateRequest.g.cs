// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexPutIndexTemplateRequestParameters : RequestParameters<IndexPutIndexTemplateRequestParameters>
	{
	}

	public partial class IndexPutIndexTemplateRequest : PlainRequestBase<IndexPutIndexTemplateRequestParameters>
	{
		public IndexPutIndexTemplateRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("index_patterns")]
		public Elastic.Clients.Elasticsearch.Indices? IndexPatterns { get; set; }

		[JsonInclude]
		[JsonPropertyName("composed_of")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("template")]
		public Elastic.Clients.Elasticsearch.IndexManagement.PutIndexTemplate.IndexTemplateMapping? Template { get; set; }

		[JsonInclude]
		[JsonPropertyName("data_stream")]
		public Elastic.Clients.Elasticsearch.IndexManagement.DataStream? DataStream { get; set; }

		[JsonInclude]
		[JsonPropertyName("priority")]
		public int? Priority { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public long? Version { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }
	}

	[JsonConverter(typeof(IndexPutIndexTemplateRequestDescriptorConverter))]
	public sealed partial class IndexPutIndexTemplateRequestDescriptor : RequestDescriptorBase<IndexPutIndexTemplateRequestDescriptor, IndexPutIndexTemplateRequestParameters>
	{
		public IndexPutIndexTemplateRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal Elastic.Clients.Elasticsearch.Indices? _indexPatterns;
		internal IEnumerable<Elastic.Clients.Elasticsearch.Name>? _composedOf;
		internal Elastic.Clients.Elasticsearch.IndexManagement.PutIndexTemplate.IndexTemplateMapping? _template;
		internal Elastic.Clients.Elasticsearch.IndexManagement.DataStream? _dataStream;
		internal int? _priority;
		internal long? _version;
		internal Dictionary<string, object>? _meta;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementPutIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		public IndexPutIndexTemplateRequestDescriptor IndexPatterns(Elastic.Clients.Elasticsearch.Indices? indexPatterns) => Assign(indexPatterns, (a, v) => a._indexPatterns = v);
		public IndexPutIndexTemplateRequestDescriptor ComposedOf(IEnumerable<Elastic.Clients.Elasticsearch.Name>? composedOf) => Assign(composedOf, (a, v) => a._composedOf = v);
		public IndexPutIndexTemplateRequestDescriptor Template(Elastic.Clients.Elasticsearch.IndexManagement.PutIndexTemplate.IndexTemplateMapping? template) => Assign(template, (a, v) => a._template = v);
		public IndexPutIndexTemplateRequestDescriptor DataStream(Elastic.Clients.Elasticsearch.IndexManagement.DataStream? dataStream) => Assign(dataStream, (a, v) => a._dataStream = v);
		public IndexPutIndexTemplateRequestDescriptor Priority(int? priority) => Assign(priority, (a, v) => a._priority = v);
		public IndexPutIndexTemplateRequestDescriptor Version(long? version) => Assign(version, (a, v) => a._version = v);
		public IndexPutIndexTemplateRequestDescriptor Meta(Dictionary<string, object>? meta) => Assign(meta, (a, v) => a._meta = v);
	}

	internal sealed class IndexPutIndexTemplateRequestDescriptorConverter : JsonConverter<IndexPutIndexTemplateRequestDescriptor>
	{
		public override IndexPutIndexTemplateRequestDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, IndexPutIndexTemplateRequestDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._indexPatterns is not null)
			{
				writer.WritePropertyName("index_patterns");
				JsonSerializer.Serialize(writer, value._indexPatterns, options);
			}

			if (value._composedOf is not null)
			{
				writer.WritePropertyName("composed_of");
				JsonSerializer.Serialize(writer, value._composedOf, options);
			}

			if (value._template is not null)
			{
				writer.WritePropertyName("template");
				JsonSerializer.Serialize(writer, value._template, options);
			}

			if (value._dataStream is not null)
			{
				writer.WritePropertyName("data_stream");
				JsonSerializer.Serialize(writer, value._dataStream, options);
			}

			if (value._priority.HasValue)
			{
				writer.WritePropertyName("priority");
				writer.WriteNumberValue(value._priority.Value);
			}

			if (value._version is not null)
			{
				writer.WritePropertyName("version");
				JsonSerializer.Serialize(writer, value._version, options);
			}

			if (value._meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value._meta, options);
			}

			writer.WriteEndObject();
		}
	}
}