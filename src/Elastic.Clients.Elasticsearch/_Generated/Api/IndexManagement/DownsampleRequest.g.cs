// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class DownsampleRequestParameters : RequestParameters
{
}

internal sealed partial class DownsampleRequestConverter : System.Text.Json.Serialization.JsonConverter<DownsampleRequest>
{
	public override DownsampleRequest Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new DownsampleRequest { Config = reader.ReadValue<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig>(options, null) };
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, DownsampleRequest value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.Config, null);
	}
}

/// <summary>
/// <para>
/// Downsample an index.
/// Aggregate a time series (TSDS) index and store pre-computed statistical summaries (<c>min</c>, <c>max</c>, <c>sum</c>, <c>value_count</c> and <c>avg</c>) for each metric field grouped by a configured time interval.
/// For example, a TSDS index that contains metrics sampled every 10 seconds can be downsampled to an hourly index.
/// All documents within an hour interval are summarized and stored as a single document in the downsample index.
/// </para>
/// <para>
/// NOTE: Only indices in a time series data stream are supported.
/// Neither field nor document level security can be defined on the source index.
/// The source index must be read only (<c>index.blocks.write: true</c>).
/// </para>
/// </summary>
[JsonConverter(typeof(DownsampleRequestConverter))]
public sealed partial class DownsampleRequest : PlainRequest<DownsampleRequestParameters>
{
	public DownsampleRequest(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName targetIndex) : base(r => r.Required("index", index).Required("target_index", targetIndex))
	{
	}

	[JsonConstructor]
	internal DownsampleRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementDownsample;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "indices.downsample";

	/// <summary>
	/// <para>
	/// Name of the time series index to downsample.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexName Index { get => P<Elastic.Clients.Elasticsearch.IndexName>("index"); set => PR("index", value); }

	/// <summary>
	/// <para>
	/// Name of the index to create.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.IndexName TargetIndex { get => P<Elastic.Clients.Elasticsearch.IndexName>("target_index"); set => PR("target_index", value); }
	public Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig Config { get; set; }
}

/// <summary>
/// <para>
/// Downsample an index.
/// Aggregate a time series (TSDS) index and store pre-computed statistical summaries (<c>min</c>, <c>max</c>, <c>sum</c>, <c>value_count</c> and <c>avg</c>) for each metric field grouped by a configured time interval.
/// For example, a TSDS index that contains metrics sampled every 10 seconds can be downsampled to an hourly index.
/// All documents within an hour interval are summarized and stored as a single document in the downsample index.
/// </para>
/// <para>
/// NOTE: Only indices in a time series data stream are supported.
/// Neither field nor document level security can be defined on the source index.
/// The source index must be read only (<c>index.blocks.write: true</c>).
/// </para>
/// </summary>
public sealed partial class DownsampleRequestDescriptor<TDocument> : RequestDescriptor<DownsampleRequestDescriptor<TDocument>, DownsampleRequestParameters>
{
	internal DownsampleRequestDescriptor(Action<DownsampleRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
	public DownsampleRequestDescriptor(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig config, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName targetIndex) : base(r => r.Required("index", index).Required("target_index", targetIndex)) => ConfigValue = config;

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementDownsample;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "indices.downsample";

	public DownsampleRequestDescriptor<TDocument> Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	public DownsampleRequestDescriptor<TDocument> TargetIndex(Elastic.Clients.Elasticsearch.IndexName targetIndex)
	{
		RouteValues.Required("target_index", targetIndex);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig ConfigValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor ConfigDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor> ConfigDescriptorAction { get; set; }

	public DownsampleRequestDescriptor<TDocument> Config(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig config)
	{
		ConfigDescriptor = null;
		ConfigDescriptorAction = null;
		ConfigValue = config;
		return Self;
	}

	public DownsampleRequestDescriptor<TDocument> Config(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor descriptor)
	{
		ConfigValue = null;
		ConfigDescriptorAction = null;
		ConfigDescriptor = descriptor;
		return Self;
	}

	public DownsampleRequestDescriptor<TDocument> Config(Action<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor> configure)
	{
		ConfigValue = null;
		ConfigDescriptor = null;
		ConfigDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ConfigValue, options);
	}
}

/// <summary>
/// <para>
/// Downsample an index.
/// Aggregate a time series (TSDS) index and store pre-computed statistical summaries (<c>min</c>, <c>max</c>, <c>sum</c>, <c>value_count</c> and <c>avg</c>) for each metric field grouped by a configured time interval.
/// For example, a TSDS index that contains metrics sampled every 10 seconds can be downsampled to an hourly index.
/// All documents within an hour interval are summarized and stored as a single document in the downsample index.
/// </para>
/// <para>
/// NOTE: Only indices in a time series data stream are supported.
/// Neither field nor document level security can be defined on the source index.
/// The source index must be read only (<c>index.blocks.write: true</c>).
/// </para>
/// </summary>
public sealed partial class DownsampleRequestDescriptor : RequestDescriptor<DownsampleRequestDescriptor, DownsampleRequestParameters>
{
	internal DownsampleRequestDescriptor(Action<DownsampleRequestDescriptor> configure) => configure.Invoke(this);
	public DownsampleRequestDescriptor(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig config, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName targetIndex) : base(r => r.Required("index", index).Required("target_index", targetIndex)) => ConfigValue = config;

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementDownsample;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "indices.downsample";

	public DownsampleRequestDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		RouteValues.Required("index", index);
		return Self;
	}

	public DownsampleRequestDescriptor TargetIndex(Elastic.Clients.Elasticsearch.IndexName targetIndex)
	{
		RouteValues.Required("target_index", targetIndex);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig ConfigValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor ConfigDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor> ConfigDescriptorAction { get; set; }

	public DownsampleRequestDescriptor Config(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfig config)
	{
		ConfigDescriptor = null;
		ConfigDescriptorAction = null;
		ConfigValue = config;
		return Self;
	}

	public DownsampleRequestDescriptor Config(Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor descriptor)
	{
		ConfigValue = null;
		ConfigDescriptorAction = null;
		ConfigDescriptor = descriptor;
		return Self;
	}

	public DownsampleRequestDescriptor Config(Action<Elastic.Clients.Elasticsearch.IndexManagement.DownsampleConfigDescriptor> configure)
	{
		ConfigValue = null;
		ConfigDescriptor = null;
		ConfigDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ConfigValue, options);
	}
}