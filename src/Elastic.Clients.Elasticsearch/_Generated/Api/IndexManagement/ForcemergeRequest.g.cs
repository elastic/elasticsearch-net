// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class ForcemergeRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes <c>_all</c> string or when no indices have been specified)
	/// </para>
	/// </summary>
	public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

	/// <summary>
	/// <para>
	/// Whether to expand wildcard expression to concrete indices that are open, closed or both.
	/// </para>
	/// </summary>
	public ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? ExpandWildcards { get => Q<ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>?>("expand_wildcards"); set => Q("expand_wildcards", value); }

	/// <summary>
	/// <para>
	/// Specify whether the index should be flushed after performing the operation (default: true)
	/// </para>
	/// </summary>
	public bool? Flush { get => Q<bool?>("flush"); set => Q("flush", value); }

	/// <summary>
	/// <para>
	/// Whether specified concrete indices should be ignored when unavailable (missing or closed)
	/// </para>
	/// </summary>
	public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

	/// <summary>
	/// <para>
	/// The number of segments the index should be merged into (default: dynamic)
	/// </para>
	/// </summary>
	public long? MaxNumSegments { get => Q<long?>("max_num_segments"); set => Q("max_num_segments", value); }

	/// <summary>
	/// <para>
	/// Specify whether the operation should only expunge deleted documents
	/// </para>
	/// </summary>
	public bool? OnlyExpungeDeletes { get => Q<bool?>("only_expunge_deletes"); set => Q("only_expunge_deletes", value); }

	/// <summary>
	/// <para>
	/// Should the request wait until the force merge is completed.
	/// </para>
	/// </summary>
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
}

/// <summary>
/// <para>
/// Force a merge.
/// Perform the force merge operation on the shards of one or more indices.
/// For data streams, the API forces a merge on the shards of the stream's backing indices.
/// </para>
/// <para>
/// Merging reduces the number of segments in each shard by merging some of them together and also frees up the space used by deleted documents.
/// Merging normally happens automatically, but sometimes it is useful to trigger a merge manually.
/// </para>
/// <para>
/// WARNING: We recommend force merging only a read-only index (meaning the index is no longer receiving writes).
/// When documents are updated or deleted, the old version is not immediately removed but instead soft-deleted and marked with a "tombstone".
/// These soft-deleted documents are automatically cleaned up during regular segment merges.
/// But force merge can cause very large (greater than 5 GB) segments to be produced, which are not eligible for regular merges.
/// So the number of soft-deleted documents can then grow rapidly, resulting in higher disk usage and worse search performance.
/// If you regularly force merge an index receiving writes, this can also make snapshots more expensive, since the new documents can't be backed up incrementally.
/// </para>
/// <para>
/// <strong>Blocks during a force merge</strong>
/// </para>
/// <para>
/// Calls to this API block until the merge is complete (unless request contains <c>wait_for_completion=false</c>).
/// If the client connection is lost before completion then the force merge process will continue in the background.
/// Any new requests to force merge the same indices will also block until the ongoing force merge is complete.
/// </para>
/// <para>
/// <strong>Running force merge asynchronously</strong>
/// </para>
/// <para>
/// If the request contains <c>wait_for_completion=false</c>, Elasticsearch performs some preflight checks, launches the request, and returns a task you can use to get the status of the task.
/// However, you can not cancel this task as the force merge task is not cancelable.
/// Elasticsearch creates a record of this task as a document at <c>_tasks/&lt;task_id></c>.
/// When you are done with a task, you should delete the task document so Elasticsearch can reclaim the space.
/// </para>
/// <para>
/// <strong>Force merging multiple indices</strong>
/// </para>
/// <para>
/// You can force merge multiple indices with a single request by targeting:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// One or more data streams that contain multiple backing indices
/// </para>
/// </item>
/// <item>
/// <para>
/// Multiple indices
/// </para>
/// </item>
/// <item>
/// <para>
/// One or more aliases
/// </para>
/// </item>
/// <item>
/// <para>
/// All data streams and indices in a cluster
/// </para>
/// </item>
/// </list>
/// <para>
/// Each targeted shard is force-merged separately using the force_merge threadpool.
/// By default each node only has a single <c>force_merge</c> thread which means that the shards on that node are force-merged one at a time.
/// If you expand the <c>force_merge</c> threadpool on a node then it will force merge its shards in parallel
/// </para>
/// <para>
/// Force merge makes the storage for the shard being merged temporarily increase, as it may require free space up to triple its size in case <c>max_num_segments parameter</c> is set to <c>1</c>, to rewrite all segments into a new one.
/// </para>
/// <para>
/// <strong>Data streams and time-based indices</strong>
/// </para>
/// <para>
/// Force-merging is useful for managing a data stream's older backing indices and other time-based indices, particularly after a rollover.
/// In these cases, each index only receives indexing traffic for a certain period of time.
/// Once an index receive no more writes, its shards can be force-merged to a single segment.
/// This can be a good idea because single-segment shards can sometimes use simpler and more efficient data structures to perform searches.
/// For example:
/// </para>
/// <code>
/// POST /.ds-my-data-stream-2099.03.07-000001/_forcemerge?max_num_segments=1
/// </code>
/// </summary>
public sealed partial class ForcemergeRequest : PlainRequest<ForcemergeRequestParameters>
{
	public ForcemergeRequest()
	{
	}

	public ForcemergeRequest(Elastic.Clients.Elasticsearch.Indices? indices) : base(r => r.Optional("index", indices))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementForcemerge;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.forcemerge";

	/// <summary>
	/// <para>
	/// Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes <c>_all</c> string or when no indices have been specified)
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

	/// <summary>
	/// <para>
	/// Whether to expand wildcard expression to concrete indices that are open, closed or both.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? ExpandWildcards { get => Q<ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>?>("expand_wildcards"); set => Q("expand_wildcards", value); }

	/// <summary>
	/// <para>
	/// Specify whether the index should be flushed after performing the operation (default: true)
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? Flush { get => Q<bool?>("flush"); set => Q("flush", value); }

	/// <summary>
	/// <para>
	/// Whether specified concrete indices should be ignored when unavailable (missing or closed)
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

	/// <summary>
	/// <para>
	/// The number of segments the index should be merged into (default: dynamic)
	/// </para>
	/// </summary>
	[JsonIgnore]
	public long? MaxNumSegments { get => Q<long?>("max_num_segments"); set => Q("max_num_segments", value); }

	/// <summary>
	/// <para>
	/// Specify whether the operation should only expunge deleted documents
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? OnlyExpungeDeletes { get => Q<bool?>("only_expunge_deletes"); set => Q("only_expunge_deletes", value); }

	/// <summary>
	/// <para>
	/// Should the request wait until the force merge is completed.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
}

/// <summary>
/// <para>
/// Force a merge.
/// Perform the force merge operation on the shards of one or more indices.
/// For data streams, the API forces a merge on the shards of the stream's backing indices.
/// </para>
/// <para>
/// Merging reduces the number of segments in each shard by merging some of them together and also frees up the space used by deleted documents.
/// Merging normally happens automatically, but sometimes it is useful to trigger a merge manually.
/// </para>
/// <para>
/// WARNING: We recommend force merging only a read-only index (meaning the index is no longer receiving writes).
/// When documents are updated or deleted, the old version is not immediately removed but instead soft-deleted and marked with a "tombstone".
/// These soft-deleted documents are automatically cleaned up during regular segment merges.
/// But force merge can cause very large (greater than 5 GB) segments to be produced, which are not eligible for regular merges.
/// So the number of soft-deleted documents can then grow rapidly, resulting in higher disk usage and worse search performance.
/// If you regularly force merge an index receiving writes, this can also make snapshots more expensive, since the new documents can't be backed up incrementally.
/// </para>
/// <para>
/// <strong>Blocks during a force merge</strong>
/// </para>
/// <para>
/// Calls to this API block until the merge is complete (unless request contains <c>wait_for_completion=false</c>).
/// If the client connection is lost before completion then the force merge process will continue in the background.
/// Any new requests to force merge the same indices will also block until the ongoing force merge is complete.
/// </para>
/// <para>
/// <strong>Running force merge asynchronously</strong>
/// </para>
/// <para>
/// If the request contains <c>wait_for_completion=false</c>, Elasticsearch performs some preflight checks, launches the request, and returns a task you can use to get the status of the task.
/// However, you can not cancel this task as the force merge task is not cancelable.
/// Elasticsearch creates a record of this task as a document at <c>_tasks/&lt;task_id></c>.
/// When you are done with a task, you should delete the task document so Elasticsearch can reclaim the space.
/// </para>
/// <para>
/// <strong>Force merging multiple indices</strong>
/// </para>
/// <para>
/// You can force merge multiple indices with a single request by targeting:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// One or more data streams that contain multiple backing indices
/// </para>
/// </item>
/// <item>
/// <para>
/// Multiple indices
/// </para>
/// </item>
/// <item>
/// <para>
/// One or more aliases
/// </para>
/// </item>
/// <item>
/// <para>
/// All data streams and indices in a cluster
/// </para>
/// </item>
/// </list>
/// <para>
/// Each targeted shard is force-merged separately using the force_merge threadpool.
/// By default each node only has a single <c>force_merge</c> thread which means that the shards on that node are force-merged one at a time.
/// If you expand the <c>force_merge</c> threadpool on a node then it will force merge its shards in parallel
/// </para>
/// <para>
/// Force merge makes the storage for the shard being merged temporarily increase, as it may require free space up to triple its size in case <c>max_num_segments parameter</c> is set to <c>1</c>, to rewrite all segments into a new one.
/// </para>
/// <para>
/// <strong>Data streams and time-based indices</strong>
/// </para>
/// <para>
/// Force-merging is useful for managing a data stream's older backing indices and other time-based indices, particularly after a rollover.
/// In these cases, each index only receives indexing traffic for a certain period of time.
/// Once an index receive no more writes, its shards can be force-merged to a single segment.
/// This can be a good idea because single-segment shards can sometimes use simpler and more efficient data structures to perform searches.
/// For example:
/// </para>
/// <code>
/// POST /.ds-my-data-stream-2099.03.07-000001/_forcemerge?max_num_segments=1
/// </code>
/// </summary>
public sealed partial class ForcemergeRequestDescriptor<TDocument> : RequestDescriptor<ForcemergeRequestDescriptor<TDocument>, ForcemergeRequestParameters>
{
	internal ForcemergeRequestDescriptor(Action<ForcemergeRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ForcemergeRequestDescriptor(Elastic.Clients.Elasticsearch.Indices? indices) : base(r => r.Optional("index", indices))
	{
	}

	public ForcemergeRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementForcemerge;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.forcemerge";

	public ForcemergeRequestDescriptor<TDocument> AllowNoIndices(bool? allowNoIndices = true) => Qs("allow_no_indices", allowNoIndices);
	public ForcemergeRequestDescriptor<TDocument> ExpandWildcards(ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? expandWildcards) => Qs("expand_wildcards", expandWildcards);
	public ForcemergeRequestDescriptor<TDocument> Flush(bool? flush = true) => Qs("flush", flush);
	public ForcemergeRequestDescriptor<TDocument> IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);
	public ForcemergeRequestDescriptor<TDocument> MaxNumSegments(long? maxNumSegments) => Qs("max_num_segments", maxNumSegments);
	public ForcemergeRequestDescriptor<TDocument> OnlyExpungeDeletes(bool? onlyExpungeDeletes = true) => Qs("only_expunge_deletes", onlyExpungeDeletes);
	public ForcemergeRequestDescriptor<TDocument> WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);

	public ForcemergeRequestDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices? indices)
	{
		RouteValues.Optional("index", indices);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Force a merge.
/// Perform the force merge operation on the shards of one or more indices.
/// For data streams, the API forces a merge on the shards of the stream's backing indices.
/// </para>
/// <para>
/// Merging reduces the number of segments in each shard by merging some of them together and also frees up the space used by deleted documents.
/// Merging normally happens automatically, but sometimes it is useful to trigger a merge manually.
/// </para>
/// <para>
/// WARNING: We recommend force merging only a read-only index (meaning the index is no longer receiving writes).
/// When documents are updated or deleted, the old version is not immediately removed but instead soft-deleted and marked with a "tombstone".
/// These soft-deleted documents are automatically cleaned up during regular segment merges.
/// But force merge can cause very large (greater than 5 GB) segments to be produced, which are not eligible for regular merges.
/// So the number of soft-deleted documents can then grow rapidly, resulting in higher disk usage and worse search performance.
/// If you regularly force merge an index receiving writes, this can also make snapshots more expensive, since the new documents can't be backed up incrementally.
/// </para>
/// <para>
/// <strong>Blocks during a force merge</strong>
/// </para>
/// <para>
/// Calls to this API block until the merge is complete (unless request contains <c>wait_for_completion=false</c>).
/// If the client connection is lost before completion then the force merge process will continue in the background.
/// Any new requests to force merge the same indices will also block until the ongoing force merge is complete.
/// </para>
/// <para>
/// <strong>Running force merge asynchronously</strong>
/// </para>
/// <para>
/// If the request contains <c>wait_for_completion=false</c>, Elasticsearch performs some preflight checks, launches the request, and returns a task you can use to get the status of the task.
/// However, you can not cancel this task as the force merge task is not cancelable.
/// Elasticsearch creates a record of this task as a document at <c>_tasks/&lt;task_id></c>.
/// When you are done with a task, you should delete the task document so Elasticsearch can reclaim the space.
/// </para>
/// <para>
/// <strong>Force merging multiple indices</strong>
/// </para>
/// <para>
/// You can force merge multiple indices with a single request by targeting:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// One or more data streams that contain multiple backing indices
/// </para>
/// </item>
/// <item>
/// <para>
/// Multiple indices
/// </para>
/// </item>
/// <item>
/// <para>
/// One or more aliases
/// </para>
/// </item>
/// <item>
/// <para>
/// All data streams and indices in a cluster
/// </para>
/// </item>
/// </list>
/// <para>
/// Each targeted shard is force-merged separately using the force_merge threadpool.
/// By default each node only has a single <c>force_merge</c> thread which means that the shards on that node are force-merged one at a time.
/// If you expand the <c>force_merge</c> threadpool on a node then it will force merge its shards in parallel
/// </para>
/// <para>
/// Force merge makes the storage for the shard being merged temporarily increase, as it may require free space up to triple its size in case <c>max_num_segments parameter</c> is set to <c>1</c>, to rewrite all segments into a new one.
/// </para>
/// <para>
/// <strong>Data streams and time-based indices</strong>
/// </para>
/// <para>
/// Force-merging is useful for managing a data stream's older backing indices and other time-based indices, particularly after a rollover.
/// In these cases, each index only receives indexing traffic for a certain period of time.
/// Once an index receive no more writes, its shards can be force-merged to a single segment.
/// This can be a good idea because single-segment shards can sometimes use simpler and more efficient data structures to perform searches.
/// For example:
/// </para>
/// <code>
/// POST /.ds-my-data-stream-2099.03.07-000001/_forcemerge?max_num_segments=1
/// </code>
/// </summary>
public sealed partial class ForcemergeRequestDescriptor : RequestDescriptor<ForcemergeRequestDescriptor, ForcemergeRequestParameters>
{
	internal ForcemergeRequestDescriptor(Action<ForcemergeRequestDescriptor> configure) => configure.Invoke(this);

	public ForcemergeRequestDescriptor(Elastic.Clients.Elasticsearch.Indices? indices) : base(r => r.Optional("index", indices))
	{
	}

	public ForcemergeRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementForcemerge;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.forcemerge";

	public ForcemergeRequestDescriptor AllowNoIndices(bool? allowNoIndices = true) => Qs("allow_no_indices", allowNoIndices);
	public ForcemergeRequestDescriptor ExpandWildcards(ICollection<Elastic.Clients.Elasticsearch.ExpandWildcard>? expandWildcards) => Qs("expand_wildcards", expandWildcards);
	public ForcemergeRequestDescriptor Flush(bool? flush = true) => Qs("flush", flush);
	public ForcemergeRequestDescriptor IgnoreUnavailable(bool? ignoreUnavailable = true) => Qs("ignore_unavailable", ignoreUnavailable);
	public ForcemergeRequestDescriptor MaxNumSegments(long? maxNumSegments) => Qs("max_num_segments", maxNumSegments);
	public ForcemergeRequestDescriptor OnlyExpungeDeletes(bool? onlyExpungeDeletes = true) => Qs("only_expunge_deletes", onlyExpungeDeletes);
	public ForcemergeRequestDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);

	public ForcemergeRequestDescriptor Indices(Elastic.Clients.Elasticsearch.Indices? indices)
	{
		RouteValues.Optional("index", indices);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}