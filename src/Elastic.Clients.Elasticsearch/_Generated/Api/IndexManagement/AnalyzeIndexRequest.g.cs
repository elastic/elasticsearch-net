// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class AnalyzeIndexRequestParameters : RequestParameters<AnalyzeIndexRequestParameters>
	{
	}

	[InterfaceConverterAttribute(typeof(AnalyzeIndexRequestDescriptorConverter<AnalyzeIndexRequest>))]
	public partial interface IAnalyzeIndexRequest : IRequest<AnalyzeIndexRequestParameters>
	{
		string? Analyzer { get; set; }

		IEnumerable<string>? Attributes { get; set; }

		IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.CharFilters?>>? CharFilter { get; set; }

		bool? Explain { get; set; }

		string? Field { get; set; }

		IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.TokenFilters?>>? Filter { get; set; }

		string? Normalizer { get; set; }

		Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? Text { get; set; }

		Union<string?, Elastic.Clients.Elasticsearch.Analysis.Tokenizers?>? Tokenizer { get; set; }
	}

	public partial class AnalyzeIndexRequest : PlainRequestBase<AnalyzeIndexRequestParameters>, IAnalyzeIndexRequest
	{
		public AnalyzeIndexRequest()
		{
		}

		public AnalyzeIndexRequest(Elastic.Clients.Elasticsearch.IndexName? index) : base(r => r.Optional("index", index))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAnalyze;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("attributes")]
		public IEnumerable<string>? Attributes { get; set; }

		[JsonInclude]
		[JsonPropertyName("char_filter")]
		public IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.CharFilters?>>? CharFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.TokenFilters?>>? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; set; }

		[JsonInclude]
		[JsonPropertyName("text")]
		public Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? Text { get; set; }

		[JsonInclude]
		[JsonPropertyName("tokenizer")]
		public Union<string?, Elastic.Clients.Elasticsearch.Analysis.Tokenizers?>? Tokenizer { get; set; }
	}

	public partial class AnalyzeIndexRequestDescriptor : RequestDescriptorBase<AnalyzeIndexRequestDescriptor, AnalyzeIndexRequestParameters, IAnalyzeIndexRequest>, IAnalyzeIndexRequest
	{
		///<summary>/_analyze</summary>
        public AnalyzeIndexRequestDescriptor() : base()
		{
		}

		///<summary>/{index}/_analyze</summary>
        public AnalyzeIndexRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName? index) : base(r => r.Optional("index", index))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAnalyze;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		string? IAnalyzeIndexRequest.Analyzer { get; set; }

		IEnumerable<string>? IAnalyzeIndexRequest.Attributes { get; set; }

		IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.CharFilters?>>? IAnalyzeIndexRequest.CharFilter { get; set; }

		bool? IAnalyzeIndexRequest.Explain { get; set; }

		string? IAnalyzeIndexRequest.Field { get; set; }

		IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.TokenFilters?>>? IAnalyzeIndexRequest.Filter { get; set; }

		string? IAnalyzeIndexRequest.Normalizer { get; set; }

		Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? IAnalyzeIndexRequest.Text { get; set; }

		Union<string?, Elastic.Clients.Elasticsearch.Analysis.Tokenizers?>? IAnalyzeIndexRequest.Tokenizer { get; set; }

		public AnalyzeIndexRequestDescriptor Analyzer(string? analyzer) => Assign(analyzer, (a, v) => a.Analyzer = v);
		public AnalyzeIndexRequestDescriptor Attributes(IEnumerable<string>? attributes) => Assign(attributes, (a, v) => a.Attributes = v);
		public AnalyzeIndexRequestDescriptor CharFilter(IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.CharFilters?>>? charFilter) => Assign(charFilter, (a, v) => a.CharFilter = v);
		public AnalyzeIndexRequestDescriptor Explain(bool? explain = true) => Assign(explain, (a, v) => a.Explain = v);
		public AnalyzeIndexRequestDescriptor Field(string? field) => Assign(field, (a, v) => a.Field = v);
		public AnalyzeIndexRequestDescriptor Filter(IEnumerable<Union<string?, Elastic.Clients.Elasticsearch.Analysis.TokenFilters?>>? filter) => Assign(filter, (a, v) => a.Filter = v);
		public AnalyzeIndexRequestDescriptor Normalizer(string? normalizer) => Assign(normalizer, (a, v) => a.Normalizer = v);
		public AnalyzeIndexRequestDescriptor Text(Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? text) => Assign(text, (a, v) => a.Text = v);
		public AnalyzeIndexRequestDescriptor Tokenizer(Union<string?, Elastic.Clients.Elasticsearch.Analysis.Tokenizers?>? tokenizer) => Assign(tokenizer, (a, v) => a.Tokenizer = v);
	}

	internal sealed class AnalyzeIndexRequestDescriptorConverter<TReadAs> : JsonConverter<IAnalyzeIndexRequest> where TReadAs : class, IAnalyzeIndexRequest
	{
		public override IAnalyzeIndexRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IAnalyzeIndexRequest value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(value.Analyzer))
			{
				writer.WritePropertyName("analyzer");
				writer.WriteStringValue(value.Analyzer);
			}

			if (value.Attributes is not null)
			{
				writer.WritePropertyName("attributes");
				JsonSerializer.Serialize(writer, value.Attributes, options);
			}

			if (value.CharFilter is not null)
			{
				writer.WritePropertyName("char_filter");
				JsonSerializer.Serialize(writer, value.CharFilter, options);
			}

			if (value.Explain.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(value.Explain.Value);
			}

			if (value.Field is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, value.Field, options);
			}

			if (value.Filter is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, value.Filter, options);
			}

			if (!string.IsNullOrEmpty(value.Normalizer))
			{
				writer.WritePropertyName("normalizer");
				writer.WriteStringValue(value.Normalizer);
			}

			if (value.Text is not null)
			{
				writer.WritePropertyName("text");
				JsonSerializer.Serialize(writer, value.Text, options);
			}

			if (value.Tokenizer is not null)
			{
				writer.WritePropertyName("tokenizer");
				JsonSerializer.Serialize(writer, value.Tokenizer, options);
			}

			writer.WriteEndObject();
		}
	}
}