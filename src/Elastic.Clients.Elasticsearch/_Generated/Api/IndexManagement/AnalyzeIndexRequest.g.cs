// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class AnalyzeIndexRequestParameters : RequestParameters<AnalyzeIndexRequestParameters>
	{
	}

	public partial class AnalyzeIndexRequest : PlainRequestBase<AnalyzeIndexRequestParameters>
	{
		public AnalyzeIndexRequest()
		{
		}

		public AnalyzeIndexRequest(Elastic.Clients.Elasticsearch.IndexName? index) : base(r => r.Optional("index", index))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAnalyze;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("attributes")]
		public IEnumerable<string>? Attributes { get; set; }

		[JsonInclude]
		[JsonPropertyName("char_filter")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Analysis.CharFilter>? CharFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Analysis.TokenFilter>? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("normalizer")]
		public string? Normalizer { get; set; }

		[JsonInclude]
		[JsonPropertyName("text")]
		public Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? Text { get; set; }

		[JsonInclude]
		[JsonPropertyName("tokenizer")]
		public Elastic.Clients.Elasticsearch.Analysis.Tokenizer? Tokenizer { get; set; }
	}

	public sealed partial class AnalyzeIndexRequestDescriptor<TDocument> : RequestDescriptorBase<AnalyzeIndexRequestDescriptor<TDocument>, AnalyzeIndexRequestParameters>
	{
		public AnalyzeIndexRequestDescriptor() : this(typeof(TDocument))
		{
		}

		public AnalyzeIndexRequestDescriptor(Elastic.Clients.Elasticsearch.IndexName? index) : base(r => r.Optional("index", index))
		{
		}

		internal AnalyzeIndexRequestDescriptor(Action<AnalyzeIndexRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementAnalyze;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		internal string? AnalyzerValue { get; private set; }

		internal IEnumerable<string>? AttributesValue { get; private set; }

		internal IEnumerable<Elastic.Clients.Elasticsearch.Analysis.CharFilter>? CharFilterValue { get; private set; }

		internal bool? ExplainValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Field? FieldValue { get; private set; }

		internal IEnumerable<Elastic.Clients.Elasticsearch.Analysis.TokenFilter>? FilterValue { get; private set; }

		internal string? NormalizerValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? TextValue { get; private set; }

		internal Elastic.Clients.Elasticsearch.Analysis.Tokenizer? TokenizerValue { get; private set; }

		public AnalyzeIndexRequestDescriptor<TDocument> Analyzer(string? analyzer) => Assign(analyzer, (a, v) => a.AnalyzerValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Attributes(IEnumerable<string>? attributes) => Assign(attributes, (a, v) => a.AttributesValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> CharFilter(IEnumerable<Elastic.Clients.Elasticsearch.Analysis.CharFilter>? charFilter) => Assign(charFilter, (a, v) => a.CharFilterValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Explain(bool? explain = true) => Assign(explain, (a, v) => a.ExplainValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field? field) => Assign(field, (a, v) => a.FieldValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field) => Assign(field, (a, v) => a.FieldValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Filter(IEnumerable<Elastic.Clients.Elasticsearch.Analysis.TokenFilter>? filter) => Assign(filter, (a, v) => a.FilterValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Normalizer(string? normalizer) => Assign(normalizer, (a, v) => a.NormalizerValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Text(Elastic.Clients.Elasticsearch.IndexManagement.Analyze.TextToAnalyze? text) => Assign(text, (a, v) => a.TextValue = v);
		public AnalyzeIndexRequestDescriptor<TDocument> Tokenizer(Elastic.Clients.Elasticsearch.Analysis.Tokenizer? tokenizer) => Assign(tokenizer, (a, v) => a.TokenizerValue = v);
		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (!string.IsNullOrEmpty(AnalyzerValue))
			{
				writer.WritePropertyName("analyzer");
				writer.WriteStringValue(AnalyzerValue);
			}

			if (AttributesValue is not null)
			{
				writer.WritePropertyName("attributes");
				JsonSerializer.Serialize(writer, AttributesValue, options);
			}

			if (CharFilterValue is not null)
			{
				writer.WritePropertyName("char_filter");
				JsonSerializer.Serialize(writer, CharFilterValue, options);
			}

			if (ExplainValue.HasValue)
			{
				writer.WritePropertyName("explain");
				writer.WriteBooleanValue(ExplainValue.Value);
			}

			if (FieldValue is not null)
			{
				writer.WritePropertyName("field");
				JsonSerializer.Serialize(writer, FieldValue, options);
			}

			if (FilterValue is not null)
			{
				writer.WritePropertyName("filter");
				JsonSerializer.Serialize(writer, FilterValue, options);
			}

			if (!string.IsNullOrEmpty(NormalizerValue))
			{
				writer.WritePropertyName("normalizer");
				writer.WriteStringValue(NormalizerValue);
			}

			if (TextValue is not null)
			{
				writer.WritePropertyName("text");
				JsonSerializer.Serialize(writer, TextValue, options);
			}

			if (TokenizerValue is not null)
			{
				writer.WritePropertyName("tokenizer");
				JsonSerializer.Serialize(writer, TokenizerValue, options);
			}

			writer.WriteEndObject();
		}
	}
}