// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class GetMigrateReindexStatusRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Get the migration reindexing status.
/// </para>
/// <para>
/// Get the status of a migration reindex attempt for a data stream or index.
/// </para>
/// </summary>
public sealed partial class GetMigrateReindexStatusRequest : PlainRequest<GetMigrateReindexStatusRequestParameters>
{
	public GetMigrateReindexStatusRequest(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementGetMigrateReindexStatus;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.get_migrate_reindex_status";
}

/// <summary>
/// <para>
/// Get the migration reindexing status.
/// </para>
/// <para>
/// Get the status of a migration reindex attempt for a data stream or index.
/// </para>
/// </summary>
public sealed partial class GetMigrateReindexStatusRequestDescriptor<TDocument> : RequestDescriptor<GetMigrateReindexStatusRequestDescriptor<TDocument>, GetMigrateReindexStatusRequestParameters>
{
	internal GetMigrateReindexStatusRequestDescriptor(Action<GetMigrateReindexStatusRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public GetMigrateReindexStatusRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	public GetMigrateReindexStatusRequestDescriptor() : this(typeof(TDocument))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementGetMigrateReindexStatus;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.get_migrate_reindex_status";

	public GetMigrateReindexStatusRequestDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Get the migration reindexing status.
/// </para>
/// <para>
/// Get the status of a migration reindex attempt for a data stream or index.
/// </para>
/// </summary>
public sealed partial class GetMigrateReindexStatusRequestDescriptor : RequestDescriptor<GetMigrateReindexStatusRequestDescriptor, GetMigrateReindexStatusRequestParameters>
{
	internal GetMigrateReindexStatusRequestDescriptor(Action<GetMigrateReindexStatusRequestDescriptor> configure) => configure.Invoke(this);

	public GetMigrateReindexStatusRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementGetMigrateReindexStatus;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "indices.get_migrate_reindex_status";

	public GetMigrateReindexStatusRequestDescriptor Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}