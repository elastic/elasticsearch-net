// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.IndexManagement;

public sealed partial class MigrateReindexRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Reindex legacy backing indices.
/// </para>
/// <para>
/// Reindex all legacy backing indices for a data stream.
/// This operation occurs in a persistent task.
/// The persistent task ID is returned immediately and the reindexing work is completed in that task.
/// </para>
/// </summary>
public sealed partial class MigrateReindexRequest : PlainRequest<MigrateReindexRequestParameters>, ISelfSerializable
{
	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementMigrateReindex;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "indices.migrate_reindex";

	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindex Reindex { get; set; }

	void ISelfSerializable.Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, Reindex, options);
	}
}

/// <summary>
/// <para>
/// Reindex legacy backing indices.
/// </para>
/// <para>
/// Reindex all legacy backing indices for a data stream.
/// This operation occurs in a persistent task.
/// The persistent task ID is returned immediately and the reindexing work is completed in that task.
/// </para>
/// </summary>
public sealed partial class MigrateReindexRequestDescriptor : RequestDescriptor<MigrateReindexRequestDescriptor, MigrateReindexRequestParameters>
{
	internal MigrateReindexRequestDescriptor(Action<MigrateReindexRequestDescriptor> configure) => configure.Invoke(this);
	public MigrateReindexRequestDescriptor(Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindex reindex) => ReindexValue = reindex;

	internal override ApiUrls ApiUrls => ApiUrlLookup.IndexManagementMigrateReindex;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "indices.migrate_reindex";

	private Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindex ReindexValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindexDescriptor ReindexDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindexDescriptor> ReindexDescriptorAction { get; set; }

	public MigrateReindexRequestDescriptor Reindex(Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindex reindex)
	{
		ReindexDescriptor = null;
		ReindexDescriptorAction = null;
		ReindexValue = reindex;
		return Self;
	}

	public MigrateReindexRequestDescriptor Reindex(Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindexDescriptor descriptor)
	{
		ReindexValue = null;
		ReindexDescriptorAction = null;
		ReindexDescriptor = descriptor;
		return Self;
	}

	public MigrateReindexRequestDescriptor Reindex(Action<Elastic.Clients.Elasticsearch.IndexManagement.MigrateReindexDescriptor> configure)
	{
		ReindexValue = null;
		ReindexDescriptor = null;
		ReindexDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ReindexValue, options);
	}
}