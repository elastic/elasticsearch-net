// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexSimulateIndexTemplateRequestParameters : RequestParameters<IndexSimulateIndexTemplateRequestParameters>
	{
	}

	[InterfaceConverterAttribute(typeof(IndexSimulateIndexTemplateRequestDescriptorConverter<IndexSimulateIndexTemplateRequest>))]
	public partial interface IIndexSimulateIndexTemplateRequest : IRequest<IndexSimulateIndexTemplateRequestParameters>
	{
		IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? IndexPatterns { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		IEnumerable<IndexManagement.IOverlappingIndexTemplate>? Overlapping { get; set; }

		IndexManagement.ITemplateMapping? Template { get; set; }
	}

	public partial class IndexSimulateIndexTemplateRequest : PlainRequestBase<IndexSimulateIndexTemplateRequestParameters>, IIndexSimulateIndexTemplateRequest
	{
		public IndexSimulateIndexTemplateRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("index_patterns")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? IndexPatterns { get; set; }

		[JsonInclude]
		[JsonPropertyName("composed_of")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("overlapping")]
		public IEnumerable<IndexManagement.IOverlappingIndexTemplate>? Overlapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("template")]
		public IndexManagement.ITemplateMapping? Template { get; set; }
	}

	public partial class IndexSimulateIndexTemplateRequestDescriptor : RequestDescriptorBase<IndexSimulateIndexTemplateRequestDescriptor, IndexSimulateIndexTemplateRequestParameters, IIndexSimulateIndexTemplateRequest>, IIndexSimulateIndexTemplateRequest
	{
		///<summary>/_index_template/_simulate_index/{name}</summary>
        public IndexSimulateIndexTemplateRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? IIndexSimulateIndexTemplateRequest.IndexPatterns { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Name>? IIndexSimulateIndexTemplateRequest.ComposedOf { get; set; }

		IEnumerable<IndexManagement.IOverlappingIndexTemplate>? IIndexSimulateIndexTemplateRequest.Overlapping { get; set; }

		IndexManagement.ITemplateMapping? IIndexSimulateIndexTemplateRequest.Template { get; set; }

		public IndexSimulateIndexTemplateRequestDescriptor IndexPatterns(IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? indexPatterns) => Assign(indexPatterns, (a, v) => a.IndexPatterns = v);
		public IndexSimulateIndexTemplateRequestDescriptor ComposedOf(IEnumerable<Elastic.Clients.Elasticsearch.Name>? composedOf) => Assign(composedOf, (a, v) => a.ComposedOf = v);
		public IndexSimulateIndexTemplateRequestDescriptor Overlapping(IEnumerable<IndexManagement.IOverlappingIndexTemplate>? overlapping) => Assign(overlapping, (a, v) => a.Overlapping = v);
		public IndexSimulateIndexTemplateRequestDescriptor Template(IndexManagement.ITemplateMapping? template) => Assign(template, (a, v) => a.Template = v);
	}

	internal sealed class IndexSimulateIndexTemplateRequestDescriptorConverter<TReadAs> : JsonConverter<IIndexSimulateIndexTemplateRequest> where TReadAs : class, IIndexSimulateIndexTemplateRequest
	{
		public override IIndexSimulateIndexTemplateRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IIndexSimulateIndexTemplateRequest value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value.IndexPatterns is not null)
			{
				writer.WritePropertyName("index_patterns");
				JsonSerializer.Serialize(writer, value.IndexPatterns, options);
			}

			if (value.ComposedOf is not null)
			{
				writer.WritePropertyName("composed_of");
				JsonSerializer.Serialize(writer, value.ComposedOf, options);
			}

			if (value.Overlapping is not null)
			{
				writer.WritePropertyName("overlapping");
				JsonSerializer.Serialize(writer, value.Overlapping, options);
			}

			if (value.Template is not null)
			{
				writer.WritePropertyName("template");
				JsonSerializer.Serialize(writer, value.Template, options);
			}

			writer.WriteEndObject();
		}
	}
}