// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexSimulateIndexTemplateRequestParameters : RequestParameters<IndexSimulateIndexTemplateRequestParameters>
	{
	}

	public partial class IndexSimulateIndexTemplateRequest : PlainRequestBase<IndexSimulateIndexTemplateRequestParameters>
	{
		public IndexSimulateIndexTemplateRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("index_patterns")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? IndexPatterns { get; set; }

		[JsonInclude]
		[JsonPropertyName("composed_of")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Name>? ComposedOf { get; set; }

		[JsonInclude]
		[JsonPropertyName("overlapping")]
		public IEnumerable<Elastic.Clients.Elasticsearch.IndexManagement.OverlappingIndexTemplate>? Overlapping { get; set; }

		[JsonInclude]
		[JsonPropertyName("template")]
		public Elastic.Clients.Elasticsearch.IndexManagement.TemplateMapping? Template { get; set; }
	}

	[JsonConverter(typeof(IndexSimulateIndexTemplateRequestDescriptorConverter))]
	public sealed partial class IndexSimulateIndexTemplateRequestDescriptor : RequestDescriptorBase<IndexSimulateIndexTemplateRequestDescriptor, IndexSimulateIndexTemplateRequestParameters>
	{
		public IndexSimulateIndexTemplateRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? _indexPatterns;
		internal IEnumerable<Elastic.Clients.Elasticsearch.Name>? _composedOf;
		internal IEnumerable<Elastic.Clients.Elasticsearch.IndexManagement.OverlappingIndexTemplate>? _overlapping;
		internal Elastic.Clients.Elasticsearch.IndexManagement.TemplateMapping? _template;
		internal override ApiUrls ApiUrls => ApiUrlsLookups.IndexManagementSimulateIndexTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public IndexSimulateIndexTemplateRequestDescriptor IndexPatterns(IEnumerable<Elastic.Clients.Elasticsearch.IndexName>? indexPatterns) => Assign(indexPatterns, (a, v) => a._indexPatterns = v);
		public IndexSimulateIndexTemplateRequestDescriptor ComposedOf(IEnumerable<Elastic.Clients.Elasticsearch.Name>? composedOf) => Assign(composedOf, (a, v) => a._composedOf = v);
		public IndexSimulateIndexTemplateRequestDescriptor Overlapping(IEnumerable<Elastic.Clients.Elasticsearch.IndexManagement.OverlappingIndexTemplate>? overlapping) => Assign(overlapping, (a, v) => a._overlapping = v);
		public IndexSimulateIndexTemplateRequestDescriptor Template(Elastic.Clients.Elasticsearch.IndexManagement.TemplateMapping? template) => Assign(template, (a, v) => a._template = v);
	}

	internal sealed class IndexSimulateIndexTemplateRequestDescriptorConverter : JsonConverter<IndexSimulateIndexTemplateRequestDescriptor>
	{
		public override IndexSimulateIndexTemplateRequestDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();
		public override void Write(Utf8JsonWriter writer, IndexSimulateIndexTemplateRequestDescriptor value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			if (value._indexPatterns is not null)
			{
				writer.WritePropertyName("index_patterns");
				JsonSerializer.Serialize(writer, value._indexPatterns, options);
			}

			if (value._composedOf is not null)
			{
				writer.WritePropertyName("composed_of");
				JsonSerializer.Serialize(writer, value._composedOf, options);
			}

			if (value._overlapping is not null)
			{
				writer.WritePropertyName("overlapping");
				JsonSerializer.Serialize(writer, value._overlapping, options);
			}

			if (value._template is not null)
			{
				writer.WritePropertyName("template");
				JsonSerializer.Serialize(writer, value._template, options);
			}

			writer.WriteEndObject();
		}
	}
}