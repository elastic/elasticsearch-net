// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.SearchApplication;

public sealed partial class PutSearchApplicationRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// If <c>true</c>, this request cannot replace or update existing Search Applications.
	/// </para>
	/// </summary>
	public bool? Create { get => Q<bool?>("create"); set => Q("create", value); }
}

internal sealed partial class PutSearchApplicationRequestConverter : System.Text.Json.Serialization.JsonConverter<PutSearchApplicationRequest>
{
	public override PutSearchApplicationRequest Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new PutSearchApplicationRequest { SearchApplication = reader.ReadValue<Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParameters>(options, null) };
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, PutSearchApplicationRequest value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.SearchApplication, null);
	}
}

/// <summary>
/// <para>
/// Create or update a search application.
/// </para>
/// </summary>
[JsonConverter(typeof(PutSearchApplicationRequestConverter))]
public sealed partial class PutSearchApplicationRequest : PlainRequest<PutSearchApplicationRequestParameters>
{
	public PutSearchApplicationRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
	{
	}

	[JsonConstructor]
	internal PutSearchApplicationRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SearchApplicationPut;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "search_application.put";

	/// <summary>
	/// <para>
	/// The name of the search application to be created or updated.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Name Name { get => P<Elastic.Clients.Elasticsearch.Name>("name"); set => PR("name", value); }

	/// <summary>
	/// <para>
	/// If <c>true</c>, this request cannot replace or update existing Search Applications.
	/// </para>
	/// </summary>
	public bool? Create { get => Q<bool?>("create"); set => Q("create", value); }
	public Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParameters SearchApplication { get; set; }
}

/// <summary>
/// <para>
/// Create or update a search application.
/// </para>
/// </summary>
public sealed partial class PutSearchApplicationRequestDescriptor : RequestDescriptor<PutSearchApplicationRequestDescriptor, PutSearchApplicationRequestParameters>
{
	internal PutSearchApplicationRequestDescriptor(Action<PutSearchApplicationRequestDescriptor> configure) => configure.Invoke(this);
	public PutSearchApplicationRequestDescriptor(Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParameters searchApplication, Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name)) => SearchApplicationValue = searchApplication;

	internal override ApiUrls ApiUrls => ApiUrlLookup.SearchApplicationPut;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "search_application.put";

	public PutSearchApplicationRequestDescriptor Create(bool? create = true) => Qs("create", create);

	public PutSearchApplicationRequestDescriptor Name(Elastic.Clients.Elasticsearch.Name name)
	{
		RouteValues.Required("name", name);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParameters SearchApplicationValue { get; set; }
	private Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParametersDescriptor SearchApplicationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParametersDescriptor> SearchApplicationDescriptorAction { get; set; }

	public PutSearchApplicationRequestDescriptor SearchApplication(Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParameters searchApplication)
	{
		SearchApplicationDescriptor = null;
		SearchApplicationDescriptorAction = null;
		SearchApplicationValue = searchApplication;
		return Self;
	}

	public PutSearchApplicationRequestDescriptor SearchApplication(Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParametersDescriptor descriptor)
	{
		SearchApplicationValue = null;
		SearchApplicationDescriptorAction = null;
		SearchApplicationDescriptor = descriptor;
		return Self;
	}

	public PutSearchApplicationRequestDescriptor SearchApplication(Action<Elastic.Clients.Elasticsearch.SearchApplication.SearchApplicationParametersDescriptor> configure)
	{
		SearchApplicationValue = null;
		SearchApplicationDescriptor = null;
		SearchApplicationDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, SearchApplicationValue, options);
	}
}