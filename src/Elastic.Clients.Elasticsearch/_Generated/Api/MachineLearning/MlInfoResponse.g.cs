// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport.Products.Elasticsearch;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.MachineLearning;

internal sealed partial class MlInfoResponseConverter : System.Text.Json.Serialization.JsonConverter<MlInfoResponse>
{
	private static readonly System.Text.Json.JsonEncodedText PropDefaults = System.Text.Json.JsonEncodedText.Encode("defaults");
	private static readonly System.Text.Json.JsonEncodedText PropLimits = System.Text.Json.JsonEncodedText.Encode("limits");
	private static readonly System.Text.Json.JsonEncodedText PropNativeCode = System.Text.Json.JsonEncodedText.Encode("native_code");
	private static readonly System.Text.Json.JsonEncodedText PropUpgradeMode = System.Text.Json.JsonEncodedText.Encode("upgrade_mode");

	public override MlInfoResponse Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<Elastic.Clients.Elasticsearch.MachineLearning.Defaults> propDefaults = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.MachineLearning.Limits> propLimits = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.MachineLearning.NativeCode> propNativeCode = default;
		LocalJsonValue<bool> propUpgradeMode = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propDefaults.TryReadProperty(ref reader, options, PropDefaults, null))
			{
				continue;
			}

			if (propLimits.TryReadProperty(ref reader, options, PropLimits, null))
			{
				continue;
			}

			if (propNativeCode.TryReadProperty(ref reader, options, PropNativeCode, null))
			{
				continue;
			}

			if (propUpgradeMode.TryReadProperty(ref reader, options, PropUpgradeMode, null))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new MlInfoResponse
		{
			Defaults = propDefaults.Value
,
			Limits = propLimits.Value
,
			NativeCode = propNativeCode.Value
,
			UpgradeMode = propUpgradeMode.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, MlInfoResponse value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropDefaults, value.Defaults, null, null);
		writer.WriteProperty(options, PropLimits, value.Limits, null, null);
		writer.WriteProperty(options, PropNativeCode, value.NativeCode, null, null);
		writer.WriteProperty(options, PropUpgradeMode, value.UpgradeMode, null, null);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(MlInfoResponseConverter))]
public sealed partial class MlInfoResponse : ElasticsearchResponse
{
	public Elastic.Clients.Elasticsearch.MachineLearning.Defaults Defaults { get; init; }
	public Elastic.Clients.Elasticsearch.MachineLearning.Limits Limits { get; init; }
	public Elastic.Clients.Elasticsearch.MachineLearning.NativeCode NativeCode { get; init; }
	public bool UpgradeMode { get; init; }
}