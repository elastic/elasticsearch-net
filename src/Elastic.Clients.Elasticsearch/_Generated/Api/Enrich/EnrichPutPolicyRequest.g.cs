// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Enrich
{
	public sealed class EnrichPutPolicyRequestParameters : RequestParameters<EnrichPutPolicyRequestParameters>
	{
	}

	public partial class EnrichPutPolicyRequest : PlainRequestBase<EnrichPutPolicyRequestParameters>
	{
		public EnrichPutPolicyRequest(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichPutPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("geo_match")]
		public Elastic.Clients.Elasticsearch.Enrich.Policy? GeoMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("match")]
		public Elastic.Clients.Elasticsearch.Enrich.Policy? Match { get; set; }
	}

	public sealed partial class EnrichPutPolicyRequestDescriptor<TDocument> : RequestDescriptorBase<EnrichPutPolicyRequestDescriptor<TDocument>, EnrichPutPolicyRequestParameters>
	{
		internal EnrichPutPolicyRequestDescriptor(Action<EnrichPutPolicyRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		public EnrichPutPolicyRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal EnrichPutPolicyRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichPutPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		public EnrichPutPolicyRequestDescriptor<TDocument> Name(Elastic.Clients.Elasticsearch.Name name)
		{
			RouteValues.Required("name", name);
			return Self;
		}

		private Elastic.Clients.Elasticsearch.Enrich.Policy? GeoMatchValue { get; set; }

		private PolicyDescriptor<TDocument> GeoMatchDescriptor { get; set; }

		private Action<PolicyDescriptor<TDocument>> GeoMatchDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.Enrich.Policy? MatchValue { get; set; }

		private PolicyDescriptor<TDocument> MatchDescriptor { get; set; }

		private Action<PolicyDescriptor<TDocument>> MatchDescriptorAction { get; set; }

		public EnrichPutPolicyRequestDescriptor<TDocument> GeoMatch(Elastic.Clients.Elasticsearch.Enrich.Policy? geoMatch)
		{
			GeoMatchDescriptor = null;
			GeoMatchDescriptorAction = null;
			GeoMatchValue = geoMatch;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor<TDocument> GeoMatch(PolicyDescriptor<TDocument> descriptor)
		{
			GeoMatchValue = null;
			GeoMatchDescriptorAction = null;
			GeoMatchDescriptor = descriptor;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor<TDocument> GeoMatch(Action<PolicyDescriptor<TDocument>> configure)
		{
			GeoMatchValue = null;
			GeoMatchDescriptorAction = null;
			GeoMatchDescriptorAction = configure;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor<TDocument> Match(Elastic.Clients.Elasticsearch.Enrich.Policy? match)
		{
			MatchDescriptor = null;
			MatchDescriptorAction = null;
			MatchValue = match;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor<TDocument> Match(PolicyDescriptor<TDocument> descriptor)
		{
			MatchValue = null;
			MatchDescriptorAction = null;
			MatchDescriptor = descriptor;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor<TDocument> Match(Action<PolicyDescriptor<TDocument>> configure)
		{
			MatchValue = null;
			MatchDescriptorAction = null;
			MatchDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (GeoMatchDescriptor is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, GeoMatchDescriptor, options);
			}
			else if (GeoMatchDescriptorAction is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, new PolicyDescriptor<TDocument>(GeoMatchDescriptorAction), options);
			}
			else if (GeoMatchValue is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, GeoMatchValue, options);
			}

			if (MatchDescriptor is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, MatchDescriptor, options);
			}
			else if (MatchDescriptorAction is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, new PolicyDescriptor<TDocument>(MatchDescriptorAction), options);
			}
			else if (MatchValue is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, MatchValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class EnrichPutPolicyRequestDescriptor : RequestDescriptorBase<EnrichPutPolicyRequestDescriptor, EnrichPutPolicyRequestParameters>
	{
		internal EnrichPutPolicyRequestDescriptor(Action<EnrichPutPolicyRequestDescriptor> configure) => configure.Invoke(this);
		public EnrichPutPolicyRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal EnrichPutPolicyRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.EnrichPutPolicy;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		public EnrichPutPolicyRequestDescriptor Name(Elastic.Clients.Elasticsearch.Name name)
		{
			RouteValues.Required("name", name);
			return Self;
		}

		private Elastic.Clients.Elasticsearch.Enrich.Policy? GeoMatchValue { get; set; }

		private PolicyDescriptor GeoMatchDescriptor { get; set; }

		private Action<PolicyDescriptor> GeoMatchDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.Enrich.Policy? MatchValue { get; set; }

		private PolicyDescriptor MatchDescriptor { get; set; }

		private Action<PolicyDescriptor> MatchDescriptorAction { get; set; }

		public EnrichPutPolicyRequestDescriptor GeoMatch(Elastic.Clients.Elasticsearch.Enrich.Policy? geoMatch)
		{
			GeoMatchDescriptor = null;
			GeoMatchDescriptorAction = null;
			GeoMatchValue = geoMatch;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor GeoMatch(PolicyDescriptor descriptor)
		{
			GeoMatchValue = null;
			GeoMatchDescriptorAction = null;
			GeoMatchDescriptor = descriptor;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor GeoMatch(Action<PolicyDescriptor> configure)
		{
			GeoMatchValue = null;
			GeoMatchDescriptorAction = null;
			GeoMatchDescriptorAction = configure;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor Match(Elastic.Clients.Elasticsearch.Enrich.Policy? match)
		{
			MatchDescriptor = null;
			MatchDescriptorAction = null;
			MatchValue = match;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor Match(PolicyDescriptor descriptor)
		{
			MatchValue = null;
			MatchDescriptorAction = null;
			MatchDescriptor = descriptor;
			return Self;
		}

		public EnrichPutPolicyRequestDescriptor Match(Action<PolicyDescriptor> configure)
		{
			MatchValue = null;
			MatchDescriptorAction = null;
			MatchDescriptorAction = configure;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (GeoMatchDescriptor is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, GeoMatchDescriptor, options);
			}
			else if (GeoMatchDescriptorAction is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, new PolicyDescriptor(GeoMatchDescriptorAction), options);
			}
			else if (GeoMatchValue is not null)
			{
				writer.WritePropertyName("geo_match");
				JsonSerializer.Serialize(writer, GeoMatchValue, options);
			}

			if (MatchDescriptor is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, MatchDescriptor, options);
			}
			else if (MatchDescriptorAction is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, new PolicyDescriptor(MatchDescriptorAction), options);
			}
			else if (MatchValue is not null)
			{
				writer.WritePropertyName("match");
				JsonSerializer.Serialize(writer, MatchValue, options);
			}

			writer.WriteEndObject();
		}
	}
}