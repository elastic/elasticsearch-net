// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Ingest;

public sealed partial class PutIpLocationDatabaseRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// The period to wait for a connection to the master node.
	/// If no response is received before the timeout expires, the request fails and returns an error.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }

	/// <summary>
	/// <para>
	/// The period to wait for a response from all relevant nodes in the cluster after updating the cluster metadata.
	/// If no response is received before the timeout expires, the cluster metadata update still applies but the response indicates that it was not completely acknowledged.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
}

internal sealed partial class PutIpLocationDatabaseRequestConverter : System.Text.Json.Serialization.JsonConverter<PutIpLocationDatabaseRequest>
{
	public override PutIpLocationDatabaseRequest Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		return new PutIpLocationDatabaseRequest { Configuration = reader.ReadValue<Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration>(options, null) };
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, PutIpLocationDatabaseRequest value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteValue(options, value.Configuration, null);
	}
}

/// <summary>
/// <para>
/// Create or update an IP geolocation database configuration.
/// </para>
/// </summary>
[JsonConverter(typeof(PutIpLocationDatabaseRequestConverter))]
public sealed partial class PutIpLocationDatabaseRequest : PlainRequest<PutIpLocationDatabaseRequestParameters>
{
	public PutIpLocationDatabaseRequest(Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id))
	{
	}

	[JsonConstructor]
	internal PutIpLocationDatabaseRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestPutIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ingest.put_ip_location_database";

	/// <summary>
	/// <para>
	/// The database configuration identifier.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Id Id { get => P<Elastic.Clients.Elasticsearch.Id>("id"); set => PR("id", value); }

	/// <summary>
	/// <para>
	/// The period to wait for a connection to the master node.
	/// If no response is received before the timeout expires, the request fails and returns an error.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }

	/// <summary>
	/// <para>
	/// The period to wait for a response from all relevant nodes in the cluster after updating the cluster metadata.
	/// If no response is received before the timeout expires, the cluster metadata update still applies but the response indicates that it was not completely acknowledged.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? Timeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("timeout"); set => Q("timeout", value); }
	public Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration Configuration { get; set; }
}

/// <summary>
/// <para>
/// Create or update an IP geolocation database configuration.
/// </para>
/// </summary>
public sealed partial class PutIpLocationDatabaseRequestDescriptor<TDocument> : RequestDescriptor<PutIpLocationDatabaseRequestDescriptor<TDocument>, PutIpLocationDatabaseRequestParameters>
{
	internal PutIpLocationDatabaseRequestDescriptor(Action<PutIpLocationDatabaseRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
	public PutIpLocationDatabaseRequestDescriptor(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration configuration, Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id)) => ConfigurationValue = configuration;

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestPutIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ingest.put_ip_location_database";

	public PutIpLocationDatabaseRequestDescriptor<TDocument> MasterTimeout(Elastic.Clients.Elasticsearch.Duration? masterTimeout) => Qs("master_timeout", masterTimeout);
	public PutIpLocationDatabaseRequestDescriptor<TDocument> Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);

	public PutIpLocationDatabaseRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration ConfigurationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor ConfigurationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor> ConfigurationDescriptorAction { get; set; }

	public PutIpLocationDatabaseRequestDescriptor<TDocument> Configuration(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration configuration)
	{
		ConfigurationDescriptor = null;
		ConfigurationDescriptorAction = null;
		ConfigurationValue = configuration;
		return Self;
	}

	public PutIpLocationDatabaseRequestDescriptor<TDocument> Configuration(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor descriptor)
	{
		ConfigurationValue = null;
		ConfigurationDescriptorAction = null;
		ConfigurationDescriptor = descriptor;
		return Self;
	}

	public PutIpLocationDatabaseRequestDescriptor<TDocument> Configuration(Action<Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor> configure)
	{
		ConfigurationValue = null;
		ConfigurationDescriptor = null;
		ConfigurationDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ConfigurationValue, options);
	}
}

/// <summary>
/// <para>
/// Create or update an IP geolocation database configuration.
/// </para>
/// </summary>
public sealed partial class PutIpLocationDatabaseRequestDescriptor : RequestDescriptor<PutIpLocationDatabaseRequestDescriptor, PutIpLocationDatabaseRequestParameters>
{
	internal PutIpLocationDatabaseRequestDescriptor(Action<PutIpLocationDatabaseRequestDescriptor> configure) => configure.Invoke(this);
	public PutIpLocationDatabaseRequestDescriptor(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration configuration, Elastic.Clients.Elasticsearch.Id id) : base(r => r.Required("id", id)) => ConfigurationValue = configuration;

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestPutIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.PUT;

	internal override bool SupportsBody => true;

	internal override string OperationName => "ingest.put_ip_location_database";

	public PutIpLocationDatabaseRequestDescriptor MasterTimeout(Elastic.Clients.Elasticsearch.Duration? masterTimeout) => Qs("master_timeout", masterTimeout);
	public PutIpLocationDatabaseRequestDescriptor Timeout(Elastic.Clients.Elasticsearch.Duration? timeout) => Qs("timeout", timeout);

	public PutIpLocationDatabaseRequestDescriptor Id(Elastic.Clients.Elasticsearch.Id id)
	{
		RouteValues.Required("id", id);
		return Self;
	}

	private Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration ConfigurationValue { get; set; }
	private Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor ConfigurationDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor> ConfigurationDescriptorAction { get; set; }

	public PutIpLocationDatabaseRequestDescriptor Configuration(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfiguration configuration)
	{
		ConfigurationDescriptor = null;
		ConfigurationDescriptorAction = null;
		ConfigurationValue = configuration;
		return Self;
	}

	public PutIpLocationDatabaseRequestDescriptor Configuration(Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor descriptor)
	{
		ConfigurationValue = null;
		ConfigurationDescriptorAction = null;
		ConfigurationDescriptor = descriptor;
		return Self;
	}

	public PutIpLocationDatabaseRequestDescriptor Configuration(Action<Elastic.Clients.Elasticsearch.Ingest.DatabaseConfigurationDescriptor> configure)
	{
		ConfigurationValue = null;
		ConfigurationDescriptor = null;
		ConfigurationDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		JsonSerializer.Serialize(writer, ConfigurationValue, options);
	}
}