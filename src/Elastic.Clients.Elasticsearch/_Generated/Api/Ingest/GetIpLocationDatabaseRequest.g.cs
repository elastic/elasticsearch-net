// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Ingest;

public sealed partial class GetIpLocationDatabaseRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// The period to wait for a connection to the master node.
	/// If no response is received before the timeout expires, the request fails and returns an error.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }
}

/// <summary>
/// <para>
/// Get IP geolocation database configurations.
/// </para>
/// </summary>
public sealed partial class GetIpLocationDatabaseRequest : PlainRequest<GetIpLocationDatabaseRequestParameters>
{
	[JsonConstructor]
	public GetIpLocationDatabaseRequest()
	{
	}

	public GetIpLocationDatabaseRequest(Elastic.Clients.Elasticsearch.Ids? id) : base(r => r.Optional("id", id))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestGetIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ingest.get_ip_location_database";

	/// <summary>
	/// <para>
	/// Comma-separated list of database configuration IDs to retrieve.
	/// Wildcard (<c>*</c>) expressions are supported.
	/// To get all database configurations, omit this parameter or use <c>*</c>.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Ids? Id { get => P<Elastic.Clients.Elasticsearch.Ids?>("id"); set => PO("id", value); }

	/// <summary>
	/// <para>
	/// The period to wait for a connection to the master node.
	/// If no response is received before the timeout expires, the request fails and returns an error.
	/// A value of <c>-1</c> indicates that the request should never time out.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }
}

/// <summary>
/// <para>
/// Get IP geolocation database configurations.
/// </para>
/// </summary>
public sealed partial class GetIpLocationDatabaseRequestDescriptor<TDocument> : RequestDescriptor<GetIpLocationDatabaseRequestDescriptor<TDocument>, GetIpLocationDatabaseRequestParameters>
{
	internal GetIpLocationDatabaseRequestDescriptor(Action<GetIpLocationDatabaseRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public GetIpLocationDatabaseRequestDescriptor(Elastic.Clients.Elasticsearch.Ids? id) : base(r => r.Optional("id", id))
	{
	}

	public GetIpLocationDatabaseRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestGetIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ingest.get_ip_location_database";

	public GetIpLocationDatabaseRequestDescriptor<TDocument> MasterTimeout(Elastic.Clients.Elasticsearch.Duration? masterTimeout) => Qs("master_timeout", masterTimeout);

	public GetIpLocationDatabaseRequestDescriptor<TDocument> Id(Elastic.Clients.Elasticsearch.Ids? id)
	{
		RouteValues.Optional("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}

/// <summary>
/// <para>
/// Get IP geolocation database configurations.
/// </para>
/// </summary>
public sealed partial class GetIpLocationDatabaseRequestDescriptor : RequestDescriptor<GetIpLocationDatabaseRequestDescriptor, GetIpLocationDatabaseRequestParameters>
{
	internal GetIpLocationDatabaseRequestDescriptor(Action<GetIpLocationDatabaseRequestDescriptor> configure) => configure.Invoke(this);

	public GetIpLocationDatabaseRequestDescriptor(Elastic.Clients.Elasticsearch.Ids? id) : base(r => r.Optional("id", id))
	{
	}

	public GetIpLocationDatabaseRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.IngestGetIpLocationDatabase;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "ingest.get_ip_location_database";

	public GetIpLocationDatabaseRequestDescriptor MasterTimeout(Elastic.Clients.Elasticsearch.Duration? masterTimeout) => Qs("master_timeout", masterTimeout);

	public GetIpLocationDatabaseRequestDescriptor Id(Elastic.Clients.Elasticsearch.Ids? id)
	{
		RouteValues.Optional("id", id);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}