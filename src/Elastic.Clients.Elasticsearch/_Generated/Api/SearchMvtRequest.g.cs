// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch;

public sealed partial class SearchMvtRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Search a vector tile.
/// </para>
/// <para>
/// Search a vector tile for geospatial values.
/// Before using this API, you should be familiar with the Mapbox vector tile specification.
/// The API returns results as a binary mapbox vector tile.
/// </para>
/// <para>
/// Internally, Elasticsearch translates a vector tile search API request into a search containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>geo_bounding_box</c> query on the <c>&lt;field></c>. The query uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// A <c>geotile_grid</c> or <c>geohex_grid</c> aggregation on the <c>&lt;field></c>. The <c>grid_agg</c> parameter determines the aggregation type. The aggregation uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// Optionally, a <c>geo_bounds</c> aggregation on the <c>&lt;field></c>. The search only includes this aggregation if the <c>exact_bounds</c> parameter is <c>true</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// If the optional parameter <c>with_labels</c> is <c>true</c>, the internal search will include a dynamic runtime field that calls the <c>getLabelPosition</c> function of the geometry doc value. This enables the generation of new point features containing suggested geometry labels, so that, for example, multi-polygons will have only one label.
/// </para>
/// </item>
/// </list>
/// <para>
/// For example, Elasticsearch may translate a vector tile search API request with a <c>grid_agg</c> argument of <c>geotile</c> and an <c>exact_bounds</c> argument of <c>true</c> into the following search
/// </para>
/// <code>
/// GET my-index/_search
/// {
///   "size": 10000,
///   "query": {
///     "geo_bounding_box": {
///       "my-geo-field": {
///         "top_left": {
///           "lat": -40.979898069620134,
///           "lon": -45
///         },
///         "bottom_right": {
///           "lat": -66.51326044311186,
///           "lon": 0
///         }
///       }
///     }
///   },
///   "aggregations": {
///     "grid": {
///       "geotile_grid": {
///         "field": "my-geo-field",
///         "precision": 11,
///         "size": 65536,
///         "bounds": {
///           "top_left": {
///             "lat": -40.979898069620134,
///             "lon": -45
///           },
///           "bottom_right": {
///             "lat": -66.51326044311186,
///             "lon": 0
///           }
///         }
///       }
///     },
///     "bounds": {
///       "geo_bounds": {
///         "field": "my-geo-field",
///         "wrap_longitude": false
///       }
///     }
///   }
/// }
/// </code>
/// <para>
/// The API returns results as a binary Mapbox vector tile.
/// Mapbox vector tiles are encoded as Google Protobufs (PBF). By default, the tile contains three layers:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>hits</c> layer containing a feature for each <c>&lt;field></c> value matching the <c>geo_bounding_box</c> query.
/// </para>
/// </item>
/// <item>
/// <para>
/// An <c>aggs</c> layer containing a feature for each cell of the <c>geotile_grid</c> or <c>geohex_grid</c>. The layer only contains features for cells with matching data.
/// </para>
/// </item>
/// <item>
/// <para>
/// A meta layer containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A feature containing a bounding box. By default, this is the bounding box of the tile.
/// </para>
/// </item>
/// <item>
/// <para>
/// Value ranges for any sub-aggregations on the <c>geotile_grid</c> or <c>geohex_grid</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// Metadata for the search.
/// </para>
/// </item>
/// </list>
/// </item>
/// </list>
/// <para>
/// The API only returns features that can display at its zoom level.
/// For example, if a polygon feature has no area at its zoom level, the API omits it.
/// The API returns errors as UTF-8 encoded JSON.
/// </para>
/// <para>
/// IMPORTANT: You can specify several options for this API as either a query parameter or request body parameter.
/// If you specify both parameters, the query parameter takes precedence.
/// </para>
/// <para>
/// <strong>Grid precision for geotile</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geotile</c>, you can use cells in the <c>aggs</c> layer as tiles for lower zoom levels.
/// <c>grid_precision</c> represents the additional zoom levels available through these cells. The final precision is computed by as follows: <c>&lt;zoom> + grid_precision</c>.
/// For example, if <c>&lt;zoom></c> is 7 and <c>grid_precision</c> is 8, then the <c>geotile_grid</c> aggregation will use a precision of 15.
/// The maximum final precision is 29.
/// The <c>grid_precision</c> also determines the number of cells for the grid as follows: <c>(2^grid_precision) x (2^grid_precision)</c>.
/// For example, a value of 8 divides the tile into a grid of 256 x 256 cells.
/// The <c>aggs</c> layer only contains features for cells with matching data.
/// </para>
/// <para>
/// <strong>Grid precision for geohex</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geohex</c>, Elasticsearch uses <c>&lt;zoom></c> and <c>grid_precision</c> to calculate a final precision as follows: <c>&lt;zoom> + grid_precision</c>.
/// </para>
/// <para>
/// This precision determines the H3 resolution of the hexagonal cells produced by the <c>geohex</c> aggregation.
/// The following table maps the H3 resolution for each precision.
/// For example, if <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 3, the precision is 6.
/// At a precision of 6, hexagonal cells have an H3 resolution of 2.
/// If <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 4, the precision is 7.
/// At a precision of 7, hexagonal cells have an H3 resolution of 3.
/// </para>
/// <para>
/// | Precision | Unique tile bins | H3 resolution | Unique hex bins |	Ratio |
/// | --------- | ---------------- | ------------- | ----------------| ----- |
/// | 1  | 4                  | 0  | 122             | 30.5           |
/// | 2  | 16                 | 0  | 122             | 7.625          |
/// | 3  | 64                 | 1  | 842             | 13.15625       |
/// | 4  | 256                | 1  | 842             | 3.2890625      |
/// | 5  | 1024               | 2  | 5882            | 5.744140625    |
/// | 6  | 4096               | 2  | 5882            | 1.436035156    |
/// | 7  | 16384              | 3  | 41162           | 2.512329102    |
/// | 8  | 65536              | 3  | 41162           | 0.6280822754   |
/// | 9  | 262144             | 4  | 288122          | 1.099098206    |
/// | 10 | 1048576            | 4  | 288122          | 0.2747745514   |
/// | 11 | 4194304            | 5  | 2016842         | 0.4808526039   |
/// | 12 | 16777216           | 6  | 14117882        | 0.8414913416   |
/// | 13 | 67108864           | 6  | 14117882        | 0.2103728354   |
/// | 14 | 268435456          | 7  | 98825162        | 0.3681524172   |
/// | 15 | 1073741824         | 8  | 691776122       | 0.644266719    |
/// | 16 | 4294967296         | 8  | 691776122       | 0.1610666797   |
/// | 17 | 17179869184        | 9  | 4842432842      | 0.2818666889   |
/// | 18 | 68719476736        | 10 | 33897029882     | 0.4932667053   |
/// | 19 | 274877906944       | 11 | 237279209162    | 0.8632167343   |
/// | 20 | 1099511627776      | 11 | 237279209162    | 0.2158041836   |
/// | 21 | 4398046511104      | 12 | 1660954464122   | 0.3776573213   |
/// | 22 | 17592186044416     | 13 | 11626681248842  | 0.6609003122   |
/// | 23 | 70368744177664     | 13 | 11626681248842  | 0.165225078    |
/// | 24 | 281474976710656    | 14 | 81386768741882  | 0.2891438866   |
/// | 25 | 1125899906842620   | 15 | 569707381193162 | 0.5060018015   |
/// | 26 | 4503599627370500   | 15 | 569707381193162 | 0.1265004504   |
/// | 27 | 18014398509482000  | 15 | 569707381193162 | 0.03162511259  |
/// | 28 | 72057594037927900  | 15 | 569707381193162 | 0.007906278149 |
/// | 29 | 288230376151712000 | 15 | 569707381193162 | 0.001976569537 |
/// </para>
/// <para>
/// Hexagonal cells don't align perfectly on a vector tile.
/// Some cells may intersect more than one vector tile.
/// To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level.
/// Elasticsearch uses the H3 resolution that is closest to the corresponding geotile density.
/// </para>
/// </summary>
public sealed partial class SearchMvtRequest : PlainRequest<SearchMvtRequestParameters>
{
	public SearchMvtRequest(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y) : base(r => r.Required("index", indices).Required("field", field).Required("zoom", zoom).Required("x", x).Required("y", y))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceSearchMvt;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "search_mvt";

	/// <summary>
	/// <para>
	/// Sub-aggregations for the geotile_grid.
	/// </para>
	/// <para>
	/// It supports the following aggregation types:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>avg</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>boxplot</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>cardinality</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>extended stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>max</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>median absolute deviation</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>min</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile-rank</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>sum</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>value count</c>
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// The aggregation names can't start with <c>_mvt_</c>. The <c>_mvt_</c> prefix is reserved for internal aggregations.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("aggs")]
	public IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.Aggregation>? Aggs { get; set; }

	/// <summary>
	/// <para>
	/// The size, in pixels, of a clipping buffer outside the tile. This allows renderers
	/// to avoid outline artifacts from geometries that extend past the extent of the tile.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("buffer")]
	public int? Buffer { get; set; }

	/// <summary>
	/// <para>
	/// If <c>false</c>, the meta layer's feature is the bounding box of the tile.
	/// If <c>true</c>, the meta layer's feature is a bounding box resulting from a
	/// <c>geo_bounds</c> aggregation. The aggregation runs on &lt;field> values that intersect
	/// the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile with <c>wrap_longitude</c> set to <c>false</c>. The resulting
	/// bounding box may be larger than the vector tile.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("exact_bounds")]
	public bool? ExactBounds { get; set; }

	/// <summary>
	/// <para>
	/// The size, in pixels, of a side of the tile. Vector tiles are square with equal sides.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("extent")]
	public int? Extent { get; set; }

	/// <summary>
	/// <para>
	/// The fields to return in the <c>hits</c> layer.
	/// It supports wildcards (<c>*</c>).
	/// This parameter does not support fields with array values. Fields with array
	/// values may return inconsistent results.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("fields")]
	[JsonConverter(typeof(SingleOrManyFieldsConverter))]
	public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

	/// <summary>
	/// <para>
	/// The aggregation used to create a grid for the <c>field</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("grid_agg")]
	public Elastic.Clients.Elasticsearch.Core.SearchMvt.GridAggregationType? GridAgg { get; set; }

	/// <summary>
	/// <para>
	/// Additional zoom levels available through the aggs layer. For example, if <c>&lt;zoom></c> is <c>7</c>
	/// and <c>grid_precision</c> is <c>8</c>, you can zoom in up to level 15. Accepts 0-8. If 0, results
	/// don't include the aggs layer.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("grid_precision")]
	public int? GridPrecision { get; set; }

	/// <summary>
	/// <para>
	/// Determines the geometry type for features in the aggs layer. In the aggs layer,
	/// each feature represents a <c>geotile_grid</c> cell. If <c>grid, each feature is a polygon of the cells bounding box. If </c>point`, each feature is a Point that is the centroid
	/// of the cell.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("grid_type")]
	public Elastic.Clients.Elasticsearch.Core.SearchMvt.GridType? GridType { get; set; }

	/// <summary>
	/// <para>
	/// The query DSL used to filter documents for the search.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("query")]
	public Elastic.Clients.Elasticsearch.QueryDsl.Query? Query { get; set; }

	/// <summary>
	/// <para>
	/// Defines one or more runtime fields in the search request. These fields take
	/// precedence over mapped fields with the same name.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("runtime_mappings")]
	public IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeField>? RuntimeMappings { get; set; }

	/// <summary>
	/// <para>
	/// The maximum number of features to return in the hits layer. Accepts 0-10000.
	/// If 0, results don't include the hits layer.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("size")]
	public int? Size { get; set; }

	/// <summary>
	/// <para>
	/// Sort the features in the hits layer. By default, the API calculates a bounding
	/// box for each feature. It sorts features based on this box's diagonal length,
	/// from longest to shortest.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("sort")]
	[SingleOrManyCollectionConverter(typeof(Elastic.Clients.Elasticsearch.SortOptions))]
	public ICollection<Elastic.Clients.Elasticsearch.SortOptions>? Sort { get; set; }

	/// <summary>
	/// <para>
	/// The number of hits matching the query to count accurately. If <c>true</c>, the exact number
	/// of hits is returned at the cost of some performance. If <c>false</c>, the response does
	/// not include the total number of hits matching the query.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("track_total_hits")]
	public Elastic.Clients.Elasticsearch.Core.Search.TrackHits? TrackTotalHits { get; set; }

	/// <summary>
	/// <para>
	/// If <c>true</c>, the hits and aggs layers will contain additional point features representing
	/// suggested label positions for the original features.
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>Point</c> and <c>MultiPoint</c> features will have one of the points selected.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>Polygon</c> and <c>MultiPolygon</c> features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the sorted triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>LineString</c> features will likewise provide a roughly central point selected from the triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The aggregation results will provide one central point for each aggregation bucket.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// All attributes from the original features will also be copied to the new label features.
	/// In addition, the new features will be distinguishable using the tag <c>_mvt_label_position</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("with_labels")]
	public bool? WithLabels { get; set; }
}

/// <summary>
/// <para>
/// Search a vector tile.
/// </para>
/// <para>
/// Search a vector tile for geospatial values.
/// Before using this API, you should be familiar with the Mapbox vector tile specification.
/// The API returns results as a binary mapbox vector tile.
/// </para>
/// <para>
/// Internally, Elasticsearch translates a vector tile search API request into a search containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>geo_bounding_box</c> query on the <c>&lt;field></c>. The query uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// A <c>geotile_grid</c> or <c>geohex_grid</c> aggregation on the <c>&lt;field></c>. The <c>grid_agg</c> parameter determines the aggregation type. The aggregation uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// Optionally, a <c>geo_bounds</c> aggregation on the <c>&lt;field></c>. The search only includes this aggregation if the <c>exact_bounds</c> parameter is <c>true</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// If the optional parameter <c>with_labels</c> is <c>true</c>, the internal search will include a dynamic runtime field that calls the <c>getLabelPosition</c> function of the geometry doc value. This enables the generation of new point features containing suggested geometry labels, so that, for example, multi-polygons will have only one label.
/// </para>
/// </item>
/// </list>
/// <para>
/// For example, Elasticsearch may translate a vector tile search API request with a <c>grid_agg</c> argument of <c>geotile</c> and an <c>exact_bounds</c> argument of <c>true</c> into the following search
/// </para>
/// <code>
/// GET my-index/_search
/// {
///   "size": 10000,
///   "query": {
///     "geo_bounding_box": {
///       "my-geo-field": {
///         "top_left": {
///           "lat": -40.979898069620134,
///           "lon": -45
///         },
///         "bottom_right": {
///           "lat": -66.51326044311186,
///           "lon": 0
///         }
///       }
///     }
///   },
///   "aggregations": {
///     "grid": {
///       "geotile_grid": {
///         "field": "my-geo-field",
///         "precision": 11,
///         "size": 65536,
///         "bounds": {
///           "top_left": {
///             "lat": -40.979898069620134,
///             "lon": -45
///           },
///           "bottom_right": {
///             "lat": -66.51326044311186,
///             "lon": 0
///           }
///         }
///       }
///     },
///     "bounds": {
///       "geo_bounds": {
///         "field": "my-geo-field",
///         "wrap_longitude": false
///       }
///     }
///   }
/// }
/// </code>
/// <para>
/// The API returns results as a binary Mapbox vector tile.
/// Mapbox vector tiles are encoded as Google Protobufs (PBF). By default, the tile contains three layers:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>hits</c> layer containing a feature for each <c>&lt;field></c> value matching the <c>geo_bounding_box</c> query.
/// </para>
/// </item>
/// <item>
/// <para>
/// An <c>aggs</c> layer containing a feature for each cell of the <c>geotile_grid</c> or <c>geohex_grid</c>. The layer only contains features for cells with matching data.
/// </para>
/// </item>
/// <item>
/// <para>
/// A meta layer containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A feature containing a bounding box. By default, this is the bounding box of the tile.
/// </para>
/// </item>
/// <item>
/// <para>
/// Value ranges for any sub-aggregations on the <c>geotile_grid</c> or <c>geohex_grid</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// Metadata for the search.
/// </para>
/// </item>
/// </list>
/// </item>
/// </list>
/// <para>
/// The API only returns features that can display at its zoom level.
/// For example, if a polygon feature has no area at its zoom level, the API omits it.
/// The API returns errors as UTF-8 encoded JSON.
/// </para>
/// <para>
/// IMPORTANT: You can specify several options for this API as either a query parameter or request body parameter.
/// If you specify both parameters, the query parameter takes precedence.
/// </para>
/// <para>
/// <strong>Grid precision for geotile</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geotile</c>, you can use cells in the <c>aggs</c> layer as tiles for lower zoom levels.
/// <c>grid_precision</c> represents the additional zoom levels available through these cells. The final precision is computed by as follows: <c>&lt;zoom> + grid_precision</c>.
/// For example, if <c>&lt;zoom></c> is 7 and <c>grid_precision</c> is 8, then the <c>geotile_grid</c> aggregation will use a precision of 15.
/// The maximum final precision is 29.
/// The <c>grid_precision</c> also determines the number of cells for the grid as follows: <c>(2^grid_precision) x (2^grid_precision)</c>.
/// For example, a value of 8 divides the tile into a grid of 256 x 256 cells.
/// The <c>aggs</c> layer only contains features for cells with matching data.
/// </para>
/// <para>
/// <strong>Grid precision for geohex</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geohex</c>, Elasticsearch uses <c>&lt;zoom></c> and <c>grid_precision</c> to calculate a final precision as follows: <c>&lt;zoom> + grid_precision</c>.
/// </para>
/// <para>
/// This precision determines the H3 resolution of the hexagonal cells produced by the <c>geohex</c> aggregation.
/// The following table maps the H3 resolution for each precision.
/// For example, if <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 3, the precision is 6.
/// At a precision of 6, hexagonal cells have an H3 resolution of 2.
/// If <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 4, the precision is 7.
/// At a precision of 7, hexagonal cells have an H3 resolution of 3.
/// </para>
/// <para>
/// | Precision | Unique tile bins | H3 resolution | Unique hex bins |	Ratio |
/// | --------- | ---------------- | ------------- | ----------------| ----- |
/// | 1  | 4                  | 0  | 122             | 30.5           |
/// | 2  | 16                 | 0  | 122             | 7.625          |
/// | 3  | 64                 | 1  | 842             | 13.15625       |
/// | 4  | 256                | 1  | 842             | 3.2890625      |
/// | 5  | 1024               | 2  | 5882            | 5.744140625    |
/// | 6  | 4096               | 2  | 5882            | 1.436035156    |
/// | 7  | 16384              | 3  | 41162           | 2.512329102    |
/// | 8  | 65536              | 3  | 41162           | 0.6280822754   |
/// | 9  | 262144             | 4  | 288122          | 1.099098206    |
/// | 10 | 1048576            | 4  | 288122          | 0.2747745514   |
/// | 11 | 4194304            | 5  | 2016842         | 0.4808526039   |
/// | 12 | 16777216           | 6  | 14117882        | 0.8414913416   |
/// | 13 | 67108864           | 6  | 14117882        | 0.2103728354   |
/// | 14 | 268435456          | 7  | 98825162        | 0.3681524172   |
/// | 15 | 1073741824         | 8  | 691776122       | 0.644266719    |
/// | 16 | 4294967296         | 8  | 691776122       | 0.1610666797   |
/// | 17 | 17179869184        | 9  | 4842432842      | 0.2818666889   |
/// | 18 | 68719476736        | 10 | 33897029882     | 0.4932667053   |
/// | 19 | 274877906944       | 11 | 237279209162    | 0.8632167343   |
/// | 20 | 1099511627776      | 11 | 237279209162    | 0.2158041836   |
/// | 21 | 4398046511104      | 12 | 1660954464122   | 0.3776573213   |
/// | 22 | 17592186044416     | 13 | 11626681248842  | 0.6609003122   |
/// | 23 | 70368744177664     | 13 | 11626681248842  | 0.165225078    |
/// | 24 | 281474976710656    | 14 | 81386768741882  | 0.2891438866   |
/// | 25 | 1125899906842620   | 15 | 569707381193162 | 0.5060018015   |
/// | 26 | 4503599627370500   | 15 | 569707381193162 | 0.1265004504   |
/// | 27 | 18014398509482000  | 15 | 569707381193162 | 0.03162511259  |
/// | 28 | 72057594037927900  | 15 | 569707381193162 | 0.007906278149 |
/// | 29 | 288230376151712000 | 15 | 569707381193162 | 0.001976569537 |
/// </para>
/// <para>
/// Hexagonal cells don't align perfectly on a vector tile.
/// Some cells may intersect more than one vector tile.
/// To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level.
/// Elasticsearch uses the H3 resolution that is closest to the corresponding geotile density.
/// </para>
/// </summary>
public sealed partial class SearchMvtRequestDescriptor<TDocument> : RequestDescriptor<SearchMvtRequestDescriptor<TDocument>, SearchMvtRequestParameters>
{
	internal SearchMvtRequestDescriptor(Action<SearchMvtRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public SearchMvtRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y) : base(r => r.Required("index", indices).Required("field", field).Required("zoom", zoom).Required("x", x).Required("y", y))
	{
	}

	public SearchMvtRequestDescriptor(Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y) : this(typeof(TDocument), field, zoom, x, y)
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceSearchMvt;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "search_mvt";

	public SearchMvtRequestDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field field)
	{
		RouteValues.Required("field", field);
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> x(int x)
	{
		RouteValues.Required("x", x);
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> y(int y)
	{
		RouteValues.Required("y", y);
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Zoom(int zoom)
	{
		RouteValues.Required("zoom", zoom);
		return Self;
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>> AggsValue { get; set; }
	private int? BufferValue { get; set; }
	private bool? ExactBoundsValue { get; set; }
	private int? ExtentValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.SearchMvt.GridAggregationType? GridAggValue { get; set; }
	private int? GridPrecisionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.SearchMvt.GridType? GridTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.Query? QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> QueryDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> QueryDescriptorAction { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>> RuntimeMappingsValue { get; set; }
	private int? SizeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.SortOptions>? SortValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument> SortDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>> SortDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>>[] SortDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.TrackHits? TrackTotalHitsValue { get; set; }
	private bool? WithLabelsValue { get; set; }

	/// <summary>
	/// <para>
	/// Sub-aggregations for the geotile_grid.
	/// </para>
	/// <para>
	/// It supports the following aggregation types:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>avg</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>boxplot</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>cardinality</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>extended stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>max</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>median absolute deviation</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>min</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile-rank</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>sum</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>value count</c>
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// The aggregation names can't start with <c>_mvt_</c>. The <c>_mvt_</c> prefix is reserved for internal aggregations.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Aggs(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>> selector)
	{
		AggsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor<TDocument>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The size, in pixels, of a clipping buffer outside the tile. This allows renderers
	/// to avoid outline artifacts from geometries that extend past the extent of the tile.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Buffer(int? buffer)
	{
		BufferValue = buffer;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>false</c>, the meta layer's feature is the bounding box of the tile.
	/// If <c>true</c>, the meta layer's feature is a bounding box resulting from a
	/// <c>geo_bounds</c> aggregation. The aggregation runs on &lt;field> values that intersect
	/// the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile with <c>wrap_longitude</c> set to <c>false</c>. The resulting
	/// bounding box may be larger than the vector tile.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> ExactBounds(bool? exactBounds = true)
	{
		ExactBoundsValue = exactBounds;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The size, in pixels, of a side of the tile. Vector tiles are square with equal sides.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Extent(int? extent)
	{
		ExtentValue = extent;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The fields to return in the <c>hits</c> layer.
	/// It supports wildcards (<c>*</c>).
	/// This parameter does not support fields with array values. Fields with array
	/// values may return inconsistent results.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Fields? fields)
	{
		FieldsValue = fields;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The aggregation used to create a grid for the <c>field</c>.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> GridAgg(Elastic.Clients.Elasticsearch.Core.SearchMvt.GridAggregationType? gridAgg)
	{
		GridAggValue = gridAgg;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Additional zoom levels available through the aggs layer. For example, if <c>&lt;zoom></c> is <c>7</c>
	/// and <c>grid_precision</c> is <c>8</c>, you can zoom in up to level 15. Accepts 0-8. If 0, results
	/// don't include the aggs layer.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> GridPrecision(int? gridPrecision)
	{
		GridPrecisionValue = gridPrecision;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Determines the geometry type for features in the aggs layer. In the aggs layer,
	/// each feature represents a <c>geotile_grid</c> cell. If <c>grid, each feature is a polygon of the cells bounding box. If </c>point`, each feature is a Point that is the centroid
	/// of the cell.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> GridType(Elastic.Clients.Elasticsearch.Core.SearchMvt.GridType? gridType)
	{
		GridTypeValue = gridType;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The query DSL used to filter documents for the search.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? query)
	{
		QueryDescriptor = null;
		QueryDescriptorAction = null;
		QueryValue = query;
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument> descriptor)
	{
		QueryValue = null;
		QueryDescriptorAction = null;
		QueryDescriptor = descriptor;
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Query(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>> configure)
	{
		QueryValue = null;
		QueryDescriptor = null;
		QueryDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines one or more runtime fields in the search request. These fields take
	/// precedence over mapped fields with the same name.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> RuntimeMappings(Func<FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>, FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>> selector)
	{
		RuntimeMappingsValue = selector?.Invoke(new FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor<TDocument>>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The maximum number of features to return in the hits layer. Accepts 0-10000.
	/// If 0, results don't include the hits layer.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Sort the features in the hits layer. By default, the API calculates a bounding
	/// box for each feature. It sorts features based on this box's diagonal length,
	/// from longest to shortest.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> Sort(ICollection<Elastic.Clients.Elasticsearch.SortOptions>? sort)
	{
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortDescriptorActions = null;
		SortValue = sort;
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Sort(Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument> descriptor)
	{
		SortValue = null;
		SortDescriptorAction = null;
		SortDescriptorActions = null;
		SortDescriptor = descriptor;
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Sort(Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>> configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorActions = null;
		SortDescriptorAction = configure;
		return Self;
	}

	public SearchMvtRequestDescriptor<TDocument> Sort(params Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>>[] configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of hits matching the query to count accurately. If <c>true</c>, the exact number
	/// of hits is returned at the cost of some performance. If <c>false</c>, the response does
	/// not include the total number of hits matching the query.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> TrackTotalHits(Elastic.Clients.Elasticsearch.Core.Search.TrackHits? trackTotalHits)
	{
		TrackTotalHitsValue = trackTotalHits;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the hits and aggs layers will contain additional point features representing
	/// suggested label positions for the original features.
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>Point</c> and <c>MultiPoint</c> features will have one of the points selected.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>Polygon</c> and <c>MultiPolygon</c> features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the sorted triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>LineString</c> features will likewise provide a roughly central point selected from the triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The aggregation results will provide one central point for each aggregation bucket.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// All attributes from the original features will also be copied to the new label features.
	/// In addition, the new features will be distinguishable using the tag <c>_mvt_label_position</c>.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor<TDocument> WithLabels(bool? withLabels = true)
	{
		WithLabelsValue = withLabels;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggsValue is not null)
		{
			writer.WritePropertyName("aggs");
			JsonSerializer.Serialize(writer, AggsValue, options);
		}

		if (BufferValue.HasValue)
		{
			writer.WritePropertyName("buffer");
			writer.WriteNumberValue(BufferValue.Value);
		}

		if (ExactBoundsValue.HasValue)
		{
			writer.WritePropertyName("exact_bounds");
			writer.WriteBooleanValue(ExactBoundsValue.Value);
		}

		if (ExtentValue.HasValue)
		{
			writer.WritePropertyName("extent");
			writer.WriteNumberValue(ExtentValue.Value);
		}

		if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
		}

		if (GridAggValue is not null)
		{
			writer.WritePropertyName("grid_agg");
			JsonSerializer.Serialize(writer, GridAggValue, options);
		}

		if (GridPrecisionValue.HasValue)
		{
			writer.WritePropertyName("grid_precision");
			writer.WriteNumberValue(GridPrecisionValue.Value);
		}

		if (GridTypeValue is not null)
		{
			writer.WritePropertyName("grid_type");
			JsonSerializer.Serialize(writer, GridTypeValue, options);
		}

		if (QueryDescriptor is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryDescriptor, options);
		}
		else if (QueryDescriptorAction is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor<TDocument>(QueryDescriptorAction), options);
		}
		else if (QueryValue is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryValue, options);
		}

		if (RuntimeMappingsValue is not null)
		{
			writer.WritePropertyName("runtime_mappings");
			JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SortDescriptor is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortDescriptor, options);
		}
		else if (SortDescriptorAction is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>(SortDescriptorAction), options);
		}
		else if (SortDescriptorActions is not null)
		{
			writer.WritePropertyName("sort");
			if (SortDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in SortDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.SortOptionsDescriptor<TDocument>(action), options);
			}

			if (SortDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (SortValue is not null)
		{
			writer.WritePropertyName("sort");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.SortOptions>(SortValue, writer, options);
		}

		if (TrackTotalHitsValue is not null)
		{
			writer.WritePropertyName("track_total_hits");
			JsonSerializer.Serialize(writer, TrackTotalHitsValue, options);
		}

		if (WithLabelsValue.HasValue)
		{
			writer.WritePropertyName("with_labels");
			writer.WriteBooleanValue(WithLabelsValue.Value);
		}

		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// Search a vector tile.
/// </para>
/// <para>
/// Search a vector tile for geospatial values.
/// Before using this API, you should be familiar with the Mapbox vector tile specification.
/// The API returns results as a binary mapbox vector tile.
/// </para>
/// <para>
/// Internally, Elasticsearch translates a vector tile search API request into a search containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>geo_bounding_box</c> query on the <c>&lt;field></c>. The query uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// A <c>geotile_grid</c> or <c>geohex_grid</c> aggregation on the <c>&lt;field></c>. The <c>grid_agg</c> parameter determines the aggregation type. The aggregation uses the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile as a bounding box.
/// </para>
/// </item>
/// <item>
/// <para>
/// Optionally, a <c>geo_bounds</c> aggregation on the <c>&lt;field></c>. The search only includes this aggregation if the <c>exact_bounds</c> parameter is <c>true</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// If the optional parameter <c>with_labels</c> is <c>true</c>, the internal search will include a dynamic runtime field that calls the <c>getLabelPosition</c> function of the geometry doc value. This enables the generation of new point features containing suggested geometry labels, so that, for example, multi-polygons will have only one label.
/// </para>
/// </item>
/// </list>
/// <para>
/// For example, Elasticsearch may translate a vector tile search API request with a <c>grid_agg</c> argument of <c>geotile</c> and an <c>exact_bounds</c> argument of <c>true</c> into the following search
/// </para>
/// <code>
/// GET my-index/_search
/// {
///   "size": 10000,
///   "query": {
///     "geo_bounding_box": {
///       "my-geo-field": {
///         "top_left": {
///           "lat": -40.979898069620134,
///           "lon": -45
///         },
///         "bottom_right": {
///           "lat": -66.51326044311186,
///           "lon": 0
///         }
///       }
///     }
///   },
///   "aggregations": {
///     "grid": {
///       "geotile_grid": {
///         "field": "my-geo-field",
///         "precision": 11,
///         "size": 65536,
///         "bounds": {
///           "top_left": {
///             "lat": -40.979898069620134,
///             "lon": -45
///           },
///           "bottom_right": {
///             "lat": -66.51326044311186,
///             "lon": 0
///           }
///         }
///       }
///     },
///     "bounds": {
///       "geo_bounds": {
///         "field": "my-geo-field",
///         "wrap_longitude": false
///       }
///     }
///   }
/// }
/// </code>
/// <para>
/// The API returns results as a binary Mapbox vector tile.
/// Mapbox vector tiles are encoded as Google Protobufs (PBF). By default, the tile contains three layers:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A <c>hits</c> layer containing a feature for each <c>&lt;field></c> value matching the <c>geo_bounding_box</c> query.
/// </para>
/// </item>
/// <item>
/// <para>
/// An <c>aggs</c> layer containing a feature for each cell of the <c>geotile_grid</c> or <c>geohex_grid</c>. The layer only contains features for cells with matching data.
/// </para>
/// </item>
/// <item>
/// <para>
/// A meta layer containing:
/// </para>
/// <list type="bullet">
/// <item>
/// <para>
/// A feature containing a bounding box. By default, this is the bounding box of the tile.
/// </para>
/// </item>
/// <item>
/// <para>
/// Value ranges for any sub-aggregations on the <c>geotile_grid</c> or <c>geohex_grid</c>.
/// </para>
/// </item>
/// <item>
/// <para>
/// Metadata for the search.
/// </para>
/// </item>
/// </list>
/// </item>
/// </list>
/// <para>
/// The API only returns features that can display at its zoom level.
/// For example, if a polygon feature has no area at its zoom level, the API omits it.
/// The API returns errors as UTF-8 encoded JSON.
/// </para>
/// <para>
/// IMPORTANT: You can specify several options for this API as either a query parameter or request body parameter.
/// If you specify both parameters, the query parameter takes precedence.
/// </para>
/// <para>
/// <strong>Grid precision for geotile</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geotile</c>, you can use cells in the <c>aggs</c> layer as tiles for lower zoom levels.
/// <c>grid_precision</c> represents the additional zoom levels available through these cells. The final precision is computed by as follows: <c>&lt;zoom> + grid_precision</c>.
/// For example, if <c>&lt;zoom></c> is 7 and <c>grid_precision</c> is 8, then the <c>geotile_grid</c> aggregation will use a precision of 15.
/// The maximum final precision is 29.
/// The <c>grid_precision</c> also determines the number of cells for the grid as follows: <c>(2^grid_precision) x (2^grid_precision)</c>.
/// For example, a value of 8 divides the tile into a grid of 256 x 256 cells.
/// The <c>aggs</c> layer only contains features for cells with matching data.
/// </para>
/// <para>
/// <strong>Grid precision for geohex</strong>
/// </para>
/// <para>
/// For a <c>grid_agg</c> of <c>geohex</c>, Elasticsearch uses <c>&lt;zoom></c> and <c>grid_precision</c> to calculate a final precision as follows: <c>&lt;zoom> + grid_precision</c>.
/// </para>
/// <para>
/// This precision determines the H3 resolution of the hexagonal cells produced by the <c>geohex</c> aggregation.
/// The following table maps the H3 resolution for each precision.
/// For example, if <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 3, the precision is 6.
/// At a precision of 6, hexagonal cells have an H3 resolution of 2.
/// If <c>&lt;zoom></c> is 3 and <c>grid_precision</c> is 4, the precision is 7.
/// At a precision of 7, hexagonal cells have an H3 resolution of 3.
/// </para>
/// <para>
/// | Precision | Unique tile bins | H3 resolution | Unique hex bins |	Ratio |
/// | --------- | ---------------- | ------------- | ----------------| ----- |
/// | 1  | 4                  | 0  | 122             | 30.5           |
/// | 2  | 16                 | 0  | 122             | 7.625          |
/// | 3  | 64                 | 1  | 842             | 13.15625       |
/// | 4  | 256                | 1  | 842             | 3.2890625      |
/// | 5  | 1024               | 2  | 5882            | 5.744140625    |
/// | 6  | 4096               | 2  | 5882            | 1.436035156    |
/// | 7  | 16384              | 3  | 41162           | 2.512329102    |
/// | 8  | 65536              | 3  | 41162           | 0.6280822754   |
/// | 9  | 262144             | 4  | 288122          | 1.099098206    |
/// | 10 | 1048576            | 4  | 288122          | 0.2747745514   |
/// | 11 | 4194304            | 5  | 2016842         | 0.4808526039   |
/// | 12 | 16777216           | 6  | 14117882        | 0.8414913416   |
/// | 13 | 67108864           | 6  | 14117882        | 0.2103728354   |
/// | 14 | 268435456          | 7  | 98825162        | 0.3681524172   |
/// | 15 | 1073741824         | 8  | 691776122       | 0.644266719    |
/// | 16 | 4294967296         | 8  | 691776122       | 0.1610666797   |
/// | 17 | 17179869184        | 9  | 4842432842      | 0.2818666889   |
/// | 18 | 68719476736        | 10 | 33897029882     | 0.4932667053   |
/// | 19 | 274877906944       | 11 | 237279209162    | 0.8632167343   |
/// | 20 | 1099511627776      | 11 | 237279209162    | 0.2158041836   |
/// | 21 | 4398046511104      | 12 | 1660954464122   | 0.3776573213   |
/// | 22 | 17592186044416     | 13 | 11626681248842  | 0.6609003122   |
/// | 23 | 70368744177664     | 13 | 11626681248842  | 0.165225078    |
/// | 24 | 281474976710656    | 14 | 81386768741882  | 0.2891438866   |
/// | 25 | 1125899906842620   | 15 | 569707381193162 | 0.5060018015   |
/// | 26 | 4503599627370500   | 15 | 569707381193162 | 0.1265004504   |
/// | 27 | 18014398509482000  | 15 | 569707381193162 | 0.03162511259  |
/// | 28 | 72057594037927900  | 15 | 569707381193162 | 0.007906278149 |
/// | 29 | 288230376151712000 | 15 | 569707381193162 | 0.001976569537 |
/// </para>
/// <para>
/// Hexagonal cells don't align perfectly on a vector tile.
/// Some cells may intersect more than one vector tile.
/// To compute the H3 resolution for each precision, Elasticsearch compares the average density of hexagonal bins at each resolution with the average density of tile bins at each zoom level.
/// Elasticsearch uses the H3 resolution that is closest to the corresponding geotile density.
/// </para>
/// </summary>
public sealed partial class SearchMvtRequestDescriptor : RequestDescriptor<SearchMvtRequestDescriptor, SearchMvtRequestParameters>
{
	internal SearchMvtRequestDescriptor(Action<SearchMvtRequestDescriptor> configure) => configure.Invoke(this);

	public SearchMvtRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y) : base(r => r.Required("index", indices).Required("field", field).Required("zoom", zoom).Required("x", x).Required("y", y))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NoNamespaceSearchMvt;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "search_mvt";

	public SearchMvtRequestDescriptor Field(Elastic.Clients.Elasticsearch.Field field)
	{
		RouteValues.Required("field", field);
		return Self;
	}

	public SearchMvtRequestDescriptor Indices(Elastic.Clients.Elasticsearch.Indices indices)
	{
		RouteValues.Required("index", indices);
		return Self;
	}

	public SearchMvtRequestDescriptor x(int x)
	{
		RouteValues.Required("x", x);
		return Self;
	}

	public SearchMvtRequestDescriptor y(int y)
	{
		RouteValues.Required("y", y);
		return Self;
	}

	public SearchMvtRequestDescriptor Zoom(int zoom)
	{
		RouteValues.Required("zoom", zoom);
		return Self;
	}

	private IDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor> AggsValue { get; set; }
	private int? BufferValue { get; set; }
	private bool? ExactBoundsValue { get; set; }
	private int? ExtentValue { get; set; }
	private Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.SearchMvt.GridAggregationType? GridAggValue { get; set; }
	private int? GridPrecisionValue { get; set; }
	private Elastic.Clients.Elasticsearch.Core.SearchMvt.GridType? GridTypeValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.Query? QueryValue { get; set; }
	private Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor QueryDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> QueryDescriptorAction { get; set; }
	private IDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor> RuntimeMappingsValue { get; set; }
	private int? SizeValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.SortOptions>? SortValue { get; set; }
	private Elastic.Clients.Elasticsearch.SortOptionsDescriptor SortDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor> SortDescriptorAction { get; set; }
	private Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor>[] SortDescriptorActions { get; set; }
	private Elastic.Clients.Elasticsearch.Core.Search.TrackHits? TrackTotalHitsValue { get; set; }
	private bool? WithLabelsValue { get; set; }

	/// <summary>
	/// <para>
	/// Sub-aggregations for the geotile_grid.
	/// </para>
	/// <para>
	/// It supports the following aggregation types:
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>avg</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>boxplot</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>cardinality</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>extended stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>max</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>median absolute deviation</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>min</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>percentile-rank</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>stats</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>sum</c>
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>value count</c>
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// The aggregation names can't start with <c>_mvt_</c>. The <c>_mvt_</c> prefix is reserved for internal aggregations.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Aggs(Func<FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>, FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>> selector)
	{
		AggsValue = selector?.Invoke(new FluentDescriptorDictionary<string, Elastic.Clients.Elasticsearch.Aggregations.AggregationDescriptor>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The size, in pixels, of a clipping buffer outside the tile. This allows renderers
	/// to avoid outline artifacts from geometries that extend past the extent of the tile.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Buffer(int? buffer)
	{
		BufferValue = buffer;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>false</c>, the meta layer's feature is the bounding box of the tile.
	/// If <c>true</c>, the meta layer's feature is a bounding box resulting from a
	/// <c>geo_bounds</c> aggregation. The aggregation runs on &lt;field> values that intersect
	/// the <c>&lt;zoom>/&lt;x>/&lt;y></c> tile with <c>wrap_longitude</c> set to <c>false</c>. The resulting
	/// bounding box may be larger than the vector tile.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor ExactBounds(bool? exactBounds = true)
	{
		ExactBoundsValue = exactBounds;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The size, in pixels, of a side of the tile. Vector tiles are square with equal sides.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Extent(int? extent)
	{
		ExtentValue = extent;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The fields to return in the <c>hits</c> layer.
	/// It supports wildcards (<c>*</c>).
	/// This parameter does not support fields with array values. Fields with array
	/// values may return inconsistent results.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Fields(Elastic.Clients.Elasticsearch.Fields? fields)
	{
		FieldsValue = fields;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The aggregation used to create a grid for the <c>field</c>.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor GridAgg(Elastic.Clients.Elasticsearch.Core.SearchMvt.GridAggregationType? gridAgg)
	{
		GridAggValue = gridAgg;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Additional zoom levels available through the aggs layer. For example, if <c>&lt;zoom></c> is <c>7</c>
	/// and <c>grid_precision</c> is <c>8</c>, you can zoom in up to level 15. Accepts 0-8. If 0, results
	/// don't include the aggs layer.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor GridPrecision(int? gridPrecision)
	{
		GridPrecisionValue = gridPrecision;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Determines the geometry type for features in the aggs layer. In the aggs layer,
	/// each feature represents a <c>geotile_grid</c> cell. If <c>grid, each feature is a polygon of the cells bounding box. If </c>point`, each feature is a Point that is the centroid
	/// of the cell.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor GridType(Elastic.Clients.Elasticsearch.Core.SearchMvt.GridType? gridType)
	{
		GridTypeValue = gridType;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The query DSL used to filter documents for the search.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.Query? query)
	{
		QueryDescriptor = null;
		QueryDescriptorAction = null;
		QueryValue = query;
		return Self;
	}

	public SearchMvtRequestDescriptor Query(Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor descriptor)
	{
		QueryValue = null;
		QueryDescriptorAction = null;
		QueryDescriptor = descriptor;
		return Self;
	}

	public SearchMvtRequestDescriptor Query(Action<Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor> configure)
	{
		QueryValue = null;
		QueryDescriptor = null;
		QueryDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Defines one or more runtime fields in the search request. These fields take
	/// precedence over mapped fields with the same name.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor RuntimeMappings(Func<FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>, FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>> selector)
	{
		RuntimeMappingsValue = selector?.Invoke(new FluentDescriptorDictionary<Elastic.Clients.Elasticsearch.Field, Elastic.Clients.Elasticsearch.Mapping.RuntimeFieldDescriptor>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The maximum number of features to return in the hits layer. Accepts 0-10000.
	/// If 0, results don't include the hits layer.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Sort the features in the hits layer. By default, the API calculates a bounding
	/// box for each feature. It sorts features based on this box's diagonal length,
	/// from longest to shortest.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor Sort(ICollection<Elastic.Clients.Elasticsearch.SortOptions>? sort)
	{
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortDescriptorActions = null;
		SortValue = sort;
		return Self;
	}

	public SearchMvtRequestDescriptor Sort(Elastic.Clients.Elasticsearch.SortOptionsDescriptor descriptor)
	{
		SortValue = null;
		SortDescriptorAction = null;
		SortDescriptorActions = null;
		SortDescriptor = descriptor;
		return Self;
	}

	public SearchMvtRequestDescriptor Sort(Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor> configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorActions = null;
		SortDescriptorAction = configure;
		return Self;
	}

	public SearchMvtRequestDescriptor Sort(params Action<Elastic.Clients.Elasticsearch.SortOptionsDescriptor>[] configure)
	{
		SortValue = null;
		SortDescriptor = null;
		SortDescriptorAction = null;
		SortDescriptorActions = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The number of hits matching the query to count accurately. If <c>true</c>, the exact number
	/// of hits is returned at the cost of some performance. If <c>false</c>, the response does
	/// not include the total number of hits matching the query.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor TrackTotalHits(Elastic.Clients.Elasticsearch.Core.Search.TrackHits? trackTotalHits)
	{
		TrackTotalHitsValue = trackTotalHits;
		return Self;
	}

	/// <summary>
	/// <para>
	/// If <c>true</c>, the hits and aggs layers will contain additional point features representing
	/// suggested label positions for the original features.
	/// </para>
	/// <list type="bullet">
	/// <item>
	/// <para>
	/// <c>Point</c> and <c>MultiPoint</c> features will have one of the points selected.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>Polygon</c> and <c>MultiPolygon</c> features will have a single point generated, either the centroid, if it is within the polygon, or another point within the polygon selected from the sorted triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// <c>LineString</c> features will likewise provide a roughly central point selected from the triangle-tree.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// The aggregation results will provide one central point for each aggregation bucket.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// All attributes from the original features will also be copied to the new label features.
	/// In addition, the new features will be distinguishable using the tag <c>_mvt_label_position</c>.
	/// </para>
	/// </summary>
	public SearchMvtRequestDescriptor WithLabels(bool? withLabels = true)
	{
		WithLabelsValue = withLabels;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AggsValue is not null)
		{
			writer.WritePropertyName("aggs");
			JsonSerializer.Serialize(writer, AggsValue, options);
		}

		if (BufferValue.HasValue)
		{
			writer.WritePropertyName("buffer");
			writer.WriteNumberValue(BufferValue.Value);
		}

		if (ExactBoundsValue.HasValue)
		{
			writer.WritePropertyName("exact_bounds");
			writer.WriteBooleanValue(ExactBoundsValue.Value);
		}

		if (ExtentValue.HasValue)
		{
			writer.WritePropertyName("extent");
			writer.WriteNumberValue(ExtentValue.Value);
		}

		if (FieldsValue is not null)
		{
			writer.WritePropertyName("fields");
			JsonSerializer.Serialize(writer, FieldsValue, options);
		}

		if (GridAggValue is not null)
		{
			writer.WritePropertyName("grid_agg");
			JsonSerializer.Serialize(writer, GridAggValue, options);
		}

		if (GridPrecisionValue.HasValue)
		{
			writer.WritePropertyName("grid_precision");
			writer.WriteNumberValue(GridPrecisionValue.Value);
		}

		if (GridTypeValue is not null)
		{
			writer.WritePropertyName("grid_type");
			JsonSerializer.Serialize(writer, GridTypeValue, options);
		}

		if (QueryDescriptor is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryDescriptor, options);
		}
		else if (QueryDescriptorAction is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.QueryDsl.QueryDescriptor(QueryDescriptorAction), options);
		}
		else if (QueryValue is not null)
		{
			writer.WritePropertyName("query");
			JsonSerializer.Serialize(writer, QueryValue, options);
		}

		if (RuntimeMappingsValue is not null)
		{
			writer.WritePropertyName("runtime_mappings");
			JsonSerializer.Serialize(writer, RuntimeMappingsValue, options);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		if (SortDescriptor is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, SortDescriptor, options);
		}
		else if (SortDescriptorAction is not null)
		{
			writer.WritePropertyName("sort");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.SortOptionsDescriptor(SortDescriptorAction), options);
		}
		else if (SortDescriptorActions is not null)
		{
			writer.WritePropertyName("sort");
			if (SortDescriptorActions.Length != 1)
				writer.WriteStartArray();
			foreach (var action in SortDescriptorActions)
			{
				JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.SortOptionsDescriptor(action), options);
			}

			if (SortDescriptorActions.Length != 1)
				writer.WriteEndArray();
		}
		else if (SortValue is not null)
		{
			writer.WritePropertyName("sort");
			SingleOrManySerializationHelper.Serialize<Elastic.Clients.Elasticsearch.SortOptions>(SortValue, writer, options);
		}

		if (TrackTotalHitsValue is not null)
		{
			writer.WritePropertyName("track_total_hits");
			JsonSerializer.Serialize(writer, TrackTotalHitsValue, options);
		}

		if (WithLabelsValue.HasValue)
		{
			writer.WritePropertyName("with_labels");
			writer.WriteBooleanValue(WithLabelsValue.Value);
		}

		writer.WriteEndObject();
	}
}