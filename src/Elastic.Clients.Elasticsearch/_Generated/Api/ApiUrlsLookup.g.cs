// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

namespace Elastic.Clients.Elasticsearch
{
	internal static class ApiUrlsLookups
	{
		internal static ApiUrls ClusterAllocationExplain = new ApiUrls(new[] { "/_cluster/allocation/explain" });
		internal static ApiUrls ClusterDeleteComponentTemplate = new ApiUrls(new[] { "/_component_template/{name}" });
		internal static ApiUrls ClusterDeleteVotingConfigExclusions = new ApiUrls(new[] { "/_cluster/voting_config_exclusions" });
		internal static ApiUrls ClusterExistsComponentTemplate = new ApiUrls(new[] { "/_component_template/{name}" });
		internal static ApiUrls ClusterGetComponentTemplate = new ApiUrls(new[] { "/_component_template", "/_component_template/{name}" });
		internal static ApiUrls ClusterGetSettings = new ApiUrls(new[] { "/_cluster/settings" });
		internal static ApiUrls ClusterHealth = new ApiUrls(new[] { "/_cluster/health", "/_cluster/health/{index}" });
		internal static ApiUrls ClusterPendingTasks = new ApiUrls(new[] { "/_cluster/pending_tasks" });
		internal static ApiUrls ClusterPostVotingConfigExclusions = new ApiUrls(new[] { "/_cluster/voting_config_exclusions" });
		internal static ApiUrls ClusterPutComponentTemplate = new ApiUrls(new[] { "/_component_template/{name}" });
		internal static ApiUrls ClusterPutSettings = new ApiUrls(new[] { "/_cluster/settings" });
		internal static ApiUrls ClusterRemoteInfo = new ApiUrls(new[] { "/_remote/info" });
		internal static ApiUrls ClusterReroute = new ApiUrls(new[] { "/_cluster/reroute" });
		internal static ApiUrls ClusterState = new ApiUrls(new[] { "/_cluster/state", "/_cluster/state/{metric}", "/_cluster/state/{metric}/{index}" });
		internal static ApiUrls ClusterStats = new ApiUrls(new[] { "/_cluster/stats", "/_cluster/stats/nodes/{node_id}" });
		internal static ApiUrls IndexManagementAnalyze = new ApiUrls(new[] { "/_analyze", "/{index}/_analyze" });
		internal static ApiUrls IndexManagementCreate = new ApiUrls(new[] { "/{index}" });
		internal static ApiUrls IndexManagementDelete = new ApiUrls(new[] { "/{index}" });
		internal static ApiUrls IndexManagementGet = new ApiUrls(new[] { "/{index}" });
		internal static ApiUrls IndexManagementClearCache = new ApiUrls(new[] { "/_cache/clear", "/{index}/_cache/clear" });
		internal static ApiUrls IndexManagementClone = new ApiUrls(new[] { "/{index}/_clone/{target}" });
		internal static ApiUrls IndexManagementClose = new ApiUrls(new[] { "/{index}/_close" });
		internal static ApiUrls IndexManagementCreateDataStream = new ApiUrls(new[] { "/_data_stream/{name}" });
		internal static ApiUrls IndexManagementDataStreamsStats = new ApiUrls(new[] { "/_data_stream/_stats", "/_data_stream/{name}/_stats" });
		internal static ApiUrls IndexManagementDeleteAlias = new ApiUrls(new[] { "/{index}/_alias/{name}" });
		internal static ApiUrls IndexManagementDeleteDataStream = new ApiUrls(new[] { "/_data_stream/{name}" });
		internal static ApiUrls IndexManagementDeleteIndexTemplate = new ApiUrls(new[] { "/_index_template/{name}" });
		internal static ApiUrls IndexManagementDeleteTemplate = new ApiUrls(new[] { "/_template/{name}" });
		internal static ApiUrls IndexManagementDiskUsage = new ApiUrls(new[] { "/{index}/_disk_usage" });
		internal static ApiUrls IndexManagementExistsAlias = new ApiUrls(new[] { "/_alias/{name}", "/{index}/_alias/{name}" });
		internal static ApiUrls IndexManagementExistsIndexTemplate = new ApiUrls(new[] { "/_index_template/{name}" });
		internal static ApiUrls IndexManagementExists = new ApiUrls(new[] { "/{index}" });
		internal static ApiUrls IndexManagementExistsTemplate = new ApiUrls(new[] { "/_template/{name}" });
		internal static ApiUrls IndexManagementFlush = new ApiUrls(new[] { "/_flush", "/{index}/_flush" });
		internal static ApiUrls IndexManagementForcemerge = new ApiUrls(new[] { "/_forcemerge", "/{index}/_forcemerge" });
		internal static ApiUrls IndexManagementGetAlias = new ApiUrls(new[] { "/_alias", "/_alias/{name}", "/{index}/_alias/{name}", "/{index}/_alias" });
		internal static ApiUrls IndexManagementGetDataStream = new ApiUrls(new[] { "/_data_stream", "/_data_stream/{name}" });
		internal static ApiUrls IndexManagementGetFieldMapping = new ApiUrls(new[] { "/_mapping/field/{fields}", "/{index}/_mapping/field/{fields}" });
		internal static ApiUrls IndexManagementGetIndexTemplate = new ApiUrls(new[] { "/_index_template", "/_index_template/{name}" });
		internal static ApiUrls IndexManagementGetMapping = new ApiUrls(new[] { "/_mapping", "/{index}/_mapping" });
		internal static ApiUrls IndexManagementGetSettings = new ApiUrls(new[] { "/_settings", "/{index}/_settings", "/{index}/_settings/{name}", "/_settings/{name}" });
		internal static ApiUrls IndexManagementGetTemplate = new ApiUrls(new[] { "/_template", "/_template/{name}" });
		internal static ApiUrls IndexManagementMigrateToDataStream = new ApiUrls(new[] { "/_data_stream/_migrate/{name}" });
		internal static ApiUrls IndexManagementOpen = new ApiUrls(new[] { "/{index}/_open" });
		internal static ApiUrls IndexManagementPromoteDataStream = new ApiUrls(new[] { "/_data_stream/_promote/{name}" });
		internal static ApiUrls IndexManagementPutAlias = new ApiUrls(new[] { "/{index}/_alias/{name}" });
		internal static ApiUrls IndexManagementPutIndexTemplate = new ApiUrls(new[] { "/_index_template/{name}" });
		internal static ApiUrls IndexManagementPutMapping = new ApiUrls(new[] { "/{index}/_mapping" });
		internal static ApiUrls IndexManagementPutSettings = new ApiUrls(new[] { "/_settings", "/{index}/_settings" });
		internal static ApiUrls IndexManagementPutTemplate = new ApiUrls(new[] { "/_template/{name}" });
		internal static ApiUrls IndexManagementRecovery = new ApiUrls(new[] { "/_recovery", "/{index}/_recovery" });
		internal static ApiUrls IndexManagementRefresh = new ApiUrls(new[] { "/_refresh", "/{index}/_refresh" });
		internal static ApiUrls IndexManagementReloadSearchAnalyzers = new ApiUrls(new[] { "/{index}/_reload_search_analyzers" });
		internal static ApiUrls IndexManagementResolveIndex = new ApiUrls(new[] { "/_resolve/index/{name}" });
		internal static ApiUrls IndexManagementRollover = new ApiUrls(new[] { "/{alias}/_rollover", "/{alias}/_rollover/{new_index}" });
		internal static ApiUrls IndexManagementSegments = new ApiUrls(new[] { "/_segments", "/{index}/_segments" });
		internal static ApiUrls IndexManagementShardStores = new ApiUrls(new[] { "/_shard_stores", "/{index}/_shard_stores" });
		internal static ApiUrls IndexManagementSimulateIndexTemplate = new ApiUrls(new[] { "/_index_template/_simulate_index/{name}" });
		internal static ApiUrls IndexManagementSimulateTemplate = new ApiUrls(new[] { "/_index_template/_simulate", "/_index_template/_simulate/{name}" });
		internal static ApiUrls IndexManagementStats = new ApiUrls(new[] { "/_stats", "/_stats/{metric}", "/{index}/_stats", "/{index}/_stats/{metric}" });
		internal static ApiUrls IndexManagementUpdateAliases = new ApiUrls(new[] { "/_aliases" });
		internal static ApiUrls IndexManagementValidateQuery = new ApiUrls(new[] { "/_validate/query", "/{index}/_validate/query" });
		internal static ApiUrls IndexManagementShrink = new ApiUrls(new[] { "/{index}/_shrink/{target}" });
		internal static ApiUrls IndexManagementSplit = new ApiUrls(new[] { "/{index}/_split/{target}" });
	}
}