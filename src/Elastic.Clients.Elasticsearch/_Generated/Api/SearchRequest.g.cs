// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public class SearchRequestParameters : RequestParameters<SearchRequestParameters>
	{
		[JsonIgnore]
		public string? AllowNoIndices { get => Q<string?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public string? AllowPartialSearchResults { get => Q<string?>("allow_partial_search_results"); set => Q("allow_partial_search_results", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public string? AnalyzeWildcard { get => Q<string?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public long? BatchedReduceSize { get => Q<long?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

		[JsonIgnore]
		public string? CcsMinimizeRoundtrips { get => Q<string?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.DefaultOperator? DefaultOperator { get => Q<Elastic.Clients.Elasticsearch.DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Fields? DocvalueFields { get => Q<Elastic.Clients.Elasticsearch.Fields?>("docvalue_fields"); set => Q("docvalue_fields", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.ExpandWildcards? ExpandWildcards { get => Q<Elastic.Clients.Elasticsearch.ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public string? Explain { get => Q<string?>("explain"); set => Q("explain", value); }

		[JsonIgnore]
		public string? IgnoreThrottled { get => Q<string?>("ignore_throttled"); set => Q("ignore_throttled", value); }

		[JsonIgnore]
		public string? IgnoreUnavailable { get => Q<string?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public string? Lenient { get => Q<string?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public long? MaxConcurrentShardRequests { get => Q<long?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

		[JsonIgnore]
		public string? MinCompatibleShardNode { get => Q<string?>("min_compatible_shard_node"); set => Q("min_compatible_shard_node", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public long? PreFilterShardSize { get => Q<long?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

		[JsonIgnore]
		public string? RequestCache { get => Q<string?>("request_cache"); set => Q("request_cache", value); }

		[JsonIgnore]
		public string? Routing { get => Q<string?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? Scroll { get => Q<Elastic.Clients.Elasticsearch.Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.SearchType? SearchType { get => Q<Elastic.Clients.Elasticsearch.SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public IEnumerable<string>? Stats { get => Q<IEnumerable<string>?>("stats"); set => Q("stats", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Fields? StoredFields { get => Q<Elastic.Clients.Elasticsearch.Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public string? SuggestField { get => Q<string?>("suggest_field"); set => Q("suggest_field", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.SuggestMode? SuggestMode { get => Q<Elastic.Clients.Elasticsearch.SuggestMode?>("suggest_mode"); set => Q("suggest_mode", value); }

		[JsonIgnore]
		public long? SuggestSize { get => Q<long?>("suggest_size"); set => Q("suggest_size", value); }

		[JsonIgnore]
		public string? SuggestText { get => Q<string?>("suggest_text"); set => Q("suggest_text", value); }

		[JsonIgnore]
		public long? TerminateAfter { get => Q<long?>("terminate_after"); set => Q("terminate_after", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? Timeout { get => Q<Elastic.Clients.Elasticsearch.Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public string? TrackScores { get => Q<string?>("track_scores"); set => Q("track_scores", value); }

		[JsonIgnore]
		public string? TypedKeys { get => Q<string?>("typed_keys"); set => Q("typed_keys", value); }

		[JsonIgnore]
		public string? RestTotalHitsAsInt { get => Q<string?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

		[JsonIgnore]
		public string? Version { get => Q<string?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Fields? SourceExcludes { get => Q<Elastic.Clients.Elasticsearch.Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Fields? SourceIncludes { get => Q<Elastic.Clients.Elasticsearch.Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public string? SeqNoPrimaryTerm { get => Q<string?>("seq_no_primary_term"); set => Q("seq_no_primary_term", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }

		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }
	}

	[ConvertAs(typeof(SearchRequest))]
	public partial interface ISearchRequest : IRequest<SearchRequestParameters>
	{
		Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }

		IFieldCollapse? Collapse { get; set; }

		IHighlight? Highlight { get; set; }

		IEnumerable<Dictionary<string, double>>? IndicesBoost { get; set; }

		double? MinScore { get; set; }

		QueryDsl.IQueryContainer? PostFilter { get; set; }

		string? Profile { get; set; }

		QueryDsl.IQueryContainer? Query { get; set; }

		Dictionary<string, IScriptField>? ScriptFields { get; set; }

		ISlicedScroll? Slice { get; set; }

		IPointInTimeReference? Pit { get; set; }

		//Dictionary<string, Mapping.IRuntimeField>? RuntimeMappings { get; set; }
	}

	public partial class SearchRequest : PlainRequestBase<SearchRequestParameters>, ISearchRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("aggs")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		[JsonInclude]
		[JsonPropertyName("aggregations")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }

		[JsonInclude]
		[JsonPropertyName("collapse")]
		public IFieldCollapse? Collapse { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public IHighlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices_boost")]
		public IEnumerable<Dictionary<string, double>>? IndicesBoost { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_filter")]
		public QueryDsl.IQueryContainer? PostFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("profile")]
		public string? Profile { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer? Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, IScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("slice")]
		public ISlicedScroll? Slice { get; set; }

		[JsonInclude]
		[JsonPropertyName("pit")]
		public IPointInTimeReference? Pit { get; set; }

		//[JsonInclude]
		//[JsonPropertyName("runtime_mappings")]
		//public Dictionary<string, Mapping.IRuntimeField>? RuntimeMappings { get; set; }
	}

	public partial class SearchRequestDescriptor : RequestDescriptorBase<SearchRequestDescriptor, SearchRequestParameters, ISearchRequest>, ISearchRequest
	{
		///<summary>/_search</summary>
        public SearchRequestDescriptor() : base()
		{
		}

		///<summary>/{index}/_search</summary>
        public SearchRequestDescriptor(Elastic.Clients.Elasticsearch.Indices? indices) : base(r => r.Optional("indices", indices))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		Dictionary<string, Aggregations.IAggregationContainer>? ISearchRequest.Aggs { get; set; }

		Dictionary<string, Aggregations.IAggregationContainer>? ISearchRequest.Aggregations { get; set; }

		IFieldCollapse? ISearchRequest.Collapse { get; set; }

		IHighlight? ISearchRequest.Highlight { get; set; }

		IEnumerable<Dictionary<string, double>>? ISearchRequest.IndicesBoost { get; set; }

		double? ISearchRequest.MinScore { get; set; }

		QueryDsl.IQueryContainer? ISearchRequest.PostFilter { get; set; }

		string? ISearchRequest.Profile { get; set; }

		QueryDsl.IQueryContainer? ISearchRequest.Query { get; set; }

		Dictionary<string, IScriptField>? ISearchRequest.ScriptFields { get; set; }

		ISlicedScroll? ISearchRequest.Slice { get; set; }

		IPointInTimeReference? ISearchRequest.Pit { get; set; }

		//Dictionary<string, Mapping.IRuntimeField>? ISearchRequest.RuntimeMappings { get; set; }
	}
}
