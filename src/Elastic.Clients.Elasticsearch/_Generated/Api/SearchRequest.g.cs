// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public class SearchRequestParameters : RequestParameters<SearchRequestParameters>
	{
		[JsonIgnore]
		public bool? AllowNoIndices { get => Q<bool?>("allow_no_indices"); set => Q("allow_no_indices", value); }

		[JsonIgnore]
		public bool? AllowPartialSearchResults { get => Q<bool?>("allow_partial_search_results"); set => Q("allow_partial_search_results", value); }

		[JsonIgnore]
		public string? Analyzer { get => Q<string?>("analyzer"); set => Q("analyzer", value); }

		[JsonIgnore]
		public bool? AnalyzeWildcard { get => Q<bool?>("analyze_wildcard"); set => Q("analyze_wildcard", value); }

		[JsonIgnore]
		public object? BatchedReduceSize { get => Q<object?>("batched_reduce_size"); set => Q("batched_reduce_size", value); }

		[JsonIgnore]
		public bool? CcsMinimizeRoundtrips { get => Q<bool?>("ccs_minimize_roundtrips"); set => Q("ccs_minimize_roundtrips", value); }

		[JsonIgnore]
		public DefaultOperator? DefaultOperator { get => Q<DefaultOperator?>("default_operator"); set => Q("default_operator", value); }

		[JsonIgnore]
		public string? Df { get => Q<string?>("df"); set => Q("df", value); }

		[JsonIgnore]
		public Fields? DocvalueFields { get => Q<Fields?>("docvalue_fields"); set => Q("docvalue_fields", value); }

		[JsonIgnore]
		public ExpandWildcards? ExpandWildcards { get => Q<ExpandWildcards?>("expand_wildcards"); set => Q("expand_wildcards", value); }

		[JsonIgnore]
		public bool? Explain { get => Q<bool?>("explain"); set => Q("explain", value); }

		[JsonIgnore]
		public bool? IgnoreThrottled { get => Q<bool?>("ignore_throttled"); set => Q("ignore_throttled", value); }

		[JsonIgnore]
		public bool? IgnoreUnavailable { get => Q<bool?>("ignore_unavailable"); set => Q("ignore_unavailable", value); }

		[JsonIgnore]
		public bool? Lenient { get => Q<bool?>("lenient"); set => Q("lenient", value); }

		[JsonIgnore]
		public object? MaxConcurrentShardRequests { get => Q<object?>("max_concurrent_shard_requests"); set => Q("max_concurrent_shard_requests", value); }

		[JsonIgnore]
		public string? MinCompatibleShardNode { get => Q<string?>("min_compatible_shard_node"); set => Q("min_compatible_shard_node", value); }

		[JsonIgnore]
		public string? Preference { get => Q<string?>("preference"); set => Q("preference", value); }

		[JsonIgnore]
		public object? PreFilterShardSize { get => Q<object?>("pre_filter_shard_size"); set => Q("pre_filter_shard_size", value); }

		[JsonIgnore]
		public bool? RequestCache { get => Q<bool?>("request_cache"); set => Q("request_cache", value); }

		[JsonIgnore]
		public string? Routing { get => Q<string?>("routing"); set => Q("routing", value); }

		[JsonIgnore]
		public Time? Scroll { get => Q<Time?>("scroll"); set => Q("scroll", value); }

		[JsonIgnore]
		public SearchType? SearchType { get => Q<SearchType?>("search_type"); set => Q("search_type", value); }

		[JsonIgnore]
		public IEnumerable<string>? Stats { get => Q<IEnumerable<string>?>("stats"); set => Q("stats", value); }

		[JsonIgnore]
		public Fields? StoredFields { get => Q<Fields?>("stored_fields"); set => Q("stored_fields", value); }

		[JsonIgnore]
		public string? SuggestField { get => Q<string?>("suggest_field"); set => Q("suggest_field", value); }

		[JsonIgnore]
		public SuggestMode? SuggestMode { get => Q<SuggestMode?>("suggest_mode"); set => Q("suggest_mode", value); }

		[JsonIgnore]
		public object? SuggestSize { get => Q<object?>("suggest_size"); set => Q("suggest_size", value); }

		[JsonIgnore]
		public string? SuggestText { get => Q<string?>("suggest_text"); set => Q("suggest_text", value); }

		[JsonIgnore]
		public object? TerminateAfter { get => Q<object?>("terminate_after"); set => Q("terminate_after", value); }

		[JsonIgnore]
		public Time? Timeout { get => Q<Time?>("timeout"); set => Q("timeout", value); }

		[JsonIgnore]
		public Union<bool?, int?>? TrackTotalHits { get => Q<Union<bool?, int?>?>("track_total_hits"); set => Q("track_total_hits", value); }

		[JsonIgnore]
		public bool? TrackScores { get => Q<bool?>("track_scores"); set => Q("track_scores", value); }

		[JsonIgnore]
		public bool? TypedKeys { get => Q<bool?>("typed_keys"); set => Q("typed_keys", value); }

		[JsonIgnore]
		public bool? RestTotalHitsAsInt { get => Q<bool?>("rest_total_hits_as_int"); set => Q("rest_total_hits_as_int", value); }

		[JsonIgnore]
		public bool? Version { get => Q<bool?>("version"); set => Q("version", value); }

		[JsonIgnore]
		public Union<bool?, Fields?>? Source { get => Q<Union<bool?, Fields?>?>("_source"); set => Q("_source", value); }

		[JsonIgnore]
		public Fields? SourceExcludes { get => Q<Fields?>("_source_excludes"); set => Q("_source_excludes", value); }

		[JsonIgnore]
		public Fields? SourceIncludes { get => Q<Fields?>("_source_includes"); set => Q("_source_includes", value); }

		[JsonIgnore]
		public bool? SeqNoPrimaryTerm { get => Q<bool?>("seq_no_primary_term"); set => Q("seq_no_primary_term", value); }

		[JsonIgnore]
		public string? QueryLuceneSyntax { get => Q<string?>("q"); set => Q("q", value); }

		[JsonIgnore]
		public int? Size { get => Q<int?>("size"); set => Q("size", value); }

		[JsonIgnore]
		public int? From { get => Q<int?>("from"); set => Q("from", value); }

		[JsonIgnore]
		public IEnumerable<string>? Sort { get => Q<IEnumerable<string>?>("sort"); set => Q("sort", value); }
	}

	[ConvertAs(typeof(SearchRequest))]
	public partial interface ISearchRequest : IRequest<SearchRequestParameters>
	{
		Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }

		IFieldCollapse? Collapse { get; set; }

		IHighlight? Highlight { get; set; }

		IEnumerable<Dictionary<IndexName, double>>? IndicesBoost { get; set; }

		double? MinScore { get; set; }

		QueryDsl.IQueryContainer? PostFilter { get; set; }

		bool? Profile { get; set; }

		QueryDsl.IQueryContainer? Query { get; set; }

		IEnumerable<IRescore>? Rescore { get; set; }

		Dictionary<string, IScriptField>? ScriptFields { get; set; }

		ISlicedScroll? Slice { get; set; }

		IEnumerable<Union<string?, IDateField?>>? Fields { get; set; }

		Union<ISuggestContainer?, Dictionary<string, ISuggestContainer>?>? Suggest { get; set; }

		IPointInTimeReference? Pit { get; set; }

		Dictionary<string, Mapping.IRuntimeField>? RuntimeMappings { get; set; }
	}

	public partial class SearchRequest : PlainRequestBase<SearchRequestParameters>, ISearchRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("aggs")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggs { get; set; }

		[JsonInclude]
		[JsonPropertyName("aggregations")]
		public Dictionary<string, Aggregations.IAggregationContainer>? Aggregations { get; set; }

		[JsonInclude]
		[JsonPropertyName("collapse")]
		public IFieldCollapse? Collapse { get; set; }

		[JsonInclude]
		[JsonPropertyName("highlight")]
		public IHighlight? Highlight { get; set; }

		[JsonInclude]
		[JsonPropertyName("indices_boost")]
		public IEnumerable<Dictionary<IndexName, double>>? IndicesBoost { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_score")]
		public double? MinScore { get; set; }

		[JsonInclude]
		[JsonPropertyName("post_filter")]
		public QueryDsl.IQueryContainer? PostFilter { get; set; }

		[JsonInclude]
		[JsonPropertyName("profile")]
		public bool? Profile { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public QueryDsl.IQueryContainer? Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("rescore")]
		public IEnumerable<IRescore>? Rescore { get; set; }

		[JsonInclude]
		[JsonPropertyName("script_fields")]
		public Dictionary<string, IScriptField>? ScriptFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("slice")]
		public ISlicedScroll? Slice { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IEnumerable<Union<string?, IDateField?>>? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("suggest")]
		public Union<ISuggestContainer?, Dictionary<string, ISuggestContainer>?>? Suggest { get; set; }

		[JsonInclude]
		[JsonPropertyName("pit")]
		public IPointInTimeReference? Pit { get; set; }

		[JsonInclude]
		[JsonPropertyName("runtime_mappings")]
		public Dictionary<string, Mapping.IRuntimeField>? RuntimeMappings { get; set; }
	}

	public partial class SearchRequestDescriptor : RequestDescriptorBase<SearchRequestDescriptor, SearchRequestParameters, ISearchRequest>, ISearchRequest
	{
		///<summary>/_search</summary>
        public SearchRequestDescriptor() : base()
		{
		}

		///<summary>/{index}/_search</summary>
        public SearchRequestDescriptor(Indices? indices) : base(r => r.Optional("indices", indices))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		Dictionary<string, Aggregations.IAggregationContainer>? ISearchRequest.Aggs { get; set; }

		Dictionary<string, Aggregations.IAggregationContainer>? ISearchRequest.Aggregations { get; set; }

		IFieldCollapse? ISearchRequest.Collapse { get; set; }

		IHighlight? ISearchRequest.Highlight { get; set; }

		IEnumerable<Dictionary<IndexName, double>>? ISearchRequest.IndicesBoost { get; set; }

		double? ISearchRequest.MinScore { get; set; }

		QueryDsl.IQueryContainer? ISearchRequest.PostFilter { get; set; }

		bool? ISearchRequest.Profile { get; set; }

		QueryDsl.IQueryContainer? ISearchRequest.Query { get; set; }

		IEnumerable<IRescore>? ISearchRequest.Rescore { get; set; }

		Dictionary<string, IScriptField>? ISearchRequest.ScriptFields { get; set; }

		ISlicedScroll? ISearchRequest.Slice { get; set; }

		IEnumerable<Union<string?, IDateField?>>? ISearchRequest.Fields { get; set; }

		Union<ISuggestContainer?, Dictionary<string, ISuggestContainer>?>? ISearchRequest.Suggest { get; set; }

		IPointInTimeReference? ISearchRequest.Pit { get; set; }

		Dictionary<string, Mapping.IRuntimeField>? ISearchRequest.RuntimeMappings { get; set; }

		public SearchRequestDescriptor Aggs(Dictionary<string, Aggregations.IAggregationContainer>? aggs) => Assign(aggs, (a, v) => a.Aggs = v);
		public SearchRequestDescriptor Aggregations(Dictionary<string, Aggregations.IAggregationContainer>? aggregations) => Assign(aggregations, (a, v) => a.Aggregations = v);
		public SearchRequestDescriptor Collapse(IFieldCollapse? collapse) => Assign(collapse, (a, v) => a.Collapse = v);
		public SearchRequestDescriptor Highlight(IHighlight? highlight) => Assign(highlight, (a, v) => a.Highlight = v);
		public SearchRequestDescriptor IndicesBoost(IEnumerable<Dictionary<IndexName, double>>? indicesBoost) => Assign(indicesBoost, (a, v) => a.IndicesBoost = v);
		public SearchRequestDescriptor MinScore(double? minScore) => Assign(minScore, (a, v) => a.MinScore = v);
		public SearchRequestDescriptor PostFilter(QueryDsl.IQueryContainer? postFilter) => Assign(postFilter, (a, v) => a.PostFilter = v);
		public SearchRequestDescriptor Profile(bool? profile) => Assign(profile, (a, v) => a.Profile = v);
		public SearchRequestDescriptor Query(QueryDsl.IQueryContainer? query) => Assign(query, (a, v) => a.Query = v);
		public SearchRequestDescriptor Rescore(IEnumerable<IRescore>? rescore) => Assign(rescore, (a, v) => a.Rescore = v);
		public SearchRequestDescriptor ScriptFields(Dictionary<string, IScriptField>? scriptFields) => Assign(scriptFields, (a, v) => a.ScriptFields = v);
		public SearchRequestDescriptor Slice(ISlicedScroll? slice) => Assign(slice, (a, v) => a.Slice = v);
		public SearchRequestDescriptor Fields(IEnumerable<Union<string?, IDateField?>>? fields) => Assign(fields, (a, v) => a.Fields = v);
		public SearchRequestDescriptor Suggest(Union<ISuggestContainer?, Dictionary<string, ISuggestContainer>?>? suggest) => Assign(suggest, (a, v) => a.Suggest = v);
		public SearchRequestDescriptor Pit(IPointInTimeReference? pit) => Assign(pit, (a, v) => a.Pit = v);
		public SearchRequestDescriptor RuntimeMappings(Dictionary<string, Mapping.IRuntimeField>? runtimeMappings) => Assign(runtimeMappings, (a, v) => a.RuntimeMappings = v);
	}
}