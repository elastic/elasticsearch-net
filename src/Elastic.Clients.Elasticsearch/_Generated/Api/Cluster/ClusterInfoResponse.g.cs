// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport.Products.Elasticsearch;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Cluster;

internal sealed partial class ClusterInfoResponseConverter : System.Text.Json.Serialization.JsonConverter<ClusterInfoResponse>
{
	private static readonly System.Text.Json.JsonEncodedText PropClusterName = System.Text.Json.JsonEncodedText.Encode("cluster_name");
	private static readonly System.Text.Json.JsonEncodedText PropHttp = System.Text.Json.JsonEncodedText.Encode("http");
	private static readonly System.Text.Json.JsonEncodedText PropIngest = System.Text.Json.JsonEncodedText.Encode("ingest");
	private static readonly System.Text.Json.JsonEncodedText PropScript = System.Text.Json.JsonEncodedText.Encode("script");
	private static readonly System.Text.Json.JsonEncodedText PropThreadPool = System.Text.Json.JsonEncodedText.Encode("thread_pool");

	public override ClusterInfoResponse Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
	{
		reader.ValidateToken(System.Text.Json.JsonTokenType.StartObject);
		LocalJsonValue<string> propClusterName = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Http?> propHttp = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Ingest?> propIngest = default;
		LocalJsonValue<Elastic.Clients.Elasticsearch.Nodes.Scripting?> propScript = default;
		LocalJsonValue<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.ThreadCount>?> propThreadPool = default;
		while (reader.Read() && reader.TokenType is System.Text.Json.JsonTokenType.PropertyName)
		{
			if (propClusterName.TryRead(ref reader, options, PropClusterName))
			{
				continue;
			}

			if (propHttp.TryRead(ref reader, options, PropHttp))
			{
				continue;
			}

			if (propIngest.TryRead(ref reader, options, PropIngest))
			{
				continue;
			}

			if (propScript.TryRead(ref reader, options, PropScript))
			{
				continue;
			}

			if (propThreadPool.TryRead(ref reader, options, PropThreadPool))
			{
				continue;
			}

			throw new System.Text.Json.JsonException($"Unknown JSON property '{reader.GetString()}' for type '{typeToConvert.Name}'.");
		}

		reader.ValidateToken(System.Text.Json.JsonTokenType.EndObject);
		return new ClusterInfoResponse
		{
			ClusterName = propClusterName.Value
,
			Http = propHttp.Value
,
			Ingest = propIngest.Value
,
			Script = propScript.Value
,
			ThreadPool = propThreadPool.Value
		};
	}

	public override void Write(System.Text.Json.Utf8JsonWriter writer, ClusterInfoResponse value, System.Text.Json.JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WriteProperty(options, PropClusterName, value.ClusterName);
		writer.WriteProperty(options, PropHttp, value.Http);
		writer.WriteProperty(options, PropIngest, value.Ingest);
		writer.WriteProperty(options, PropScript, value.Script);
		writer.WriteProperty(options, PropThreadPool, value.ThreadPool);
		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(ClusterInfoResponseConverter))]
public sealed partial class ClusterInfoResponse : ElasticsearchResponse
{
	public string ClusterName { get; init; }
	public Elastic.Clients.Elasticsearch.Nodes.Http? Http { get; init; }
	public Elastic.Clients.Elasticsearch.Nodes.Ingest? Ingest { get; init; }
	public Elastic.Clients.Elasticsearch.Nodes.Scripting? Script { get; init; }
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Nodes.ThreadCount>? ThreadPool { get; init; }
}