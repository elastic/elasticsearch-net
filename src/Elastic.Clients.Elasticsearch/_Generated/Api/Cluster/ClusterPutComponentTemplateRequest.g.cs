// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster
{
	public class ClusterPutComponentTemplateRequestParameters : RequestParameters<ClusterPutComponentTemplateRequestParameters>
	{
		[JsonIgnore]
		public bool? Create { get => Q<bool?>("create"); set => Q("create", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Time?>("master_timeout"); set => Q("master_timeout", value); }
	}

	[InterfaceConverterAttribute(typeof(ClusterPutComponentTemplateRequestDescriptorConverter<ClusterPutComponentTemplateRequest>))]
	public partial interface IClusterPutComponentTemplateRequest : IRequest<ClusterPutComponentTemplateRequestParameters>
	{
		IndexManagement.IIndexState Template { get; set; }

		Dictionary<string, IndexManagement.IAliasDefinition>? Aliases { get; set; }

		Mapping.ITypeMapping? Mappings { get; set; }

		IndexManagement.IIndexSettings? Settings { get; set; }

		object? Version { get; set; }

		Dictionary<string, object>? Meta { get; set; }
	}

	public partial class ClusterPutComponentTemplateRequest : PlainRequestBase<ClusterPutComponentTemplateRequestParameters>, IClusterPutComponentTemplateRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPutComponentTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonIgnore]
		public bool? Create { get => Q<bool?>("create"); set => Q("create", value); }

		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Time? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Time?>("master_timeout"); set => Q("master_timeout", value); }

		[JsonInclude]
		[JsonPropertyName("template")]
		public IndexManagement.IIndexState Template { get; set; }

		[JsonInclude]
		[JsonPropertyName("aliases")]
		public Dictionary<string, IndexManagement.IAliasDefinition>? Aliases { get; set; }

		[JsonInclude]
		[JsonPropertyName("mappings")]
		public Mapping.ITypeMapping? Mappings { get; set; }

		[JsonInclude]
		[JsonPropertyName("settings")]
		public IndexManagement.IIndexSettings? Settings { get; set; }

		[JsonInclude]
		[JsonPropertyName("version")]
		public object? Version { get; set; }

		[JsonInclude]
		[JsonPropertyName("_meta")]
		public Dictionary<string, object>? Meta { get; set; }
	}

	public partial class ClusterPutComponentTemplateRequestDescriptor : RequestDescriptorBase<ClusterPutComponentTemplateRequestDescriptor, ClusterPutComponentTemplateRequestParameters, IClusterPutComponentTemplateRequest>, IClusterPutComponentTemplateRequest
	{
		///<summary>/_component_template/{name}</summary>
        public ClusterPutComponentTemplateRequestDescriptor(Elastic.Clients.Elasticsearch.Name name) : base(r => r.Required("name", name))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.ClusterPutComponentTemplate;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		IndexManagement.IIndexState IClusterPutComponentTemplateRequest.Template { get; set; }

		Dictionary<string, IndexManagement.IAliasDefinition>? IClusterPutComponentTemplateRequest.Aliases { get; set; }

		Mapping.ITypeMapping? IClusterPutComponentTemplateRequest.Mappings { get; set; }

		IndexManagement.IIndexSettings? IClusterPutComponentTemplateRequest.Settings { get; set; }

		object? IClusterPutComponentTemplateRequest.Version { get; set; }

		Dictionary<string, object>? IClusterPutComponentTemplateRequest.Meta { get; set; }

		public ClusterPutComponentTemplateRequestDescriptor Template(IndexManagement.IIndexState template) => Assign(template, (a, v) => a.Template = v);
		public ClusterPutComponentTemplateRequestDescriptor Aliases(Dictionary<string, IndexManagement.IAliasDefinition>? aliases) => Assign(aliases, (a, v) => a.Aliases = v);
		public ClusterPutComponentTemplateRequestDescriptor Mappings(Mapping.ITypeMapping? mappings) => Assign(mappings, (a, v) => a.Mappings = v);
		public ClusterPutComponentTemplateRequestDescriptor Settings(IndexManagement.IIndexSettings? settings) => Assign(settings, (a, v) => a.Settings = v);
		public ClusterPutComponentTemplateRequestDescriptor Version(object? version) => Assign(version, (a, v) => a.Version = v);
		public ClusterPutComponentTemplateRequestDescriptor Meta(Dictionary<string, object>? meta) => Assign(meta, (a, v) => a.Meta = v);
		public ClusterPutComponentTemplateRequestDescriptor Create(bool? create) => Qs("create", create);
		public ClusterPutComponentTemplateRequestDescriptor MasterTimeout(Elastic.Clients.Elasticsearch.Time? masterTimeout) => Qs("master_timeout", masterTimeout);
	}

	public class ClusterPutComponentTemplateRequestDescriptorConverter<TReadAs> : JsonConverter<IClusterPutComponentTemplateRequest> where TReadAs : class, IClusterPutComponentTemplateRequest
	{
		public override IClusterPutComponentTemplateRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => JsonSerializer.Deserialize<TReadAs>(ref reader, options);
		public override void Write(Utf8JsonWriter writer, IClusterPutComponentTemplateRequest value, JsonSerializerOptions options)
		{
			writer.WriteStartObject();
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, value.Template, options);
			if (value.Aliases is not null)
			{
				writer.WritePropertyName("aliases");
				JsonSerializer.Serialize(writer, value.Aliases, options);
			}

			if (value.Mappings is not null)
			{
				writer.WritePropertyName("mappings");
				JsonSerializer.Serialize(writer, value.Mappings, options);
			}

			if (value.Settings is not null)
			{
				writer.WritePropertyName("settings");
				JsonSerializer.Serialize(writer, value.Settings, options);
			}

			if (value.Version is not null)
			{
				writer.WritePropertyName("version");
				JsonSerializer.Serialize(writer, value.Version, options);
			}

			if (value.Meta is not null)
			{
				writer.WritePropertyName("_meta");
				JsonSerializer.Serialize(writer, value.Meta, options);
			}

			writer.WriteEndObject();
		}
	}
}