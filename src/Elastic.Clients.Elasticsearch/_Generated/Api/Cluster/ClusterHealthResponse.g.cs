// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Cluster.Health;
using Elastic.Transport.Products.Elasticsearch;
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster
{
	public partial class ClusterHealthResponse : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards")]
		public int ActiveShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards_percent_as_number")]
		public double ActiveShardsPercentAsNumber { get; init; }

		[JsonInclude]
		[JsonPropertyName("cluster_name")]
		public Elastic.Clients.Elasticsearch.Name ClusterName { get; init; }

		[JsonInclude]
		[JsonPropertyName("delayed_unassigned_shards")]
		public int DelayedUnassignedShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; init; }

		[JsonInclude]
		[JsonPropertyName("initializing_shards")]
		public int InitializingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_data_nodes")]
		public int NumberOfDataNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_in_flight_fetch")]
		public int NumberOfInFlightFetch { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_nodes")]
		public int NumberOfNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_pending_tasks")]
		public int NumberOfPendingTasks { get; init; }

		[JsonInclude]
		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public Elastic.Clients.Elasticsearch.HealthStatus Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("task_max_waiting_in_queue_millis")]
		public long TaskMaxWaitingInQueueMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("timed_out")]
		public bool TimedOut { get; init; }

		[JsonInclude]
		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards { get; init; }
	}

	public partial class ClusterHealthResponseV2 : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards")]
		public int ActiveShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards_percent_as_number")]
		public double ActiveShardsPercentAsNumber { get; init; }

		[JsonInclude]
		[JsonPropertyName("cluster_name")]
		public string ClusterName { get; init; }

		[JsonInclude]
		[JsonPropertyName("delayed_unassigned_shards")]
		public int DelayedUnassignedShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; init; }

		[JsonInclude]
		[JsonPropertyName("initializing_shards")]
		public int InitializingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_data_nodes")]
		public int NumberOfDataNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_in_flight_fetch")]
		public int NumberOfInFlightFetch { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_nodes")]
		public int NumberOfNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_pending_tasks")]
		public int NumberOfPendingTasks { get; init; }

		[JsonInclude]
		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public Elastic.Clients.Elasticsearch.HealthStatus Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("task_max_waiting_in_queue_millis")]
		public long TaskMaxWaitingInQueueMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("timed_out")]
		public bool TimedOut { get; init; }

		[JsonInclude]
		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards { get; init; }
	}

	[JsonConverter(typeof(ClusterHealthResponseV3Converter))]
	public partial class ClusterHealthResponseV3 : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards")]
		public int ActiveShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards_percent_as_number")]
		public double ActiveShardsPercentAsNumber { get; init; }

		[JsonInclude]
		[JsonPropertyName("cluster_name")]
		public string ClusterName { get; init; }

		[JsonInclude]
		[JsonPropertyName("delayed_unassigned_shards")]
		public int DelayedUnassignedShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; init; }

		[JsonInclude]
		[JsonPropertyName("initializing_shards")]
		public int InitializingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_data_nodes")]
		public int NumberOfDataNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_in_flight_fetch")]
		public int NumberOfInFlightFetch { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_nodes")]
		public int NumberOfNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_pending_tasks")]
		public int NumberOfPendingTasks { get; init; }

		[JsonInclude]
		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public Elastic.Clients.Elasticsearch.HealthStatus Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("task_max_waiting_in_queue_millis")]
		public long TaskMaxWaitingInQueueMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("timed_out")]
		public bool TimedOut { get; init; }

		[JsonInclude]
		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards { get; init; }
	}

	public class ClusterHealthResponseV3Converter : JsonConverter<ClusterHealthResponseV3>
	{
		public override ClusterHealthResponseV3 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var activePrimaryShards = 0;
			var activeShards = 0;
			var activeShardsPercent = 0.0;
			var clusterName = string.Empty;
			var delayedUnassigned = 0;
			ReadOnlyIndexNameDictionary<IndexHealthStats> indexHealthStats = default;
			var initializingShards = 0;
			var numberOfDataNodes = 0;
			var inFlight = 0;
			var nodes = 0;
			var pendingTasks = 0;
			var relocatingShards = 0;
			HealthStatus? status = null;
			long maxWaiting = 0;
			var timeOut = false;
			var unassigned = 0;

			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					if (reader.ValueTextEquals("active_primary_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						activePrimaryShards = value;
						continue;
					}

					if (reader.ValueTextEquals("active_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						activeShards = value;
						continue;
					}

					if (reader.ValueTextEquals("active_shards_percent_as_number"))
					{
						reader.Read();
						var value = reader.GetDouble();
						activeShardsPercent = value;
						continue;
					}

					if (reader.ValueTextEquals("cluster_name"))
					{
						reader.Read();
						var value = reader.GetString();
						clusterName = value;
						continue;
					}

					if (reader.ValueTextEquals("delayed_unassigned_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						delayedUnassigned = value;
						continue;
					}

					if (reader.ValueTextEquals("indices"))
					{
						reader.Read();
						var value = JsonSerializer.Deserialize<ReadOnlyIndexNameDictionary<IndexHealthStats>>(ref reader, options);
						indexHealthStats = value;
						continue;
					}

					if (reader.ValueTextEquals("number_of_data_nodes"))
					{
						reader.Read();
						var value = reader.GetInt32();
						numberOfDataNodes = value;
						continue;
					}

					if (reader.ValueTextEquals("number_of_in_flight_fetch"))
					{
						reader.Read();
						var value = reader.GetInt32();
						inFlight = value;
						continue;
					}

					if (reader.ValueTextEquals("number_of_nodes"))
					{
						reader.Read();
						var value = reader.GetInt32();
						nodes = value;
						continue;
					}

					if (reader.ValueTextEquals("number_of_pending_tasks"))
					{
						reader.Read();
						var value = reader.GetInt32();
						pendingTasks = value;
						continue;
					}

					if (reader.ValueTextEquals("relocating_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						relocatingShards = value;
						continue;
					}

					if (reader.ValueTextEquals("status"))
					{
						reader.Read();
						var value = JsonSerializer.Deserialize<HealthStatus>(ref reader, options);
						status = value;
						continue;
					}

					if (reader.ValueTextEquals("initializing_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						initializingShards = value;
						continue;
					}

					if (reader.ValueTextEquals("task_max_waiting_in_queue_millis"))
					{
						reader.Read();
						var value = reader.GetInt64();
						maxWaiting = value;
						continue;
					}

					if (reader.ValueTextEquals("timed_out"))
					{
						reader.Read();
						var value = reader.GetBoolean();
						timeOut = value;
						continue;
					}

					if (reader.ValueTextEquals("unassigned_shards"))
					{
						reader.Read();
						var value = reader.GetInt32();
						unassigned = value;
						continue;
					}
				}
			}

			return new ClusterHealthResponseV3()
			{
				ActivePrimaryShards = activePrimaryShards,
				ActiveShards = activeShards,
				ActiveShardsPercentAsNumber = activeShardsPercent,
				ClusterName = clusterName,
				DelayedUnassignedShards = delayedUnassigned,
				Indices = indexHealthStats,
				InitializingShards = initializingShards,
				NumberOfDataNodes = numberOfDataNodes,
				NumberOfInFlightFetch = inFlight,
				NumberOfNodes = nodes,
				NumberOfPendingTasks = pendingTasks,
				RelocatingShards = relocatingShards,
				Status = status.Value,
				TaskMaxWaitingInQueueMillis = maxWaiting,
				TimedOut = timeOut,
				UnassignedShards = unassigned,
			};
		}

		public override void Write(Utf8JsonWriter writer, ClusterHealthResponseV3 value, JsonSerializerOptions options) => throw new NotImplementedException();
	}

	[JsonConverter(typeof(ClusterHealthResponseV3Converter_BoolFlags))]
	public partial class ClusterHealthResponseV3_BoolFlags : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards")]
		public int ActiveShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards_percent_as_number")]
		public double ActiveShardsPercentAsNumber { get; init; }

		[JsonInclude]
		[JsonPropertyName("cluster_name")]
		public string ClusterName { get; init; }

		[JsonInclude]
		[JsonPropertyName("delayed_unassigned_shards")]
		public int DelayedUnassignedShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; init; }

		[JsonInclude]
		[JsonPropertyName("initializing_shards")]
		public int InitializingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_data_nodes")]
		public int NumberOfDataNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_in_flight_fetch")]
		public int NumberOfInFlightFetch { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_nodes")]
		public int NumberOfNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_pending_tasks")]
		public int NumberOfPendingTasks { get; init; }

		[JsonInclude]
		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public Elastic.Clients.Elasticsearch.HealthStatus Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("task_max_waiting_in_queue_millis")]
		public long TaskMaxWaitingInQueueMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("timed_out")]
		public bool TimedOut { get; init; }

		[JsonInclude]
		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards { get; init; }
	}

	public class ClusterHealthResponseV3Converter_BoolFlags : JsonConverter<ClusterHealthResponseV3_BoolFlags>
	{
		public override ClusterHealthResponseV3_BoolFlags Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var activePrimaryShards = 0;
			var seenPrimary = false;
			var activeShards = 0;
			var seenActive = false;
			var activeShardsPercent = 0.0;
			var seenPercent = false;
			var clusterName = string.Empty;
			var seenName = false;
			var delayedUnassigned = 0;
			var seenDelayed = false;
			ReadOnlyIndexNameDictionary<IndexHealthStats> indexHealthStats = default;
			var seenIndices = false;
			var initializingShards = 0;
			var seenInit = false;
			var numberOfDataNodes = 0;
			var seenDataNodes = false;
			var inFlight = 0;
			var seenInFlight = false;
			var nodes = 0;
			var seenNodes = false;
			var pendingTasks = 0;
			var seenPendingTasks = false;
			var relocatingShards = 0;
			var seenRelocating = false;
			HealthStatus? status = null;
			var seenStatus = false;
			long maxWaiting = 0;
			var seenMaxWaiting = false;
			var timeOut = false;
			var seenTimeOut = false;
			var unassigned = 0;
			var seenUnassigned = false;

			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					if (!seenPrimary && reader.ValueTextEquals("active_primary_shards"))
					{
						seenPrimary = true;
						reader.Read();
						var value = reader.GetInt32();
						activePrimaryShards = value;
						continue;
					}

					if (!seenActive && reader.ValueTextEquals("active_shards"))
					{
						seenActive = true;
						reader.Read();
						var value = reader.GetInt32();
						activeShards = value;
						continue;
					}

					if (!seenPercent && reader.ValueTextEquals("active_shards_percent_as_number"))
					{
						seenPercent = true;
						reader.Read();
						var value = reader.GetDouble();
						activeShardsPercent = value;
						continue;
					}

					if (!seenName && reader.ValueTextEquals("cluster_name"))
					{
						seenName = true;
						reader.Read();
						var value = reader.GetString();
						clusterName = value;
						continue;
					}

					if (!seenDelayed && reader.ValueTextEquals("delayed_unassigned_shards"))
					{
						seenDelayed = true;
						reader.Read();
						var value = reader.GetInt32();
						delayedUnassigned = value;
						continue;
					}

					if (!seenIndices && reader.ValueTextEquals("indices"))
					{
						seenIndices = true;
						reader.Read();
						var value = JsonSerializer.Deserialize<ReadOnlyIndexNameDictionary<IndexHealthStats>>(ref reader, options);
						indexHealthStats = value;
						continue;
					}

					if (!seenInit && reader.ValueTextEquals("initializing_shards"))
					{
						seenInit = true;
						reader.Read();
						var value = reader.GetInt32();
						initializingShards = value;
						continue;
					}

					if (!seenDataNodes && reader.ValueTextEquals("number_of_data_nodes"))
					{
						seenDataNodes = true;
						reader.Read();
						var value = reader.GetInt32();
						numberOfDataNodes = value;
						continue;
					}

					if (!seenInFlight && reader.ValueTextEquals("number_of_in_flight_fetch"))
					{
						seenInFlight = true;
						reader.Read();
						var value = reader.GetInt32();
						inFlight = value;
						continue;
					}

					if (!seenNodes && reader.ValueTextEquals("number_of_nodes"))
					{
						seenNodes = true;
						reader.Read();
						var value = reader.GetInt32();
						nodes = value;
						continue;
					}

					if (!seenPendingTasks && reader.ValueTextEquals("number_of_pending_tasks"))
					{
						seenPendingTasks = true;
						reader.Read();
						var value = reader.GetInt32();
						pendingTasks = value;
						continue;
					}

					if (!seenRelocating && reader.ValueTextEquals("relocating_shards"))
					{
						seenRelocating = true;
						reader.Read();
						var value = reader.GetInt32();
						relocatingShards = value;
						continue;
					}

					if (!seenStatus && reader.ValueTextEquals("status"))
					{
						seenStatus = true;
						reader.Read();
						var value = JsonSerializer.Deserialize<HealthStatus>(ref reader, options);
						status = value;
						continue;
					}

					if (!seenMaxWaiting && reader.ValueTextEquals("task_max_waiting_in_queue_millis"))
					{
						seenMaxWaiting = true;
						reader.Read();
						var value = reader.GetInt64();
						maxWaiting = value;
						continue;
					}

					if (!seenTimeOut && reader.ValueTextEquals("timed_out"))
					{
						seenTimeOut = true;
						reader.Read();
						var value = reader.GetBoolean();
						timeOut = value;
						continue;
					}

					if (!seenUnassigned && reader.ValueTextEquals("unassigned_shards"))
					{
						seenUnassigned = true;
						reader.Read();
						var value = reader.GetInt32();
						unassigned = value;
						continue;
					}
				}
			}

			return new ClusterHealthResponseV3_BoolFlags()
			{
				ActivePrimaryShards = activePrimaryShards,
				ActiveShards = activeShards,
				ActiveShardsPercentAsNumber = activeShardsPercent,
				ClusterName = clusterName,
				DelayedUnassignedShards = delayedUnassigned,
				Indices = indexHealthStats,
				InitializingShards = initializingShards,
				NumberOfDataNodes = numberOfDataNodes,
				NumberOfInFlightFetch = inFlight,
				NumberOfNodes = nodes,
				NumberOfPendingTasks = pendingTasks,
				RelocatingShards = relocatingShards,
				Status = status.Value,
				TaskMaxWaitingInQueueMillis = maxWaiting,
				TimedOut = timeOut,
				UnassignedShards = unassigned,
			};
		}

		public override void Write(Utf8JsonWriter writer, ClusterHealthResponseV3_BoolFlags value, JsonSerializerOptions options) => throw new NotImplementedException();
	}

	[JsonConverter(typeof(ClusterHealthResponseV3Converter_Span))]
	public partial class ClusterHealthResponseV3_Span : ResponseBase
	{
		[JsonInclude]
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards")]
		public int ActiveShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("active_shards_percent_as_number")]
		public double ActiveShardsPercentAsNumber { get; init; }

		[JsonInclude]
		[JsonPropertyName("cluster_name")]
		public string ClusterName { get; init; }

		[JsonInclude]
		[JsonPropertyName("delayed_unassigned_shards")]
		public int DelayedUnassignedShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("indices")]
		public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; init; }

		[JsonInclude]
		[JsonPropertyName("initializing_shards")]
		public int InitializingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_data_nodes")]
		public int NumberOfDataNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_in_flight_fetch")]
		public int NumberOfInFlightFetch { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_nodes")]
		public int NumberOfNodes { get; init; }

		[JsonInclude]
		[JsonPropertyName("number_of_pending_tasks")]
		public int NumberOfPendingTasks { get; init; }

		[JsonInclude]
		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards { get; init; }

		[JsonInclude]
		[JsonPropertyName("status")]
		public Elastic.Clients.Elasticsearch.HealthStatus Status { get; init; }

		[JsonInclude]
		[JsonPropertyName("task_max_waiting_in_queue_millis")]
		public long TaskMaxWaitingInQueueMillis { get; init; }

		[JsonInclude]
		[JsonPropertyName("timed_out")]
		public bool TimedOut { get; init; }

		[JsonInclude]
		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards { get; init; }
	}

	public class ClusterHealthResponseV3Converter_Span : JsonConverter<ClusterHealthResponseV3_Span>
	{
		private static ReadOnlySpan<byte> _activePrimary => Encoding.UTF8.GetBytes("active_primary_shards");
		private static ReadOnlySpan<byte> _active => Encoding.UTF8.GetBytes("active_shards");
		private static ReadOnlySpan<byte> _percent => Encoding.UTF8.GetBytes("active_shards_percent_as_number");
		private static ReadOnlySpan<byte> _name => Encoding.UTF8.GetBytes("cluster_name");
		private static ReadOnlySpan<byte> _delayed => Encoding.UTF8.GetBytes("delayed_unassigned_shards");
		private static ReadOnlySpan<byte> _indices => Encoding.UTF8.GetBytes("indices");
		private static ReadOnlySpan<byte> _dataNodes => Encoding.UTF8.GetBytes("number_of_data_nodes");
		private static ReadOnlySpan<byte> _inFlight => Encoding.UTF8.GetBytes("number_of_in_flight_fetch");
		private static ReadOnlySpan<byte> _nodes => Encoding.UTF8.GetBytes("number_of_nodes");
		private static ReadOnlySpan<byte> _pendingTasks => Encoding.UTF8.GetBytes("number_of_pending_tasks");
		private static ReadOnlySpan<byte> _relocating => Encoding.UTF8.GetBytes("relocating_shards");
		private static ReadOnlySpan<byte> _status => Encoding.UTF8.GetBytes("status");
		private static ReadOnlySpan<byte> _init => Encoding.UTF8.GetBytes("initializing_shards");
		private static ReadOnlySpan<byte> _waiting => Encoding.UTF8.GetBytes("task_max_waiting_in_queue_millis");
		private static ReadOnlySpan<byte> _timedOut => Encoding.UTF8.GetBytes("timed_out");
		private static ReadOnlySpan<byte> _unassigned => Encoding.UTF8.GetBytes("unassigned_shards");

		public override ClusterHealthResponseV3_Span Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
		{
			var activePrimaryShards = 0;
			var activeShards = 0;
			var activeShardsPercent = 0.0;
			var clusterName = string.Empty;
			var delayedUnassigned = 0;
			ReadOnlyIndexNameDictionary<IndexHealthStats> indexHealthStats = default;
			var initializingShards = 0;
			var numberOfDataNodes = 0;
			var inFlight = 0;
			var nodes = 0;
			var pendingTasks = 0;
			var relocatingShards = 0;
			HealthStatus? status = null;
			long maxWaiting = 0;
			var timeOut = false;
			var unassigned = 0;

			while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
			{
				if (reader.TokenType == JsonTokenType.PropertyName)
				{
					var span = reader.ValueSpan;

					if (span.SequenceEqual(_activePrimary))
					{
						reader.Read();
						var value = reader.GetInt32();
						activePrimaryShards = value;
						continue;
					}

					if (span.SequenceEqual(_active))
					{
						reader.Read();
						var value = reader.GetInt32();
						activeShards = value;
						continue;
					}

					if (span.SequenceEqual(_percent))
					{
						reader.Read();
						var value = reader.GetDouble();
						activeShardsPercent = value;
						continue;
					}

					if (span.SequenceEqual(_name))
					{
						reader.Read();
						var value = reader.GetString();
						clusterName = value;
						continue;
					}

					if (span.SequenceEqual(_delayed))
					{
						reader.Read();
						var value = reader.GetInt32();
						delayedUnassigned = value;
						continue;
					}

					if (span.SequenceEqual(_indices))
					{
						reader.Read();
						var value = JsonSerializer.Deserialize<ReadOnlyIndexNameDictionary<IndexHealthStats>>(ref reader, options);
						indexHealthStats = value;
						continue;
					}

					if (span.SequenceEqual(_dataNodes))
					{
						reader.Read();
						var value = reader.GetInt32();
						numberOfDataNodes = value;
						continue;
					}

					if (span.SequenceEqual(_inFlight))
					{
						reader.Read();
						var value = reader.GetInt32();
						inFlight = value;
						continue;
					}

					if (span.SequenceEqual(_nodes))
					{
						reader.Read();
						var value = reader.GetInt32();
						nodes = value;
						continue;
					}

					if (span.SequenceEqual(_pendingTasks))
					{
						reader.Read();
						var value = reader.GetInt32();
						pendingTasks = value;
						continue;
					}

					if (span.SequenceEqual(_relocating))
					{
						reader.Read();
						var value = reader.GetInt32();
						relocatingShards = value;
						continue;
					}

					if (span.SequenceEqual(_status))
					{
						reader.Read();
						var value = JsonSerializer.Deserialize<HealthStatus>(ref reader, options);
						status = value;
						continue;
					}

					if (span.SequenceEqual(_init))
					{
						reader.Read();
						var value = reader.GetInt32();
						initializingShards = value;
						continue;
					}

					if (span.SequenceEqual(_waiting))
					{
						reader.Read();
						var value = reader.GetInt64();
						maxWaiting = value;
						continue;
					}

					if (span.SequenceEqual(_timedOut))
					{
						reader.Read();
						var value = reader.GetBoolean();
						timeOut = value;
						continue;
					}

					if (span.SequenceEqual(_unassigned))
					{
						reader.Read();
						var value = reader.GetInt32();
						unassigned = value;
						continue;
					}
				}
			}

			return new ClusterHealthResponseV3_Span()
			{
				ActivePrimaryShards = activePrimaryShards,
				ActiveShards = activeShards,
				ActiveShardsPercentAsNumber = activeShardsPercent,
				ClusterName = clusterName,
				DelayedUnassignedShards = delayedUnassigned,
				Indices = indexHealthStats,
				InitializingShards = initializingShards,
				NumberOfDataNodes = numberOfDataNodes,
				NumberOfInFlightFetch = inFlight,
				NumberOfNodes = nodes,
				NumberOfPendingTasks = pendingTasks,
				RelocatingShards = relocatingShards,
				Status = status.Value,
				TaskMaxWaitingInQueueMillis = maxWaiting,
				TimedOut = timeOut,
				UnassignedShards = unassigned,
			};
		}

		public override void Write(Utf8JsonWriter writer, ClusterHealthResponseV3_Span value, JsonSerializerOptions options) => throw new NotImplementedException();
	}

	//[JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]
	//[JsonSerializable(typeof(ClusterHealthResponseV4))]
	//public partial class ClusterHealthResponseV4Context : JsonSerializerContext
	//{
	//}

	//public partial class ClusterHealthResponseV4 : ResponseBase
	//{
	//	[JsonInclude]
	//	[JsonPropertyName("active_primary_shards")]
	//	public int ActivePrimaryShards { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("active_shards")]
	//	public int ActiveShards { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("active_shards_percent_as_number")]
	//	public double ActiveShardsPercentAsNumber { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("cluster_name")]
	//	public string ClusterName { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("delayed_unassigned_shards")]
	//	public int DelayedUnassignedShards { get; set; }

	//	//[JsonInclude]
	//	//[JsonPropertyName("indices")]
	//	//public Elastic.Clients.Elasticsearch.ReadOnlyIndexNameDictionary<Elastic.Clients.Elasticsearch.Cluster.Health.IndexHealthStats>? Indices { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("initializing_shards")]
	//	public int InitializingShards { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("number_of_data_nodes")]
	//	public int NumberOfDataNodes { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("number_of_in_flight_fetch")]
	//	public int NumberOfInFlightFetch { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("number_of_nodes")]
	//	public int NumberOfNodes { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("number_of_pending_tasks")]
	//	public int NumberOfPendingTasks { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("relocating_shards")]
	//	public int RelocatingShards { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("status")]
	//	public Elastic.Clients.Elasticsearch.HealthStatus Status { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("task_max_waiting_in_queue_millis")]
	//	public long TaskMaxWaitingInQueueMillis { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("timed_out")]
	//	public bool TimedOut { get; set; }

	//	[JsonInclude]
	//	[JsonPropertyName("unassigned_shards")]
	//	public int UnassignedShards { get; set; }
	//}
}
