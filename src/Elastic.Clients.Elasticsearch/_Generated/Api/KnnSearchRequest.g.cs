// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public class KnnSearchRequestParameters : RequestParameters<KnnSearchRequestParameters>
	{
		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Routing? Routing { get => Q<Elastic.Clients.Elasticsearch.Routing?>("routing"); set => Q("routing", value); }
	}

	public partial class KnnSearchRequest : PlainRequestBase<KnnSearchRequestParameters>
	{
		public KnnSearchRequest(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceKnnSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Routing? Routing { get => Q<Elastic.Clients.Elasticsearch.Routing?>("routing"); set => Q("routing", value); }

		[JsonInclude]
		[JsonPropertyName("_source")]
		public Elastic.Clients.Elasticsearch.SourceConfig? Source { get; set; }

		[JsonInclude]
		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("stored_fields")]
		public Elastic.Clients.Elasticsearch.Fields? StoredFields { get; set; }

		[JsonInclude]
		[JsonPropertyName("fields")]
		public Elastic.Clients.Elasticsearch.Fields? Fields { get; set; }

		[JsonInclude]
		[JsonPropertyName("knn")]
		public Elastic.Clients.Elasticsearch.Query Knn { get; set; }
	}

	public sealed partial class KnnSearchRequestDescriptor<TDocument> : RequestDescriptorBase<KnnSearchRequestDescriptor<TDocument>, KnnSearchRequestParameters>
	{
		internal KnnSearchRequestDescriptor(Action<KnnSearchRequestDescriptor<TDocument>> configure) => configure.Invoke(this);
		public KnnSearchRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
		{
		}

		internal KnnSearchRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceKnnSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public KnnSearchRequestDescriptor<TDocument> Routing(Elastic.Clients.Elasticsearch.Routing? routing) => Qs("routing", routing);
		public KnnSearchRequestDescriptor<TDocument> Indices(Elastic.Clients.Elasticsearch.Indices indices)
		{
			RouteValues.Required("index", indices);
			return Self;
		}

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Query KnnValue { get; set; }

		private QueryDescriptor<TDocument> KnnDescriptor { get; set; }

		private Action<QueryDescriptor<TDocument>> KnnDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.SourceConfig? SourceValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? StoredFieldsValue { get; set; }

		public KnnSearchRequestDescriptor<TDocument> DocvalueFields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? docvalueFields)
		{
			DocvalueFieldsValue = docvalueFields;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Knn(Elastic.Clients.Elasticsearch.Query knn)
		{
			KnnDescriptor = null;
			KnnDescriptorAction = null;
			KnnValue = knn;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Knn(QueryDescriptor<TDocument> descriptor)
		{
			KnnValue = null;
			KnnDescriptorAction = null;
			KnnDescriptor = descriptor;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Knn(Action<QueryDescriptor<TDocument>> configure)
		{
			KnnValue = null;
			KnnDescriptorAction = null;
			KnnDescriptorAction = configure;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Source(Elastic.Clients.Elasticsearch.SourceConfig? source)
		{
			SourceValue = source;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Fields(Elastic.Clients.Elasticsearch.Fields? fields)
		{
			FieldsValue = fields;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> Fields<TValue>(Expression<Func<TDocument, TValue>> fields)
		{
			FieldsValue = fields;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> StoredFields(Elastic.Clients.Elasticsearch.Fields? storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public KnnSearchRequestDescriptor<TDocument> StoredFields<TValue>(Expression<Func<TDocument, TValue>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (DocvalueFieldsValue is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, DocvalueFieldsValue, options);
			}

			if (KnnDescriptor is not null)
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, KnnDescriptor, options);
			}
			else if (KnnDescriptorAction is not null)
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, new QueryDescriptor<TDocument>(KnnDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, KnnValue, options);
			}

			if (SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (FieldsValue is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, FieldsValue, options);
			}

			if (StoredFieldsValue is not null)
			{
				writer.WritePropertyName("stored_fields");
				JsonSerializer.Serialize(writer, StoredFieldsValue, options);
			}

			writer.WriteEndObject();
		}
	}

	public sealed partial class KnnSearchRequestDescriptor : RequestDescriptorBase<KnnSearchRequestDescriptor, KnnSearchRequestParameters>
	{
		internal KnnSearchRequestDescriptor(Action<KnnSearchRequestDescriptor> configure) => configure.Invoke(this);
		public KnnSearchRequestDescriptor(Elastic.Clients.Elasticsearch.Indices indices) : base(r => r.Required("index", indices))
		{
		}

		internal KnnSearchRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.NoNamespaceKnnSearch;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public KnnSearchRequestDescriptor Routing(Elastic.Clients.Elasticsearch.Routing? routing) => Qs("routing", routing);
		public KnnSearchRequestDescriptor Indices(Elastic.Clients.Elasticsearch.Indices indices)
		{
			RouteValues.Required("index", indices);
			return Self;
		}

		private IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? DocvalueFieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Query KnnValue { get; set; }

		private QueryDescriptor KnnDescriptor { get; set; }

		private Action<QueryDescriptor> KnnDescriptorAction { get; set; }

		private Elastic.Clients.Elasticsearch.SourceConfig? SourceValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? FieldsValue { get; set; }

		private Elastic.Clients.Elasticsearch.Fields? StoredFieldsValue { get; set; }

		public KnnSearchRequestDescriptor DocvalueFields(IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.FieldAndFormat>? docvalueFields)
		{
			DocvalueFieldsValue = docvalueFields;
			return Self;
		}

		public KnnSearchRequestDescriptor Knn(Elastic.Clients.Elasticsearch.Query knn)
		{
			KnnDescriptor = null;
			KnnDescriptorAction = null;
			KnnValue = knn;
			return Self;
		}

		public KnnSearchRequestDescriptor Knn(QueryDescriptor descriptor)
		{
			KnnValue = null;
			KnnDescriptorAction = null;
			KnnDescriptor = descriptor;
			return Self;
		}

		public KnnSearchRequestDescriptor Knn(Action<QueryDescriptor> configure)
		{
			KnnValue = null;
			KnnDescriptorAction = null;
			KnnDescriptorAction = configure;
			return Self;
		}

		public KnnSearchRequestDescriptor Source(Elastic.Clients.Elasticsearch.SourceConfig? source)
		{
			SourceValue = source;
			return Self;
		}

		public KnnSearchRequestDescriptor Fields(Elastic.Clients.Elasticsearch.Fields? fields)
		{
			FieldsValue = fields;
			return Self;
		}

		public KnnSearchRequestDescriptor Fields<TDocument, TValue>(Expression<Func<TDocument, TValue>> fields)
		{
			FieldsValue = fields;
			return Self;
		}

		public KnnSearchRequestDescriptor Fields<TDocument>(Expression<Func<TDocument, object>> fields)
		{
			FieldsValue = fields;
			return Self;
		}

		public KnnSearchRequestDescriptor StoredFields(Elastic.Clients.Elasticsearch.Fields? storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public KnnSearchRequestDescriptor StoredFields<TDocument, TValue>(Expression<Func<TDocument, TValue>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		public KnnSearchRequestDescriptor StoredFields<TDocument>(Expression<Func<TDocument, object>> storedFields)
		{
			StoredFieldsValue = storedFields;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (DocvalueFieldsValue is not null)
			{
				writer.WritePropertyName("docvalue_fields");
				JsonSerializer.Serialize(writer, DocvalueFieldsValue, options);
			}

			if (KnnDescriptor is not null)
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, KnnDescriptor, options);
			}
			else if (KnnDescriptorAction is not null)
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, new QueryDescriptor(KnnDescriptorAction), options);
			}
			else
			{
				writer.WritePropertyName("knn");
				JsonSerializer.Serialize(writer, KnnValue, options);
			}

			if (SourceValue is not null)
			{
				writer.WritePropertyName("_source");
				JsonSerializer.Serialize(writer, SourceValue, options);
			}

			if (FieldsValue is not null)
			{
				writer.WritePropertyName("fields");
				JsonSerializer.Serialize(writer, FieldsValue, options);
			}

			if (StoredFieldsValue is not null)
			{
				writer.WritePropertyName("stored_fields");
				JsonSerializer.Serialize(writer, StoredFieldsValue, options);
			}

			writer.WriteEndObject();
		}
	}
}