// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.SearchableSnapshots;

public sealed partial class MountRequestParameters : RequestParameters
{
	/// <summary>
	/// <para>
	/// The period to wait for the master node.
	/// If the master node is not available before the timeout expires, the request fails and returns an error.
	/// To indicate that the request should never timeout, set it to <c>-1</c>.
	/// </para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }

	/// <summary>
	/// <para>
	/// The mount option for the searchable snapshot index.
	/// </para>
	/// </summary>
	public string? Storage { get => Q<string?>("storage"); set => Q("storage", value); }

	/// <summary>
	/// <para>
	/// If true, the request blocks until the operation is complete.
	/// </para>
	/// </summary>
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }
}

/// <summary>
/// <para>
/// Mount a snapshot.
/// Mount a snapshot as a searchable snapshot index.
/// Do not use this API for snapshots managed by index lifecycle management (ILM).
/// Manually mounting ILM-managed snapshots can interfere with ILM processes.
/// </para>
/// </summary>
public sealed partial class MountRequest : PlainRequest<MountRequestParameters>
{
	public MountRequest(Elastic.Clients.Elasticsearch.Name repository, Elastic.Clients.Elasticsearch.Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SearchableSnapshotsMount;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "searchable_snapshots.mount";

	/// <summary>
	/// <para>
	/// The period to wait for the master node.
	/// If the master node is not available before the timeout expires, the request fails and returns an error.
	/// To indicate that the request should never timeout, set it to <c>-1</c>.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public Elastic.Clients.Elasticsearch.Duration? MasterTimeout { get => Q<Elastic.Clients.Elasticsearch.Duration?>("master_timeout"); set => Q("master_timeout", value); }

	/// <summary>
	/// <para>
	/// The mount option for the searchable snapshot index.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public string? Storage { get => Q<string?>("storage"); set => Q("storage", value); }

	/// <summary>
	/// <para>
	/// If true, the request blocks until the operation is complete.
	/// </para>
	/// </summary>
	[JsonIgnore]
	public bool? WaitForCompletion { get => Q<bool?>("wait_for_completion"); set => Q("wait_for_completion", value); }

	/// <summary>
	/// <para>
	/// The names of settings that should be removed from the index when it is mounted.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("ignore_index_settings")]
	public ICollection<string>? IgnoreIndexSettings { get; set; }

	/// <summary>
	/// <para>
	/// The name of the index contained in the snapshot whose data is to be mounted.
	/// If no <c>renamed_index</c> is specified, this name will also be used to create the new index.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("index")]
	public Elastic.Clients.Elasticsearch.IndexName Index { get; set; }

	/// <summary>
	/// <para>
	/// The settings that should be added to the index when it is mounted.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("index_settings")]
	public IDictionary<string, object>? IndexSettings { get; set; }

	/// <summary>
	/// <para>
	/// The name of the index that will be created.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("renamed_index")]
	public Elastic.Clients.Elasticsearch.IndexName? RenamedIndex { get; set; }
}

/// <summary>
/// <para>
/// Mount a snapshot.
/// Mount a snapshot as a searchable snapshot index.
/// Do not use this API for snapshots managed by index lifecycle management (ILM).
/// Manually mounting ILM-managed snapshots can interfere with ILM processes.
/// </para>
/// </summary>
public sealed partial class MountRequestDescriptor : RequestDescriptor<MountRequestDescriptor, MountRequestParameters>
{
	internal MountRequestDescriptor(Action<MountRequestDescriptor> configure) => configure.Invoke(this);

	public MountRequestDescriptor(Elastic.Clients.Elasticsearch.Name repository, Elastic.Clients.Elasticsearch.Name snapshot) : base(r => r.Required("repository", repository).Required("snapshot", snapshot))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SearchableSnapshotsMount;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "searchable_snapshots.mount";

	public MountRequestDescriptor MasterTimeout(Elastic.Clients.Elasticsearch.Duration? masterTimeout) => Qs("master_timeout", masterTimeout);
	public MountRequestDescriptor Storage(string? storage) => Qs("storage", storage);
	public MountRequestDescriptor WaitForCompletion(bool? waitForCompletion = true) => Qs("wait_for_completion", waitForCompletion);

	public MountRequestDescriptor Repository(Elastic.Clients.Elasticsearch.Name repository)
	{
		RouteValues.Required("repository", repository);
		return Self;
	}

	public MountRequestDescriptor Snapshot(Elastic.Clients.Elasticsearch.Name snapshot)
	{
		RouteValues.Required("snapshot", snapshot);
		return Self;
	}

	private ICollection<string>? IgnoreIndexSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexName IndexValue { get; set; }
	private IDictionary<string, object>? IndexSettingsValue { get; set; }
	private Elastic.Clients.Elasticsearch.IndexName? RenamedIndexValue { get; set; }

	/// <summary>
	/// <para>
	/// The names of settings that should be removed from the index when it is mounted.
	/// </para>
	/// </summary>
	public MountRequestDescriptor IgnoreIndexSettings(ICollection<string>? ignoreIndexSettings)
	{
		IgnoreIndexSettingsValue = ignoreIndexSettings;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the index contained in the snapshot whose data is to be mounted.
	/// If no <c>renamed_index</c> is specified, this name will also be used to create the new index.
	/// </para>
	/// </summary>
	public MountRequestDescriptor Index(Elastic.Clients.Elasticsearch.IndexName index)
	{
		IndexValue = index;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The settings that should be added to the index when it is mounted.
	/// </para>
	/// </summary>
	public MountRequestDescriptor IndexSettings(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		IndexSettingsValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the index that will be created.
	/// </para>
	/// </summary>
	public MountRequestDescriptor RenamedIndex(Elastic.Clients.Elasticsearch.IndexName? renamedIndex)
	{
		RenamedIndexValue = renamedIndex;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (IgnoreIndexSettingsValue is not null)
		{
			writer.WritePropertyName("ignore_index_settings");
			JsonSerializer.Serialize(writer, IgnoreIndexSettingsValue, options);
		}

		writer.WritePropertyName("index");
		JsonSerializer.Serialize(writer, IndexValue, options);
		if (IndexSettingsValue is not null)
		{
			writer.WritePropertyName("index_settings");
			JsonSerializer.Serialize(writer, IndexSettingsValue, options);
		}

		if (RenamedIndexValue is not null)
		{
			writer.WritePropertyName("renamed_index");
			JsonSerializer.Serialize(writer, RenamedIndexValue, options);
		}

		writer.WriteEndObject();
	}
}