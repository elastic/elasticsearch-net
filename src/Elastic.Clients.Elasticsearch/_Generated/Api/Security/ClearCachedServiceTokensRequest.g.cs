// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class ClearCachedServiceTokensRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Clear service account token caches.
/// </para>
/// <para>
/// Evict a subset of all entries from the service account token caches.
/// Two separate caches exist for service account tokens: one cache for tokens backed by the <c>service_tokens</c> file, and another for tokens backed by the <c>.security</c> index.
/// This API clears matching entries from both caches.
/// </para>
/// <para>
/// The cache for service account tokens backed by the <c>.security</c> index is cleared automatically on state changes of the security index.
/// The cache for tokens backed by the <c>service_tokens</c> file is cleared automatically on file changes.
/// </para>
/// </summary>
public sealed partial class ClearCachedServiceTokensRequest : PlainRequest<ClearCachedServiceTokensRequestParameters>
{
	public ClearCachedServiceTokensRequest(string ns, string service, Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("namespace", ns).Required("service", service).Required("name", name))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityClearCachedServiceTokens;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "security.clear_cached_service_tokens";
}

/// <summary>
/// <para>
/// Clear service account token caches.
/// </para>
/// <para>
/// Evict a subset of all entries from the service account token caches.
/// Two separate caches exist for service account tokens: one cache for tokens backed by the <c>service_tokens</c> file, and another for tokens backed by the <c>.security</c> index.
/// This API clears matching entries from both caches.
/// </para>
/// <para>
/// The cache for service account tokens backed by the <c>.security</c> index is cleared automatically on state changes of the security index.
/// The cache for tokens backed by the <c>service_tokens</c> file is cleared automatically on file changes.
/// </para>
/// </summary>
public sealed partial class ClearCachedServiceTokensRequestDescriptor : RequestDescriptor<ClearCachedServiceTokensRequestDescriptor, ClearCachedServiceTokensRequestParameters>
{
	internal ClearCachedServiceTokensRequestDescriptor(Action<ClearCachedServiceTokensRequestDescriptor> configure) => configure.Invoke(this);

	public ClearCachedServiceTokensRequestDescriptor(string ns, string service, Elastic.Clients.Elasticsearch.Names name) : base(r => r.Required("namespace", ns).Required("service", service).Required("name", name))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityClearCachedServiceTokens;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => false;

	internal override string OperationName => "security.clear_cached_service_tokens";

	public ClearCachedServiceTokensRequestDescriptor Name(Elastic.Clients.Elasticsearch.Names name)
	{
		RouteValues.Required("name", name);
		return Self;
	}

	public ClearCachedServiceTokensRequestDescriptor Namespace(string ns)
	{
		RouteValues.Required("namespace", ns);
		return Self;
	}

	public ClearCachedServiceTokensRequestDescriptor Service(string service)
	{
		RouteValues.Required("service", service);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}