// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class SamlPrepareAuthenticationRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Prepare SAML authentication.
/// </para>
/// <para>
/// Create a SAML authentication request (<c>&lt;AuthnRequest></c>) as a URL string based on the configuration of the respective SAML realm in Elasticsearch.
/// </para>
/// <para>
/// NOTE: This API is intended for use by custom web applications other than Kibana.
/// If you are using Kibana, refer to the documentation for configuring SAML single-sign-on on the Elastic Stack.
/// </para>
/// <para>
/// This API returns a URL pointing to the SAML Identity Provider.
/// You can use the URL to redirect the browser of the user in order to continue the authentication process.
/// The URL includes a single parameter named <c>SAMLRequest</c>, which contains a SAML Authentication request that is deflated and Base64 encoded.
/// If the configuration dictates that SAML authentication requests should be signed, the URL has two extra parameters named <c>SigAlg</c> and <c>Signature</c>.
/// These parameters contain the algorithm used for the signature and the signature value itself.
/// It also returns a random string that uniquely identifies this SAML Authentication request.
/// The caller of this API needs to store this identifier as it needs to be used in a following step of the authentication process.
/// </para>
/// </summary>
public sealed partial class SamlPrepareAuthenticationRequest : PlainRequest<SamlPrepareAuthenticationRequestParameters>
{
	internal override ApiUrls ApiUrls => ApiUrlLookup.SecuritySamlPrepareAuthentication;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.saml_prepare_authentication";

	/// <summary>
	/// <para>
	/// The Assertion Consumer Service URL that matches the one of the SAML realms in Elasticsearch.
	/// The realm is used to generate the authentication request. You must specify either this parameter or the <c>realm</c> parameter.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("acs")]
	public string? Acs { get; set; }

	/// <summary>
	/// <para>
	/// The name of the SAML realm in Elasticsearch for which the configuration is used to generate the authentication request.
	/// You must specify either this parameter or the <c>acs</c> parameter.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("realm")]
	public string? Realm { get; set; }

	/// <summary>
	/// <para>
	/// A string that will be included in the redirect URL that this API returns as the <c>RelayState</c> query parameter.
	/// If the Authentication Request is signed, this value is used as part of the signature computation.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("relay_state")]
	public string? RelayState { get; set; }
}

/// <summary>
/// <para>
/// Prepare SAML authentication.
/// </para>
/// <para>
/// Create a SAML authentication request (<c>&lt;AuthnRequest></c>) as a URL string based on the configuration of the respective SAML realm in Elasticsearch.
/// </para>
/// <para>
/// NOTE: This API is intended for use by custom web applications other than Kibana.
/// If you are using Kibana, refer to the documentation for configuring SAML single-sign-on on the Elastic Stack.
/// </para>
/// <para>
/// This API returns a URL pointing to the SAML Identity Provider.
/// You can use the URL to redirect the browser of the user in order to continue the authentication process.
/// The URL includes a single parameter named <c>SAMLRequest</c>, which contains a SAML Authentication request that is deflated and Base64 encoded.
/// If the configuration dictates that SAML authentication requests should be signed, the URL has two extra parameters named <c>SigAlg</c> and <c>Signature</c>.
/// These parameters contain the algorithm used for the signature and the signature value itself.
/// It also returns a random string that uniquely identifies this SAML Authentication request.
/// The caller of this API needs to store this identifier as it needs to be used in a following step of the authentication process.
/// </para>
/// </summary>
public sealed partial class SamlPrepareAuthenticationRequestDescriptor : RequestDescriptor<SamlPrepareAuthenticationRequestDescriptor, SamlPrepareAuthenticationRequestParameters>
{
	internal SamlPrepareAuthenticationRequestDescriptor(Action<SamlPrepareAuthenticationRequestDescriptor> configure) => configure.Invoke(this);

	public SamlPrepareAuthenticationRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecuritySamlPrepareAuthentication;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.saml_prepare_authentication";

	private string? AcsValue { get; set; }
	private string? RealmValue { get; set; }
	private string? RelayStateValue { get; set; }

	/// <summary>
	/// <para>
	/// The Assertion Consumer Service URL that matches the one of the SAML realms in Elasticsearch.
	/// The realm is used to generate the authentication request. You must specify either this parameter or the <c>realm</c> parameter.
	/// </para>
	/// </summary>
	public SamlPrepareAuthenticationRequestDescriptor Acs(string? acs)
	{
		AcsValue = acs;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the SAML realm in Elasticsearch for which the configuration is used to generate the authentication request.
	/// You must specify either this parameter or the <c>acs</c> parameter.
	/// </para>
	/// </summary>
	public SamlPrepareAuthenticationRequestDescriptor Realm(string? realm)
	{
		RealmValue = realm;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A string that will be included in the redirect URL that this API returns as the <c>RelayState</c> query parameter.
	/// If the Authentication Request is signed, this value is used as part of the signature computation.
	/// </para>
	/// </summary>
	public SamlPrepareAuthenticationRequestDescriptor RelayState(string? relayState)
	{
		RelayStateValue = relayState;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(AcsValue))
		{
			writer.WritePropertyName("acs");
			writer.WriteStringValue(AcsValue);
		}

		if (!string.IsNullOrEmpty(RealmValue))
		{
			writer.WritePropertyName("realm");
			writer.WriteStringValue(RealmValue);
		}

		if (!string.IsNullOrEmpty(RelayStateValue))
		{
			writer.WritePropertyName("relay_state");
			writer.WriteStringValue(RelayStateValue);
		}

		writer.WriteEndObject();
	}
}