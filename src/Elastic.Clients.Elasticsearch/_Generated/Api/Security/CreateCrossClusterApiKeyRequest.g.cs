// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class CreateCrossClusterApiKeyRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Create a cross-cluster API key.
/// </para>
/// <para>
/// Create an API key of the <c>cross_cluster</c> type for the API key based remote cluster access.
/// A <c>cross_cluster</c> API key cannot be used to authenticate through the REST interface.
/// </para>
/// <para>
/// IMPORTANT: To authenticate this request you must use a credential that is not an API key. Even if you use an API key that has the required privilege, the API returns an error.
/// </para>
/// <para>
/// Cross-cluster API keys are created by the Elasticsearch API key service, which is automatically enabled.
/// </para>
/// <para>
/// NOTE: Unlike REST API keys, a cross-cluster API key does not capture permissions of the authenticated user. The API key’s effective permission is exactly as specified with the <c>access</c> property.
/// </para>
/// <para>
/// A successful request returns a JSON structure that contains the API key, its unique ID, and its name. If applicable, it also returns expiration information for the API key in milliseconds.
/// </para>
/// <para>
/// By default, API keys never expire. You can specify expiration information when you create the API keys.
/// </para>
/// <para>
/// Cross-cluster API keys can only be updated with the update cross-cluster API key API.
/// Attempting to update them with the update REST API key API or the bulk update REST API keys API will result in an error.
/// </para>
/// </summary>
public sealed partial class CreateCrossClusterApiKeyRequest : PlainRequest<CreateCrossClusterApiKeyRequestParameters>
{
	[JsonConstructor]
	internal CreateCrossClusterApiKeyRequest()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityCreateCrossClusterApiKey;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.create_cross_cluster_api_key";

	/// <summary>
	/// <para>
	/// The access to be granted to this API key.
	/// The access is composed of permissions for cross-cluster search and cross-cluster replication.
	/// At least one of them must be specified.
	/// </para>
	/// <para>
	/// NOTE: No explicit privileges should be specified for either search or replication access.
	/// The creation process automatically converts the access specification to a role descriptor which has relevant privileges assigned accordingly.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("access")]
	public Elastic.Clients.Elasticsearch.Security.Access Access { get; set; }

	/// <summary>
	/// <para>
	/// Expiration time for the API key.
	/// By default, API keys never expire.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("expiration")]
	public Elastic.Clients.Elasticsearch.Duration? Expiration { get; set; }

	/// <summary>
	/// <para>
	/// Arbitrary metadata that you want to associate with the API key.
	/// It supports nested data structure.
	/// Within the metadata object, keys beginning with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("metadata")]
	public IDictionary<string, object>? Metadata { get; set; }

	/// <summary>
	/// <para>
	/// Specifies the name for this API key.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("name")]
	public Elastic.Clients.Elasticsearch.Name Name { get; set; }
}

/// <summary>
/// <para>
/// Create a cross-cluster API key.
/// </para>
/// <para>
/// Create an API key of the <c>cross_cluster</c> type for the API key based remote cluster access.
/// A <c>cross_cluster</c> API key cannot be used to authenticate through the REST interface.
/// </para>
/// <para>
/// IMPORTANT: To authenticate this request you must use a credential that is not an API key. Even if you use an API key that has the required privilege, the API returns an error.
/// </para>
/// <para>
/// Cross-cluster API keys are created by the Elasticsearch API key service, which is automatically enabled.
/// </para>
/// <para>
/// NOTE: Unlike REST API keys, a cross-cluster API key does not capture permissions of the authenticated user. The API key’s effective permission is exactly as specified with the <c>access</c> property.
/// </para>
/// <para>
/// A successful request returns a JSON structure that contains the API key, its unique ID, and its name. If applicable, it also returns expiration information for the API key in milliseconds.
/// </para>
/// <para>
/// By default, API keys never expire. You can specify expiration information when you create the API keys.
/// </para>
/// <para>
/// Cross-cluster API keys can only be updated with the update cross-cluster API key API.
/// Attempting to update them with the update REST API key API or the bulk update REST API keys API will result in an error.
/// </para>
/// </summary>
public sealed partial class CreateCrossClusterApiKeyRequestDescriptor<TDocument> : RequestDescriptor<CreateCrossClusterApiKeyRequestDescriptor<TDocument>, CreateCrossClusterApiKeyRequestParameters>
{
	internal CreateCrossClusterApiKeyRequestDescriptor(Action<CreateCrossClusterApiKeyRequestDescriptor<TDocument>> configure) => configure.Invoke(this);

	public CreateCrossClusterApiKeyRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityCreateCrossClusterApiKey;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.create_cross_cluster_api_key";

	private Elastic.Clients.Elasticsearch.Security.Access AccessValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.AccessDescriptor<TDocument> AccessDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.AccessDescriptor<TDocument>> AccessDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? ExpirationValue { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private Elastic.Clients.Elasticsearch.Name NameValue { get; set; }

	/// <summary>
	/// <para>
	/// The access to be granted to this API key.
	/// The access is composed of permissions for cross-cluster search and cross-cluster replication.
	/// At least one of them must be specified.
	/// </para>
	/// <para>
	/// NOTE: No explicit privileges should be specified for either search or replication access.
	/// The creation process automatically converts the access specification to a role descriptor which has relevant privileges assigned accordingly.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Access(Elastic.Clients.Elasticsearch.Security.Access access)
	{
		AccessDescriptor = null;
		AccessDescriptorAction = null;
		AccessValue = access;
		return Self;
	}

	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Access(Elastic.Clients.Elasticsearch.Security.AccessDescriptor<TDocument> descriptor)
	{
		AccessValue = null;
		AccessDescriptorAction = null;
		AccessDescriptor = descriptor;
		return Self;
	}

	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Access(Action<Elastic.Clients.Elasticsearch.Security.AccessDescriptor<TDocument>> configure)
	{
		AccessValue = null;
		AccessDescriptor = null;
		AccessDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Expiration time for the API key.
	/// By default, API keys never expire.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Expiration(Elastic.Clients.Elasticsearch.Duration? expiration)
	{
		ExpirationValue = expiration;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Arbitrary metadata that you want to associate with the API key.
	/// It supports nested data structure.
	/// Within the metadata object, keys beginning with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// Specifies the name for this API key.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor<TDocument> Name(Elastic.Clients.Elasticsearch.Name name)
	{
		NameValue = name;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AccessDescriptor is not null)
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, AccessDescriptor, options);
		}
		else if (AccessDescriptorAction is not null)
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.AccessDescriptor<TDocument>(AccessDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, AccessValue, options);
		}

		if (ExpirationValue is not null)
		{
			writer.WritePropertyName("expiration");
			JsonSerializer.Serialize(writer, ExpirationValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		writer.WritePropertyName("name");
		JsonSerializer.Serialize(writer, NameValue, options);
		writer.WriteEndObject();
	}
}

/// <summary>
/// <para>
/// Create a cross-cluster API key.
/// </para>
/// <para>
/// Create an API key of the <c>cross_cluster</c> type for the API key based remote cluster access.
/// A <c>cross_cluster</c> API key cannot be used to authenticate through the REST interface.
/// </para>
/// <para>
/// IMPORTANT: To authenticate this request you must use a credential that is not an API key. Even if you use an API key that has the required privilege, the API returns an error.
/// </para>
/// <para>
/// Cross-cluster API keys are created by the Elasticsearch API key service, which is automatically enabled.
/// </para>
/// <para>
/// NOTE: Unlike REST API keys, a cross-cluster API key does not capture permissions of the authenticated user. The API key’s effective permission is exactly as specified with the <c>access</c> property.
/// </para>
/// <para>
/// A successful request returns a JSON structure that contains the API key, its unique ID, and its name. If applicable, it also returns expiration information for the API key in milliseconds.
/// </para>
/// <para>
/// By default, API keys never expire. You can specify expiration information when you create the API keys.
/// </para>
/// <para>
/// Cross-cluster API keys can only be updated with the update cross-cluster API key API.
/// Attempting to update them with the update REST API key API or the bulk update REST API keys API will result in an error.
/// </para>
/// </summary>
public sealed partial class CreateCrossClusterApiKeyRequestDescriptor : RequestDescriptor<CreateCrossClusterApiKeyRequestDescriptor, CreateCrossClusterApiKeyRequestParameters>
{
	internal CreateCrossClusterApiKeyRequestDescriptor(Action<CreateCrossClusterApiKeyRequestDescriptor> configure) => configure.Invoke(this);

	public CreateCrossClusterApiKeyRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityCreateCrossClusterApiKey;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.create_cross_cluster_api_key";

	private Elastic.Clients.Elasticsearch.Security.Access AccessValue { get; set; }
	private Elastic.Clients.Elasticsearch.Security.AccessDescriptor AccessDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Security.AccessDescriptor> AccessDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Duration? ExpirationValue { get; set; }
	private IDictionary<string, object>? MetadataValue { get; set; }
	private Elastic.Clients.Elasticsearch.Name NameValue { get; set; }

	/// <summary>
	/// <para>
	/// The access to be granted to this API key.
	/// The access is composed of permissions for cross-cluster search and cross-cluster replication.
	/// At least one of them must be specified.
	/// </para>
	/// <para>
	/// NOTE: No explicit privileges should be specified for either search or replication access.
	/// The creation process automatically converts the access specification to a role descriptor which has relevant privileges assigned accordingly.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor Access(Elastic.Clients.Elasticsearch.Security.Access access)
	{
		AccessDescriptor = null;
		AccessDescriptorAction = null;
		AccessValue = access;
		return Self;
	}

	public CreateCrossClusterApiKeyRequestDescriptor Access(Elastic.Clients.Elasticsearch.Security.AccessDescriptor descriptor)
	{
		AccessValue = null;
		AccessDescriptorAction = null;
		AccessDescriptor = descriptor;
		return Self;
	}

	public CreateCrossClusterApiKeyRequestDescriptor Access(Action<Elastic.Clients.Elasticsearch.Security.AccessDescriptor> configure)
	{
		AccessValue = null;
		AccessDescriptor = null;
		AccessDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Expiration time for the API key.
	/// By default, API keys never expire.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor Expiration(Elastic.Clients.Elasticsearch.Duration? expiration)
	{
		ExpirationValue = expiration;
		return Self;
	}

	/// <summary>
	/// <para>
	/// Arbitrary metadata that you want to associate with the API key.
	/// It supports nested data structure.
	/// Within the metadata object, keys beginning with <c>_</c> are reserved for system usage.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>
	/// Specifies the name for this API key.
	/// </para>
	/// </summary>
	public CreateCrossClusterApiKeyRequestDescriptor Name(Elastic.Clients.Elasticsearch.Name name)
	{
		NameValue = name;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AccessDescriptor is not null)
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, AccessDescriptor, options);
		}
		else if (AccessDescriptorAction is not null)
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Security.AccessDescriptor(AccessDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("access");
			JsonSerializer.Serialize(writer, AccessValue, options);
		}

		if (ExpirationValue is not null)
		{
			writer.WritePropertyName("expiration");
			JsonSerializer.Serialize(writer, ExpirationValue, options);
		}

		if (MetadataValue is not null)
		{
			writer.WritePropertyName("metadata");
			JsonSerializer.Serialize(writer, MetadataValue, options);
		}

		writer.WritePropertyName("name");
		JsonSerializer.Serialize(writer, NameValue, options);
		writer.WriteEndObject();
	}
}