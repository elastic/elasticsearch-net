// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class OidcPrepareAuthenticationRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Prepare OpenID connect authentication.
/// </para>
/// <para>
/// Create an oAuth 2.0 authentication request as a URL string based on the configuration of the OpenID Connect authentication realm in Elasticsearch.
/// </para>
/// <para>
/// The response of this API is a URL pointing to the Authorization Endpoint of the configured OpenID Connect Provider, which can be used to redirect the browser of the user in order to continue the authentication process.
/// </para>
/// <para>
/// Elasticsearch exposes all the necessary OpenID Connect related functionality with the OpenID Connect APIs.
/// These APIs are used internally by Kibana in order to provide OpenID Connect based authentication, but can also be used by other, custom web applications or other clients.
/// </para>
/// </summary>
public sealed partial class OidcPrepareAuthenticationRequest : PlainRequest<OidcPrepareAuthenticationRequestParameters>
{
	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityOidcPrepareAuthentication;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.oidc_prepare_authentication";

	/// <summary>
	/// <para>
	/// In the case of a third party initiated single sign on, this is the issuer identifier for the OP that the RP is to send the authentication request to.
	/// It cannot be specified when <em>realm</em> is specified.
	/// One of <em>realm</em> or <em>iss</em> is required.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("iss")]
	public string? Iss { get; set; }

	/// <summary>
	/// <para>
	/// In the case of a third party initiated single sign on, it is a string value that is included in the authentication request as the <em>login_hint</em> parameter.
	/// This parameter is not valid when <em>realm</em> is specified.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("login_hint")]
	public string? LoginHint { get; set; }

	/// <summary>
	/// <para>
	/// The value used to associate a client session with an ID token and to mitigate replay attacks.
	/// If the caller of the API does not provide a value, Elasticsearch will generate one with sufficient entropy and return it in the response.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("nonce")]
	public string? Nonce { get; set; }

	/// <summary>
	/// <para>
	/// The name of the OpenID Connect realm in Elasticsearch the configuration of which should be used in order to generate the authentication request.
	/// It cannot be specified when <em>iss</em> is specified.
	/// One of <em>realm</em> or <em>iss</em> is required.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("realm")]
	public string? Realm { get; set; }

	/// <summary>
	/// <para>
	/// The value used to maintain state between the authentication request and the response, typically used as a Cross-Site Request Forgery mitigation.
	/// If the caller of the API does not provide a value, Elasticsearch will generate one with sufficient entropy and return it in the response.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("state")]
	public string? State { get; set; }
}

/// <summary>
/// <para>
/// Prepare OpenID connect authentication.
/// </para>
/// <para>
/// Create an oAuth 2.0 authentication request as a URL string based on the configuration of the OpenID Connect authentication realm in Elasticsearch.
/// </para>
/// <para>
/// The response of this API is a URL pointing to the Authorization Endpoint of the configured OpenID Connect Provider, which can be used to redirect the browser of the user in order to continue the authentication process.
/// </para>
/// <para>
/// Elasticsearch exposes all the necessary OpenID Connect related functionality with the OpenID Connect APIs.
/// These APIs are used internally by Kibana in order to provide OpenID Connect based authentication, but can also be used by other, custom web applications or other clients.
/// </para>
/// </summary>
public sealed partial class OidcPrepareAuthenticationRequestDescriptor : RequestDescriptor<OidcPrepareAuthenticationRequestDescriptor, OidcPrepareAuthenticationRequestParameters>
{
	internal OidcPrepareAuthenticationRequestDescriptor(Action<OidcPrepareAuthenticationRequestDescriptor> configure) => configure.Invoke(this);

	public OidcPrepareAuthenticationRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityOidcPrepareAuthentication;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.oidc_prepare_authentication";

	private string? IssValue { get; set; }
	private string? LoginHintValue { get; set; }
	private string? NonceValue { get; set; }
	private string? RealmValue { get; set; }
	private string? StateValue { get; set; }

	/// <summary>
	/// <para>
	/// In the case of a third party initiated single sign on, this is the issuer identifier for the OP that the RP is to send the authentication request to.
	/// It cannot be specified when <em>realm</em> is specified.
	/// One of <em>realm</em> or <em>iss</em> is required.
	/// </para>
	/// </summary>
	public OidcPrepareAuthenticationRequestDescriptor Iss(string? iss)
	{
		IssValue = iss;
		return Self;
	}

	/// <summary>
	/// <para>
	/// In the case of a third party initiated single sign on, it is a string value that is included in the authentication request as the <em>login_hint</em> parameter.
	/// This parameter is not valid when <em>realm</em> is specified.
	/// </para>
	/// </summary>
	public OidcPrepareAuthenticationRequestDescriptor LoginHint(string? loginHint)
	{
		LoginHintValue = loginHint;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The value used to associate a client session with an ID token and to mitigate replay attacks.
	/// If the caller of the API does not provide a value, Elasticsearch will generate one with sufficient entropy and return it in the response.
	/// </para>
	/// </summary>
	public OidcPrepareAuthenticationRequestDescriptor Nonce(string? nonce)
	{
		NonceValue = nonce;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The name of the OpenID Connect realm in Elasticsearch the configuration of which should be used in order to generate the authentication request.
	/// It cannot be specified when <em>iss</em> is specified.
	/// One of <em>realm</em> or <em>iss</em> is required.
	/// </para>
	/// </summary>
	public OidcPrepareAuthenticationRequestDescriptor Realm(string? realm)
	{
		RealmValue = realm;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The value used to maintain state between the authentication request and the response, typically used as a Cross-Site Request Forgery mitigation.
	/// If the caller of the API does not provide a value, Elasticsearch will generate one with sufficient entropy and return it in the response.
	/// </para>
	/// </summary>
	public OidcPrepareAuthenticationRequestDescriptor State(string? state)
	{
		StateValue = state;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(IssValue))
		{
			writer.WritePropertyName("iss");
			writer.WriteStringValue(IssValue);
		}

		if (!string.IsNullOrEmpty(LoginHintValue))
		{
			writer.WritePropertyName("login_hint");
			writer.WriteStringValue(LoginHintValue);
		}

		if (!string.IsNullOrEmpty(NonceValue))
		{
			writer.WritePropertyName("nonce");
			writer.WriteStringValue(NonceValue);
		}

		if (!string.IsNullOrEmpty(RealmValue))
		{
			writer.WritePropertyName("realm");
			writer.WriteStringValue(RealmValue);
		}

		if (!string.IsNullOrEmpty(StateValue))
		{
			writer.WritePropertyName("state");
			writer.WriteStringValue(StateValue);
		}

		writer.WriteEndObject();
	}
}