// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class DelegatePkiRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Delegate PKI authentication.
/// </para>
/// <para>
/// This API implements the exchange of an X509Certificate chain for an Elasticsearch access token.
/// The certificate chain is validated, according to RFC 5280, by sequentially considering the trust configuration of every installed PKI realm that has <c>delegation.enabled</c> set to <c>true</c>.
/// A successfully trusted client certificate is also subject to the validation of the subject distinguished name according to thw <c>username_pattern</c> of the respective realm.
/// </para>
/// <para>
/// This API is called by smart and trusted proxies, such as Kibana, which terminate the user's TLS session but still want to authenticate the user by using a PKI realm—-​as if the user connected directly to Elasticsearch.
/// </para>
/// <para>
/// IMPORTANT: The association between the subject public key in the target certificate and the corresponding private key is not validated.
/// This is part of the TLS authentication process and it is delegated to the proxy that calls this API.
/// The proxy is trusted to have performed the TLS authentication and this API translates that authentication into an Elasticsearch access token.
/// </para>
/// </summary>
public sealed partial class DelegatePkiRequest : PlainRequest<DelegatePkiRequestParameters>
{
	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityDelegatePki;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.delegate_pki";

	/// <summary>
	/// <para>
	/// The X509Certificate chain, which is represented as an ordered string array.
	/// Each string in the array is a base64-encoded (Section 4 of RFC4648 - not base64url-encoded) of the certificate's DER encoding.
	/// </para>
	/// <para>
	/// The first element is the target certificate that contains the subject distinguished name that is requesting access.
	/// This may be followed by additional certificates; each subsequent certificate is used to certify the previous one.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("x509_certificate_chain")]
	public ICollection<string> X509CertificateChain { get; set; }
}

/// <summary>
/// <para>
/// Delegate PKI authentication.
/// </para>
/// <para>
/// This API implements the exchange of an X509Certificate chain for an Elasticsearch access token.
/// The certificate chain is validated, according to RFC 5280, by sequentially considering the trust configuration of every installed PKI realm that has <c>delegation.enabled</c> set to <c>true</c>.
/// A successfully trusted client certificate is also subject to the validation of the subject distinguished name according to thw <c>username_pattern</c> of the respective realm.
/// </para>
/// <para>
/// This API is called by smart and trusted proxies, such as Kibana, which terminate the user's TLS session but still want to authenticate the user by using a PKI realm—-​as if the user connected directly to Elasticsearch.
/// </para>
/// <para>
/// IMPORTANT: The association between the subject public key in the target certificate and the corresponding private key is not validated.
/// This is part of the TLS authentication process and it is delegated to the proxy that calls this API.
/// The proxy is trusted to have performed the TLS authentication and this API translates that authentication into an Elasticsearch access token.
/// </para>
/// </summary>
public sealed partial class DelegatePkiRequestDescriptor : RequestDescriptor<DelegatePkiRequestDescriptor, DelegatePkiRequestParameters>
{
	internal DelegatePkiRequestDescriptor(Action<DelegatePkiRequestDescriptor> configure) => configure.Invoke(this);

	public DelegatePkiRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityDelegatePki;

	protected override HttpMethod StaticHttpMethod => HttpMethod.POST;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.delegate_pki";

	private ICollection<string> X509CertificateChainValue { get; set; }

	/// <summary>
	/// <para>
	/// The X509Certificate chain, which is represented as an ordered string array.
	/// Each string in the array is a base64-encoded (Section 4 of RFC4648 - not base64url-encoded) of the certificate's DER encoding.
	/// </para>
	/// <para>
	/// The first element is the target certificate that contains the subject distinguished name that is requesting access.
	/// This may be followed by additional certificates; each subsequent certificate is used to certify the previous one.
	/// </para>
	/// </summary>
	public DelegatePkiRequestDescriptor X509CertificateChain(ICollection<string> x509CertificateChain)
	{
		X509CertificateChainValue = x509CertificateChain;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("x509_certificate_chain");
		JsonSerializer.Serialize(writer, X509CertificateChainValue, options);
		writer.WriteEndObject();
	}
}