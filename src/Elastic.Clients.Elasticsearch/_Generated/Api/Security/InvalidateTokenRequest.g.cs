// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using Elastic.Transport.Extensions;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Security;

public sealed partial class InvalidateTokenRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// Invalidate a token.
/// </para>
/// <para>
/// The access tokens returned by the get token API have a finite period of time for which they are valid.
/// After that time period, they can no longer be used.
/// The time period is defined by the <c>xpack.security.authc.token.timeout</c> setting.
/// </para>
/// <para>
/// The refresh tokens returned by the get token API are only valid for 24 hours.
/// They can also be used exactly once.
/// If you want to invalidate one or more access or refresh tokens immediately, use this invalidate token API.
/// </para>
/// <para>
/// NOTE: While all parameters are optional, at least one of them is required.
/// More specifically, either one of <c>token</c> or <c>refresh_token</c> parameters is required.
/// If none of these two are specified, then <c>realm_name</c> and/or <c>username</c> need to be specified.
/// </para>
/// </summary>
public sealed partial class InvalidateTokenRequest : PlainRequest<InvalidateTokenRequestParameters>
{
	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityInvalidateToken;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.invalidate_token";

	/// <summary>
	/// <para>
	/// The name of an authentication realm.
	/// This parameter cannot be used with either <c>refresh_token</c> or <c>token</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("realm_name")]
	public Elastic.Clients.Elasticsearch.Name? RealmName { get; set; }

	/// <summary>
	/// <para>
	/// A refresh token.
	/// This parameter cannot be used if any of <c>refresh_token</c>, <c>realm_name</c>, or <c>username</c> are used.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("refresh_token")]
	public string? RefreshToken { get; set; }

	/// <summary>
	/// <para>
	/// An access token.
	/// This parameter cannot be used if any of <c>refresh_token</c>, <c>realm_name</c>, or <c>username</c> are used.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("token")]
	public string? Token { get; set; }

	/// <summary>
	/// <para>
	/// The username of a user.
	/// This parameter cannot be used with either <c>refresh_token</c> or <c>token</c>.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("username")]
	public Elastic.Clients.Elasticsearch.Username? Username { get; set; }
}

/// <summary>
/// <para>
/// Invalidate a token.
/// </para>
/// <para>
/// The access tokens returned by the get token API have a finite period of time for which they are valid.
/// After that time period, they can no longer be used.
/// The time period is defined by the <c>xpack.security.authc.token.timeout</c> setting.
/// </para>
/// <para>
/// The refresh tokens returned by the get token API are only valid for 24 hours.
/// They can also be used exactly once.
/// If you want to invalidate one or more access or refresh tokens immediately, use this invalidate token API.
/// </para>
/// <para>
/// NOTE: While all parameters are optional, at least one of them is required.
/// More specifically, either one of <c>token</c> or <c>refresh_token</c> parameters is required.
/// If none of these two are specified, then <c>realm_name</c> and/or <c>username</c> need to be specified.
/// </para>
/// </summary>
public sealed partial class InvalidateTokenRequestDescriptor : RequestDescriptor<InvalidateTokenRequestDescriptor, InvalidateTokenRequestParameters>
{
	internal InvalidateTokenRequestDescriptor(Action<InvalidateTokenRequestDescriptor> configure) => configure.Invoke(this);

	public InvalidateTokenRequestDescriptor()
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.SecurityInvalidateToken;

	protected override HttpMethod StaticHttpMethod => HttpMethod.DELETE;

	internal override bool SupportsBody => true;

	internal override string OperationName => "security.invalidate_token";

	private Elastic.Clients.Elasticsearch.Name? RealmNameValue { get; set; }
	private string? RefreshTokenValue { get; set; }
	private string? TokenValue { get; set; }
	private Elastic.Clients.Elasticsearch.Username? UsernameValue { get; set; }

	/// <summary>
	/// <para>
	/// The name of an authentication realm.
	/// This parameter cannot be used with either <c>refresh_token</c> or <c>token</c>.
	/// </para>
	/// </summary>
	public InvalidateTokenRequestDescriptor RealmName(Elastic.Clients.Elasticsearch.Name? realmName)
	{
		RealmNameValue = realmName;
		return Self;
	}

	/// <summary>
	/// <para>
	/// A refresh token.
	/// This parameter cannot be used if any of <c>refresh_token</c>, <c>realm_name</c>, or <c>username</c> are used.
	/// </para>
	/// </summary>
	public InvalidateTokenRequestDescriptor RefreshToken(string? refreshToken)
	{
		RefreshTokenValue = refreshToken;
		return Self;
	}

	/// <summary>
	/// <para>
	/// An access token.
	/// This parameter cannot be used if any of <c>refresh_token</c>, <c>realm_name</c>, or <c>username</c> are used.
	/// </para>
	/// </summary>
	public InvalidateTokenRequestDescriptor Token(string? token)
	{
		TokenValue = token;
		return Self;
	}

	/// <summary>
	/// <para>
	/// The username of a user.
	/// This parameter cannot be used with either <c>refresh_token</c> or <c>token</c>.
	/// </para>
	/// </summary>
	public InvalidateTokenRequestDescriptor Username(Elastic.Clients.Elasticsearch.Username? username)
	{
		UsernameValue = username;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (RealmNameValue is not null)
		{
			writer.WritePropertyName("realm_name");
			JsonSerializer.Serialize(writer, RealmNameValue, options);
		}

		if (!string.IsNullOrEmpty(RefreshTokenValue))
		{
			writer.WritePropertyName("refresh_token");
			writer.WriteStringValue(RefreshTokenValue);
		}

		if (!string.IsNullOrEmpty(TokenValue))
		{
			writer.WritePropertyName("token");
			writer.WriteStringValue(TokenValue);
		}

		if (UsernameValue is not null)
		{
			writer.WritePropertyName("username");
			JsonSerializer.Serialize(writer, UsernameValue, options);
		}

		writer.WriteEndObject();
	}
}