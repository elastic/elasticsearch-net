// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	public sealed class SecurityCreateApiKeyRequestParameters : RequestParameters<SecurityCreateApiKeyRequestParameters>
	{
		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }
	}

	public partial class SecurityCreateApiKeyRequest : PlainRequestBase<SecurityCreateApiKeyRequestParameters>
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		[JsonIgnore]
		public Elastic.Clients.Elasticsearch.Refresh? Refresh { get => Q<Elastic.Clients.Elasticsearch.Refresh?>("refresh"); set => Q("refresh", value); }

		[JsonInclude]
		[JsonPropertyName("expiration")]
		public Elastic.Clients.Elasticsearch.Time? Expiration { get; set; }

		[JsonInclude]
		[JsonPropertyName("name")]
		public Elastic.Clients.Elasticsearch.Name? Name { get; set; }

		[JsonInclude]
		[JsonPropertyName("role_descriptors")]
		public Dictionary<string, Elastic.Clients.Elasticsearch.Security.RoleDescriptor>? RoleDescriptors { get; set; }

		[JsonInclude]
		[JsonPropertyName("metadata")]
		public Dictionary<string, object>? Metadata { get; set; }
	}

	public sealed partial class SecurityCreateApiKeyRequestDescriptor : RequestDescriptorBase<SecurityCreateApiKeyRequestDescriptor, SecurityCreateApiKeyRequestParameters>
	{
		internal SecurityCreateApiKeyRequestDescriptor(Action<SecurityCreateApiKeyRequestDescriptor> configure) => configure.Invoke(this);
		public SecurityCreateApiKeyRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityCreateApiKey;
		protected override HttpMethod HttpMethod => HttpMethod.PUT;
		protected override bool SupportsBody => true;
		public SecurityCreateApiKeyRequestDescriptor Refresh(Elastic.Clients.Elasticsearch.Refresh? refresh) => Qs("refresh", refresh);
		private Elastic.Clients.Elasticsearch.Time? ExpirationValue { get; set; }

		private Dictionary<string, object>? MetadataValue { get; set; }

		private Elastic.Clients.Elasticsearch.Name? NameValue { get; set; }

		private Dictionary<string, Elastic.Clients.Elasticsearch.Security.RoleDescriptor>? RoleDescriptorsValue { get; set; }

		public SecurityCreateApiKeyRequestDescriptor Expiration(Elastic.Clients.Elasticsearch.Time? expiration)
		{
			ExpirationValue = expiration;
			return Self;
		}

		public SecurityCreateApiKeyRequestDescriptor Metadata(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
		{
			MetadataValue = selector?.Invoke(new FluentDictionary<string, object>());
			return Self;
		}

		public SecurityCreateApiKeyRequestDescriptor Name(Elastic.Clients.Elasticsearch.Name? name)
		{
			NameValue = name;
			return Self;
		}

		public SecurityCreateApiKeyRequestDescriptor RoleDescriptors(Func<FluentDictionary<string, Elastic.Clients.Elasticsearch.Security.RoleDescriptor>, FluentDictionary<string, Elastic.Clients.Elasticsearch.Security.RoleDescriptor>> selector)
		{
			RoleDescriptorsValue = selector?.Invoke(new FluentDictionary<string, Elastic.Clients.Elasticsearch.Security.RoleDescriptor>());
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ExpirationValue is not null)
			{
				writer.WritePropertyName("expiration");
				JsonSerializer.Serialize(writer, ExpirationValue, options);
			}

			if (MetadataValue is not null)
			{
				writer.WritePropertyName("metadata");
				JsonSerializer.Serialize(writer, MetadataValue, options);
			}

			if (NameValue is not null)
			{
				writer.WritePropertyName("name");
				JsonSerializer.Serialize(writer, NameValue, options);
			}

			if (RoleDescriptorsValue is not null)
			{
				writer.WritePropertyName("role_descriptors");
				JsonSerializer.Serialize(writer, RoleDescriptorsValue, options);
			}

			writer.WriteEndObject();
		}
	}
}