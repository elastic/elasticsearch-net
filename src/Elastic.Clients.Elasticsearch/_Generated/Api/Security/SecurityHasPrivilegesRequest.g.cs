// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	public sealed class SecurityHasPrivilegesRequestParameters : RequestParameters<SecurityHasPrivilegesRequestParameters>
	{
	}

	public partial class SecurityHasPrivilegesRequest : PlainRequestBase<SecurityHasPrivilegesRequestParameters>
	{
		public SecurityHasPrivilegesRequest()
		{
		}

		public SecurityHasPrivilegesRequest(Elastic.Clients.Elasticsearch.Name? user) : base(r => r.Optional("user", user))
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityHasPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		[JsonInclude]
		[JsonPropertyName("application")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesCheck>? Application { get; set; }

		[JsonInclude]
		[JsonPropertyName("cluster")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? Cluster { get; set; }

		[JsonInclude]
		[JsonPropertyName("index")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilegesCheck>? Index { get; set; }
	}

	public sealed partial class SecurityHasPrivilegesRequestDescriptor : RequestDescriptorBase<SecurityHasPrivilegesRequestDescriptor, SecurityHasPrivilegesRequestParameters>
	{
		internal SecurityHasPrivilegesRequestDescriptor(Action<SecurityHasPrivilegesRequestDescriptor> configure) => configure.Invoke(this);
		public SecurityHasPrivilegesRequestDescriptor()
		{
		}

		internal override ApiUrls ApiUrls => ApiUrlsLookups.SecurityHasPrivileges;
		protected override HttpMethod HttpMethod => HttpMethod.POST;
		protected override bool SupportsBody => true;
		public SecurityHasPrivilegesRequestDescriptor User(Elastic.Clients.Elasticsearch.Name? user)
		{
			RouteValues.Optional("user", user);
			return Self;
		}

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesCheck>? ApplicationValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? ClusterValue { get; set; }

		private IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilegesCheck>? IndexValue { get; set; }

		public SecurityHasPrivilegesRequestDescriptor Application(IEnumerable<Elastic.Clients.Elasticsearch.Security.ApplicationPrivilegesCheck>? application)
		{
			ApplicationValue = application;
			return Self;
		}

		public SecurityHasPrivilegesRequestDescriptor Cluster(IEnumerable<Elastic.Clients.Elasticsearch.Security.ClusterPrivilege>? cluster)
		{
			ClusterValue = cluster;
			return Self;
		}

		public SecurityHasPrivilegesRequestDescriptor Index(IEnumerable<Elastic.Clients.Elasticsearch.Security.IndexPrivilegesCheck>? index)
		{
			IndexValue = index;
			return Self;
		}

		protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
		{
			writer.WriteStartObject();
			if (ApplicationValue is not null)
			{
				writer.WritePropertyName("application");
				JsonSerializer.Serialize(writer, ApplicationValue, options);
			}

			if (ClusterValue is not null)
			{
				writer.WritePropertyName("cluster");
				JsonSerializer.Serialize(writer, ClusterValue, options);
			}

			if (IndexValue is not null)
			{
				writer.WritePropertyName("index");
				JsonSerializer.Serialize(writer, IndexValue, options);
			}

			writer.WriteEndObject();
		}
	}
}