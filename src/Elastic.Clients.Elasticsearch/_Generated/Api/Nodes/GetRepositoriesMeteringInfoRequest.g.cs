// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Requests;
using Elastic.Clients.Elasticsearch.Serialization;
using Elastic.Transport;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Nodes;

public sealed partial class GetRepositoriesMeteringInfoRequestParameters : RequestParameters
{
}

/// <summary>
/// <para>
/// You can use the cluster repositories metering API to retrieve repositories metering information in a cluster.
/// This API exposes monotonically non-decreasing counters and it’s expected that clients would durably store the
/// information needed to compute aggregations over a period of time. Additionally, the information exposed by this
/// API is volatile, meaning that it won’t be present after node restarts.
/// </para>
/// </summary>
public sealed partial class GetRepositoriesMeteringInfoRequest : PlainRequest<GetRepositoriesMeteringInfoRequestParameters>
{
	public GetRepositoriesMeteringInfoRequest(Elastic.Clients.Elasticsearch.NodeIds nodeId) : base(r => r.Required("node_id", nodeId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NodesGetRepositoriesMeteringInfo;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "nodes.get_repositories_metering_info";
}

/// <summary>
/// <para>
/// You can use the cluster repositories metering API to retrieve repositories metering information in a cluster.
/// This API exposes monotonically non-decreasing counters and it’s expected that clients would durably store the
/// information needed to compute aggregations over a period of time. Additionally, the information exposed by this
/// API is volatile, meaning that it won’t be present after node restarts.
/// </para>
/// </summary>
public sealed partial class GetRepositoriesMeteringInfoRequestDescriptor : RequestDescriptor<GetRepositoriesMeteringInfoRequestDescriptor, GetRepositoriesMeteringInfoRequestParameters>
{
	internal GetRepositoriesMeteringInfoRequestDescriptor(Action<GetRepositoriesMeteringInfoRequestDescriptor> configure) => configure.Invoke(this);

	public GetRepositoriesMeteringInfoRequestDescriptor(Elastic.Clients.Elasticsearch.NodeIds nodeId) : base(r => r.Required("node_id", nodeId))
	{
	}

	internal override ApiUrls ApiUrls => ApiUrlLookup.NodesGetRepositoriesMeteringInfo;

	protected override HttpMethod StaticHttpMethod => HttpMethod.GET;

	internal override bool SupportsBody => false;

	internal override string OperationName => "nodes.get_repositories_metering_info";

	public GetRepositoriesMeteringInfoRequestDescriptor NodeId(Elastic.Clients.Elasticsearch.NodeIds nodeId)
	{
		RouteValues.Required("node_id", nodeId);
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
	}
}