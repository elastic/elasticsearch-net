// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Tasks
{
	public class TasksNamespace : NamespacedClientProxy
	{
		internal TasksNamespace(ElasticClient client) : base(client)
		{
		}

		public CancelResponse Cancel(ICancelRequest request) => DoRequest<ICancelRequest, CancelResponse>(request, request.RequestParameters);
		public Task<CancelResponse> CancelAsync(ICancelRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICancelRequest, CancelResponse>(request, request.RequestParameters, cancellationToken);
		public CancelResponse Cancel(Func<CancelDescriptor, ICancelRequest> selector = null) => Cancel(selector.InvokeOrDefault(new CancelDescriptor()));
		public Task<CancelResponse> CancelAsync(Func<CancelDescriptor, ICancelRequest> selector = null, CancellationToken cancellationToken = default) => CancelAsync(selector.InvokeOrDefault(new CancelDescriptor()), cancellationToken);
		public GetResponse Get(IGetRequest request) => DoRequest<IGetRequest, GetResponse>(request, request.RequestParameters);
		public Task<GetResponse> GetAsync(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse>(request, request.RequestParameters, cancellationToken);
		public GetResponse Get(Elastic.Clients.Elasticsearch.Id task_id, Func<GetDescriptor, IGetRequest> selector = null) => Get(selector.InvokeOrDefault(new GetDescriptor(task_id)));
		public Task<GetResponse> GetAsync(Elastic.Clients.Elasticsearch.Id task_id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync(selector.InvokeOrDefault(new GetDescriptor(task_id)), cancellationToken);
		public ListResponse List(IListRequest request) => DoRequest<IListRequest, ListResponse>(request, request.RequestParameters);
		public Task<ListResponse> ListAsync(IListRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IListRequest, ListResponse>(request, request.RequestParameters, cancellationToken);
		public ListResponse List(Func<ListDescriptor, IListRequest> selector = null) => List(selector.InvokeOrDefault(new ListDescriptor()));
		public Task<ListResponse> ListAsync(Func<ListDescriptor, IListRequest> selector = null, CancellationToken cancellationToken = default) => ListAsync(selector.InvokeOrDefault(new ListDescriptor()), cancellationToken);
	}
}