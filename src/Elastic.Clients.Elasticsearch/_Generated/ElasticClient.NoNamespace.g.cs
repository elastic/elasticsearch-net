// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.AsyncSearch;
using Elastic.Clients.Elasticsearch.Autoscaling;
using Elastic.Clients.Elasticsearch.Cat;
using Elastic.Clients.Elasticsearch.Cluster;
using Elastic.Clients.Elasticsearch.CrossClusterReplication;
using Elastic.Clients.Elasticsearch.DanglingIndices;
using Elastic.Clients.Elasticsearch.Enrich;
using Elastic.Clients.Elasticsearch.Eql;
using Elastic.Clients.Elasticsearch.Features;
using Elastic.Clients.Elasticsearch.Graph;
using Elastic.Clients.Elasticsearch.IndexLifecycleManagement;
using Elastic.Clients.Elasticsearch.IndexManagement;
using Elastic.Clients.Elasticsearch.Ingest;
using Elastic.Clients.Elasticsearch.License;
using Elastic.Clients.Elasticsearch.Logstash;
using Elastic.Clients.Elasticsearch.MachineLearning;
using Elastic.Clients.Elasticsearch.Migration;
using Elastic.Clients.Elasticsearch.Monitoring;
using Elastic.Clients.Elasticsearch.Nodes;
using Elastic.Clients.Elasticsearch.Rollup;
using Elastic.Clients.Elasticsearch.SearchableSnapshots;
using Elastic.Clients.Elasticsearch.Security;
using Elastic.Clients.Elasticsearch.Shutdown;
using Elastic.Clients.Elasticsearch.Snapshot;
using Elastic.Clients.Elasticsearch.SnapshotLifecycleManagement;
using Elastic.Clients.Elasticsearch.Sql;
using Elastic.Clients.Elasticsearch.Tasks;
using Elastic.Clients.Elasticsearch.TextStructure;
using Elastic.Clients.Elasticsearch.TransformManagement;
using Elastic.Clients.Elasticsearch.Watcher;
using Elastic.Clients.Elasticsearch.Xpack;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial class ElasticClient : IElasticClient
	{
		public AsyncSearchNamespace AsyncSearch { get; private set; }

		public AutoscalingNamespace Autoscaling { get; private set; }

		public CatNamespace Cat { get; private set; }

		public CrossClusterReplicationNamespace CrossClusterReplication { get; private set; }

		public ClusterNamespace Cluster { get; private set; }

		public DanglingIndicesNamespace DanglingIndices { get; private set; }

		public EnrichNamespace Enrich { get; private set; }

		public EqlNamespace Eql { get; private set; }

		public FeaturesNamespace Features { get; private set; }

		public GraphNamespace Graph { get; private set; }

		public IndexLifecycleManagementNamespace IndexLifecycleManagement { get; private set; }

		public IndexManagementNamespace IndexManagement { get; private set; }

		public IngestNamespace Ingest { get; private set; }

		public LicenseNamespace License { get; private set; }

		public LogstashNamespace Logstash { get; private set; }

		public MigrationNamespace Migration { get; private set; }

		public MachineLearningNamespace MachineLearning { get; private set; }

		public MonitoringNamespace Monitoring { get; private set; }

		public NodesNamespace Nodes { get; private set; }

		public RollupNamespace Rollup { get; private set; }

		public SearchableSnapshotsNamespace SearchableSnapshots { get; private set; }

		public SecurityNamespace Security { get; private set; }

		public ShutdownNamespace Shutdown { get; private set; }

		public SnapshotLifecycleManagementNamespace SnapshotLifecycleManagement { get; private set; }

		public SnapshotNamespace Snapshot { get; private set; }

		public SqlNamespace Sql { get; private set; }

		public TasksNamespace Tasks { get; private set; }

		public TextStructureNamespace TextStructure { get; private set; }

		public TransformManagementNamespace TransformManagement { get; private set; }

		public WatcherNamespace Watcher { get; private set; }

		public XpackNamespace Xpack { get; private set; }

		private partial void SetupNamespaces()
		{
			AsyncSearch = new AsyncSearchNamespace(this);
			Autoscaling = new AutoscalingNamespace(this);
			Cat = new CatNamespace(this);
			CrossClusterReplication = new CrossClusterReplicationNamespace(this);
			Cluster = new ClusterNamespace(this);
			DanglingIndices = new DanglingIndicesNamespace(this);
			Enrich = new EnrichNamespace(this);
			Eql = new EqlNamespace(this);
			Features = new FeaturesNamespace(this);
			Graph = new GraphNamespace(this);
			IndexLifecycleManagement = new IndexLifecycleManagementNamespace(this);
			IndexManagement = new IndexManagementNamespace(this);
			Ingest = new IngestNamespace(this);
			License = new LicenseNamespace(this);
			Logstash = new LogstashNamespace(this);
			Migration = new MigrationNamespace(this);
			MachineLearning = new MachineLearningNamespace(this);
			Monitoring = new MonitoringNamespace(this);
			Nodes = new NodesNamespace(this);
			Rollup = new RollupNamespace(this);
			SearchableSnapshots = new SearchableSnapshotsNamespace(this);
			Security = new SecurityNamespace(this);
			Shutdown = new ShutdownNamespace(this);
			SnapshotLifecycleManagement = new SnapshotLifecycleManagementNamespace(this);
			Snapshot = new SnapshotNamespace(this);
			Sql = new SqlNamespace(this);
			Tasks = new TasksNamespace(this);
			TextStructure = new TextStructureNamespace(this);
			TransformManagement = new TransformManagementNamespace(this);
			Watcher = new WatcherNamespace(this);
			Xpack = new XpackNamespace(this);
		}

		public BulkResponse Bulk<TSource>(IBulkRequest<TSource> request) => DoRequest<IBulkRequest<TSource>, BulkResponse>(request, request.RequestParameters);
		public Task<BulkResponse> BulkAsync<TSource>(IBulkRequest<TSource> request, CancellationToken cancellationToken = default) => DoRequestAsync<IBulkRequest<TSource>, BulkResponse>(request, request.RequestParameters, cancellationToken);
		public BulkResponse Bulk<TSource>(Func<BulkDescriptor<TSource>, IBulkRequest<TSource>> selector = null) => Bulk<TSource>(selector.InvokeOrDefault(new BulkDescriptor<TSource>()));
		public Task<BulkResponse> BulkAsync<TSource>(Func<BulkDescriptor<TSource>, IBulkRequest<TSource>> selector = null, CancellationToken cancellationToken = default) => BulkAsync<TSource>(selector.InvokeOrDefault(new BulkDescriptor<TSource>()), cancellationToken);
		public ClearScrollResponse ClearScroll(IClearScrollRequest request) => DoRequest<IClearScrollRequest, ClearScrollResponse>(request, request.RequestParameters);
		public Task<ClearScrollResponse> ClearScrollAsync(IClearScrollRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearScrollRequest, ClearScrollResponse>(request, request.RequestParameters, cancellationToken);
		public ClearScrollResponse ClearScroll(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null) => ClearScroll(selector.InvokeOrDefault(new ClearScrollDescriptor()));
		public Task<ClearScrollResponse> ClearScrollAsync(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null, CancellationToken cancellationToken = default) => ClearScrollAsync(selector.InvokeOrDefault(new ClearScrollDescriptor()), cancellationToken);
		public ClosePointInTimeResponse ClosePointInTime(IClosePointInTimeRequest request) => DoRequest<IClosePointInTimeRequest, ClosePointInTimeResponse>(request, request.RequestParameters);
		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(IClosePointInTimeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClosePointInTimeRequest, ClosePointInTimeResponse>(request, request.RequestParameters, cancellationToken);
		public ClosePointInTimeResponse ClosePointInTime(Func<ClosePointInTimeDescriptor, IClosePointInTimeRequest> selector = null) => ClosePointInTime(selector.InvokeOrDefault(new ClosePointInTimeDescriptor()));
		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(Func<ClosePointInTimeDescriptor, IClosePointInTimeRequest> selector = null, CancellationToken cancellationToken = default) => ClosePointInTimeAsync(selector.InvokeOrDefault(new ClosePointInTimeDescriptor()), cancellationToken);
		public CountResponse Count(ICountRequest request) => DoRequest<ICountRequest, CountResponse>(request, request.RequestParameters);
		public Task<CountResponse> CountAsync(ICountRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICountRequest, CountResponse>(request, request.RequestParameters, cancellationToken);
		public CountResponse Count(Func<CountDescriptor, ICountRequest> selector = null) => Count(selector.InvokeOrDefault(new CountDescriptor()));
		public Task<CountResponse> CountAsync(Func<CountDescriptor, ICountRequest> selector = null, CancellationToken cancellationToken = default) => CountAsync(selector.InvokeOrDefault(new CountDescriptor()), cancellationToken);
		public CreateResponse Create<TDocument>(ICreateRequest<TDocument> request) => DoRequest<ICreateRequest<TDocument>, CreateResponse>(request, request.RequestParameters);
		public Task<CreateResponse> CreateAsync<TDocument>(ICreateRequest<TDocument> request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateRequest<TDocument>, CreateResponse>(request, request.RequestParameters, cancellationToken);
		public CreateResponse Create<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector = null) => Create<TDocument>(selector.InvokeOrDefault(new CreateDescriptor<TDocument>(index, id)));
		public Task<CreateResponse> CreateAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector = null, CancellationToken cancellationToken = default) => CreateAsync<TDocument>(selector.InvokeOrDefault(new CreateDescriptor<TDocument>(index, id)), cancellationToken);
		public DeleteResponse Delete(IDeleteRequest request) => DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteResponse Delete(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null) => Delete(selector.InvokeOrDefault(new DeleteDescriptor(index, id)));
		public Task<DeleteResponse> DeleteAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(index, id)), cancellationToken);
		public DeleteByQueryResponse DeleteByQuery(IDeleteByQueryRequest request) => DoRequest<IDeleteByQueryRequest, DeleteByQueryResponse>(request, request.RequestParameters);
		public Task<DeleteByQueryResponse> DeleteByQueryAsync(IDeleteByQueryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteByQueryRequest, DeleteByQueryResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteByQueryResponse DeleteByQuery(Elastic.Clients.Elasticsearch.Indices index, Func<DeleteByQueryDescriptor, IDeleteByQueryRequest> selector = null) => DeleteByQuery(selector.InvokeOrDefault(new DeleteByQueryDescriptor(index)));
		public Task<DeleteByQueryResponse> DeleteByQueryAsync(Elastic.Clients.Elasticsearch.Indices index, Func<DeleteByQueryDescriptor, IDeleteByQueryRequest> selector = null, CancellationToken cancellationToken = default) => DeleteByQueryAsync(selector.InvokeOrDefault(new DeleteByQueryDescriptor(index)), cancellationToken);
		public DeleteByQueryRethrottleResponse DeleteByQueryRethrottle(IDeleteByQueryRethrottleRequest request) => DoRequest<IDeleteByQueryRethrottleRequest, DeleteByQueryRethrottleResponse>(request, request.RequestParameters);
		public Task<DeleteByQueryRethrottleResponse> DeleteByQueryRethrottleAsync(IDeleteByQueryRethrottleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteByQueryRethrottleRequest, DeleteByQueryRethrottleResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteByQueryRethrottleResponse DeleteByQueryRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Func<DeleteByQueryRethrottleDescriptor, IDeleteByQueryRethrottleRequest> selector = null) => DeleteByQueryRethrottle(selector.InvokeOrDefault(new DeleteByQueryRethrottleDescriptor(task_id)));
		public Task<DeleteByQueryRethrottleResponse> DeleteByQueryRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Func<DeleteByQueryRethrottleDescriptor, IDeleteByQueryRethrottleRequest> selector = null, CancellationToken cancellationToken = default) => DeleteByQueryRethrottleAsync(selector.InvokeOrDefault(new DeleteByQueryRethrottleDescriptor(task_id)), cancellationToken);
		public DeleteScriptResponse DeleteScript(IDeleteScriptRequest request) => DoRequest<IDeleteScriptRequest, DeleteScriptResponse>(request, request.RequestParameters);
		public Task<DeleteScriptResponse> DeleteScriptAsync(IDeleteScriptRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteScriptRequest, DeleteScriptResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteScriptResponse DeleteScript(Elastic.Clients.Elasticsearch.Id id, Func<DeleteScriptDescriptor, IDeleteScriptRequest> selector = null) => DeleteScript(selector.InvokeOrDefault(new DeleteScriptDescriptor(id)));
		public Task<DeleteScriptResponse> DeleteScriptAsync(Elastic.Clients.Elasticsearch.Id id, Func<DeleteScriptDescriptor, IDeleteScriptRequest> selector = null, CancellationToken cancellationToken = default) => DeleteScriptAsync(selector.InvokeOrDefault(new DeleteScriptDescriptor(id)), cancellationToken);
		public ExistsResponse Exists(IExistsRequest request) => DoRequest<IExistsRequest, ExistsResponse>(request, request.RequestParameters);
		public Task<ExistsResponse> ExistsAsync(IExistsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsRequest, ExistsResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsResponse Exists(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExistsDescriptor, IExistsRequest> selector = null) => Exists(selector.InvokeOrDefault(new ExistsDescriptor(index, id)));
		public Task<ExistsResponse> ExistsAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExistsDescriptor, IExistsRequest> selector = null, CancellationToken cancellationToken = default) => ExistsAsync(selector.InvokeOrDefault(new ExistsDescriptor(index, id)), cancellationToken);
		public ExistsSourceResponse ExistsSource(IExistsSourceRequest request) => DoRequest<IExistsSourceRequest, ExistsSourceResponse>(request, request.RequestParameters);
		public Task<ExistsSourceResponse> ExistsSourceAsync(IExistsSourceRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsSourceRequest, ExistsSourceResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsSourceResponse ExistsSource(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExistsSourceDescriptor, IExistsSourceRequest> selector = null) => ExistsSource(selector.InvokeOrDefault(new ExistsSourceDescriptor(index, id)));
		public Task<ExistsSourceResponse> ExistsSourceAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExistsSourceDescriptor, IExistsSourceRequest> selector = null, CancellationToken cancellationToken = default) => ExistsSourceAsync(selector.InvokeOrDefault(new ExistsSourceDescriptor(index, id)), cancellationToken);
		public ExplainResponse<TDocument> Explain<TDocument>(IExplainRequest request) => DoRequest<IExplainRequest, ExplainResponse<TDocument>>(request, request.RequestParameters);
		public Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(IExplainRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExplainRequest, ExplainResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public ExplainResponse<TDocument> Explain<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExplainDescriptor, IExplainRequest> selector = null) => Explain<TDocument>(selector.InvokeOrDefault(new ExplainDescriptor(index, id)));
		public Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<ExplainDescriptor, IExplainRequest> selector = null, CancellationToken cancellationToken = default) => ExplainAsync<TDocument>(selector.InvokeOrDefault(new ExplainDescriptor(index, id)), cancellationToken);
		public FieldCapsResponse FieldCaps(IFieldCapsRequest request) => DoRequest<IFieldCapsRequest, FieldCapsResponse>(request, request.RequestParameters);
		public Task<FieldCapsResponse> FieldCapsAsync(IFieldCapsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IFieldCapsRequest, FieldCapsResponse>(request, request.RequestParameters, cancellationToken);
		public FieldCapsResponse FieldCaps(Func<FieldCapsDescriptor, IFieldCapsRequest> selector = null) => FieldCaps(selector.InvokeOrDefault(new FieldCapsDescriptor()));
		public Task<FieldCapsResponse> FieldCapsAsync(Func<FieldCapsDescriptor, IFieldCapsRequest> selector = null, CancellationToken cancellationToken = default) => FieldCapsAsync(selector.InvokeOrDefault(new FieldCapsDescriptor()), cancellationToken);
		public GetResponse<TDocument> Get<TDocument>(IGetRequest request) => DoRequest<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters);
		public Task<GetResponse<TDocument>> GetAsync<TDocument>(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public GetResponse<TDocument> Get<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<GetDescriptor, IGetRequest> selector = null) => Get<TDocument>(selector.InvokeOrDefault(new GetDescriptor(index, id)));
		public Task<GetResponse<TDocument>> GetAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync<TDocument>(selector.InvokeOrDefault(new GetDescriptor(index, id)), cancellationToken);
		public GetScriptResponse GetScript(IGetScriptRequest request) => DoRequest<IGetScriptRequest, GetScriptResponse>(request, request.RequestParameters);
		public Task<GetScriptResponse> GetScriptAsync(IGetScriptRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetScriptRequest, GetScriptResponse>(request, request.RequestParameters, cancellationToken);
		public GetScriptResponse GetScript(Elastic.Clients.Elasticsearch.Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null) => GetScript(selector.InvokeOrDefault(new GetScriptDescriptor(id)));
		public Task<GetScriptResponse> GetScriptAsync(Elastic.Clients.Elasticsearch.Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null, CancellationToken cancellationToken = default) => GetScriptAsync(selector.InvokeOrDefault(new GetScriptDescriptor(id)), cancellationToken);
		public GetScriptContextResponse GetScriptContext(IGetScriptContextRequest request) => DoRequest<IGetScriptContextRequest, GetScriptContextResponse>(request, request.RequestParameters);
		public Task<GetScriptContextResponse> GetScriptContextAsync(IGetScriptContextRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetScriptContextRequest, GetScriptContextResponse>(request, request.RequestParameters, cancellationToken);
		public GetScriptContextResponse GetScriptContext(Func<GetScriptContextDescriptor, IGetScriptContextRequest> selector = null) => GetScriptContext(selector.InvokeOrDefault(new GetScriptContextDescriptor()));
		public Task<GetScriptContextResponse> GetScriptContextAsync(Func<GetScriptContextDescriptor, IGetScriptContextRequest> selector = null, CancellationToken cancellationToken = default) => GetScriptContextAsync(selector.InvokeOrDefault(new GetScriptContextDescriptor()), cancellationToken);
		public GetScriptLanguagesResponse GetScriptLanguages(IGetScriptLanguagesRequest request) => DoRequest<IGetScriptLanguagesRequest, GetScriptLanguagesResponse>(request, request.RequestParameters);
		public Task<GetScriptLanguagesResponse> GetScriptLanguagesAsync(IGetScriptLanguagesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetScriptLanguagesRequest, GetScriptLanguagesResponse>(request, request.RequestParameters, cancellationToken);
		public GetScriptLanguagesResponse GetScriptLanguages(Func<GetScriptLanguagesDescriptor, IGetScriptLanguagesRequest> selector = null) => GetScriptLanguages(selector.InvokeOrDefault(new GetScriptLanguagesDescriptor()));
		public Task<GetScriptLanguagesResponse> GetScriptLanguagesAsync(Func<GetScriptLanguagesDescriptor, IGetScriptLanguagesRequest> selector = null, CancellationToken cancellationToken = default) => GetScriptLanguagesAsync(selector.InvokeOrDefault(new GetScriptLanguagesDescriptor()), cancellationToken);
		public GetSourceResponse<TDocument> GetSource<TDocument>(IGetSourceRequest request) => DoRequest<IGetSourceRequest, GetSourceResponse<TDocument>>(request, request.RequestParameters);
		public Task<GetSourceResponse<TDocument>> GetSourceAsync<TDocument>(IGetSourceRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetSourceRequest, GetSourceResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public IndexResponse Index<TDocument>(IIndexRequest<TDocument> request) => DoRequest<IIndexRequest<TDocument>, IndexResponse>(request, request.RequestParameters);
		public Task<IndexResponse> IndexAsync<TDocument>(IIndexRequest<TDocument> request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexRequest<TDocument>, IndexResponse>(request, request.RequestParameters, cancellationToken);
		public IndexResponse Index<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector = null) => Index<TDocument>(selector.InvokeOrDefault(new IndexDescriptor<TDocument>(index)));
		public Task<IndexResponse> IndexAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector = null, CancellationToken cancellationToken = default) => IndexAsync<TDocument>(selector.InvokeOrDefault(new IndexDescriptor<TDocument>(index)), cancellationToken);
		public InfoResponse Info(IInfoRequest request) => DoRequest<IInfoRequest, InfoResponse>(request, request.RequestParameters);
		public Task<InfoResponse> InfoAsync(IInfoRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IInfoRequest, InfoResponse>(request, request.RequestParameters, cancellationToken);
		public InfoResponse Info(Func<InfoDescriptor, IInfoRequest> selector = null) => Info(selector.InvokeOrDefault(new InfoDescriptor()));
		public Task<InfoResponse> InfoAsync(Func<InfoDescriptor, IInfoRequest> selector = null, CancellationToken cancellationToken = default) => InfoAsync(selector.InvokeOrDefault(new InfoDescriptor()), cancellationToken);
		public MgetResponse<TDocument> Mget<TDocument>(IMgetRequest request) => DoRequest<IMgetRequest, MgetResponse<TDocument>>(request, request.RequestParameters);
		public Task<MgetResponse<TDocument>> MgetAsync<TDocument>(IMgetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMgetRequest, MgetResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public MgetResponse<TDocument> Mget<TDocument>(Func<MgetDescriptor, IMgetRequest> selector = null) => Mget<TDocument>(selector.InvokeOrDefault(new MgetDescriptor()));
		public Task<MgetResponse<TDocument>> MgetAsync<TDocument>(Func<MgetDescriptor, IMgetRequest> selector = null, CancellationToken cancellationToken = default) => MgetAsync<TDocument>(selector.InvokeOrDefault(new MgetDescriptor()), cancellationToken);
		public MsearchResponse<TDocument> Msearch<TDocument>(IMsearchRequest request) => DoRequest<IMsearchRequest, MsearchResponse<TDocument>>(request, request.RequestParameters);
		public Task<MsearchResponse<TDocument>> MsearchAsync<TDocument>(IMsearchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMsearchRequest, MsearchResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public MsearchResponse<TDocument> Msearch<TDocument>(Func<MsearchDescriptor, IMsearchRequest> selector = null) => Msearch<TDocument>(selector.InvokeOrDefault(new MsearchDescriptor()));
		public Task<MsearchResponse<TDocument>> MsearchAsync<TDocument>(Func<MsearchDescriptor, IMsearchRequest> selector = null, CancellationToken cancellationToken = default) => MsearchAsync<TDocument>(selector.InvokeOrDefault(new MsearchDescriptor()), cancellationToken);
		public MsearchTemplateResponse<TDocument> MsearchTemplate<TDocument>(IMsearchTemplateRequest request) => DoRequest<IMsearchTemplateRequest, MsearchTemplateResponse<TDocument>>(request, request.RequestParameters);
		public Task<MsearchTemplateResponse<TDocument>> MsearchTemplateAsync<TDocument>(IMsearchTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMsearchTemplateRequest, MsearchTemplateResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public MsearchTemplateResponse<TDocument> MsearchTemplate<TDocument>(Func<MsearchTemplateDescriptor, IMsearchTemplateRequest> selector = null) => MsearchTemplate<TDocument>(selector.InvokeOrDefault(new MsearchTemplateDescriptor()));
		public Task<MsearchTemplateResponse<TDocument>> MsearchTemplateAsync<TDocument>(Func<MsearchTemplateDescriptor, IMsearchTemplateRequest> selector = null, CancellationToken cancellationToken = default) => MsearchTemplateAsync<TDocument>(selector.InvokeOrDefault(new MsearchTemplateDescriptor()), cancellationToken);
		public MtermvectorsResponse Mtermvectors(IMtermvectorsRequest request) => DoRequest<IMtermvectorsRequest, MtermvectorsResponse>(request, request.RequestParameters);
		public Task<MtermvectorsResponse> MtermvectorsAsync(IMtermvectorsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMtermvectorsRequest, MtermvectorsResponse>(request, request.RequestParameters, cancellationToken);
		public MtermvectorsResponse Mtermvectors(Func<MtermvectorsDescriptor, IMtermvectorsRequest> selector = null) => Mtermvectors(selector.InvokeOrDefault(new MtermvectorsDescriptor()));
		public Task<MtermvectorsResponse> MtermvectorsAsync(Func<MtermvectorsDescriptor, IMtermvectorsRequest> selector = null, CancellationToken cancellationToken = default) => MtermvectorsAsync(selector.InvokeOrDefault(new MtermvectorsDescriptor()), cancellationToken);
		public OpenPointInTimeResponse OpenPointInTime(IOpenPointInTimeRequest request) => DoRequest<IOpenPointInTimeRequest, OpenPointInTimeResponse>(request, request.RequestParameters);
		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(IOpenPointInTimeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IOpenPointInTimeRequest, OpenPointInTimeResponse>(request, request.RequestParameters, cancellationToken);
		public OpenPointInTimeResponse OpenPointInTime(Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null) => OpenPointInTime(selector.InvokeOrDefault(new OpenPointInTimeDescriptor()));
		public OpenPointInTimeResponse OpenPointInTime(Elastic.Clients.Elasticsearch.Indices index, Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null) => OpenPointInTime(selector.InvokeOrDefault(new OpenPointInTimeDescriptor(index)));
		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null, CancellationToken cancellationToken = default) => OpenPointInTimeAsync(selector.InvokeOrDefault(new OpenPointInTimeDescriptor()), cancellationToken);
		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Elastic.Clients.Elasticsearch.Indices index, Func<OpenPointInTimeDescriptor, IOpenPointInTimeRequest> selector = null, CancellationToken cancellationToken = default) => OpenPointInTimeAsync(selector.InvokeOrDefault(new OpenPointInTimeDescriptor(index)), cancellationToken);
		public PingResponse Ping(IPingRequest request) => DoRequest<IPingRequest, PingResponse>(request, request.RequestParameters);
		public Task<PingResponse> PingAsync(IPingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPingRequest, PingResponse>(request, request.RequestParameters, cancellationToken);
		public PingResponse Ping(Func<PingDescriptor, IPingRequest> selector = null) => Ping(selector.InvokeOrDefault(new PingDescriptor()));
		public Task<PingResponse> PingAsync(Func<PingDescriptor, IPingRequest> selector = null, CancellationToken cancellationToken = default) => PingAsync(selector.InvokeOrDefault(new PingDescriptor()), cancellationToken);
		public PutScriptResponse PutScript(IPutScriptRequest request) => DoRequest<IPutScriptRequest, PutScriptResponse>(request, request.RequestParameters);
		public Task<PutScriptResponse> PutScriptAsync(IPutScriptRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutScriptRequest, PutScriptResponse>(request, request.RequestParameters, cancellationToken);
		public PutScriptResponse PutScript(Elastic.Clients.Elasticsearch.Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector = null) => PutScript(selector.InvokeOrDefault(new PutScriptDescriptor(id)));
		public Task<PutScriptResponse> PutScriptAsync(Elastic.Clients.Elasticsearch.Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector = null, CancellationToken cancellationToken = default) => PutScriptAsync(selector.InvokeOrDefault(new PutScriptDescriptor(id)), cancellationToken);
		public RankEvalResponse RankEval(IRankEvalRequest request) => DoRequest<IRankEvalRequest, RankEvalResponse>(request, request.RequestParameters);
		public Task<RankEvalResponse> RankEvalAsync(IRankEvalRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRankEvalRequest, RankEvalResponse>(request, request.RequestParameters, cancellationToken);
		public RankEvalResponse RankEval(Func<RankEvalDescriptor, IRankEvalRequest> selector = null) => RankEval(selector.InvokeOrDefault(new RankEvalDescriptor()));
		public RankEvalResponse RankEval(Elastic.Clients.Elasticsearch.Indices index, Func<RankEvalDescriptor, IRankEvalRequest> selector = null) => RankEval(selector.InvokeOrDefault(new RankEvalDescriptor(index)));
		public Task<RankEvalResponse> RankEvalAsync(Func<RankEvalDescriptor, IRankEvalRequest> selector = null, CancellationToken cancellationToken = default) => RankEvalAsync(selector.InvokeOrDefault(new RankEvalDescriptor()), cancellationToken);
		public Task<RankEvalResponse> RankEvalAsync(Elastic.Clients.Elasticsearch.Indices index, Func<RankEvalDescriptor, IRankEvalRequest> selector = null, CancellationToken cancellationToken = default) => RankEvalAsync(selector.InvokeOrDefault(new RankEvalDescriptor(index)), cancellationToken);
		public ReindexResponse Reindex(IReindexRequest request) => DoRequest<IReindexRequest, ReindexResponse>(request, request.RequestParameters);
		public Task<ReindexResponse> ReindexAsync(IReindexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IReindexRequest, ReindexResponse>(request, request.RequestParameters, cancellationToken);
		public ReindexResponse Reindex(Func<ReindexDescriptor, IReindexRequest> selector = null) => Reindex(selector.InvokeOrDefault(new ReindexDescriptor()));
		public Task<ReindexResponse> ReindexAsync(Func<ReindexDescriptor, IReindexRequest> selector = null, CancellationToken cancellationToken = default) => ReindexAsync(selector.InvokeOrDefault(new ReindexDescriptor()), cancellationToken);
		public ReindexRethrottleResponse ReindexRethrottle(IReindexRethrottleRequest request) => DoRequest<IReindexRethrottleRequest, ReindexRethrottleResponse>(request, request.RequestParameters);
		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(IReindexRethrottleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IReindexRethrottleRequest, ReindexRethrottleResponse>(request, request.RequestParameters, cancellationToken);
		public ReindexRethrottleResponse ReindexRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null) => ReindexRethrottle(selector.InvokeOrDefault(new ReindexRethrottleDescriptor(task_id)));
		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null, CancellationToken cancellationToken = default) => ReindexRethrottleAsync(selector.InvokeOrDefault(new ReindexRethrottleDescriptor(task_id)), cancellationToken);
		public RenderSearchTemplateResponse RenderSearchTemplate(IRenderSearchTemplateRequest request) => DoRequest<IRenderSearchTemplateRequest, RenderSearchTemplateResponse>(request, request.RequestParameters);
		public Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(IRenderSearchTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRenderSearchTemplateRequest, RenderSearchTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public RenderSearchTemplateResponse RenderSearchTemplate(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null) => RenderSearchTemplate(selector.InvokeOrDefault(new RenderSearchTemplateDescriptor()));
		public Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null, CancellationToken cancellationToken = default) => RenderSearchTemplateAsync(selector.InvokeOrDefault(new RenderSearchTemplateDescriptor()), cancellationToken);
		public ScriptsPainlessExecuteResponse<TResult> ScriptsPainlessExecute<TResult>(IScriptsPainlessExecuteRequest request) => DoRequest<IScriptsPainlessExecuteRequest, ScriptsPainlessExecuteResponse<TResult>>(request, request.RequestParameters);
		public Task<ScriptsPainlessExecuteResponse<TResult>> ScriptsPainlessExecuteAsync<TResult>(IScriptsPainlessExecuteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IScriptsPainlessExecuteRequest, ScriptsPainlessExecuteResponse<TResult>>(request, request.RequestParameters, cancellationToken);
		public ScriptsPainlessExecuteResponse<TResult> ScriptsPainlessExecute<TResult>(Func<ScriptsPainlessExecuteDescriptor, IScriptsPainlessExecuteRequest> selector = null) => ScriptsPainlessExecute<TResult>(selector.InvokeOrDefault(new ScriptsPainlessExecuteDescriptor()));
		public Task<ScriptsPainlessExecuteResponse<TResult>> ScriptsPainlessExecuteAsync<TResult>(Func<ScriptsPainlessExecuteDescriptor, IScriptsPainlessExecuteRequest> selector = null, CancellationToken cancellationToken = default) => ScriptsPainlessExecuteAsync<TResult>(selector.InvokeOrDefault(new ScriptsPainlessExecuteDescriptor()), cancellationToken);
		public ScrollResponse<TDocument> Scroll<TDocument>(IScrollRequest request) => DoRequest<IScrollRequest, ScrollResponse<TDocument>>(request, request.RequestParameters);
		public Task<ScrollResponse<TDocument>> ScrollAsync<TDocument>(IScrollRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IScrollRequest, ScrollResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public ScrollResponse<TDocument> Scroll<TDocument>(Func<ScrollDescriptor, IScrollRequest> selector = null) => Scroll<TDocument>(selector.InvokeOrDefault(new ScrollDescriptor()));
		public Task<ScrollResponse<TDocument>> ScrollAsync<TDocument>(Func<ScrollDescriptor, IScrollRequest> selector = null, CancellationToken cancellationToken = default) => ScrollAsync<TDocument>(selector.InvokeOrDefault(new ScrollDescriptor()), cancellationToken);
		public SearchResponse<TDocument> Search<TDocument>(ISearchRequest request) => DoRequest<ISearchRequest, SearchResponse<TDocument>>(request, request.RequestParameters);
		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(ISearchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISearchRequest, SearchResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public SearchResponse<TDocument> Search<TDocument>(Func<SearchDescriptor, ISearchRequest> selector = null) => Search<TDocument>(selector.InvokeOrDefault(new SearchDescriptor()));
		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Func<SearchDescriptor, ISearchRequest> selector = null, CancellationToken cancellationToken = default) => SearchAsync<TDocument>(selector.InvokeOrDefault(new SearchDescriptor()), cancellationToken);
		public SearchMvtResponse SearchMvt(ISearchMvtRequest request) => DoRequest<ISearchMvtRequest, SearchMvtResponse>(request, request.RequestParameters);
		public Task<SearchMvtResponse> SearchMvtAsync(ISearchMvtRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISearchMvtRequest, SearchMvtResponse>(request, request.RequestParameters, cancellationToken);
		public SearchMvtResponse SearchMvt(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y, Func<SearchMvtDescriptor, ISearchMvtRequest> selector = null) => SearchMvt(selector.InvokeOrDefault(new SearchMvtDescriptor(index, field, zoom, x, y)));
		public Task<SearchMvtResponse> SearchMvtAsync(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Field field, int zoom, int x, int y, Func<SearchMvtDescriptor, ISearchMvtRequest> selector = null, CancellationToken cancellationToken = default) => SearchMvtAsync(selector.InvokeOrDefault(new SearchMvtDescriptor(index, field, zoom, x, y)), cancellationToken);
		public SearchShardsResponse SearchShards(ISearchShardsRequest request) => DoRequest<ISearchShardsRequest, SearchShardsResponse>(request, request.RequestParameters);
		public Task<SearchShardsResponse> SearchShardsAsync(ISearchShardsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISearchShardsRequest, SearchShardsResponse>(request, request.RequestParameters, cancellationToken);
		public SearchShardsResponse SearchShards(Func<SearchShardsDescriptor, ISearchShardsRequest> selector = null) => SearchShards(selector.InvokeOrDefault(new SearchShardsDescriptor()));
		public Task<SearchShardsResponse> SearchShardsAsync(Func<SearchShardsDescriptor, ISearchShardsRequest> selector = null, CancellationToken cancellationToken = default) => SearchShardsAsync(selector.InvokeOrDefault(new SearchShardsDescriptor()), cancellationToken);
		public SearchTemplateResponse<TDocument> SearchTemplate<TDocument>(ISearchTemplateRequest request) => DoRequest<ISearchTemplateRequest, SearchTemplateResponse<TDocument>>(request, request.RequestParameters);
		public Task<SearchTemplateResponse<TDocument>> SearchTemplateAsync<TDocument>(ISearchTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISearchTemplateRequest, SearchTemplateResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public SearchTemplateResponse<TDocument> SearchTemplate<TDocument>(Func<SearchTemplateDescriptor, ISearchTemplateRequest> selector = null) => SearchTemplate<TDocument>(selector.InvokeOrDefault(new SearchTemplateDescriptor()));
		public Task<SearchTemplateResponse<TDocument>> SearchTemplateAsync<TDocument>(Func<SearchTemplateDescriptor, ISearchTemplateRequest> selector = null, CancellationToken cancellationToken = default) => SearchTemplateAsync<TDocument>(selector.InvokeOrDefault(new SearchTemplateDescriptor()), cancellationToken);
		public TermsEnumResponse TermsEnum(ITermsEnumRequest request) => DoRequest<ITermsEnumRequest, TermsEnumResponse>(request, request.RequestParameters);
		public Task<TermsEnumResponse> TermsEnumAsync(ITermsEnumRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ITermsEnumRequest, TermsEnumResponse>(request, request.RequestParameters, cancellationToken);
		public TermsEnumResponse TermsEnum(Elastic.Clients.Elasticsearch.IndexName index, Func<TermsEnumDescriptor, ITermsEnumRequest> selector = null) => TermsEnum(selector.InvokeOrDefault(new TermsEnumDescriptor(index)));
		public Task<TermsEnumResponse> TermsEnumAsync(Elastic.Clients.Elasticsearch.IndexName index, Func<TermsEnumDescriptor, ITermsEnumRequest> selector = null, CancellationToken cancellationToken = default) => TermsEnumAsync(selector.InvokeOrDefault(new TermsEnumDescriptor(index)), cancellationToken);
		public TermvectorsResponse Termvectors<TDocument>(ITermvectorsRequest<TDocument> request) => DoRequest<ITermvectorsRequest<TDocument>, TermvectorsResponse>(request, request.RequestParameters);
		public Task<TermvectorsResponse> TermvectorsAsync<TDocument>(ITermvectorsRequest<TDocument> request, CancellationToken cancellationToken = default) => DoRequestAsync<ITermvectorsRequest<TDocument>, TermvectorsResponse>(request, request.RequestParameters, cancellationToken);
		public TermvectorsResponse Termvectors<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Func<TermvectorsDescriptor<TDocument>, ITermvectorsRequest<TDocument>> selector = null) => Termvectors<TDocument>(selector.InvokeOrDefault(new TermvectorsDescriptor<TDocument>(index)));
		public Task<TermvectorsResponse> TermvectorsAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Func<TermvectorsDescriptor<TDocument>, ITermvectorsRequest<TDocument>> selector = null, CancellationToken cancellationToken = default) => TermvectorsAsync<TDocument>(selector.InvokeOrDefault(new TermvectorsDescriptor<TDocument>(index)), cancellationToken);
		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request) => DoRequest<IUpdateRequest<TDocument,TPartialDocument>, UpdateResponse<TDocument>>(request, request.RequestParameters);
		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateRequest<TDocument,TPartialDocument>, UpdateResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument,TPartialDocument>> selector = null) => Update<TDocument, TPartialDocument>(selector.InvokeOrDefault(new UpdateDescriptor<TDocument, TPartialDocument>(index, id)));
		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument,TPartialDocument>> selector = null, CancellationToken cancellationToken = default) => UpdateAsync<TDocument, TPartialDocument>(selector.InvokeOrDefault(new UpdateDescriptor<TDocument, TPartialDocument>(index, id)), cancellationToken);
		public UpdateByQueryResponse UpdateByQuery(IUpdateByQueryRequest request) => DoRequest<IUpdateByQueryRequest, UpdateByQueryResponse>(request, request.RequestParameters);
		public Task<UpdateByQueryResponse> UpdateByQueryAsync(IUpdateByQueryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateByQueryRequest, UpdateByQueryResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateByQueryResponse UpdateByQuery(Elastic.Clients.Elasticsearch.Indices index, Func<UpdateByQueryDescriptor, IUpdateByQueryRequest> selector = null) => UpdateByQuery(selector.InvokeOrDefault(new UpdateByQueryDescriptor(index)));
		public Task<UpdateByQueryResponse> UpdateByQueryAsync(Elastic.Clients.Elasticsearch.Indices index, Func<UpdateByQueryDescriptor, IUpdateByQueryRequest> selector = null, CancellationToken cancellationToken = default) => UpdateByQueryAsync(selector.InvokeOrDefault(new UpdateByQueryDescriptor(index)), cancellationToken);
		public UpdateByQueryRethrottleResponse UpdateByQueryRethrottle(IUpdateByQueryRethrottleRequest request) => DoRequest<IUpdateByQueryRethrottleRequest, UpdateByQueryRethrottleResponse>(request, request.RequestParameters);
		public Task<UpdateByQueryRethrottleResponse> UpdateByQueryRethrottleAsync(IUpdateByQueryRethrottleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateByQueryRethrottleRequest, UpdateByQueryRethrottleResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateByQueryRethrottleResponse UpdateByQueryRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Func<UpdateByQueryRethrottleDescriptor, IUpdateByQueryRethrottleRequest> selector = null) => UpdateByQueryRethrottle(selector.InvokeOrDefault(new UpdateByQueryRethrottleDescriptor(task_id)));
		public Task<UpdateByQueryRethrottleResponse> UpdateByQueryRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Func<UpdateByQueryRethrottleDescriptor, IUpdateByQueryRethrottleRequest> selector = null, CancellationToken cancellationToken = default) => UpdateByQueryRethrottleAsync(selector.InvokeOrDefault(new UpdateByQueryRethrottleDescriptor(task_id)), cancellationToken);
	}
}