// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Collections.Generic;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial class ByteSize : Union<long?, string?>
	{
		public ByteSize(long? item) : base(item)
		{
		}

		public ByteSize(string? item) : base(item)
		{
		}
	}

	public partial class Context : Union<string?, Elastic.Clients.Elasticsearch.GeoLocation?>
	{
		public Context(string? item) : base(item)
		{
		}

		public Context(Elastic.Clients.Elasticsearch.GeoLocation? item) : base(item)
		{
		}
	}

	public partial class EpochMillis : Union<string?, long?>
	{
		public EpochMillis(string? item) : base(item)
		{
		}

		public EpochMillis(long? item) : base(item)
		{
		}
	}

	public partial class ExpandWildcards
	{
		private readonly List<ExpandWildcard> _expandWildcardList = new();
	}

	public partial class Fuzziness : Union<string?, int?>
	{
		public Fuzziness(string? item) : base(item)
		{
		}

		public Fuzziness(int? item) : base(item)
		{
		}
	}

	public partial class GeoBounds
	{
	}

	public partial class GeoHashPrecision : Union<double?, string?>
	{
		public GeoHashPrecision(double? item) : base(item)
		{
		}

		public GeoHashPrecision(string? item) : base(item)
		{
		}
	}

	public partial class GeoLocation
	{
	}

	public partial class GetSourceConfig : Union<bool?, Elastic.Clients.Elasticsearch.Fields?>
	{
		public GetSourceConfig(bool? item) : base(item)
		{
		}

		public GetSourceConfig(Elastic.Clients.Elasticsearch.Fields? item) : base(item)
		{
		}
	}

	public partial class HighlighterType : Union<Elastic.Clients.Elasticsearch.BuiltinHighlighterType?, string?>
	{
		public HighlighterType(Elastic.Clients.Elasticsearch.BuiltinHighlighterType? item) : base(item)
		{
		}

		public HighlighterType(string? item) : base(item)
		{
		}
	}

	public partial class Ids
	{
		private readonly List<Id> _idList = new();
	}

	public partial class Percentage : Union<string?, float?>
	{
		public Percentage(string? item) : base(item)
		{
		}

		public Percentage(float? item) : base(item)
		{
		}
	}

	public partial class Script : Union<Elastic.Clients.Elasticsearch.InlineScript?, Elastic.Clients.Elasticsearch.StoredScriptId?>
	{
		public Script(Elastic.Clients.Elasticsearch.InlineScript? item) : base(item)
		{
		}

		public Script(Elastic.Clients.Elasticsearch.StoredScriptId? item) : base(item)
		{
		}
	}

	public partial class ScriptLanguage : Union<Elastic.Clients.Elasticsearch.BuiltinScriptLanguage?, string?>
	{
		public ScriptLanguage(Elastic.Clients.Elasticsearch.BuiltinScriptLanguage? item) : base(item)
		{
		}

		public ScriptLanguage(string? item) : base(item)
		{
		}
	}

	public partial class Sort
	{
		private readonly List<SortCombinations> _sortCombinationsList = new();
	}

	public partial class SortCombinations : Union<string?, Elastic.Clients.Elasticsearch.SortOptions?>
	{
		public SortCombinations(string? item) : base(item)
		{
		}

		public SortCombinations(Elastic.Clients.Elasticsearch.SortOptions? item) : base(item)
		{
		}
	}

	public partial class SourceConfig : Union<bool?, Elastic.Clients.Elasticsearch.SourceFilter?>
	{
		public SourceConfig(bool? item) : base(item)
		{
		}

		public SourceConfig(Elastic.Clients.Elasticsearch.SourceFilter? item) : base(item)
		{
		}
	}

	public partial class SuggestOption<TDocument>
	{
	}

	public partial class TaskId : Union<string?, int?>
	{
		public TaskId(string? item) : base(item)
		{
		}

		public TaskId(int? item) : base(item)
		{
		}
	}

	public partial class TrackHits : Union<bool?, int?>
	{
		public TrackHits(bool? item) : base(item)
		{
		}

		public TrackHits(int? item) : base(item)
		{
		}
	}

	public partial class Types
	{
		private readonly List<DocType> _docTypeList = new();
	}
}