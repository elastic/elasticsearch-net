// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.SearchableSnapshots
{
	public class SearchableSnapshotsNamespace : NamespacedClientProxy
	{
		internal SearchableSnapshotsNamespace(ElasticClient client) : base(client)
		{
		}

		public ClearCacheResponse ClearCache(IClearCacheRequest request) => DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);
		public Task<ClearCacheResponse> ClearCacheAsync(IClearCacheRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCacheResponse ClearCache(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null) => ClearCache(selector.InvokeOrDefault(new ClearCacheDescriptor()));
		public Task<ClearCacheResponse> ClearCacheAsync(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null, CancellationToken cancellationToken = default) => ClearCacheAsync(selector.InvokeOrDefault(new ClearCacheDescriptor()), cancellationToken);
		public MountResponse Mount(IMountRequest request) => DoRequest<IMountRequest, MountResponse>(request, request.RequestParameters);
		public Task<MountResponse> MountAsync(IMountRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMountRequest, MountResponse>(request, request.RequestParameters, cancellationToken);
		public MountResponse Mount(Elastic.Clients.Elasticsearch.Name repository, Elastic.Clients.Elasticsearch.Name snapshot, Func<MountDescriptor, IMountRequest> selector = null) => Mount(selector.InvokeOrDefault(new MountDescriptor(repository, snapshot)));
		public Task<MountResponse> MountAsync(Elastic.Clients.Elasticsearch.Name repository, Elastic.Clients.Elasticsearch.Name snapshot, Func<MountDescriptor, IMountRequest> selector = null, CancellationToken cancellationToken = default) => MountAsync(selector.InvokeOrDefault(new MountDescriptor(repository, snapshot)), cancellationToken);
		public StatsResponse Stats(IStatsRequest request) => DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null) => Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default) => StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
	}
}