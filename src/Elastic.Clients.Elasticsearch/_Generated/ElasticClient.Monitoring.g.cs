// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Monitoring
{
	public class MonitoringNamespace : NamespacedClientProxy
	{
		internal MonitoringNamespace(ElasticClient client) : base(client)
		{
		}

		public BulkResponse Bulk<TSource>(IBulkRequest<TSource> request) => DoRequest<IBulkRequest<TSource>, BulkResponse>(request, request.RequestParameters);
		public Task<BulkResponse> BulkAsync<TSource>(IBulkRequest<TSource> request, CancellationToken cancellationToken = default) => DoRequestAsync<IBulkRequest<TSource>, BulkResponse>(request, request.RequestParameters, cancellationToken);
		public BulkResponse Bulk<TSource>(Func<BulkDescriptor<TSource>, IBulkRequest<TSource>> selector = null) => Bulk<TSource>(selector.InvokeOrDefault(new BulkDescriptor<TSource>()));
		public Task<BulkResponse> BulkAsync<TSource>(Func<BulkDescriptor<TSource>, IBulkRequest<TSource>> selector = null, CancellationToken cancellationToken = default) => BulkAsync<TSource>(selector.InvokeOrDefault(new BulkDescriptor<TSource>()), cancellationToken);
	}
}