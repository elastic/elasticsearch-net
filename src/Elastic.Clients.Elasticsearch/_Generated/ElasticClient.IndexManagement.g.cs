// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexManagementNamespace : NamespacedClientProxy
	{
		internal IndexManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public AddBlockResponse AddBlock(IAddBlockRequest request) => DoRequest<IAddBlockRequest, AddBlockResponse>(request, request.RequestParameters);
		public Task<AddBlockResponse> AddBlockAsync(IAddBlockRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IAddBlockRequest, AddBlockResponse>(request, request.RequestParameters, cancellationToken);
		public AddBlockResponse AddBlock(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexManagement.AddBlock.IndicesBlockOptions block, Func<AddBlockDescriptor, IAddBlockRequest> selector = null) => AddBlock(selector.InvokeOrDefault(new AddBlockDescriptor(index, block)));
		public Task<AddBlockResponse> AddBlockAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexManagement.AddBlock.IndicesBlockOptions block, Func<AddBlockDescriptor, IAddBlockRequest> selector = null, CancellationToken cancellationToken = default) => AddBlockAsync(selector.InvokeOrDefault(new AddBlockDescriptor(index, block)), cancellationToken);
		public AnalyzeResponse Analyze(IAnalyzeRequest request) => DoRequest<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters);
		public Task<AnalyzeResponse> AnalyzeAsync(IAnalyzeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters, cancellationToken);
		public AnalyzeResponse Analyze(Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null) => Analyze(selector.InvokeOrDefault(new AnalyzeDescriptor()));
		public Task<AnalyzeResponse> AnalyzeAsync(Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null, CancellationToken cancellationToken = default) => AnalyzeAsync(selector.InvokeOrDefault(new AnalyzeDescriptor()), cancellationToken);
		public ClearCacheResponse ClearCache(IClearCacheRequest request) => DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);
		public Task<ClearCacheResponse> ClearCacheAsync(IClearCacheRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCacheResponse ClearCache(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null) => ClearCache(selector.InvokeOrDefault(new ClearCacheDescriptor()));
		public Task<ClearCacheResponse> ClearCacheAsync(Func<ClearCacheDescriptor, IClearCacheRequest> selector = null, CancellationToken cancellationToken = default) => ClearCacheAsync(selector.InvokeOrDefault(new ClearCacheDescriptor()), cancellationToken);
		public CloneResponse Clone(ICloneRequest request) => DoRequest<ICloneRequest, CloneResponse>(request, request.RequestParameters);
		public Task<CloneResponse> CloneAsync(ICloneRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICloneRequest, CloneResponse>(request, request.RequestParameters, cancellationToken);
		public CloneResponse Clone(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Func<CloneDescriptor, ICloneRequest> selector = null) => Clone(selector.InvokeOrDefault(new CloneDescriptor(index, target)));
		public Task<CloneResponse> CloneAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Func<CloneDescriptor, ICloneRequest> selector = null, CancellationToken cancellationToken = default) => CloneAsync(selector.InvokeOrDefault(new CloneDescriptor(index, target)), cancellationToken);
		public CloseResponse Close(ICloseRequest request) => DoRequest<ICloseRequest, CloseResponse>(request, request.RequestParameters);
		public Task<CloseResponse> CloseAsync(ICloseRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICloseRequest, CloseResponse>(request, request.RequestParameters, cancellationToken);
		public CloseResponse Close(Elastic.Clients.Elasticsearch.Indices index, Func<CloseDescriptor, ICloseRequest> selector = null) => Close(selector.InvokeOrDefault(new CloseDescriptor(index)));
		public Task<CloseResponse> CloseAsync(Elastic.Clients.Elasticsearch.Indices index, Func<CloseDescriptor, ICloseRequest> selector = null, CancellationToken cancellationToken = default) => CloseAsync(selector.InvokeOrDefault(new CloseDescriptor(index)), cancellationToken);
		public CreateResponse Create(ICreateRequest request) => DoRequest<ICreateRequest, CreateResponse>(request, request.RequestParameters);
		public Task<CreateResponse> CreateAsync(ICreateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateRequest, CreateResponse>(request, request.RequestParameters, cancellationToken);
		public CreateResponse Create(Elastic.Clients.Elasticsearch.IndexName index, Func<CreateDescriptor, ICreateRequest> selector = null) => Create(selector.InvokeOrDefault(new CreateDescriptor(index)));
		public Task<CreateResponse> CreateAsync(Elastic.Clients.Elasticsearch.IndexName index, Func<CreateDescriptor, ICreateRequest> selector = null, CancellationToken cancellationToken = default) => CreateAsync(selector.InvokeOrDefault(new CreateDescriptor(index)), cancellationToken);
		public CreateDataStreamResponse CreateDataStream(ICreateDataStreamRequest request) => DoRequest<ICreateDataStreamRequest, CreateDataStreamResponse>(request, request.RequestParameters);
		public Task<CreateDataStreamResponse> CreateDataStreamAsync(ICreateDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateDataStreamRequest, CreateDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public CreateDataStreamResponse CreateDataStream(Elastic.Clients.Elasticsearch.DataStreamName name, Func<CreateDataStreamDescriptor, ICreateDataStreamRequest> selector = null) => CreateDataStream(selector.InvokeOrDefault(new CreateDataStreamDescriptor(name)));
		public Task<CreateDataStreamResponse> CreateDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamName name, Func<CreateDataStreamDescriptor, ICreateDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => CreateDataStreamAsync(selector.InvokeOrDefault(new CreateDataStreamDescriptor(name)), cancellationToken);
		public DataStreamsStatsResponse DataStreamsStats(IDataStreamsStatsRequest request) => DoRequest<IDataStreamsStatsRequest, DataStreamsStatsResponse>(request, request.RequestParameters);
		public Task<DataStreamsStatsResponse> DataStreamsStatsAsync(IDataStreamsStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDataStreamsStatsRequest, DataStreamsStatsResponse>(request, request.RequestParameters, cancellationToken);
		public DataStreamsStatsResponse DataStreamsStats(Func<DataStreamsStatsDescriptor, IDataStreamsStatsRequest> selector = null) => DataStreamsStats(selector.InvokeOrDefault(new DataStreamsStatsDescriptor()));
		public Task<DataStreamsStatsResponse> DataStreamsStatsAsync(Func<DataStreamsStatsDescriptor, IDataStreamsStatsRequest> selector = null, CancellationToken cancellationToken = default) => DataStreamsStatsAsync(selector.InvokeOrDefault(new DataStreamsStatsDescriptor()), cancellationToken);
		public DeleteResponse Delete(IDeleteRequest request) => DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteResponse Delete(Elastic.Clients.Elasticsearch.Indices index, Func<DeleteDescriptor, IDeleteRequest> selector = null) => Delete(selector.InvokeOrDefault(new DeleteDescriptor(index)));
		public Task<DeleteResponse> DeleteAsync(Elastic.Clients.Elasticsearch.Indices index, Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor(index)), cancellationToken);
		public DeleteAliasResponse DeleteAlias(IDeleteAliasRequest request) => DoRequest<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters);
		public Task<DeleteAliasResponse> DeleteAliasAsync(IDeleteAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteAliasRequest, DeleteAliasResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteAliasResponse DeleteAlias(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Names name, Func<DeleteAliasDescriptor, IDeleteAliasRequest> selector = null) => DeleteAlias(selector.InvokeOrDefault(new DeleteAliasDescriptor(index, name)));
		public Task<DeleteAliasResponse> DeleteAliasAsync(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Names name, Func<DeleteAliasDescriptor, IDeleteAliasRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAliasAsync(selector.InvokeOrDefault(new DeleteAliasDescriptor(index, name)), cancellationToken);
		public DeleteDataStreamResponse DeleteDataStream(IDeleteDataStreamRequest request) => DoRequest<IDeleteDataStreamRequest, DeleteDataStreamResponse>(request, request.RequestParameters);
		public Task<DeleteDataStreamResponse> DeleteDataStreamAsync(IDeleteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteDataStreamRequest, DeleteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteDataStreamResponse DeleteDataStream(Elastic.Clients.Elasticsearch.DataStreamNames name, Func<DeleteDataStreamDescriptor, IDeleteDataStreamRequest> selector = null) => DeleteDataStream(selector.InvokeOrDefault(new DeleteDataStreamDescriptor(name)));
		public Task<DeleteDataStreamResponse> DeleteDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamNames name, Func<DeleteDataStreamDescriptor, IDeleteDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => DeleteDataStreamAsync(selector.InvokeOrDefault(new DeleteDataStreamDescriptor(name)), cancellationToken);
		public DeleteIndexTemplateResponse DeleteIndexTemplate(IDeleteIndexTemplateRequest request) => DoRequest<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters);
		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(IDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteIndexTemplateRequest, DeleteIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteIndexTemplateResponse DeleteIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<DeleteIndexTemplateDescriptor, IDeleteIndexTemplateRequest> selector = null) => DeleteIndexTemplate(selector.InvokeOrDefault(new DeleteIndexTemplateDescriptor(name)));
		public Task<DeleteIndexTemplateResponse> DeleteIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<DeleteIndexTemplateDescriptor, IDeleteIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => DeleteIndexTemplateAsync(selector.InvokeOrDefault(new DeleteIndexTemplateDescriptor(name)), cancellationToken);
		public DeleteTemplateResponse DeleteTemplate(IDeleteTemplateRequest request) => DoRequest<IDeleteTemplateRequest, DeleteTemplateResponse>(request, request.RequestParameters);
		public Task<DeleteTemplateResponse> DeleteTemplateAsync(IDeleteTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteTemplateRequest, DeleteTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteTemplateResponse DeleteTemplate(Elastic.Clients.Elasticsearch.Name name, Func<DeleteTemplateDescriptor, IDeleteTemplateRequest> selector = null) => DeleteTemplate(selector.InvokeOrDefault(new DeleteTemplateDescriptor(name)));
		public Task<DeleteTemplateResponse> DeleteTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<DeleteTemplateDescriptor, IDeleteTemplateRequest> selector = null, CancellationToken cancellationToken = default) => DeleteTemplateAsync(selector.InvokeOrDefault(new DeleteTemplateDescriptor(name)), cancellationToken);
		public ExistsResponse Exists(IExistsRequest request) => DoRequest<IExistsRequest, ExistsResponse>(request, request.RequestParameters);
		public Task<ExistsResponse> ExistsAsync(IExistsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsRequest, ExistsResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsResponse Exists(Elastic.Clients.Elasticsearch.Indices index, Func<ExistsDescriptor, IExistsRequest> selector = null) => Exists(selector.InvokeOrDefault(new ExistsDescriptor(index)));
		public Task<ExistsResponse> ExistsAsync(Elastic.Clients.Elasticsearch.Indices index, Func<ExistsDescriptor, IExistsRequest> selector = null, CancellationToken cancellationToken = default) => ExistsAsync(selector.InvokeOrDefault(new ExistsDescriptor(index)), cancellationToken);
		public ExistsAliasResponse ExistsAlias(IExistsAliasRequest request) => DoRequest<IExistsAliasRequest, ExistsAliasResponse>(request, request.RequestParameters);
		public Task<ExistsAliasResponse> ExistsAliasAsync(IExistsAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsAliasRequest, ExistsAliasResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsAliasResponse ExistsAlias(Elastic.Clients.Elasticsearch.Names name, Func<ExistsAliasDescriptor, IExistsAliasRequest> selector = null) => ExistsAlias(selector.InvokeOrDefault(new ExistsAliasDescriptor(name)));
		public Task<ExistsAliasResponse> ExistsAliasAsync(Elastic.Clients.Elasticsearch.Names name, Func<ExistsAliasDescriptor, IExistsAliasRequest> selector = null, CancellationToken cancellationToken = default) => ExistsAliasAsync(selector.InvokeOrDefault(new ExistsAliasDescriptor(name)), cancellationToken);
		public ExistsIndexTemplateResponse ExistsIndexTemplate(IExistsIndexTemplateRequest request) => DoRequest<IExistsIndexTemplateRequest, ExistsIndexTemplateResponse>(request, request.RequestParameters);
		public Task<ExistsIndexTemplateResponse> ExistsIndexTemplateAsync(IExistsIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsIndexTemplateRequest, ExistsIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsIndexTemplateResponse ExistsIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<ExistsIndexTemplateDescriptor, IExistsIndexTemplateRequest> selector = null) => ExistsIndexTemplate(selector.InvokeOrDefault(new ExistsIndexTemplateDescriptor(name)));
		public Task<ExistsIndexTemplateResponse> ExistsIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<ExistsIndexTemplateDescriptor, IExistsIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => ExistsIndexTemplateAsync(selector.InvokeOrDefault(new ExistsIndexTemplateDescriptor(name)), cancellationToken);
		public ExistsTemplateResponse ExistsTemplate(IExistsTemplateRequest request) => DoRequest<IExistsTemplateRequest, ExistsTemplateResponse>(request, request.RequestParameters);
		public Task<ExistsTemplateResponse> ExistsTemplateAsync(IExistsTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExistsTemplateRequest, ExistsTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ExistsTemplateResponse ExistsTemplate(Elastic.Clients.Elasticsearch.Names name, Func<ExistsTemplateDescriptor, IExistsTemplateRequest> selector = null) => ExistsTemplate(selector.InvokeOrDefault(new ExistsTemplateDescriptor(name)));
		public Task<ExistsTemplateResponse> ExistsTemplateAsync(Elastic.Clients.Elasticsearch.Names name, Func<ExistsTemplateDescriptor, IExistsTemplateRequest> selector = null, CancellationToken cancellationToken = default) => ExistsTemplateAsync(selector.InvokeOrDefault(new ExistsTemplateDescriptor(name)), cancellationToken);
		public FlushResponse Flush(IFlushRequest request) => DoRequest<IFlushRequest, FlushResponse>(request, request.RequestParameters);
		public Task<FlushResponse> FlushAsync(IFlushRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IFlushRequest, FlushResponse>(request, request.RequestParameters, cancellationToken);
		public FlushResponse Flush(Func<FlushDescriptor, IFlushRequest> selector = null) => Flush(selector.InvokeOrDefault(new FlushDescriptor()));
		public Task<FlushResponse> FlushAsync(Func<FlushDescriptor, IFlushRequest> selector = null, CancellationToken cancellationToken = default) => FlushAsync(selector.InvokeOrDefault(new FlushDescriptor()), cancellationToken);
		public ForcemergeResponse Forcemerge(IForcemergeRequest request) => DoRequest<IForcemergeRequest, ForcemergeResponse>(request, request.RequestParameters);
		public Task<ForcemergeResponse> ForcemergeAsync(IForcemergeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IForcemergeRequest, ForcemergeResponse>(request, request.RequestParameters, cancellationToken);
		public ForcemergeResponse Forcemerge(Func<ForcemergeDescriptor, IForcemergeRequest> selector = null) => Forcemerge(selector.InvokeOrDefault(new ForcemergeDescriptor()));
		public Task<ForcemergeResponse> ForcemergeAsync(Func<ForcemergeDescriptor, IForcemergeRequest> selector = null, CancellationToken cancellationToken = default) => ForcemergeAsync(selector.InvokeOrDefault(new ForcemergeDescriptor()), cancellationToken);
		public GetResponse Get(IGetRequest request) => DoRequest<IGetRequest, GetResponse>(request, request.RequestParameters);
		public Task<GetResponse> GetAsync(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse>(request, request.RequestParameters, cancellationToken);
		public GetResponse Get(Elastic.Clients.Elasticsearch.Indices index, Func<GetDescriptor, IGetRequest> selector = null) => Get(selector.InvokeOrDefault(new GetDescriptor(index)));
		public Task<GetResponse> GetAsync(Elastic.Clients.Elasticsearch.Indices index, Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync(selector.InvokeOrDefault(new GetDescriptor(index)), cancellationToken);
		public GetAliasResponse GetAlias(IGetAliasRequest request) => DoRequest<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters);
		public Task<GetAliasResponse> GetAliasAsync(IGetAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetAliasRequest, GetAliasResponse>(request, request.RequestParameters, cancellationToken);
		public GetAliasResponse GetAlias(Func<GetAliasDescriptor, IGetAliasRequest> selector = null) => GetAlias(selector.InvokeOrDefault(new GetAliasDescriptor()));
		public Task<GetAliasResponse> GetAliasAsync(Func<GetAliasDescriptor, IGetAliasRequest> selector = null, CancellationToken cancellationToken = default) => GetAliasAsync(selector.InvokeOrDefault(new GetAliasDescriptor()), cancellationToken);
		public GetDataStreamResponse GetDataStream(IGetDataStreamRequest request) => DoRequest<IGetDataStreamRequest, GetDataStreamResponse>(request, request.RequestParameters);
		public Task<GetDataStreamResponse> GetDataStreamAsync(IGetDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetDataStreamRequest, GetDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public GetDataStreamResponse GetDataStream(Func<GetDataStreamDescriptor, IGetDataStreamRequest> selector = null) => GetDataStream(selector.InvokeOrDefault(new GetDataStreamDescriptor()));
		public Task<GetDataStreamResponse> GetDataStreamAsync(Func<GetDataStreamDescriptor, IGetDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => GetDataStreamAsync(selector.InvokeOrDefault(new GetDataStreamDescriptor()), cancellationToken);
		public GetFieldMappingResponse GetFieldMapping(IGetFieldMappingRequest request) => DoRequest<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters);
		public Task<GetFieldMappingResponse> GetFieldMappingAsync(IGetFieldMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetFieldMappingRequest, GetFieldMappingResponse>(request, request.RequestParameters, cancellationToken);
		public GetFieldMappingResponse GetFieldMapping(Elastic.Clients.Elasticsearch.Fields fields, Func<GetFieldMappingDescriptor, IGetFieldMappingRequest> selector = null) => GetFieldMapping(selector.InvokeOrDefault(new GetFieldMappingDescriptor(fields)));
		public Task<GetFieldMappingResponse> GetFieldMappingAsync(Elastic.Clients.Elasticsearch.Fields fields, Func<GetFieldMappingDescriptor, IGetFieldMappingRequest> selector = null, CancellationToken cancellationToken = default) => GetFieldMappingAsync(selector.InvokeOrDefault(new GetFieldMappingDescriptor(fields)), cancellationToken);
		public GetIndexTemplateResponse GetIndexTemplate(IGetIndexTemplateRequest request) => DoRequest<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters);
		public Task<GetIndexTemplateResponse> GetIndexTemplateAsync(IGetIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetIndexTemplateRequest, GetIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public GetIndexTemplateResponse GetIndexTemplate(Func<GetIndexTemplateDescriptor, IGetIndexTemplateRequest> selector = null) => GetIndexTemplate(selector.InvokeOrDefault(new GetIndexTemplateDescriptor()));
		public Task<GetIndexTemplateResponse> GetIndexTemplateAsync(Func<GetIndexTemplateDescriptor, IGetIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => GetIndexTemplateAsync(selector.InvokeOrDefault(new GetIndexTemplateDescriptor()), cancellationToken);
		public GetMappingResponse GetMapping(IGetMappingRequest request) => DoRequest<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters);
		public Task<GetMappingResponse> GetMappingAsync(IGetMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetMappingRequest, GetMappingResponse>(request, request.RequestParameters, cancellationToken);
		public GetMappingResponse GetMapping(Func<GetMappingDescriptor, IGetMappingRequest> selector = null) => GetMapping(selector.InvokeOrDefault(new GetMappingDescriptor()));
		public Task<GetMappingResponse> GetMappingAsync(Func<GetMappingDescriptor, IGetMappingRequest> selector = null, CancellationToken cancellationToken = default) => GetMappingAsync(selector.InvokeOrDefault(new GetMappingDescriptor()), cancellationToken);
		public GetSettingsResponse GetSettings(IGetSettingsRequest request) => DoRequest<IGetSettingsRequest, GetSettingsResponse>(request, request.RequestParameters);
		public Task<GetSettingsResponse> GetSettingsAsync(IGetSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetSettingsRequest, GetSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public GetSettingsResponse GetSettings(Func<GetSettingsDescriptor, IGetSettingsRequest> selector = null) => GetSettings(selector.InvokeOrDefault(new GetSettingsDescriptor()));
		public Task<GetSettingsResponse> GetSettingsAsync(Func<GetSettingsDescriptor, IGetSettingsRequest> selector = null, CancellationToken cancellationToken = default) => GetSettingsAsync(selector.InvokeOrDefault(new GetSettingsDescriptor()), cancellationToken);
		public GetTemplateResponse GetTemplate(IGetTemplateRequest request) => DoRequest<IGetTemplateRequest, GetTemplateResponse>(request, request.RequestParameters);
		public Task<GetTemplateResponse> GetTemplateAsync(IGetTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetTemplateRequest, GetTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public GetTemplateResponse GetTemplate(Func<GetTemplateDescriptor, IGetTemplateRequest> selector = null) => GetTemplate(selector.InvokeOrDefault(new GetTemplateDescriptor()));
		public Task<GetTemplateResponse> GetTemplateAsync(Func<GetTemplateDescriptor, IGetTemplateRequest> selector = null, CancellationToken cancellationToken = default) => GetTemplateAsync(selector.InvokeOrDefault(new GetTemplateDescriptor()), cancellationToken);
		public MigrateToDataStreamResponse MigrateToDataStream(IMigrateToDataStreamRequest request) => DoRequest<IMigrateToDataStreamRequest, MigrateToDataStreamResponse>(request, request.RequestParameters);
		public Task<MigrateToDataStreamResponse> MigrateToDataStreamAsync(IMigrateToDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IMigrateToDataStreamRequest, MigrateToDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public MigrateToDataStreamResponse MigrateToDataStream(Elastic.Clients.Elasticsearch.IndexName name, Func<MigrateToDataStreamDescriptor, IMigrateToDataStreamRequest> selector = null) => MigrateToDataStream(selector.InvokeOrDefault(new MigrateToDataStreamDescriptor(name)));
		public Task<MigrateToDataStreamResponse> MigrateToDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Func<MigrateToDataStreamDescriptor, IMigrateToDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => MigrateToDataStreamAsync(selector.InvokeOrDefault(new MigrateToDataStreamDescriptor(name)), cancellationToken);
		public OpenResponse Open(IOpenRequest request) => DoRequest<IOpenRequest, OpenResponse>(request, request.RequestParameters);
		public Task<OpenResponse> OpenAsync(IOpenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IOpenRequest, OpenResponse>(request, request.RequestParameters, cancellationToken);
		public OpenResponse Open(Elastic.Clients.Elasticsearch.Indices index, Func<OpenDescriptor, IOpenRequest> selector = null) => Open(selector.InvokeOrDefault(new OpenDescriptor(index)));
		public Task<OpenResponse> OpenAsync(Elastic.Clients.Elasticsearch.Indices index, Func<OpenDescriptor, IOpenRequest> selector = null, CancellationToken cancellationToken = default) => OpenAsync(selector.InvokeOrDefault(new OpenDescriptor(index)), cancellationToken);
		public PromoteDataStreamResponse PromoteDataStream(IPromoteDataStreamRequest request) => DoRequest<IPromoteDataStreamRequest, PromoteDataStreamResponse>(request, request.RequestParameters);
		public Task<PromoteDataStreamResponse> PromoteDataStreamAsync(IPromoteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPromoteDataStreamRequest, PromoteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public PromoteDataStreamResponse PromoteDataStream(Elastic.Clients.Elasticsearch.IndexName name, Func<PromoteDataStreamDescriptor, IPromoteDataStreamRequest> selector = null) => PromoteDataStream(selector.InvokeOrDefault(new PromoteDataStreamDescriptor(name)));
		public Task<PromoteDataStreamResponse> PromoteDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Func<PromoteDataStreamDescriptor, IPromoteDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => PromoteDataStreamAsync(selector.InvokeOrDefault(new PromoteDataStreamDescriptor(name)), cancellationToken);
		public PutAliasResponse PutAlias(IPutAliasRequest request) => DoRequest<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters);
		public Task<PutAliasResponse> PutAliasAsync(IPutAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutAliasRequest, PutAliasResponse>(request, request.RequestParameters, cancellationToken);
		public PutAliasResponse PutAlias(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Name name, Func<PutAliasDescriptor, IPutAliasRequest> selector = null) => PutAlias(selector.InvokeOrDefault(new PutAliasDescriptor(index, name)));
		public Task<PutAliasResponse> PutAliasAsync(Elastic.Clients.Elasticsearch.Indices index, Elastic.Clients.Elasticsearch.Name name, Func<PutAliasDescriptor, IPutAliasRequest> selector = null, CancellationToken cancellationToken = default) => PutAliasAsync(selector.InvokeOrDefault(new PutAliasDescriptor(index, name)), cancellationToken);
		public PutIndexTemplateResponse PutIndexTemplate(IPutIndexTemplateRequest request) => DoRequest<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters);
		public Task<PutIndexTemplateResponse> PutIndexTemplateAsync(IPutIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutIndexTemplateRequest, PutIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public PutIndexTemplateResponse PutIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<PutIndexTemplateDescriptor, IPutIndexTemplateRequest> selector = null) => PutIndexTemplate(selector.InvokeOrDefault(new PutIndexTemplateDescriptor(name)));
		public Task<PutIndexTemplateResponse> PutIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<PutIndexTemplateDescriptor, IPutIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => PutIndexTemplateAsync(selector.InvokeOrDefault(new PutIndexTemplateDescriptor(name)), cancellationToken);
		public PutMappingResponse PutMapping(IPutMappingRequest request) => DoRequest<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters);
		public Task<PutMappingResponse> PutMappingAsync(IPutMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutMappingRequest, PutMappingResponse>(request, request.RequestParameters, cancellationToken);
		public PutMappingResponse PutMapping(Elastic.Clients.Elasticsearch.Indices index, Func<PutMappingDescriptor, IPutMappingRequest> selector = null) => PutMapping(selector.InvokeOrDefault(new PutMappingDescriptor(index)));
		public Task<PutMappingResponse> PutMappingAsync(Elastic.Clients.Elasticsearch.Indices index, Func<PutMappingDescriptor, IPutMappingRequest> selector = null, CancellationToken cancellationToken = default) => PutMappingAsync(selector.InvokeOrDefault(new PutMappingDescriptor(index)), cancellationToken);
		public PutSettingsResponse PutSettings(IPutSettingsRequest request) => DoRequest<IPutSettingsRequest, PutSettingsResponse>(request, request.RequestParameters);
		public Task<PutSettingsResponse> PutSettingsAsync(IPutSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutSettingsRequest, PutSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public PutSettingsResponse PutSettings(Func<PutSettingsDescriptor, IPutSettingsRequest> selector = null) => PutSettings(selector.InvokeOrDefault(new PutSettingsDescriptor()));
		public Task<PutSettingsResponse> PutSettingsAsync(Func<PutSettingsDescriptor, IPutSettingsRequest> selector = null, CancellationToken cancellationToken = default) => PutSettingsAsync(selector.InvokeOrDefault(new PutSettingsDescriptor()), cancellationToken);
		public PutTemplateResponse PutTemplate(IPutTemplateRequest request) => DoRequest<IPutTemplateRequest, PutTemplateResponse>(request, request.RequestParameters);
		public Task<PutTemplateResponse> PutTemplateAsync(IPutTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutTemplateRequest, PutTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public PutTemplateResponse PutTemplate(Elastic.Clients.Elasticsearch.Name name, Func<PutTemplateDescriptor, IPutTemplateRequest> selector = null) => PutTemplate(selector.InvokeOrDefault(new PutTemplateDescriptor(name)));
		public Task<PutTemplateResponse> PutTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<PutTemplateDescriptor, IPutTemplateRequest> selector = null, CancellationToken cancellationToken = default) => PutTemplateAsync(selector.InvokeOrDefault(new PutTemplateDescriptor(name)), cancellationToken);
		public RecoveryResponse Recovery(IRecoveryRequest request) => DoRequest<IRecoveryRequest, RecoveryResponse>(request, request.RequestParameters);
		public Task<RecoveryResponse> RecoveryAsync(IRecoveryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRecoveryRequest, RecoveryResponse>(request, request.RequestParameters, cancellationToken);
		public RecoveryResponse Recovery(Func<RecoveryDescriptor, IRecoveryRequest> selector = null) => Recovery(selector.InvokeOrDefault(new RecoveryDescriptor()));
		public Task<RecoveryResponse> RecoveryAsync(Func<RecoveryDescriptor, IRecoveryRequest> selector = null, CancellationToken cancellationToken = default) => RecoveryAsync(selector.InvokeOrDefault(new RecoveryDescriptor()), cancellationToken);
		public RefreshResponse Refresh(IRefreshRequest request) => DoRequest<IRefreshRequest, RefreshResponse>(request, request.RequestParameters);
		public Task<RefreshResponse> RefreshAsync(IRefreshRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRefreshRequest, RefreshResponse>(request, request.RequestParameters, cancellationToken);
		public RefreshResponse Refresh(Func<RefreshDescriptor, IRefreshRequest> selector = null) => Refresh(selector.InvokeOrDefault(new RefreshDescriptor()));
		public Task<RefreshResponse> RefreshAsync(Func<RefreshDescriptor, IRefreshRequest> selector = null, CancellationToken cancellationToken = default) => RefreshAsync(selector.InvokeOrDefault(new RefreshDescriptor()), cancellationToken);
		public ReloadSearchAnalyzersResponse ReloadSearchAnalyzers(IReloadSearchAnalyzersRequest request) => DoRequest<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters);
		public Task<ReloadSearchAnalyzersResponse> ReloadSearchAnalyzersAsync(IReloadSearchAnalyzersRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IReloadSearchAnalyzersRequest, ReloadSearchAnalyzersResponse>(request, request.RequestParameters, cancellationToken);
		public ReloadSearchAnalyzersResponse ReloadSearchAnalyzers(Elastic.Clients.Elasticsearch.Indices index, Func<ReloadSearchAnalyzersDescriptor, IReloadSearchAnalyzersRequest> selector = null) => ReloadSearchAnalyzers(selector.InvokeOrDefault(new ReloadSearchAnalyzersDescriptor(index)));
		public Task<ReloadSearchAnalyzersResponse> ReloadSearchAnalyzersAsync(Elastic.Clients.Elasticsearch.Indices index, Func<ReloadSearchAnalyzersDescriptor, IReloadSearchAnalyzersRequest> selector = null, CancellationToken cancellationToken = default) => ReloadSearchAnalyzersAsync(selector.InvokeOrDefault(new ReloadSearchAnalyzersDescriptor(index)), cancellationToken);
		public ResolveIndexResponse ResolveIndex(IResolveIndexRequest request) => DoRequest<IResolveIndexRequest, ResolveIndexResponse>(request, request.RequestParameters);
		public Task<ResolveIndexResponse> ResolveIndexAsync(IResolveIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IResolveIndexRequest, ResolveIndexResponse>(request, request.RequestParameters, cancellationToken);
		public ResolveIndexResponse ResolveIndex(Elastic.Clients.Elasticsearch.Names name, Func<ResolveIndexDescriptor, IResolveIndexRequest> selector = null) => ResolveIndex(selector.InvokeOrDefault(new ResolveIndexDescriptor(name)));
		public Task<ResolveIndexResponse> ResolveIndexAsync(Elastic.Clients.Elasticsearch.Names name, Func<ResolveIndexDescriptor, IResolveIndexRequest> selector = null, CancellationToken cancellationToken = default) => ResolveIndexAsync(selector.InvokeOrDefault(new ResolveIndexDescriptor(name)), cancellationToken);
		public RolloverResponse Rollover(IRolloverRequest request) => DoRequest<IRolloverRequest, RolloverResponse>(request, request.RequestParameters);
		public Task<RolloverResponse> RolloverAsync(IRolloverRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRolloverRequest, RolloverResponse>(request, request.RequestParameters, cancellationToken);
		public RolloverResponse Rollover(Elastic.Clients.Elasticsearch.IndexAlias alias, Func<RolloverDescriptor, IRolloverRequest> selector = null) => Rollover(selector.InvokeOrDefault(new RolloverDescriptor(alias)));
		public Task<RolloverResponse> RolloverAsync(Elastic.Clients.Elasticsearch.IndexAlias alias, Func<RolloverDescriptor, IRolloverRequest> selector = null, CancellationToken cancellationToken = default) => RolloverAsync(selector.InvokeOrDefault(new RolloverDescriptor(alias)), cancellationToken);
		public SegmentsResponse Segments(ISegmentsRequest request) => DoRequest<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters);
		public Task<SegmentsResponse> SegmentsAsync(ISegmentsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISegmentsRequest, SegmentsResponse>(request, request.RequestParameters, cancellationToken);
		public SegmentsResponse Segments(Func<SegmentsDescriptor, ISegmentsRequest> selector = null) => Segments(selector.InvokeOrDefault(new SegmentsDescriptor()));
		public Task<SegmentsResponse> SegmentsAsync(Func<SegmentsDescriptor, ISegmentsRequest> selector = null, CancellationToken cancellationToken = default) => SegmentsAsync(selector.InvokeOrDefault(new SegmentsDescriptor()), cancellationToken);
		public ShardStoresResponse ShardStores(IShardStoresRequest request) => DoRequest<IShardStoresRequest, ShardStoresResponse>(request, request.RequestParameters);
		public Task<ShardStoresResponse> ShardStoresAsync(IShardStoresRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IShardStoresRequest, ShardStoresResponse>(request, request.RequestParameters, cancellationToken);
		public ShardStoresResponse ShardStores(Func<ShardStoresDescriptor, IShardStoresRequest> selector = null) => ShardStores(selector.InvokeOrDefault(new ShardStoresDescriptor()));
		public Task<ShardStoresResponse> ShardStoresAsync(Func<ShardStoresDescriptor, IShardStoresRequest> selector = null, CancellationToken cancellationToken = default) => ShardStoresAsync(selector.InvokeOrDefault(new ShardStoresDescriptor()), cancellationToken);
		public ShrinkResponse Shrink(IShrinkRequest request) => DoRequest<IShrinkRequest, ShrinkResponse>(request, request.RequestParameters);
		public Task<ShrinkResponse> ShrinkAsync(IShrinkRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IShrinkRequest, ShrinkResponse>(request, request.RequestParameters, cancellationToken);
		public ShrinkResponse Shrink(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<ShrinkDescriptor, IShrinkRequest> selector = null) => Shrink(selector.InvokeOrDefault(new ShrinkDescriptor(index, target)));
		public Task<ShrinkResponse> ShrinkAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<ShrinkDescriptor, IShrinkRequest> selector = null, CancellationToken cancellationToken = default) => ShrinkAsync(selector.InvokeOrDefault(new ShrinkDescriptor(index, target)), cancellationToken);
		public SimulateIndexTemplateResponse SimulateIndexTemplate(ISimulateIndexTemplateRequest request) => DoRequest<ISimulateIndexTemplateRequest, SimulateIndexTemplateResponse>(request, request.RequestParameters);
		public Task<SimulateIndexTemplateResponse> SimulateIndexTemplateAsync(ISimulateIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISimulateIndexTemplateRequest, SimulateIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public SimulateIndexTemplateResponse SimulateIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<SimulateIndexTemplateDescriptor, ISimulateIndexTemplateRequest> selector = null) => SimulateIndexTemplate(selector.InvokeOrDefault(new SimulateIndexTemplateDescriptor(name)));
		public Task<SimulateIndexTemplateResponse> SimulateIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<SimulateIndexTemplateDescriptor, ISimulateIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => SimulateIndexTemplateAsync(selector.InvokeOrDefault(new SimulateIndexTemplateDescriptor(name)), cancellationToken);
		public SimulateTemplateResponse SimulateTemplate(ISimulateTemplateRequest request) => DoRequest<ISimulateTemplateRequest, SimulateTemplateResponse>(request, request.RequestParameters);
		public Task<SimulateTemplateResponse> SimulateTemplateAsync(ISimulateTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISimulateTemplateRequest, SimulateTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public SimulateTemplateResponse SimulateTemplate(Func<SimulateTemplateDescriptor, ISimulateTemplateRequest> selector = null) => SimulateTemplate(selector.InvokeOrDefault(new SimulateTemplateDescriptor()));
		public Task<SimulateTemplateResponse> SimulateTemplateAsync(Func<SimulateTemplateDescriptor, ISimulateTemplateRequest> selector = null, CancellationToken cancellationToken = default) => SimulateTemplateAsync(selector.InvokeOrDefault(new SimulateTemplateDescriptor()), cancellationToken);
		public SplitResponse Split(ISplitRequest request) => DoRequest<ISplitRequest, SplitResponse>(request, request.RequestParameters);
		public Task<SplitResponse> SplitAsync(ISplitRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISplitRequest, SplitResponse>(request, request.RequestParameters, cancellationToken);
		public SplitResponse Split(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<SplitDescriptor, ISplitRequest> selector = null) => Split(selector.InvokeOrDefault(new SplitDescriptor(index, target)));
		public Task<SplitResponse> SplitAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<SplitDescriptor, ISplitRequest> selector = null, CancellationToken cancellationToken = default) => SplitAsync(selector.InvokeOrDefault(new SplitDescriptor(index, target)), cancellationToken);
		public StatsResponse Stats(IStatsRequest request) => DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null) => Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default) => StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
		public UpdateAliasesResponse UpdateAliases(IUpdateAliasesRequest request) => DoRequest<IUpdateAliasesRequest, UpdateAliasesResponse>(request, request.RequestParameters);
		public Task<UpdateAliasesResponse> UpdateAliasesAsync(IUpdateAliasesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateAliasesRequest, UpdateAliasesResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateAliasesResponse UpdateAliases(Func<UpdateAliasesDescriptor, IUpdateAliasesRequest> selector = null) => UpdateAliases(selector.InvokeOrDefault(new UpdateAliasesDescriptor()));
		public Task<UpdateAliasesResponse> UpdateAliasesAsync(Func<UpdateAliasesDescriptor, IUpdateAliasesRequest> selector = null, CancellationToken cancellationToken = default) => UpdateAliasesAsync(selector.InvokeOrDefault(new UpdateAliasesDescriptor()), cancellationToken);
		public ValidateQueryResponse ValidateQuery(IValidateQueryRequest request) => DoRequest<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters);
		public Task<ValidateQueryResponse> ValidateQueryAsync(IValidateQueryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IValidateQueryRequest, ValidateQueryResponse>(request, request.RequestParameters, cancellationToken);
		public ValidateQueryResponse ValidateQuery(Func<ValidateQueryDescriptor, IValidateQueryRequest> selector = null) => ValidateQuery(selector.InvokeOrDefault(new ValidateQueryDescriptor()));
		public Task<ValidateQueryResponse> ValidateQueryAsync(Func<ValidateQueryDescriptor, IValidateQueryRequest> selector = null, CancellationToken cancellationToken = default) => ValidateQueryAsync(selector.InvokeOrDefault(new ValidateQueryDescriptor()), cancellationToken);
	}
}