// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Watcher
{
	public class WatcherNamespace : NamespacedClientProxy
	{
		internal WatcherNamespace(ElasticClient client) : base(client)
		{
		}

		public AckWatchResponse AckWatch(IAckWatchRequest request) => DoRequest<IAckWatchRequest, AckWatchResponse>(request, request.RequestParameters);
		public Task<AckWatchResponse> AckWatchAsync(IAckWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IAckWatchRequest, AckWatchResponse>(request, request.RequestParameters, cancellationToken);
		public AckWatchResponse AckWatch(Elastic.Clients.Elasticsearch.Name watch_id, Func<AckWatchDescriptor, IAckWatchRequest> selector = null) => AckWatch(selector.InvokeOrDefault(new AckWatchDescriptor(watch_id)));
		public Task<AckWatchResponse> AckWatchAsync(Elastic.Clients.Elasticsearch.Name watch_id, Func<AckWatchDescriptor, IAckWatchRequest> selector = null, CancellationToken cancellationToken = default) => AckWatchAsync(selector.InvokeOrDefault(new AckWatchDescriptor(watch_id)), cancellationToken);
		public ActivateWatchResponse ActivateWatch(IActivateWatchRequest request) => DoRequest<IActivateWatchRequest, ActivateWatchResponse>(request, request.RequestParameters);
		public Task<ActivateWatchResponse> ActivateWatchAsync(IActivateWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IActivateWatchRequest, ActivateWatchResponse>(request, request.RequestParameters, cancellationToken);
		public ActivateWatchResponse ActivateWatch(Elastic.Clients.Elasticsearch.Name watch_id, Func<ActivateWatchDescriptor, IActivateWatchRequest> selector = null) => ActivateWatch(selector.InvokeOrDefault(new ActivateWatchDescriptor(watch_id)));
		public Task<ActivateWatchResponse> ActivateWatchAsync(Elastic.Clients.Elasticsearch.Name watch_id, Func<ActivateWatchDescriptor, IActivateWatchRequest> selector = null, CancellationToken cancellationToken = default) => ActivateWatchAsync(selector.InvokeOrDefault(new ActivateWatchDescriptor(watch_id)), cancellationToken);
		public DeactivateWatchResponse DeactivateWatch(IDeactivateWatchRequest request) => DoRequest<IDeactivateWatchRequest, DeactivateWatchResponse>(request, request.RequestParameters);
		public Task<DeactivateWatchResponse> DeactivateWatchAsync(IDeactivateWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeactivateWatchRequest, DeactivateWatchResponse>(request, request.RequestParameters, cancellationToken);
		public DeactivateWatchResponse DeactivateWatch(Elastic.Clients.Elasticsearch.Name watch_id, Func<DeactivateWatchDescriptor, IDeactivateWatchRequest> selector = null) => DeactivateWatch(selector.InvokeOrDefault(new DeactivateWatchDescriptor(watch_id)));
		public Task<DeactivateWatchResponse> DeactivateWatchAsync(Elastic.Clients.Elasticsearch.Name watch_id, Func<DeactivateWatchDescriptor, IDeactivateWatchRequest> selector = null, CancellationToken cancellationToken = default) => DeactivateWatchAsync(selector.InvokeOrDefault(new DeactivateWatchDescriptor(watch_id)), cancellationToken);
		public DeleteWatchResponse DeleteWatch(IDeleteWatchRequest request) => DoRequest<IDeleteWatchRequest, DeleteWatchResponse>(request, request.RequestParameters);
		public Task<DeleteWatchResponse> DeleteWatchAsync(IDeleteWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteWatchRequest, DeleteWatchResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteWatchResponse DeleteWatch(Elastic.Clients.Elasticsearch.Name id, Func<DeleteWatchDescriptor, IDeleteWatchRequest> selector = null) => DeleteWatch(selector.InvokeOrDefault(new DeleteWatchDescriptor(id)));
		public Task<DeleteWatchResponse> DeleteWatchAsync(Elastic.Clients.Elasticsearch.Name id, Func<DeleteWatchDescriptor, IDeleteWatchRequest> selector = null, CancellationToken cancellationToken = default) => DeleteWatchAsync(selector.InvokeOrDefault(new DeleteWatchDescriptor(id)), cancellationToken);
		public ExecuteWatchResponse ExecuteWatch(IExecuteWatchRequest request) => DoRequest<IExecuteWatchRequest, ExecuteWatchResponse>(request, request.RequestParameters);
		public Task<ExecuteWatchResponse> ExecuteWatchAsync(IExecuteWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExecuteWatchRequest, ExecuteWatchResponse>(request, request.RequestParameters, cancellationToken);
		public ExecuteWatchResponse ExecuteWatch(Func<ExecuteWatchDescriptor, IExecuteWatchRequest> selector = null) => ExecuteWatch(selector.InvokeOrDefault(new ExecuteWatchDescriptor()));
		public Task<ExecuteWatchResponse> ExecuteWatchAsync(Func<ExecuteWatchDescriptor, IExecuteWatchRequest> selector = null, CancellationToken cancellationToken = default) => ExecuteWatchAsync(selector.InvokeOrDefault(new ExecuteWatchDescriptor()), cancellationToken);
		public GetWatchResponse GetWatch(IGetWatchRequest request) => DoRequest<IGetWatchRequest, GetWatchResponse>(request, request.RequestParameters);
		public Task<GetWatchResponse> GetWatchAsync(IGetWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetWatchRequest, GetWatchResponse>(request, request.RequestParameters, cancellationToken);
		public GetWatchResponse GetWatch(Elastic.Clients.Elasticsearch.Name id, Func<GetWatchDescriptor, IGetWatchRequest> selector = null) => GetWatch(selector.InvokeOrDefault(new GetWatchDescriptor(id)));
		public Task<GetWatchResponse> GetWatchAsync(Elastic.Clients.Elasticsearch.Name id, Func<GetWatchDescriptor, IGetWatchRequest> selector = null, CancellationToken cancellationToken = default) => GetWatchAsync(selector.InvokeOrDefault(new GetWatchDescriptor(id)), cancellationToken);
		public PutWatchResponse PutWatch(IPutWatchRequest request) => DoRequest<IPutWatchRequest, PutWatchResponse>(request, request.RequestParameters);
		public Task<PutWatchResponse> PutWatchAsync(IPutWatchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutWatchRequest, PutWatchResponse>(request, request.RequestParameters, cancellationToken);
		public PutWatchResponse PutWatch(Elastic.Clients.Elasticsearch.Id id, Func<PutWatchDescriptor, IPutWatchRequest> selector = null) => PutWatch(selector.InvokeOrDefault(new PutWatchDescriptor(id)));
		public Task<PutWatchResponse> PutWatchAsync(Elastic.Clients.Elasticsearch.Id id, Func<PutWatchDescriptor, IPutWatchRequest> selector = null, CancellationToken cancellationToken = default) => PutWatchAsync(selector.InvokeOrDefault(new PutWatchDescriptor(id)), cancellationToken);
		public QueryWatchesResponse QueryWatches(IQueryWatchesRequest request) => DoRequest<IQueryWatchesRequest, QueryWatchesResponse>(request, request.RequestParameters);
		public Task<QueryWatchesResponse> QueryWatchesAsync(IQueryWatchesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IQueryWatchesRequest, QueryWatchesResponse>(request, request.RequestParameters, cancellationToken);
		public QueryWatchesResponse QueryWatches(Func<QueryWatchesDescriptor, IQueryWatchesRequest> selector = null) => QueryWatches(selector.InvokeOrDefault(new QueryWatchesDescriptor()));
		public Task<QueryWatchesResponse> QueryWatchesAsync(Func<QueryWatchesDescriptor, IQueryWatchesRequest> selector = null, CancellationToken cancellationToken = default) => QueryWatchesAsync(selector.InvokeOrDefault(new QueryWatchesDescriptor()), cancellationToken);
		public StartResponse Start(IStartRequest request) => DoRequest<IStartRequest, StartResponse>(request, request.RequestParameters);
		public Task<StartResponse> StartAsync(IStartRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStartRequest, StartResponse>(request, request.RequestParameters, cancellationToken);
		public StartResponse Start(Func<StartDescriptor, IStartRequest> selector = null) => Start(selector.InvokeOrDefault(new StartDescriptor()));
		public Task<StartResponse> StartAsync(Func<StartDescriptor, IStartRequest> selector = null, CancellationToken cancellationToken = default) => StartAsync(selector.InvokeOrDefault(new StartDescriptor()), cancellationToken);
		public StatsResponse Stats(IStatsRequest request) => DoRequest<IStatsRequest, StatsResponse>(request, request.RequestParameters);
		public Task<StatsResponse> StatsAsync(IStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStatsRequest, StatsResponse>(request, request.RequestParameters, cancellationToken);
		public StatsResponse Stats(Func<StatsDescriptor, IStatsRequest> selector = null) => Stats(selector.InvokeOrDefault(new StatsDescriptor()));
		public Task<StatsResponse> StatsAsync(Func<StatsDescriptor, IStatsRequest> selector = null, CancellationToken cancellationToken = default) => StatsAsync(selector.InvokeOrDefault(new StatsDescriptor()), cancellationToken);
		public StopResponse Stop(IStopRequest request) => DoRequest<IStopRequest, StopResponse>(request, request.RequestParameters);
		public Task<StopResponse> StopAsync(IStopRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStopRequest, StopResponse>(request, request.RequestParameters, cancellationToken);
		public StopResponse Stop(Func<StopDescriptor, IStopRequest> selector = null) => Stop(selector.InvokeOrDefault(new StopDescriptor()));
		public Task<StopResponse> StopAsync(Func<StopDescriptor, IStopRequest> selector = null, CancellationToken cancellationToken = default) => StopAsync(selector.InvokeOrDefault(new StopDescriptor()), cancellationToken);
	}
}