// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.Inference;

public partial class InferenceNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>Initializes a new instance of the <see cref="InferenceNamespacedClient"/> class for mocking.</para>
	/// </summary>
	protected InferenceNamespacedClient() : base()
	{
	}

	internal InferenceNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual DeleteModelResponse DeleteModel(DeleteModelRequest request)
	{
		request.BeforeRequest();
		return DoRequest<DeleteModelRequest, DeleteModelResponse, DeleteModelRequestParameters>(request);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(DeleteModelRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteModelRequest, DeleteModelResponse, DeleteModelRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteModelResponse DeleteModel(DeleteModelRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteModelResponse DeleteModel(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new DeleteModelRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteModelResponse DeleteModel(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<DeleteModelRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteModelRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteModelResponse DeleteModel(Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new DeleteModelRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteModelResponse DeleteModel(Elastic.Clients.Elasticsearch.Id inferenceId, Action<DeleteModelRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteModelRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(DeleteModelRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteModelRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<DeleteModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteModelRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteModelRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Delete model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteModelResponse> DeleteModelAsync(Elastic.Clients.Elasticsearch.Id inferenceId, Action<DeleteModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteModelRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteModelRequestDescriptor, DeleteModelResponse, DeleteModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual GetModelResponse GetModel(GetModelRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetModelRequest, GetModelResponse, GetModelRequestParameters>(request);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(GetModelRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetModelRequest, GetModelResponse, GetModelRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetModelResponse GetModel(GetModelRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetModelResponse GetModel(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new GetModelRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetModelResponse GetModel(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<GetModelRequestDescriptor> configureRequest)
	{
		var descriptor = new GetModelRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetModelResponse GetModel(Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new GetModelRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetModelResponse GetModel(Elastic.Clients.Elasticsearch.Id inferenceId, Action<GetModelRequestDescriptor> configureRequest)
	{
		var descriptor = new GetModelRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(GetModelRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetModelRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<GetModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetModelRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetModelRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Get a model in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/get-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetModelResponse> GetModelAsync(Elastic.Clients.Elasticsearch.Id inferenceId, Action<GetModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetModelRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetModelRequestDescriptor, GetModelResponse, GetModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual InferenceResponse Inference(InferenceRequest request)
	{
		request.BeforeRequest();
		return DoRequest<InferenceRequest, InferenceResponse, InferenceRequestParameters>(request);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(InferenceRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<InferenceRequest, InferenceResponse, InferenceRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual InferenceResponse Inference(InferenceRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual InferenceResponse Inference(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new InferenceRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual InferenceResponse Inference(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<InferenceRequestDescriptor> configureRequest)
	{
		var descriptor = new InferenceRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual InferenceResponse Inference(Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new InferenceRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual InferenceResponse Inference(Elastic.Clients.Elasticsearch.Id inferenceId, Action<InferenceRequestDescriptor> configureRequest)
	{
		var descriptor = new InferenceRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(InferenceRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new InferenceRequestDescriptor(taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<InferenceRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new InferenceRequestDescriptor(taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new InferenceRequestDescriptor(inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Perform inference on a model</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/post-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<InferenceResponse> InferenceAsync(Elastic.Clients.Elasticsearch.Id inferenceId, Action<InferenceRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new InferenceRequestDescriptor(inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<InferenceRequestDescriptor, InferenceResponse, InferenceRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual PutModelResponse PutModel(PutModelRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PutModelRequest, PutModelResponse, PutModelRequestParameters>(request);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(PutModelRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutModelRequest, PutModelResponse, PutModelRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutModelResponse PutModel(PutModelRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutModelResponse PutModel(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutModelResponse PutModel(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<PutModelRequestDescriptor> configureRequest)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutModelResponse PutModel(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Id inferenceId)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, inferenceId);
		descriptor.BeforeRequest();
		return DoRequest<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutModelResponse PutModel(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Id inferenceId, Action<PutModelRequestDescriptor> configureRequest)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(PutModelRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, taskType, inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Inference.TaskType? taskType, Elastic.Clients.Elasticsearch.Id inferenceId, Action<PutModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, taskType, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Id inferenceId, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, inferenceId);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Configure a model for use in the Inference API</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-inference-api.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutModelResponse> PutModelAsync(Elastic.Clients.Elasticsearch.Inference.ModelConfig modelConfig, Elastic.Clients.Elasticsearch.Id inferenceId, Action<PutModelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutModelRequestDescriptor(modelConfig, inferenceId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutModelRequestDescriptor, PutModelResponse, PutModelRequestParameters>(descriptor, cancellationToken);
	}
}