// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.IndexLifecycleManagement;

public partial class IndexLifecycleManagementNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="IndexLifecycleManagementNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected IndexLifecycleManagementNamespacedClient() : base()
	{
	}

	internal IndexLifecycleManagementNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteLifecycleResponse DeleteLifecycle(DeleteLifecycleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<DeleteLifecycleRequest, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(DeleteLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequest, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteLifecycleResponse DeleteLifecycle(DeleteLifecycleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteLifecycleResponse DeleteLifecycle(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteLifecycleResponse DeleteLifecycle(Elastic.Clients.Elasticsearch.Name name, Action<DeleteLifecycleRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(DeleteLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a lifecycle policy.
	/// You cannot delete policies that are currently in use. If the policy is being used to manage any indices, the request fails and returns an error.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-delete-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(Elastic.Clients.Elasticsearch.Name name, Action<DeleteLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle(GetLifecycleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetLifecycleRequest, GetLifecycleResponse, GetLifecycleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(GetLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequest, GetLifecycleResponse, GetLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle(GetLifecycleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle(Elastic.Clients.Elasticsearch.Name? name)
	{
		var descriptor = new GetLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle(Elastic.Clients.Elasticsearch.Name? name, Action<GetLifecycleRequestDescriptor> configureRequest)
	{
		var descriptor = new GetLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle()
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetLifecycleResponse GetLifecycle(Action<GetLifecycleRequestDescriptor> configureRequest)
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(GetLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Elastic.Clients.Elasticsearch.Name? name, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Elastic.Clients.Elasticsearch.Name? name, Action<GetLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get lifecycle policies.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Action<GetLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetIlmStatusResponse GetStatus(GetIlmStatusRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetIlmStatusRequest, GetIlmStatusResponse, GetIlmStatusRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetIlmStatusResponse> GetStatusAsync(GetIlmStatusRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetIlmStatusRequest, GetIlmStatusResponse, GetIlmStatusRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetIlmStatusResponse GetStatus(GetIlmStatusRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetIlmStatusResponse GetStatus()
	{
		var descriptor = new GetIlmStatusRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetIlmStatusResponse GetStatus(Action<GetIlmStatusRequestDescriptor> configureRequest)
	{
		var descriptor = new GetIlmStatusRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetIlmStatusResponse> GetStatusAsync(GetIlmStatusRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetIlmStatusResponse> GetStatusAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetIlmStatusRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the ILM status.
	/// </para>
	/// <para>
	/// Get the current index lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetIlmStatusResponse> GetStatusAsync(Action<GetIlmStatusRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetIlmStatusRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetIlmStatusRequestDescriptor, GetIlmStatusResponse, GetIlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MigrateToDataTiersResponse MigrateToDataTiers(MigrateToDataTiersRequest request)
	{
		request.BeforeRequest();
		return DoRequest<MigrateToDataTiersRequest, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MigrateToDataTiersResponse> MigrateToDataTiersAsync(MigrateToDataTiersRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<MigrateToDataTiersRequest, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MigrateToDataTiersResponse MigrateToDataTiers(MigrateToDataTiersRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MigrateToDataTiersResponse MigrateToDataTiers()
	{
		var descriptor = new MigrateToDataTiersRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MigrateToDataTiersResponse MigrateToDataTiers(Action<MigrateToDataTiersRequestDescriptor> configureRequest)
	{
		var descriptor = new MigrateToDataTiersRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MigrateToDataTiersResponse> MigrateToDataTiersAsync(MigrateToDataTiersRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MigrateToDataTiersResponse> MigrateToDataTiersAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new MigrateToDataTiersRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Migrate to data tiers routing.
	/// Switch the indices, ILM policies, and legacy, composable, and component templates from using custom node attributes and attribute-based allocation filters to using data tiers.
	/// Optionally, delete one legacy index template.
	/// Using node roles enables ILM to automatically move the indices between data tiers.
	/// </para>
	/// <para>
	/// Migrating away from custom node attributes routing can be manually performed.
	/// This API provides an automated way of performing three out of the four manual steps listed in the migration guide:
	/// </para>
	/// <list type="number">
	/// <item>
	/// <para>
	/// Stop setting the custom hot attribute on new indices.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Remove custom allocation settings from existing ILM policies.
	/// </para>
	/// </item>
	/// <item>
	/// <para>
	/// Replace custom allocation settings from existing indices with the corresponding tier preference.
	/// </para>
	/// </item>
	/// </list>
	/// <para>
	/// ILM must be stopped before performing the migration.
	/// Use the stop ILM and get ILM status APIs to wait until the reported operation mode is <c>STOPPED</c>.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-migrate-to-data-tiers.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MigrateToDataTiersResponse> MigrateToDataTiersAsync(Action<MigrateToDataTiersRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new MigrateToDataTiersRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<MigrateToDataTiersRequestDescriptor, MigrateToDataTiersResponse, MigrateToDataTiersRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep(MoveToStepRequest request)
	{
		request.BeforeRequest();
		return DoRequest<MoveToStepRequest, MoveToStepResponse, MoveToStepRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync(MoveToStepRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<MoveToStepRequest, MoveToStepResponse, MoveToStepRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep<TDocument>(MoveToStepRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<MoveToStepRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep<TDocument>()
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep<TDocument>(Action<MoveToStepRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep(MoveToStepRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new MoveToStepRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual MoveToStepResponse MoveToStep(Elastic.Clients.Elasticsearch.IndexName index, Action<MoveToStepRequestDescriptor> configureRequest)
	{
		var descriptor = new MoveToStepRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync<TDocument>(MoveToStepRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<MoveToStepRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync<TDocument>(Action<MoveToStepRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor<TDocument>, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync(MoveToStepRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Move to a lifecycle step.
	/// Manually move an index into a specific step in the lifecycle policy and run that step.
	/// </para>
	/// <para>
	/// WARNING: This operation can result in the loss of data. Manually moving an index into a specific step runs that step even if it has already been performed. This is a potentially destructive action and this should be considered an expert level API.
	/// </para>
	/// <para>
	/// You must specify both the current step and the step to be executed in the body of the request.
	/// The request will fail if the current step does not match the step currently running for the index
	/// This is to prevent the index from being moved from an unexpected step into the next step.
	/// </para>
	/// <para>
	/// When specifying the target (<c>next_step</c>) to which the index will be moved, either the name or both the action and name fields are optional.
	/// If only the phase is specified, the index will move to the first step of the first action in the target phase.
	/// If the phase and action are specified, the index will move to the first step of the specified action in the specified phase.
	/// Only actions specified in the ILM policy are considered valid.
	/// An index cannot move to a step that is not part of its policy.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-move-to-step.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<MoveToStepResponse> MoveToStepAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<MoveToStepRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new MoveToStepRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<MoveToStepRequestDescriptor, MoveToStepResponse, MoveToStepRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutLifecycleResponse PutLifecycle(PutLifecycleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PutLifecycleRequest, PutLifecycleResponse, PutLifecycleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(PutLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequest, PutLifecycleResponse, PutLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutLifecycleResponse PutLifecycle(PutLifecycleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutLifecycleResponse PutLifecycle(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new PutLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutLifecycleResponse PutLifecycle(Elastic.Clients.Elasticsearch.Name name, Action<PutLifecycleRequestDescriptor> configureRequest)
	{
		var descriptor = new PutLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(PutLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutLifecycleRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a lifecycle policy.
	/// If the specified policy exists, it is replaced and the policy version is incremented.
	/// </para>
	/// <para>
	/// NOTE: Only the latest version of the policy is stored, you cannot revert to previous versions.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-put-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(Elastic.Clients.Elasticsearch.Name name, Action<PutLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutLifecycleRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy(RemovePolicyRequest request)
	{
		request.BeforeRequest();
		return DoRequest<RemovePolicyRequest, RemovePolicyResponse, RemovePolicyRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync(RemovePolicyRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequest, RemovePolicyResponse, RemovePolicyRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy<TDocument>(RemovePolicyRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<RemovePolicyRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy<TDocument>()
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy<TDocument>(Action<RemovePolicyRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy(RemovePolicyRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new RemovePolicyRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RemovePolicyResponse RemovePolicy(Elastic.Clients.Elasticsearch.IndexName index, Action<RemovePolicyRequestDescriptor> configureRequest)
	{
		var descriptor = new RemovePolicyRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync<TDocument>(RemovePolicyRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<RemovePolicyRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync<TDocument>(Action<RemovePolicyRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor<TDocument>, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync(RemovePolicyRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Remove policies from an index.
	/// Remove the assigned lifecycle policies from an index or a data stream's backing indices.
	/// It also stops managing the indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-remove-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RemovePolicyResponse> RemovePolicyAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<RemovePolicyRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RemovePolicyRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RemovePolicyRequestDescriptor, RemovePolicyResponse, RemovePolicyRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry(RetryRequest request)
	{
		request.BeforeRequest();
		return DoRequest<RetryRequest, RetryResponse, RetryRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync(RetryRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<RetryRequest, RetryResponse, RetryRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry<TDocument>(RetryRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<RetryRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry<TDocument>()
	{
		var descriptor = new RetryRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry<TDocument>(Action<RetryRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry(RetryRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new RetryRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual RetryResponse Retry(Elastic.Clients.Elasticsearch.IndexName index, Action<RetryRequestDescriptor> configureRequest)
	{
		var descriptor = new RetryRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync<TDocument>(RetryRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<RetryRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync<TDocument>(Action<RetryRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor<TDocument>, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync(RetryRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Retry a policy.
	/// Retry running the lifecycle policy for an index that is in the ERROR step.
	/// The API sets the policy back to the step where the error occurred and runs the step.
	/// Use the explain lifecycle state API to determine whether an index is in the ERROR step.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-retry-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<RetryResponse> RetryAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<RetryRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new RetryRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<RetryRequestDescriptor, RetryResponse, RetryRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StartIlmResponse Start(StartIlmRequest request)
	{
		request.BeforeRequest();
		return DoRequest<StartIlmRequest, StartIlmResponse, StartIlmRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartIlmResponse> StartAsync(StartIlmRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<StartIlmRequest, StartIlmResponse, StartIlmRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StartIlmResponse Start(StartIlmRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StartIlmResponse Start()
	{
		var descriptor = new StartIlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StartIlmResponse Start(Action<StartIlmRequestDescriptor> configureRequest)
	{
		var descriptor = new StartIlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartIlmResponse> StartAsync(StartIlmRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartIlmResponse> StartAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new StartIlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start the ILM plugin.
	/// Start the index lifecycle management plugin if it is currently stopped.
	/// ILM is started automatically when the cluster is formed.
	/// Restarting ILM is necessary only when it has been stopped using the stop ILM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartIlmResponse> StartAsync(Action<StartIlmRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new StartIlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<StartIlmRequestDescriptor, StartIlmResponse, StartIlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StopIlmResponse Stop(StopIlmRequest request)
	{
		request.BeforeRequest();
		return DoRequest<StopIlmRequest, StopIlmResponse, StopIlmRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopIlmResponse> StopAsync(StopIlmRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<StopIlmRequest, StopIlmResponse, StopIlmRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StopIlmResponse Stop(StopIlmRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StopIlmResponse Stop()
	{
		var descriptor = new StopIlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual StopIlmResponse Stop(Action<StopIlmRequestDescriptor> configureRequest)
	{
		var descriptor = new StopIlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopIlmResponse> StopAsync(StopIlmRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopIlmResponse> StopAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new StopIlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop the ILM plugin.
	/// Halt all lifecycle management operations and stop the index lifecycle management plugin.
	/// This is useful when you are performing maintenance on the cluster and need to prevent ILM from performing any actions on your indices.
	/// </para>
	/// <para>
	/// The API returns as soon as the stop request has been acknowledged, but the plugin might continue to run until in-progress operations complete and the plugin can be safely stopped.
	/// Use the get ILM status API to check whether ILM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ilm-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopIlmResponse> StopAsync(Action<StopIlmRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new StopIlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<StopIlmRequestDescriptor, StopIlmResponse, StopIlmRequestParameters>(descriptor, cancellationToken);
	}
}