// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ingest
{
	public class IngestNamespace : NamespacedClientProxy
	{
		internal IngestNamespace(ElasticClient client) : base(client)
		{
		}

		public IngestDeletePipelineResponse DeletePipeline(IngestDeletePipelineRequest request) => DoRequest<IngestDeletePipelineRequest, IngestDeletePipelineResponse>(request);
		public Task<IngestDeletePipelineResponse> DeletePipelineAsync(IngestDeletePipelineRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestDeletePipelineRequest, IngestDeletePipelineResponse>(request, cancellationToken);
		public IngestDeletePipelineResponse DeletePipeline(Elastic.Clients.Elasticsearch.Id id, Action<IngestDeletePipelineRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestDeletePipelineRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestDeletePipelineRequestDescriptor, IngestDeletePipelineResponse>(descriptor);
		}

		public Task<IngestDeletePipelineResponse> DeletePipelineAsync(Elastic.Clients.Elasticsearch.Id id, Action<IngestDeletePipelineRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestDeletePipelineRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestDeletePipelineRequestDescriptor, IngestDeletePipelineResponse>(descriptor);
		}

		public IngestGeoIpStatsResponse GeoIpStats(IngestGeoIpStatsRequest request) => DoRequest<IngestGeoIpStatsRequest, IngestGeoIpStatsResponse>(request);
		public Task<IngestGeoIpStatsResponse> GeoIpStatsAsync(IngestGeoIpStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestGeoIpStatsRequest, IngestGeoIpStatsResponse>(request, cancellationToken);
		public IngestGeoIpStatsResponse GeoIpStats(Action<IngestGeoIpStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestGeoIpStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestGeoIpStatsRequestDescriptor, IngestGeoIpStatsResponse>(descriptor);
		}

		public Task<IngestGeoIpStatsResponse> GeoIpStatsAsync(Action<IngestGeoIpStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestGeoIpStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestGeoIpStatsRequestDescriptor, IngestGeoIpStatsResponse>(descriptor);
		}

		public IngestGetPipelineResponse GetPipeline(IngestGetPipelineRequest request) => DoRequest<IngestGetPipelineRequest, IngestGetPipelineResponse>(request);
		public Task<IngestGetPipelineResponse> GetPipelineAsync(IngestGetPipelineRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestGetPipelineRequest, IngestGetPipelineResponse>(request, cancellationToken);
		public IngestGetPipelineResponse GetPipeline(Action<IngestGetPipelineRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestGetPipelineRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestGetPipelineRequestDescriptor, IngestGetPipelineResponse>(descriptor);
		}

		public Task<IngestGetPipelineResponse> GetPipelineAsync(Action<IngestGetPipelineRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestGetPipelineRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestGetPipelineRequestDescriptor, IngestGetPipelineResponse>(descriptor);
		}

		public IngestProcessorGrokResponse ProcessorGrok(IngestProcessorGrokRequest request) => DoRequest<IngestProcessorGrokRequest, IngestProcessorGrokResponse>(request);
		public Task<IngestProcessorGrokResponse> ProcessorGrokAsync(IngestProcessorGrokRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestProcessorGrokRequest, IngestProcessorGrokResponse>(request, cancellationToken);
		public IngestProcessorGrokResponse ProcessorGrok(Action<IngestProcessorGrokRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestProcessorGrokRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestProcessorGrokRequestDescriptor, IngestProcessorGrokResponse>(descriptor);
		}

		public Task<IngestProcessorGrokResponse> ProcessorGrokAsync(Action<IngestProcessorGrokRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestProcessorGrokRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestProcessorGrokRequestDescriptor, IngestProcessorGrokResponse>(descriptor);
		}

		public IngestPutPipelineResponse PutPipeline(IngestPutPipelineRequest request) => DoRequest<IngestPutPipelineRequest, IngestPutPipelineResponse>(request);
		public Task<IngestPutPipelineResponse> PutPipelineAsync(IngestPutPipelineRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestPutPipelineRequest, IngestPutPipelineResponse>(request, cancellationToken);
		public IngestPutPipelineResponse PutPipeline(Elastic.Clients.Elasticsearch.Id id, Action<IngestPutPipelineRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestPutPipelineRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestPutPipelineRequestDescriptor, IngestPutPipelineResponse>(descriptor);
		}

		public Task<IngestPutPipelineResponse> PutPipelineAsync(Elastic.Clients.Elasticsearch.Id id, Action<IngestPutPipelineRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestPutPipelineRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestPutPipelineRequestDescriptor, IngestPutPipelineResponse>(descriptor);
		}

		public IngestSimulateResponse Simulate(IngestSimulateRequest request) => DoRequest<IngestSimulateRequest, IngestSimulateResponse>(request);
		public Task<IngestSimulateResponse> SimulateAsync(IngestSimulateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IngestSimulateRequest, IngestSimulateResponse>(request, cancellationToken);
		public IngestSimulateResponse Simulate(Action<IngestSimulateRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IngestSimulateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IngestSimulateRequestDescriptor, IngestSimulateResponse>(descriptor);
		}

		public Task<IngestSimulateResponse> SimulateAsync(Action<IngestSimulateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IngestSimulateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IngestSimulateRequestDescriptor, IngestSimulateResponse>(descriptor);
		}
	}
}