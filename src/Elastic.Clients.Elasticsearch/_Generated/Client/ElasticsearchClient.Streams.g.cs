// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Streams;

public partial class StreamsNamespacedClient : Elastic.Clients.Elasticsearch.NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="Elastic.Clients.Elasticsearch.Streams.StreamsNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected StreamsNamespacedClient() : base()
	{
	}

	internal StreamsNamespacedClient(Elastic.Clients.Elasticsearch.ElasticsearchClient client) : base(client)
	{
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse LogsDisable(Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse LogsDisable()
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse LogsDisable(System.Action<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse> LogsDisableAsync(Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse> LogsDisableAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse> LogsDisableAsync(System.Action<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsDisableRequest, Elastic.Clients.Elasticsearch.Streams.LogsDisableResponse, Elastic.Clients.Elasticsearch.Streams.LogsDisableRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse LogsEnable(Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse LogsEnable()
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse LogsEnable(System.Action<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse> LogsEnableAsync(Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse> LogsEnableAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse> LogsEnableAsync(System.Action<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.LogsEnableRequest, Elastic.Clients.Elasticsearch.Streams.LogsEnableResponse, Elastic.Clients.Elasticsearch.Streams.LogsEnableRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse Status(Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse Status()
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse Status(System.Action<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse> StatusAsync(Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse> StatusAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse> StatusAsync(System.Action<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequest, Elastic.Clients.Elasticsearch.Streams.StreamsStatusResponse, Elastic.Clients.Elasticsearch.Streams.StreamsStatusRequestParameters>(request, cancellationToken);
	}
}