// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Tasks
{
	public class TasksNamespace : NamespacedClientProxy
	{
		internal TasksNamespace(ElasticsearchClient client) : base(client)
		{
		}

		public GetTasksResponse Get(GetTasksRequest request)
		{
			request.BeforeRequest();
			return DoRequest<GetTasksRequest, GetTasksResponse>(request);
		}

		public Task<GetTasksResponse> GetAsync(GetTasksRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<GetTasksRequest, GetTasksResponse>(request, cancellationToken);
		}

		public GetTasksResponse Get(Elastic.Clients.Elasticsearch.Id task_id, Action<GetTasksRequestDescriptor> configureRequest = null)
		{
			var descriptor = new GetTasksRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<GetTasksRequestDescriptor, GetTasksResponse>(descriptor);
		}

		public Task<GetTasksResponse> GetAsync(Elastic.Clients.Elasticsearch.Id task_id, Action<GetTasksRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new GetTasksRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<GetTasksRequestDescriptor, GetTasksResponse>(descriptor);
		}

		public TasksCancelResponse Cancel(TasksCancelRequest request)
		{
			request.BeforeRequest();
			return DoRequest<TasksCancelRequest, TasksCancelResponse>(request);
		}

		public Task<TasksCancelResponse> CancelAsync(TasksCancelRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<TasksCancelRequest, TasksCancelResponse>(request, cancellationToken);
		}

		public TasksCancelResponse Cancel(Action<TasksCancelRequestDescriptor> configureRequest = null)
		{
			var descriptor = new TasksCancelRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<TasksCancelRequestDescriptor, TasksCancelResponse>(descriptor);
		}

		public Task<TasksCancelResponse> CancelAsync(Action<TasksCancelRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new TasksCancelRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<TasksCancelRequestDescriptor, TasksCancelResponse>(descriptor);
		}

		public TasksListResponse List(TasksListRequest request)
		{
			request.BeforeRequest();
			return DoRequest<TasksListRequest, TasksListResponse>(request);
		}

		public Task<TasksListResponse> ListAsync(TasksListRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<TasksListRequest, TasksListResponse>(request, cancellationToken);
		}

		public TasksListResponse List(Action<TasksListRequestDescriptor> configureRequest = null)
		{
			var descriptor = new TasksListRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<TasksListRequestDescriptor, TasksListResponse>(descriptor);
		}

		public Task<TasksListResponse> ListAsync(Action<TasksListRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new TasksListRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<TasksListRequestDescriptor, TasksListResponse>(descriptor);
		}
	}
}