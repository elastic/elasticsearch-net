// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Cluster;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial interface IElasticClient
	{
		ClusterNamespace Cluster { get; }

		OpenPointInTimeResponse OpenPointInTime(IOpenPointInTimeRequest request);
		Task<OpenPointInTimeResponse> OpenPointInTimeAsync(IOpenPointInTimeRequest request, CancellationToken cancellationToken = default);
		OpenPointInTimeResponse OpenPointInTime(Elastic.Clients.Elasticsearch.Indices indices, Func<OpenPointInTimeRequestDescriptor, IOpenPointInTimeRequest> selector = null);
		Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<OpenPointInTimeRequestDescriptor, IOpenPointInTimeRequest> selector = null, CancellationToken cancellationToken = default);
		PingResponse Ping(IPingRequest request);
		Task<PingResponse> PingAsync(IPingRequest request, CancellationToken cancellationToken = default);
		PingResponse Ping(Func<PingRequestDescriptor, IPingRequest> selector = null);
		Task<PingResponse> PingAsync(Func<PingRequestDescriptor, IPingRequest> selector = null, CancellationToken cancellationToken = default);
		SearchResponse<TDocument> Search<TDocument>(ISearchRequest request);
		Task<SearchResponse<TDocument>> SearchAsync<TDocument>(ISearchRequest request, CancellationToken cancellationToken = default);
		SearchResponse<TDocument> Search<TDocument>(Func<SearchRequestDescriptor, ISearchRequest> selector = null);
		Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Func<SearchRequestDescriptor, ISearchRequest> selector = null, CancellationToken cancellationToken = default);
	}
}