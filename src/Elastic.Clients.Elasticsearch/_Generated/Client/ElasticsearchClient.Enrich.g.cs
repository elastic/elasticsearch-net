// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Enrich;

public partial class EnrichNamespacedClient : Elastic.Clients.Elasticsearch.NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="Elastic.Clients.Elasticsearch.Enrich.EnrichNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected EnrichNamespacedClient() : base()
	{
	}

	internal EnrichNamespacedClient(Elastic.Clients.Elasticsearch.ElasticsearchClient client) : base(client)
	{
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse DeletePolicy(Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse> DeletePolicyAsync(Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse DeletePolicy(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse> DeletePolicyAsync(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.DeletePolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse ExecutePolicy(Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse> ExecutePolicyAsync(Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse ExecutePolicy(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse> ExecutePolicyAsync(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequest, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyResponse, Elastic.Clients.Elasticsearch.Enrich.ExecutePolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse GetPolicy(Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse> GetPolicyAsync(Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse GetPolicy()
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse GetPolicy(System.Action<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse> GetPolicyAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse> GetPolicyAsync(System.Action<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse GetPolicy(Elastic.Clients.Elasticsearch.Names name)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor(name);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse GetPolicy(Elastic.Clients.Elasticsearch.Names name, System.Action<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse> GetPolicyAsync(Elastic.Clients.Elasticsearch.Names name, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor(name);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse> GetPolicyAsync(Elastic.Clients.Elasticsearch.Names name, System.Action<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.GetPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.GetPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse PutPolicy(Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse> PutPolicyAsync(Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse PutPolicy(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse PutPolicy<TDocument>(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor<TDocument>> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor<TDocument>(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse> PutPolicyAsync(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse> PutPolicyAsync<TDocument>(Elastic.Clients.Elasticsearch.Name name, System.Action<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor<TDocument>> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestDescriptor<TDocument>(name);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequest, Elastic.Clients.Elasticsearch.Enrich.PutPolicyResponse, Elastic.Clients.Elasticsearch.Enrich.PutPolicyRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse Stats(Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse> StatsAsync(Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse Stats()
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse Stats(System.Action<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse> StatsAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse> StatsAsync(System.Action<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequest, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsResponse, Elastic.Clients.Elasticsearch.Enrich.EnrichStatsRequestParameters>(request, cancellationToken);
	}
}