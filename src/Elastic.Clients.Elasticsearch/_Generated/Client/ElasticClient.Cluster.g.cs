// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Cluster
{
	public class ClusterNamespace : NamespacedClientProxy
	{
		internal ClusterNamespace(ElasticClient client) : base(client)
		{
		}

		public ClusterAllocationExplainResponse AllocationExplain(IClusterAllocationExplainRequest request) => DoRequest<IClusterAllocationExplainRequest, ClusterAllocationExplainResponse>(request, request.RequestParameters);
		public Task<ClusterAllocationExplainResponse> AllocationExplainAsync(IClusterAllocationExplainRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterAllocationExplainRequest, ClusterAllocationExplainResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterAllocationExplainResponse AllocationExplain(Func<ClusterAllocationExplainRequestDescriptor, IClusterAllocationExplainRequest> selector = null) => AllocationExplain(selector.InvokeOrDefault(new ClusterAllocationExplainRequestDescriptor()));
		public Task<ClusterAllocationExplainResponse> AllocationExplainAsync(Func<ClusterAllocationExplainRequestDescriptor, IClusterAllocationExplainRequest> selector = null, CancellationToken cancellationToken = default) => AllocationExplainAsync(selector.InvokeOrDefault(new ClusterAllocationExplainRequestDescriptor()), cancellationToken);
		public ClusterDeleteComponentTemplateResponse DeleteComponentTemplate(IClusterDeleteComponentTemplateRequest request) => DoRequest<IClusterDeleteComponentTemplateRequest, ClusterDeleteComponentTemplateResponse>(request, request.RequestParameters);
		public Task<ClusterDeleteComponentTemplateResponse> DeleteComponentTemplateAsync(IClusterDeleteComponentTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterDeleteComponentTemplateRequest, ClusterDeleteComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterDeleteComponentTemplateResponse DeleteComponentTemplate(Elastic.Clients.Elasticsearch.Name name, Func<ClusterDeleteComponentTemplateRequestDescriptor, IClusterDeleteComponentTemplateRequest> selector = null) => DeleteComponentTemplate(selector.InvokeOrDefault(new ClusterDeleteComponentTemplateRequestDescriptor(name)));
		public Task<ClusterDeleteComponentTemplateResponse> DeleteComponentTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<ClusterDeleteComponentTemplateRequestDescriptor, IClusterDeleteComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default) => DeleteComponentTemplateAsync(selector.InvokeOrDefault(new ClusterDeleteComponentTemplateRequestDescriptor(name)), cancellationToken);
		public ClusterDeleteVotingConfigExclusionsResponse DeleteVotingConfigExclusions(IClusterDeleteVotingConfigExclusionsRequest request) => DoRequest<IClusterDeleteVotingConfigExclusionsRequest, ClusterDeleteVotingConfigExclusionsResponse>(request, request.RequestParameters);
		public Task<ClusterDeleteVotingConfigExclusionsResponse> DeleteVotingConfigExclusionsAsync(IClusterDeleteVotingConfigExclusionsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterDeleteVotingConfigExclusionsRequest, ClusterDeleteVotingConfigExclusionsResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterDeleteVotingConfigExclusionsResponse DeleteVotingConfigExclusions(Func<ClusterDeleteVotingConfigExclusionsRequestDescriptor, IClusterDeleteVotingConfigExclusionsRequest> selector = null) => DeleteVotingConfigExclusions(selector.InvokeOrDefault(new ClusterDeleteVotingConfigExclusionsRequestDescriptor()));
		public Task<ClusterDeleteVotingConfigExclusionsResponse> DeleteVotingConfigExclusionsAsync(Func<ClusterDeleteVotingConfigExclusionsRequestDescriptor, IClusterDeleteVotingConfigExclusionsRequest> selector = null, CancellationToken cancellationToken = default) => DeleteVotingConfigExclusionsAsync(selector.InvokeOrDefault(new ClusterDeleteVotingConfigExclusionsRequestDescriptor()), cancellationToken);
		public ClusterExistsComponentTemplateResponse ExistsComponentTemplate(IClusterExistsComponentTemplateRequest request) => DoRequest<IClusterExistsComponentTemplateRequest, ClusterExistsComponentTemplateResponse>(request, request.RequestParameters);
		public Task<ClusterExistsComponentTemplateResponse> ExistsComponentTemplateAsync(IClusterExistsComponentTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterExistsComponentTemplateRequest, ClusterExistsComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterExistsComponentTemplateResponse ExistsComponentTemplate(Elastic.Clients.Elasticsearch.Names name, Func<ClusterExistsComponentTemplateRequestDescriptor, IClusterExistsComponentTemplateRequest> selector = null) => ExistsComponentTemplate(selector.InvokeOrDefault(new ClusterExistsComponentTemplateRequestDescriptor(name)));
		public Task<ClusterExistsComponentTemplateResponse> ExistsComponentTemplateAsync(Elastic.Clients.Elasticsearch.Names name, Func<ClusterExistsComponentTemplateRequestDescriptor, IClusterExistsComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default) => ExistsComponentTemplateAsync(selector.InvokeOrDefault(new ClusterExistsComponentTemplateRequestDescriptor(name)), cancellationToken);
		public ClusterGetComponentTemplateResponse GetComponentTemplate(IClusterGetComponentTemplateRequest request) => DoRequest<IClusterGetComponentTemplateRequest, ClusterGetComponentTemplateResponse>(request, request.RequestParameters);
		public Task<ClusterGetComponentTemplateResponse> GetComponentTemplateAsync(IClusterGetComponentTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterGetComponentTemplateRequest, ClusterGetComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterGetComponentTemplateResponse GetComponentTemplate(Func<ClusterGetComponentTemplateRequestDescriptor, IClusterGetComponentTemplateRequest> selector = null) => GetComponentTemplate(selector.InvokeOrDefault(new ClusterGetComponentTemplateRequestDescriptor()));
		public Task<ClusterGetComponentTemplateResponse> GetComponentTemplateAsync(Func<ClusterGetComponentTemplateRequestDescriptor, IClusterGetComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default) => GetComponentTemplateAsync(selector.InvokeOrDefault(new ClusterGetComponentTemplateRequestDescriptor()), cancellationToken);
		public ClusterGetSettingsResponse GetSettings(IClusterGetSettingsRequest request) => DoRequest<IClusterGetSettingsRequest, ClusterGetSettingsResponse>(request, request.RequestParameters);
		public Task<ClusterGetSettingsResponse> GetSettingsAsync(IClusterGetSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterGetSettingsRequest, ClusterGetSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterGetSettingsResponse GetSettings(Func<ClusterGetSettingsRequestDescriptor, IClusterGetSettingsRequest> selector = null) => GetSettings(selector.InvokeOrDefault(new ClusterGetSettingsRequestDescriptor()));
		public Task<ClusterGetSettingsResponse> GetSettingsAsync(Func<ClusterGetSettingsRequestDescriptor, IClusterGetSettingsRequest> selector = null, CancellationToken cancellationToken = default) => GetSettingsAsync(selector.InvokeOrDefault(new ClusterGetSettingsRequestDescriptor()), cancellationToken);
		public ClusterHealthResponse Health(IClusterHealthRequest request) => DoRequest<IClusterHealthRequest, ClusterHealthResponse>(request, request.RequestParameters);
		public Task<ClusterHealthResponse> HealthAsync(IClusterHealthRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterHealthRequest, ClusterHealthResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterHealthResponse Health(Func<ClusterHealthRequestDescriptor, IClusterHealthRequest> selector = null) => Health(selector.InvokeOrDefault(new ClusterHealthRequestDescriptor()));
		public Task<ClusterHealthResponse> HealthAsync(Func<ClusterHealthRequestDescriptor, IClusterHealthRequest> selector = null, CancellationToken cancellationToken = default) => HealthAsync(selector.InvokeOrDefault(new ClusterHealthRequestDescriptor()), cancellationToken);
		public ClusterPendingTasksResponse PendingTasks(IClusterPendingTasksRequest request) => DoRequest<IClusterPendingTasksRequest, ClusterPendingTasksResponse>(request, request.RequestParameters);
		public Task<ClusterPendingTasksResponse> PendingTasksAsync(IClusterPendingTasksRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterPendingTasksRequest, ClusterPendingTasksResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterPendingTasksResponse PendingTasks(Func<ClusterPendingTasksRequestDescriptor, IClusterPendingTasksRequest> selector = null) => PendingTasks(selector.InvokeOrDefault(new ClusterPendingTasksRequestDescriptor()));
		public Task<ClusterPendingTasksResponse> PendingTasksAsync(Func<ClusterPendingTasksRequestDescriptor, IClusterPendingTasksRequest> selector = null, CancellationToken cancellationToken = default) => PendingTasksAsync(selector.InvokeOrDefault(new ClusterPendingTasksRequestDescriptor()), cancellationToken);
		public ClusterPostVotingConfigExclusionsResponse PostVotingConfigExclusions(IClusterPostVotingConfigExclusionsRequest request) => DoRequest<IClusterPostVotingConfigExclusionsRequest, ClusterPostVotingConfigExclusionsResponse>(request, request.RequestParameters);
		public Task<ClusterPostVotingConfigExclusionsResponse> PostVotingConfigExclusionsAsync(IClusterPostVotingConfigExclusionsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterPostVotingConfigExclusionsRequest, ClusterPostVotingConfigExclusionsResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterPostVotingConfigExclusionsResponse PostVotingConfigExclusions(Func<ClusterPostVotingConfigExclusionsRequestDescriptor, IClusterPostVotingConfigExclusionsRequest> selector = null) => PostVotingConfigExclusions(selector.InvokeOrDefault(new ClusterPostVotingConfigExclusionsRequestDescriptor()));
		public Task<ClusterPostVotingConfigExclusionsResponse> PostVotingConfigExclusionsAsync(Func<ClusterPostVotingConfigExclusionsRequestDescriptor, IClusterPostVotingConfigExclusionsRequest> selector = null, CancellationToken cancellationToken = default) => PostVotingConfigExclusionsAsync(selector.InvokeOrDefault(new ClusterPostVotingConfigExclusionsRequestDescriptor()), cancellationToken);
		public ClusterPutComponentTemplateResponse PutComponentTemplate(IClusterPutComponentTemplateRequest request) => DoRequest<IClusterPutComponentTemplateRequest, ClusterPutComponentTemplateResponse>(request, request.RequestParameters);
		public Task<ClusterPutComponentTemplateResponse> PutComponentTemplateAsync(IClusterPutComponentTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterPutComponentTemplateRequest, ClusterPutComponentTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterPutComponentTemplateResponse PutComponentTemplate(Elastic.Clients.Elasticsearch.Name name, Func<ClusterPutComponentTemplateRequestDescriptor, IClusterPutComponentTemplateRequest> selector = null) => PutComponentTemplate(selector.InvokeOrDefault(new ClusterPutComponentTemplateRequestDescriptor(name)));
		public Task<ClusterPutComponentTemplateResponse> PutComponentTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<ClusterPutComponentTemplateRequestDescriptor, IClusterPutComponentTemplateRequest> selector = null, CancellationToken cancellationToken = default) => PutComponentTemplateAsync(selector.InvokeOrDefault(new ClusterPutComponentTemplateRequestDescriptor(name)), cancellationToken);
		public ClusterPutSettingsResponse PutSettings(IClusterPutSettingsRequest request) => DoRequest<IClusterPutSettingsRequest, ClusterPutSettingsResponse>(request, request.RequestParameters);
		public Task<ClusterPutSettingsResponse> PutSettingsAsync(IClusterPutSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterPutSettingsRequest, ClusterPutSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterPutSettingsResponse PutSettings(Func<ClusterPutSettingsRequestDescriptor, IClusterPutSettingsRequest> selector = null) => PutSettings(selector.InvokeOrDefault(new ClusterPutSettingsRequestDescriptor()));
		public Task<ClusterPutSettingsResponse> PutSettingsAsync(Func<ClusterPutSettingsRequestDescriptor, IClusterPutSettingsRequest> selector = null, CancellationToken cancellationToken = default) => PutSettingsAsync(selector.InvokeOrDefault(new ClusterPutSettingsRequestDescriptor()), cancellationToken);
		public ClusterRemoteInfoResponse<TKey, TValue> RemoteInfo<TKey, TValue>(IClusterRemoteInfoRequest request) => DoRequest<IClusterRemoteInfoRequest, ClusterRemoteInfoResponse<TKey, TValue>>(request, request.RequestParameters);
		public Task<ClusterRemoteInfoResponse<TKey, TValue>> RemoteInfoAsync<TKey, TValue>(IClusterRemoteInfoRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterRemoteInfoRequest, ClusterRemoteInfoResponse<TKey, TValue>>(request, request.RequestParameters, cancellationToken);
		public ClusterRemoteInfoResponse<TKey, TValue> RemoteInfo<TKey, TValue>(Func<ClusterRemoteInfoRequestDescriptor, IClusterRemoteInfoRequest> selector = null) => RemoteInfo<TKey, TValue>(selector.InvokeOrDefault(new ClusterRemoteInfoRequestDescriptor()));
		public Task<ClusterRemoteInfoResponse<TKey, TValue>> RemoteInfoAsync<TKey, TValue>(Func<ClusterRemoteInfoRequestDescriptor, IClusterRemoteInfoRequest> selector = null, CancellationToken cancellationToken = default) => RemoteInfoAsync<TKey, TValue>(selector.InvokeOrDefault(new ClusterRemoteInfoRequestDescriptor()), cancellationToken);
		public ClusterRerouteResponse Reroute(IClusterRerouteRequest request) => DoRequest<IClusterRerouteRequest, ClusterRerouteResponse>(request, request.RequestParameters);
		public Task<ClusterRerouteResponse> RerouteAsync(IClusterRerouteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterRerouteRequest, ClusterRerouteResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterRerouteResponse Reroute(Func<ClusterRerouteRequestDescriptor, IClusterRerouteRequest> selector = null) => Reroute(selector.InvokeOrDefault(new ClusterRerouteRequestDescriptor()));
		public Task<ClusterRerouteResponse> RerouteAsync(Func<ClusterRerouteRequestDescriptor, IClusterRerouteRequest> selector = null, CancellationToken cancellationToken = default) => RerouteAsync(selector.InvokeOrDefault(new ClusterRerouteRequestDescriptor()), cancellationToken);
		public ClusterStateResponse State(IClusterStateRequest request) => DoRequest<IClusterStateRequest, ClusterStateResponse>(request, request.RequestParameters);
		public Task<ClusterStateResponse> StateAsync(IClusterStateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterStateRequest, ClusterStateResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterStateResponse State(Func<ClusterStateRequestDescriptor, IClusterStateRequest> selector = null) => State(selector.InvokeOrDefault(new ClusterStateRequestDescriptor()));
		public Task<ClusterStateResponse> StateAsync(Func<ClusterStateRequestDescriptor, IClusterStateRequest> selector = null, CancellationToken cancellationToken = default) => StateAsync(selector.InvokeOrDefault(new ClusterStateRequestDescriptor()), cancellationToken);
		public ClusterStatsResponse Stats(IClusterStatsRequest request) => DoRequest<IClusterStatsRequest, ClusterStatsResponse>(request, request.RequestParameters);
		public Task<ClusterStatsResponse> StatsAsync(IClusterStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClusterStatsRequest, ClusterStatsResponse>(request, request.RequestParameters, cancellationToken);
		public ClusterStatsResponse Stats(Func<ClusterStatsRequestDescriptor, IClusterStatsRequest> selector = null) => Stats(selector.InvokeOrDefault(new ClusterStatsRequestDescriptor()));
		public Task<ClusterStatsResponse> StatsAsync(Func<ClusterStatsRequestDescriptor, IClusterStatsRequest> selector = null, CancellationToken cancellationToken = default) => StatsAsync(selector.InvokeOrDefault(new ClusterStatsRequestDescriptor()), cancellationToken);
	}
}