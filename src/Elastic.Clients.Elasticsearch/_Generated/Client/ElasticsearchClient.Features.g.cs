// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Features;

public partial class FeaturesNamespacedClient : Elastic.Clients.Elasticsearch.NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="Elastic.Clients.Elasticsearch.Features.FeaturesNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected FeaturesNamespacedClient() : base()
	{
	}

	internal FeaturesNamespacedClient(Elastic.Clients.Elasticsearch.ElasticsearchClient client) : base(client)
	{
	}

	public virtual Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse GetFeatures(Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse> GetFeaturesAsync(Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse GetFeatures()
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse GetFeatures(System.Action<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse> GetFeaturesAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse> GetFeaturesAsync(System.Action<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.GetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.GetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.GetFeaturesRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse ResetFeatures(Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse> ResetFeaturesAsync(Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse ResetFeatures()
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse ResetFeatures(System.Action<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse> ResetFeaturesAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse> ResetFeaturesAsync(System.Action<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequest, Elastic.Clients.Elasticsearch.Features.ResetFeaturesResponse, Elastic.Clients.Elasticsearch.Features.ResetFeaturesRequestParameters>(request, cancellationToken);
	}
}