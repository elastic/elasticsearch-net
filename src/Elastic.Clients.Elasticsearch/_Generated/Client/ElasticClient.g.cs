// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Cluster;
using Elastic.Clients.Elasticsearch.IndexManagement;
using Elastic.Clients.Elasticsearch.Ingest;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial class ElasticClient : IElasticClient
	{
		public ClusterNamespace Cluster { get; private set; }

		public IndexManagementNamespace IndexManagement { get; private set; }

		public IngestNamespace Ingest { get; private set; }

		private partial void SetupNamespaces()
		{
			Cluster = new ClusterNamespace(this);
			IndexManagement = new IndexManagementNamespace(this);
			Ingest = new IngestNamespace(this);
		}

		public DeleteResponse Delete(DeleteRequest request) => DoRequest<DeleteRequest, DeleteResponse>(request);
		public Task<DeleteResponse> DeleteAsync(DeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<DeleteRequest, DeleteResponse>(request, cancellationToken);
		public DeleteResponse Delete(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<DeleteRequestDescriptor> configureRequest = null)
		{
			var descriptor = new DeleteRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			return DoRequest<DeleteRequestDescriptor, DeleteResponse>(descriptor);
		}

		public Task<DeleteResponse> DeleteAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<DeleteRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new DeleteRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<DeleteRequestDescriptor, DeleteResponse>(descriptor);
		}

		public IndexResponse Index<TDocument>(IndexRequest<TDocument> request) => DoRequest<IndexRequest<TDocument>, IndexResponse>(request);
		public Task<IndexResponse> IndexAsync<TDocument>(IndexRequest<TDocument> request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexRequest<TDocument>, IndexResponse>(request, cancellationToken);
		public IndexResponse Index<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Action<IndexRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new IndexRequestDescriptor<TDocument>(index);
			descriptor.Document(document);
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexRequestDescriptor<TDocument>, IndexResponse>(descriptor);
		}

		public Task<IndexResponse> IndexAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Action<IndexRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexRequestDescriptor<TDocument>(index);
			descriptor.Document(document);
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexRequestDescriptor<TDocument>, IndexResponse>(descriptor);
		}

		public PingResponse Ping(PingRequest request) => DoRequest<PingRequest, PingResponse>(request);
		public Task<PingResponse> PingAsync(PingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<PingRequest, PingResponse>(request, cancellationToken);
		public PingResponse Ping(Action<PingRequestDescriptor> configureRequest = null)
		{
			var descriptor = new PingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<PingRequestDescriptor, PingResponse>(descriptor);
		}

		public Task<PingResponse> PingAsync(Action<PingRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new PingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<PingRequestDescriptor, PingResponse>(descriptor);
		}

		public SearchResponse<TDocument> Search<TDocument>(SearchRequest request) => DoRequest<SearchRequest, SearchResponse<TDocument>>(request);
		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(SearchRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<SearchRequest, SearchResponse<TDocument>>(request, cancellationToken);
		public SearchResponse<TDocument> Search<TDocument>(Action<SearchRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SearchRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<SearchRequestDescriptor, SearchResponse<TDocument>>(descriptor);
		}

		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Action<SearchRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SearchRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<SearchRequestDescriptor, SearchResponse<TDocument>>(descriptor);
		}
	}
}
