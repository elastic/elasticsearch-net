// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml
{
	public class MlNamespace : NamespacedClientProxy
	{
		internal MlNamespace(ElasticsearchClient client) : base(client)
		{
		}

		public MlCloseJobResponse CloseJob(MlCloseJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlCloseJobRequest, MlCloseJobResponse>(request);
		}

		public Task<MlCloseJobResponse> CloseJobAsync(MlCloseJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlCloseJobRequest, MlCloseJobResponse>(request, cancellationToken);
		}

		public MlCloseJobResponse CloseJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlCloseJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlCloseJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlCloseJobRequestDescriptor, MlCloseJobResponse>(descriptor);
		}

		public Task<MlCloseJobResponse> CloseJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlCloseJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlCloseJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlCloseJobRequestDescriptor, MlCloseJobResponse>(descriptor);
		}

		public MlDeleteCalendarEventResponse DeleteCalendarEvent(MlDeleteCalendarEventRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteCalendarEventRequest, MlDeleteCalendarEventResponse>(request);
		}

		public Task<MlDeleteCalendarEventResponse> DeleteCalendarEventAsync(MlDeleteCalendarEventRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteCalendarEventRequest, MlDeleteCalendarEventResponse>(request, cancellationToken);
		}

		public MlDeleteCalendarEventResponse DeleteCalendarEvent(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id event_id, Action<MlDeleteCalendarEventRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteCalendarEventRequestDescriptor(calendar_id, event_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteCalendarEventRequestDescriptor, MlDeleteCalendarEventResponse>(descriptor);
		}

		public Task<MlDeleteCalendarEventResponse> DeleteCalendarEventAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id event_id, Action<MlDeleteCalendarEventRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteCalendarEventRequestDescriptor(calendar_id, event_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteCalendarEventRequestDescriptor, MlDeleteCalendarEventResponse>(descriptor);
		}

		public MlDeleteCalendarResponse DeleteCalendar(MlDeleteCalendarRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteCalendarRequest, MlDeleteCalendarResponse>(request);
		}

		public Task<MlDeleteCalendarResponse> DeleteCalendarAsync(MlDeleteCalendarRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteCalendarRequest, MlDeleteCalendarResponse>(request, cancellationToken);
		}

		public MlDeleteCalendarResponse DeleteCalendar(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlDeleteCalendarRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteCalendarRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteCalendarRequestDescriptor, MlDeleteCalendarResponse>(descriptor);
		}

		public Task<MlDeleteCalendarResponse> DeleteCalendarAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlDeleteCalendarRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteCalendarRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteCalendarRequestDescriptor, MlDeleteCalendarResponse>(descriptor);
		}

		public MlDeleteDatafeedResponse DeleteDatafeed(MlDeleteDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteDatafeedRequest, MlDeleteDatafeedResponse>(request);
		}

		public Task<MlDeleteDatafeedResponse> DeleteDatafeedAsync(MlDeleteDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteDatafeedRequest, MlDeleteDatafeedResponse>(request, cancellationToken);
		}

		public MlDeleteDatafeedResponse DeleteDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlDeleteDatafeedRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteDatafeedRequestDescriptor, MlDeleteDatafeedResponse>(descriptor);
		}

		public Task<MlDeleteDatafeedResponse> DeleteDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlDeleteDatafeedRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteDatafeedRequestDescriptor, MlDeleteDatafeedResponse>(descriptor);
		}

		public MlDeleteDataFrameAnalyticsResponse DeleteDataFrameAnalytics(MlDeleteDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteDataFrameAnalyticsRequest, MlDeleteDataFrameAnalyticsResponse>(request);
		}

		public Task<MlDeleteDataFrameAnalyticsResponse> DeleteDataFrameAnalyticsAsync(MlDeleteDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteDataFrameAnalyticsRequest, MlDeleteDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlDeleteDataFrameAnalyticsResponse DeleteDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Action<MlDeleteDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteDataFrameAnalyticsRequestDescriptor, MlDeleteDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlDeleteDataFrameAnalyticsResponse> DeleteDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Action<MlDeleteDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteDataFrameAnalyticsRequestDescriptor, MlDeleteDataFrameAnalyticsResponse>(descriptor);
		}

		public MlDeleteExpiredDataResponse DeleteExpiredData(MlDeleteExpiredDataRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteExpiredDataRequest, MlDeleteExpiredDataResponse>(request);
		}

		public Task<MlDeleteExpiredDataResponse> DeleteExpiredDataAsync(MlDeleteExpiredDataRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteExpiredDataRequest, MlDeleteExpiredDataResponse>(request, cancellationToken);
		}

		public MlDeleteExpiredDataResponse DeleteExpiredData(Action<MlDeleteExpiredDataRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteExpiredDataRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteExpiredDataRequestDescriptor, MlDeleteExpiredDataResponse>(descriptor);
		}

		public Task<MlDeleteExpiredDataResponse> DeleteExpiredDataAsync(Action<MlDeleteExpiredDataRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteExpiredDataRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteExpiredDataRequestDescriptor, MlDeleteExpiredDataResponse>(descriptor);
		}

		public MlDeleteFilterResponse DeleteFilter(MlDeleteFilterRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteFilterRequest, MlDeleteFilterResponse>(request);
		}

		public Task<MlDeleteFilterResponse> DeleteFilterAsync(MlDeleteFilterRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteFilterRequest, MlDeleteFilterResponse>(request, cancellationToken);
		}

		public MlDeleteFilterResponse DeleteFilter(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlDeleteFilterRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteFilterRequestDescriptor, MlDeleteFilterResponse>(descriptor);
		}

		public Task<MlDeleteFilterResponse> DeleteFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlDeleteFilterRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteFilterRequestDescriptor, MlDeleteFilterResponse>(descriptor);
		}

		public MlDeleteForecastResponse DeleteForecast(MlDeleteForecastRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteForecastRequest, MlDeleteForecastResponse>(request);
		}

		public Task<MlDeleteForecastResponse> DeleteForecastAsync(MlDeleteForecastRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteForecastRequest, MlDeleteForecastResponse>(request, cancellationToken);
		}

		public MlDeleteForecastResponse DeleteForecast(Elastic.Clients.Elasticsearch.Id job_id, Action<MlDeleteForecastRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteForecastRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteForecastRequestDescriptor, MlDeleteForecastResponse>(descriptor);
		}

		public Task<MlDeleteForecastResponse> DeleteForecastAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlDeleteForecastRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteForecastRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteForecastRequestDescriptor, MlDeleteForecastResponse>(descriptor);
		}

		public MlDeleteJobResponse DeleteJob(MlDeleteJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteJobRequest, MlDeleteJobResponse>(request);
		}

		public Task<MlDeleteJobResponse> DeleteJobAsync(MlDeleteJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteJobRequest, MlDeleteJobResponse>(request, cancellationToken);
		}

		public MlDeleteJobResponse DeleteJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlDeleteJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteJobRequestDescriptor, MlDeleteJobResponse>(descriptor);
		}

		public Task<MlDeleteJobResponse> DeleteJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlDeleteJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteJobRequestDescriptor, MlDeleteJobResponse>(descriptor);
		}

		public MlDeleteModelSnapshotResponse DeleteModelSnapshot(MlDeleteModelSnapshotRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteModelSnapshotRequest, MlDeleteModelSnapshotResponse>(request);
		}

		public Task<MlDeleteModelSnapshotResponse> DeleteModelSnapshotAsync(MlDeleteModelSnapshotRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteModelSnapshotRequest, MlDeleteModelSnapshotResponse>(request, cancellationToken);
		}

		public MlDeleteModelSnapshotResponse DeleteModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlDeleteModelSnapshotRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteModelSnapshotRequestDescriptor, MlDeleteModelSnapshotResponse>(descriptor);
		}

		public Task<MlDeleteModelSnapshotResponse> DeleteModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlDeleteModelSnapshotRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteModelSnapshotRequestDescriptor, MlDeleteModelSnapshotResponse>(descriptor);
		}

		public MlDeleteTrainedModelAliasResponse DeleteTrainedModelAlias(MlDeleteTrainedModelAliasRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteTrainedModelAliasRequest, MlDeleteTrainedModelAliasResponse>(request);
		}

		public Task<MlDeleteTrainedModelAliasResponse> DeleteTrainedModelAliasAsync(MlDeleteTrainedModelAliasRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteTrainedModelAliasRequest, MlDeleteTrainedModelAliasResponse>(request, cancellationToken);
		}

		public MlDeleteTrainedModelAliasResponse DeleteTrainedModelAlias(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Action<MlDeleteTrainedModelAliasRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteTrainedModelAliasRequestDescriptor(model_id, model_alias);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteTrainedModelAliasRequestDescriptor, MlDeleteTrainedModelAliasResponse>(descriptor);
		}

		public Task<MlDeleteTrainedModelAliasResponse> DeleteTrainedModelAliasAsync(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Action<MlDeleteTrainedModelAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteTrainedModelAliasRequestDescriptor(model_id, model_alias);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteTrainedModelAliasRequestDescriptor, MlDeleteTrainedModelAliasResponse>(descriptor);
		}

		public MlDeleteTrainedModelResponse DeleteTrainedModel(MlDeleteTrainedModelRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlDeleteTrainedModelRequest, MlDeleteTrainedModelResponse>(request);
		}

		public Task<MlDeleteTrainedModelResponse> DeleteTrainedModelAsync(MlDeleteTrainedModelRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlDeleteTrainedModelRequest, MlDeleteTrainedModelResponse>(request, cancellationToken);
		}

		public MlDeleteTrainedModelResponse DeleteTrainedModel(Elastic.Clients.Elasticsearch.Id model_id, Action<MlDeleteTrainedModelRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlDeleteTrainedModelRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlDeleteTrainedModelRequestDescriptor, MlDeleteTrainedModelResponse>(descriptor);
		}

		public Task<MlDeleteTrainedModelResponse> DeleteTrainedModelAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlDeleteTrainedModelRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlDeleteTrainedModelRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlDeleteTrainedModelRequestDescriptor, MlDeleteTrainedModelResponse>(descriptor);
		}

		public MlEstimateModelMemoryResponse EstimateModelMemory(MlEstimateModelMemoryRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlEstimateModelMemoryRequest, MlEstimateModelMemoryResponse>(request);
		}

		public Task<MlEstimateModelMemoryResponse> EstimateModelMemoryAsync(MlEstimateModelMemoryRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlEstimateModelMemoryRequest, MlEstimateModelMemoryResponse>(request, cancellationToken);
		}

		public MlEstimateModelMemoryResponse EstimateModelMemory(Action<MlEstimateModelMemoryRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlEstimateModelMemoryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlEstimateModelMemoryRequestDescriptor, MlEstimateModelMemoryResponse>(descriptor);
		}

		public Task<MlEstimateModelMemoryResponse> EstimateModelMemoryAsync(Action<MlEstimateModelMemoryRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlEstimateModelMemoryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlEstimateModelMemoryRequestDescriptor, MlEstimateModelMemoryResponse>(descriptor);
		}

		public MlEvaluateDataFrameResponse EvaluateDataFrame(MlEvaluateDataFrameRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlEvaluateDataFrameRequest, MlEvaluateDataFrameResponse>(request);
		}

		public Task<MlEvaluateDataFrameResponse> EvaluateDataFrameAsync(MlEvaluateDataFrameRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlEvaluateDataFrameRequest, MlEvaluateDataFrameResponse>(request, cancellationToken);
		}

		public MlEvaluateDataFrameResponse EvaluateDataFrame(Action<MlEvaluateDataFrameRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlEvaluateDataFrameRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlEvaluateDataFrameRequestDescriptor, MlEvaluateDataFrameResponse>(descriptor);
		}

		public Task<MlEvaluateDataFrameResponse> EvaluateDataFrameAsync(Action<MlEvaluateDataFrameRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlEvaluateDataFrameRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlEvaluateDataFrameRequestDescriptor, MlEvaluateDataFrameResponse>(descriptor);
		}

		public MlExplainDataFrameAnalyticsResponse ExplainDataFrameAnalytics(MlExplainDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlExplainDataFrameAnalyticsRequest, MlExplainDataFrameAnalyticsResponse>(request);
		}

		public Task<MlExplainDataFrameAnalyticsResponse> ExplainDataFrameAnalyticsAsync(MlExplainDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlExplainDataFrameAnalyticsRequest, MlExplainDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlExplainDataFrameAnalyticsResponse ExplainDataFrameAnalytics(Action<MlExplainDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlExplainDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlExplainDataFrameAnalyticsRequestDescriptor, MlExplainDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlExplainDataFrameAnalyticsResponse> ExplainDataFrameAnalyticsAsync(Action<MlExplainDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlExplainDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlExplainDataFrameAnalyticsRequestDescriptor, MlExplainDataFrameAnalyticsResponse>(descriptor);
		}

		public MlFlushJobResponse FlushJob(MlFlushJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlFlushJobRequest, MlFlushJobResponse>(request);
		}

		public Task<MlFlushJobResponse> FlushJobAsync(MlFlushJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlFlushJobRequest, MlFlushJobResponse>(request, cancellationToken);
		}

		public MlFlushJobResponse FlushJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlFlushJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlFlushJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlFlushJobRequestDescriptor, MlFlushJobResponse>(descriptor);
		}

		public Task<MlFlushJobResponse> FlushJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlFlushJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlFlushJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlFlushJobRequestDescriptor, MlFlushJobResponse>(descriptor);
		}

		public MlForecastResponse Forecast(MlForecastRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlForecastRequest, MlForecastResponse>(request);
		}

		public Task<MlForecastResponse> ForecastAsync(MlForecastRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlForecastRequest, MlForecastResponse>(request, cancellationToken);
		}

		public MlForecastResponse Forecast(Elastic.Clients.Elasticsearch.Id job_id, Action<MlForecastRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlForecastRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlForecastRequestDescriptor, MlForecastResponse>(descriptor);
		}

		public Task<MlForecastResponse> ForecastAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlForecastRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlForecastRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlForecastRequestDescriptor, MlForecastResponse>(descriptor);
		}

		public MlGetCalendarEventsResponse GetCalendarEvents(MlGetCalendarEventsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetCalendarEventsRequest, MlGetCalendarEventsResponse>(request);
		}

		public Task<MlGetCalendarEventsResponse> GetCalendarEventsAsync(MlGetCalendarEventsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetCalendarEventsRequest, MlGetCalendarEventsResponse>(request, cancellationToken);
		}

		public MlGetCalendarEventsResponse GetCalendarEvents(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlGetCalendarEventsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetCalendarEventsRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetCalendarEventsRequestDescriptor, MlGetCalendarEventsResponse>(descriptor);
		}

		public Task<MlGetCalendarEventsResponse> GetCalendarEventsAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlGetCalendarEventsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetCalendarEventsRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetCalendarEventsRequestDescriptor, MlGetCalendarEventsResponse>(descriptor);
		}

		public MlGetCalendarsResponse GetCalendars(MlGetCalendarsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetCalendarsRequest, MlGetCalendarsResponse>(request);
		}

		public Task<MlGetCalendarsResponse> GetCalendarsAsync(MlGetCalendarsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetCalendarsRequest, MlGetCalendarsResponse>(request, cancellationToken);
		}

		public MlGetCalendarsResponse GetCalendars(Action<MlGetCalendarsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetCalendarsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetCalendarsRequestDescriptor, MlGetCalendarsResponse>(descriptor);
		}

		public Task<MlGetCalendarsResponse> GetCalendarsAsync(Action<MlGetCalendarsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetCalendarsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetCalendarsRequestDescriptor, MlGetCalendarsResponse>(descriptor);
		}

		public MlGetDataFrameAnalyticsResponse GetDataFrameAnalytics(MlGetDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetDataFrameAnalyticsRequest, MlGetDataFrameAnalyticsResponse>(request);
		}

		public Task<MlGetDataFrameAnalyticsResponse> GetDataFrameAnalyticsAsync(MlGetDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetDataFrameAnalyticsRequest, MlGetDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlGetDataFrameAnalyticsResponse GetDataFrameAnalytics(Action<MlGetDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetDataFrameAnalyticsRequestDescriptor, MlGetDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlGetDataFrameAnalyticsResponse> GetDataFrameAnalyticsAsync(Action<MlGetDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetDataFrameAnalyticsRequestDescriptor, MlGetDataFrameAnalyticsResponse>(descriptor);
		}

		public MlGetDataFrameAnalyticsStatsResponse GetDataFrameAnalyticsStats(MlGetDataFrameAnalyticsStatsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetDataFrameAnalyticsStatsRequest, MlGetDataFrameAnalyticsStatsResponse>(request);
		}

		public Task<MlGetDataFrameAnalyticsStatsResponse> GetDataFrameAnalyticsStatsAsync(MlGetDataFrameAnalyticsStatsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetDataFrameAnalyticsStatsRequest, MlGetDataFrameAnalyticsStatsResponse>(request, cancellationToken);
		}

		public MlGetDataFrameAnalyticsStatsResponse GetDataFrameAnalyticsStats(Action<MlGetDataFrameAnalyticsStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetDataFrameAnalyticsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetDataFrameAnalyticsStatsRequestDescriptor, MlGetDataFrameAnalyticsStatsResponse>(descriptor);
		}

		public Task<MlGetDataFrameAnalyticsStatsResponse> GetDataFrameAnalyticsStatsAsync(Action<MlGetDataFrameAnalyticsStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetDataFrameAnalyticsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetDataFrameAnalyticsStatsRequestDescriptor, MlGetDataFrameAnalyticsStatsResponse>(descriptor);
		}

		public MlGetInfluencersResponse GetInfluencers(MlGetInfluencersRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetInfluencersRequest, MlGetInfluencersResponse>(request);
		}

		public Task<MlGetInfluencersResponse> GetInfluencersAsync(MlGetInfluencersRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetInfluencersRequest, MlGetInfluencersResponse>(request, cancellationToken);
		}

		public MlGetInfluencersResponse GetInfluencers(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetInfluencersRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetInfluencersRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetInfluencersRequestDescriptor, MlGetInfluencersResponse>(descriptor);
		}

		public Task<MlGetInfluencersResponse> GetInfluencersAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetInfluencersRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetInfluencersRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetInfluencersRequestDescriptor, MlGetInfluencersResponse>(descriptor);
		}

		public MlGetJobStatsResponse GetJobStats(MlGetJobStatsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetJobStatsRequest, MlGetJobStatsResponse>(request);
		}

		public Task<MlGetJobStatsResponse> GetJobStatsAsync(MlGetJobStatsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetJobStatsRequest, MlGetJobStatsResponse>(request, cancellationToken);
		}

		public MlGetJobStatsResponse GetJobStats(Action<MlGetJobStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetJobStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetJobStatsRequestDescriptor, MlGetJobStatsResponse>(descriptor);
		}

		public Task<MlGetJobStatsResponse> GetJobStatsAsync(Action<MlGetJobStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetJobStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetJobStatsRequestDescriptor, MlGetJobStatsResponse>(descriptor);
		}

		public MlGetModelSnapshotsResponse GetModelSnapshots(MlGetModelSnapshotsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetModelSnapshotsRequest, MlGetModelSnapshotsResponse>(request);
		}

		public Task<MlGetModelSnapshotsResponse> GetModelSnapshotsAsync(MlGetModelSnapshotsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetModelSnapshotsRequest, MlGetModelSnapshotsResponse>(request, cancellationToken);
		}

		public MlGetModelSnapshotsResponse GetModelSnapshots(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetModelSnapshotsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetModelSnapshotsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetModelSnapshotsRequestDescriptor, MlGetModelSnapshotsResponse>(descriptor);
		}

		public Task<MlGetModelSnapshotsResponse> GetModelSnapshotsAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetModelSnapshotsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetModelSnapshotsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetModelSnapshotsRequestDescriptor, MlGetModelSnapshotsResponse>(descriptor);
		}

		public MlGetOverallBucketsResponse GetOverallBuckets(MlGetOverallBucketsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetOverallBucketsRequest, MlGetOverallBucketsResponse>(request);
		}

		public Task<MlGetOverallBucketsResponse> GetOverallBucketsAsync(MlGetOverallBucketsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetOverallBucketsRequest, MlGetOverallBucketsResponse>(request, cancellationToken);
		}

		public MlGetOverallBucketsResponse GetOverallBuckets(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetOverallBucketsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetOverallBucketsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetOverallBucketsRequestDescriptor, MlGetOverallBucketsResponse>(descriptor);
		}

		public Task<MlGetOverallBucketsResponse> GetOverallBucketsAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetOverallBucketsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetOverallBucketsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetOverallBucketsRequestDescriptor, MlGetOverallBucketsResponse>(descriptor);
		}

		public MlGetRecordsResponse GetRecords(MlGetRecordsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetRecordsRequest, MlGetRecordsResponse>(request);
		}

		public Task<MlGetRecordsResponse> GetRecordsAsync(MlGetRecordsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetRecordsRequest, MlGetRecordsResponse>(request, cancellationToken);
		}

		public MlGetRecordsResponse GetRecords(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetRecordsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetRecordsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetRecordsRequestDescriptor, MlGetRecordsResponse>(descriptor);
		}

		public Task<MlGetRecordsResponse> GetRecordsAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlGetRecordsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetRecordsRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetRecordsRequestDescriptor, MlGetRecordsResponse>(descriptor);
		}

		public MlGetTrainedModelsStatsResponse GetTrainedModelsStats(MlGetTrainedModelsStatsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlGetTrainedModelsStatsRequest, MlGetTrainedModelsStatsResponse>(request);
		}

		public Task<MlGetTrainedModelsStatsResponse> GetTrainedModelsStatsAsync(MlGetTrainedModelsStatsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlGetTrainedModelsStatsRequest, MlGetTrainedModelsStatsResponse>(request, cancellationToken);
		}

		public MlGetTrainedModelsStatsResponse GetTrainedModelsStats(Action<MlGetTrainedModelsStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlGetTrainedModelsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlGetTrainedModelsStatsRequestDescriptor, MlGetTrainedModelsStatsResponse>(descriptor);
		}

		public Task<MlGetTrainedModelsStatsResponse> GetTrainedModelsStatsAsync(Action<MlGetTrainedModelsStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlGetTrainedModelsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlGetTrainedModelsStatsRequestDescriptor, MlGetTrainedModelsStatsResponse>(descriptor);
		}

		public MlInferTrainedModelDeploymentResponse InferTrainedModelDeployment(MlInferTrainedModelDeploymentRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlInferTrainedModelDeploymentRequest, MlInferTrainedModelDeploymentResponse>(request);
		}

		public Task<MlInferTrainedModelDeploymentResponse> InferTrainedModelDeploymentAsync(MlInferTrainedModelDeploymentRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlInferTrainedModelDeploymentRequest, MlInferTrainedModelDeploymentResponse>(request, cancellationToken);
		}

		public MlInferTrainedModelDeploymentResponse InferTrainedModelDeployment(Elastic.Clients.Elasticsearch.Id model_id, Action<MlInferTrainedModelDeploymentRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlInferTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlInferTrainedModelDeploymentRequestDescriptor, MlInferTrainedModelDeploymentResponse>(descriptor);
		}

		public Task<MlInferTrainedModelDeploymentResponse> InferTrainedModelDeploymentAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlInferTrainedModelDeploymentRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlInferTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlInferTrainedModelDeploymentRequestDescriptor, MlInferTrainedModelDeploymentResponse>(descriptor);
		}

		public MlInfoResponse Info(MlInfoRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlInfoRequest, MlInfoResponse>(request);
		}

		public Task<MlInfoResponse> InfoAsync(MlInfoRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlInfoRequest, MlInfoResponse>(request, cancellationToken);
		}

		public MlInfoResponse Info(Action<MlInfoRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlInfoRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlInfoRequestDescriptor, MlInfoResponse>(descriptor);
		}

		public Task<MlInfoResponse> InfoAsync(Action<MlInfoRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlInfoRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlInfoRequestDescriptor, MlInfoResponse>(descriptor);
		}

		public MlOpenJobResponse OpenJob(MlOpenJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlOpenJobRequest, MlOpenJobResponse>(request);
		}

		public Task<MlOpenJobResponse> OpenJobAsync(MlOpenJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlOpenJobRequest, MlOpenJobResponse>(request, cancellationToken);
		}

		public MlOpenJobResponse OpenJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlOpenJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlOpenJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlOpenJobRequestDescriptor, MlOpenJobResponse>(descriptor);
		}

		public Task<MlOpenJobResponse> OpenJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlOpenJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlOpenJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlOpenJobRequestDescriptor, MlOpenJobResponse>(descriptor);
		}

		public MlPostCalendarEventsResponse PostCalendarEvents(MlPostCalendarEventsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPostCalendarEventsRequest, MlPostCalendarEventsResponse>(request);
		}

		public Task<MlPostCalendarEventsResponse> PostCalendarEventsAsync(MlPostCalendarEventsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPostCalendarEventsRequest, MlPostCalendarEventsResponse>(request, cancellationToken);
		}

		public MlPostCalendarEventsResponse PostCalendarEvents(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlPostCalendarEventsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPostCalendarEventsRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPostCalendarEventsRequestDescriptor, MlPostCalendarEventsResponse>(descriptor);
		}

		public Task<MlPostCalendarEventsResponse> PostCalendarEventsAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlPostCalendarEventsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPostCalendarEventsRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPostCalendarEventsRequestDescriptor, MlPostCalendarEventsResponse>(descriptor);
		}

		public MlPreviewDatafeedResponse<TDocument> PreviewDatafeed<TDocument>(MlPreviewDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPreviewDatafeedRequest, MlPreviewDatafeedResponse<TDocument>>(request);
		}

		public Task<MlPreviewDatafeedResponse<TDocument>> PreviewDatafeedAsync<TDocument>(MlPreviewDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPreviewDatafeedRequest, MlPreviewDatafeedResponse<TDocument>>(request, cancellationToken);
		}

		public MlPreviewDatafeedResponse<TDocument> PreviewDatafeed<TDocument>(Action<MlPreviewDatafeedRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new MlPreviewDatafeedRequestDescriptor<TDocument>();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPreviewDatafeedRequestDescriptor<TDocument>, MlPreviewDatafeedResponse<TDocument>>(descriptor);
		}

		public Task<MlPreviewDatafeedResponse<TDocument>> PreviewDatafeedAsync<TDocument>(Action<MlPreviewDatafeedRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPreviewDatafeedRequestDescriptor<TDocument>();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPreviewDatafeedRequestDescriptor<TDocument>, MlPreviewDatafeedResponse<TDocument>>(descriptor);
		}

		public MlPreviewDataFrameAnalyticsResponse PreviewDataFrameAnalytics(MlPreviewDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPreviewDataFrameAnalyticsRequest, MlPreviewDataFrameAnalyticsResponse>(request);
		}

		public Task<MlPreviewDataFrameAnalyticsResponse> PreviewDataFrameAnalyticsAsync(MlPreviewDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPreviewDataFrameAnalyticsRequest, MlPreviewDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlPreviewDataFrameAnalyticsResponse PreviewDataFrameAnalytics(Action<MlPreviewDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPreviewDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPreviewDataFrameAnalyticsRequestDescriptor, MlPreviewDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlPreviewDataFrameAnalyticsResponse> PreviewDataFrameAnalyticsAsync(Action<MlPreviewDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPreviewDataFrameAnalyticsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPreviewDataFrameAnalyticsRequestDescriptor, MlPreviewDataFrameAnalyticsResponse>(descriptor);
		}

		public MlPutCalendarJobResponse PutCalendarJob(MlPutCalendarJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutCalendarJobRequest, MlPutCalendarJobResponse>(request);
		}

		public Task<MlPutCalendarJobResponse> PutCalendarJobAsync(MlPutCalendarJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutCalendarJobRequest, MlPutCalendarJobResponse>(request, cancellationToken);
		}

		public MlPutCalendarJobResponse PutCalendarJob(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Action<MlPutCalendarJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutCalendarJobRequestDescriptor(calendar_id, job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutCalendarJobRequestDescriptor, MlPutCalendarJobResponse>(descriptor);
		}

		public Task<MlPutCalendarJobResponse> PutCalendarJobAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Action<MlPutCalendarJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutCalendarJobRequestDescriptor(calendar_id, job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutCalendarJobRequestDescriptor, MlPutCalendarJobResponse>(descriptor);
		}

		public MlPutCalendarResponse PutCalendar(MlPutCalendarRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutCalendarRequest, MlPutCalendarResponse>(request);
		}

		public Task<MlPutCalendarResponse> PutCalendarAsync(MlPutCalendarRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutCalendarRequest, MlPutCalendarResponse>(request, cancellationToken);
		}

		public MlPutCalendarResponse PutCalendar(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlPutCalendarRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutCalendarRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutCalendarRequestDescriptor, MlPutCalendarResponse>(descriptor);
		}

		public Task<MlPutCalendarResponse> PutCalendarAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Action<MlPutCalendarRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutCalendarRequestDescriptor(calendar_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutCalendarRequestDescriptor, MlPutCalendarResponse>(descriptor);
		}

		public MlPutDatafeedResponse PutDatafeed(MlPutDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutDatafeedRequest, MlPutDatafeedResponse>(request);
		}

		public Task<MlPutDatafeedResponse> PutDatafeedAsync(MlPutDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutDatafeedRequest, MlPutDatafeedResponse>(request, cancellationToken);
		}

		public MlPutDatafeedResponse PutDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlPutDatafeedRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutDatafeedRequestDescriptor, MlPutDatafeedResponse>(descriptor);
		}

		public Task<MlPutDatafeedResponse> PutDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlPutDatafeedRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutDatafeedRequestDescriptor, MlPutDatafeedResponse>(descriptor);
		}

		public MlPutDataFrameAnalyticsResponse PutDataFrameAnalytics(MlPutDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutDataFrameAnalyticsRequest, MlPutDataFrameAnalyticsResponse>(request);
		}

		public Task<MlPutDataFrameAnalyticsResponse> PutDataFrameAnalyticsAsync(MlPutDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutDataFrameAnalyticsRequest, MlPutDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlPutDataFrameAnalyticsResponse PutDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Action<MlPutDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutDataFrameAnalyticsRequestDescriptor, MlPutDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlPutDataFrameAnalyticsResponse> PutDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Action<MlPutDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutDataFrameAnalyticsRequestDescriptor, MlPutDataFrameAnalyticsResponse>(descriptor);
		}

		public MlPutFilterResponse PutFilter(MlPutFilterRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutFilterRequest, MlPutFilterResponse>(request);
		}

		public Task<MlPutFilterResponse> PutFilterAsync(MlPutFilterRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutFilterRequest, MlPutFilterResponse>(request, cancellationToken);
		}

		public MlPutFilterResponse PutFilter(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlPutFilterRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutFilterRequestDescriptor, MlPutFilterResponse>(descriptor);
		}

		public Task<MlPutFilterResponse> PutFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlPutFilterRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutFilterRequestDescriptor, MlPutFilterResponse>(descriptor);
		}

		public MlPutJobResponse PutJob(MlPutJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutJobRequest, MlPutJobResponse>(request);
		}

		public Task<MlPutJobResponse> PutJobAsync(MlPutJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutJobRequest, MlPutJobResponse>(request, cancellationToken);
		}

		public MlPutJobResponse PutJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlPutJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutJobRequestDescriptor, MlPutJobResponse>(descriptor);
		}

		public Task<MlPutJobResponse> PutJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlPutJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutJobRequestDescriptor, MlPutJobResponse>(descriptor);
		}

		public MlPutTrainedModelAliasResponse PutTrainedModelAlias(MlPutTrainedModelAliasRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutTrainedModelAliasRequest, MlPutTrainedModelAliasResponse>(request);
		}

		public Task<MlPutTrainedModelAliasResponse> PutTrainedModelAliasAsync(MlPutTrainedModelAliasRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelAliasRequest, MlPutTrainedModelAliasResponse>(request, cancellationToken);
		}

		public MlPutTrainedModelAliasResponse PutTrainedModelAlias(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Action<MlPutTrainedModelAliasRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutTrainedModelAliasRequestDescriptor(model_id, model_alias);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutTrainedModelAliasRequestDescriptor, MlPutTrainedModelAliasResponse>(descriptor);
		}

		public Task<MlPutTrainedModelAliasResponse> PutTrainedModelAliasAsync(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Action<MlPutTrainedModelAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutTrainedModelAliasRequestDescriptor(model_id, model_alias);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelAliasRequestDescriptor, MlPutTrainedModelAliasResponse>(descriptor);
		}

		public MlPutTrainedModelResponse PutTrainedModel(MlPutTrainedModelRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutTrainedModelRequest, MlPutTrainedModelResponse>(request);
		}

		public Task<MlPutTrainedModelResponse> PutTrainedModelAsync(MlPutTrainedModelRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelRequest, MlPutTrainedModelResponse>(request, cancellationToken);
		}

		public MlPutTrainedModelResponse PutTrainedModel(Elastic.Clients.Elasticsearch.Id model_id, Action<MlPutTrainedModelRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutTrainedModelRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutTrainedModelRequestDescriptor, MlPutTrainedModelResponse>(descriptor);
		}

		public Task<MlPutTrainedModelResponse> PutTrainedModelAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlPutTrainedModelRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutTrainedModelRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelRequestDescriptor, MlPutTrainedModelResponse>(descriptor);
		}

		public MlPutTrainedModelVocabularyResponse PutTrainedModelVocabulary(MlPutTrainedModelVocabularyRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlPutTrainedModelVocabularyRequest, MlPutTrainedModelVocabularyResponse>(request);
		}

		public Task<MlPutTrainedModelVocabularyResponse> PutTrainedModelVocabularyAsync(MlPutTrainedModelVocabularyRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelVocabularyRequest, MlPutTrainedModelVocabularyResponse>(request, cancellationToken);
		}

		public MlPutTrainedModelVocabularyResponse PutTrainedModelVocabulary(Elastic.Clients.Elasticsearch.Id model_id, Action<MlPutTrainedModelVocabularyRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlPutTrainedModelVocabularyRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlPutTrainedModelVocabularyRequestDescriptor, MlPutTrainedModelVocabularyResponse>(descriptor);
		}

		public Task<MlPutTrainedModelVocabularyResponse> PutTrainedModelVocabularyAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlPutTrainedModelVocabularyRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlPutTrainedModelVocabularyRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlPutTrainedModelVocabularyRequestDescriptor, MlPutTrainedModelVocabularyResponse>(descriptor);
		}

		public MlResetJobResponse ResetJob(MlResetJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlResetJobRequest, MlResetJobResponse>(request);
		}

		public Task<MlResetJobResponse> ResetJobAsync(MlResetJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlResetJobRequest, MlResetJobResponse>(request, cancellationToken);
		}

		public MlResetJobResponse ResetJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlResetJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlResetJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlResetJobRequestDescriptor, MlResetJobResponse>(descriptor);
		}

		public Task<MlResetJobResponse> ResetJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlResetJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlResetJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlResetJobRequestDescriptor, MlResetJobResponse>(descriptor);
		}

		public MlRevertModelSnapshotResponse RevertModelSnapshot(MlRevertModelSnapshotRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlRevertModelSnapshotRequest, MlRevertModelSnapshotResponse>(request);
		}

		public Task<MlRevertModelSnapshotResponse> RevertModelSnapshotAsync(MlRevertModelSnapshotRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlRevertModelSnapshotRequest, MlRevertModelSnapshotResponse>(request, cancellationToken);
		}

		public MlRevertModelSnapshotResponse RevertModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlRevertModelSnapshotRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlRevertModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlRevertModelSnapshotRequestDescriptor, MlRevertModelSnapshotResponse>(descriptor);
		}

		public Task<MlRevertModelSnapshotResponse> RevertModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlRevertModelSnapshotRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlRevertModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlRevertModelSnapshotRequestDescriptor, MlRevertModelSnapshotResponse>(descriptor);
		}

		public MlSetUpgradeModeResponse SetUpgradeMode(MlSetUpgradeModeRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlSetUpgradeModeRequest, MlSetUpgradeModeResponse>(request);
		}

		public Task<MlSetUpgradeModeResponse> SetUpgradeModeAsync(MlSetUpgradeModeRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlSetUpgradeModeRequest, MlSetUpgradeModeResponse>(request, cancellationToken);
		}

		public MlSetUpgradeModeResponse SetUpgradeMode(Action<MlSetUpgradeModeRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlSetUpgradeModeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlSetUpgradeModeRequestDescriptor, MlSetUpgradeModeResponse>(descriptor);
		}

		public Task<MlSetUpgradeModeResponse> SetUpgradeModeAsync(Action<MlSetUpgradeModeRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlSetUpgradeModeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlSetUpgradeModeRequestDescriptor, MlSetUpgradeModeResponse>(descriptor);
		}

		public MlStartDatafeedResponse StartDatafeed(MlStartDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStartDatafeedRequest, MlStartDatafeedResponse>(request);
		}

		public Task<MlStartDatafeedResponse> StartDatafeedAsync(MlStartDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStartDatafeedRequest, MlStartDatafeedResponse>(request, cancellationToken);
		}

		public MlStartDatafeedResponse StartDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlStartDatafeedRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStartDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStartDatafeedRequestDescriptor, MlStartDatafeedResponse>(descriptor);
		}

		public Task<MlStartDatafeedResponse> StartDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlStartDatafeedRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStartDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStartDatafeedRequestDescriptor, MlStartDatafeedResponse>(descriptor);
		}

		public MlStartDataFrameAnalyticsResponse StartDataFrameAnalytics(MlStartDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStartDataFrameAnalyticsRequest, MlStartDataFrameAnalyticsResponse>(request);
		}

		public Task<MlStartDataFrameAnalyticsResponse> StartDataFrameAnalyticsAsync(MlStartDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStartDataFrameAnalyticsRequest, MlStartDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlStartDataFrameAnalyticsResponse StartDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Action<MlStartDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStartDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStartDataFrameAnalyticsRequestDescriptor, MlStartDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlStartDataFrameAnalyticsResponse> StartDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Action<MlStartDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStartDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStartDataFrameAnalyticsRequestDescriptor, MlStartDataFrameAnalyticsResponse>(descriptor);
		}

		public MlStartTrainedModelDeploymentResponse StartTrainedModelDeployment(MlStartTrainedModelDeploymentRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStartTrainedModelDeploymentRequest, MlStartTrainedModelDeploymentResponse>(request);
		}

		public Task<MlStartTrainedModelDeploymentResponse> StartTrainedModelDeploymentAsync(MlStartTrainedModelDeploymentRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStartTrainedModelDeploymentRequest, MlStartTrainedModelDeploymentResponse>(request, cancellationToken);
		}

		public MlStartTrainedModelDeploymentResponse StartTrainedModelDeployment(Elastic.Clients.Elasticsearch.Id model_id, Action<MlStartTrainedModelDeploymentRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStartTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStartTrainedModelDeploymentRequestDescriptor, MlStartTrainedModelDeploymentResponse>(descriptor);
		}

		public Task<MlStartTrainedModelDeploymentResponse> StartTrainedModelDeploymentAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlStartTrainedModelDeploymentRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStartTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStartTrainedModelDeploymentRequestDescriptor, MlStartTrainedModelDeploymentResponse>(descriptor);
		}

		public MlStopDatafeedResponse StopDatafeed(MlStopDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStopDatafeedRequest, MlStopDatafeedResponse>(request);
		}

		public Task<MlStopDatafeedResponse> StopDatafeedAsync(MlStopDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStopDatafeedRequest, MlStopDatafeedResponse>(request, cancellationToken);
		}

		public MlStopDatafeedResponse StopDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlStopDatafeedRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStopDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStopDatafeedRequestDescriptor, MlStopDatafeedResponse>(descriptor);
		}

		public Task<MlStopDatafeedResponse> StopDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlStopDatafeedRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStopDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStopDatafeedRequestDescriptor, MlStopDatafeedResponse>(descriptor);
		}

		public MlStopDataFrameAnalyticsResponse StopDataFrameAnalytics(MlStopDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStopDataFrameAnalyticsRequest, MlStopDataFrameAnalyticsResponse>(request);
		}

		public Task<MlStopDataFrameAnalyticsResponse> StopDataFrameAnalyticsAsync(MlStopDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStopDataFrameAnalyticsRequest, MlStopDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlStopDataFrameAnalyticsResponse StopDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Action<MlStopDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStopDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStopDataFrameAnalyticsRequestDescriptor, MlStopDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlStopDataFrameAnalyticsResponse> StopDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Action<MlStopDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStopDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStopDataFrameAnalyticsRequestDescriptor, MlStopDataFrameAnalyticsResponse>(descriptor);
		}

		public MlStopTrainedModelDeploymentResponse StopTrainedModelDeployment(MlStopTrainedModelDeploymentRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlStopTrainedModelDeploymentRequest, MlStopTrainedModelDeploymentResponse>(request);
		}

		public Task<MlStopTrainedModelDeploymentResponse> StopTrainedModelDeploymentAsync(MlStopTrainedModelDeploymentRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlStopTrainedModelDeploymentRequest, MlStopTrainedModelDeploymentResponse>(request, cancellationToken);
		}

		public MlStopTrainedModelDeploymentResponse StopTrainedModelDeployment(Elastic.Clients.Elasticsearch.Id model_id, Action<MlStopTrainedModelDeploymentRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlStopTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlStopTrainedModelDeploymentRequestDescriptor, MlStopTrainedModelDeploymentResponse>(descriptor);
		}

		public Task<MlStopTrainedModelDeploymentResponse> StopTrainedModelDeploymentAsync(Elastic.Clients.Elasticsearch.Id model_id, Action<MlStopTrainedModelDeploymentRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlStopTrainedModelDeploymentRequestDescriptor(model_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlStopTrainedModelDeploymentRequestDescriptor, MlStopTrainedModelDeploymentResponse>(descriptor);
		}

		public MlUpdateDatafeedResponse UpdateDatafeed(MlUpdateDatafeedRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpdateDatafeedRequest, MlUpdateDatafeedResponse>(request);
		}

		public Task<MlUpdateDatafeedResponse> UpdateDatafeedAsync(MlUpdateDatafeedRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpdateDatafeedRequest, MlUpdateDatafeedResponse>(request, cancellationToken);
		}

		public MlUpdateDatafeedResponse UpdateDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlUpdateDatafeedRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpdateDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpdateDatafeedRequestDescriptor, MlUpdateDatafeedResponse>(descriptor);
		}

		public Task<MlUpdateDatafeedResponse> UpdateDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Action<MlUpdateDatafeedRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpdateDatafeedRequestDescriptor(datafeed_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpdateDatafeedRequestDescriptor, MlUpdateDatafeedResponse>(descriptor);
		}

		public MlUpdateDataFrameAnalyticsResponse UpdateDataFrameAnalytics(MlUpdateDataFrameAnalyticsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpdateDataFrameAnalyticsRequest, MlUpdateDataFrameAnalyticsResponse>(request);
		}

		public Task<MlUpdateDataFrameAnalyticsResponse> UpdateDataFrameAnalyticsAsync(MlUpdateDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpdateDataFrameAnalyticsRequest, MlUpdateDataFrameAnalyticsResponse>(request, cancellationToken);
		}

		public MlUpdateDataFrameAnalyticsResponse UpdateDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Action<MlUpdateDataFrameAnalyticsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpdateDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpdateDataFrameAnalyticsRequestDescriptor, MlUpdateDataFrameAnalyticsResponse>(descriptor);
		}

		public Task<MlUpdateDataFrameAnalyticsResponse> UpdateDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Action<MlUpdateDataFrameAnalyticsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpdateDataFrameAnalyticsRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpdateDataFrameAnalyticsRequestDescriptor, MlUpdateDataFrameAnalyticsResponse>(descriptor);
		}

		public MlUpdateFilterResponse UpdateFilter(MlUpdateFilterRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpdateFilterRequest, MlUpdateFilterResponse>(request);
		}

		public Task<MlUpdateFilterResponse> UpdateFilterAsync(MlUpdateFilterRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpdateFilterRequest, MlUpdateFilterResponse>(request, cancellationToken);
		}

		public MlUpdateFilterResponse UpdateFilter(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlUpdateFilterRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpdateFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpdateFilterRequestDescriptor, MlUpdateFilterResponse>(descriptor);
		}

		public Task<MlUpdateFilterResponse> UpdateFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Action<MlUpdateFilterRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpdateFilterRequestDescriptor(filter_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpdateFilterRequestDescriptor, MlUpdateFilterResponse>(descriptor);
		}

		public MlUpdateJobResponse UpdateJob(MlUpdateJobRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpdateJobRequest, MlUpdateJobResponse>(request);
		}

		public Task<MlUpdateJobResponse> UpdateJobAsync(MlUpdateJobRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpdateJobRequest, MlUpdateJobResponse>(request, cancellationToken);
		}

		public MlUpdateJobResponse UpdateJob(Elastic.Clients.Elasticsearch.Id job_id, Action<MlUpdateJobRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpdateJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpdateJobRequestDescriptor, MlUpdateJobResponse>(descriptor);
		}

		public Task<MlUpdateJobResponse> UpdateJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Action<MlUpdateJobRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpdateJobRequestDescriptor(job_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpdateJobRequestDescriptor, MlUpdateJobResponse>(descriptor);
		}

		public MlUpdateModelSnapshotResponse UpdateModelSnapshot(MlUpdateModelSnapshotRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpdateModelSnapshotRequest, MlUpdateModelSnapshotResponse>(request);
		}

		public Task<MlUpdateModelSnapshotResponse> UpdateModelSnapshotAsync(MlUpdateModelSnapshotRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpdateModelSnapshotRequest, MlUpdateModelSnapshotResponse>(request, cancellationToken);
		}

		public MlUpdateModelSnapshotResponse UpdateModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlUpdateModelSnapshotRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpdateModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpdateModelSnapshotRequestDescriptor, MlUpdateModelSnapshotResponse>(descriptor);
		}

		public Task<MlUpdateModelSnapshotResponse> UpdateModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlUpdateModelSnapshotRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpdateModelSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpdateModelSnapshotRequestDescriptor, MlUpdateModelSnapshotResponse>(descriptor);
		}

		public MlUpgradeJobSnapshotResponse UpgradeJobSnapshot(MlUpgradeJobSnapshotRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlUpgradeJobSnapshotRequest, MlUpgradeJobSnapshotResponse>(request);
		}

		public Task<MlUpgradeJobSnapshotResponse> UpgradeJobSnapshotAsync(MlUpgradeJobSnapshotRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlUpgradeJobSnapshotRequest, MlUpgradeJobSnapshotResponse>(request, cancellationToken);
		}

		public MlUpgradeJobSnapshotResponse UpgradeJobSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlUpgradeJobSnapshotRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlUpgradeJobSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlUpgradeJobSnapshotRequestDescriptor, MlUpgradeJobSnapshotResponse>(descriptor);
		}

		public Task<MlUpgradeJobSnapshotResponse> UpgradeJobSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Action<MlUpgradeJobSnapshotRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlUpgradeJobSnapshotRequestDescriptor(job_id, snapshot_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlUpgradeJobSnapshotRequestDescriptor, MlUpgradeJobSnapshotResponse>(descriptor);
		}

		public MlValidateDetectorResponse ValidateDetector(MlValidateDetectorRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlValidateDetectorRequest, MlValidateDetectorResponse>(request);
		}

		public Task<MlValidateDetectorResponse> ValidateDetectorAsync(MlValidateDetectorRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlValidateDetectorRequest, MlValidateDetectorResponse>(request, cancellationToken);
		}

		public MlValidateDetectorResponse ValidateDetector(Action<MlValidateDetectorRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlValidateDetectorRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlValidateDetectorRequestDescriptor, MlValidateDetectorResponse>(descriptor);
		}

		public Task<MlValidateDetectorResponse> ValidateDetectorAsync(Action<MlValidateDetectorRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlValidateDetectorRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlValidateDetectorRequestDescriptor, MlValidateDetectorResponse>(descriptor);
		}

		public MlValidateResponse Validate(MlValidateRequest request)
		{
			request.BeforeRequest();
			return DoRequest<MlValidateRequest, MlValidateResponse>(request);
		}

		public Task<MlValidateResponse> ValidateAsync(MlValidateRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<MlValidateRequest, MlValidateResponse>(request, cancellationToken);
		}

		public MlValidateResponse Validate(Action<MlValidateRequestDescriptor> configureRequest = null)
		{
			var descriptor = new MlValidateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<MlValidateRequestDescriptor, MlValidateResponse>(descriptor);
		}

		public Task<MlValidateResponse> ValidateAsync(Action<MlValidateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new MlValidateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<MlValidateRequestDescriptor, MlValidateResponse>(descriptor);
		}
	}
}