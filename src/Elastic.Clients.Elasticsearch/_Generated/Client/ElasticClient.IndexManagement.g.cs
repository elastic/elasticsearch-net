// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexManagementNamespace : NamespacedClientProxy
	{
		internal IndexManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public AnalyzeIndexResponse AnalyzeIndex(IAnalyzeIndexRequest request) => DoRequest<IAnalyzeIndexRequest, AnalyzeIndexResponse>(request, request.RequestParameters);
		public Task<AnalyzeIndexResponse> AnalyzeIndexAsync(IAnalyzeIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IAnalyzeIndexRequest, AnalyzeIndexResponse>(request, request.RequestParameters, cancellationToken);
		public AnalyzeIndexResponse AnalyzeIndex(Func<AnalyzeIndexRequestDescriptor, IAnalyzeIndexRequest> selector = null) => AnalyzeIndex(selector.InvokeOrDefault(new AnalyzeIndexRequestDescriptor()));
		public Task<AnalyzeIndexResponse> AnalyzeIndexAsync(Func<AnalyzeIndexRequestDescriptor, IAnalyzeIndexRequest> selector = null, CancellationToken cancellationToken = default) => AnalyzeIndexAsync(selector.InvokeOrDefault(new AnalyzeIndexRequestDescriptor()), cancellationToken);
		public CreateIndexResponse CreateIndex(ICreateIndexRequest request) => DoRequest<ICreateIndexRequest, CreateIndexResponse>(request, request.RequestParameters);
		public Task<CreateIndexResponse> CreateIndexAsync(ICreateIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateIndexRequest, CreateIndexResponse>(request, request.RequestParameters, cancellationToken);
		public CreateIndexResponse CreateIndex(Elastic.Clients.Elasticsearch.IndexName index, Func<CreateIndexRequestDescriptor, ICreateIndexRequest> selector = null) => CreateIndex(selector.InvokeOrDefault(new CreateIndexRequestDescriptor(index)));
		public Task<CreateIndexResponse> CreateIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Func<CreateIndexRequestDescriptor, ICreateIndexRequest> selector = null, CancellationToken cancellationToken = default) => CreateIndexAsync(selector.InvokeOrDefault(new CreateIndexRequestDescriptor(index)), cancellationToken);
		public DeleteIndexResponse DeleteIndex(IDeleteIndexRequest request) => DoRequest<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters);
		public Task<DeleteIndexResponse> DeleteIndexAsync(IDeleteIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteIndexRequest, DeleteIndexResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteIndexResponse DeleteIndex(Elastic.Clients.Elasticsearch.Indices indices, Func<DeleteIndexRequestDescriptor, IDeleteIndexRequest> selector = null) => DeleteIndex(selector.InvokeOrDefault(new DeleteIndexRequestDescriptor(indices)));
		public Task<DeleteIndexResponse> DeleteIndexAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<DeleteIndexRequestDescriptor, IDeleteIndexRequest> selector = null, CancellationToken cancellationToken = default) => DeleteIndexAsync(selector.InvokeOrDefault(new DeleteIndexRequestDescriptor(indices)), cancellationToken);
		public GetIndexResponse GetIndex(IGetIndexRequest request) => DoRequest<IGetIndexRequest, GetIndexResponse>(request, request.RequestParameters);
		public Task<GetIndexResponse> GetIndexAsync(IGetIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetIndexRequest, GetIndexResponse>(request, request.RequestParameters, cancellationToken);
		public GetIndexResponse GetIndex(Elastic.Clients.Elasticsearch.Indices indices, Func<GetIndexRequestDescriptor, IGetIndexRequest> selector = null) => GetIndex(selector.InvokeOrDefault(new GetIndexRequestDescriptor(indices)));
		public Task<GetIndexResponse> GetIndexAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<GetIndexRequestDescriptor, IGetIndexRequest> selector = null, CancellationToken cancellationToken = default) => GetIndexAsync(selector.InvokeOrDefault(new GetIndexRequestDescriptor(indices)), cancellationToken);
		public IndexClearCacheResponse IndexClearCache(IIndexClearCacheRequest request) => DoRequest<IIndexClearCacheRequest, IndexClearCacheResponse>(request, request.RequestParameters);
		public Task<IndexClearCacheResponse> IndexClearCacheAsync(IIndexClearCacheRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexClearCacheRequest, IndexClearCacheResponse>(request, request.RequestParameters, cancellationToken);
		public IndexClearCacheResponse IndexClearCache(Func<IndexClearCacheRequestDescriptor, IIndexClearCacheRequest> selector = null) => IndexClearCache(selector.InvokeOrDefault(new IndexClearCacheRequestDescriptor()));
		public Task<IndexClearCacheResponse> IndexClearCacheAsync(Func<IndexClearCacheRequestDescriptor, IIndexClearCacheRequest> selector = null, CancellationToken cancellationToken = default) => IndexClearCacheAsync(selector.InvokeOrDefault(new IndexClearCacheRequestDescriptor()), cancellationToken);
		public IndexCloneResponse IndexClone(IIndexCloneRequest request) => DoRequest<IIndexCloneRequest, IndexCloneResponse>(request, request.RequestParameters);
		public Task<IndexCloneResponse> IndexCloneAsync(IIndexCloneRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexCloneRequest, IndexCloneResponse>(request, request.RequestParameters, cancellationToken);
		public IndexCloneResponse IndexClone(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Func<IndexCloneRequestDescriptor, IIndexCloneRequest> selector = null) => IndexClone(selector.InvokeOrDefault(new IndexCloneRequestDescriptor(index, target)));
		public Task<IndexCloneResponse> IndexCloneAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Func<IndexCloneRequestDescriptor, IIndexCloneRequest> selector = null, CancellationToken cancellationToken = default) => IndexCloneAsync(selector.InvokeOrDefault(new IndexCloneRequestDescriptor(index, target)), cancellationToken);
		public IndexCloseResponse IndexClose(IIndexCloseRequest request) => DoRequest<IIndexCloseRequest, IndexCloseResponse>(request, request.RequestParameters);
		public Task<IndexCloseResponse> IndexCloseAsync(IIndexCloseRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexCloseRequest, IndexCloseResponse>(request, request.RequestParameters, cancellationToken);
		public IndexCloseResponse IndexClose(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexCloseRequestDescriptor, IIndexCloseRequest> selector = null) => IndexClose(selector.InvokeOrDefault(new IndexCloseRequestDescriptor(indices)));
		public Task<IndexCloseResponse> IndexCloseAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexCloseRequestDescriptor, IIndexCloseRequest> selector = null, CancellationToken cancellationToken = default) => IndexCloseAsync(selector.InvokeOrDefault(new IndexCloseRequestDescriptor(indices)), cancellationToken);
		public IndexCreateDataStreamResponse IndexCreateDataStream(IIndexCreateDataStreamRequest request) => DoRequest<IIndexCreateDataStreamRequest, IndexCreateDataStreamResponse>(request, request.RequestParameters);
		public Task<IndexCreateDataStreamResponse> IndexCreateDataStreamAsync(IIndexCreateDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexCreateDataStreamRequest, IndexCreateDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public IndexCreateDataStreamResponse IndexCreateDataStream(Elastic.Clients.Elasticsearch.DataStreamName name, Func<IndexCreateDataStreamRequestDescriptor, IIndexCreateDataStreamRequest> selector = null) => IndexCreateDataStream(selector.InvokeOrDefault(new IndexCreateDataStreamRequestDescriptor(name)));
		public Task<IndexCreateDataStreamResponse> IndexCreateDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamName name, Func<IndexCreateDataStreamRequestDescriptor, IIndexCreateDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => IndexCreateDataStreamAsync(selector.InvokeOrDefault(new IndexCreateDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexDataStreamsStatsResponse IndexDataStreamsStats(IIndexDataStreamsStatsRequest request) => DoRequest<IIndexDataStreamsStatsRequest, IndexDataStreamsStatsResponse>(request, request.RequestParameters);
		public Task<IndexDataStreamsStatsResponse> IndexDataStreamsStatsAsync(IIndexDataStreamsStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDataStreamsStatsRequest, IndexDataStreamsStatsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDataStreamsStatsResponse IndexDataStreamsStats(Func<IndexDataStreamsStatsRequestDescriptor, IIndexDataStreamsStatsRequest> selector = null) => IndexDataStreamsStats(selector.InvokeOrDefault(new IndexDataStreamsStatsRequestDescriptor()));
		public Task<IndexDataStreamsStatsResponse> IndexDataStreamsStatsAsync(Func<IndexDataStreamsStatsRequestDescriptor, IIndexDataStreamsStatsRequest> selector = null, CancellationToken cancellationToken = default) => IndexDataStreamsStatsAsync(selector.InvokeOrDefault(new IndexDataStreamsStatsRequestDescriptor()), cancellationToken);
		public IndexDeleteAliasResponse IndexDeleteAlias(IIndexDeleteAliasRequest request) => DoRequest<IIndexDeleteAliasRequest, IndexDeleteAliasResponse>(request, request.RequestParameters);
		public Task<IndexDeleteAliasResponse> IndexDeleteAliasAsync(IIndexDeleteAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDeleteAliasRequest, IndexDeleteAliasResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDeleteAliasResponse IndexDeleteAlias(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Names name, Func<IndexDeleteAliasRequestDescriptor, IIndexDeleteAliasRequest> selector = null) => IndexDeleteAlias(selector.InvokeOrDefault(new IndexDeleteAliasRequestDescriptor(indices, name)));
		public Task<IndexDeleteAliasResponse> IndexDeleteAliasAsync(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Names name, Func<IndexDeleteAliasRequestDescriptor, IIndexDeleteAliasRequest> selector = null, CancellationToken cancellationToken = default) => IndexDeleteAliasAsync(selector.InvokeOrDefault(new IndexDeleteAliasRequestDescriptor(indices, name)), cancellationToken);
		public IndexDeleteDataStreamResponse IndexDeleteDataStream(IIndexDeleteDataStreamRequest request) => DoRequest<IIndexDeleteDataStreamRequest, IndexDeleteDataStreamResponse>(request, request.RequestParameters);
		public Task<IndexDeleteDataStreamResponse> IndexDeleteDataStreamAsync(IIndexDeleteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDeleteDataStreamRequest, IndexDeleteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDeleteDataStreamResponse IndexDeleteDataStream(Elastic.Clients.Elasticsearch.DataStreamNames name, Func<IndexDeleteDataStreamRequestDescriptor, IIndexDeleteDataStreamRequest> selector = null) => IndexDeleteDataStream(selector.InvokeOrDefault(new IndexDeleteDataStreamRequestDescriptor(name)));
		public Task<IndexDeleteDataStreamResponse> IndexDeleteDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamNames name, Func<IndexDeleteDataStreamRequestDescriptor, IIndexDeleteDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => IndexDeleteDataStreamAsync(selector.InvokeOrDefault(new IndexDeleteDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexDeleteIndexTemplateResponse IndexDeleteIndexTemplate(IIndexDeleteIndexTemplateRequest request) => DoRequest<IIndexDeleteIndexTemplateRequest, IndexDeleteIndexTemplateResponse>(request, request.RequestParameters);
		public Task<IndexDeleteIndexTemplateResponse> IndexDeleteIndexTemplateAsync(IIndexDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDeleteIndexTemplateRequest, IndexDeleteIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDeleteIndexTemplateResponse IndexDeleteIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexDeleteIndexTemplateRequestDescriptor, IIndexDeleteIndexTemplateRequest> selector = null) => IndexDeleteIndexTemplate(selector.InvokeOrDefault(new IndexDeleteIndexTemplateRequestDescriptor(name)));
		public Task<IndexDeleteIndexTemplateResponse> IndexDeleteIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexDeleteIndexTemplateRequestDescriptor, IIndexDeleteIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexDeleteIndexTemplateAsync(selector.InvokeOrDefault(new IndexDeleteIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexDeleteTemplateResponse IndexDeleteTemplate(IIndexDeleteTemplateRequest request) => DoRequest<IIndexDeleteTemplateRequest, IndexDeleteTemplateResponse>(request, request.RequestParameters);
		public Task<IndexDeleteTemplateResponse> IndexDeleteTemplateAsync(IIndexDeleteTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDeleteTemplateRequest, IndexDeleteTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDeleteTemplateResponse IndexDeleteTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexDeleteTemplateRequestDescriptor, IIndexDeleteTemplateRequest> selector = null) => IndexDeleteTemplate(selector.InvokeOrDefault(new IndexDeleteTemplateRequestDescriptor(name)));
		public Task<IndexDeleteTemplateResponse> IndexDeleteTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexDeleteTemplateRequestDescriptor, IIndexDeleteTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexDeleteTemplateAsync(selector.InvokeOrDefault(new IndexDeleteTemplateRequestDescriptor(name)), cancellationToken);
		public IndexDiskUsageResponse IndexDiskUsage(IIndexDiskUsageRequest request) => DoRequest<IIndexDiskUsageRequest, IndexDiskUsageResponse>(request, request.RequestParameters);
		public Task<IndexDiskUsageResponse> IndexDiskUsageAsync(IIndexDiskUsageRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexDiskUsageRequest, IndexDiskUsageResponse>(request, request.RequestParameters, cancellationToken);
		public IndexDiskUsageResponse IndexDiskUsage(Elastic.Clients.Elasticsearch.IndexName index, Func<IndexDiskUsageRequestDescriptor, IIndexDiskUsageRequest> selector = null) => IndexDiskUsage(selector.InvokeOrDefault(new IndexDiskUsageRequestDescriptor(index)));
		public Task<IndexDiskUsageResponse> IndexDiskUsageAsync(Elastic.Clients.Elasticsearch.IndexName index, Func<IndexDiskUsageRequestDescriptor, IIndexDiskUsageRequest> selector = null, CancellationToken cancellationToken = default) => IndexDiskUsageAsync(selector.InvokeOrDefault(new IndexDiskUsageRequestDescriptor(index)), cancellationToken);
		public IndexExistsAliasResponse IndexExistsAlias(IIndexExistsAliasRequest request) => DoRequest<IIndexExistsAliasRequest, IndexExistsAliasResponse>(request, request.RequestParameters);
		public Task<IndexExistsAliasResponse> IndexExistsAliasAsync(IIndexExistsAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexExistsAliasRequest, IndexExistsAliasResponse>(request, request.RequestParameters, cancellationToken);
		public IndexExistsAliasResponse IndexExistsAlias(Elastic.Clients.Elasticsearch.Names name, Func<IndexExistsAliasRequestDescriptor, IIndexExistsAliasRequest> selector = null) => IndexExistsAlias(selector.InvokeOrDefault(new IndexExistsAliasRequestDescriptor(name)));
		public Task<IndexExistsAliasResponse> IndexExistsAliasAsync(Elastic.Clients.Elasticsearch.Names name, Func<IndexExistsAliasRequestDescriptor, IIndexExistsAliasRequest> selector = null, CancellationToken cancellationToken = default) => IndexExistsAliasAsync(selector.InvokeOrDefault(new IndexExistsAliasRequestDescriptor(name)), cancellationToken);
		public IndexExistsIndexTemplateResponse IndexExistsIndexTemplate(IIndexExistsIndexTemplateRequest request) => DoRequest<IIndexExistsIndexTemplateRequest, IndexExistsIndexTemplateResponse>(request, request.RequestParameters);
		public Task<IndexExistsIndexTemplateResponse> IndexExistsIndexTemplateAsync(IIndexExistsIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexExistsIndexTemplateRequest, IndexExistsIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexExistsIndexTemplateResponse IndexExistsIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexExistsIndexTemplateRequestDescriptor, IIndexExistsIndexTemplateRequest> selector = null) => IndexExistsIndexTemplate(selector.InvokeOrDefault(new IndexExistsIndexTemplateRequestDescriptor(name)));
		public Task<IndexExistsIndexTemplateResponse> IndexExistsIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexExistsIndexTemplateRequestDescriptor, IIndexExistsIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexExistsIndexTemplateAsync(selector.InvokeOrDefault(new IndexExistsIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexExistsResponse IndexExists(IIndexExistsRequest request) => DoRequest<IIndexExistsRequest, IndexExistsResponse>(request, request.RequestParameters);
		public Task<IndexExistsResponse> IndexExistsAsync(IIndexExistsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexExistsRequest, IndexExistsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexExistsResponse IndexExists(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexExistsRequestDescriptor, IIndexExistsRequest> selector = null) => IndexExists(selector.InvokeOrDefault(new IndexExistsRequestDescriptor(indices)));
		public Task<IndexExistsResponse> IndexExistsAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexExistsRequestDescriptor, IIndexExistsRequest> selector = null, CancellationToken cancellationToken = default) => IndexExistsAsync(selector.InvokeOrDefault(new IndexExistsRequestDescriptor(indices)), cancellationToken);
		public IndexExistsTemplateResponse IndexExistsTemplate(IIndexExistsTemplateRequest request) => DoRequest<IIndexExistsTemplateRequest, IndexExistsTemplateResponse>(request, request.RequestParameters);
		public Task<IndexExistsTemplateResponse> IndexExistsTemplateAsync(IIndexExistsTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexExistsTemplateRequest, IndexExistsTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexExistsTemplateResponse IndexExistsTemplate(Elastic.Clients.Elasticsearch.Names name, Func<IndexExistsTemplateRequestDescriptor, IIndexExistsTemplateRequest> selector = null) => IndexExistsTemplate(selector.InvokeOrDefault(new IndexExistsTemplateRequestDescriptor(name)));
		public Task<IndexExistsTemplateResponse> IndexExistsTemplateAsync(Elastic.Clients.Elasticsearch.Names name, Func<IndexExistsTemplateRequestDescriptor, IIndexExistsTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexExistsTemplateAsync(selector.InvokeOrDefault(new IndexExistsTemplateRequestDescriptor(name)), cancellationToken);
		public IndexFlushResponse IndexFlush(IIndexFlushRequest request) => DoRequest<IIndexFlushRequest, IndexFlushResponse>(request, request.RequestParameters);
		public Task<IndexFlushResponse> IndexFlushAsync(IIndexFlushRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexFlushRequest, IndexFlushResponse>(request, request.RequestParameters, cancellationToken);
		public IndexFlushResponse IndexFlush(Func<IndexFlushRequestDescriptor, IIndexFlushRequest> selector = null) => IndexFlush(selector.InvokeOrDefault(new IndexFlushRequestDescriptor()));
		public Task<IndexFlushResponse> IndexFlushAsync(Func<IndexFlushRequestDescriptor, IIndexFlushRequest> selector = null, CancellationToken cancellationToken = default) => IndexFlushAsync(selector.InvokeOrDefault(new IndexFlushRequestDescriptor()), cancellationToken);
		public IndexForcemergeResponse IndexForcemerge(IIndexForcemergeRequest request) => DoRequest<IIndexForcemergeRequest, IndexForcemergeResponse>(request, request.RequestParameters);
		public Task<IndexForcemergeResponse> IndexForcemergeAsync(IIndexForcemergeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexForcemergeRequest, IndexForcemergeResponse>(request, request.RequestParameters, cancellationToken);
		public IndexForcemergeResponse IndexForcemerge(Func<IndexForcemergeRequestDescriptor, IIndexForcemergeRequest> selector = null) => IndexForcemerge(selector.InvokeOrDefault(new IndexForcemergeRequestDescriptor()));
		public Task<IndexForcemergeResponse> IndexForcemergeAsync(Func<IndexForcemergeRequestDescriptor, IIndexForcemergeRequest> selector = null, CancellationToken cancellationToken = default) => IndexForcemergeAsync(selector.InvokeOrDefault(new IndexForcemergeRequestDescriptor()), cancellationToken);
		public IndexGetAliasResponse IndexGetAlias(IIndexGetAliasRequest request) => DoRequest<IIndexGetAliasRequest, IndexGetAliasResponse>(request, request.RequestParameters);
		public Task<IndexGetAliasResponse> IndexGetAliasAsync(IIndexGetAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetAliasRequest, IndexGetAliasResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetAliasResponse IndexGetAlias(Func<IndexGetAliasRequestDescriptor, IIndexGetAliasRequest> selector = null) => IndexGetAlias(selector.InvokeOrDefault(new IndexGetAliasRequestDescriptor()));
		public Task<IndexGetAliasResponse> IndexGetAliasAsync(Func<IndexGetAliasRequestDescriptor, IIndexGetAliasRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetAliasAsync(selector.InvokeOrDefault(new IndexGetAliasRequestDescriptor()), cancellationToken);
		public IndexGetDataStreamResponse IndexGetDataStream(IIndexGetDataStreamRequest request) => DoRequest<IIndexGetDataStreamRequest, IndexGetDataStreamResponse>(request, request.RequestParameters);
		public Task<IndexGetDataStreamResponse> IndexGetDataStreamAsync(IIndexGetDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetDataStreamRequest, IndexGetDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetDataStreamResponse IndexGetDataStream(Func<IndexGetDataStreamRequestDescriptor, IIndexGetDataStreamRequest> selector = null) => IndexGetDataStream(selector.InvokeOrDefault(new IndexGetDataStreamRequestDescriptor()));
		public Task<IndexGetDataStreamResponse> IndexGetDataStreamAsync(Func<IndexGetDataStreamRequestDescriptor, IIndexGetDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetDataStreamAsync(selector.InvokeOrDefault(new IndexGetDataStreamRequestDescriptor()), cancellationToken);
		public IndexGetFieldMappingResponse IndexGetFieldMapping(IIndexGetFieldMappingRequest request) => DoRequest<IIndexGetFieldMappingRequest, IndexGetFieldMappingResponse>(request, request.RequestParameters);
		public Task<IndexGetFieldMappingResponse> IndexGetFieldMappingAsync(IIndexGetFieldMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetFieldMappingRequest, IndexGetFieldMappingResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetFieldMappingResponse IndexGetFieldMapping(Elastic.Clients.Elasticsearch.Fields fields, Func<IndexGetFieldMappingRequestDescriptor, IIndexGetFieldMappingRequest> selector = null) => IndexGetFieldMapping(selector.InvokeOrDefault(new IndexGetFieldMappingRequestDescriptor(fields)));
		public Task<IndexGetFieldMappingResponse> IndexGetFieldMappingAsync(Elastic.Clients.Elasticsearch.Fields fields, Func<IndexGetFieldMappingRequestDescriptor, IIndexGetFieldMappingRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetFieldMappingAsync(selector.InvokeOrDefault(new IndexGetFieldMappingRequestDescriptor(fields)), cancellationToken);
		public IndexGetIndexTemplateResponse IndexGetIndexTemplate(IIndexGetIndexTemplateRequest request) => DoRequest<IIndexGetIndexTemplateRequest, IndexGetIndexTemplateResponse>(request, request.RequestParameters);
		public Task<IndexGetIndexTemplateResponse> IndexGetIndexTemplateAsync(IIndexGetIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetIndexTemplateRequest, IndexGetIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetIndexTemplateResponse IndexGetIndexTemplate(Func<IndexGetIndexTemplateRequestDescriptor, IIndexGetIndexTemplateRequest> selector = null) => IndexGetIndexTemplate(selector.InvokeOrDefault(new IndexGetIndexTemplateRequestDescriptor()));
		public Task<IndexGetIndexTemplateResponse> IndexGetIndexTemplateAsync(Func<IndexGetIndexTemplateRequestDescriptor, IIndexGetIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetIndexTemplateAsync(selector.InvokeOrDefault(new IndexGetIndexTemplateRequestDescriptor()), cancellationToken);
		public IndexGetMappingResponse IndexGetMapping(IIndexGetMappingRequest request) => DoRequest<IIndexGetMappingRequest, IndexGetMappingResponse>(request, request.RequestParameters);
		public Task<IndexGetMappingResponse> IndexGetMappingAsync(IIndexGetMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetMappingRequest, IndexGetMappingResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetMappingResponse IndexGetMapping(Func<IndexGetMappingRequestDescriptor, IIndexGetMappingRequest> selector = null) => IndexGetMapping(selector.InvokeOrDefault(new IndexGetMappingRequestDescriptor()));
		public Task<IndexGetMappingResponse> IndexGetMappingAsync(Func<IndexGetMappingRequestDescriptor, IIndexGetMappingRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetMappingAsync(selector.InvokeOrDefault(new IndexGetMappingRequestDescriptor()), cancellationToken);
		public IndexGetSettingsResponse IndexGetSettings(IIndexGetSettingsRequest request) => DoRequest<IIndexGetSettingsRequest, IndexGetSettingsResponse>(request, request.RequestParameters);
		public Task<IndexGetSettingsResponse> IndexGetSettingsAsync(IIndexGetSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetSettingsRequest, IndexGetSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetSettingsResponse IndexGetSettings(Func<IndexGetSettingsRequestDescriptor, IIndexGetSettingsRequest> selector = null) => IndexGetSettings(selector.InvokeOrDefault(new IndexGetSettingsRequestDescriptor()));
		public Task<IndexGetSettingsResponse> IndexGetSettingsAsync(Func<IndexGetSettingsRequestDescriptor, IIndexGetSettingsRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetSettingsAsync(selector.InvokeOrDefault(new IndexGetSettingsRequestDescriptor()), cancellationToken);
		public IndexGetTemplateResponse IndexGetTemplate(IIndexGetTemplateRequest request) => DoRequest<IIndexGetTemplateRequest, IndexGetTemplateResponse>(request, request.RequestParameters);
		public Task<IndexGetTemplateResponse> IndexGetTemplateAsync(IIndexGetTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexGetTemplateRequest, IndexGetTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexGetTemplateResponse IndexGetTemplate(Func<IndexGetTemplateRequestDescriptor, IIndexGetTemplateRequest> selector = null) => IndexGetTemplate(selector.InvokeOrDefault(new IndexGetTemplateRequestDescriptor()));
		public Task<IndexGetTemplateResponse> IndexGetTemplateAsync(Func<IndexGetTemplateRequestDescriptor, IIndexGetTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexGetTemplateAsync(selector.InvokeOrDefault(new IndexGetTemplateRequestDescriptor()), cancellationToken);
		public IndexMigrateToDataStreamResponse IndexMigrateToDataStream(IIndexMigrateToDataStreamRequest request) => DoRequest<IIndexMigrateToDataStreamRequest, IndexMigrateToDataStreamResponse>(request, request.RequestParameters);
		public Task<IndexMigrateToDataStreamResponse> IndexMigrateToDataStreamAsync(IIndexMigrateToDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexMigrateToDataStreamRequest, IndexMigrateToDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public IndexMigrateToDataStreamResponse IndexMigrateToDataStream(Elastic.Clients.Elasticsearch.IndexName name, Func<IndexMigrateToDataStreamRequestDescriptor, IIndexMigrateToDataStreamRequest> selector = null) => IndexMigrateToDataStream(selector.InvokeOrDefault(new IndexMigrateToDataStreamRequestDescriptor(name)));
		public Task<IndexMigrateToDataStreamResponse> IndexMigrateToDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Func<IndexMigrateToDataStreamRequestDescriptor, IIndexMigrateToDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => IndexMigrateToDataStreamAsync(selector.InvokeOrDefault(new IndexMigrateToDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexOpenResponse IndexOpen(IIndexOpenRequest request) => DoRequest<IIndexOpenRequest, IndexOpenResponse>(request, request.RequestParameters);
		public Task<IndexOpenResponse> IndexOpenAsync(IIndexOpenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexOpenRequest, IndexOpenResponse>(request, request.RequestParameters, cancellationToken);
		public IndexOpenResponse IndexOpen(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexOpenRequestDescriptor, IIndexOpenRequest> selector = null) => IndexOpen(selector.InvokeOrDefault(new IndexOpenRequestDescriptor(indices)));
		public Task<IndexOpenResponse> IndexOpenAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexOpenRequestDescriptor, IIndexOpenRequest> selector = null, CancellationToken cancellationToken = default) => IndexOpenAsync(selector.InvokeOrDefault(new IndexOpenRequestDescriptor(indices)), cancellationToken);
		public IndexPromoteDataStreamResponse IndexPromoteDataStream(IIndexPromoteDataStreamRequest request) => DoRequest<IIndexPromoteDataStreamRequest, IndexPromoteDataStreamResponse>(request, request.RequestParameters);
		public Task<IndexPromoteDataStreamResponse> IndexPromoteDataStreamAsync(IIndexPromoteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPromoteDataStreamRequest, IndexPromoteDataStreamResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPromoteDataStreamResponse IndexPromoteDataStream(Elastic.Clients.Elasticsearch.IndexName name, Func<IndexPromoteDataStreamRequestDescriptor, IIndexPromoteDataStreamRequest> selector = null) => IndexPromoteDataStream(selector.InvokeOrDefault(new IndexPromoteDataStreamRequestDescriptor(name)));
		public Task<IndexPromoteDataStreamResponse> IndexPromoteDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Func<IndexPromoteDataStreamRequestDescriptor, IIndexPromoteDataStreamRequest> selector = null, CancellationToken cancellationToken = default) => IndexPromoteDataStreamAsync(selector.InvokeOrDefault(new IndexPromoteDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexPutAliasResponse IndexPutAlias(IIndexPutAliasRequest request) => DoRequest<IIndexPutAliasRequest, IndexPutAliasResponse>(request, request.RequestParameters);
		public Task<IndexPutAliasResponse> IndexPutAliasAsync(IIndexPutAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPutAliasRequest, IndexPutAliasResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPutAliasResponse IndexPutAlias(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Name name, Func<IndexPutAliasRequestDescriptor, IIndexPutAliasRequest> selector = null) => IndexPutAlias(selector.InvokeOrDefault(new IndexPutAliasRequestDescriptor(indices, name)));
		public Task<IndexPutAliasResponse> IndexPutAliasAsync(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Name name, Func<IndexPutAliasRequestDescriptor, IIndexPutAliasRequest> selector = null, CancellationToken cancellationToken = default) => IndexPutAliasAsync(selector.InvokeOrDefault(new IndexPutAliasRequestDescriptor(indices, name)), cancellationToken);
		public IndexPutIndexTemplateResponse IndexPutIndexTemplate(IIndexPutIndexTemplateRequest request) => DoRequest<IIndexPutIndexTemplateRequest, IndexPutIndexTemplateResponse>(request, request.RequestParameters);
		public Task<IndexPutIndexTemplateResponse> IndexPutIndexTemplateAsync(IIndexPutIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPutIndexTemplateRequest, IndexPutIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPutIndexTemplateResponse IndexPutIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexPutIndexTemplateRequestDescriptor, IIndexPutIndexTemplateRequest> selector = null) => IndexPutIndexTemplate(selector.InvokeOrDefault(new IndexPutIndexTemplateRequestDescriptor(name)));
		public Task<IndexPutIndexTemplateResponse> IndexPutIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexPutIndexTemplateRequestDescriptor, IIndexPutIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexPutIndexTemplateAsync(selector.InvokeOrDefault(new IndexPutIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexPutMappingResponse IndexPutMapping(IIndexPutMappingRequest request) => DoRequest<IIndexPutMappingRequest, IndexPutMappingResponse>(request, request.RequestParameters);
		public Task<IndexPutMappingResponse> IndexPutMappingAsync(IIndexPutMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPutMappingRequest, IndexPutMappingResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPutMappingResponse IndexPutMapping(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexPutMappingRequestDescriptor, IIndexPutMappingRequest> selector = null) => IndexPutMapping(selector.InvokeOrDefault(new IndexPutMappingRequestDescriptor(indices)));
		public Task<IndexPutMappingResponse> IndexPutMappingAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexPutMappingRequestDescriptor, IIndexPutMappingRequest> selector = null, CancellationToken cancellationToken = default) => IndexPutMappingAsync(selector.InvokeOrDefault(new IndexPutMappingRequestDescriptor(indices)), cancellationToken);
		public IndexPutSettingsResponse IndexPutSettings(IIndexPutSettingsRequest request) => DoRequest<IIndexPutSettingsRequest, IndexPutSettingsResponse>(request, request.RequestParameters);
		public Task<IndexPutSettingsResponse> IndexPutSettingsAsync(IIndexPutSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPutSettingsRequest, IndexPutSettingsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPutSettingsResponse IndexPutSettings(Func<IndexPutSettingsRequestDescriptor, IIndexPutSettingsRequest> selector = null) => IndexPutSettings(selector.InvokeOrDefault(new IndexPutSettingsRequestDescriptor()));
		public Task<IndexPutSettingsResponse> IndexPutSettingsAsync(Func<IndexPutSettingsRequestDescriptor, IIndexPutSettingsRequest> selector = null, CancellationToken cancellationToken = default) => IndexPutSettingsAsync(selector.InvokeOrDefault(new IndexPutSettingsRequestDescriptor()), cancellationToken);
		public IndexPutTemplateResponse IndexPutTemplate(IIndexPutTemplateRequest request) => DoRequest<IIndexPutTemplateRequest, IndexPutTemplateResponse>(request, request.RequestParameters);
		public Task<IndexPutTemplateResponse> IndexPutTemplateAsync(IIndexPutTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexPutTemplateRequest, IndexPutTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexPutTemplateResponse IndexPutTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexPutTemplateRequestDescriptor, IIndexPutTemplateRequest> selector = null) => IndexPutTemplate(selector.InvokeOrDefault(new IndexPutTemplateRequestDescriptor(name)));
		public Task<IndexPutTemplateResponse> IndexPutTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexPutTemplateRequestDescriptor, IIndexPutTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexPutTemplateAsync(selector.InvokeOrDefault(new IndexPutTemplateRequestDescriptor(name)), cancellationToken);
		public IndexRecoveryResponse IndexRecovery(IIndexRecoveryRequest request) => DoRequest<IIndexRecoveryRequest, IndexRecoveryResponse>(request, request.RequestParameters);
		public Task<IndexRecoveryResponse> IndexRecoveryAsync(IIndexRecoveryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexRecoveryRequest, IndexRecoveryResponse>(request, request.RequestParameters, cancellationToken);
		public IndexRecoveryResponse IndexRecovery(Func<IndexRecoveryRequestDescriptor, IIndexRecoveryRequest> selector = null) => IndexRecovery(selector.InvokeOrDefault(new IndexRecoveryRequestDescriptor()));
		public Task<IndexRecoveryResponse> IndexRecoveryAsync(Func<IndexRecoveryRequestDescriptor, IIndexRecoveryRequest> selector = null, CancellationToken cancellationToken = default) => IndexRecoveryAsync(selector.InvokeOrDefault(new IndexRecoveryRequestDescriptor()), cancellationToken);
		public IndexRefreshResponse IndexRefresh(IIndexRefreshRequest request) => DoRequest<IIndexRefreshRequest, IndexRefreshResponse>(request, request.RequestParameters);
		public Task<IndexRefreshResponse> IndexRefreshAsync(IIndexRefreshRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexRefreshRequest, IndexRefreshResponse>(request, request.RequestParameters, cancellationToken);
		public IndexRefreshResponse IndexRefresh(Func<IndexRefreshRequestDescriptor, IIndexRefreshRequest> selector = null) => IndexRefresh(selector.InvokeOrDefault(new IndexRefreshRequestDescriptor()));
		public Task<IndexRefreshResponse> IndexRefreshAsync(Func<IndexRefreshRequestDescriptor, IIndexRefreshRequest> selector = null, CancellationToken cancellationToken = default) => IndexRefreshAsync(selector.InvokeOrDefault(new IndexRefreshRequestDescriptor()), cancellationToken);
		public IndexReloadSearchAnalyzersResponse IndexReloadSearchAnalyzers(IIndexReloadSearchAnalyzersRequest request) => DoRequest<IIndexReloadSearchAnalyzersRequest, IndexReloadSearchAnalyzersResponse>(request, request.RequestParameters);
		public Task<IndexReloadSearchAnalyzersResponse> IndexReloadSearchAnalyzersAsync(IIndexReloadSearchAnalyzersRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexReloadSearchAnalyzersRequest, IndexReloadSearchAnalyzersResponse>(request, request.RequestParameters, cancellationToken);
		public IndexReloadSearchAnalyzersResponse IndexReloadSearchAnalyzers(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexReloadSearchAnalyzersRequestDescriptor, IIndexReloadSearchAnalyzersRequest> selector = null) => IndexReloadSearchAnalyzers(selector.InvokeOrDefault(new IndexReloadSearchAnalyzersRequestDescriptor(indices)));
		public Task<IndexReloadSearchAnalyzersResponse> IndexReloadSearchAnalyzersAsync(Elastic.Clients.Elasticsearch.Indices indices, Func<IndexReloadSearchAnalyzersRequestDescriptor, IIndexReloadSearchAnalyzersRequest> selector = null, CancellationToken cancellationToken = default) => IndexReloadSearchAnalyzersAsync(selector.InvokeOrDefault(new IndexReloadSearchAnalyzersRequestDescriptor(indices)), cancellationToken);
		public IndexResolveIndexResponse IndexResolveIndex(IIndexResolveIndexRequest request) => DoRequest<IIndexResolveIndexRequest, IndexResolveIndexResponse>(request, request.RequestParameters);
		public Task<IndexResolveIndexResponse> IndexResolveIndexAsync(IIndexResolveIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexResolveIndexRequest, IndexResolveIndexResponse>(request, request.RequestParameters, cancellationToken);
		public IndexResolveIndexResponse IndexResolveIndex(Elastic.Clients.Elasticsearch.Names name, Func<IndexResolveIndexRequestDescriptor, IIndexResolveIndexRequest> selector = null) => IndexResolveIndex(selector.InvokeOrDefault(new IndexResolveIndexRequestDescriptor(name)));
		public Task<IndexResolveIndexResponse> IndexResolveIndexAsync(Elastic.Clients.Elasticsearch.Names name, Func<IndexResolveIndexRequestDescriptor, IIndexResolveIndexRequest> selector = null, CancellationToken cancellationToken = default) => IndexResolveIndexAsync(selector.InvokeOrDefault(new IndexResolveIndexRequestDescriptor(name)), cancellationToken);
		public IndexRolloverResponse IndexRollover(IIndexRolloverRequest request) => DoRequest<IIndexRolloverRequest, IndexRolloverResponse>(request, request.RequestParameters);
		public Task<IndexRolloverResponse> IndexRolloverAsync(IIndexRolloverRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexRolloverRequest, IndexRolloverResponse>(request, request.RequestParameters, cancellationToken);
		public IndexRolloverResponse IndexRollover(Elastic.Clients.Elasticsearch.IndexAlias alias, Func<IndexRolloverRequestDescriptor, IIndexRolloverRequest> selector = null) => IndexRollover(selector.InvokeOrDefault(new IndexRolloverRequestDescriptor(alias)));
		public Task<IndexRolloverResponse> IndexRolloverAsync(Elastic.Clients.Elasticsearch.IndexAlias alias, Func<IndexRolloverRequestDescriptor, IIndexRolloverRequest> selector = null, CancellationToken cancellationToken = default) => IndexRolloverAsync(selector.InvokeOrDefault(new IndexRolloverRequestDescriptor(alias)), cancellationToken);
		public IndexSegmentsResponse IndexSegments(IIndexSegmentsRequest request) => DoRequest<IIndexSegmentsRequest, IndexSegmentsResponse>(request, request.RequestParameters);
		public Task<IndexSegmentsResponse> IndexSegmentsAsync(IIndexSegmentsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexSegmentsRequest, IndexSegmentsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexSegmentsResponse IndexSegments(Func<IndexSegmentsRequestDescriptor, IIndexSegmentsRequest> selector = null) => IndexSegments(selector.InvokeOrDefault(new IndexSegmentsRequestDescriptor()));
		public Task<IndexSegmentsResponse> IndexSegmentsAsync(Func<IndexSegmentsRequestDescriptor, IIndexSegmentsRequest> selector = null, CancellationToken cancellationToken = default) => IndexSegmentsAsync(selector.InvokeOrDefault(new IndexSegmentsRequestDescriptor()), cancellationToken);
		public IndexShardStoresResponse IndexShardStores(IIndexShardStoresRequest request) => DoRequest<IIndexShardStoresRequest, IndexShardStoresResponse>(request, request.RequestParameters);
		public Task<IndexShardStoresResponse> IndexShardStoresAsync(IIndexShardStoresRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexShardStoresRequest, IndexShardStoresResponse>(request, request.RequestParameters, cancellationToken);
		public IndexShardStoresResponse IndexShardStores(Func<IndexShardStoresRequestDescriptor, IIndexShardStoresRequest> selector = null) => IndexShardStores(selector.InvokeOrDefault(new IndexShardStoresRequestDescriptor()));
		public Task<IndexShardStoresResponse> IndexShardStoresAsync(Func<IndexShardStoresRequestDescriptor, IIndexShardStoresRequest> selector = null, CancellationToken cancellationToken = default) => IndexShardStoresAsync(selector.InvokeOrDefault(new IndexShardStoresRequestDescriptor()), cancellationToken);
		public IndexSimulateIndexTemplateResponse IndexSimulateIndexTemplate(IIndexSimulateIndexTemplateRequest request) => DoRequest<IIndexSimulateIndexTemplateRequest, IndexSimulateIndexTemplateResponse>(request, request.RequestParameters);
		public Task<IndexSimulateIndexTemplateResponse> IndexSimulateIndexTemplateAsync(IIndexSimulateIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexSimulateIndexTemplateRequest, IndexSimulateIndexTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexSimulateIndexTemplateResponse IndexSimulateIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Func<IndexSimulateIndexTemplateRequestDescriptor, IIndexSimulateIndexTemplateRequest> selector = null) => IndexSimulateIndexTemplate(selector.InvokeOrDefault(new IndexSimulateIndexTemplateRequestDescriptor(name)));
		public Task<IndexSimulateIndexTemplateResponse> IndexSimulateIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Func<IndexSimulateIndexTemplateRequestDescriptor, IIndexSimulateIndexTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexSimulateIndexTemplateAsync(selector.InvokeOrDefault(new IndexSimulateIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexSimulateTemplateResponse IndexSimulateTemplate(IIndexSimulateTemplateRequest request) => DoRequest<IIndexSimulateTemplateRequest, IndexSimulateTemplateResponse>(request, request.RequestParameters);
		public Task<IndexSimulateTemplateResponse> IndexSimulateTemplateAsync(IIndexSimulateTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexSimulateTemplateRequest, IndexSimulateTemplateResponse>(request, request.RequestParameters, cancellationToken);
		public IndexSimulateTemplateResponse IndexSimulateTemplate(Func<IndexSimulateTemplateRequestDescriptor, IIndexSimulateTemplateRequest> selector = null) => IndexSimulateTemplate(selector.InvokeOrDefault(new IndexSimulateTemplateRequestDescriptor()));
		public Task<IndexSimulateTemplateResponse> IndexSimulateTemplateAsync(Func<IndexSimulateTemplateRequestDescriptor, IIndexSimulateTemplateRequest> selector = null, CancellationToken cancellationToken = default) => IndexSimulateTemplateAsync(selector.InvokeOrDefault(new IndexSimulateTemplateRequestDescriptor()), cancellationToken);
		public IndexStatsResponse IndexStats(IIndexStatsRequest request) => DoRequest<IIndexStatsRequest, IndexStatsResponse>(request, request.RequestParameters);
		public Task<IndexStatsResponse> IndexStatsAsync(IIndexStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexStatsRequest, IndexStatsResponse>(request, request.RequestParameters, cancellationToken);
		public IndexStatsResponse IndexStats(Func<IndexStatsRequestDescriptor, IIndexStatsRequest> selector = null) => IndexStats(selector.InvokeOrDefault(new IndexStatsRequestDescriptor()));
		public Task<IndexStatsResponse> IndexStatsAsync(Func<IndexStatsRequestDescriptor, IIndexStatsRequest> selector = null, CancellationToken cancellationToken = default) => IndexStatsAsync(selector.InvokeOrDefault(new IndexStatsRequestDescriptor()), cancellationToken);
		public IndexUpdateAliasesResponse IndexUpdateAliases(IIndexUpdateAliasesRequest request) => DoRequest<IIndexUpdateAliasesRequest, IndexUpdateAliasesResponse>(request, request.RequestParameters);
		public Task<IndexUpdateAliasesResponse> IndexUpdateAliasesAsync(IIndexUpdateAliasesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexUpdateAliasesRequest, IndexUpdateAliasesResponse>(request, request.RequestParameters, cancellationToken);
		public IndexUpdateAliasesResponse IndexUpdateAliases(Func<IndexUpdateAliasesRequestDescriptor, IIndexUpdateAliasesRequest> selector = null) => IndexUpdateAliases(selector.InvokeOrDefault(new IndexUpdateAliasesRequestDescriptor()));
		public Task<IndexUpdateAliasesResponse> IndexUpdateAliasesAsync(Func<IndexUpdateAliasesRequestDescriptor, IIndexUpdateAliasesRequest> selector = null, CancellationToken cancellationToken = default) => IndexUpdateAliasesAsync(selector.InvokeOrDefault(new IndexUpdateAliasesRequestDescriptor()), cancellationToken);
		public IndexValidateQueryResponse IndexValidateQuery(IIndexValidateQueryRequest request) => DoRequest<IIndexValidateQueryRequest, IndexValidateQueryResponse>(request, request.RequestParameters);
		public Task<IndexValidateQueryResponse> IndexValidateQueryAsync(IIndexValidateQueryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IIndexValidateQueryRequest, IndexValidateQueryResponse>(request, request.RequestParameters, cancellationToken);
		public IndexValidateQueryResponse IndexValidateQuery(Func<IndexValidateQueryRequestDescriptor, IIndexValidateQueryRequest> selector = null) => IndexValidateQuery(selector.InvokeOrDefault(new IndexValidateQueryRequestDescriptor()));
		public Task<IndexValidateQueryResponse> IndexValidateQueryAsync(Func<IndexValidateQueryRequestDescriptor, IIndexValidateQueryRequest> selector = null, CancellationToken cancellationToken = default) => IndexValidateQueryAsync(selector.InvokeOrDefault(new IndexValidateQueryRequestDescriptor()), cancellationToken);
		public ShrinkIndexResponse ShrinkIndex(IShrinkIndexRequest request) => DoRequest<IShrinkIndexRequest, ShrinkIndexResponse>(request, request.RequestParameters);
		public Task<ShrinkIndexResponse> ShrinkIndexAsync(IShrinkIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IShrinkIndexRequest, ShrinkIndexResponse>(request, request.RequestParameters, cancellationToken);
		public ShrinkIndexResponse ShrinkIndex(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<ShrinkIndexRequestDescriptor, IShrinkIndexRequest> selector = null) => ShrinkIndex(selector.InvokeOrDefault(new ShrinkIndexRequestDescriptor(index, target)));
		public Task<ShrinkIndexResponse> ShrinkIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<ShrinkIndexRequestDescriptor, IShrinkIndexRequest> selector = null, CancellationToken cancellationToken = default) => ShrinkIndexAsync(selector.InvokeOrDefault(new ShrinkIndexRequestDescriptor(index, target)), cancellationToken);
		public SplitIndexResponse SplitIndex(ISplitIndexRequest request) => DoRequest<ISplitIndexRequest, SplitIndexResponse>(request, request.RequestParameters);
		public Task<SplitIndexResponse> SplitIndexAsync(ISplitIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISplitIndexRequest, SplitIndexResponse>(request, request.RequestParameters, cancellationToken);
		public SplitIndexResponse SplitIndex(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<SplitIndexRequestDescriptor, ISplitIndexRequest> selector = null) => SplitIndex(selector.InvokeOrDefault(new SplitIndexRequestDescriptor(index, target)));
		public Task<SplitIndexResponse> SplitIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Func<SplitIndexRequestDescriptor, ISplitIndexRequest> selector = null, CancellationToken cancellationToken = default) => SplitIndexAsync(selector.InvokeOrDefault(new SplitIndexRequestDescriptor(index, target)), cancellationToken);
	}
}