// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.IndexManagement
{
	public class IndexManagementNamespace : NamespacedClientProxy
	{
		internal IndexManagementNamespace(ElasticClient client) : base(client)
		{
		}

		public AnalyzeIndexResponse AnalyzeIndex(AnalyzeIndexRequest request) => DoRequest<AnalyzeIndexRequest, AnalyzeIndexResponse>(request);
		public Task<AnalyzeIndexResponse> AnalyzeIndexAsync(AnalyzeIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<AnalyzeIndexRequest, AnalyzeIndexResponse>(request, cancellationToken);
		public AnalyzeIndexResponse AnalyzeIndex(Action<AnalyzeIndexRequestDescriptor> configureRequest = null)
		{
			var descriptor = new AnalyzeIndexRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<AnalyzeIndexRequestDescriptor, AnalyzeIndexResponse>(descriptor);
		}

		public Task<AnalyzeIndexResponse> AnalyzeIndexAsync(Action<AnalyzeIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new AnalyzeIndexRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<AnalyzeIndexRequestDescriptor, AnalyzeIndexResponse>(descriptor);
		}

		public CreateIndexResponse CreateIndex(CreateIndexRequest request) => DoRequest<CreateIndexRequest, CreateIndexResponse>(request);
		public Task<CreateIndexResponse> CreateIndexAsync(CreateIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<CreateIndexRequest, CreateIndexResponse>(request, cancellationToken);
		public CreateIndexResponse CreateIndex(Elastic.Clients.Elasticsearch.IndexName index, Action<CreateIndexRequestDescriptor> configureRequest = null) => CreateIndex(configureRequest.InvokeOrDefault(new CreateIndexRequestDescriptor(index)));
		public Task<CreateIndexResponse> CreateIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<CreateIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => CreateIndexAsync(configureRequest.InvokeOrDefault(new CreateIndexRequestDescriptor(index)), cancellationToken);
		public DeleteIndexResponse DeleteIndex(DeleteIndexRequest request) => DoRequest<DeleteIndexRequest, DeleteIndexResponse>(request);
		public Task<DeleteIndexResponse> DeleteIndexAsync(DeleteIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<DeleteIndexRequest, DeleteIndexResponse>(request, cancellationToken);
		public DeleteIndexResponse DeleteIndex(Elastic.Clients.Elasticsearch.Indices indices, Action<DeleteIndexRequestDescriptor> configureRequest = null) => DeleteIndex(configureRequest.InvokeOrDefault(new DeleteIndexRequestDescriptor(indices)));
		public Task<DeleteIndexResponse> DeleteIndexAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<DeleteIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => DeleteIndexAsync(configureRequest.InvokeOrDefault(new DeleteIndexRequestDescriptor(indices)), cancellationToken);
		public GetIndexResponse<TKey, TValue> GetIndex<TKey, TValue>(GetIndexRequest request) => DoRequest<GetIndexRequest, GetIndexResponse<TKey, TValue>>(request);
		public Task<GetIndexResponse<TKey, TValue>> GetIndexAsync<TKey, TValue>(GetIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<GetIndexRequest, GetIndexResponse<TKey, TValue>>(request, cancellationToken);
		public GetIndexResponse<TKey, TValue> GetIndex<TKey, TValue>(Elastic.Clients.Elasticsearch.Indices indices, Action<GetIndexRequestDescriptor> configureRequest = null) => GetIndex<TKey, TValue>(configureRequest.InvokeOrDefault(new GetIndexRequestDescriptor(indices)));
		public Task<GetIndexResponse<TKey, TValue>> GetIndexAsync<TKey, TValue>(Elastic.Clients.Elasticsearch.Indices indices, Action<GetIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => GetIndexAsync<TKey, TValue>(configureRequest.InvokeOrDefault(new GetIndexRequestDescriptor(indices)), cancellationToken);
		public IndexClearCacheResponse IndexClearCache(IndexClearCacheRequest request) => DoRequest<IndexClearCacheRequest, IndexClearCacheResponse>(request);
		public Task<IndexClearCacheResponse> IndexClearCacheAsync(IndexClearCacheRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexClearCacheRequest, IndexClearCacheResponse>(request, cancellationToken);
		public IndexClearCacheResponse IndexClearCache(Action<IndexClearCacheRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexClearCacheRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexClearCacheRequestDescriptor, IndexClearCacheResponse>(descriptor);
		}

		public Task<IndexClearCacheResponse> IndexClearCacheAsync(Action<IndexClearCacheRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexClearCacheRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexClearCacheRequestDescriptor, IndexClearCacheResponse>(descriptor);
		}

		public IndexCloneResponse IndexClone(IndexCloneRequest request) => DoRequest<IndexCloneRequest, IndexCloneResponse>(request);
		public Task<IndexCloneResponse> IndexCloneAsync(IndexCloneRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexCloneRequest, IndexCloneResponse>(request, cancellationToken);
		public IndexCloneResponse IndexClone(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Action<IndexCloneRequestDescriptor> configureRequest = null) => IndexClone(configureRequest.InvokeOrDefault(new IndexCloneRequestDescriptor(index, target)));
		public Task<IndexCloneResponse> IndexCloneAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Name target, Action<IndexCloneRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexCloneAsync(configureRequest.InvokeOrDefault(new IndexCloneRequestDescriptor(index, target)), cancellationToken);
		public IndexCloseResponse IndexClose(IndexCloseRequest request) => DoRequest<IndexCloseRequest, IndexCloseResponse>(request);
		public Task<IndexCloseResponse> IndexCloseAsync(IndexCloseRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexCloseRequest, IndexCloseResponse>(request, cancellationToken);
		public IndexCloseResponse IndexClose(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexCloseRequestDescriptor> configureRequest = null) => IndexClose(configureRequest.InvokeOrDefault(new IndexCloseRequestDescriptor(indices)));
		public Task<IndexCloseResponse> IndexCloseAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexCloseRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexCloseAsync(configureRequest.InvokeOrDefault(new IndexCloseRequestDescriptor(indices)), cancellationToken);
		public IndexCreateDataStreamResponse IndexCreateDataStream(IndexCreateDataStreamRequest request) => DoRequest<IndexCreateDataStreamRequest, IndexCreateDataStreamResponse>(request);
		public Task<IndexCreateDataStreamResponse> IndexCreateDataStreamAsync(IndexCreateDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexCreateDataStreamRequest, IndexCreateDataStreamResponse>(request, cancellationToken);
		public IndexCreateDataStreamResponse IndexCreateDataStream(Elastic.Clients.Elasticsearch.DataStreamName name, Action<IndexCreateDataStreamRequestDescriptor> configureRequest = null) => IndexCreateDataStream(configureRequest.InvokeOrDefault(new IndexCreateDataStreamRequestDescriptor(name)));
		public Task<IndexCreateDataStreamResponse> IndexCreateDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamName name, Action<IndexCreateDataStreamRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexCreateDataStreamAsync(configureRequest.InvokeOrDefault(new IndexCreateDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexDataStreamsStatsResponse IndexDataStreamsStats(IndexDataStreamsStatsRequest request) => DoRequest<IndexDataStreamsStatsRequest, IndexDataStreamsStatsResponse>(request);
		public Task<IndexDataStreamsStatsResponse> IndexDataStreamsStatsAsync(IndexDataStreamsStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDataStreamsStatsRequest, IndexDataStreamsStatsResponse>(request, cancellationToken);
		public IndexDataStreamsStatsResponse IndexDataStreamsStats(Action<IndexDataStreamsStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexDataStreamsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexDataStreamsStatsRequestDescriptor, IndexDataStreamsStatsResponse>(descriptor);
		}

		public Task<IndexDataStreamsStatsResponse> IndexDataStreamsStatsAsync(Action<IndexDataStreamsStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexDataStreamsStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexDataStreamsStatsRequestDescriptor, IndexDataStreamsStatsResponse>(descriptor);
		}

		public IndexDeleteAliasResponse IndexDeleteAlias(IndexDeleteAliasRequest request) => DoRequest<IndexDeleteAliasRequest, IndexDeleteAliasResponse>(request);
		public Task<IndexDeleteAliasResponse> IndexDeleteAliasAsync(IndexDeleteAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDeleteAliasRequest, IndexDeleteAliasResponse>(request, cancellationToken);
		public IndexDeleteAliasResponse IndexDeleteAlias(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Names name, Action<IndexDeleteAliasRequestDescriptor> configureRequest = null) => IndexDeleteAlias(configureRequest.InvokeOrDefault(new IndexDeleteAliasRequestDescriptor(indices, name)));
		public Task<IndexDeleteAliasResponse> IndexDeleteAliasAsync(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Names name, Action<IndexDeleteAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexDeleteAliasAsync(configureRequest.InvokeOrDefault(new IndexDeleteAliasRequestDescriptor(indices, name)), cancellationToken);
		public IndexDeleteDataStreamResponse IndexDeleteDataStream(IndexDeleteDataStreamRequest request) => DoRequest<IndexDeleteDataStreamRequest, IndexDeleteDataStreamResponse>(request);
		public Task<IndexDeleteDataStreamResponse> IndexDeleteDataStreamAsync(IndexDeleteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDeleteDataStreamRequest, IndexDeleteDataStreamResponse>(request, cancellationToken);
		public IndexDeleteDataStreamResponse IndexDeleteDataStream(Elastic.Clients.Elasticsearch.DataStreamNames name, Action<IndexDeleteDataStreamRequestDescriptor> configureRequest = null) => IndexDeleteDataStream(configureRequest.InvokeOrDefault(new IndexDeleteDataStreamRequestDescriptor(name)));
		public Task<IndexDeleteDataStreamResponse> IndexDeleteDataStreamAsync(Elastic.Clients.Elasticsearch.DataStreamNames name, Action<IndexDeleteDataStreamRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexDeleteDataStreamAsync(configureRequest.InvokeOrDefault(new IndexDeleteDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexDeleteIndexTemplateResponse IndexDeleteIndexTemplate(IndexDeleteIndexTemplateRequest request) => DoRequest<IndexDeleteIndexTemplateRequest, IndexDeleteIndexTemplateResponse>(request);
		public Task<IndexDeleteIndexTemplateResponse> IndexDeleteIndexTemplateAsync(IndexDeleteIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDeleteIndexTemplateRequest, IndexDeleteIndexTemplateResponse>(request, cancellationToken);
		public IndexDeleteIndexTemplateResponse IndexDeleteIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexDeleteIndexTemplateRequestDescriptor> configureRequest = null) => IndexDeleteIndexTemplate(configureRequest.InvokeOrDefault(new IndexDeleteIndexTemplateRequestDescriptor(name)));
		public Task<IndexDeleteIndexTemplateResponse> IndexDeleteIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexDeleteIndexTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexDeleteIndexTemplateAsync(configureRequest.InvokeOrDefault(new IndexDeleteIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexDeleteTemplateResponse IndexDeleteTemplate(IndexDeleteTemplateRequest request) => DoRequest<IndexDeleteTemplateRequest, IndexDeleteTemplateResponse>(request);
		public Task<IndexDeleteTemplateResponse> IndexDeleteTemplateAsync(IndexDeleteTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDeleteTemplateRequest, IndexDeleteTemplateResponse>(request, cancellationToken);
		public IndexDeleteTemplateResponse IndexDeleteTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexDeleteTemplateRequestDescriptor> configureRequest = null) => IndexDeleteTemplate(configureRequest.InvokeOrDefault(new IndexDeleteTemplateRequestDescriptor(name)));
		public Task<IndexDeleteTemplateResponse> IndexDeleteTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexDeleteTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexDeleteTemplateAsync(configureRequest.InvokeOrDefault(new IndexDeleteTemplateRequestDescriptor(name)), cancellationToken);
		public IndexDiskUsageResponse IndexDiskUsage(IndexDiskUsageRequest request) => DoRequest<IndexDiskUsageRequest, IndexDiskUsageResponse>(request);
		public Task<IndexDiskUsageResponse> IndexDiskUsageAsync(IndexDiskUsageRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexDiskUsageRequest, IndexDiskUsageResponse>(request, cancellationToken);
		public IndexDiskUsageResponse IndexDiskUsage(Elastic.Clients.Elasticsearch.IndexName index, Action<IndexDiskUsageRequestDescriptor> configureRequest = null) => IndexDiskUsage(configureRequest.InvokeOrDefault(new IndexDiskUsageRequestDescriptor(index)));
		public Task<IndexDiskUsageResponse> IndexDiskUsageAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<IndexDiskUsageRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexDiskUsageAsync(configureRequest.InvokeOrDefault(new IndexDiskUsageRequestDescriptor(index)), cancellationToken);
		public IndexExistsAliasResponse IndexExistsAlias(IndexExistsAliasRequest request) => DoRequest<IndexExistsAliasRequest, IndexExistsAliasResponse>(request);
		public Task<IndexExistsAliasResponse> IndexExistsAliasAsync(IndexExistsAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexExistsAliasRequest, IndexExistsAliasResponse>(request, cancellationToken);
		public IndexExistsAliasResponse IndexExistsAlias(Elastic.Clients.Elasticsearch.Names name, Action<IndexExistsAliasRequestDescriptor> configureRequest = null) => IndexExistsAlias(configureRequest.InvokeOrDefault(new IndexExistsAliasRequestDescriptor(name)));
		public Task<IndexExistsAliasResponse> IndexExistsAliasAsync(Elastic.Clients.Elasticsearch.Names name, Action<IndexExistsAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexExistsAliasAsync(configureRequest.InvokeOrDefault(new IndexExistsAliasRequestDescriptor(name)), cancellationToken);
		public IndexExistsIndexTemplateResponse IndexExistsIndexTemplate(IndexExistsIndexTemplateRequest request) => DoRequest<IndexExistsIndexTemplateRequest, IndexExistsIndexTemplateResponse>(request);
		public Task<IndexExistsIndexTemplateResponse> IndexExistsIndexTemplateAsync(IndexExistsIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexExistsIndexTemplateRequest, IndexExistsIndexTemplateResponse>(request, cancellationToken);
		public IndexExistsIndexTemplateResponse IndexExistsIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexExistsIndexTemplateRequestDescriptor> configureRequest = null) => IndexExistsIndexTemplate(configureRequest.InvokeOrDefault(new IndexExistsIndexTemplateRequestDescriptor(name)));
		public Task<IndexExistsIndexTemplateResponse> IndexExistsIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexExistsIndexTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexExistsIndexTemplateAsync(configureRequest.InvokeOrDefault(new IndexExistsIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexExistsResponse IndexExists(IndexExistsRequest request) => DoRequest<IndexExistsRequest, IndexExistsResponse>(request);
		public Task<IndexExistsResponse> IndexExistsAsync(IndexExistsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexExistsRequest, IndexExistsResponse>(request, cancellationToken);
		public IndexExistsResponse IndexExists(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexExistsRequestDescriptor> configureRequest = null) => IndexExists(configureRequest.InvokeOrDefault(new IndexExistsRequestDescriptor(indices)));
		public Task<IndexExistsResponse> IndexExistsAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexExistsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexExistsAsync(configureRequest.InvokeOrDefault(new IndexExistsRequestDescriptor(indices)), cancellationToken);
		public IndexExistsTemplateResponse IndexExistsTemplate(IndexExistsTemplateRequest request) => DoRequest<IndexExistsTemplateRequest, IndexExistsTemplateResponse>(request);
		public Task<IndexExistsTemplateResponse> IndexExistsTemplateAsync(IndexExistsTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexExistsTemplateRequest, IndexExistsTemplateResponse>(request, cancellationToken);
		public IndexExistsTemplateResponse IndexExistsTemplate(Elastic.Clients.Elasticsearch.Names name, Action<IndexExistsTemplateRequestDescriptor> configureRequest = null) => IndexExistsTemplate(configureRequest.InvokeOrDefault(new IndexExistsTemplateRequestDescriptor(name)));
		public Task<IndexExistsTemplateResponse> IndexExistsTemplateAsync(Elastic.Clients.Elasticsearch.Names name, Action<IndexExistsTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexExistsTemplateAsync(configureRequest.InvokeOrDefault(new IndexExistsTemplateRequestDescriptor(name)), cancellationToken);
		public IndexFlushResponse IndexFlush(IndexFlushRequest request) => DoRequest<IndexFlushRequest, IndexFlushResponse>(request);
		public Task<IndexFlushResponse> IndexFlushAsync(IndexFlushRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexFlushRequest, IndexFlushResponse>(request, cancellationToken);
		public IndexFlushResponse IndexFlush(Action<IndexFlushRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexFlushRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexFlushRequestDescriptor, IndexFlushResponse>(descriptor);
		}

		public Task<IndexFlushResponse> IndexFlushAsync(Action<IndexFlushRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexFlushRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexFlushRequestDescriptor, IndexFlushResponse>(descriptor);
		}

		public IndexForcemergeResponse IndexForcemerge(IndexForcemergeRequest request) => DoRequest<IndexForcemergeRequest, IndexForcemergeResponse>(request);
		public Task<IndexForcemergeResponse> IndexForcemergeAsync(IndexForcemergeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexForcemergeRequest, IndexForcemergeResponse>(request, cancellationToken);
		public IndexForcemergeResponse IndexForcemerge(Action<IndexForcemergeRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexForcemergeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexForcemergeRequestDescriptor, IndexForcemergeResponse>(descriptor);
		}

		public Task<IndexForcemergeResponse> IndexForcemergeAsync(Action<IndexForcemergeRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexForcemergeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexForcemergeRequestDescriptor, IndexForcemergeResponse>(descriptor);
		}

		public IndexGetAliasResponse<TKey, TValue> IndexGetAlias<TKey, TValue>(IndexGetAliasRequest request) => DoRequest<IndexGetAliasRequest, IndexGetAliasResponse<TKey, TValue>>(request);
		public Task<IndexGetAliasResponse<TKey, TValue>> IndexGetAliasAsync<TKey, TValue>(IndexGetAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetAliasRequest, IndexGetAliasResponse<TKey, TValue>>(request, cancellationToken);
		public IndexGetAliasResponse<TKey, TValue> IndexGetAlias<TKey, TValue>(Action<IndexGetAliasRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetAliasRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetAliasRequestDescriptor, IndexGetAliasResponse>(descriptor);
		}

		public Task<IndexGetAliasResponse<TKey, TValue>> IndexGetAliasAsync<TKey, TValue>(Action<IndexGetAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetAliasRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetAliasRequestDescriptor, IndexGetAliasResponse>(descriptor);
		}

		public IndexGetDataStreamResponse IndexGetDataStream(IndexGetDataStreamRequest request) => DoRequest<IndexGetDataStreamRequest, IndexGetDataStreamResponse>(request);
		public Task<IndexGetDataStreamResponse> IndexGetDataStreamAsync(IndexGetDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetDataStreamRequest, IndexGetDataStreamResponse>(request, cancellationToken);
		public IndexGetDataStreamResponse IndexGetDataStream(Action<IndexGetDataStreamRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetDataStreamRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetDataStreamRequestDescriptor, IndexGetDataStreamResponse>(descriptor);
		}

		public Task<IndexGetDataStreamResponse> IndexGetDataStreamAsync(Action<IndexGetDataStreamRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetDataStreamRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetDataStreamRequestDescriptor, IndexGetDataStreamResponse>(descriptor);
		}

		public IndexGetFieldMappingResponse<TKey, TValue> IndexGetFieldMapping<TKey, TValue>(IndexGetFieldMappingRequest request) => DoRequest<IndexGetFieldMappingRequest, IndexGetFieldMappingResponse<TKey, TValue>>(request);
		public Task<IndexGetFieldMappingResponse<TKey, TValue>> IndexGetFieldMappingAsync<TKey, TValue>(IndexGetFieldMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetFieldMappingRequest, IndexGetFieldMappingResponse<TKey, TValue>>(request, cancellationToken);
		public IndexGetFieldMappingResponse<TKey, TValue> IndexGetFieldMapping<TKey, TValue>(Elastic.Clients.Elasticsearch.Fields fields, Action<IndexGetFieldMappingRequestDescriptor> configureRequest = null) => IndexGetFieldMapping<TKey, TValue>(configureRequest.InvokeOrDefault(new IndexGetFieldMappingRequestDescriptor(fields)));
		public Task<IndexGetFieldMappingResponse<TKey, TValue>> IndexGetFieldMappingAsync<TKey, TValue>(Elastic.Clients.Elasticsearch.Fields fields, Action<IndexGetFieldMappingRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexGetFieldMappingAsync<TKey, TValue>(configureRequest.InvokeOrDefault(new IndexGetFieldMappingRequestDescriptor(fields)), cancellationToken);
		public IndexGetIndexTemplateResponse IndexGetIndexTemplate(IndexGetIndexTemplateRequest request) => DoRequest<IndexGetIndexTemplateRequest, IndexGetIndexTemplateResponse>(request);
		public Task<IndexGetIndexTemplateResponse> IndexGetIndexTemplateAsync(IndexGetIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetIndexTemplateRequest, IndexGetIndexTemplateResponse>(request, cancellationToken);
		public IndexGetIndexTemplateResponse IndexGetIndexTemplate(Action<IndexGetIndexTemplateRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetIndexTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetIndexTemplateRequestDescriptor, IndexGetIndexTemplateResponse>(descriptor);
		}

		public Task<IndexGetIndexTemplateResponse> IndexGetIndexTemplateAsync(Action<IndexGetIndexTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetIndexTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetIndexTemplateRequestDescriptor, IndexGetIndexTemplateResponse>(descriptor);
		}

		public IndexGetMappingResponse<TKey, TValue> IndexGetMapping<TKey, TValue>(IndexGetMappingRequest request) => DoRequest<IndexGetMappingRequest, IndexGetMappingResponse<TKey, TValue>>(request);
		public Task<IndexGetMappingResponse<TKey, TValue>> IndexGetMappingAsync<TKey, TValue>(IndexGetMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetMappingRequest, IndexGetMappingResponse<TKey, TValue>>(request, cancellationToken);
		public IndexGetMappingResponse<TKey, TValue> IndexGetMapping<TKey, TValue>(Action<IndexGetMappingRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetMappingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetMappingRequestDescriptor, IndexGetMappingResponse>(descriptor);
		}

		public Task<IndexGetMappingResponse<TKey, TValue>> IndexGetMappingAsync<TKey, TValue>(Action<IndexGetMappingRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetMappingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetMappingRequestDescriptor, IndexGetMappingResponse>(descriptor);
		}

		public IndexGetSettingsResponse<TKey, TValue> IndexGetSettings<TKey, TValue>(IndexGetSettingsRequest request) => DoRequest<IndexGetSettingsRequest, IndexGetSettingsResponse<TKey, TValue>>(request);
		public Task<IndexGetSettingsResponse<TKey, TValue>> IndexGetSettingsAsync<TKey, TValue>(IndexGetSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetSettingsRequest, IndexGetSettingsResponse<TKey, TValue>>(request, cancellationToken);
		public IndexGetSettingsResponse<TKey, TValue> IndexGetSettings<TKey, TValue>(Action<IndexGetSettingsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetSettingsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetSettingsRequestDescriptor, IndexGetSettingsResponse>(descriptor);
		}

		public Task<IndexGetSettingsResponse<TKey, TValue>> IndexGetSettingsAsync<TKey, TValue>(Action<IndexGetSettingsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetSettingsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetSettingsRequestDescriptor, IndexGetSettingsResponse>(descriptor);
		}

		public IndexGetTemplateResponse<TKey, TValue> IndexGetTemplate<TKey, TValue>(IndexGetTemplateRequest request) => DoRequest<IndexGetTemplateRequest, IndexGetTemplateResponse<TKey, TValue>>(request);
		public Task<IndexGetTemplateResponse<TKey, TValue>> IndexGetTemplateAsync<TKey, TValue>(IndexGetTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexGetTemplateRequest, IndexGetTemplateResponse<TKey, TValue>>(request, cancellationToken);
		public IndexGetTemplateResponse<TKey, TValue> IndexGetTemplate<TKey, TValue>(Action<IndexGetTemplateRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexGetTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexGetTemplateRequestDescriptor, IndexGetTemplateResponse>(descriptor);
		}

		public Task<IndexGetTemplateResponse<TKey, TValue>> IndexGetTemplateAsync<TKey, TValue>(Action<IndexGetTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexGetTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexGetTemplateRequestDescriptor, IndexGetTemplateResponse>(descriptor);
		}

		public IndexMigrateToDataStreamResponse IndexMigrateToDataStream(IndexMigrateToDataStreamRequest request) => DoRequest<IndexMigrateToDataStreamRequest, IndexMigrateToDataStreamResponse>(request);
		public Task<IndexMigrateToDataStreamResponse> IndexMigrateToDataStreamAsync(IndexMigrateToDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexMigrateToDataStreamRequest, IndexMigrateToDataStreamResponse>(request, cancellationToken);
		public IndexMigrateToDataStreamResponse IndexMigrateToDataStream(Elastic.Clients.Elasticsearch.IndexName name, Action<IndexMigrateToDataStreamRequestDescriptor> configureRequest = null) => IndexMigrateToDataStream(configureRequest.InvokeOrDefault(new IndexMigrateToDataStreamRequestDescriptor(name)));
		public Task<IndexMigrateToDataStreamResponse> IndexMigrateToDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Action<IndexMigrateToDataStreamRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexMigrateToDataStreamAsync(configureRequest.InvokeOrDefault(new IndexMigrateToDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexOpenResponse IndexOpen(IndexOpenRequest request) => DoRequest<IndexOpenRequest, IndexOpenResponse>(request);
		public Task<IndexOpenResponse> IndexOpenAsync(IndexOpenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexOpenRequest, IndexOpenResponse>(request, cancellationToken);
		public IndexOpenResponse IndexOpen(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexOpenRequestDescriptor> configureRequest = null) => IndexOpen(configureRequest.InvokeOrDefault(new IndexOpenRequestDescriptor(indices)));
		public Task<IndexOpenResponse> IndexOpenAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexOpenRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexOpenAsync(configureRequest.InvokeOrDefault(new IndexOpenRequestDescriptor(indices)), cancellationToken);
		public IndexPromoteDataStreamResponse IndexPromoteDataStream(IndexPromoteDataStreamRequest request) => DoRequest<IndexPromoteDataStreamRequest, IndexPromoteDataStreamResponse>(request);
		public Task<IndexPromoteDataStreamResponse> IndexPromoteDataStreamAsync(IndexPromoteDataStreamRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPromoteDataStreamRequest, IndexPromoteDataStreamResponse>(request, cancellationToken);
		public IndexPromoteDataStreamResponse IndexPromoteDataStream(Elastic.Clients.Elasticsearch.IndexName name, Action<IndexPromoteDataStreamRequestDescriptor> configureRequest = null) => IndexPromoteDataStream(configureRequest.InvokeOrDefault(new IndexPromoteDataStreamRequestDescriptor(name)));
		public Task<IndexPromoteDataStreamResponse> IndexPromoteDataStreamAsync(Elastic.Clients.Elasticsearch.IndexName name, Action<IndexPromoteDataStreamRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexPromoteDataStreamAsync(configureRequest.InvokeOrDefault(new IndexPromoteDataStreamRequestDescriptor(name)), cancellationToken);
		public IndexPutAliasResponse IndexPutAlias(IndexPutAliasRequest request) => DoRequest<IndexPutAliasRequest, IndexPutAliasResponse>(request);
		public Task<IndexPutAliasResponse> IndexPutAliasAsync(IndexPutAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPutAliasRequest, IndexPutAliasResponse>(request, cancellationToken);
		public IndexPutAliasResponse IndexPutAlias(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Name name, Action<IndexPutAliasRequestDescriptor> configureRequest = null) => IndexPutAlias(configureRequest.InvokeOrDefault(new IndexPutAliasRequestDescriptor(indices, name)));
		public Task<IndexPutAliasResponse> IndexPutAliasAsync(Elastic.Clients.Elasticsearch.Indices indices, Elastic.Clients.Elasticsearch.Name name, Action<IndexPutAliasRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexPutAliasAsync(configureRequest.InvokeOrDefault(new IndexPutAliasRequestDescriptor(indices, name)), cancellationToken);
		public IndexPutIndexTemplateResponse IndexPutIndexTemplate(IndexPutIndexTemplateRequest request) => DoRequest<IndexPutIndexTemplateRequest, IndexPutIndexTemplateResponse>(request);
		public Task<IndexPutIndexTemplateResponse> IndexPutIndexTemplateAsync(IndexPutIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPutIndexTemplateRequest, IndexPutIndexTemplateResponse>(request, cancellationToken);
		public IndexPutIndexTemplateResponse IndexPutIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexPutIndexTemplateRequestDescriptor> configureRequest = null) => IndexPutIndexTemplate(configureRequest.InvokeOrDefault(new IndexPutIndexTemplateRequestDescriptor(name)));
		public Task<IndexPutIndexTemplateResponse> IndexPutIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexPutIndexTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexPutIndexTemplateAsync(configureRequest.InvokeOrDefault(new IndexPutIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexPutMappingResponse IndexPutMapping(IndexPutMappingRequest request) => DoRequest<IndexPutMappingRequest, IndexPutMappingResponse>(request);
		public Task<IndexPutMappingResponse> IndexPutMappingAsync(IndexPutMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPutMappingRequest, IndexPutMappingResponse>(request, cancellationToken);
		public IndexPutMappingResponse IndexPutMapping(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexPutMappingRequestDescriptor> configureRequest = null) => IndexPutMapping(configureRequest.InvokeOrDefault(new IndexPutMappingRequestDescriptor(indices)));
		public Task<IndexPutMappingResponse> IndexPutMappingAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexPutMappingRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexPutMappingAsync(configureRequest.InvokeOrDefault(new IndexPutMappingRequestDescriptor(indices)), cancellationToken);
		public IndexPutSettingsResponse IndexPutSettings(IndexPutSettingsRequest request) => DoRequest<IndexPutSettingsRequest, IndexPutSettingsResponse>(request);
		public Task<IndexPutSettingsResponse> IndexPutSettingsAsync(IndexPutSettingsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPutSettingsRequest, IndexPutSettingsResponse>(request, cancellationToken);
		public IndexPutSettingsResponse IndexPutSettings(Action<IndexPutSettingsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexPutSettingsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexPutSettingsRequestDescriptor, IndexPutSettingsResponse>(descriptor);
		}

		public Task<IndexPutSettingsResponse> IndexPutSettingsAsync(Action<IndexPutSettingsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexPutSettingsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexPutSettingsRequestDescriptor, IndexPutSettingsResponse>(descriptor);
		}

		public IndexPutTemplateResponse IndexPutTemplate(IndexPutTemplateRequest request) => DoRequest<IndexPutTemplateRequest, IndexPutTemplateResponse>(request);
		public Task<IndexPutTemplateResponse> IndexPutTemplateAsync(IndexPutTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexPutTemplateRequest, IndexPutTemplateResponse>(request, cancellationToken);
		public IndexPutTemplateResponse IndexPutTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexPutTemplateRequestDescriptor> configureRequest = null) => IndexPutTemplate(configureRequest.InvokeOrDefault(new IndexPutTemplateRequestDescriptor(name)));
		public Task<IndexPutTemplateResponse> IndexPutTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexPutTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexPutTemplateAsync(configureRequest.InvokeOrDefault(new IndexPutTemplateRequestDescriptor(name)), cancellationToken);
		public IndexRecoveryResponse<TKey, TValue> IndexRecovery<TKey, TValue>(IndexRecoveryRequest request) => DoRequest<IndexRecoveryRequest, IndexRecoveryResponse<TKey, TValue>>(request);
		public Task<IndexRecoveryResponse<TKey, TValue>> IndexRecoveryAsync<TKey, TValue>(IndexRecoveryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexRecoveryRequest, IndexRecoveryResponse<TKey, TValue>>(request, cancellationToken);
		public IndexRecoveryResponse<TKey, TValue> IndexRecovery<TKey, TValue>(Action<IndexRecoveryRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexRecoveryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexRecoveryRequestDescriptor, IndexRecoveryResponse>(descriptor);
		}

		public Task<IndexRecoveryResponse<TKey, TValue>> IndexRecoveryAsync<TKey, TValue>(Action<IndexRecoveryRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexRecoveryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexRecoveryRequestDescriptor, IndexRecoveryResponse>(descriptor);
		}

		public IndexRefreshResponse IndexRefresh(IndexRefreshRequest request) => DoRequest<IndexRefreshRequest, IndexRefreshResponse>(request);
		public Task<IndexRefreshResponse> IndexRefreshAsync(IndexRefreshRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexRefreshRequest, IndexRefreshResponse>(request, cancellationToken);
		public IndexRefreshResponse IndexRefresh(Action<IndexRefreshRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexRefreshRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexRefreshRequestDescriptor, IndexRefreshResponse>(descriptor);
		}

		public Task<IndexRefreshResponse> IndexRefreshAsync(Action<IndexRefreshRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexRefreshRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexRefreshRequestDescriptor, IndexRefreshResponse>(descriptor);
		}

		public IndexReloadSearchAnalyzersResponse IndexReloadSearchAnalyzers(IndexReloadSearchAnalyzersRequest request) => DoRequest<IndexReloadSearchAnalyzersRequest, IndexReloadSearchAnalyzersResponse>(request);
		public Task<IndexReloadSearchAnalyzersResponse> IndexReloadSearchAnalyzersAsync(IndexReloadSearchAnalyzersRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexReloadSearchAnalyzersRequest, IndexReloadSearchAnalyzersResponse>(request, cancellationToken);
		public IndexReloadSearchAnalyzersResponse IndexReloadSearchAnalyzers(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexReloadSearchAnalyzersRequestDescriptor> configureRequest = null) => IndexReloadSearchAnalyzers(configureRequest.InvokeOrDefault(new IndexReloadSearchAnalyzersRequestDescriptor(indices)));
		public Task<IndexReloadSearchAnalyzersResponse> IndexReloadSearchAnalyzersAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<IndexReloadSearchAnalyzersRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexReloadSearchAnalyzersAsync(configureRequest.InvokeOrDefault(new IndexReloadSearchAnalyzersRequestDescriptor(indices)), cancellationToken);
		public IndexResolveIndexResponse IndexResolveIndex(IndexResolveIndexRequest request) => DoRequest<IndexResolveIndexRequest, IndexResolveIndexResponse>(request);
		public Task<IndexResolveIndexResponse> IndexResolveIndexAsync(IndexResolveIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexResolveIndexRequest, IndexResolveIndexResponse>(request, cancellationToken);
		public IndexResolveIndexResponse IndexResolveIndex(Elastic.Clients.Elasticsearch.Names name, Action<IndexResolveIndexRequestDescriptor> configureRequest = null) => IndexResolveIndex(configureRequest.InvokeOrDefault(new IndexResolveIndexRequestDescriptor(name)));
		public Task<IndexResolveIndexResponse> IndexResolveIndexAsync(Elastic.Clients.Elasticsearch.Names name, Action<IndexResolveIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexResolveIndexAsync(configureRequest.InvokeOrDefault(new IndexResolveIndexRequestDescriptor(name)), cancellationToken);
		public IndexRolloverResponse IndexRollover(IndexRolloverRequest request) => DoRequest<IndexRolloverRequest, IndexRolloverResponse>(request);
		public Task<IndexRolloverResponse> IndexRolloverAsync(IndexRolloverRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexRolloverRequest, IndexRolloverResponse>(request, cancellationToken);
		public IndexRolloverResponse IndexRollover(Elastic.Clients.Elasticsearch.IndexAlias alias, Action<IndexRolloverRequestDescriptor> configureRequest = null) => IndexRollover(configureRequest.InvokeOrDefault(new IndexRolloverRequestDescriptor(alias)));
		public Task<IndexRolloverResponse> IndexRolloverAsync(Elastic.Clients.Elasticsearch.IndexAlias alias, Action<IndexRolloverRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexRolloverAsync(configureRequest.InvokeOrDefault(new IndexRolloverRequestDescriptor(alias)), cancellationToken);
		public IndexSegmentsResponse IndexSegments(IndexSegmentsRequest request) => DoRequest<IndexSegmentsRequest, IndexSegmentsResponse>(request);
		public Task<IndexSegmentsResponse> IndexSegmentsAsync(IndexSegmentsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexSegmentsRequest, IndexSegmentsResponse>(request, cancellationToken);
		public IndexSegmentsResponse IndexSegments(Action<IndexSegmentsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexSegmentsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexSegmentsRequestDescriptor, IndexSegmentsResponse>(descriptor);
		}

		public Task<IndexSegmentsResponse> IndexSegmentsAsync(Action<IndexSegmentsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexSegmentsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexSegmentsRequestDescriptor, IndexSegmentsResponse>(descriptor);
		}

		public IndexShardStoresResponse IndexShardStores(IndexShardStoresRequest request) => DoRequest<IndexShardStoresRequest, IndexShardStoresResponse>(request);
		public Task<IndexShardStoresResponse> IndexShardStoresAsync(IndexShardStoresRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexShardStoresRequest, IndexShardStoresResponse>(request, cancellationToken);
		public IndexShardStoresResponse IndexShardStores(Action<IndexShardStoresRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexShardStoresRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexShardStoresRequestDescriptor, IndexShardStoresResponse>(descriptor);
		}

		public Task<IndexShardStoresResponse> IndexShardStoresAsync(Action<IndexShardStoresRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexShardStoresRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexShardStoresRequestDescriptor, IndexShardStoresResponse>(descriptor);
		}

		public IndexSimulateIndexTemplateResponse IndexSimulateIndexTemplate(IndexSimulateIndexTemplateRequest request) => DoRequest<IndexSimulateIndexTemplateRequest, IndexSimulateIndexTemplateResponse>(request);
		public Task<IndexSimulateIndexTemplateResponse> IndexSimulateIndexTemplateAsync(IndexSimulateIndexTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexSimulateIndexTemplateRequest, IndexSimulateIndexTemplateResponse>(request, cancellationToken);
		public IndexSimulateIndexTemplateResponse IndexSimulateIndexTemplate(Elastic.Clients.Elasticsearch.Name name, Action<IndexSimulateIndexTemplateRequestDescriptor> configureRequest = null) => IndexSimulateIndexTemplate(configureRequest.InvokeOrDefault(new IndexSimulateIndexTemplateRequestDescriptor(name)));
		public Task<IndexSimulateIndexTemplateResponse> IndexSimulateIndexTemplateAsync(Elastic.Clients.Elasticsearch.Name name, Action<IndexSimulateIndexTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => IndexSimulateIndexTemplateAsync(configureRequest.InvokeOrDefault(new IndexSimulateIndexTemplateRequestDescriptor(name)), cancellationToken);
		public IndexSimulateTemplateResponse IndexSimulateTemplate(IndexSimulateTemplateRequest request) => DoRequest<IndexSimulateTemplateRequest, IndexSimulateTemplateResponse>(request);
		public Task<IndexSimulateTemplateResponse> IndexSimulateTemplateAsync(IndexSimulateTemplateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexSimulateTemplateRequest, IndexSimulateTemplateResponse>(request, cancellationToken);
		public IndexSimulateTemplateResponse IndexSimulateTemplate(Action<IndexSimulateTemplateRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexSimulateTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexSimulateTemplateRequestDescriptor, IndexSimulateTemplateResponse>(descriptor);
		}

		public Task<IndexSimulateTemplateResponse> IndexSimulateTemplateAsync(Action<IndexSimulateTemplateRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexSimulateTemplateRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexSimulateTemplateRequestDescriptor, IndexSimulateTemplateResponse>(descriptor);
		}

		public IndexStatsResponse IndexStats(IndexStatsRequest request) => DoRequest<IndexStatsRequest, IndexStatsResponse>(request);
		public Task<IndexStatsResponse> IndexStatsAsync(IndexStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexStatsRequest, IndexStatsResponse>(request, cancellationToken);
		public IndexStatsResponse IndexStats(Action<IndexStatsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexStatsRequestDescriptor, IndexStatsResponse>(descriptor);
		}

		public Task<IndexStatsResponse> IndexStatsAsync(Action<IndexStatsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexStatsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexStatsRequestDescriptor, IndexStatsResponse>(descriptor);
		}

		public IndexUpdateAliasesResponse IndexUpdateAliases(IndexUpdateAliasesRequest request) => DoRequest<IndexUpdateAliasesRequest, IndexUpdateAliasesResponse>(request);
		public Task<IndexUpdateAliasesResponse> IndexUpdateAliasesAsync(IndexUpdateAliasesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexUpdateAliasesRequest, IndexUpdateAliasesResponse>(request, cancellationToken);
		public IndexUpdateAliasesResponse IndexUpdateAliases(Action<IndexUpdateAliasesRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexUpdateAliasesRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexUpdateAliasesRequestDescriptor, IndexUpdateAliasesResponse>(descriptor);
		}

		public Task<IndexUpdateAliasesResponse> IndexUpdateAliasesAsync(Action<IndexUpdateAliasesRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexUpdateAliasesRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexUpdateAliasesRequestDescriptor, IndexUpdateAliasesResponse>(descriptor);
		}

		public IndexValidateQueryResponse IndexValidateQuery(IndexValidateQueryRequest request) => DoRequest<IndexValidateQueryRequest, IndexValidateQueryResponse>(request);
		public Task<IndexValidateQueryResponse> IndexValidateQueryAsync(IndexValidateQueryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IndexValidateQueryRequest, IndexValidateQueryResponse>(request, cancellationToken);
		public IndexValidateQueryResponse IndexValidateQuery(Action<IndexValidateQueryRequestDescriptor> configureRequest = null)
		{
			var descriptor = new IndexValidateQueryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequest<IndexValidateQueryRequestDescriptor, IndexValidateQueryResponse>(descriptor);
		}

		public Task<IndexValidateQueryResponse> IndexValidateQueryAsync(Action<IndexValidateQueryRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexValidateQueryRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			return DoRequestAsync<IndexValidateQueryRequestDescriptor, IndexValidateQueryResponse>(descriptor);
		}

		public ShrinkIndexResponse ShrinkIndex(ShrinkIndexRequest request) => DoRequest<ShrinkIndexRequest, ShrinkIndexResponse>(request);
		public Task<ShrinkIndexResponse> ShrinkIndexAsync(ShrinkIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ShrinkIndexRequest, ShrinkIndexResponse>(request, cancellationToken);
		public ShrinkIndexResponse ShrinkIndex(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Action<ShrinkIndexRequestDescriptor> configureRequest = null) => ShrinkIndex(configureRequest.InvokeOrDefault(new ShrinkIndexRequestDescriptor(index, target)));
		public Task<ShrinkIndexResponse> ShrinkIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Action<ShrinkIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => ShrinkIndexAsync(configureRequest.InvokeOrDefault(new ShrinkIndexRequestDescriptor(index, target)), cancellationToken);
		public SplitIndexResponse SplitIndex(SplitIndexRequest request) => DoRequest<SplitIndexRequest, SplitIndexResponse>(request);
		public Task<SplitIndexResponse> SplitIndexAsync(SplitIndexRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<SplitIndexRequest, SplitIndexResponse>(request, cancellationToken);
		public SplitIndexResponse SplitIndex(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Action<SplitIndexRequestDescriptor> configureRequest = null) => SplitIndex(configureRequest.InvokeOrDefault(new SplitIndexRequestDescriptor(index, target)));
		public Task<SplitIndexResponse> SplitIndexAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.IndexName target, Action<SplitIndexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default) => SplitIndexAsync(configureRequest.InvokeOrDefault(new SplitIndexRequestDescriptor(index, target)), cancellationToken);
	}
}