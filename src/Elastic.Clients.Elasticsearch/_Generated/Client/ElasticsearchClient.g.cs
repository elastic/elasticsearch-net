// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.AsyncSearch;
using Elastic.Clients.Elasticsearch.Autoscaling;
using Elastic.Clients.Elasticsearch.Ccr;
using Elastic.Clients.Elasticsearch.Cluster;
using Elastic.Clients.Elasticsearch.DanglingIndices;
using Elastic.Clients.Elasticsearch.Enrich;
using Elastic.Clients.Elasticsearch.Eql;
using Elastic.Clients.Elasticsearch.Features;
using Elastic.Clients.Elasticsearch.Graph;
using Elastic.Clients.Elasticsearch.Ilm;
using Elastic.Clients.Elasticsearch.IndexManagement;
using Elastic.Clients.Elasticsearch.Ingest;
using Elastic.Clients.Elasticsearch.Nodes;
using Elastic.Clients.Elasticsearch.SearchableSnapshots;
using Elastic.Clients.Elasticsearch.Slm;
using Elastic.Clients.Elasticsearch.Snapshot;
using Elastic.Clients.Elasticsearch.Sql;
using Elastic.Clients.Elasticsearch.Tasks;
using Elastic.Clients.Elasticsearch.Xpack;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch
{
	public partial class ElasticsearchClient
	{
		public AsyncSearchNamespace AsyncSearch { get; private set; }

		public AutoscalingNamespace Autoscaling { get; private set; }

		public CcrNamespace Ccr { get; private set; }

		public ClusterNamespace Cluster { get; private set; }

		public DanglingIndicesNamespace DanglingIndices { get; private set; }

		public EnrichNamespace Enrich { get; private set; }

		public EqlNamespace Eql { get; private set; }

		public FeaturesNamespace Features { get; private set; }

		public GraphNamespace Graph { get; private set; }

		public IlmNamespace Ilm { get; private set; }

		public IndicesNamespace Indices { get; private set; }

		public IngestNamespace Ingest { get; private set; }

		public NodesNamespace Nodes { get; private set; }

		public SearchableSnapshotsNamespace SearchableSnapshots { get; private set; }

		public SlmNamespace Slm { get; private set; }

		public SnapshotNamespace Snapshot { get; private set; }

		public SqlNamespace Sql { get; private set; }

		public TasksNamespace Tasks { get; private set; }

		public XpackNamespace Xpack { get; private set; }

		private partial void SetupNamespaces()
		{
			AsyncSearch = new AsyncSearchNamespace(this);
			Autoscaling = new AutoscalingNamespace(this);
			Ccr = new CcrNamespace(this);
			Cluster = new ClusterNamespace(this);
			DanglingIndices = new DanglingIndicesNamespace(this);
			Enrich = new EnrichNamespace(this);
			Eql = new EqlNamespace(this);
			Features = new FeaturesNamespace(this);
			Graph = new GraphNamespace(this);
			Ilm = new IlmNamespace(this);
			Indices = new IndicesNamespace(this);
			Ingest = new IngestNamespace(this);
			Nodes = new NodesNamespace(this);
			SearchableSnapshots = new SearchableSnapshotsNamespace(this);
			Slm = new SlmNamespace(this);
			Snapshot = new SnapshotNamespace(this);
			Sql = new SqlNamespace(this);
			Tasks = new TasksNamespace(this);
			Xpack = new XpackNamespace(this);
		}

		public BulkResponse Bulk(BulkRequest request)
		{
			request.BeforeRequest();
			return DoRequest<BulkRequest, BulkResponse>(request);
		}

		public Task<BulkResponse> BulkAsync(BulkRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<BulkRequest, BulkResponse>(request, cancellationToken);
		}

		public BulkResponse Bulk(Action<BulkRequestDescriptor> configureRequest = null)
		{
			var descriptor = new BulkRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<BulkRequestDescriptor, BulkResponse>(descriptor);
		}

		public Task<BulkResponse> BulkAsync(Action<BulkRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new BulkRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<BulkRequestDescriptor, BulkResponse>(descriptor);
		}

		public ClosePointInTimeResponse ClosePointInTime(ClosePointInTimeRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ClosePointInTimeRequest, ClosePointInTimeResponse>(request);
		}

		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(ClosePointInTimeRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ClosePointInTimeRequest, ClosePointInTimeResponse>(request, cancellationToken);
		}

		public ClosePointInTimeResponse ClosePointInTime(Action<ClosePointInTimeRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ClosePointInTimeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ClosePointInTimeRequestDescriptor, ClosePointInTimeResponse>(descriptor);
		}

		public Task<ClosePointInTimeResponse> ClosePointInTimeAsync(Action<ClosePointInTimeRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ClosePointInTimeRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ClosePointInTimeRequestDescriptor, ClosePointInTimeResponse>(descriptor);
		}

		public CountResponse Count(CountRequest request)
		{
			request.BeforeRequest();
			return DoRequest<CountRequest, CountResponse>(request);
		}

		public Task<CountResponse> CountAsync(CountRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<CountRequest, CountResponse>(request, cancellationToken);
		}

		public CountResponse Count(Action<CountRequestDescriptor> configureRequest = null)
		{
			var descriptor = new CountRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<CountRequestDescriptor, CountResponse>(descriptor);
		}

		public Task<CountResponse> CountAsync(Action<CountRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new CountRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<CountRequestDescriptor, CountResponse>(descriptor);
		}

		public CreateResponse Create<TDocument>(CreateRequest<TDocument> request)
		{
			request.BeforeRequest();
			return DoRequest<CreateRequest<TDocument>, CreateResponse>(request);
		}

		public Task<CreateResponse> CreateAsync<TDocument>(CreateRequest<TDocument> request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<CreateRequest<TDocument>, CreateResponse>(request, cancellationToken);
		}

		public CreateResponse Create<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<CreateRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new CreateRequestDescriptor<TDocument>(document, index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<CreateRequestDescriptor<TDocument>, CreateResponse>(descriptor);
		}

		public Task<CreateResponse> CreateAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<CreateRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new CreateRequestDescriptor<TDocument>(document, index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<CreateRequestDescriptor<TDocument>, CreateResponse>(descriptor);
		}

		public DeleteByQueryResponse DeleteByQuery(DeleteByQueryRequest request)
		{
			request.BeforeRequest();
			return DoRequest<DeleteByQueryRequest, DeleteByQueryResponse>(request);
		}

		public Task<DeleteByQueryResponse> DeleteByQueryAsync(DeleteByQueryRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<DeleteByQueryRequest, DeleteByQueryResponse>(request, cancellationToken);
		}

		public DeleteByQueryResponse DeleteByQuery(Elastic.Clients.Elasticsearch.Indices indices, Action<DeleteByQueryRequestDescriptor> configureRequest = null)
		{
			var descriptor = new DeleteByQueryRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<DeleteByQueryRequestDescriptor, DeleteByQueryResponse>(descriptor);
		}

		public Task<DeleteByQueryResponse> DeleteByQueryAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<DeleteByQueryRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new DeleteByQueryRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<DeleteByQueryRequestDescriptor, DeleteByQueryResponse>(descriptor);
		}

		public DeleteByQueryRethrottleResponse DeleteByQueryRethrottle(DeleteByQueryRethrottleRequest request)
		{
			request.BeforeRequest();
			return DoRequest<DeleteByQueryRethrottleRequest, DeleteByQueryRethrottleResponse>(request);
		}

		public Task<DeleteByQueryRethrottleResponse> DeleteByQueryRethrottleAsync(DeleteByQueryRethrottleRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<DeleteByQueryRethrottleRequest, DeleteByQueryRethrottleResponse>(request, cancellationToken);
		}

		public DeleteByQueryRethrottleResponse DeleteByQueryRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Action<DeleteByQueryRethrottleRequestDescriptor> configureRequest = null)
		{
			var descriptor = new DeleteByQueryRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<DeleteByQueryRethrottleRequestDescriptor, DeleteByQueryRethrottleResponse>(descriptor);
		}

		public Task<DeleteByQueryRethrottleResponse> DeleteByQueryRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Action<DeleteByQueryRethrottleRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new DeleteByQueryRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<DeleteByQueryRethrottleRequestDescriptor, DeleteByQueryRethrottleResponse>(descriptor);
		}

		public DeleteResponse Delete(DeleteRequest request)
		{
			request.BeforeRequest();
			return DoRequest<DeleteRequest, DeleteResponse>(request);
		}

		public Task<DeleteResponse> DeleteAsync(DeleteRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<DeleteRequest, DeleteResponse>(request, cancellationToken);
		}

		public DeleteResponse Delete(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<DeleteRequestDescriptor> configureRequest = null)
		{
			var descriptor = new DeleteRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<DeleteRequestDescriptor, DeleteResponse>(descriptor);
		}

		public Task<DeleteResponse> DeleteAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<DeleteRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new DeleteRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<DeleteRequestDescriptor, DeleteResponse>(descriptor);
		}

		public ExistsResponse Exists(ExistsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ExistsRequest, ExistsResponse>(request);
		}

		public Task<ExistsResponse> ExistsAsync(ExistsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ExistsRequest, ExistsResponse>(request, cancellationToken);
		}

		public ExistsResponse Exists(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<ExistsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ExistsRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ExistsRequestDescriptor, ExistsResponse>(descriptor);
		}

		public Task<ExistsResponse> ExistsAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<ExistsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ExistsRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ExistsRequestDescriptor, ExistsResponse>(descriptor);
		}

		public ExistsSourceResponse ExistsSource(ExistsSourceRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ExistsSourceRequest, ExistsSourceResponse>(request);
		}

		public Task<ExistsSourceResponse> ExistsSourceAsync(ExistsSourceRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ExistsSourceRequest, ExistsSourceResponse>(request, cancellationToken);
		}

		public ExistsSourceResponse ExistsSource(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<ExistsSourceRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ExistsSourceRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ExistsSourceRequestDescriptor, ExistsSourceResponse>(descriptor);
		}

		public Task<ExistsSourceResponse> ExistsSourceAsync(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<ExistsSourceRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ExistsSourceRequestDescriptor(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ExistsSourceRequestDescriptor, ExistsSourceResponse>(descriptor);
		}

		public FieldCapsResponse FieldCaps(FieldCapsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<FieldCapsRequest, FieldCapsResponse>(request);
		}

		public Task<FieldCapsResponse> FieldCapsAsync(FieldCapsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<FieldCapsRequest, FieldCapsResponse>(request, cancellationToken);
		}

		public FieldCapsResponse FieldCaps(Action<FieldCapsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new FieldCapsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<FieldCapsRequestDescriptor, FieldCapsResponse>(descriptor);
		}

		public Task<FieldCapsResponse> FieldCapsAsync(Action<FieldCapsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new FieldCapsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<FieldCapsRequestDescriptor, FieldCapsResponse>(descriptor);
		}

		public GetResponse<TDocument> Get<TDocument>(GetRequest request)
		{
			request.BeforeRequest();
			return DoRequest<GetRequest, GetResponse<TDocument>>(request);
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(GetRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<GetRequest, GetResponse<TDocument>>(request, cancellationToken);
		}

		public GetResponse<TDocument> Get<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<GetRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new GetRequestDescriptor<TDocument>(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<GetRequestDescriptor<TDocument>, GetResponse<TDocument>>(descriptor);
		}

		public Task<GetResponse<TDocument>> GetAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<GetRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new GetRequestDescriptor<TDocument>(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<GetRequestDescriptor<TDocument>, GetResponse<TDocument>>(descriptor);
		}

		public IndexResponse Index<TDocument>(IndexRequest<TDocument> request)
		{
			request.BeforeRequest();
			return DoRequest<IndexRequest<TDocument>, IndexResponse>(request);
		}

		public Task<IndexResponse> IndexAsync<TDocument>(IndexRequest<TDocument> request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<IndexRequest<TDocument>, IndexResponse>(request, cancellationToken);
		}

		public IndexResponse Index<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Action<IndexRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new IndexRequestDescriptor<TDocument>(document, index);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<IndexRequestDescriptor<TDocument>, IndexResponse>(descriptor);
		}

		public Task<IndexResponse> IndexAsync<TDocument>(TDocument document, Elastic.Clients.Elasticsearch.IndexName index, Action<IndexRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new IndexRequestDescriptor<TDocument>(document, index);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<IndexRequestDescriptor<TDocument>, IndexResponse>(descriptor);
		}

		public InfoResponse Info(InfoRequest request)
		{
			request.BeforeRequest();
			return DoRequest<InfoRequest, InfoResponse>(request);
		}

		public Task<InfoResponse> InfoAsync(InfoRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<InfoRequest, InfoResponse>(request, cancellationToken);
		}

		public InfoResponse Info(Action<InfoRequestDescriptor> configureRequest = null)
		{
			var descriptor = new InfoRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<InfoRequestDescriptor, InfoResponse>(descriptor);
		}

		public Task<InfoResponse> InfoAsync(Action<InfoRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new InfoRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<InfoRequestDescriptor, InfoResponse>(descriptor);
		}

		public KnnSearchResponse<TDocument> KnnSearch<TDocument>(KnnSearchRequest request)
		{
			request.BeforeRequest();
			return DoRequest<KnnSearchRequest, KnnSearchResponse<TDocument>>(request);
		}

		public Task<KnnSearchResponse<TDocument>> KnnSearchAsync<TDocument>(KnnSearchRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<KnnSearchRequest, KnnSearchResponse<TDocument>>(request, cancellationToken);
		}

		public KnnSearchResponse<TDocument> KnnSearch<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<KnnSearchRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new KnnSearchRequestDescriptor<TDocument>(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<KnnSearchRequestDescriptor<TDocument>, KnnSearchResponse<TDocument>>(descriptor);
		}

		public Task<KnnSearchResponse<TDocument>> KnnSearchAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<KnnSearchRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new KnnSearchRequestDescriptor<TDocument>(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<KnnSearchRequestDescriptor<TDocument>, KnnSearchResponse<TDocument>>(descriptor);
		}

		public OpenPointInTimeResponse OpenPointInTime(OpenPointInTimeRequest request)
		{
			request.BeforeRequest();
			return DoRequest<OpenPointInTimeRequest, OpenPointInTimeResponse>(request);
		}

		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(OpenPointInTimeRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<OpenPointInTimeRequest, OpenPointInTimeResponse>(request, cancellationToken);
		}

		public OpenPointInTimeResponse OpenPointInTime(Elastic.Clients.Elasticsearch.Indices indices, Action<OpenPointInTimeRequestDescriptor> configureRequest = null)
		{
			var descriptor = new OpenPointInTimeRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<OpenPointInTimeRequestDescriptor, OpenPointInTimeResponse>(descriptor);
		}

		public Task<OpenPointInTimeResponse> OpenPointInTimeAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<OpenPointInTimeRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new OpenPointInTimeRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<OpenPointInTimeRequestDescriptor, OpenPointInTimeResponse>(descriptor);
		}

		public PingResponse Ping(PingRequest request)
		{
			request.BeforeRequest();
			return DoRequest<PingRequest, PingResponse>(request);
		}

		public Task<PingResponse> PingAsync(PingRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<PingRequest, PingResponse>(request, cancellationToken);
		}

		public PingResponse Ping(Action<PingRequestDescriptor> configureRequest = null)
		{
			var descriptor = new PingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<PingRequestDescriptor, PingResponse>(descriptor);
		}

		public Task<PingResponse> PingAsync(Action<PingRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new PingRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<PingRequestDescriptor, PingResponse>(descriptor);
		}

		public PutScriptResponse PutScript(PutScriptRequest request)
		{
			request.BeforeRequest();
			return DoRequest<PutScriptRequest, PutScriptResponse>(request);
		}

		public Task<PutScriptResponse> PutScriptAsync(PutScriptRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<PutScriptRequest, PutScriptResponse>(request, cancellationToken);
		}

		public PutScriptResponse PutScript(Elastic.Clients.Elasticsearch.Id id, Action<PutScriptRequestDescriptor> configureRequest = null)
		{
			var descriptor = new PutScriptRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<PutScriptRequestDescriptor, PutScriptResponse>(descriptor);
		}

		public Task<PutScriptResponse> PutScriptAsync(Elastic.Clients.Elasticsearch.Id id, Action<PutScriptRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new PutScriptRequestDescriptor(id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<PutScriptRequestDescriptor, PutScriptResponse>(descriptor);
		}

		public RankEvalResponse RankEval(RankEvalRequest request)
		{
			request.BeforeRequest();
			return DoRequest<RankEvalRequest, RankEvalResponse>(request);
		}

		public Task<RankEvalResponse> RankEvalAsync(RankEvalRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<RankEvalRequest, RankEvalResponse>(request, cancellationToken);
		}

		public RankEvalResponse RankEval(Action<RankEvalRequestDescriptor> configureRequest = null)
		{
			var descriptor = new RankEvalRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<RankEvalRequestDescriptor, RankEvalResponse>(descriptor);
		}

		public RankEvalResponse RankEval(Elastic.Clients.Elasticsearch.Indices indices, Action<RankEvalRequestDescriptor> configureRequest = null)
		{
			var descriptor = new RankEvalRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<RankEvalRequestDescriptor, RankEvalResponse>(descriptor);
		}

		public Task<RankEvalResponse> RankEvalAsync(Action<RankEvalRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new RankEvalRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<RankEvalRequestDescriptor, RankEvalResponse>(descriptor);
		}

		public Task<RankEvalResponse> RankEvalAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<RankEvalRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new RankEvalRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<RankEvalRequestDescriptor, RankEvalResponse>(descriptor);
		}

		public ReindexResponse Reindex(ReindexRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ReindexRequest, ReindexResponse>(request);
		}

		public Task<ReindexResponse> ReindexAsync(ReindexRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ReindexRequest, ReindexResponse>(request, cancellationToken);
		}

		public ReindexResponse Reindex(Action<ReindexRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ReindexRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ReindexRequestDescriptor, ReindexResponse>(descriptor);
		}

		public Task<ReindexResponse> ReindexAsync(Action<ReindexRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ReindexRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ReindexRequestDescriptor, ReindexResponse>(descriptor);
		}

		public ReindexRethrottleResponse ReindexRethrottle(ReindexRethrottleRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ReindexRethrottleRequest, ReindexRethrottleResponse>(request);
		}

		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(ReindexRethrottleRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ReindexRethrottleRequest, ReindexRethrottleResponse>(request, cancellationToken);
		}

		public ReindexRethrottleResponse ReindexRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Action<ReindexRethrottleRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ReindexRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ReindexRethrottleRequestDescriptor, ReindexRethrottleResponse>(descriptor);
		}

		public Task<ReindexRethrottleResponse> ReindexRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Action<ReindexRethrottleRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ReindexRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ReindexRethrottleRequestDescriptor, ReindexRethrottleResponse>(descriptor);
		}

		public ScriptContextResponse GetScriptContext(ScriptContextRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ScriptContextRequest, ScriptContextResponse>(request);
		}

		public Task<ScriptContextResponse> GetScriptContextAsync(ScriptContextRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ScriptContextRequest, ScriptContextResponse>(request, cancellationToken);
		}

		public ScriptContextResponse GetScriptContext(Action<ScriptContextRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ScriptContextRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ScriptContextRequestDescriptor, ScriptContextResponse>(descriptor);
		}

		public Task<ScriptContextResponse> GetScriptContextAsync(Action<ScriptContextRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ScriptContextRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ScriptContextRequestDescriptor, ScriptContextResponse>(descriptor);
		}

		public ScriptLanguagesResponse GetScriptLanguages(ScriptLanguagesRequest request)
		{
			request.BeforeRequest();
			return DoRequest<ScriptLanguagesRequest, ScriptLanguagesResponse>(request);
		}

		public Task<ScriptLanguagesResponse> GetScriptLanguagesAsync(ScriptLanguagesRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<ScriptLanguagesRequest, ScriptLanguagesResponse>(request, cancellationToken);
		}

		public ScriptLanguagesResponse GetScriptLanguages(Action<ScriptLanguagesRequestDescriptor> configureRequest = null)
		{
			var descriptor = new ScriptLanguagesRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<ScriptLanguagesRequestDescriptor, ScriptLanguagesResponse>(descriptor);
		}

		public Task<ScriptLanguagesResponse> GetScriptLanguagesAsync(Action<ScriptLanguagesRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new ScriptLanguagesRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<ScriptLanguagesRequestDescriptor, ScriptLanguagesResponse>(descriptor);
		}

		public SearchResponse<TDocument> Search<TDocument>(SearchRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SearchRequest, SearchResponse<TDocument>>(request);
		}

		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(SearchRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SearchRequest, SearchResponse<TDocument>>(request, cancellationToken);
		}

		public SearchResponse<TDocument> Search<TDocument>(Action<SearchRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new SearchRequestDescriptor<TDocument>();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SearchRequestDescriptor<TDocument>, SearchResponse<TDocument>>(descriptor);
		}

		public Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Action<SearchRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SearchRequestDescriptor<TDocument>();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SearchRequestDescriptor<TDocument>, SearchResponse<TDocument>>(descriptor);
		}

		public SearchShardsResponse SearchShards(SearchShardsRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SearchShardsRequest, SearchShardsResponse>(request);
		}

		public Task<SearchShardsResponse> SearchShardsAsync(SearchShardsRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SearchShardsRequest, SearchShardsResponse>(request, cancellationToken);
		}

		public SearchShardsResponse SearchShards(Action<SearchShardsRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SearchShardsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SearchShardsRequestDescriptor, SearchShardsResponse>(descriptor);
		}

		public Task<SearchShardsResponse> SearchShardsAsync(Action<SearchShardsRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SearchShardsRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SearchShardsRequestDescriptor, SearchShardsResponse>(descriptor);
		}

		public SourceResponse<TDocument> GetSource<TDocument>(SourceRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SourceRequest, SourceResponse<TDocument>>(request);
		}

		public Task<SourceResponse<TDocument>> GetSourceAsync<TDocument>(SourceRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SourceRequest, SourceResponse<TDocument>>(request, cancellationToken);
		}

		public SourceResponse<TDocument> GetSource<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<SourceRequestDescriptor<TDocument>> configureRequest = null)
		{
			var descriptor = new SourceRequestDescriptor<TDocument>(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SourceRequestDescriptor<TDocument>, SourceResponse<TDocument>>(descriptor);
		}

		public Task<SourceResponse<TDocument>> GetSourceAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<SourceRequestDescriptor<TDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SourceRequestDescriptor<TDocument>(index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SourceRequestDescriptor<TDocument>, SourceResponse<TDocument>>(descriptor);
		}

		public TermsEnumResponse TermsEnum(TermsEnumRequest request)
		{
			request.BeforeRequest();
			return DoRequest<TermsEnumRequest, TermsEnumResponse>(request);
		}

		public Task<TermsEnumResponse> TermsEnumAsync(TermsEnumRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<TermsEnumRequest, TermsEnumResponse>(request, cancellationToken);
		}

		public TermsEnumResponse TermsEnum(Elastic.Clients.Elasticsearch.IndexName index, Action<TermsEnumRequestDescriptor> configureRequest = null)
		{
			var descriptor = new TermsEnumRequestDescriptor(index);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<TermsEnumRequestDescriptor, TermsEnumResponse>(descriptor);
		}

		public Task<TermsEnumResponse> TermsEnumAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<TermsEnumRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new TermsEnumRequestDescriptor(index);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<TermsEnumRequestDescriptor, TermsEnumResponse>(descriptor);
		}

		public UpdateByQueryResponse UpdateByQuery(UpdateByQueryRequest request)
		{
			request.BeforeRequest();
			return DoRequest<UpdateByQueryRequest, UpdateByQueryResponse>(request);
		}

		public Task<UpdateByQueryResponse> UpdateByQueryAsync(UpdateByQueryRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<UpdateByQueryRequest, UpdateByQueryResponse>(request, cancellationToken);
		}

		public UpdateByQueryResponse UpdateByQuery(Elastic.Clients.Elasticsearch.Indices indices, Action<UpdateByQueryRequestDescriptor> configureRequest = null)
		{
			var descriptor = new UpdateByQueryRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<UpdateByQueryRequestDescriptor, UpdateByQueryResponse>(descriptor);
		}

		public Task<UpdateByQueryResponse> UpdateByQueryAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<UpdateByQueryRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new UpdateByQueryRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<UpdateByQueryRequestDescriptor, UpdateByQueryResponse>(descriptor);
		}

		public UpdateByQueryRethrottleResponse UpdateByQueryRethrottle(UpdateByQueryRethrottleRequest request)
		{
			request.BeforeRequest();
			return DoRequest<UpdateByQueryRethrottleRequest, UpdateByQueryRethrottleResponse>(request);
		}

		public Task<UpdateByQueryRethrottleResponse> UpdateByQueryRethrottleAsync(UpdateByQueryRethrottleRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<UpdateByQueryRethrottleRequest, UpdateByQueryRethrottleResponse>(request, cancellationToken);
		}

		public UpdateByQueryRethrottleResponse UpdateByQueryRethrottle(Elastic.Clients.Elasticsearch.Id task_id, Action<UpdateByQueryRethrottleRequestDescriptor> configureRequest = null)
		{
			var descriptor = new UpdateByQueryRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<UpdateByQueryRethrottleRequestDescriptor, UpdateByQueryRethrottleResponse>(descriptor);
		}

		public Task<UpdateByQueryRethrottleResponse> UpdateByQueryRethrottleAsync(Elastic.Clients.Elasticsearch.Id task_id, Action<UpdateByQueryRethrottleRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new UpdateByQueryRethrottleRequestDescriptor(task_id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<UpdateByQueryRethrottleRequestDescriptor, UpdateByQueryRethrottleResponse>(descriptor);
		}

		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(UpdateRequest<TDocument, TPartialDocument> request)
		{
			request.BeforeRequest();
			return DoRequest<UpdateRequest<TDocument, TPartialDocument>, UpdateResponse<TDocument>>(request);
		}

		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(UpdateRequest<TDocument, TPartialDocument> request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<UpdateRequest<TDocument, TPartialDocument>, UpdateResponse<TDocument>>(request, cancellationToken);
		}

		public UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<UpdateRequestDescriptor<TDocument, TPartialDocument>> configureRequest = null)
		{
			var descriptor = new UpdateRequestDescriptor<TDocument, TPartialDocument>(document, index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<UpdateRequestDescriptor<TDocument, TPartialDocument>, UpdateResponse<TDocument>>(descriptor);
		}

		public Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(TDocument document, TPartialDocument partialDocument, Elastic.Clients.Elasticsearch.IndexName index, Elastic.Clients.Elasticsearch.Id id, Action<UpdateRequestDescriptor<TDocument, TPartialDocument>> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new UpdateRequestDescriptor<TDocument, TPartialDocument>(document, index, id);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<UpdateRequestDescriptor<TDocument, TPartialDocument>, UpdateResponse<TDocument>>(descriptor);
		}
	}
}