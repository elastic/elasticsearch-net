// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Linq;
using Elastic.Clients.Elasticsearch.Serialization;

namespace Elastic.Clients.Elasticsearch.Synonyms;

public partial class SynonymsNamespacedClient : Elastic.Clients.Elasticsearch.NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="Elastic.Clients.Elasticsearch.Synonyms.SynonymsNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected SynonymsNamespacedClient() : base()
	{
	}

	internal SynonymsNamespacedClient(Elastic.Clients.Elasticsearch.ElasticsearchClient client) : base(client)
	{
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse DeleteSynonym(Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse> DeleteSynonymAsync(Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse DeleteSynonym(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse> DeleteSynonymAsync(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse DeleteSynonymRule(Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse> DeleteSynonymRuleAsync(Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse DeleteSynonymRule(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse> DeleteSynonymRuleAsync(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.DeleteSynonymRuleRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse GetSynonym(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse> GetSynonymAsync(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse GetSynonym(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse> GetSynonymAsync(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse GetSynonymRule(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse> GetSynonymRuleAsync(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse GetSynonymRule(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse> GetSynonymRuleAsync(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymRuleRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse GetSynonymsSets(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse> GetSynonymsSetsAsync(Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse GetSynonymsSets()
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse GetSynonymsSets(System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse> GetSynonymsSetsAsync(System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor();
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request, cancellationToken);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse> GetSynonymsSetsAsync(System.Action<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestDescriptor();
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequest, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsResponse, Elastic.Clients.Elasticsearch.Synonyms.GetSynonymsSetsRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse PutSynonym(Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse> PutSynonymAsync(Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse PutSynonym(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse> PutSynonymAsync(Elastic.Clients.Elasticsearch.Id id, System.Action<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestDescriptor(id);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse PutSynonymRule(Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse> PutSynonymRuleAsync(Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest request, System.Threading.CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestParameters>(request, cancellationToken);
	}

	public virtual Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse PutSynonymRule(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestDescriptor> action)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequest<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestParameters>(request);
	}

	public virtual System.Threading.Tasks.Task<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse> PutSynonymRuleAsync(Elastic.Clients.Elasticsearch.Id setId, Elastic.Clients.Elasticsearch.Id ruleId, System.Action<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestDescriptor> action, System.Threading.CancellationToken cancellationToken = default)
	{
		var builder = new Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestDescriptor(setId, ruleId);
		action.Invoke(builder);
		var request = builder.Instance;
		request.BeforeRequest();
		return DoRequestAsync<Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequest, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleResponse, Elastic.Clients.Elasticsearch.Synonyms.PutSynonymRuleRequestParameters>(request, cancellationToken);
	}
}