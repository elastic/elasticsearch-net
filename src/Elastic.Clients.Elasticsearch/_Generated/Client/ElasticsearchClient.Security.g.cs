// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	public class SecurityNamespace : NamespacedClientProxy
	{
		internal SecurityNamespace(ElasticsearchClient client) : base(client)
		{
		}

		public SecurityClearApiKeyCacheResponse ClearApiKeyCache(SecurityClearApiKeyCacheRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityClearApiKeyCacheRequest, SecurityClearApiKeyCacheResponse>(request);
		}

		public Task<SecurityClearApiKeyCacheResponse> ClearApiKeyCacheAsync(SecurityClearApiKeyCacheRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityClearApiKeyCacheRequest, SecurityClearApiKeyCacheResponse>(request, cancellationToken);
		}

		public SecurityClearApiKeyCacheResponse ClearApiKeyCache(Elastic.Clients.Elasticsearch.Ids ids, Action<SecurityClearApiKeyCacheRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityClearApiKeyCacheRequestDescriptor(ids);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityClearApiKeyCacheRequestDescriptor, SecurityClearApiKeyCacheResponse>(descriptor);
		}

		public Task<SecurityClearApiKeyCacheResponse> ClearApiKeyCacheAsync(Elastic.Clients.Elasticsearch.Ids ids, Action<SecurityClearApiKeyCacheRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityClearApiKeyCacheRequestDescriptor(ids);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityClearApiKeyCacheRequestDescriptor, SecurityClearApiKeyCacheResponse>(descriptor);
		}

		public SecurityCreateApiKeyResponse CreateApiKey(SecurityCreateApiKeyRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityCreateApiKeyRequest, SecurityCreateApiKeyResponse>(request);
		}

		public Task<SecurityCreateApiKeyResponse> CreateApiKeyAsync(SecurityCreateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityCreateApiKeyRequest, SecurityCreateApiKeyResponse>(request, cancellationToken);
		}

		public SecurityCreateApiKeyResponse CreateApiKey(Action<SecurityCreateApiKeyRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityCreateApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityCreateApiKeyRequestDescriptor, SecurityCreateApiKeyResponse>(descriptor);
		}

		public Task<SecurityCreateApiKeyResponse> CreateApiKeyAsync(Action<SecurityCreateApiKeyRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityCreateApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityCreateApiKeyRequestDescriptor, SecurityCreateApiKeyResponse>(descriptor);
		}

		public SecurityGetApiKeyResponse GetApiKey(SecurityGetApiKeyRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityGetApiKeyRequest, SecurityGetApiKeyResponse>(request);
		}

		public Task<SecurityGetApiKeyResponse> GetApiKeyAsync(SecurityGetApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityGetApiKeyRequest, SecurityGetApiKeyResponse>(request, cancellationToken);
		}

		public SecurityGetApiKeyResponse GetApiKey(Action<SecurityGetApiKeyRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityGetApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityGetApiKeyRequestDescriptor, SecurityGetApiKeyResponse>(descriptor);
		}

		public Task<SecurityGetApiKeyResponse> GetApiKeyAsync(Action<SecurityGetApiKeyRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityGetApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityGetApiKeyRequestDescriptor, SecurityGetApiKeyResponse>(descriptor);
		}

		public SecurityGrantApiKeyResponse GrantApiKey(SecurityGrantApiKeyRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityGrantApiKeyRequest, SecurityGrantApiKeyResponse>(request);
		}

		public Task<SecurityGrantApiKeyResponse> GrantApiKeyAsync(SecurityGrantApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityGrantApiKeyRequest, SecurityGrantApiKeyResponse>(request, cancellationToken);
		}

		public SecurityGrantApiKeyResponse GrantApiKey(Action<SecurityGrantApiKeyRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityGrantApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityGrantApiKeyRequestDescriptor, SecurityGrantApiKeyResponse>(descriptor);
		}

		public Task<SecurityGrantApiKeyResponse> GrantApiKeyAsync(Action<SecurityGrantApiKeyRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityGrantApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityGrantApiKeyRequestDescriptor, SecurityGrantApiKeyResponse>(descriptor);
		}

		public SecurityInvalidateApiKeyResponse InvalidateApiKey(SecurityInvalidateApiKeyRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityInvalidateApiKeyRequest, SecurityInvalidateApiKeyResponse>(request);
		}

		public Task<SecurityInvalidateApiKeyResponse> InvalidateApiKeyAsync(SecurityInvalidateApiKeyRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityInvalidateApiKeyRequest, SecurityInvalidateApiKeyResponse>(request, cancellationToken);
		}

		public SecurityInvalidateApiKeyResponse InvalidateApiKey(Action<SecurityInvalidateApiKeyRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityInvalidateApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityInvalidateApiKeyRequestDescriptor, SecurityInvalidateApiKeyResponse>(descriptor);
		}

		public Task<SecurityInvalidateApiKeyResponse> InvalidateApiKeyAsync(Action<SecurityInvalidateApiKeyRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityInvalidateApiKeyRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityInvalidateApiKeyRequestDescriptor, SecurityInvalidateApiKeyResponse>(descriptor);
		}

		public SecurityQueryApiKeysResponse QueryApiKeys(SecurityQueryApiKeysRequest request)
		{
			request.BeforeRequest();
			return DoRequest<SecurityQueryApiKeysRequest, SecurityQueryApiKeysResponse>(request);
		}

		public Task<SecurityQueryApiKeysResponse> QueryApiKeysAsync(SecurityQueryApiKeysRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<SecurityQueryApiKeysRequest, SecurityQueryApiKeysResponse>(request, cancellationToken);
		}

		public SecurityQueryApiKeysResponse QueryApiKeys(Action<SecurityQueryApiKeysRequestDescriptor> configureRequest = null)
		{
			var descriptor = new SecurityQueryApiKeysRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<SecurityQueryApiKeysRequestDescriptor, SecurityQueryApiKeysResponse>(descriptor);
		}

		public Task<SecurityQueryApiKeysResponse> QueryApiKeysAsync(Action<SecurityQueryApiKeysRequestDescriptor> configureRequest = null, CancellationToken cancellationToken = default)
		{
			var descriptor = new SecurityQueryApiKeysRequestDescriptor();
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<SecurityQueryApiKeysRequestDescriptor, SecurityQueryApiKeysResponse>(descriptor);
		}
	}
}