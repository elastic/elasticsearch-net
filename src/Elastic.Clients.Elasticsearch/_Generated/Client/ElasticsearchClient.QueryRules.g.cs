// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.QueryRules;

public partial class QueryRulesNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="QueryRulesNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected QueryRulesNamespacedClient() : base()
	{
	}

	internal QueryRulesNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRuleResponse DeleteRule(DeleteRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<DeleteRuleRequest, DeleteRuleResponse, DeleteRuleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRuleResponse> DeleteRuleAsync(DeleteRuleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteRuleRequest, DeleteRuleResponse, DeleteRuleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRuleResponse DeleteRule(DeleteRuleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRuleResponse DeleteRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId)
	{
		var descriptor = new DeleteRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequest<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRuleResponse DeleteRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<DeleteRuleRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRuleResponse> DeleteRuleAsync(DeleteRuleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRuleResponse> DeleteRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query rule.
	/// Delete a query rule within a query ruleset.
	/// This is a destructive action that is only recoverable by re-adding the same rule with the create or update query rule API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRuleResponse> DeleteRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<DeleteRuleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRuleRequestDescriptor, DeleteRuleResponse, DeleteRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRulesetResponse DeleteRuleset(DeleteRulesetRequest request)
	{
		request.BeforeRequest();
		return DoRequest<DeleteRulesetRequest, DeleteRulesetResponse, DeleteRulesetRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRulesetResponse> DeleteRulesetAsync(DeleteRulesetRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteRulesetRequest, DeleteRulesetResponse, DeleteRulesetRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRulesetResponse DeleteRuleset(DeleteRulesetRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRulesetResponse DeleteRuleset(Elastic.Clients.Elasticsearch.Id rulesetId)
	{
		var descriptor = new DeleteRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequest<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteRulesetResponse DeleteRuleset(Elastic.Clients.Elasticsearch.Id rulesetId, Action<DeleteRulesetRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRulesetResponse> DeleteRulesetAsync(DeleteRulesetRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRulesetResponse> DeleteRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a query ruleset.
	/// Remove a query ruleset and its associated data.
	/// This is a destructive action that is not recoverable.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/delete-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteRulesetResponse> DeleteRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Action<DeleteRulesetRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteRulesetRequestDescriptor, DeleteRulesetResponse, DeleteRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRuleResponse GetRule(GetRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetRuleRequest, GetRuleResponse, GetRuleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRuleResponse> GetRuleAsync(GetRuleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetRuleRequest, GetRuleResponse, GetRuleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRuleResponse GetRule(GetRuleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRuleResponse GetRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId)
	{
		var descriptor = new GetRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequest<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRuleResponse GetRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<GetRuleRequestDescriptor> configureRequest)
	{
		var descriptor = new GetRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRuleResponse> GetRuleAsync(GetRuleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRuleResponse> GetRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query rule.
	/// Get details about a query rule within a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRuleResponse> GetRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<GetRuleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRuleRequestDescriptor, GetRuleResponse, GetRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRulesetResponse GetRuleset(GetRulesetRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetRulesetRequest, GetRulesetResponse, GetRulesetRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRulesetResponse> GetRulesetAsync(GetRulesetRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetRulesetRequest, GetRulesetResponse, GetRulesetRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRulesetResponse GetRuleset(GetRulesetRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRulesetResponse GetRuleset(Elastic.Clients.Elasticsearch.Id rulesetId)
	{
		var descriptor = new GetRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequest<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetRulesetResponse GetRuleset(Elastic.Clients.Elasticsearch.Id rulesetId, Action<GetRulesetRequestDescriptor> configureRequest)
	{
		var descriptor = new GetRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRulesetResponse> GetRulesetAsync(GetRulesetRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRulesetResponse> GetRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get a query ruleset.
	/// Get details about a query ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/get-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetRulesetResponse> GetRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Action<GetRulesetRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetRulesetRequestDescriptor, GetRulesetResponse, GetRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ListRulesetsResponse ListRulesets(ListRulesetsRequest request)
	{
		request.BeforeRequest();
		return DoRequest<ListRulesetsRequest, ListRulesetsResponse, ListRulesetsRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListRulesetsResponse> ListRulesetsAsync(ListRulesetsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ListRulesetsRequest, ListRulesetsResponse, ListRulesetsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ListRulesetsResponse ListRulesets(ListRulesetsRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ListRulesetsResponse ListRulesets()
	{
		var descriptor = new ListRulesetsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ListRulesetsResponse ListRulesets(Action<ListRulesetsRequestDescriptor> configureRequest)
	{
		var descriptor = new ListRulesetsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListRulesetsResponse> ListRulesetsAsync(ListRulesetsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListRulesetsResponse> ListRulesetsAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new ListRulesetsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get all query rulesets.
	/// Get summarized information about the query rulesets.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/list-query-rulesets.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListRulesetsResponse> ListRulesetsAsync(Action<ListRulesetsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ListRulesetsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRulesetsRequestDescriptor, ListRulesetsResponse, ListRulesetsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRuleResponse PutRule(PutRuleRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PutRuleRequest, PutRuleResponse, PutRuleRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRuleResponse> PutRuleAsync(PutRuleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutRuleRequest, PutRuleResponse, PutRuleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRuleResponse PutRule(PutRuleRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRuleResponse PutRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId)
	{
		var descriptor = new PutRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequest<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRuleResponse PutRule(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<PutRuleRequestDescriptor> configureRequest)
	{
		var descriptor = new PutRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRuleResponse> PutRuleAsync(PutRuleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRuleResponse> PutRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutRuleRequestDescriptor(rulesetId, ruleId);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query rule.
	/// Create or update a query rule within a query ruleset.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only pin documents using ids or docs, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-rule.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRuleResponse> PutRuleAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Elastic.Clients.Elasticsearch.Id ruleId, Action<PutRuleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutRuleRequestDescriptor(rulesetId, ruleId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRuleRequestDescriptor, PutRuleResponse, PutRuleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRulesetResponse PutRuleset(PutRulesetRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PutRulesetRequest, PutRulesetResponse, PutRulesetRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRulesetResponse> PutRulesetAsync(PutRulesetRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutRulesetRequest, PutRulesetResponse, PutRulesetRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRulesetResponse PutRuleset(PutRulesetRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRulesetResponse PutRuleset(Elastic.Clients.Elasticsearch.Id rulesetId)
	{
		var descriptor = new PutRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequest<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutRulesetResponse PutRuleset(Elastic.Clients.Elasticsearch.Id rulesetId, Action<PutRulesetRequestDescriptor> configureRequest)
	{
		var descriptor = new PutRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRulesetResponse> PutRulesetAsync(PutRulesetRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRulesetResponse> PutRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutRulesetRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a query ruleset.
	/// There is a limit of 100 rules per ruleset.
	/// This limit can be increased by using the <c>xpack.applications.rules.max_rules_per_ruleset</c> cluster setting.
	/// </para>
	/// <para>
	/// IMPORTANT: Due to limitations within pinned queries, you can only select documents using <c>ids</c> or <c>docs</c>, but cannot use both in single rule.
	/// It is advised to use one or the other in query rulesets, to avoid errors.
	/// Additionally, pinned queries have a maximum limit of 100 pinned hits.
	/// If multiple matching rules pin more than 100 documents, only the first 100 documents are pinned in the order they are specified in the ruleset.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/put-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutRulesetResponse> PutRulesetAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Action<PutRulesetRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutRulesetRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutRulesetRequestDescriptor, PutRulesetResponse, PutRulesetRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual TestResponse Test(TestRequest request)
	{
		request.BeforeRequest();
		return DoRequest<TestRequest, TestResponse, TestRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<TestResponse> TestAsync(TestRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<TestRequest, TestResponse, TestRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual TestResponse Test(TestRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual TestResponse Test(Elastic.Clients.Elasticsearch.Id rulesetId)
	{
		var descriptor = new TestRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequest<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual TestResponse Test(Elastic.Clients.Elasticsearch.Id rulesetId, Action<TestRequestDescriptor> configureRequest)
	{
		var descriptor = new TestRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<TestResponse> TestAsync(TestRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<TestResponse> TestAsync(Elastic.Clients.Elasticsearch.Id rulesetId, CancellationToken cancellationToken = default)
	{
		var descriptor = new TestRequestDescriptor(rulesetId);
		descriptor.BeforeRequest();
		return DoRequestAsync<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Test a query ruleset.
	/// Evaluate match criteria against a query ruleset to identify the rules that would match that criteria.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/test-query-ruleset.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<TestResponse> TestAsync(Elastic.Clients.Elasticsearch.Id rulesetId, Action<TestRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new TestRequestDescriptor(rulesetId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<TestRequestDescriptor, TestResponse, TestRequestParameters>(descriptor, cancellationToken);
	}
}