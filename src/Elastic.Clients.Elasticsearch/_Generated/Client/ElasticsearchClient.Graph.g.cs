// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Graph
{
	public class GraphNamespace : NamespacedClientProxy
	{
		internal GraphNamespace(ElasticsearchClient client) : base(client)
		{
		}

		public GraphExploreResponse Explore(GraphExploreRequest request)
		{
			request.BeforeRequest();
			return DoRequest<GraphExploreRequest, GraphExploreResponse>(request);
		}

		public Task<GraphExploreResponse> ExploreAsync(GraphExploreRequest request, CancellationToken cancellationToken = default)
		{
			request.BeforeRequest();
			return DoRequestAsync<GraphExploreRequest, GraphExploreResponse>(request, cancellationToken);
		}

		public GraphExploreResponse Explore(Elastic.Clients.Elasticsearch.Indices indices)
		{
			var descriptor = new GraphExploreRequestDescriptor(indices);
			descriptor.BeforeRequest();
			return DoRequest<GraphExploreRequestDescriptor, GraphExploreResponse>(descriptor);
		}

		public GraphExploreResponse Explore(Elastic.Clients.Elasticsearch.Indices indices, Action<GraphExploreRequestDescriptor> configureRequest)
		{
			var descriptor = new GraphExploreRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<GraphExploreRequestDescriptor, GraphExploreResponse>(descriptor);
		}

		public GraphExploreResponse Explore<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<GraphExploreRequestDescriptor<TDocument>> configureRequest)
		{
			var descriptor = new GraphExploreRequestDescriptor<TDocument>(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequest<GraphExploreRequestDescriptor<TDocument>, GraphExploreResponse>(descriptor);
		}

		public Task<GraphExploreResponse> ExploreAsync(Elastic.Clients.Elasticsearch.Indices indices, CancellationToken cancellationToken = default)
		{
			var descriptor = new GraphExploreRequestDescriptor(indices);
			descriptor.BeforeRequest();
			return DoRequestAsync<GraphExploreRequestDescriptor, GraphExploreResponse>(descriptor);
		}

		public Task<GraphExploreResponse> ExploreAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<GraphExploreRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
		{
			var descriptor = new GraphExploreRequestDescriptor(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<GraphExploreRequestDescriptor, GraphExploreResponse>(descriptor);
		}

		public Task<GraphExploreResponse> ExploreAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<GraphExploreRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
		{
			var descriptor = new GraphExploreRequestDescriptor<TDocument>(indices);
			configureRequest?.Invoke(descriptor);
			descriptor.BeforeRequest();
			return DoRequestAsync<GraphExploreRequestDescriptor<TDocument>, GraphExploreResponse>(descriptor);
		}
	}
}