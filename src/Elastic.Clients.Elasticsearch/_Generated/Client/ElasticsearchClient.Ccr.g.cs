// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.CrossClusterReplication;

public partial class CrossClusterReplicationNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="CrossClusterReplicationNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected CrossClusterReplicationNamespacedClient() : base()
	{
	}

	internal CrossClusterReplicationNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteAutoFollowPatternResponse DeleteAutoFollowPattern(DeleteAutoFollowPatternRequest request)
	{
		request.BeforeRequest();
		return DoRequest<DeleteAutoFollowPatternRequest, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteAutoFollowPatternResponse> DeleteAutoFollowPatternAsync(DeleteAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteAutoFollowPatternRequest, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteAutoFollowPatternResponse DeleteAutoFollowPattern(DeleteAutoFollowPatternRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteAutoFollowPatternResponse DeleteAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new DeleteAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual DeleteAutoFollowPatternResponse DeleteAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name, Action<DeleteAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new DeleteAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteAutoFollowPatternResponse> DeleteAutoFollowPatternAsync(DeleteAutoFollowPatternRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteAutoFollowPatternResponse> DeleteAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete auto-follow patterns.
	/// </para>
	/// <para>
	/// Delete a collection of cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-delete-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteAutoFollowPatternResponse> DeleteAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, Action<DeleteAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteAutoFollowPatternRequestDescriptor, DeleteAutoFollowPatternResponse, DeleteAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow(FollowRequest request)
	{
		request.BeforeRequest();
		return DoRequest<FollowRequest, FollowResponse, FollowRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync(FollowRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<FollowRequest, FollowResponse, FollowRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow<TDocument>(FollowRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<FollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow<TDocument>()
	{
		var descriptor = new FollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow<TDocument>(Action<FollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow(FollowRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new FollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowResponse Follow(Elastic.Clients.Elasticsearch.IndexName index, Action<FollowRequestDescriptor> configureRequest)
	{
		var descriptor = new FollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync<TDocument>(FollowRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<FollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync<TDocument>(Action<FollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor<TDocument>, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync(FollowRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create a follower.
	/// Create a cross-cluster replication follower index that follows a specific leader index.
	/// When the API returns, the follower index exists and cross-cluster replication starts replicating operations from the leader index to the follower index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowResponse> FollowAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<FollowRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowRequestDescriptor, FollowResponse, FollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo(FollowInfoRequest request)
	{
		request.BeforeRequest();
		return DoRequest<FollowInfoRequest, FollowInfoResponse, FollowInfoRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync(FollowInfoRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<FollowInfoRequest, FollowInfoResponse, FollowInfoRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo<TDocument>(FollowInfoRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo<TDocument>(Elastic.Clients.Elasticsearch.Indices indices)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>(indices);
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowInfoRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo<TDocument>()
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo<TDocument>(Action<FollowInfoRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo(FollowInfoRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo(Elastic.Clients.Elasticsearch.Indices indices)
	{
		var descriptor = new FollowInfoRequestDescriptor(indices);
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowInfoResponse FollowInfo(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowInfoRequestDescriptor> configureRequest)
	{
		var descriptor = new FollowInfoRequestDescriptor(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync<TDocument>(FollowInfoRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>(indices);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowInfoRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync<TDocument>(Action<FollowInfoRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor<TDocument>, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync(FollowInfoRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync(Elastic.Clients.Elasticsearch.Indices indices, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor(indices);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower information.
	/// </para>
	/// <para>
	/// Get information about all cross-cluster replication follower indices.
	/// For example, the results include follower index names, leader index names, replication options, and whether the follower indices are active or paused.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowInfoResponse> FollowInfoAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowInfoRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowInfoRequestDescriptor(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowInfoRequestDescriptor, FollowInfoResponse, FollowInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats(FollowStatsRequest request)
	{
		request.BeforeRequest();
		return DoRequest<FollowStatsRequest, FollowStatsResponse, FollowStatsRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync(FollowStatsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<FollowStatsRequest, FollowStatsResponse, FollowStatsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats<TDocument>(FollowStatsRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats<TDocument>(Elastic.Clients.Elasticsearch.Indices indices)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>(indices);
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowStatsRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats<TDocument>()
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats<TDocument>(Action<FollowStatsRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats(FollowStatsRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats(Elastic.Clients.Elasticsearch.Indices indices)
	{
		var descriptor = new FollowStatsRequestDescriptor(indices);
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual FollowStatsResponse FollowStats(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowStatsRequestDescriptor> configureRequest)
	{
		var descriptor = new FollowStatsRequestDescriptor(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync<TDocument>(FollowStatsRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>(indices);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync<TDocument>(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowStatsRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync<TDocument>(Action<FollowStatsRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor<TDocument>, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync(FollowStatsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync(Elastic.Clients.Elasticsearch.Indices indices, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor(indices);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get follower stats.
	/// </para>
	/// <para>
	/// Get cross-cluster replication follower stats.
	/// The API returns shard-level stats about the "following tasks" associated with each shard for the specified indices.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-follow-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<FollowStatsResponse> FollowStatsAsync(Elastic.Clients.Elasticsearch.Indices indices, Action<FollowStatsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new FollowStatsRequestDescriptor(indices);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<FollowStatsRequestDescriptor, FollowStatsResponse, FollowStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower(ForgetFollowerRequest request)
	{
		request.BeforeRequest();
		return DoRequest<ForgetFollowerRequest, ForgetFollowerResponse, ForgetFollowerRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync(ForgetFollowerRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequest, ForgetFollowerResponse, ForgetFollowerRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower<TDocument>(ForgetFollowerRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<ForgetFollowerRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower<TDocument>()
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower<TDocument>(Action<ForgetFollowerRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower(ForgetFollowerRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new ForgetFollowerRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ForgetFollowerResponse ForgetFollower(Elastic.Clients.Elasticsearch.IndexName index, Action<ForgetFollowerRequestDescriptor> configureRequest)
	{
		var descriptor = new ForgetFollowerRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync<TDocument>(ForgetFollowerRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<ForgetFollowerRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync<TDocument>(Action<ForgetFollowerRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor<TDocument>, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync(ForgetFollowerRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Forget a follower.
	/// Remove the cross-cluster replication follower retention leases from the leader.
	/// </para>
	/// <para>
	/// A following index takes out retention leases on its leader index.
	/// These leases are used to increase the likelihood that the shards of the leader index retain the history of operations that the shards of the following index need to run replication.
	/// When a follower index is converted to a regular index by the unfollow API (either by directly calling the API or by index lifecycle management tasks), these leases are removed.
	/// However, removal of the leases can fail, for example when the remote cluster containing the leader index is unavailable.
	/// While the leases will eventually expire on their own, their extended existence can cause the leader index to hold more history than necessary and prevent index lifecycle management from performing some operations on the leader index.
	/// This API exists to enable manually removing the leases when the unfollow API is unable to do so.
	/// </para>
	/// <para>
	/// NOTE: This API does not stop replication by a following index. If you use this API with a follower index that is still actively following, the following index will add back retention leases on the leader.
	/// The only purpose of this API is to handle the case of failure to remove the following retention leases after the unfollow API is invoked.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-forget-follower.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ForgetFollowerResponse> ForgetFollowerAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<ForgetFollowerRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ForgetFollowerRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ForgetFollowerRequestDescriptor, ForgetFollowerResponse, ForgetFollowerRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern(GetAutoFollowPatternRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequest, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(GetAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequest, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern(GetAutoFollowPatternRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern(Elastic.Clients.Elasticsearch.Name? name)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern(Elastic.Clients.Elasticsearch.Name? name, Action<GetAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern()
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual GetAutoFollowPatternResponse GetAutoFollowPattern(Action<GetAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(GetAutoFollowPatternRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name? name, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name? name, Action<GetAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get auto-follow patterns.
	/// </para>
	/// <para>
	/// Get cross-cluster replication auto-follow patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetAutoFollowPatternResponse> GetAutoFollowPatternAsync(Action<GetAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetAutoFollowPatternRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetAutoFollowPatternRequestDescriptor, GetAutoFollowPatternResponse, GetAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseAutoFollowPatternResponse PauseAutoFollowPattern(PauseAutoFollowPatternRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PauseAutoFollowPatternRequest, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseAutoFollowPatternResponse> PauseAutoFollowPatternAsync(PauseAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PauseAutoFollowPatternRequest, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseAutoFollowPatternResponse PauseAutoFollowPattern(PauseAutoFollowPatternRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseAutoFollowPatternResponse PauseAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new PauseAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseAutoFollowPatternResponse PauseAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name, Action<PauseAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new PauseAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseAutoFollowPatternResponse> PauseAutoFollowPatternAsync(PauseAutoFollowPatternRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseAutoFollowPatternResponse> PauseAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause an auto-follow pattern.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication auto-follow pattern.
	/// When the API returns, the auto-follow pattern is inactive.
	/// New indices that are created on the remote cluster and match the auto-follow patterns are ignored.
	/// </para>
	/// <para>
	/// You can resume auto-following with the resume auto-follow pattern API.
	/// When it resumes, the auto-follow pattern is active again and automatically configures follower indices for newly created indices on the remote cluster that match its patterns.
	/// Remote indices that were created while the pattern was paused will also be followed, unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-pause-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseAutoFollowPatternResponse> PauseAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, Action<PauseAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseAutoFollowPatternRequestDescriptor, PauseAutoFollowPatternResponse, PauseAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow(PauseFollowRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PauseFollowRequest, PauseFollowResponse, PauseFollowRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync(PauseFollowRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PauseFollowRequest, PauseFollowResponse, PauseFollowRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow<TDocument>(PauseFollowRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<PauseFollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow<TDocument>()
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow<TDocument>(Action<PauseFollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow(PauseFollowRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new PauseFollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PauseFollowResponse PauseFollow(Elastic.Clients.Elasticsearch.IndexName index, Action<PauseFollowRequestDescriptor> configureRequest)
	{
		var descriptor = new PauseFollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync<TDocument>(PauseFollowRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<PauseFollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync<TDocument>(Action<PauseFollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor<TDocument>, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync(PauseFollowRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Pause a follower.
	/// </para>
	/// <para>
	/// Pause a cross-cluster replication follower index.
	/// The follower index will not fetch any additional operations from the leader index.
	/// You can resume following with the resume follower API.
	/// You can pause and resume a follower index to change the configuration of the following task.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-pause-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PauseFollowResponse> PauseFollowAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<PauseFollowRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PauseFollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PauseFollowRequestDescriptor, PauseFollowResponse, PauseFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutAutoFollowPatternResponse PutAutoFollowPattern(PutAutoFollowPatternRequest request)
	{
		request.BeforeRequest();
		return DoRequest<PutAutoFollowPatternRequest, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutAutoFollowPatternResponse> PutAutoFollowPatternAsync(PutAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutAutoFollowPatternRequest, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutAutoFollowPatternResponse PutAutoFollowPattern(PutAutoFollowPatternRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutAutoFollowPatternResponse PutAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new PutAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual PutAutoFollowPatternResponse PutAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name, Action<PutAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new PutAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutAutoFollowPatternResponse> PutAutoFollowPatternAsync(PutAutoFollowPatternRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutAutoFollowPatternResponse> PutAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update auto-follow patterns.
	/// Create a collection of cross-cluster replication auto-follow patterns for a remote cluster.
	/// Newly created indices on the remote cluster that match any of the patterns are automatically configured as follower indices.
	/// Indices on the remote cluster that were created before the auto-follow pattern was created will not be auto-followed even if they match the pattern.
	/// </para>
	/// <para>
	/// This API can also be used to update auto-follow patterns.
	/// NOTE: Follower indices that were configured automatically before updating an auto-follow pattern will remain unchanged even if they do not match against the new patterns.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-put-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutAutoFollowPatternResponse> PutAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, Action<PutAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutAutoFollowPatternRequestDescriptor, PutAutoFollowPatternResponse, PutAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeAutoFollowPatternResponse ResumeAutoFollowPattern(ResumeAutoFollowPatternRequest request)
	{
		request.BeforeRequest();
		return DoRequest<ResumeAutoFollowPatternRequest, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeAutoFollowPatternResponse> ResumeAutoFollowPatternAsync(ResumeAutoFollowPatternRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ResumeAutoFollowPatternRequest, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeAutoFollowPatternResponse ResumeAutoFollowPattern(ResumeAutoFollowPatternRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeAutoFollowPatternResponse ResumeAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name)
	{
		var descriptor = new ResumeAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequest<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeAutoFollowPatternResponse ResumeAutoFollowPattern(Elastic.Clients.Elasticsearch.Name name, Action<ResumeAutoFollowPatternRequestDescriptor> configureRequest)
	{
		var descriptor = new ResumeAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeAutoFollowPatternResponse> ResumeAutoFollowPatternAsync(ResumeAutoFollowPatternRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeAutoFollowPatternResponse> ResumeAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeAutoFollowPatternRequestDescriptor(name);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume an auto-follow pattern.
	/// </para>
	/// <para>
	/// Resume a cross-cluster replication auto-follow pattern that was paused.
	/// The auto-follow pattern will resume configuring following indices for newly created indices that match its patterns on the remote cluster.
	/// Remote indices created while the pattern was paused will also be followed unless they have been deleted or closed in the interim.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-resume-auto-follow-pattern.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeAutoFollowPatternResponse> ResumeAutoFollowPatternAsync(Elastic.Clients.Elasticsearch.Name name, Action<ResumeAutoFollowPatternRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeAutoFollowPatternRequestDescriptor(name);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeAutoFollowPatternRequestDescriptor, ResumeAutoFollowPatternResponse, ResumeAutoFollowPatternRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow(ResumeFollowRequest request)
	{
		request.BeforeRequest();
		return DoRequest<ResumeFollowRequest, ResumeFollowResponse, ResumeFollowRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync(ResumeFollowRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequest, ResumeFollowResponse, ResumeFollowRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow<TDocument>(ResumeFollowRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<ResumeFollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow<TDocument>()
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow<TDocument>(Action<ResumeFollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow(ResumeFollowRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new ResumeFollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual ResumeFollowResponse ResumeFollow(Elastic.Clients.Elasticsearch.IndexName index, Action<ResumeFollowRequestDescriptor> configureRequest)
	{
		var descriptor = new ResumeFollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync<TDocument>(ResumeFollowRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<ResumeFollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync<TDocument>(Action<ResumeFollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor<TDocument>, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync(ResumeFollowRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Resume a follower.
	/// Resume a cross-cluster replication follower index that was paused.
	/// The follower index could have been paused with the pause follower API.
	/// Alternatively it could be paused due to replication that cannot be retried due to failures during following tasks.
	/// When this API returns, the follower index will resume fetching operations from the leader index.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-resume-follow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ResumeFollowResponse> ResumeFollowAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<ResumeFollowRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ResumeFollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ResumeFollowRequestDescriptor, ResumeFollowResponse, ResumeFollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual CcrStatsResponse Stats(CcrStatsRequest request)
	{
		request.BeforeRequest();
		return DoRequest<CcrStatsRequest, CcrStatsResponse, CcrStatsRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CcrStatsResponse> StatsAsync(CcrStatsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<CcrStatsRequest, CcrStatsResponse, CcrStatsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual CcrStatsResponse Stats(CcrStatsRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual CcrStatsResponse Stats()
	{
		var descriptor = new CcrStatsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual CcrStatsResponse Stats(Action<CcrStatsRequestDescriptor> configureRequest)
	{
		var descriptor = new CcrStatsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CcrStatsResponse> StatsAsync(CcrStatsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CcrStatsResponse> StatsAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new CcrStatsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get cross-cluster replication stats.
	/// </para>
	/// <para>
	/// This API returns stats about auto-following and the same shard-level stats as the get follower stats API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CcrStatsResponse> StatsAsync(Action<CcrStatsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new CcrStatsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<CcrStatsRequestDescriptor, CcrStatsResponse, CcrStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow(UnfollowRequest request)
	{
		request.BeforeRequest();
		return DoRequest<UnfollowRequest, UnfollowResponse, UnfollowRequestParameters>(request);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync(UnfollowRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<UnfollowRequest, UnfollowResponse, UnfollowRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow<TDocument>(UnfollowRequestDescriptor<TDocument> descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<UnfollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow<TDocument>()
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow<TDocument>(Action<UnfollowRequestDescriptor<TDocument>> configureRequest)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow(UnfollowRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow(Elastic.Clients.Elasticsearch.IndexName index)
	{
		var descriptor = new UnfollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	[Obsolete("Synchronous methods are deprecated and could be removed in the future.")]
	public virtual UnfollowResponse Unfollow(Elastic.Clients.Elasticsearch.IndexName index, Action<UnfollowRequestDescriptor> configureRequest)
	{
		var descriptor = new UnfollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync<TDocument>(UnfollowRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync<TDocument>(Elastic.Clients.Elasticsearch.IndexName index, Action<UnfollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync<TDocument>(Action<UnfollowRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor<TDocument>, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync(UnfollowRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync(Elastic.Clients.Elasticsearch.IndexName index, CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor(index);
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Unfollow an index.
	/// </para>
	/// <para>
	/// Convert a cross-cluster replication follower index to a regular index.
	/// The API stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
	/// The follower index must be paused and closed before you call the unfollow API.
	/// </para>
	/// <para>
	/// info
	/// Currently cross-cluster replication does not support converting an existing regular index to a follower index. Converting a follower index to a regular index is an irreversible operation.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.18/ccr-post-unfollow.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<UnfollowResponse> UnfollowAsync(Elastic.Clients.Elasticsearch.IndexName index, Action<UnfollowRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new UnfollowRequestDescriptor(index);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<UnfollowRequestDescriptor, UnfollowResponse, UnfollowRequestParameters>(descriptor, cancellationToken);
	}
}