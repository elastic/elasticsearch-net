// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Ssl;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Security
{
	public class SecurityNamespace : NamespacedClientProxy
	{
		internal SecurityNamespace(ElasticClient client) : base(client)
		{
		}

		public AuthenticateResponse Authenticate(IAuthenticateRequest request) => DoRequest<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters);
		public Task<AuthenticateResponse> AuthenticateAsync(IAuthenticateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IAuthenticateRequest, AuthenticateResponse>(request, request.RequestParameters, cancellationToken);
		public AuthenticateResponse Authenticate(Func<AuthenticateDescriptor, IAuthenticateRequest> selector = null) => Authenticate(selector.InvokeOrDefault(new AuthenticateDescriptor()));
		public Task<AuthenticateResponse> AuthenticateAsync(Func<AuthenticateDescriptor, IAuthenticateRequest> selector = null, CancellationToken cancellationToken = default) => AuthenticateAsync(selector.InvokeOrDefault(new AuthenticateDescriptor()), cancellationToken);
		public CertificatesResponse Certificates(ICertificatesRequest request) => DoRequest<ICertificatesRequest, CertificatesResponse>(request, request.RequestParameters);
		public Task<CertificatesResponse> CertificatesAsync(ICertificatesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICertificatesRequest, CertificatesResponse>(request, request.RequestParameters, cancellationToken);
		public CertificatesResponse Certificates(Func<CertificatesDescriptor, ICertificatesRequest> selector = null) => Certificates(selector.InvokeOrDefault(new CertificatesDescriptor()));
		public Task<CertificatesResponse> CertificatesAsync(Func<CertificatesDescriptor, ICertificatesRequest> selector = null, CancellationToken cancellationToken = default) => CertificatesAsync(selector.InvokeOrDefault(new CertificatesDescriptor()), cancellationToken);
		public ChangePasswordResponse ChangePassword(IChangePasswordRequest request) => DoRequest<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters);
		public Task<ChangePasswordResponse> ChangePasswordAsync(IChangePasswordRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IChangePasswordRequest, ChangePasswordResponse>(request, request.RequestParameters, cancellationToken);
		public ChangePasswordResponse ChangePassword(Func<ChangePasswordDescriptor, IChangePasswordRequest> selector = null) => ChangePassword(selector.InvokeOrDefault(new ChangePasswordDescriptor()));
		public Task<ChangePasswordResponse> ChangePasswordAsync(Func<ChangePasswordDescriptor, IChangePasswordRequest> selector = null, CancellationToken cancellationToken = default) => ChangePasswordAsync(selector.InvokeOrDefault(new ChangePasswordDescriptor()), cancellationToken);
		public ClearApiKeyCacheResponse ClearApiKeyCache(IClearApiKeyCacheRequest request) => DoRequest<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters);
		public Task<ClearApiKeyCacheResponse> ClearApiKeyCacheAsync(IClearApiKeyCacheRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearApiKeyCacheRequest, ClearApiKeyCacheResponse>(request, request.RequestParameters, cancellationToken);
		public ClearApiKeyCacheResponse ClearApiKeyCache(Elastic.Clients.Elasticsearch.Ids ids, Func<ClearApiKeyCacheDescriptor, IClearApiKeyCacheRequest> selector = null) => ClearApiKeyCache(selector.InvokeOrDefault(new ClearApiKeyCacheDescriptor(ids)));
		public Task<ClearApiKeyCacheResponse> ClearApiKeyCacheAsync(Elastic.Clients.Elasticsearch.Ids ids, Func<ClearApiKeyCacheDescriptor, IClearApiKeyCacheRequest> selector = null, CancellationToken cancellationToken = default) => ClearApiKeyCacheAsync(selector.InvokeOrDefault(new ClearApiKeyCacheDescriptor(ids)), cancellationToken);
		public ClearCachedPrivilegesResponse ClearCachedPrivileges(IClearCachedPrivilegesRequest request) => DoRequest<IClearCachedPrivilegesRequest, ClearCachedPrivilegesResponse>(request, request.RequestParameters);
		public Task<ClearCachedPrivilegesResponse> ClearCachedPrivilegesAsync(IClearCachedPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCachedPrivilegesRequest, ClearCachedPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCachedPrivilegesResponse ClearCachedPrivileges(Elastic.Clients.Elasticsearch.Name application, Func<ClearCachedPrivilegesDescriptor, IClearCachedPrivilegesRequest> selector = null) => ClearCachedPrivileges(selector.InvokeOrDefault(new ClearCachedPrivilegesDescriptor(application)));
		public Task<ClearCachedPrivilegesResponse> ClearCachedPrivilegesAsync(Elastic.Clients.Elasticsearch.Name application, Func<ClearCachedPrivilegesDescriptor, IClearCachedPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => ClearCachedPrivilegesAsync(selector.InvokeOrDefault(new ClearCachedPrivilegesDescriptor(application)), cancellationToken);
		public ClearCachedRealmsResponse ClearCachedRealms(IClearCachedRealmsRequest request) => DoRequest<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters);
		public Task<ClearCachedRealmsResponse> ClearCachedRealmsAsync(IClearCachedRealmsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCachedRealmsRequest, ClearCachedRealmsResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCachedRealmsResponse ClearCachedRealms(Elastic.Clients.Elasticsearch.Names realms, Func<ClearCachedRealmsDescriptor, IClearCachedRealmsRequest> selector = null) => ClearCachedRealms(selector.InvokeOrDefault(new ClearCachedRealmsDescriptor(realms)));
		public Task<ClearCachedRealmsResponse> ClearCachedRealmsAsync(Elastic.Clients.Elasticsearch.Names realms, Func<ClearCachedRealmsDescriptor, IClearCachedRealmsRequest> selector = null, CancellationToken cancellationToken = default) => ClearCachedRealmsAsync(selector.InvokeOrDefault(new ClearCachedRealmsDescriptor(realms)), cancellationToken);
		public ClearCachedRolesResponse ClearCachedRoles(IClearCachedRolesRequest request) => DoRequest<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters);
		public Task<ClearCachedRolesResponse> ClearCachedRolesAsync(IClearCachedRolesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCachedRolesRequest, ClearCachedRolesResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCachedRolesResponse ClearCachedRoles(Elastic.Clients.Elasticsearch.Names name, Func<ClearCachedRolesDescriptor, IClearCachedRolesRequest> selector = null) => ClearCachedRoles(selector.InvokeOrDefault(new ClearCachedRolesDescriptor(name)));
		public Task<ClearCachedRolesResponse> ClearCachedRolesAsync(Elastic.Clients.Elasticsearch.Names name, Func<ClearCachedRolesDescriptor, IClearCachedRolesRequest> selector = null, CancellationToken cancellationToken = default) => ClearCachedRolesAsync(selector.InvokeOrDefault(new ClearCachedRolesDescriptor(name)), cancellationToken);
		public ClearCachedServiceTokensResponse ClearCachedServiceTokens(IClearCachedServiceTokensRequest request) => DoRequest<IClearCachedServiceTokensRequest, ClearCachedServiceTokensResponse>(request, request.RequestParameters);
		public Task<ClearCachedServiceTokensResponse> ClearCachedServiceTokensAsync(IClearCachedServiceTokensRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IClearCachedServiceTokensRequest, ClearCachedServiceTokensResponse>(request, request.RequestParameters, cancellationToken);
		public ClearCachedServiceTokensResponse ClearCachedServiceTokens(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Names name, Func<ClearCachedServiceTokensDescriptor, IClearCachedServiceTokensRequest> selector = null) => ClearCachedServiceTokens(selector.InvokeOrDefault(new ClearCachedServiceTokensDescriptor(ns, service, name)));
		public Task<ClearCachedServiceTokensResponse> ClearCachedServiceTokensAsync(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Names name, Func<ClearCachedServiceTokensDescriptor, IClearCachedServiceTokensRequest> selector = null, CancellationToken cancellationToken = default) => ClearCachedServiceTokensAsync(selector.InvokeOrDefault(new ClearCachedServiceTokensDescriptor(ns, service, name)), cancellationToken);
		public CreateApiKeyResponse CreateApiKey(ICreateApiKeyRequest request) => DoRequest<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters);
		public Task<CreateApiKeyResponse> CreateApiKeyAsync(ICreateApiKeyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateApiKeyRequest, CreateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		public CreateApiKeyResponse CreateApiKey(Func<CreateApiKeyDescriptor, ICreateApiKeyRequest> selector = null) => CreateApiKey(selector.InvokeOrDefault(new CreateApiKeyDescriptor()));
		public Task<CreateApiKeyResponse> CreateApiKeyAsync(Func<CreateApiKeyDescriptor, ICreateApiKeyRequest> selector = null, CancellationToken cancellationToken = default) => CreateApiKeyAsync(selector.InvokeOrDefault(new CreateApiKeyDescriptor()), cancellationToken);
		public CreateServiceTokenResponse CreateServiceToken(ICreateServiceTokenRequest request) => DoRequest<ICreateServiceTokenRequest, CreateServiceTokenResponse>(request, request.RequestParameters);
		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(ICreateServiceTokenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICreateServiceTokenRequest, CreateServiceTokenResponse>(request, request.RequestParameters, cancellationToken);
		public CreateServiceTokenResponse CreateServiceToken(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null) => CreateServiceToken(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service, name)));
		public CreateServiceTokenResponse CreateServiceToken(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null) => CreateServiceToken(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service)));
		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null, CancellationToken cancellationToken = default) => CreateServiceTokenAsync(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service, name)), cancellationToken);
		public Task<CreateServiceTokenResponse> CreateServiceTokenAsync(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Func<CreateServiceTokenDescriptor, ICreateServiceTokenRequest> selector = null, CancellationToken cancellationToken = default) => CreateServiceTokenAsync(selector.InvokeOrDefault(new CreateServiceTokenDescriptor(ns, service)), cancellationToken);
		public DeletePrivilegesResponse DeletePrivileges(IDeletePrivilegesRequest request) => DoRequest<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters);
		public Task<DeletePrivilegesResponse> DeletePrivilegesAsync(IDeletePrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeletePrivilegesRequest, DeletePrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public DeletePrivilegesResponse DeletePrivileges(Elastic.Clients.Elasticsearch.Name application, Elastic.Clients.Elasticsearch.Name name, Func<DeletePrivilegesDescriptor, IDeletePrivilegesRequest> selector = null) => DeletePrivileges(selector.InvokeOrDefault(new DeletePrivilegesDescriptor(application, name)));
		public Task<DeletePrivilegesResponse> DeletePrivilegesAsync(Elastic.Clients.Elasticsearch.Name application, Elastic.Clients.Elasticsearch.Name name, Func<DeletePrivilegesDescriptor, IDeletePrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => DeletePrivilegesAsync(selector.InvokeOrDefault(new DeletePrivilegesDescriptor(application, name)), cancellationToken);
		public DeleteRoleResponse DeleteRole(IDeleteRoleRequest request) => DoRequest<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters);
		public Task<DeleteRoleResponse> DeleteRoleAsync(IDeleteRoleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRoleRequest, DeleteRoleResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteRoleResponse DeleteRole(Elastic.Clients.Elasticsearch.Name name, Func<DeleteRoleDescriptor, IDeleteRoleRequest> selector = null) => DeleteRole(selector.InvokeOrDefault(new DeleteRoleDescriptor(name)));
		public Task<DeleteRoleResponse> DeleteRoleAsync(Elastic.Clients.Elasticsearch.Name name, Func<DeleteRoleDescriptor, IDeleteRoleRequest> selector = null, CancellationToken cancellationToken = default) => DeleteRoleAsync(selector.InvokeOrDefault(new DeleteRoleDescriptor(name)), cancellationToken);
		public DeleteRoleMappingResponse DeleteRoleMapping(IDeleteRoleMappingRequest request) => DoRequest<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters);
		public Task<DeleteRoleMappingResponse> DeleteRoleMappingAsync(IDeleteRoleMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRoleMappingRequest, DeleteRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteRoleMappingResponse DeleteRoleMapping(Elastic.Clients.Elasticsearch.Name name, Func<DeleteRoleMappingDescriptor, IDeleteRoleMappingRequest> selector = null) => DeleteRoleMapping(selector.InvokeOrDefault(new DeleteRoleMappingDescriptor(name)));
		public Task<DeleteRoleMappingResponse> DeleteRoleMappingAsync(Elastic.Clients.Elasticsearch.Name name, Func<DeleteRoleMappingDescriptor, IDeleteRoleMappingRequest> selector = null, CancellationToken cancellationToken = default) => DeleteRoleMappingAsync(selector.InvokeOrDefault(new DeleteRoleMappingDescriptor(name)), cancellationToken);
		public DeleteServiceTokenResponse DeleteServiceToken(IDeleteServiceTokenRequest request) => DoRequest<IDeleteServiceTokenRequest, DeleteServiceTokenResponse>(request, request.RequestParameters);
		public Task<DeleteServiceTokenResponse> DeleteServiceTokenAsync(IDeleteServiceTokenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteServiceTokenRequest, DeleteServiceTokenResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteServiceTokenResponse DeleteServiceToken(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name, Func<DeleteServiceTokenDescriptor, IDeleteServiceTokenRequest> selector = null) => DeleteServiceToken(selector.InvokeOrDefault(new DeleteServiceTokenDescriptor(ns, service, name)));
		public Task<DeleteServiceTokenResponse> DeleteServiceTokenAsync(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Service service, Elastic.Clients.Elasticsearch.Name name, Func<DeleteServiceTokenDescriptor, IDeleteServiceTokenRequest> selector = null, CancellationToken cancellationToken = default) => DeleteServiceTokenAsync(selector.InvokeOrDefault(new DeleteServiceTokenDescriptor(ns, service, name)), cancellationToken);
		public DeleteUserResponse DeleteUser(IDeleteUserRequest request) => DoRequest<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters);
		public Task<DeleteUserResponse> DeleteUserAsync(IDeleteUserRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteUserRequest, DeleteUserResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteUserResponse DeleteUser(Elastic.Clients.Elasticsearch.Username username, Func<DeleteUserDescriptor, IDeleteUserRequest> selector = null) => DeleteUser(selector.InvokeOrDefault(new DeleteUserDescriptor(username)));
		public Task<DeleteUserResponse> DeleteUserAsync(Elastic.Clients.Elasticsearch.Username username, Func<DeleteUserDescriptor, IDeleteUserRequest> selector = null, CancellationToken cancellationToken = default) => DeleteUserAsync(selector.InvokeOrDefault(new DeleteUserDescriptor(username)), cancellationToken);
		public DisableUserResponse DisableUser(IDisableUserRequest request) => DoRequest<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters);
		public Task<DisableUserResponse> DisableUserAsync(IDisableUserRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDisableUserRequest, DisableUserResponse>(request, request.RequestParameters, cancellationToken);
		public DisableUserResponse DisableUser(Elastic.Clients.Elasticsearch.Username username, Func<DisableUserDescriptor, IDisableUserRequest> selector = null) => DisableUser(selector.InvokeOrDefault(new DisableUserDescriptor(username)));
		public Task<DisableUserResponse> DisableUserAsync(Elastic.Clients.Elasticsearch.Username username, Func<DisableUserDescriptor, IDisableUserRequest> selector = null, CancellationToken cancellationToken = default) => DisableUserAsync(selector.InvokeOrDefault(new DisableUserDescriptor(username)), cancellationToken);
		public EnableUserResponse EnableUser(IEnableUserRequest request) => DoRequest<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters);
		public Task<EnableUserResponse> EnableUserAsync(IEnableUserRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IEnableUserRequest, EnableUserResponse>(request, request.RequestParameters, cancellationToken);
		public EnableUserResponse EnableUser(Elastic.Clients.Elasticsearch.Username username, Func<EnableUserDescriptor, IEnableUserRequest> selector = null) => EnableUser(selector.InvokeOrDefault(new EnableUserDescriptor(username)));
		public Task<EnableUserResponse> EnableUserAsync(Elastic.Clients.Elasticsearch.Username username, Func<EnableUserDescriptor, IEnableUserRequest> selector = null, CancellationToken cancellationToken = default) => EnableUserAsync(selector.InvokeOrDefault(new EnableUserDescriptor(username)), cancellationToken);
		public GetApiKeyResponse GetApiKey(IGetApiKeyRequest request) => DoRequest<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters);
		public Task<GetApiKeyResponse> GetApiKeyAsync(IGetApiKeyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetApiKeyRequest, GetApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		public GetApiKeyResponse GetApiKey(Func<GetApiKeyDescriptor, IGetApiKeyRequest> selector = null) => GetApiKey(selector.InvokeOrDefault(new GetApiKeyDescriptor()));
		public Task<GetApiKeyResponse> GetApiKeyAsync(Func<GetApiKeyDescriptor, IGetApiKeyRequest> selector = null, CancellationToken cancellationToken = default) => GetApiKeyAsync(selector.InvokeOrDefault(new GetApiKeyDescriptor()), cancellationToken);
		public GetBuiltinPrivilegesResponse GetBuiltinPrivileges(IGetBuiltinPrivilegesRequest request) => DoRequest<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters);
		public Task<GetBuiltinPrivilegesResponse> GetBuiltinPrivilegesAsync(IGetBuiltinPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetBuiltinPrivilegesRequest, GetBuiltinPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public GetBuiltinPrivilegesResponse GetBuiltinPrivileges(Func<GetBuiltinPrivilegesDescriptor, IGetBuiltinPrivilegesRequest> selector = null) => GetBuiltinPrivileges(selector.InvokeOrDefault(new GetBuiltinPrivilegesDescriptor()));
		public Task<GetBuiltinPrivilegesResponse> GetBuiltinPrivilegesAsync(Func<GetBuiltinPrivilegesDescriptor, IGetBuiltinPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => GetBuiltinPrivilegesAsync(selector.InvokeOrDefault(new GetBuiltinPrivilegesDescriptor()), cancellationToken);
		public GetPrivilegesResponse GetPrivileges(IGetPrivilegesRequest request) => DoRequest<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters);
		public Task<GetPrivilegesResponse> GetPrivilegesAsync(IGetPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetPrivilegesRequest, GetPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public GetPrivilegesResponse GetPrivileges(Func<GetPrivilegesDescriptor, IGetPrivilegesRequest> selector = null) => GetPrivileges(selector.InvokeOrDefault(new GetPrivilegesDescriptor()));
		public Task<GetPrivilegesResponse> GetPrivilegesAsync(Func<GetPrivilegesDescriptor, IGetPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => GetPrivilegesAsync(selector.InvokeOrDefault(new GetPrivilegesDescriptor()), cancellationToken);
		public GetRoleResponse GetRole(IGetRoleRequest request) => DoRequest<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters);
		public Task<GetRoleResponse> GetRoleAsync(IGetRoleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRoleRequest, GetRoleResponse>(request, request.RequestParameters, cancellationToken);
		public GetRoleResponse GetRole(Func<GetRoleDescriptor, IGetRoleRequest> selector = null) => GetRole(selector.InvokeOrDefault(new GetRoleDescriptor()));
		public Task<GetRoleResponse> GetRoleAsync(Func<GetRoleDescriptor, IGetRoleRequest> selector = null, CancellationToken cancellationToken = default) => GetRoleAsync(selector.InvokeOrDefault(new GetRoleDescriptor()), cancellationToken);
		public GetRoleMappingResponse GetRoleMapping(IGetRoleMappingRequest request) => DoRequest<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters);
		public Task<GetRoleMappingResponse> GetRoleMappingAsync(IGetRoleMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRoleMappingRequest, GetRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		public GetRoleMappingResponse GetRoleMapping(Func<GetRoleMappingDescriptor, IGetRoleMappingRequest> selector = null) => GetRoleMapping(selector.InvokeOrDefault(new GetRoleMappingDescriptor()));
		public Task<GetRoleMappingResponse> GetRoleMappingAsync(Func<GetRoleMappingDescriptor, IGetRoleMappingRequest> selector = null, CancellationToken cancellationToken = default) => GetRoleMappingAsync(selector.InvokeOrDefault(new GetRoleMappingDescriptor()), cancellationToken);
		public GetServiceAccountsResponse GetServiceAccounts(IGetServiceAccountsRequest request) => DoRequest<IGetServiceAccountsRequest, GetServiceAccountsResponse>(request, request.RequestParameters);
		public Task<GetServiceAccountsResponse> GetServiceAccountsAsync(IGetServiceAccountsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetServiceAccountsRequest, GetServiceAccountsResponse>(request, request.RequestParameters, cancellationToken);
		public GetServiceAccountsResponse GetServiceAccounts(Func<GetServiceAccountsDescriptor, IGetServiceAccountsRequest> selector = null) => GetServiceAccounts(selector.InvokeOrDefault(new GetServiceAccountsDescriptor()));
		public Task<GetServiceAccountsResponse> GetServiceAccountsAsync(Func<GetServiceAccountsDescriptor, IGetServiceAccountsRequest> selector = null, CancellationToken cancellationToken = default) => GetServiceAccountsAsync(selector.InvokeOrDefault(new GetServiceAccountsDescriptor()), cancellationToken);
		public GetServiceCredentialsResponse GetServiceCredentials(IGetServiceCredentialsRequest request) => DoRequest<IGetServiceCredentialsRequest, GetServiceCredentialsResponse>(request, request.RequestParameters);
		public Task<GetServiceCredentialsResponse> GetServiceCredentialsAsync(IGetServiceCredentialsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetServiceCredentialsRequest, GetServiceCredentialsResponse>(request, request.RequestParameters, cancellationToken);
		public GetServiceCredentialsResponse GetServiceCredentials(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Name service, Func<GetServiceCredentialsDescriptor, IGetServiceCredentialsRequest> selector = null) => GetServiceCredentials(selector.InvokeOrDefault(new GetServiceCredentialsDescriptor(ns, service)));
		public Task<GetServiceCredentialsResponse> GetServiceCredentialsAsync(Elastic.Clients.Elasticsearch.Namespace ns, Elastic.Clients.Elasticsearch.Name service, Func<GetServiceCredentialsDescriptor, IGetServiceCredentialsRequest> selector = null, CancellationToken cancellationToken = default) => GetServiceCredentialsAsync(selector.InvokeOrDefault(new GetServiceCredentialsDescriptor(ns, service)), cancellationToken);
		public GetTokenResponse GetToken(IGetTokenRequest request) => DoRequest<IGetTokenRequest, GetTokenResponse>(request, request.RequestParameters);
		public Task<GetTokenResponse> GetTokenAsync(IGetTokenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetTokenRequest, GetTokenResponse>(request, request.RequestParameters, cancellationToken);
		public GetTokenResponse GetToken(Func<GetTokenDescriptor, IGetTokenRequest> selector = null) => GetToken(selector.InvokeOrDefault(new GetTokenDescriptor()));
		public Task<GetTokenResponse> GetTokenAsync(Func<GetTokenDescriptor, IGetTokenRequest> selector = null, CancellationToken cancellationToken = default) => GetTokenAsync(selector.InvokeOrDefault(new GetTokenDescriptor()), cancellationToken);
		public GetUserResponse GetUser(IGetUserRequest request) => DoRequest<IGetUserRequest, GetUserResponse>(request, request.RequestParameters);
		public Task<GetUserResponse> GetUserAsync(IGetUserRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetUserRequest, GetUserResponse>(request, request.RequestParameters, cancellationToken);
		public GetUserResponse GetUser(Func<GetUserDescriptor, IGetUserRequest> selector = null) => GetUser(selector.InvokeOrDefault(new GetUserDescriptor()));
		public Task<GetUserResponse> GetUserAsync(Func<GetUserDescriptor, IGetUserRequest> selector = null, CancellationToken cancellationToken = default) => GetUserAsync(selector.InvokeOrDefault(new GetUserDescriptor()), cancellationToken);
		public GetUserPrivilegesResponse GetUserPrivileges(IGetUserPrivilegesRequest request) => DoRequest<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters);
		public Task<GetUserPrivilegesResponse> GetUserPrivilegesAsync(IGetUserPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetUserPrivilegesRequest, GetUserPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public GetUserPrivilegesResponse GetUserPrivileges(Func<GetUserPrivilegesDescriptor, IGetUserPrivilegesRequest> selector = null) => GetUserPrivileges(selector.InvokeOrDefault(new GetUserPrivilegesDescriptor()));
		public Task<GetUserPrivilegesResponse> GetUserPrivilegesAsync(Func<GetUserPrivilegesDescriptor, IGetUserPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => GetUserPrivilegesAsync(selector.InvokeOrDefault(new GetUserPrivilegesDescriptor()), cancellationToken);
		public GrantApiKeyResponse GrantApiKey(IGrantApiKeyRequest request) => DoRequest<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters);
		public Task<GrantApiKeyResponse> GrantApiKeyAsync(IGrantApiKeyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGrantApiKeyRequest, GrantApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		public GrantApiKeyResponse GrantApiKey(Func<GrantApiKeyDescriptor, IGrantApiKeyRequest> selector = null) => GrantApiKey(selector.InvokeOrDefault(new GrantApiKeyDescriptor()));
		public Task<GrantApiKeyResponse> GrantApiKeyAsync(Func<GrantApiKeyDescriptor, IGrantApiKeyRequest> selector = null, CancellationToken cancellationToken = default) => GrantApiKeyAsync(selector.InvokeOrDefault(new GrantApiKeyDescriptor()), cancellationToken);
		public HasPrivilegesResponse HasPrivileges(IHasPrivilegesRequest request) => DoRequest<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters);
		public Task<HasPrivilegesResponse> HasPrivilegesAsync(IHasPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IHasPrivilegesRequest, HasPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public HasPrivilegesResponse HasPrivileges(Func<HasPrivilegesDescriptor, IHasPrivilegesRequest> selector = null) => HasPrivileges(selector.InvokeOrDefault(new HasPrivilegesDescriptor()));
		public Task<HasPrivilegesResponse> HasPrivilegesAsync(Func<HasPrivilegesDescriptor, IHasPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => HasPrivilegesAsync(selector.InvokeOrDefault(new HasPrivilegesDescriptor()), cancellationToken);
		public InvalidateApiKeyResponse InvalidateApiKey(IInvalidateApiKeyRequest request) => DoRequest<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters);
		public Task<InvalidateApiKeyResponse> InvalidateApiKeyAsync(IInvalidateApiKeyRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IInvalidateApiKeyRequest, InvalidateApiKeyResponse>(request, request.RequestParameters, cancellationToken);
		public InvalidateApiKeyResponse InvalidateApiKey(Func<InvalidateApiKeyDescriptor, IInvalidateApiKeyRequest> selector = null) => InvalidateApiKey(selector.InvokeOrDefault(new InvalidateApiKeyDescriptor()));
		public Task<InvalidateApiKeyResponse> InvalidateApiKeyAsync(Func<InvalidateApiKeyDescriptor, IInvalidateApiKeyRequest> selector = null, CancellationToken cancellationToken = default) => InvalidateApiKeyAsync(selector.InvokeOrDefault(new InvalidateApiKeyDescriptor()), cancellationToken);
		public InvalidateTokenResponse InvalidateToken(IInvalidateTokenRequest request) => DoRequest<IInvalidateTokenRequest, InvalidateTokenResponse>(request, request.RequestParameters);
		public Task<InvalidateTokenResponse> InvalidateTokenAsync(IInvalidateTokenRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IInvalidateTokenRequest, InvalidateTokenResponse>(request, request.RequestParameters, cancellationToken);
		public InvalidateTokenResponse InvalidateToken(Func<InvalidateTokenDescriptor, IInvalidateTokenRequest> selector = null) => InvalidateToken(selector.InvokeOrDefault(new InvalidateTokenDescriptor()));
		public Task<InvalidateTokenResponse> InvalidateTokenAsync(Func<InvalidateTokenDescriptor, IInvalidateTokenRequest> selector = null, CancellationToken cancellationToken = default) => InvalidateTokenAsync(selector.InvokeOrDefault(new InvalidateTokenDescriptor()), cancellationToken);
		public PutPrivilegesResponse PutPrivileges(IPutPrivilegesRequest request) => DoRequest<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters);
		public Task<PutPrivilegesResponse> PutPrivilegesAsync(IPutPrivilegesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutPrivilegesRequest, PutPrivilegesResponse>(request, request.RequestParameters, cancellationToken);
		public PutPrivilegesResponse PutPrivileges(Func<PutPrivilegesDescriptor, IPutPrivilegesRequest> selector = null) => PutPrivileges(selector.InvokeOrDefault(new PutPrivilegesDescriptor()));
		public Task<PutPrivilegesResponse> PutPrivilegesAsync(Func<PutPrivilegesDescriptor, IPutPrivilegesRequest> selector = null, CancellationToken cancellationToken = default) => PutPrivilegesAsync(selector.InvokeOrDefault(new PutPrivilegesDescriptor()), cancellationToken);
		public PutRoleResponse PutRole(IPutRoleRequest request) => DoRequest<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters);
		public Task<PutRoleResponse> PutRoleAsync(IPutRoleRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutRoleRequest, PutRoleResponse>(request, request.RequestParameters, cancellationToken);
		public PutRoleResponse PutRole(Elastic.Clients.Elasticsearch.Name name, Func<PutRoleDescriptor, IPutRoleRequest> selector = null) => PutRole(selector.InvokeOrDefault(new PutRoleDescriptor(name)));
		public Task<PutRoleResponse> PutRoleAsync(Elastic.Clients.Elasticsearch.Name name, Func<PutRoleDescriptor, IPutRoleRequest> selector = null, CancellationToken cancellationToken = default) => PutRoleAsync(selector.InvokeOrDefault(new PutRoleDescriptor(name)), cancellationToken);
		public PutRoleMappingResponse PutRoleMapping(IPutRoleMappingRequest request) => DoRequest<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters);
		public Task<PutRoleMappingResponse> PutRoleMappingAsync(IPutRoleMappingRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutRoleMappingRequest, PutRoleMappingResponse>(request, request.RequestParameters, cancellationToken);
		public PutRoleMappingResponse PutRoleMapping(Elastic.Clients.Elasticsearch.Name name, Func<PutRoleMappingDescriptor, IPutRoleMappingRequest> selector = null) => PutRoleMapping(selector.InvokeOrDefault(new PutRoleMappingDescriptor(name)));
		public Task<PutRoleMappingResponse> PutRoleMappingAsync(Elastic.Clients.Elasticsearch.Name name, Func<PutRoleMappingDescriptor, IPutRoleMappingRequest> selector = null, CancellationToken cancellationToken = default) => PutRoleMappingAsync(selector.InvokeOrDefault(new PutRoleMappingDescriptor(name)), cancellationToken);
		public PutUserResponse PutUser(IPutUserRequest request) => DoRequest<IPutUserRequest, PutUserResponse>(request, request.RequestParameters);
		public Task<PutUserResponse> PutUserAsync(IPutUserRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutUserRequest, PutUserResponse>(request, request.RequestParameters, cancellationToken);
		public PutUserResponse PutUser(Elastic.Clients.Elasticsearch.Username username, Func<PutUserDescriptor, IPutUserRequest> selector = null) => PutUser(selector.InvokeOrDefault(new PutUserDescriptor(username)));
		public Task<PutUserResponse> PutUserAsync(Elastic.Clients.Elasticsearch.Username username, Func<PutUserDescriptor, IPutUserRequest> selector = null, CancellationToken cancellationToken = default) => PutUserAsync(selector.InvokeOrDefault(new PutUserDescriptor(username)), cancellationToken);
	}
}