// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Shutdown
{
	public class ShutdownNamespace : NamespacedClientProxy
	{
		internal ShutdownNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteNodeResponse DeleteNode(IDeleteNodeRequest request) => DoRequest<IDeleteNodeRequest, DeleteNodeResponse>(request, request.RequestParameters);
		public Task<DeleteNodeResponse> DeleteNodeAsync(IDeleteNodeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteNodeRequest, DeleteNodeResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteNodeResponse DeleteNode(Elastic.Clients.Elasticsearch.NodeId node_id, Func<DeleteNodeDescriptor, IDeleteNodeRequest> selector = null) => DeleteNode(selector.InvokeOrDefault(new DeleteNodeDescriptor(node_id)));
		public Task<DeleteNodeResponse> DeleteNodeAsync(Elastic.Clients.Elasticsearch.NodeId node_id, Func<DeleteNodeDescriptor, IDeleteNodeRequest> selector = null, CancellationToken cancellationToken = default) => DeleteNodeAsync(selector.InvokeOrDefault(new DeleteNodeDescriptor(node_id)), cancellationToken);
		public GetNodeResponse GetNode(IGetNodeRequest request) => DoRequest<IGetNodeRequest, GetNodeResponse>(request, request.RequestParameters);
		public Task<GetNodeResponse> GetNodeAsync(IGetNodeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetNodeRequest, GetNodeResponse>(request, request.RequestParameters, cancellationToken);
		public GetNodeResponse GetNode(Func<GetNodeDescriptor, IGetNodeRequest> selector = null) => GetNode(selector.InvokeOrDefault(new GetNodeDescriptor()));
		public GetNodeResponse GetNode(Elastic.Clients.Elasticsearch.NodeIds node_id, Func<GetNodeDescriptor, IGetNodeRequest> selector = null) => GetNode(selector.InvokeOrDefault(new GetNodeDescriptor(node_id)));
		public Task<GetNodeResponse> GetNodeAsync(Func<GetNodeDescriptor, IGetNodeRequest> selector = null, CancellationToken cancellationToken = default) => GetNodeAsync(selector.InvokeOrDefault(new GetNodeDescriptor()), cancellationToken);
		public Task<GetNodeResponse> GetNodeAsync(Elastic.Clients.Elasticsearch.NodeIds node_id, Func<GetNodeDescriptor, IGetNodeRequest> selector = null, CancellationToken cancellationToken = default) => GetNodeAsync(selector.InvokeOrDefault(new GetNodeDescriptor(node_id)), cancellationToken);
		public PutNodeResponse PutNode(IPutNodeRequest request) => DoRequest<IPutNodeRequest, PutNodeResponse>(request, request.RequestParameters);
		public Task<PutNodeResponse> PutNodeAsync(IPutNodeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutNodeRequest, PutNodeResponse>(request, request.RequestParameters, cancellationToken);
		public PutNodeResponse PutNode(Elastic.Clients.Elasticsearch.NodeId node_id, Func<PutNodeDescriptor, IPutNodeRequest> selector = null) => PutNode(selector.InvokeOrDefault(new PutNodeDescriptor(node_id)));
		public Task<PutNodeResponse> PutNodeAsync(Elastic.Clients.Elasticsearch.NodeId node_id, Func<PutNodeDescriptor, IPutNodeRequest> selector = null, CancellationToken cancellationToken = default) => PutNodeAsync(selector.InvokeOrDefault(new PutNodeDescriptor(node_id)), cancellationToken);
	}
}