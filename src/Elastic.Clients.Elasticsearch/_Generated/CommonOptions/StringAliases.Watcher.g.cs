// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Globalization;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Watcher
{
	[JsonConverter(typeof(StringAliasConverter<CronExpression>))]
	public readonly partial struct CronExpression : IComparable<CronExpression>, IEquatable<CronExpression>
	{
		public CronExpression(string cronExpression) => Value = cronExpression;
		public string Value { get; }

		public override int GetHashCode() => Value.GetHashCode();
		public override string ToString() => Value;
		public override bool Equals(object obj) => ReferenceEquals(null, obj) ? false : obj is CronExpression other && Equals(other);
		public bool Equals(CronExpression other) => this.Value.Equals(other.Value);
		public int CompareTo(CronExpression other) => Value.CompareTo(other.Value);
		public static bool operator ==(CronExpression a, CronExpression b) => a.CompareTo(b) == 0;
		public static bool operator !=(CronExpression a, CronExpression b) => !(a == b);
		public static implicit operator string(CronExpression cronExpression) => cronExpression.Value;
		public static implicit operator CronExpression(string cronExpression) => new(cronExpression);
		public static bool TryParse(string value, out CronExpression cronExpression)
		{
			cronExpression = default;
			if (string.IsNullOrWhiteSpace(value))
				return false;
			cronExpression = new CronExpression(value.Trim());
			return true;
		}
	}
}