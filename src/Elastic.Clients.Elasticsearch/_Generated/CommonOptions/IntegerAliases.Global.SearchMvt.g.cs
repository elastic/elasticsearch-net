// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport;
using System;
using System.Globalization;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Global.SearchMvt
{
	[JsonConverter(typeof(NumericAliasConverter<Coordinate>))]
	public partial class Coordinate : IComparable<Coordinate>, IEquatable<Coordinate>, IUrlParameter
	{
		public Coordinate(long coordinate) => Value = coordinate;
		public long Value { get; }

		public override int GetHashCode() => Value.GetHashCode();
		public override string ToString() => Value.ToString(CultureInfo.InvariantCulture);
		public override bool Equals(object obj) => ReferenceEquals(null, obj) ? false : obj is Coordinate other && Equals(other);
		public bool Equals(Coordinate other) => this.Value.Equals(other.Value);
		public int CompareTo(Coordinate other) => Value.CompareTo(other.Value);
		public static bool operator ==(Coordinate a, Coordinate b) => a.CompareTo(b) == 0;
		public static bool operator !=(Coordinate a, Coordinate b) => !(a == b);
		public string GetString(ITransportConfiguration settings) => ToString();
	}

	[JsonConverter(typeof(NumericAliasConverter<ZoomLevel>))]
	public partial class ZoomLevel : IComparable<ZoomLevel>, IEquatable<ZoomLevel>, IUrlParameter
	{
		public ZoomLevel(long zoomLevel) => Value = zoomLevel;
		public long Value { get; }

		public override int GetHashCode() => Value.GetHashCode();
		public override string ToString() => Value.ToString(CultureInfo.InvariantCulture);
		public override bool Equals(object obj) => ReferenceEquals(null, obj) ? false : obj is ZoomLevel other && Equals(other);
		public bool Equals(ZoomLevel other) => this.Value.Equals(other.Value);
		public int CompareTo(ZoomLevel other) => Value.CompareTo(other.Value);
		public static bool operator ==(ZoomLevel a, ZoomLevel b) => a.CompareTo(b) == 0;
		public static bool operator !=(ZoomLevel a, ZoomLevel b) => !(a == b);
		public string GetString(ITransportConfiguration settings) => ToString();
	}
}