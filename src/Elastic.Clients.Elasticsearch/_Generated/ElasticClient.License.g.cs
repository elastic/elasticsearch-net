// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.License
{
	public class LicenseNamespace : NamespacedClientProxy
	{
		internal LicenseNamespace(ElasticClient client) : base(client)
		{
		}

		public DeleteResponse Delete(IDeleteRequest request) => DoRequest<IDeleteRequest, DeleteResponse>(request, request.RequestParameters);
		public Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteRequest, DeleteResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteResponse Delete(Func<DeleteDescriptor, IDeleteRequest> selector = null) => Delete(selector.InvokeOrDefault(new DeleteDescriptor()));
		public Task<DeleteResponse> DeleteAsync(Func<DeleteDescriptor, IDeleteRequest> selector = null, CancellationToken cancellationToken = default) => DeleteAsync(selector.InvokeOrDefault(new DeleteDescriptor()), cancellationToken);
		public GetResponse Get(IGetRequest request) => DoRequest<IGetRequest, GetResponse>(request, request.RequestParameters);
		public Task<GetResponse> GetAsync(IGetRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRequest, GetResponse>(request, request.RequestParameters, cancellationToken);
		public GetResponse Get(Func<GetDescriptor, IGetRequest> selector = null) => Get(selector.InvokeOrDefault(new GetDescriptor()));
		public Task<GetResponse> GetAsync(Func<GetDescriptor, IGetRequest> selector = null, CancellationToken cancellationToken = default) => GetAsync(selector.InvokeOrDefault(new GetDescriptor()), cancellationToken);
		public GetBasicStatusResponse GetBasicStatus(IGetBasicStatusRequest request) => DoRequest<IGetBasicStatusRequest, GetBasicStatusResponse>(request, request.RequestParameters);
		public Task<GetBasicStatusResponse> GetBasicStatusAsync(IGetBasicStatusRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetBasicStatusRequest, GetBasicStatusResponse>(request, request.RequestParameters, cancellationToken);
		public GetBasicStatusResponse GetBasicStatus(Func<GetBasicStatusDescriptor, IGetBasicStatusRequest> selector = null) => GetBasicStatus(selector.InvokeOrDefault(new GetBasicStatusDescriptor()));
		public Task<GetBasicStatusResponse> GetBasicStatusAsync(Func<GetBasicStatusDescriptor, IGetBasicStatusRequest> selector = null, CancellationToken cancellationToken = default) => GetBasicStatusAsync(selector.InvokeOrDefault(new GetBasicStatusDescriptor()), cancellationToken);
		public GetTrialStatusResponse GetTrialStatus(IGetTrialStatusRequest request) => DoRequest<IGetTrialStatusRequest, GetTrialStatusResponse>(request, request.RequestParameters);
		public Task<GetTrialStatusResponse> GetTrialStatusAsync(IGetTrialStatusRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetTrialStatusRequest, GetTrialStatusResponse>(request, request.RequestParameters, cancellationToken);
		public GetTrialStatusResponse GetTrialStatus(Func<GetTrialStatusDescriptor, IGetTrialStatusRequest> selector = null) => GetTrialStatus(selector.InvokeOrDefault(new GetTrialStatusDescriptor()));
		public Task<GetTrialStatusResponse> GetTrialStatusAsync(Func<GetTrialStatusDescriptor, IGetTrialStatusRequest> selector = null, CancellationToken cancellationToken = default) => GetTrialStatusAsync(selector.InvokeOrDefault(new GetTrialStatusDescriptor()), cancellationToken);
		public PostResponse Post(IPostRequest request) => DoRequest<IPostRequest, PostResponse>(request, request.RequestParameters);
		public Task<PostResponse> PostAsync(IPostRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPostRequest, PostResponse>(request, request.RequestParameters, cancellationToken);
		public PostResponse Post(Func<PostDescriptor, IPostRequest> selector = null) => Post(selector.InvokeOrDefault(new PostDescriptor()));
		public Task<PostResponse> PostAsync(Func<PostDescriptor, IPostRequest> selector = null, CancellationToken cancellationToken = default) => PostAsync(selector.InvokeOrDefault(new PostDescriptor()), cancellationToken);
		public PostStartBasicResponse PostStartBasic(IPostStartBasicRequest request) => DoRequest<IPostStartBasicRequest, PostStartBasicResponse>(request, request.RequestParameters);
		public Task<PostStartBasicResponse> PostStartBasicAsync(IPostStartBasicRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPostStartBasicRequest, PostStartBasicResponse>(request, request.RequestParameters, cancellationToken);
		public PostStartBasicResponse PostStartBasic(Func<PostStartBasicDescriptor, IPostStartBasicRequest> selector = null) => PostStartBasic(selector.InvokeOrDefault(new PostStartBasicDescriptor()));
		public Task<PostStartBasicResponse> PostStartBasicAsync(Func<PostStartBasicDescriptor, IPostStartBasicRequest> selector = null, CancellationToken cancellationToken = default) => PostStartBasicAsync(selector.InvokeOrDefault(new PostStartBasicDescriptor()), cancellationToken);
		public PostStartTrialResponse PostStartTrial(IPostStartTrialRequest request) => DoRequest<IPostStartTrialRequest, PostStartTrialResponse>(request, request.RequestParameters);
		public Task<PostStartTrialResponse> PostStartTrialAsync(IPostStartTrialRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPostStartTrialRequest, PostStartTrialResponse>(request, request.RequestParameters, cancellationToken);
		public PostStartTrialResponse PostStartTrial(Func<PostStartTrialDescriptor, IPostStartTrialRequest> selector = null) => PostStartTrial(selector.InvokeOrDefault(new PostStartTrialDescriptor()));
		public Task<PostStartTrialResponse> PostStartTrialAsync(Func<PostStartTrialDescriptor, IPostStartTrialRequest> selector = null, CancellationToken cancellationToken = default) => PostStartTrialAsync(selector.InvokeOrDefault(new PostStartTrialDescriptor()), cancellationToken);
	}
}