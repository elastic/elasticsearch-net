// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Clients.Elasticsearch.Ml;
using System;
using System.Threading;
using System.Threading.Tasks;

#nullable restore
namespace Elastic.Clients.Elasticsearch.MachineLearning
{
	public class MachineLearningNamespace : NamespacedClientProxy
	{
		internal MachineLearningNamespace(ElasticClient client) : base(client)
		{
		}

		public CloseJobResponse CloseJob(ICloseJobRequest request) => DoRequest<ICloseJobRequest, CloseJobResponse>(request, request.RequestParameters);
		public Task<CloseJobResponse> CloseJobAsync(ICloseJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ICloseJobRequest, CloseJobResponse>(request, request.RequestParameters, cancellationToken);
		public CloseJobResponse CloseJob(Elastic.Clients.Elasticsearch.Id job_id, Func<CloseJobDescriptor, ICloseJobRequest> selector = null) => CloseJob(selector.InvokeOrDefault(new CloseJobDescriptor(job_id)));
		public Task<CloseJobResponse> CloseJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<CloseJobDescriptor, ICloseJobRequest> selector = null, CancellationToken cancellationToken = default) => CloseJobAsync(selector.InvokeOrDefault(new CloseJobDescriptor(job_id)), cancellationToken);
		public DeleteCalendarResponse DeleteCalendar(IDeleteCalendarRequest request) => DoRequest<IDeleteCalendarRequest, DeleteCalendarResponse>(request, request.RequestParameters);
		public Task<DeleteCalendarResponse> DeleteCalendarAsync(IDeleteCalendarRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteCalendarRequest, DeleteCalendarResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteCalendarResponse DeleteCalendar(Elastic.Clients.Elasticsearch.Id calendar_id, Func<DeleteCalendarDescriptor, IDeleteCalendarRequest> selector = null) => DeleteCalendar(selector.InvokeOrDefault(new DeleteCalendarDescriptor(calendar_id)));
		public Task<DeleteCalendarResponse> DeleteCalendarAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Func<DeleteCalendarDescriptor, IDeleteCalendarRequest> selector = null, CancellationToken cancellationToken = default) => DeleteCalendarAsync(selector.InvokeOrDefault(new DeleteCalendarDescriptor(calendar_id)), cancellationToken);
		public DeleteCalendarEventResponse DeleteCalendarEvent(IDeleteCalendarEventRequest request) => DoRequest<IDeleteCalendarEventRequest, DeleteCalendarEventResponse>(request, request.RequestParameters);
		public Task<DeleteCalendarEventResponse> DeleteCalendarEventAsync(IDeleteCalendarEventRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteCalendarEventRequest, DeleteCalendarEventResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteCalendarEventResponse DeleteCalendarEvent(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id event_id, Func<DeleteCalendarEventDescriptor, IDeleteCalendarEventRequest> selector = null) => DeleteCalendarEvent(selector.InvokeOrDefault(new DeleteCalendarEventDescriptor(calendar_id, event_id)));
		public Task<DeleteCalendarEventResponse> DeleteCalendarEventAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id event_id, Func<DeleteCalendarEventDescriptor, IDeleteCalendarEventRequest> selector = null, CancellationToken cancellationToken = default) => DeleteCalendarEventAsync(selector.InvokeOrDefault(new DeleteCalendarEventDescriptor(calendar_id, event_id)), cancellationToken);
		public DeleteCalendarJobResponse DeleteCalendarJob(IDeleteCalendarJobRequest request) => DoRequest<IDeleteCalendarJobRequest, DeleteCalendarJobResponse>(request, request.RequestParameters);
		public Task<DeleteCalendarJobResponse> DeleteCalendarJobAsync(IDeleteCalendarJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteCalendarJobRequest, DeleteCalendarJobResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteCalendarJobResponse DeleteCalendarJob(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteCalendarJobDescriptor, IDeleteCalendarJobRequest> selector = null) => DeleteCalendarJob(selector.InvokeOrDefault(new DeleteCalendarJobDescriptor(calendar_id, job_id)));
		public Task<DeleteCalendarJobResponse> DeleteCalendarJobAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteCalendarJobDescriptor, IDeleteCalendarJobRequest> selector = null, CancellationToken cancellationToken = default) => DeleteCalendarJobAsync(selector.InvokeOrDefault(new DeleteCalendarJobDescriptor(calendar_id, job_id)), cancellationToken);
		public DeleteDatafeedResponse DeleteDatafeed(IDeleteDatafeedRequest request) => DoRequest<IDeleteDatafeedRequest, DeleteDatafeedResponse>(request, request.RequestParameters);
		public Task<DeleteDatafeedResponse> DeleteDatafeedAsync(IDeleteDatafeedRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteDatafeedRequest, DeleteDatafeedResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteDatafeedResponse DeleteDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<DeleteDatafeedDescriptor, IDeleteDatafeedRequest> selector = null) => DeleteDatafeed(selector.InvokeOrDefault(new DeleteDatafeedDescriptor(datafeed_id)));
		public Task<DeleteDatafeedResponse> DeleteDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<DeleteDatafeedDescriptor, IDeleteDatafeedRequest> selector = null, CancellationToken cancellationToken = default) => DeleteDatafeedAsync(selector.InvokeOrDefault(new DeleteDatafeedDescriptor(datafeed_id)), cancellationToken);
		public DeleteDataFrameAnalyticsResponse DeleteDataFrameAnalytics(IDeleteDataFrameAnalyticsRequest request) => DoRequest<IDeleteDataFrameAnalyticsRequest, DeleteDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<DeleteDataFrameAnalyticsResponse> DeleteDataFrameAnalyticsAsync(IDeleteDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteDataFrameAnalyticsRequest, DeleteDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteDataFrameAnalyticsResponse DeleteDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Func<DeleteDataFrameAnalyticsDescriptor, IDeleteDataFrameAnalyticsRequest> selector = null) => DeleteDataFrameAnalytics(selector.InvokeOrDefault(new DeleteDataFrameAnalyticsDescriptor(id)));
		public Task<DeleteDataFrameAnalyticsResponse> DeleteDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Func<DeleteDataFrameAnalyticsDescriptor, IDeleteDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => DeleteDataFrameAnalyticsAsync(selector.InvokeOrDefault(new DeleteDataFrameAnalyticsDescriptor(id)), cancellationToken);
		public DeleteExpiredDataResponse DeleteExpiredData(IDeleteExpiredDataRequest request) => DoRequest<IDeleteExpiredDataRequest, DeleteExpiredDataResponse>(request, request.RequestParameters);
		public Task<DeleteExpiredDataResponse> DeleteExpiredDataAsync(IDeleteExpiredDataRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteExpiredDataRequest, DeleteExpiredDataResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteExpiredDataResponse DeleteExpiredData(Func<DeleteExpiredDataDescriptor, IDeleteExpiredDataRequest> selector = null) => DeleteExpiredData(selector.InvokeOrDefault(new DeleteExpiredDataDescriptor()));
		public Task<DeleteExpiredDataResponse> DeleteExpiredDataAsync(Func<DeleteExpiredDataDescriptor, IDeleteExpiredDataRequest> selector = null, CancellationToken cancellationToken = default) => DeleteExpiredDataAsync(selector.InvokeOrDefault(new DeleteExpiredDataDescriptor()), cancellationToken);
		public DeleteFilterResponse DeleteFilter(IDeleteFilterRequest request) => DoRequest<IDeleteFilterRequest, DeleteFilterResponse>(request, request.RequestParameters);
		public Task<DeleteFilterResponse> DeleteFilterAsync(IDeleteFilterRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteFilterRequest, DeleteFilterResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteFilterResponse DeleteFilter(Elastic.Clients.Elasticsearch.Id filter_id, Func<DeleteFilterDescriptor, IDeleteFilterRequest> selector = null) => DeleteFilter(selector.InvokeOrDefault(new DeleteFilterDescriptor(filter_id)));
		public Task<DeleteFilterResponse> DeleteFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Func<DeleteFilterDescriptor, IDeleteFilterRequest> selector = null, CancellationToken cancellationToken = default) => DeleteFilterAsync(selector.InvokeOrDefault(new DeleteFilterDescriptor(filter_id)), cancellationToken);
		public DeleteForecastResponse DeleteForecast(IDeleteForecastRequest request) => DoRequest<IDeleteForecastRequest, DeleteForecastResponse>(request, request.RequestParameters);
		public Task<DeleteForecastResponse> DeleteForecastAsync(IDeleteForecastRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteForecastRequest, DeleteForecastResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteForecastResponse DeleteForecast(Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteForecastDescriptor, IDeleteForecastRequest> selector = null) => DeleteForecast(selector.InvokeOrDefault(new DeleteForecastDescriptor(job_id)));
		public Task<DeleteForecastResponse> DeleteForecastAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteForecastDescriptor, IDeleteForecastRequest> selector = null, CancellationToken cancellationToken = default) => DeleteForecastAsync(selector.InvokeOrDefault(new DeleteForecastDescriptor(job_id)), cancellationToken);
		public DeleteJobResponse DeleteJob(IDeleteJobRequest request) => DoRequest<IDeleteJobRequest, DeleteJobResponse>(request, request.RequestParameters);
		public Task<DeleteJobResponse> DeleteJobAsync(IDeleteJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteJobRequest, DeleteJobResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteJobResponse DeleteJob(Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteJobDescriptor, IDeleteJobRequest> selector = null) => DeleteJob(selector.InvokeOrDefault(new DeleteJobDescriptor(job_id)));
		public Task<DeleteJobResponse> DeleteJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<DeleteJobDescriptor, IDeleteJobRequest> selector = null, CancellationToken cancellationToken = default) => DeleteJobAsync(selector.InvokeOrDefault(new DeleteJobDescriptor(job_id)), cancellationToken);
		public DeleteModelSnapshotResponse DeleteModelSnapshot(IDeleteModelSnapshotRequest request) => DoRequest<IDeleteModelSnapshotRequest, DeleteModelSnapshotResponse>(request, request.RequestParameters);
		public Task<DeleteModelSnapshotResponse> DeleteModelSnapshotAsync(IDeleteModelSnapshotRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteModelSnapshotRequest, DeleteModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteModelSnapshotResponse DeleteModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<DeleteModelSnapshotDescriptor, IDeleteModelSnapshotRequest> selector = null) => DeleteModelSnapshot(selector.InvokeOrDefault(new DeleteModelSnapshotDescriptor(job_id, snapshot_id)));
		public Task<DeleteModelSnapshotResponse> DeleteModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<DeleteModelSnapshotDescriptor, IDeleteModelSnapshotRequest> selector = null, CancellationToken cancellationToken = default) => DeleteModelSnapshotAsync(selector.InvokeOrDefault(new DeleteModelSnapshotDescriptor(job_id, snapshot_id)), cancellationToken);
		public DeleteTrainedModelResponse DeleteTrainedModel(IDeleteTrainedModelRequest request) => DoRequest<IDeleteTrainedModelRequest, DeleteTrainedModelResponse>(request, request.RequestParameters);
		public Task<DeleteTrainedModelResponse> DeleteTrainedModelAsync(IDeleteTrainedModelRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteTrainedModelRequest, DeleteTrainedModelResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteTrainedModelResponse DeleteTrainedModel(Elastic.Clients.Elasticsearch.Id model_id, Func<DeleteTrainedModelDescriptor, IDeleteTrainedModelRequest> selector = null) => DeleteTrainedModel(selector.InvokeOrDefault(new DeleteTrainedModelDescriptor(model_id)));
		public Task<DeleteTrainedModelResponse> DeleteTrainedModelAsync(Elastic.Clients.Elasticsearch.Id model_id, Func<DeleteTrainedModelDescriptor, IDeleteTrainedModelRequest> selector = null, CancellationToken cancellationToken = default) => DeleteTrainedModelAsync(selector.InvokeOrDefault(new DeleteTrainedModelDescriptor(model_id)), cancellationToken);
		public DeleteTrainedModelAliasResponse DeleteTrainedModelAlias(IDeleteTrainedModelAliasRequest request) => DoRequest<IDeleteTrainedModelAliasRequest, DeleteTrainedModelAliasResponse>(request, request.RequestParameters);
		public Task<DeleteTrainedModelAliasResponse> DeleteTrainedModelAliasAsync(IDeleteTrainedModelAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IDeleteTrainedModelAliasRequest, DeleteTrainedModelAliasResponse>(request, request.RequestParameters, cancellationToken);
		public DeleteTrainedModelAliasResponse DeleteTrainedModelAlias(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Func<DeleteTrainedModelAliasDescriptor, IDeleteTrainedModelAliasRequest> selector = null) => DeleteTrainedModelAlias(selector.InvokeOrDefault(new DeleteTrainedModelAliasDescriptor(model_id, model_alias)));
		public Task<DeleteTrainedModelAliasResponse> DeleteTrainedModelAliasAsync(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Func<DeleteTrainedModelAliasDescriptor, IDeleteTrainedModelAliasRequest> selector = null, CancellationToken cancellationToken = default) => DeleteTrainedModelAliasAsync(selector.InvokeOrDefault(new DeleteTrainedModelAliasDescriptor(model_id, model_alias)), cancellationToken);
		public EstimateModelMemoryResponse EstimateModelMemory(IEstimateModelMemoryRequest request) => DoRequest<IEstimateModelMemoryRequest, EstimateModelMemoryResponse>(request, request.RequestParameters);
		public Task<EstimateModelMemoryResponse> EstimateModelMemoryAsync(IEstimateModelMemoryRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IEstimateModelMemoryRequest, EstimateModelMemoryResponse>(request, request.RequestParameters, cancellationToken);
		public EstimateModelMemoryResponse EstimateModelMemory(Func<EstimateModelMemoryDescriptor, IEstimateModelMemoryRequest> selector = null) => EstimateModelMemory(selector.InvokeOrDefault(new EstimateModelMemoryDescriptor()));
		public Task<EstimateModelMemoryResponse> EstimateModelMemoryAsync(Func<EstimateModelMemoryDescriptor, IEstimateModelMemoryRequest> selector = null, CancellationToken cancellationToken = default) => EstimateModelMemoryAsync(selector.InvokeOrDefault(new EstimateModelMemoryDescriptor()), cancellationToken);
		public EvaluateDataFrameResponse EvaluateDataFrame(IEvaluateDataFrameRequest request) => DoRequest<IEvaluateDataFrameRequest, EvaluateDataFrameResponse>(request, request.RequestParameters);
		public Task<EvaluateDataFrameResponse> EvaluateDataFrameAsync(IEvaluateDataFrameRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IEvaluateDataFrameRequest, EvaluateDataFrameResponse>(request, request.RequestParameters, cancellationToken);
		public EvaluateDataFrameResponse EvaluateDataFrame(Func<EvaluateDataFrameDescriptor, IEvaluateDataFrameRequest> selector = null) => EvaluateDataFrame(selector.InvokeOrDefault(new EvaluateDataFrameDescriptor()));
		public Task<EvaluateDataFrameResponse> EvaluateDataFrameAsync(Func<EvaluateDataFrameDescriptor, IEvaluateDataFrameRequest> selector = null, CancellationToken cancellationToken = default) => EvaluateDataFrameAsync(selector.InvokeOrDefault(new EvaluateDataFrameDescriptor()), cancellationToken);
		public ExplainDataFrameAnalyticsResponse ExplainDataFrameAnalytics(IExplainDataFrameAnalyticsRequest request) => DoRequest<IExplainDataFrameAnalyticsRequest, ExplainDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<ExplainDataFrameAnalyticsResponse> ExplainDataFrameAnalyticsAsync(IExplainDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IExplainDataFrameAnalyticsRequest, ExplainDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public ExplainDataFrameAnalyticsResponse ExplainDataFrameAnalytics(Func<ExplainDataFrameAnalyticsDescriptor, IExplainDataFrameAnalyticsRequest> selector = null) => ExplainDataFrameAnalytics(selector.InvokeOrDefault(new ExplainDataFrameAnalyticsDescriptor()));
		public Task<ExplainDataFrameAnalyticsResponse> ExplainDataFrameAnalyticsAsync(Func<ExplainDataFrameAnalyticsDescriptor, IExplainDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => ExplainDataFrameAnalyticsAsync(selector.InvokeOrDefault(new ExplainDataFrameAnalyticsDescriptor()), cancellationToken);
		public FlushJobResponse FlushJob(IFlushJobRequest request) => DoRequest<IFlushJobRequest, FlushJobResponse>(request, request.RequestParameters);
		public Task<FlushJobResponse> FlushJobAsync(IFlushJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IFlushJobRequest, FlushJobResponse>(request, request.RequestParameters, cancellationToken);
		public FlushJobResponse FlushJob(Elastic.Clients.Elasticsearch.Id job_id, Func<FlushJobDescriptor, IFlushJobRequest> selector = null) => FlushJob(selector.InvokeOrDefault(new FlushJobDescriptor(job_id)));
		public Task<FlushJobResponse> FlushJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<FlushJobDescriptor, IFlushJobRequest> selector = null, CancellationToken cancellationToken = default) => FlushJobAsync(selector.InvokeOrDefault(new FlushJobDescriptor(job_id)), cancellationToken);
		public ForecastResponse Forecast(IForecastRequest request) => DoRequest<IForecastRequest, ForecastResponse>(request, request.RequestParameters);
		public Task<ForecastResponse> ForecastAsync(IForecastRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IForecastRequest, ForecastResponse>(request, request.RequestParameters, cancellationToken);
		public ForecastResponse Forecast(Elastic.Clients.Elasticsearch.Id job_id, Func<ForecastDescriptor, IForecastRequest> selector = null) => Forecast(selector.InvokeOrDefault(new ForecastDescriptor(job_id)));
		public Task<ForecastResponse> ForecastAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<ForecastDescriptor, IForecastRequest> selector = null, CancellationToken cancellationToken = default) => ForecastAsync(selector.InvokeOrDefault(new ForecastDescriptor(job_id)), cancellationToken);
		public GetBucketsResponse GetBuckets(IGetBucketsRequest request) => DoRequest<IGetBucketsRequest, GetBucketsResponse>(request, request.RequestParameters);
		public Task<GetBucketsResponse> GetBucketsAsync(IGetBucketsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetBucketsRequest, GetBucketsResponse>(request, request.RequestParameters, cancellationToken);
		public GetBucketsResponse GetBuckets(Elastic.Clients.Elasticsearch.Id job_id, Func<GetBucketsDescriptor, IGetBucketsRequest> selector = null) => GetBuckets(selector.InvokeOrDefault(new GetBucketsDescriptor(job_id)));
		public Task<GetBucketsResponse> GetBucketsAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetBucketsDescriptor, IGetBucketsRequest> selector = null, CancellationToken cancellationToken = default) => GetBucketsAsync(selector.InvokeOrDefault(new GetBucketsDescriptor(job_id)), cancellationToken);
		public GetCalendarEventsResponse GetCalendarEvents(IGetCalendarEventsRequest request) => DoRequest<IGetCalendarEventsRequest, GetCalendarEventsResponse>(request, request.RequestParameters);
		public Task<GetCalendarEventsResponse> GetCalendarEventsAsync(IGetCalendarEventsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetCalendarEventsRequest, GetCalendarEventsResponse>(request, request.RequestParameters, cancellationToken);
		public GetCalendarEventsResponse GetCalendarEvents(Elastic.Clients.Elasticsearch.Id calendar_id, Func<GetCalendarEventsDescriptor, IGetCalendarEventsRequest> selector = null) => GetCalendarEvents(selector.InvokeOrDefault(new GetCalendarEventsDescriptor(calendar_id)));
		public Task<GetCalendarEventsResponse> GetCalendarEventsAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Func<GetCalendarEventsDescriptor, IGetCalendarEventsRequest> selector = null, CancellationToken cancellationToken = default) => GetCalendarEventsAsync(selector.InvokeOrDefault(new GetCalendarEventsDescriptor(calendar_id)), cancellationToken);
		public GetCalendarsResponse GetCalendars(IGetCalendarsRequest request) => DoRequest<IGetCalendarsRequest, GetCalendarsResponse>(request, request.RequestParameters);
		public Task<GetCalendarsResponse> GetCalendarsAsync(IGetCalendarsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetCalendarsRequest, GetCalendarsResponse>(request, request.RequestParameters, cancellationToken);
		public GetCalendarsResponse GetCalendars(Func<GetCalendarsDescriptor, IGetCalendarsRequest> selector = null) => GetCalendars(selector.InvokeOrDefault(new GetCalendarsDescriptor()));
		public Task<GetCalendarsResponse> GetCalendarsAsync(Func<GetCalendarsDescriptor, IGetCalendarsRequest> selector = null, CancellationToken cancellationToken = default) => GetCalendarsAsync(selector.InvokeOrDefault(new GetCalendarsDescriptor()), cancellationToken);
		public GetCategoriesResponse GetCategories(IGetCategoriesRequest request) => DoRequest<IGetCategoriesRequest, GetCategoriesResponse>(request, request.RequestParameters);
		public Task<GetCategoriesResponse> GetCategoriesAsync(IGetCategoriesRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetCategoriesRequest, GetCategoriesResponse>(request, request.RequestParameters, cancellationToken);
		public GetCategoriesResponse GetCategories(Elastic.Clients.Elasticsearch.Id job_id, Func<GetCategoriesDescriptor, IGetCategoriesRequest> selector = null) => GetCategories(selector.InvokeOrDefault(new GetCategoriesDescriptor(job_id)));
		public Task<GetCategoriesResponse> GetCategoriesAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetCategoriesDescriptor, IGetCategoriesRequest> selector = null, CancellationToken cancellationToken = default) => GetCategoriesAsync(selector.InvokeOrDefault(new GetCategoriesDescriptor(job_id)), cancellationToken);
		public GetDatafeedsResponse GetDatafeeds(IGetDatafeedsRequest request) => DoRequest<IGetDatafeedsRequest, GetDatafeedsResponse>(request, request.RequestParameters);
		public Task<GetDatafeedsResponse> GetDatafeedsAsync(IGetDatafeedsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetDatafeedsRequest, GetDatafeedsResponse>(request, request.RequestParameters, cancellationToken);
		public GetDatafeedsResponse GetDatafeeds(Func<GetDatafeedsDescriptor, IGetDatafeedsRequest> selector = null) => GetDatafeeds(selector.InvokeOrDefault(new GetDatafeedsDescriptor()));
		public Task<GetDatafeedsResponse> GetDatafeedsAsync(Func<GetDatafeedsDescriptor, IGetDatafeedsRequest> selector = null, CancellationToken cancellationToken = default) => GetDatafeedsAsync(selector.InvokeOrDefault(new GetDatafeedsDescriptor()), cancellationToken);
		public GetDatafeedStatsResponse GetDatafeedStats(IGetDatafeedStatsRequest request) => DoRequest<IGetDatafeedStatsRequest, GetDatafeedStatsResponse>(request, request.RequestParameters);
		public Task<GetDatafeedStatsResponse> GetDatafeedStatsAsync(IGetDatafeedStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetDatafeedStatsRequest, GetDatafeedStatsResponse>(request, request.RequestParameters, cancellationToken);
		public GetDatafeedStatsResponse GetDatafeedStats(Func<GetDatafeedStatsDescriptor, IGetDatafeedStatsRequest> selector = null) => GetDatafeedStats(selector.InvokeOrDefault(new GetDatafeedStatsDescriptor()));
		public Task<GetDatafeedStatsResponse> GetDatafeedStatsAsync(Func<GetDatafeedStatsDescriptor, IGetDatafeedStatsRequest> selector = null, CancellationToken cancellationToken = default) => GetDatafeedStatsAsync(selector.InvokeOrDefault(new GetDatafeedStatsDescriptor()), cancellationToken);
		public GetDataFrameAnalyticsResponse GetDataFrameAnalytics(IGetDataFrameAnalyticsRequest request) => DoRequest<IGetDataFrameAnalyticsRequest, GetDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<GetDataFrameAnalyticsResponse> GetDataFrameAnalyticsAsync(IGetDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetDataFrameAnalyticsRequest, GetDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public GetDataFrameAnalyticsResponse GetDataFrameAnalytics(Func<GetDataFrameAnalyticsDescriptor, IGetDataFrameAnalyticsRequest> selector = null) => GetDataFrameAnalytics(selector.InvokeOrDefault(new GetDataFrameAnalyticsDescriptor()));
		public Task<GetDataFrameAnalyticsResponse> GetDataFrameAnalyticsAsync(Func<GetDataFrameAnalyticsDescriptor, IGetDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => GetDataFrameAnalyticsAsync(selector.InvokeOrDefault(new GetDataFrameAnalyticsDescriptor()), cancellationToken);
		public GetDataFrameAnalyticsStatsResponse GetDataFrameAnalyticsStats(IGetDataFrameAnalyticsStatsRequest request) => DoRequest<IGetDataFrameAnalyticsStatsRequest, GetDataFrameAnalyticsStatsResponse>(request, request.RequestParameters);
		public Task<GetDataFrameAnalyticsStatsResponse> GetDataFrameAnalyticsStatsAsync(IGetDataFrameAnalyticsStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetDataFrameAnalyticsStatsRequest, GetDataFrameAnalyticsStatsResponse>(request, request.RequestParameters, cancellationToken);
		public GetDataFrameAnalyticsStatsResponse GetDataFrameAnalyticsStats(Func<GetDataFrameAnalyticsStatsDescriptor, IGetDataFrameAnalyticsStatsRequest> selector = null) => GetDataFrameAnalyticsStats(selector.InvokeOrDefault(new GetDataFrameAnalyticsStatsDescriptor()));
		public Task<GetDataFrameAnalyticsStatsResponse> GetDataFrameAnalyticsStatsAsync(Func<GetDataFrameAnalyticsStatsDescriptor, IGetDataFrameAnalyticsStatsRequest> selector = null, CancellationToken cancellationToken = default) => GetDataFrameAnalyticsStatsAsync(selector.InvokeOrDefault(new GetDataFrameAnalyticsStatsDescriptor()), cancellationToken);
		public GetFiltersResponse GetFilters(IGetFiltersRequest request) => DoRequest<IGetFiltersRequest, GetFiltersResponse>(request, request.RequestParameters);
		public Task<GetFiltersResponse> GetFiltersAsync(IGetFiltersRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetFiltersRequest, GetFiltersResponse>(request, request.RequestParameters, cancellationToken);
		public GetFiltersResponse GetFilters(Func<GetFiltersDescriptor, IGetFiltersRequest> selector = null) => GetFilters(selector.InvokeOrDefault(new GetFiltersDescriptor()));
		public Task<GetFiltersResponse> GetFiltersAsync(Func<GetFiltersDescriptor, IGetFiltersRequest> selector = null, CancellationToken cancellationToken = default) => GetFiltersAsync(selector.InvokeOrDefault(new GetFiltersDescriptor()), cancellationToken);
		public GetInfluencersResponse GetInfluencers(IGetInfluencersRequest request) => DoRequest<IGetInfluencersRequest, GetInfluencersResponse>(request, request.RequestParameters);
		public Task<GetInfluencersResponse> GetInfluencersAsync(IGetInfluencersRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetInfluencersRequest, GetInfluencersResponse>(request, request.RequestParameters, cancellationToken);
		public GetInfluencersResponse GetInfluencers(Elastic.Clients.Elasticsearch.Id job_id, Func<GetInfluencersDescriptor, IGetInfluencersRequest> selector = null) => GetInfluencers(selector.InvokeOrDefault(new GetInfluencersDescriptor(job_id)));
		public Task<GetInfluencersResponse> GetInfluencersAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetInfluencersDescriptor, IGetInfluencersRequest> selector = null, CancellationToken cancellationToken = default) => GetInfluencersAsync(selector.InvokeOrDefault(new GetInfluencersDescriptor(job_id)), cancellationToken);
		public GetJobsResponse GetJobs(IGetJobsRequest request) => DoRequest<IGetJobsRequest, GetJobsResponse>(request, request.RequestParameters);
		public Task<GetJobsResponse> GetJobsAsync(IGetJobsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetJobsRequest, GetJobsResponse>(request, request.RequestParameters, cancellationToken);
		public GetJobsResponse GetJobs(Func<GetJobsDescriptor, IGetJobsRequest> selector = null) => GetJobs(selector.InvokeOrDefault(new GetJobsDescriptor()));
		public Task<GetJobsResponse> GetJobsAsync(Func<GetJobsDescriptor, IGetJobsRequest> selector = null, CancellationToken cancellationToken = default) => GetJobsAsync(selector.InvokeOrDefault(new GetJobsDescriptor()), cancellationToken);
		public GetJobStatsResponse GetJobStats(IGetJobStatsRequest request) => DoRequest<IGetJobStatsRequest, GetJobStatsResponse>(request, request.RequestParameters);
		public Task<GetJobStatsResponse> GetJobStatsAsync(IGetJobStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetJobStatsRequest, GetJobStatsResponse>(request, request.RequestParameters, cancellationToken);
		public GetJobStatsResponse GetJobStats(Func<GetJobStatsDescriptor, IGetJobStatsRequest> selector = null) => GetJobStats(selector.InvokeOrDefault(new GetJobStatsDescriptor()));
		public Task<GetJobStatsResponse> GetJobStatsAsync(Func<GetJobStatsDescriptor, IGetJobStatsRequest> selector = null, CancellationToken cancellationToken = default) => GetJobStatsAsync(selector.InvokeOrDefault(new GetJobStatsDescriptor()), cancellationToken);
		public GetModelSnapshotsResponse GetModelSnapshots(IGetModelSnapshotsRequest request) => DoRequest<IGetModelSnapshotsRequest, GetModelSnapshotsResponse>(request, request.RequestParameters);
		public Task<GetModelSnapshotsResponse> GetModelSnapshotsAsync(IGetModelSnapshotsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetModelSnapshotsRequest, GetModelSnapshotsResponse>(request, request.RequestParameters, cancellationToken);
		public GetModelSnapshotsResponse GetModelSnapshots(Elastic.Clients.Elasticsearch.Id job_id, Func<GetModelSnapshotsDescriptor, IGetModelSnapshotsRequest> selector = null) => GetModelSnapshots(selector.InvokeOrDefault(new GetModelSnapshotsDescriptor(job_id)));
		public Task<GetModelSnapshotsResponse> GetModelSnapshotsAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetModelSnapshotsDescriptor, IGetModelSnapshotsRequest> selector = null, CancellationToken cancellationToken = default) => GetModelSnapshotsAsync(selector.InvokeOrDefault(new GetModelSnapshotsDescriptor(job_id)), cancellationToken);
		public GetOverallBucketsResponse GetOverallBuckets(IGetOverallBucketsRequest request) => DoRequest<IGetOverallBucketsRequest, GetOverallBucketsResponse>(request, request.RequestParameters);
		public Task<GetOverallBucketsResponse> GetOverallBucketsAsync(IGetOverallBucketsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetOverallBucketsRequest, GetOverallBucketsResponse>(request, request.RequestParameters, cancellationToken);
		public GetOverallBucketsResponse GetOverallBuckets(Elastic.Clients.Elasticsearch.Id job_id, Func<GetOverallBucketsDescriptor, IGetOverallBucketsRequest> selector = null) => GetOverallBuckets(selector.InvokeOrDefault(new GetOverallBucketsDescriptor(job_id)));
		public Task<GetOverallBucketsResponse> GetOverallBucketsAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetOverallBucketsDescriptor, IGetOverallBucketsRequest> selector = null, CancellationToken cancellationToken = default) => GetOverallBucketsAsync(selector.InvokeOrDefault(new GetOverallBucketsDescriptor(job_id)), cancellationToken);
		public GetRecordsResponse GetRecords(IGetRecordsRequest request) => DoRequest<IGetRecordsRequest, GetRecordsResponse>(request, request.RequestParameters);
		public Task<GetRecordsResponse> GetRecordsAsync(IGetRecordsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetRecordsRequest, GetRecordsResponse>(request, request.RequestParameters, cancellationToken);
		public GetRecordsResponse GetRecords(Elastic.Clients.Elasticsearch.Id job_id, Func<GetRecordsDescriptor, IGetRecordsRequest> selector = null) => GetRecords(selector.InvokeOrDefault(new GetRecordsDescriptor(job_id)));
		public Task<GetRecordsResponse> GetRecordsAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<GetRecordsDescriptor, IGetRecordsRequest> selector = null, CancellationToken cancellationToken = default) => GetRecordsAsync(selector.InvokeOrDefault(new GetRecordsDescriptor(job_id)), cancellationToken);
		public GetTrainedModelsResponse GetTrainedModels(IGetTrainedModelsRequest request) => DoRequest<IGetTrainedModelsRequest, GetTrainedModelsResponse>(request, request.RequestParameters);
		public Task<GetTrainedModelsResponse> GetTrainedModelsAsync(IGetTrainedModelsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetTrainedModelsRequest, GetTrainedModelsResponse>(request, request.RequestParameters, cancellationToken);
		public GetTrainedModelsResponse GetTrainedModels(Func<GetTrainedModelsDescriptor, IGetTrainedModelsRequest> selector = null) => GetTrainedModels(selector.InvokeOrDefault(new GetTrainedModelsDescriptor()));
		public Task<GetTrainedModelsResponse> GetTrainedModelsAsync(Func<GetTrainedModelsDescriptor, IGetTrainedModelsRequest> selector = null, CancellationToken cancellationToken = default) => GetTrainedModelsAsync(selector.InvokeOrDefault(new GetTrainedModelsDescriptor()), cancellationToken);
		public GetTrainedModelsStatsResponse GetTrainedModelsStats(IGetTrainedModelsStatsRequest request) => DoRequest<IGetTrainedModelsStatsRequest, GetTrainedModelsStatsResponse>(request, request.RequestParameters);
		public Task<GetTrainedModelsStatsResponse> GetTrainedModelsStatsAsync(IGetTrainedModelsStatsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IGetTrainedModelsStatsRequest, GetTrainedModelsStatsResponse>(request, request.RequestParameters, cancellationToken);
		public GetTrainedModelsStatsResponse GetTrainedModelsStats(Func<GetTrainedModelsStatsDescriptor, IGetTrainedModelsStatsRequest> selector = null) => GetTrainedModelsStats(selector.InvokeOrDefault(new GetTrainedModelsStatsDescriptor()));
		public Task<GetTrainedModelsStatsResponse> GetTrainedModelsStatsAsync(Func<GetTrainedModelsStatsDescriptor, IGetTrainedModelsStatsRequest> selector = null, CancellationToken cancellationToken = default) => GetTrainedModelsStatsAsync(selector.InvokeOrDefault(new GetTrainedModelsStatsDescriptor()), cancellationToken);
		public InfoResponse Info(IInfoRequest request) => DoRequest<IInfoRequest, InfoResponse>(request, request.RequestParameters);
		public Task<InfoResponse> InfoAsync(IInfoRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IInfoRequest, InfoResponse>(request, request.RequestParameters, cancellationToken);
		public InfoResponse Info(Func<InfoDescriptor, IInfoRequest> selector = null) => Info(selector.InvokeOrDefault(new InfoDescriptor()));
		public Task<InfoResponse> InfoAsync(Func<InfoDescriptor, IInfoRequest> selector = null, CancellationToken cancellationToken = default) => InfoAsync(selector.InvokeOrDefault(new InfoDescriptor()), cancellationToken);
		public OpenJobResponse OpenJob(IOpenJobRequest request) => DoRequest<IOpenJobRequest, OpenJobResponse>(request, request.RequestParameters);
		public Task<OpenJobResponse> OpenJobAsync(IOpenJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IOpenJobRequest, OpenJobResponse>(request, request.RequestParameters, cancellationToken);
		public OpenJobResponse OpenJob(Elastic.Clients.Elasticsearch.Id job_id, Func<OpenJobDescriptor, IOpenJobRequest> selector = null) => OpenJob(selector.InvokeOrDefault(new OpenJobDescriptor(job_id)));
		public Task<OpenJobResponse> OpenJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<OpenJobDescriptor, IOpenJobRequest> selector = null, CancellationToken cancellationToken = default) => OpenJobAsync(selector.InvokeOrDefault(new OpenJobDescriptor(job_id)), cancellationToken);
		public PostCalendarEventsResponse PostCalendarEvents(IPostCalendarEventsRequest request) => DoRequest<IPostCalendarEventsRequest, PostCalendarEventsResponse>(request, request.RequestParameters);
		public Task<PostCalendarEventsResponse> PostCalendarEventsAsync(IPostCalendarEventsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPostCalendarEventsRequest, PostCalendarEventsResponse>(request, request.RequestParameters, cancellationToken);
		public PostCalendarEventsResponse PostCalendarEvents(Elastic.Clients.Elasticsearch.Id calendar_id, Func<PostCalendarEventsDescriptor, IPostCalendarEventsRequest> selector = null) => PostCalendarEvents(selector.InvokeOrDefault(new PostCalendarEventsDescriptor(calendar_id)));
		public Task<PostCalendarEventsResponse> PostCalendarEventsAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Func<PostCalendarEventsDescriptor, IPostCalendarEventsRequest> selector = null, CancellationToken cancellationToken = default) => PostCalendarEventsAsync(selector.InvokeOrDefault(new PostCalendarEventsDescriptor(calendar_id)), cancellationToken);
		public PostDataResponse PostData<TData>(IPostDataRequest<TData> request) => DoRequest<IPostDataRequest<TData>, PostDataResponse>(request, request.RequestParameters);
		public Task<PostDataResponse> PostDataAsync<TData>(IPostDataRequest<TData> request, CancellationToken cancellationToken = default) => DoRequestAsync<IPostDataRequest<TData>, PostDataResponse>(request, request.RequestParameters, cancellationToken);
		public PostDataResponse PostData<TData>(TData data, Elastic.Clients.Elasticsearch.Id job_id, Func<PostDataDescriptor<TData>, IPostDataRequest<TData>> selector = null) => PostData<TData>(selector.InvokeOrDefault(new PostDataDescriptor<TData>(job_id)));
		public Task<PostDataResponse> PostDataAsync<TData>(TData data, Elastic.Clients.Elasticsearch.Id job_id, Func<PostDataDescriptor<TData>, IPostDataRequest<TData>> selector = null, CancellationToken cancellationToken = default) => PostDataAsync<TData>(selector.InvokeOrDefault(new PostDataDescriptor<TData>(job_id)), cancellationToken);
		public PreviewDatafeedResponse<TDocument> PreviewDatafeed<TDocument>(IPreviewDatafeedRequest request) => DoRequest<IPreviewDatafeedRequest, PreviewDatafeedResponse<TDocument>>(request, request.RequestParameters);
		public Task<PreviewDatafeedResponse<TDocument>> PreviewDatafeedAsync<TDocument>(IPreviewDatafeedRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPreviewDatafeedRequest, PreviewDatafeedResponse<TDocument>>(request, request.RequestParameters, cancellationToken);
		public PreviewDatafeedResponse<TDocument> PreviewDatafeed<TDocument>(Func<PreviewDatafeedDescriptor, IPreviewDatafeedRequest> selector = null) => PreviewDatafeed<TDocument>(selector.InvokeOrDefault(new PreviewDatafeedDescriptor()));
		public Task<PreviewDatafeedResponse<TDocument>> PreviewDatafeedAsync<TDocument>(Func<PreviewDatafeedDescriptor, IPreviewDatafeedRequest> selector = null, CancellationToken cancellationToken = default) => PreviewDatafeedAsync<TDocument>(selector.InvokeOrDefault(new PreviewDatafeedDescriptor()), cancellationToken);
		public PreviewDataFrameAnalyticsResponse PreviewDataFrameAnalytics(IPreviewDataFrameAnalyticsRequest request) => DoRequest<IPreviewDataFrameAnalyticsRequest, PreviewDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<PreviewDataFrameAnalyticsResponse> PreviewDataFrameAnalyticsAsync(IPreviewDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPreviewDataFrameAnalyticsRequest, PreviewDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public PreviewDataFrameAnalyticsResponse PreviewDataFrameAnalytics(Func<PreviewDataFrameAnalyticsDescriptor, IPreviewDataFrameAnalyticsRequest> selector = null) => PreviewDataFrameAnalytics(selector.InvokeOrDefault(new PreviewDataFrameAnalyticsDescriptor()));
		public Task<PreviewDataFrameAnalyticsResponse> PreviewDataFrameAnalyticsAsync(Func<PreviewDataFrameAnalyticsDescriptor, IPreviewDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => PreviewDataFrameAnalyticsAsync(selector.InvokeOrDefault(new PreviewDataFrameAnalyticsDescriptor()), cancellationToken);
		public PutCalendarResponse PutCalendar(IPutCalendarRequest request) => DoRequest<IPutCalendarRequest, PutCalendarResponse>(request, request.RequestParameters);
		public Task<PutCalendarResponse> PutCalendarAsync(IPutCalendarRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutCalendarRequest, PutCalendarResponse>(request, request.RequestParameters, cancellationToken);
		public PutCalendarResponse PutCalendar(Elastic.Clients.Elasticsearch.Id calendar_id, Func<PutCalendarDescriptor, IPutCalendarRequest> selector = null) => PutCalendar(selector.InvokeOrDefault(new PutCalendarDescriptor(calendar_id)));
		public Task<PutCalendarResponse> PutCalendarAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Func<PutCalendarDescriptor, IPutCalendarRequest> selector = null, CancellationToken cancellationToken = default) => PutCalendarAsync(selector.InvokeOrDefault(new PutCalendarDescriptor(calendar_id)), cancellationToken);
		public PutCalendarJobResponse PutCalendarJob(IPutCalendarJobRequest request) => DoRequest<IPutCalendarJobRequest, PutCalendarJobResponse>(request, request.RequestParameters);
		public Task<PutCalendarJobResponse> PutCalendarJobAsync(IPutCalendarJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutCalendarJobRequest, PutCalendarJobResponse>(request, request.RequestParameters, cancellationToken);
		public PutCalendarJobResponse PutCalendarJob(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Func<PutCalendarJobDescriptor, IPutCalendarJobRequest> selector = null) => PutCalendarJob(selector.InvokeOrDefault(new PutCalendarJobDescriptor(calendar_id, job_id)));
		public Task<PutCalendarJobResponse> PutCalendarJobAsync(Elastic.Clients.Elasticsearch.Id calendar_id, Elastic.Clients.Elasticsearch.Id job_id, Func<PutCalendarJobDescriptor, IPutCalendarJobRequest> selector = null, CancellationToken cancellationToken = default) => PutCalendarJobAsync(selector.InvokeOrDefault(new PutCalendarJobDescriptor(calendar_id, job_id)), cancellationToken);
		public PutDatafeedResponse PutDatafeed(IPutDatafeedRequest request) => DoRequest<IPutDatafeedRequest, PutDatafeedResponse>(request, request.RequestParameters);
		public Task<PutDatafeedResponse> PutDatafeedAsync(IPutDatafeedRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutDatafeedRequest, PutDatafeedResponse>(request, request.RequestParameters, cancellationToken);
		public PutDatafeedResponse PutDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<PutDatafeedDescriptor, IPutDatafeedRequest> selector = null) => PutDatafeed(selector.InvokeOrDefault(new PutDatafeedDescriptor(datafeed_id)));
		public Task<PutDatafeedResponse> PutDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<PutDatafeedDescriptor, IPutDatafeedRequest> selector = null, CancellationToken cancellationToken = default) => PutDatafeedAsync(selector.InvokeOrDefault(new PutDatafeedDescriptor(datafeed_id)), cancellationToken);
		public PutDataFrameAnalyticsResponse PutDataFrameAnalytics(IPutDataFrameAnalyticsRequest request) => DoRequest<IPutDataFrameAnalyticsRequest, PutDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<PutDataFrameAnalyticsResponse> PutDataFrameAnalyticsAsync(IPutDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutDataFrameAnalyticsRequest, PutDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public PutDataFrameAnalyticsResponse PutDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Func<PutDataFrameAnalyticsDescriptor, IPutDataFrameAnalyticsRequest> selector = null) => PutDataFrameAnalytics(selector.InvokeOrDefault(new PutDataFrameAnalyticsDescriptor(id)));
		public Task<PutDataFrameAnalyticsResponse> PutDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Func<PutDataFrameAnalyticsDescriptor, IPutDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => PutDataFrameAnalyticsAsync(selector.InvokeOrDefault(new PutDataFrameAnalyticsDescriptor(id)), cancellationToken);
		public PutFilterResponse PutFilter(IPutFilterRequest request) => DoRequest<IPutFilterRequest, PutFilterResponse>(request, request.RequestParameters);
		public Task<PutFilterResponse> PutFilterAsync(IPutFilterRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutFilterRequest, PutFilterResponse>(request, request.RequestParameters, cancellationToken);
		public PutFilterResponse PutFilter(Elastic.Clients.Elasticsearch.Id filter_id, Func<PutFilterDescriptor, IPutFilterRequest> selector = null) => PutFilter(selector.InvokeOrDefault(new PutFilterDescriptor(filter_id)));
		public Task<PutFilterResponse> PutFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Func<PutFilterDescriptor, IPutFilterRequest> selector = null, CancellationToken cancellationToken = default) => PutFilterAsync(selector.InvokeOrDefault(new PutFilterDescriptor(filter_id)), cancellationToken);
		public PutJobResponse PutJob(IPutJobRequest request) => DoRequest<IPutJobRequest, PutJobResponse>(request, request.RequestParameters);
		public Task<PutJobResponse> PutJobAsync(IPutJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutJobRequest, PutJobResponse>(request, request.RequestParameters, cancellationToken);
		public PutJobResponse PutJob(Elastic.Clients.Elasticsearch.Id job_id, Func<PutJobDescriptor, IPutJobRequest> selector = null) => PutJob(selector.InvokeOrDefault(new PutJobDescriptor(job_id)));
		public Task<PutJobResponse> PutJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<PutJobDescriptor, IPutJobRequest> selector = null, CancellationToken cancellationToken = default) => PutJobAsync(selector.InvokeOrDefault(new PutJobDescriptor(job_id)), cancellationToken);
		public PutTrainedModelResponse PutTrainedModel(IPutTrainedModelRequest request) => DoRequest<IPutTrainedModelRequest, PutTrainedModelResponse>(request, request.RequestParameters);
		public Task<PutTrainedModelResponse> PutTrainedModelAsync(IPutTrainedModelRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutTrainedModelRequest, PutTrainedModelResponse>(request, request.RequestParameters, cancellationToken);
		public PutTrainedModelResponse PutTrainedModel(Elastic.Clients.Elasticsearch.Id model_id, Func<PutTrainedModelDescriptor, IPutTrainedModelRequest> selector = null) => PutTrainedModel(selector.InvokeOrDefault(new PutTrainedModelDescriptor(model_id)));
		public Task<PutTrainedModelResponse> PutTrainedModelAsync(Elastic.Clients.Elasticsearch.Id model_id, Func<PutTrainedModelDescriptor, IPutTrainedModelRequest> selector = null, CancellationToken cancellationToken = default) => PutTrainedModelAsync(selector.InvokeOrDefault(new PutTrainedModelDescriptor(model_id)), cancellationToken);
		public PutTrainedModelAliasResponse PutTrainedModelAlias(IPutTrainedModelAliasRequest request) => DoRequest<IPutTrainedModelAliasRequest, PutTrainedModelAliasResponse>(request, request.RequestParameters);
		public Task<PutTrainedModelAliasResponse> PutTrainedModelAliasAsync(IPutTrainedModelAliasRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IPutTrainedModelAliasRequest, PutTrainedModelAliasResponse>(request, request.RequestParameters, cancellationToken);
		public PutTrainedModelAliasResponse PutTrainedModelAlias(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Func<PutTrainedModelAliasDescriptor, IPutTrainedModelAliasRequest> selector = null) => PutTrainedModelAlias(selector.InvokeOrDefault(new PutTrainedModelAliasDescriptor(model_id, model_alias)));
		public Task<PutTrainedModelAliasResponse> PutTrainedModelAliasAsync(Elastic.Clients.Elasticsearch.Id model_id, Elastic.Clients.Elasticsearch.Name model_alias, Func<PutTrainedModelAliasDescriptor, IPutTrainedModelAliasRequest> selector = null, CancellationToken cancellationToken = default) => PutTrainedModelAliasAsync(selector.InvokeOrDefault(new PutTrainedModelAliasDescriptor(model_id, model_alias)), cancellationToken);
		public ResetJobResponse ResetJob(IResetJobRequest request) => DoRequest<IResetJobRequest, ResetJobResponse>(request, request.RequestParameters);
		public Task<ResetJobResponse> ResetJobAsync(IResetJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IResetJobRequest, ResetJobResponse>(request, request.RequestParameters, cancellationToken);
		public ResetJobResponse ResetJob(Elastic.Clients.Elasticsearch.Id job_id, Func<ResetJobDescriptor, IResetJobRequest> selector = null) => ResetJob(selector.InvokeOrDefault(new ResetJobDescriptor(job_id)));
		public Task<ResetJobResponse> ResetJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<ResetJobDescriptor, IResetJobRequest> selector = null, CancellationToken cancellationToken = default) => ResetJobAsync(selector.InvokeOrDefault(new ResetJobDescriptor(job_id)), cancellationToken);
		public RevertModelSnapshotResponse RevertModelSnapshot(IRevertModelSnapshotRequest request) => DoRequest<IRevertModelSnapshotRequest, RevertModelSnapshotResponse>(request, request.RequestParameters);
		public Task<RevertModelSnapshotResponse> RevertModelSnapshotAsync(IRevertModelSnapshotRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IRevertModelSnapshotRequest, RevertModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
		public RevertModelSnapshotResponse RevertModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<RevertModelSnapshotDescriptor, IRevertModelSnapshotRequest> selector = null) => RevertModelSnapshot(selector.InvokeOrDefault(new RevertModelSnapshotDescriptor(job_id, snapshot_id)));
		public Task<RevertModelSnapshotResponse> RevertModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<RevertModelSnapshotDescriptor, IRevertModelSnapshotRequest> selector = null, CancellationToken cancellationToken = default) => RevertModelSnapshotAsync(selector.InvokeOrDefault(new RevertModelSnapshotDescriptor(job_id, snapshot_id)), cancellationToken);
		public SetUpgradeModeResponse SetUpgradeMode(ISetUpgradeModeRequest request) => DoRequest<ISetUpgradeModeRequest, SetUpgradeModeResponse>(request, request.RequestParameters);
		public Task<SetUpgradeModeResponse> SetUpgradeModeAsync(ISetUpgradeModeRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<ISetUpgradeModeRequest, SetUpgradeModeResponse>(request, request.RequestParameters, cancellationToken);
		public SetUpgradeModeResponse SetUpgradeMode(Func<SetUpgradeModeDescriptor, ISetUpgradeModeRequest> selector = null) => SetUpgradeMode(selector.InvokeOrDefault(new SetUpgradeModeDescriptor()));
		public Task<SetUpgradeModeResponse> SetUpgradeModeAsync(Func<SetUpgradeModeDescriptor, ISetUpgradeModeRequest> selector = null, CancellationToken cancellationToken = default) => SetUpgradeModeAsync(selector.InvokeOrDefault(new SetUpgradeModeDescriptor()), cancellationToken);
		public StartDatafeedResponse StartDatafeed(IStartDatafeedRequest request) => DoRequest<IStartDatafeedRequest, StartDatafeedResponse>(request, request.RequestParameters);
		public Task<StartDatafeedResponse> StartDatafeedAsync(IStartDatafeedRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStartDatafeedRequest, StartDatafeedResponse>(request, request.RequestParameters, cancellationToken);
		public StartDatafeedResponse StartDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<StartDatafeedDescriptor, IStartDatafeedRequest> selector = null) => StartDatafeed(selector.InvokeOrDefault(new StartDatafeedDescriptor(datafeed_id)));
		public Task<StartDatafeedResponse> StartDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<StartDatafeedDescriptor, IStartDatafeedRequest> selector = null, CancellationToken cancellationToken = default) => StartDatafeedAsync(selector.InvokeOrDefault(new StartDatafeedDescriptor(datafeed_id)), cancellationToken);
		public StartDataFrameAnalyticsResponse StartDataFrameAnalytics(IStartDataFrameAnalyticsRequest request) => DoRequest<IStartDataFrameAnalyticsRequest, StartDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<StartDataFrameAnalyticsResponse> StartDataFrameAnalyticsAsync(IStartDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStartDataFrameAnalyticsRequest, StartDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public StartDataFrameAnalyticsResponse StartDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Func<StartDataFrameAnalyticsDescriptor, IStartDataFrameAnalyticsRequest> selector = null) => StartDataFrameAnalytics(selector.InvokeOrDefault(new StartDataFrameAnalyticsDescriptor(id)));
		public Task<StartDataFrameAnalyticsResponse> StartDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Func<StartDataFrameAnalyticsDescriptor, IStartDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => StartDataFrameAnalyticsAsync(selector.InvokeOrDefault(new StartDataFrameAnalyticsDescriptor(id)), cancellationToken);
		public StopDatafeedResponse StopDatafeed(IStopDatafeedRequest request) => DoRequest<IStopDatafeedRequest, StopDatafeedResponse>(request, request.RequestParameters);
		public Task<StopDatafeedResponse> StopDatafeedAsync(IStopDatafeedRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStopDatafeedRequest, StopDatafeedResponse>(request, request.RequestParameters, cancellationToken);
		public StopDatafeedResponse StopDatafeed(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<StopDatafeedDescriptor, IStopDatafeedRequest> selector = null) => StopDatafeed(selector.InvokeOrDefault(new StopDatafeedDescriptor(datafeed_id)));
		public Task<StopDatafeedResponse> StopDatafeedAsync(Elastic.Clients.Elasticsearch.Id datafeed_id, Func<StopDatafeedDescriptor, IStopDatafeedRequest> selector = null, CancellationToken cancellationToken = default) => StopDatafeedAsync(selector.InvokeOrDefault(new StopDatafeedDescriptor(datafeed_id)), cancellationToken);
		public StopDataFrameAnalyticsResponse StopDataFrameAnalytics(IStopDataFrameAnalyticsRequest request) => DoRequest<IStopDataFrameAnalyticsRequest, StopDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<StopDataFrameAnalyticsResponse> StopDataFrameAnalyticsAsync(IStopDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IStopDataFrameAnalyticsRequest, StopDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public StopDataFrameAnalyticsResponse StopDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Func<StopDataFrameAnalyticsDescriptor, IStopDataFrameAnalyticsRequest> selector = null) => StopDataFrameAnalytics(selector.InvokeOrDefault(new StopDataFrameAnalyticsDescriptor(id)));
		public Task<StopDataFrameAnalyticsResponse> StopDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Func<StopDataFrameAnalyticsDescriptor, IStopDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => StopDataFrameAnalyticsAsync(selector.InvokeOrDefault(new StopDataFrameAnalyticsDescriptor(id)), cancellationToken);
		public UpdateDataFrameAnalyticsResponse UpdateDataFrameAnalytics(IUpdateDataFrameAnalyticsRequest request) => DoRequest<IUpdateDataFrameAnalyticsRequest, UpdateDataFrameAnalyticsResponse>(request, request.RequestParameters);
		public Task<UpdateDataFrameAnalyticsResponse> UpdateDataFrameAnalyticsAsync(IUpdateDataFrameAnalyticsRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateDataFrameAnalyticsRequest, UpdateDataFrameAnalyticsResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateDataFrameAnalyticsResponse UpdateDataFrameAnalytics(Elastic.Clients.Elasticsearch.Id id, Func<UpdateDataFrameAnalyticsDescriptor, IUpdateDataFrameAnalyticsRequest> selector = null) => UpdateDataFrameAnalytics(selector.InvokeOrDefault(new UpdateDataFrameAnalyticsDescriptor(id)));
		public Task<UpdateDataFrameAnalyticsResponse> UpdateDataFrameAnalyticsAsync(Elastic.Clients.Elasticsearch.Id id, Func<UpdateDataFrameAnalyticsDescriptor, IUpdateDataFrameAnalyticsRequest> selector = null, CancellationToken cancellationToken = default) => UpdateDataFrameAnalyticsAsync(selector.InvokeOrDefault(new UpdateDataFrameAnalyticsDescriptor(id)), cancellationToken);
		public UpdateFilterResponse UpdateFilter(IUpdateFilterRequest request) => DoRequest<IUpdateFilterRequest, UpdateFilterResponse>(request, request.RequestParameters);
		public Task<UpdateFilterResponse> UpdateFilterAsync(IUpdateFilterRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateFilterRequest, UpdateFilterResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateFilterResponse UpdateFilter(Elastic.Clients.Elasticsearch.Id filter_id, Func<UpdateFilterDescriptor, IUpdateFilterRequest> selector = null) => UpdateFilter(selector.InvokeOrDefault(new UpdateFilterDescriptor(filter_id)));
		public Task<UpdateFilterResponse> UpdateFilterAsync(Elastic.Clients.Elasticsearch.Id filter_id, Func<UpdateFilterDescriptor, IUpdateFilterRequest> selector = null, CancellationToken cancellationToken = default) => UpdateFilterAsync(selector.InvokeOrDefault(new UpdateFilterDescriptor(filter_id)), cancellationToken);
		public UpdateJobResponse UpdateJob(IUpdateJobRequest request) => DoRequest<IUpdateJobRequest, UpdateJobResponse>(request, request.RequestParameters);
		public Task<UpdateJobResponse> UpdateJobAsync(IUpdateJobRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateJobRequest, UpdateJobResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateJobResponse UpdateJob(Elastic.Clients.Elasticsearch.Id job_id, Func<UpdateJobDescriptor, IUpdateJobRequest> selector = null) => UpdateJob(selector.InvokeOrDefault(new UpdateJobDescriptor(job_id)));
		public Task<UpdateJobResponse> UpdateJobAsync(Elastic.Clients.Elasticsearch.Id job_id, Func<UpdateJobDescriptor, IUpdateJobRequest> selector = null, CancellationToken cancellationToken = default) => UpdateJobAsync(selector.InvokeOrDefault(new UpdateJobDescriptor(job_id)), cancellationToken);
		public UpdateModelSnapshotResponse UpdateModelSnapshot(IUpdateModelSnapshotRequest request) => DoRequest<IUpdateModelSnapshotRequest, UpdateModelSnapshotResponse>(request, request.RequestParameters);
		public Task<UpdateModelSnapshotResponse> UpdateModelSnapshotAsync(IUpdateModelSnapshotRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpdateModelSnapshotRequest, UpdateModelSnapshotResponse>(request, request.RequestParameters, cancellationToken);
		public UpdateModelSnapshotResponse UpdateModelSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<UpdateModelSnapshotDescriptor, IUpdateModelSnapshotRequest> selector = null) => UpdateModelSnapshot(selector.InvokeOrDefault(new UpdateModelSnapshotDescriptor(job_id, snapshot_id)));
		public Task<UpdateModelSnapshotResponse> UpdateModelSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<UpdateModelSnapshotDescriptor, IUpdateModelSnapshotRequest> selector = null, CancellationToken cancellationToken = default) => UpdateModelSnapshotAsync(selector.InvokeOrDefault(new UpdateModelSnapshotDescriptor(job_id, snapshot_id)), cancellationToken);
		public UpgradeJobSnapshotResponse UpgradeJobSnapshot(IUpgradeJobSnapshotRequest request) => DoRequest<IUpgradeJobSnapshotRequest, UpgradeJobSnapshotResponse>(request, request.RequestParameters);
		public Task<UpgradeJobSnapshotResponse> UpgradeJobSnapshotAsync(IUpgradeJobSnapshotRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IUpgradeJobSnapshotRequest, UpgradeJobSnapshotResponse>(request, request.RequestParameters, cancellationToken);
		public UpgradeJobSnapshotResponse UpgradeJobSnapshot(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<UpgradeJobSnapshotDescriptor, IUpgradeJobSnapshotRequest> selector = null) => UpgradeJobSnapshot(selector.InvokeOrDefault(new UpgradeJobSnapshotDescriptor(job_id, snapshot_id)));
		public Task<UpgradeJobSnapshotResponse> UpgradeJobSnapshotAsync(Elastic.Clients.Elasticsearch.Id job_id, Elastic.Clients.Elasticsearch.Id snapshot_id, Func<UpgradeJobSnapshotDescriptor, IUpgradeJobSnapshotRequest> selector = null, CancellationToken cancellationToken = default) => UpgradeJobSnapshotAsync(selector.InvokeOrDefault(new UpgradeJobSnapshotDescriptor(job_id, snapshot_id)), cancellationToken);
		public ValidateResponse Validate(IValidateRequest request) => DoRequest<IValidateRequest, ValidateResponse>(request, request.RequestParameters);
		public Task<ValidateResponse> ValidateAsync(IValidateRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IValidateRequest, ValidateResponse>(request, request.RequestParameters, cancellationToken);
		public ValidateResponse Validate(Func<ValidateDescriptor, IValidateRequest> selector = null) => Validate(selector.InvokeOrDefault(new ValidateDescriptor()));
		public Task<ValidateResponse> ValidateAsync(Func<ValidateDescriptor, IValidateRequest> selector = null, CancellationToken cancellationToken = default) => ValidateAsync(selector.InvokeOrDefault(new ValidateDescriptor()), cancellationToken);
		public ValidateDetectorResponse ValidateDetector(IValidateDetectorRequest request) => DoRequest<IValidateDetectorRequest, ValidateDetectorResponse>(request, request.RequestParameters);
		public Task<ValidateDetectorResponse> ValidateDetectorAsync(IValidateDetectorRequest request, CancellationToken cancellationToken = default) => DoRequestAsync<IValidateDetectorRequest, ValidateDetectorResponse>(request, request.RequestParameters, cancellationToken);
		public ValidateDetectorResponse ValidateDetector(Func<ValidateDetectorDescriptor, IValidateDetectorRequest> selector = null) => ValidateDetector(selector.InvokeOrDefault(new ValidateDetectorDescriptor()));
		public Task<ValidateDetectorResponse> ValidateDetectorAsync(Func<ValidateDetectorDescriptor, IValidateDetectorRequest> selector = null, CancellationToken cancellationToken = default) => ValidateDetectorAsync(selector.InvokeOrDefault(new ValidateDetectorDescriptor()), cancellationToken);
	}
}