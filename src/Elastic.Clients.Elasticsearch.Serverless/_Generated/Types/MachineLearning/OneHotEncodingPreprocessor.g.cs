// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.MachineLearning;

public sealed partial class OneHotEncodingPreprocessor
{
	[JsonInclude, JsonPropertyName("field")]
	public string Field { get; set; }
	[JsonInclude, JsonPropertyName("hot_map")]
	public IDictionary<string, string> HotMap { get; set; }

	public static implicit operator Elastic.Clients.Elasticsearch.Serverless.MachineLearning.Preprocessor(OneHotEncodingPreprocessor oneHotEncodingPreprocessor) => Elastic.Clients.Elasticsearch.Serverless.MachineLearning.Preprocessor.OneHotEncoding(oneHotEncodingPreprocessor);
}

public sealed partial class OneHotEncodingPreprocessorDescriptor : SerializableDescriptor<OneHotEncodingPreprocessorDescriptor>
{
	internal OneHotEncodingPreprocessorDescriptor(Action<OneHotEncodingPreprocessorDescriptor> configure) => configure.Invoke(this);

	public OneHotEncodingPreprocessorDescriptor() : base()
	{
	}

	private string FieldValue { get; set; }
	private IDictionary<string, string> HotMapValue { get; set; }

	public OneHotEncodingPreprocessorDescriptor Field(string field)
	{
		FieldValue = field;
		return Self;
	}

	public OneHotEncodingPreprocessorDescriptor HotMap(Func<FluentDictionary<string, string>, FluentDictionary<string, string>> selector)
	{
		HotMapValue = selector?.Invoke(new FluentDictionary<string, string>());
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("field");
		writer.WriteStringValue(FieldValue);
		writer.WritePropertyName("hot_map");
		JsonSerializer.Serialize(writer, HotMapValue, options);
		writer.WriteEndObject();
	}
}