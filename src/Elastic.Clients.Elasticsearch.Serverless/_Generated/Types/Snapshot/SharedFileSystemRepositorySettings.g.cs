// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Snapshot;

public sealed partial class SharedFileSystemRepositorySettings
{
	[JsonInclude, JsonPropertyName("chunk_size")]
	public Elastic.Clients.Elasticsearch.Serverless.ByteSize? ChunkSize { get; set; }
	[JsonInclude, JsonPropertyName("compress")]
	public bool? Compress { get; set; }
	[JsonInclude, JsonPropertyName("location")]
	public string Location { get; set; }
	[JsonInclude, JsonPropertyName("max_number_of_snapshots")]
	public int? MaxNumberOfSnapshots { get; set; }
	[JsonInclude, JsonPropertyName("max_restore_bytes_per_sec")]
	public Elastic.Clients.Elasticsearch.Serverless.ByteSize? MaxRestoreBytesPerSec { get; set; }
	[JsonInclude, JsonPropertyName("max_snapshot_bytes_per_sec")]
	public Elastic.Clients.Elasticsearch.Serverless.ByteSize? MaxSnapshotBytesPerSec { get; set; }
	[JsonInclude, JsonPropertyName("readonly")]
	public bool? Readonly { get; set; }
}

public sealed partial class SharedFileSystemRepositorySettingsDescriptor : SerializableDescriptor<SharedFileSystemRepositorySettingsDescriptor>
{
	internal SharedFileSystemRepositorySettingsDescriptor(Action<SharedFileSystemRepositorySettingsDescriptor> configure) => configure.Invoke(this);

	public SharedFileSystemRepositorySettingsDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Serverless.ByteSize? ChunkSizeValue { get; set; }
	private bool? CompressValue { get; set; }
	private string LocationValue { get; set; }
	private int? MaxNumberOfSnapshotsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.ByteSize? MaxRestoreBytesPerSecValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.ByteSize? MaxSnapshotBytesPerSecValue { get; set; }
	private bool? ReadonlyValue { get; set; }

	public SharedFileSystemRepositorySettingsDescriptor ChunkSize(Elastic.Clients.Elasticsearch.Serverless.ByteSize? chunkSize)
	{
		ChunkSizeValue = chunkSize;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor Compress(bool? compress = true)
	{
		CompressValue = compress;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor Location(string location)
	{
		LocationValue = location;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor MaxNumberOfSnapshots(int? maxNumberOfSnapshots)
	{
		MaxNumberOfSnapshotsValue = maxNumberOfSnapshots;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor MaxRestoreBytesPerSec(Elastic.Clients.Elasticsearch.Serverless.ByteSize? maxRestoreBytesPerSec)
	{
		MaxRestoreBytesPerSecValue = maxRestoreBytesPerSec;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor MaxSnapshotBytesPerSec(Elastic.Clients.Elasticsearch.Serverless.ByteSize? maxSnapshotBytesPerSec)
	{
		MaxSnapshotBytesPerSecValue = maxSnapshotBytesPerSec;
		return Self;
	}

	public SharedFileSystemRepositorySettingsDescriptor Readonly(bool? value = true)
	{
		ReadonlyValue = value;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (ChunkSizeValue is not null)
		{
			writer.WritePropertyName("chunk_size");
			JsonSerializer.Serialize(writer, ChunkSizeValue, options);
		}

		if (CompressValue.HasValue)
		{
			writer.WritePropertyName("compress");
			writer.WriteBooleanValue(CompressValue.Value);
		}

		writer.WritePropertyName("location");
		writer.WriteStringValue(LocationValue);
		if (MaxNumberOfSnapshotsValue.HasValue)
		{
			writer.WritePropertyName("max_number_of_snapshots");
			writer.WriteNumberValue(MaxNumberOfSnapshotsValue.Value);
		}

		if (MaxRestoreBytesPerSecValue is not null)
		{
			writer.WritePropertyName("max_restore_bytes_per_sec");
			JsonSerializer.Serialize(writer, MaxRestoreBytesPerSecValue, options);
		}

		if (MaxSnapshotBytesPerSecValue is not null)
		{
			writer.WritePropertyName("max_snapshot_bytes_per_sec");
			JsonSerializer.Serialize(writer, MaxSnapshotBytesPerSecValue, options);
		}

		if (ReadonlyValue.HasValue)
		{
			writer.WritePropertyName("readonly");
			writer.WriteBooleanValue(ReadonlyValue.Value);
		}

		writer.WriteEndObject();
	}
}