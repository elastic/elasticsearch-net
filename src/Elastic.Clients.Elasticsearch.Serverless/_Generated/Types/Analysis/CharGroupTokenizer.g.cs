// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Analysis;

public sealed partial class CharGroupTokenizer : ITokenizer
{
	[JsonInclude, JsonPropertyName("max_token_length")]
	public int? MaxTokenLength { get; set; }
	[JsonInclude, JsonPropertyName("tokenize_on_chars")]
	public ICollection<string> TokenizeOnChars { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "char_group";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class CharGroupTokenizerDescriptor : SerializableDescriptor<CharGroupTokenizerDescriptor>, IBuildableDescriptor<CharGroupTokenizer>
{
	internal CharGroupTokenizerDescriptor(Action<CharGroupTokenizerDescriptor> configure) => configure.Invoke(this);

	public CharGroupTokenizerDescriptor() : base()
	{
	}

	private int? MaxTokenLengthValue { get; set; }
	private ICollection<string> TokenizeOnCharsValue { get; set; }
	private string? VersionValue { get; set; }

	public CharGroupTokenizerDescriptor MaxTokenLength(int? maxTokenLength)
	{
		MaxTokenLengthValue = maxTokenLength;
		return Self;
	}

	public CharGroupTokenizerDescriptor TokenizeOnChars(ICollection<string> tokenizeOnChars)
	{
		TokenizeOnCharsValue = tokenizeOnChars;
		return Self;
	}

	public CharGroupTokenizerDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MaxTokenLengthValue.HasValue)
		{
			writer.WritePropertyName("max_token_length");
			writer.WriteNumberValue(MaxTokenLengthValue.Value);
		}

		writer.WritePropertyName("tokenize_on_chars");
		JsonSerializer.Serialize(writer, TokenizeOnCharsValue, options);
		writer.WritePropertyName("type");
		writer.WriteStringValue("char_group");
		if (!string.IsNullOrEmpty(VersionValue))
		{
			writer.WritePropertyName("version");
			writer.WriteStringValue(VersionValue);
		}

		writer.WriteEndObject();
	}

	CharGroupTokenizer IBuildableDescriptor<CharGroupTokenizer>.Build() => new()
	{
		MaxTokenLength = MaxTokenLengthValue,
		TokenizeOnChars = TokenizeOnCharsValue,
		Version = VersionValue
	};
}