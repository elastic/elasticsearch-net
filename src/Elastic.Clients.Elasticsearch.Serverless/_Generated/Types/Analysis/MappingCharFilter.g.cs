// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Analysis;

public sealed partial class MappingCharFilter : ICharFilter
{
	[JsonInclude, JsonPropertyName("mappings")]
	public ICollection<string>? Mappings { get; set; }
	[JsonInclude, JsonPropertyName("mappings_path")]
	public string? MappingsPath { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "mapping";

	[JsonInclude, JsonPropertyName("version")]
	public string? Version { get; set; }
}

public sealed partial class MappingCharFilterDescriptor : SerializableDescriptor<MappingCharFilterDescriptor>, IBuildableDescriptor<MappingCharFilter>
{
	internal MappingCharFilterDescriptor(Action<MappingCharFilterDescriptor> configure) => configure.Invoke(this);

	public MappingCharFilterDescriptor() : base()
	{
	}

	private ICollection<string>? MappingsValue { get; set; }
	private string? MappingsPathValue { get; set; }
	private string? VersionValue { get; set; }

	public MappingCharFilterDescriptor Mappings(ICollection<string>? mappings)
	{
		MappingsValue = mappings;
		return Self;
	}

	public MappingCharFilterDescriptor MappingsPath(string? mappingsPath)
	{
		MappingsPathValue = mappingsPath;
		return Self;
	}

	public MappingCharFilterDescriptor Version(string? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MappingsValue is not null)
		{
			writer.WritePropertyName("mappings");
			JsonSerializer.Serialize(writer, MappingsValue, options);
		}

		if (!string.IsNullOrEmpty(MappingsPathValue))
		{
			writer.WritePropertyName("mappings_path");
			writer.WriteStringValue(MappingsPathValue);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("mapping");
		if (VersionValue is not null)
		{
			writer.WritePropertyName("version");
			JsonSerializer.Serialize(writer, VersionValue, options);
		}

		writer.WriteEndObject();
	}

	MappingCharFilter IBuildableDescriptor<MappingCharFilter>.Build() => new()
	{
		Mappings = MappingsValue,
		MappingsPath = MappingsPathValue,
		Version = VersionValue
	};
}