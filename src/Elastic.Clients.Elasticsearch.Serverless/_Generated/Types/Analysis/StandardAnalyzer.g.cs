// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Analysis;

public sealed partial class StandardAnalyzer : IAnalyzer
{
	[JsonInclude, JsonPropertyName("max_token_length")]
	public int? MaxTokenLength { get; set; }
	[JsonInclude, JsonPropertyName("stopwords")]
	[SingleOrManyCollectionConverter(typeof(string))]
	public ICollection<string>? Stopwords { get; set; }

	[JsonInclude, JsonPropertyName("type")]
	public string Type => "standard";
}

public sealed partial class StandardAnalyzerDescriptor : SerializableDescriptor<StandardAnalyzerDescriptor>, IBuildableDescriptor<StandardAnalyzer>
{
	internal StandardAnalyzerDescriptor(Action<StandardAnalyzerDescriptor> configure) => configure.Invoke(this);

	public StandardAnalyzerDescriptor() : base()
	{
	}

	private int? MaxTokenLengthValue { get; set; }
	private ICollection<string>? StopwordsValue { get; set; }

	public StandardAnalyzerDescriptor MaxTokenLength(int? maxTokenLength)
	{
		MaxTokenLengthValue = maxTokenLength;
		return Self;
	}

	public StandardAnalyzerDescriptor Stopwords(ICollection<string>? stopwords)
	{
		StopwordsValue = stopwords;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MaxTokenLengthValue.HasValue)
		{
			writer.WritePropertyName("max_token_length");
			writer.WriteNumberValue(MaxTokenLengthValue.Value);
		}

		if (StopwordsValue is not null)
		{
			writer.WritePropertyName("stopwords");
			SingleOrManySerializationHelper.Serialize<string>(StopwordsValue, writer, options);
		}

		writer.WritePropertyName("type");
		writer.WriteStringValue("standard");
		writer.WriteEndObject();
	}

	StandardAnalyzer IBuildableDescriptor<StandardAnalyzer>.Build() => new()
	{
		MaxTokenLength = MaxTokenLengthValue,
		Stopwords = StopwordsValue
	};
}