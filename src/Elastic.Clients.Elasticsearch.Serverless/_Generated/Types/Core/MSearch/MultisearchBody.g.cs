// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Core.MSearch;

internal sealed partial class MultisearchBodyConverter : JsonConverter<MultisearchBody>
{
	public override MultisearchBody Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.Aggregations.Aggregation>? aggregations = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.FieldCollapse? collapse = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>? docvalueFields = default;
		bool? explain = default;
		IReadOnlyDictionary<string, object>? ext = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>? fields = default;
		int? from = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.Highlight? highlight = default;
		IReadOnlyCollection<IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.IndexName, double>>? indicesBoost = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.KnnQuery>? knn = default;
		double? minScore = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.PointInTimeReference? pit = default;
		Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? postFilter = default;
		bool? profile = default;
		Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? query = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.Core.Search.Rescore>? rescore = default;
		IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.Field, Elastic.Clients.Elasticsearch.Serverless.Mapping.RuntimeField>? runtimeMappings = default;
		IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.ScriptField>? scriptFields = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.FieldValue>? searchAfter = default;
		bool? seqNoPrimaryTerm = default;
		int? size = default;
		IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.SortOptions>? sort = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.SourceConfig? source = default;
		IReadOnlyCollection<string>? stats = default;
		Elastic.Clients.Elasticsearch.Serverless.Fields? storedFields = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.Suggester? suggest = default;
		long? terminateAfter = default;
		string? timeout = default;
		bool? trackScores = default;
		Elastic.Clients.Elasticsearch.Serverless.Core.Search.TrackHits? trackTotalHits = default;
		bool? version = default;
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				var property = reader.GetString();
				if (property == "aggregations" || property == "aggs")
				{
					aggregations = JsonSerializer.Deserialize<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.Aggregations.Aggregation>?>(ref reader, options);
					continue;
				}

				if (property == "collapse")
				{
					collapse = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.FieldCollapse?>(ref reader, options);
					continue;
				}

				if (property == "docvalue_fields")
				{
					docvalueFields = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>?>(ref reader, options);
					continue;
				}

				if (property == "explain")
				{
					explain = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "ext")
				{
					ext = JsonSerializer.Deserialize<IReadOnlyDictionary<string, object>?>(ref reader, options);
					continue;
				}

				if (property == "fields")
				{
					fields = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>?>(ref reader, options);
					continue;
				}

				if (property == "from")
				{
					from = JsonSerializer.Deserialize<int?>(ref reader, options);
					continue;
				}

				if (property == "highlight")
				{
					highlight = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.Highlight?>(ref reader, options);
					continue;
				}

				if (property == "indices_boost")
				{
					indicesBoost = JsonSerializer.Deserialize<IReadOnlyCollection<IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.IndexName, double>>?>(ref reader, options);
					continue;
				}

				if (property == "knn")
				{
					knn = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.KnnQuery>?>(ref reader, options);
					continue;
				}

				if (property == "min_score")
				{
					minScore = JsonSerializer.Deserialize<double?>(ref reader, options);
					continue;
				}

				if (property == "pit")
				{
					pit = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.PointInTimeReference?>(ref reader, options);
					continue;
				}

				if (property == "post_filter")
				{
					postFilter = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query?>(ref reader, options);
					continue;
				}

				if (property == "profile")
				{
					profile = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "query")
				{
					query = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query?>(ref reader, options);
					continue;
				}

				if (property == "rescore")
				{
					rescore = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.Core.Search.Rescore>?>(ref reader, options);
					continue;
				}

				if (property == "runtime_mappings")
				{
					runtimeMappings = JsonSerializer.Deserialize<IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.Field, Elastic.Clients.Elasticsearch.Serverless.Mapping.RuntimeField>?>(ref reader, options);
					continue;
				}

				if (property == "script_fields")
				{
					scriptFields = JsonSerializer.Deserialize<IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.ScriptField>?>(ref reader, options);
					continue;
				}

				if (property == "search_after")
				{
					searchAfter = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.FieldValue>?>(ref reader, options);
					continue;
				}

				if (property == "seq_no_primary_term")
				{
					seqNoPrimaryTerm = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "size")
				{
					size = JsonSerializer.Deserialize<int?>(ref reader, options);
					continue;
				}

				if (property == "sort")
				{
					sort = JsonSerializer.Deserialize<IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.SortOptions>?>(ref reader, options);
					continue;
				}

				if (property == "_source")
				{
					source = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.SourceConfig?>(ref reader, options);
					continue;
				}

				if (property == "stats")
				{
					stats = JsonSerializer.Deserialize<IReadOnlyCollection<string>?>(ref reader, options);
					continue;
				}

				if (property == "stored_fields")
				{
					storedFields = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Fields?>(ref reader, options);
					continue;
				}

				if (property == "suggest")
				{
					suggest = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.Suggester?>(ref reader, options);
					continue;
				}

				if (property == "terminate_after")
				{
					terminateAfter = JsonSerializer.Deserialize<long?>(ref reader, options);
					continue;
				}

				if (property == "timeout")
				{
					timeout = JsonSerializer.Deserialize<string?>(ref reader, options);
					continue;
				}

				if (property == "track_scores")
				{
					trackScores = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}

				if (property == "track_total_hits")
				{
					trackTotalHits = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Core.Search.TrackHits?>(ref reader, options);
					continue;
				}

				if (property == "version")
				{
					version = JsonSerializer.Deserialize<bool?>(ref reader, options);
					continue;
				}
			}
		}

		return new MultisearchBody { Aggregations = aggregations, Collapse = collapse, DocvalueFields = docvalueFields, Explain = explain, Ext = ext, Fields = fields, From = from, Highlight = highlight, IndicesBoost = indicesBoost, Knn = knn, MinScore = minScore, Pit = pit, PostFilter = postFilter, Profile = profile, Query = query, Rescore = rescore, RuntimeMappings = runtimeMappings, ScriptFields = scriptFields, SearchAfter = searchAfter, SeqNoPrimaryTerm = seqNoPrimaryTerm, Size = size, Sort = sort, Source = source, Stats = stats, StoredFields = storedFields, Suggest = suggest, TerminateAfter = terminateAfter, Timeout = timeout, TrackScores = trackScores, TrackTotalHits = trackTotalHits, Version = version };
	}

	public override void Write(Utf8JsonWriter writer, MultisearchBody value, JsonSerializerOptions options)
	{
		throw new NotImplementedException("'MultisearchBody' is a readonly type, used only on responses and does not support being written to JSON.");
	}
}

[JsonConverter(typeof(MultisearchBodyConverter))]
public sealed partial class MultisearchBody
{
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.Aggregations.Aggregation>? Aggregations { get; init; }
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.FieldCollapse? Collapse { get; init; }

	/// <summary>
	/// <para>Array of wildcard (*) patterns. The request returns doc values for field<br/>names matching these patterns in the hits.fields property of the response.</para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>? DocvalueFields { get; init; }

	/// <summary>
	/// <para>If true, returns detailed information about score computation as part of a hit.</para>
	/// </summary>
	public bool? Explain { get; init; }

	/// <summary>
	/// <para>Configuration of search extensions defined by Elasticsearch plugins.</para>
	/// </summary>
	public IReadOnlyDictionary<string, object>? Ext { get; init; }

	/// <summary>
	/// <para>Array of wildcard (*) patterns. The request returns values for field names<br/>matching these patterns in the hits.fields property of the response.</para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.FieldAndFormat>? Fields { get; init; }

	/// <summary>
	/// <para>Starting document offset. By default, you cannot page through more than 10,000<br/>hits using the from and size parameters. To page through more hits, use the<br/>search_after parameter.</para>
	/// </summary>
	public int? From { get; init; }
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.Highlight? Highlight { get; init; }

	/// <summary>
	/// <para>Boosts the _score of documents from specified indices.</para>
	/// </summary>
	public IReadOnlyCollection<IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.IndexName, double>>? IndicesBoost { get; init; }

	/// <summary>
	/// <para>Defines the approximate kNN search to run.</para>
	/// </summary>
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.KnnQuery>? Knn { get; init; }

	/// <summary>
	/// <para>Minimum _score for matching documents. Documents with a lower _score are<br/>not included in the search results.</para>
	/// </summary>
	public double? MinScore { get; init; }

	/// <summary>
	/// <para>Limits the search to a point in time (PIT). If you provide a PIT, you<br/>cannot specify an <index> in the request path.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.PointInTimeReference? Pit { get; init; }
	public Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? PostFilter { get; init; }
	public bool? Profile { get; init; }

	/// <summary>
	/// <para>Defines the search definition using the Query DSL.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? Query { get; init; }
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.Core.Search.Rescore>? Rescore { get; init; }

	/// <summary>
	/// <para>Defines one or more runtime fields in the search request. These fields take<br/>precedence over mapped fields with the same name.</para>
	/// </summary>
	public IReadOnlyDictionary<Elastic.Clients.Elasticsearch.Serverless.Field, Elastic.Clients.Elasticsearch.Serverless.Mapping.RuntimeField>? RuntimeMappings { get; init; }

	/// <summary>
	/// <para>Retrieve a script evaluation (based on different fields) for each hit.</para>
	/// </summary>
	public IReadOnlyDictionary<string, Elastic.Clients.Elasticsearch.Serverless.ScriptField>? ScriptFields { get; init; }
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.FieldValue>? SearchAfter { get; init; }

	/// <summary>
	/// <para>If true, returns sequence number and primary term of the last modification<br/>of each hit. See Optimistic concurrency control.</para>
	/// </summary>
	public bool? SeqNoPrimaryTerm { get; init; }

	/// <summary>
	/// <para>The number of hits to return. By default, you cannot page through more<br/>than 10,000 hits using the from and size parameters. To page through more<br/>hits, use the search_after parameter.</para>
	/// </summary>
	public int? Size { get; init; }
	public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Serverless.SortOptions>? Sort { get; init; }

	/// <summary>
	/// <para>Indicates which source fields are returned for matching documents. These<br/>fields are returned in the hits._source property of the search response.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.SourceConfig? Source { get; init; }

	/// <summary>
	/// <para>Stats groups to associate with the search. Each group maintains a statistics<br/>aggregation for its associated searches. You can retrieve these stats using<br/>the indices stats API.</para>
	/// </summary>
	public IReadOnlyCollection<string>? Stats { get; init; }

	/// <summary>
	/// <para>List of stored fields to return as part of a hit. If no fields are specified,<br/>no stored fields are included in the response. If this field is specified, the _source<br/>parameter defaults to false. You can pass _source: true to return both source fields<br/>and stored fields in the search response.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Fields? StoredFields { get; init; }
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.Suggester? Suggest { get; init; }

	/// <summary>
	/// <para>Maximum number of documents to collect for each shard. If a query reaches this<br/>limit, Elasticsearch terminates the query early. Elasticsearch collects documents<br/>before sorting. Defaults to 0, which does not terminate query execution early.</para>
	/// </summary>
	public long? TerminateAfter { get; init; }

	/// <summary>
	/// <para>Specifies the period of time to wait for a response from each shard. If no response<br/>is received before the timeout expires, the request fails and returns an error.<br/>Defaults to no timeout.</para>
	/// </summary>
	public string? Timeout { get; init; }

	/// <summary>
	/// <para>If true, calculate and return document scores, even if the scores are not used for sorting.</para>
	/// </summary>
	public bool? TrackScores { get; init; }

	/// <summary>
	/// <para>Number of hits matching the query to count accurately. If true, the exact<br/>number of hits is returned at the cost of some performance. If false, the<br/>response does not include the total number of hits matching the query.<br/>Defaults to 10,000 hits.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Core.Search.TrackHits? TrackTotalHits { get; init; }

	/// <summary>
	/// <para>If true, returns document version as part of a hit.</para>
	/// </summary>
	public bool? Version { get; init; }
}