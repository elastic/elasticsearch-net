// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Nodes;

public sealed partial class ThreadCount
{
	/// <summary>
	/// <para>
	/// Number of active threads in the thread pool.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("active")]
	public long? Active { get; init; }

	/// <summary>
	/// <para>
	/// Number of tasks completed by the thread pool executor.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("completed")]
	public long? Completed { get; init; }

	/// <summary>
	/// <para>
	/// Highest number of active threads in the thread pool.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("largest")]
	public long? Largest { get; init; }

	/// <summary>
	/// <para>
	/// Number of tasks in queue for the thread pool.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("queue")]
	public long? Queue { get; init; }

	/// <summary>
	/// <para>
	/// Number of tasks rejected by the thread pool executor.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("rejected")]
	public long? Rejected { get; init; }

	/// <summary>
	/// <para>
	/// Number of threads in the thread pool.
	/// </para>
	/// </summary>
	[JsonInclude, JsonPropertyName("threads")]
	public long? Threads { get; init; }
}