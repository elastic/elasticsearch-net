// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Aggregations;

internal sealed class SignificantTermsAggregationConverter : JsonConverter<SignificantTermsAggregation>
{
	public override SignificantTermsAggregation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
			throw new JsonException("Unexpected JSON detected.");
		reader.Read();
		var aggName = reader.GetString();
		if (aggName != "significant_terms")
			throw new JsonException("Unexpected JSON detected.");
		var agg = new SignificantTermsAggregation(aggName);
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				if (reader.ValueTextEquals("background_filter"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query?>(ref reader, options);
					if (value is not null)
					{
						agg.BackgroundFilter = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("chi_square"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic?>(ref reader, options);
					if (value is not null)
					{
						agg.ChiSquare = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("exclude"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude?>(ref reader, options);
					if (value is not null)
					{
						agg.Exclude = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("execution_hint"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint?>(ref reader, options);
					if (value is not null)
					{
						agg.ExecutionHint = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("field"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Field?>(ref reader, options);
					if (value is not null)
					{
						agg.Field = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("gnd"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic?>(ref reader, options);
					if (value is not null)
					{
						agg.Gnd = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("include"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude?>(ref reader, options);
					if (value is not null)
					{
						agg.Include = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("jlh"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.EmptyObject?>(ref reader, options);
					if (value is not null)
					{
						agg.Jlh = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("min_doc_count"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<long?>(ref reader, options);
					if (value is not null)
					{
						agg.MinDocCount = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("mutual_information"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic?>(ref reader, options);
					if (value is not null)
					{
						agg.MutualInformation = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("percentage"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic?>(ref reader, options);
					if (value is not null)
					{
						agg.Percentage = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("script_heuristic"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic?>(ref reader, options);
					if (value is not null)
					{
						agg.ScriptHeuristic = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("shard_min_doc_count"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<long?>(ref reader, options);
					if (value is not null)
					{
						agg.ShardMinDocCount = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("shard_size"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<int?>(ref reader, options);
					if (value is not null)
					{
						agg.ShardSize = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("size"))
				{
					reader.Read();
					var value = JsonSerializer.Deserialize<int?>(ref reader, options);
					if (value is not null)
					{
						agg.Size = value;
					}

					continue;
				}
			}
		}

		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType == JsonTokenType.PropertyName)
			{
				if (reader.ValueTextEquals("meta"))
				{
					var value = JsonSerializer.Deserialize<Dictionary<string, object>>(ref reader, options);
					if (value is not null)
					{
						agg.Meta = value;
					}

					continue;
				}

				if (reader.ValueTextEquals("aggs") || reader.ValueTextEquals("aggregations"))
				{
					var value = JsonSerializer.Deserialize<AggregationDictionary>(ref reader, options);
					if (value is not null)
					{
						agg.Aggregations = value;
					}

					continue;
				}
			}
		}

		return agg;
	}

	public override void Write(Utf8JsonWriter writer, SignificantTermsAggregation value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("significant_terms");
		writer.WriteStartObject();
		if (value.BackgroundFilter is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, value.BackgroundFilter, options);
		}

		if (value.ChiSquare is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, value.ChiSquare, options);
		}

		if (value.Exclude is not null)
		{
			writer.WritePropertyName("exclude");
			JsonSerializer.Serialize(writer, value.Exclude, options);
		}

		if (value.ExecutionHint is not null)
		{
			writer.WritePropertyName("execution_hint");
			JsonSerializer.Serialize(writer, value.ExecutionHint, options);
		}

		if (value.Field is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, value.Field, options);
		}

		if (value.Gnd is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, value.Gnd, options);
		}

		if (value.Include is not null)
		{
			writer.WritePropertyName("include");
			JsonSerializer.Serialize(writer, value.Include, options);
		}

		if (value.Jlh is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, value.Jlh, options);
		}

		if (value.MinDocCount.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(value.MinDocCount.Value);
		}

		if (value.MutualInformation is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, value.MutualInformation, options);
		}

		if (value.Percentage is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, value.Percentage, options);
		}

		if (value.ScriptHeuristic is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, value.ScriptHeuristic, options);
		}

		if (value.ShardMinDocCount.HasValue)
		{
			writer.WritePropertyName("shard_min_doc_count");
			writer.WriteNumberValue(value.ShardMinDocCount.Value);
		}

		if (value.ShardSize.HasValue)
		{
			writer.WritePropertyName("shard_size");
			writer.WriteNumberValue(value.ShardSize.Value);
		}

		if (value.Size.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(value.Size.Value);
		}

		writer.WriteEndObject();
		if (value.Meta is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, value.Meta, options);
		}

		if (value.Aggregations is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, value.Aggregations, options);
		}

		writer.WriteEndObject();
	}
}

[JsonConverter(typeof(SignificantTermsAggregationConverter))]
public sealed partial class SignificantTermsAggregation : SearchAggregation
{
	public SignificantTermsAggregation(string name) => Name = name;

	internal SignificantTermsAggregation()
	{
	}

	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDictionary? Aggregations { get; set; }

	/// <summary>
	/// <para>A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? BackgroundFilter { get; set; }

	/// <summary>
	/// <para>Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic? ChiSquare { get; set; }

	/// <summary>
	/// <para>Terms to exclude.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude? Exclude { get; set; }

	/// <summary>
	/// <para>Mechanism by which the aggregation should be executed: using field values directly or using global ordinals.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint? ExecutionHint { get; set; }

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Field? Field { get; set; }

	/// <summary>
	/// <para>Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic? Gnd { get; set; }

	/// <summary>
	/// <para>Terms to include.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude? Include { get; set; }

	/// <summary>
	/// <para>Use JLH score as the significance score.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.EmptyObject? Jlh { get; set; }
	public IDictionary<string, object>? Meta { get; set; }

	/// <summary>
	/// <para>Only return terms that are found in more than `min_doc_count` hits.</para>
	/// </summary>
	public long? MinDocCount { get; set; }

	/// <summary>
	/// <para>Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic? MutualInformation { get; set; }
	override public string? Name { get; internal set; }

	/// <summary>
	/// <para>A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic? Percentage { get; set; }

	/// <summary>
	/// <para>Customized score, implemented via a script.</para>
	/// </summary>
	public Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic? ScriptHeuristic { get; set; }

	/// <summary>
	/// <para>Regulates the certainty a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`.<br/>Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.</para>
	/// </summary>
	public long? ShardMinDocCount { get; set; }

	/// <summary>
	/// <para>Can be used to control the volumes of candidate terms produced by each shard.<br/>By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.</para>
	/// </summary>
	public int? ShardSize { get; set; }

	/// <summary>
	/// <para>The number of buckets returned out of the overall terms list.</para>
	/// </summary>
	public int? Size { get; set; }
}

public sealed partial class SignificantTermsAggregationDescriptor<TDocument> : SerializableDescriptor<SignificantTermsAggregationDescriptor<TDocument>>
{
	internal SignificantTermsAggregationDescriptor(Action<SignificantTermsAggregationDescriptor<TDocument>> configure) => configure.Invoke(this);

	public SignificantTermsAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDictionary? AggregationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor<TDocument> AggregationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor<TDocument>> AggregationsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? BackgroundFilterValue { get; set; }
	private QueryDsl.QueryDescriptor<TDocument> BackgroundFilterDescriptor { get; set; }
	private Action<QueryDsl.QueryDescriptor<TDocument>> BackgroundFilterDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic? ChiSquareValue { get; set; }
	private ChiSquareHeuristicDescriptor ChiSquareDescriptor { get; set; }
	private Action<ChiSquareHeuristicDescriptor> ChiSquareDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude? ExcludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint? ExecutionHintValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Field? FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic? GndValue { get; set; }
	private GoogleNormalizedDistanceHeuristicDescriptor GndDescriptor { get; set; }
	private Action<GoogleNormalizedDistanceHeuristicDescriptor> GndDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude? IncludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.EmptyObject? JlhValue { get; set; }
	private EmptyObjectDescriptor JlhDescriptor { get; set; }
	private Action<EmptyObjectDescriptor> JlhDescriptorAction { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }
	private long? MinDocCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic? MutualInformationValue { get; set; }
	private MutualInformationHeuristicDescriptor MutualInformationDescriptor { get; set; }
	private Action<MutualInformationHeuristicDescriptor> MutualInformationDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic? PercentageValue { get; set; }
	private PercentageScoreHeuristicDescriptor PercentageDescriptor { get; set; }
	private Action<PercentageScoreHeuristicDescriptor> PercentageDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic? ScriptHeuristicValue { get; set; }
	private ScriptedHeuristicDescriptor ScriptHeuristicDescriptor { get; set; }
	private Action<ScriptedHeuristicDescriptor> ScriptHeuristicDescriptorAction { get; set; }
	private long? ShardMinDocCountValue { get; set; }
	private int? ShardSizeValue { get; set; }
	private int? SizeValue { get; set; }

	public SignificantTermsAggregationDescriptor<TDocument> Aggregations(Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDictionary? aggregations)
	{
		AggregationsDescriptor = null;
		AggregationsDescriptorAction = null;
		AggregationsValue = aggregations;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Aggregations(Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor<TDocument> descriptor)
	{
		AggregationsValue = null;
		AggregationsDescriptorAction = null;
		AggregationsDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Aggregations(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor<TDocument>> configure)
	{
		AggregationsValue = null;
		AggregationsDescriptor = null;
		AggregationsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> BackgroundFilter(Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? backgroundFilter)
	{
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterValue = backgroundFilter;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> BackgroundFilter(QueryDsl.QueryDescriptor<TDocument> descriptor)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> BackgroundFilter(Action<QueryDsl.QueryDescriptor<TDocument>> configure)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> ChiSquare(Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic? chiSquare)
	{
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = null;
		ChiSquareValue = chiSquare;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> ChiSquare(ChiSquareHeuristicDescriptor descriptor)
	{
		ChiSquareValue = null;
		ChiSquareDescriptorAction = null;
		ChiSquareDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> ChiSquare(Action<ChiSquareHeuristicDescriptor> configure)
	{
		ChiSquareValue = null;
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Terms to exclude.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Exclude(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude? exclude)
	{
		ExcludeValue = exclude;
		return Self;
	}

	/// <summary>
	/// <para>Mechanism by which the aggregation should be executed: using field values directly or using global ordinals.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> ExecutionHint(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint? executionHint)
	{
		ExecutionHintValue = executionHint;
		return Self;
	}

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Serverless.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Gnd(Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic? gnd)
	{
		GndDescriptor = null;
		GndDescriptorAction = null;
		GndValue = gnd;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Gnd(GoogleNormalizedDistanceHeuristicDescriptor descriptor)
	{
		GndValue = null;
		GndDescriptorAction = null;
		GndDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Gnd(Action<GoogleNormalizedDistanceHeuristicDescriptor> configure)
	{
		GndValue = null;
		GndDescriptor = null;
		GndDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Terms to include.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Include(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude? include)
	{
		IncludeValue = include;
		return Self;
	}

	/// <summary>
	/// <para>Use JLH score as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Jlh(Elastic.Clients.Elasticsearch.Serverless.EmptyObject? jlh)
	{
		JlhDescriptor = null;
		JlhDescriptorAction = null;
		JlhValue = jlh;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Jlh(EmptyObjectDescriptor descriptor)
	{
		JlhValue = null;
		JlhDescriptorAction = null;
		JlhDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Jlh(Action<EmptyObjectDescriptor> configure)
	{
		JlhValue = null;
		JlhDescriptor = null;
		JlhDescriptorAction = configure;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>Only return terms that are found in more than `min_doc_count` hits.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> MinDocCount(long? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> MutualInformation(Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic? mutualInformation)
	{
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = null;
		MutualInformationValue = mutualInformation;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> MutualInformation(MutualInformationHeuristicDescriptor descriptor)
	{
		MutualInformationValue = null;
		MutualInformationDescriptorAction = null;
		MutualInformationDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> MutualInformation(Action<MutualInformationHeuristicDescriptor> configure)
	{
		MutualInformationValue = null;
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Percentage(Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic? percentage)
	{
		PercentageDescriptor = null;
		PercentageDescriptorAction = null;
		PercentageValue = percentage;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Percentage(PercentageScoreHeuristicDescriptor descriptor)
	{
		PercentageValue = null;
		PercentageDescriptorAction = null;
		PercentageDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> Percentage(Action<PercentageScoreHeuristicDescriptor> configure)
	{
		PercentageValue = null;
		PercentageDescriptor = null;
		PercentageDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Customized score, implemented via a script.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> ScriptHeuristic(Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic? scriptHeuristic)
	{
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicValue = scriptHeuristic;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> ScriptHeuristic(ScriptedHeuristicDescriptor descriptor)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor<TDocument> ScriptHeuristic(Action<ScriptedHeuristicDescriptor> configure)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Regulates the certainty a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`.<br/>Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> ShardMinDocCount(long? shardMinDocCount)
	{
		ShardMinDocCountValue = shardMinDocCount;
		return Self;
	}

	/// <summary>
	/// <para>Can be used to control the volumes of candidate terms produced by each shard.<br/>By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> ShardSize(int? shardSize)
	{
		ShardSizeValue = shardSize;
		return Self;
	}

	/// <summary>
	/// <para>The number of buckets returned out of the overall terms list.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor<TDocument> Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("significant_terms");
		writer.WriteStartObject();
		if (BackgroundFilterDescriptor is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterDescriptor, options);
		}
		else if (BackgroundFilterDescriptorAction is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, new QueryDsl.QueryDescriptor<TDocument>(BackgroundFilterDescriptorAction), options);
		}
		else if (BackgroundFilterValue is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterValue, options);
		}

		if (ChiSquareDescriptor is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareDescriptor, options);
		}
		else if (ChiSquareDescriptorAction is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, new ChiSquareHeuristicDescriptor(ChiSquareDescriptorAction), options);
		}
		else if (ChiSquareValue is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareValue, options);
		}

		if (ExcludeValue is not null)
		{
			writer.WritePropertyName("exclude");
			JsonSerializer.Serialize(writer, ExcludeValue, options);
		}

		if (ExecutionHintValue is not null)
		{
			writer.WritePropertyName("execution_hint");
			JsonSerializer.Serialize(writer, ExecutionHintValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (GndDescriptor is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndDescriptor, options);
		}
		else if (GndDescriptorAction is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, new GoogleNormalizedDistanceHeuristicDescriptor(GndDescriptorAction), options);
		}
		else if (GndValue is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndValue, options);
		}

		if (IncludeValue is not null)
		{
			writer.WritePropertyName("include");
			JsonSerializer.Serialize(writer, IncludeValue, options);
		}

		if (JlhDescriptor is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhDescriptor, options);
		}
		else if (JlhDescriptorAction is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, new EmptyObjectDescriptor(JlhDescriptorAction), options);
		}
		else if (JlhValue is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MutualInformationDescriptor is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationDescriptor, options);
		}
		else if (MutualInformationDescriptorAction is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, new MutualInformationHeuristicDescriptor(MutualInformationDescriptorAction), options);
		}
		else if (MutualInformationValue is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationValue, options);
		}

		if (PercentageDescriptor is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageDescriptor, options);
		}
		else if (PercentageDescriptorAction is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, new PercentageScoreHeuristicDescriptor(PercentageDescriptorAction), options);
		}
		else if (PercentageValue is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageValue, options);
		}

		if (ScriptHeuristicDescriptor is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicDescriptor, options);
		}
		else if (ScriptHeuristicDescriptorAction is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, new ScriptedHeuristicDescriptor(ScriptHeuristicDescriptorAction), options);
		}
		else if (ScriptHeuristicValue is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicValue, options);
		}

		if (ShardMinDocCountValue.HasValue)
		{
			writer.WritePropertyName("shard_min_doc_count");
			writer.WriteNumberValue(ShardMinDocCountValue.Value);
		}

		if (ShardSizeValue.HasValue)
		{
			writer.WritePropertyName("shard_size");
			writer.WriteNumberValue(ShardSizeValue.Value);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		writer.WriteEndObject();
		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (AggregationsDescriptor is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsDescriptor, options);
		}
		else if (AggregationsDescriptorAction is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, new AggregationDescriptor<TDocument>(AggregationsDescriptorAction), options);
		}
		else if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class SignificantTermsAggregationDescriptor : SerializableDescriptor<SignificantTermsAggregationDescriptor>
{
	internal SignificantTermsAggregationDescriptor(Action<SignificantTermsAggregationDescriptor> configure) => configure.Invoke(this);

	public SignificantTermsAggregationDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDictionary? AggregationsValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor AggregationsDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor> AggregationsDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? BackgroundFilterValue { get; set; }
	private QueryDsl.QueryDescriptor BackgroundFilterDescriptor { get; set; }
	private Action<QueryDsl.QueryDescriptor> BackgroundFilterDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic? ChiSquareValue { get; set; }
	private ChiSquareHeuristicDescriptor ChiSquareDescriptor { get; set; }
	private Action<ChiSquareHeuristicDescriptor> ChiSquareDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude? ExcludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint? ExecutionHintValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Field? FieldValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic? GndValue { get; set; }
	private GoogleNormalizedDistanceHeuristicDescriptor GndDescriptor { get; set; }
	private Action<GoogleNormalizedDistanceHeuristicDescriptor> GndDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude? IncludeValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.EmptyObject? JlhValue { get; set; }
	private EmptyObjectDescriptor JlhDescriptor { get; set; }
	private Action<EmptyObjectDescriptor> JlhDescriptorAction { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }
	private long? MinDocCountValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic? MutualInformationValue { get; set; }
	private MutualInformationHeuristicDescriptor MutualInformationDescriptor { get; set; }
	private Action<MutualInformationHeuristicDescriptor> MutualInformationDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic? PercentageValue { get; set; }
	private PercentageScoreHeuristicDescriptor PercentageDescriptor { get; set; }
	private Action<PercentageScoreHeuristicDescriptor> PercentageDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic? ScriptHeuristicValue { get; set; }
	private ScriptedHeuristicDescriptor ScriptHeuristicDescriptor { get; set; }
	private Action<ScriptedHeuristicDescriptor> ScriptHeuristicDescriptorAction { get; set; }
	private long? ShardMinDocCountValue { get; set; }
	private int? ShardSizeValue { get; set; }
	private int? SizeValue { get; set; }

	public SignificantTermsAggregationDescriptor Aggregations(Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDictionary? aggregations)
	{
		AggregationsDescriptor = null;
		AggregationsDescriptorAction = null;
		AggregationsValue = aggregations;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Aggregations(Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor descriptor)
	{
		AggregationsValue = null;
		AggregationsDescriptorAction = null;
		AggregationsDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Aggregations(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.AggregationDescriptor> configure)
	{
		AggregationsValue = null;
		AggregationsDescriptor = null;
		AggregationsDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>A background filter that can be used to focus in on significant terms within a narrower context, instead of the entire index.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor BackgroundFilter(Elastic.Clients.Elasticsearch.Serverless.QueryDsl.Query? backgroundFilter)
	{
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterValue = backgroundFilter;
		return Self;
	}

	public SignificantTermsAggregationDescriptor BackgroundFilter(QueryDsl.QueryDescriptor descriptor)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptorAction = null;
		BackgroundFilterDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor BackgroundFilter(Action<QueryDsl.QueryDescriptor> configure)
	{
		BackgroundFilterValue = null;
		BackgroundFilterDescriptor = null;
		BackgroundFilterDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Use Chi square, as described in "Information Retrieval", Manning et al., Chapter 13.5.2, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor ChiSquare(Elastic.Clients.Elasticsearch.Serverless.Aggregations.ChiSquareHeuristic? chiSquare)
	{
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = null;
		ChiSquareValue = chiSquare;
		return Self;
	}

	public SignificantTermsAggregationDescriptor ChiSquare(ChiSquareHeuristicDescriptor descriptor)
	{
		ChiSquareValue = null;
		ChiSquareDescriptorAction = null;
		ChiSquareDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor ChiSquare(Action<ChiSquareHeuristicDescriptor> configure)
	{
		ChiSquareValue = null;
		ChiSquareDescriptor = null;
		ChiSquareDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Terms to exclude.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Exclude(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsExclude? exclude)
	{
		ExcludeValue = exclude;
		return Self;
	}

	/// <summary>
	/// <para>Mechanism by which the aggregation should be executed: using field values directly or using global ordinals.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor ExecutionHint(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationExecutionHint? executionHint)
	{
		ExecutionHintValue = executionHint;
		return Self;
	}

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Field(Elastic.Clients.Elasticsearch.Serverless.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>The field from which to return significant terms.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	/// <summary>
	/// <para>Use Google normalized distance as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Gnd(Elastic.Clients.Elasticsearch.Serverless.Aggregations.GoogleNormalizedDistanceHeuristic? gnd)
	{
		GndDescriptor = null;
		GndDescriptorAction = null;
		GndValue = gnd;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Gnd(GoogleNormalizedDistanceHeuristicDescriptor descriptor)
	{
		GndValue = null;
		GndDescriptorAction = null;
		GndDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Gnd(Action<GoogleNormalizedDistanceHeuristicDescriptor> configure)
	{
		GndValue = null;
		GndDescriptor = null;
		GndDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Terms to include.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Include(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsInclude? include)
	{
		IncludeValue = include;
		return Self;
	}

	/// <summary>
	/// <para>Use JLH score as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Jlh(Elastic.Clients.Elasticsearch.Serverless.EmptyObject? jlh)
	{
		JlhDescriptor = null;
		JlhDescriptorAction = null;
		JlhValue = jlh;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Jlh(EmptyObjectDescriptor descriptor)
	{
		JlhValue = null;
		JlhDescriptorAction = null;
		JlhDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Jlh(Action<EmptyObjectDescriptor> configure)
	{
		JlhValue = null;
		JlhDescriptor = null;
		JlhDescriptorAction = configure;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>Only return terms that are found in more than `min_doc_count` hits.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor MinDocCount(long? minDocCount)
	{
		MinDocCountValue = minDocCount;
		return Self;
	}

	/// <summary>
	/// <para>Use mutual information as described in "Information Retrieval", Manning et al., Chapter 13.5.1, as the significance score.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor MutualInformation(Elastic.Clients.Elasticsearch.Serverless.Aggregations.MutualInformationHeuristic? mutualInformation)
	{
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = null;
		MutualInformationValue = mutualInformation;
		return Self;
	}

	public SignificantTermsAggregationDescriptor MutualInformation(MutualInformationHeuristicDescriptor descriptor)
	{
		MutualInformationValue = null;
		MutualInformationDescriptorAction = null;
		MutualInformationDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor MutualInformation(Action<MutualInformationHeuristicDescriptor> configure)
	{
		MutualInformationValue = null;
		MutualInformationDescriptor = null;
		MutualInformationDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>A simple calculation of the number of documents in the foreground sample with a term divided by the number of documents in the background with the term.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Percentage(Elastic.Clients.Elasticsearch.Serverless.Aggregations.PercentageScoreHeuristic? percentage)
	{
		PercentageDescriptor = null;
		PercentageDescriptorAction = null;
		PercentageValue = percentage;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Percentage(PercentageScoreHeuristicDescriptor descriptor)
	{
		PercentageValue = null;
		PercentageDescriptorAction = null;
		PercentageDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor Percentage(Action<PercentageScoreHeuristicDescriptor> configure)
	{
		PercentageValue = null;
		PercentageDescriptor = null;
		PercentageDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Customized score, implemented via a script.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor ScriptHeuristic(Elastic.Clients.Elasticsearch.Serverless.Aggregations.ScriptedHeuristic? scriptHeuristic)
	{
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicValue = scriptHeuristic;
		return Self;
	}

	public SignificantTermsAggregationDescriptor ScriptHeuristic(ScriptedHeuristicDescriptor descriptor)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptorAction = null;
		ScriptHeuristicDescriptor = descriptor;
		return Self;
	}

	public SignificantTermsAggregationDescriptor ScriptHeuristic(Action<ScriptedHeuristicDescriptor> configure)
	{
		ScriptHeuristicValue = null;
		ScriptHeuristicDescriptor = null;
		ScriptHeuristicDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Regulates the certainty a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`.<br/>Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor ShardMinDocCount(long? shardMinDocCount)
	{
		ShardMinDocCountValue = shardMinDocCount;
		return Self;
	}

	/// <summary>
	/// <para>Can be used to control the volumes of candidate terms produced by each shard.<br/>By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor ShardSize(int? shardSize)
	{
		ShardSizeValue = shardSize;
		return Self;
	}

	/// <summary>
	/// <para>The number of buckets returned out of the overall terms list.</para>
	/// </summary>
	public SignificantTermsAggregationDescriptor Size(int? size)
	{
		SizeValue = size;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName("significant_terms");
		writer.WriteStartObject();
		if (BackgroundFilterDescriptor is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterDescriptor, options);
		}
		else if (BackgroundFilterDescriptorAction is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, new QueryDsl.QueryDescriptor(BackgroundFilterDescriptorAction), options);
		}
		else if (BackgroundFilterValue is not null)
		{
			writer.WritePropertyName("background_filter");
			JsonSerializer.Serialize(writer, BackgroundFilterValue, options);
		}

		if (ChiSquareDescriptor is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareDescriptor, options);
		}
		else if (ChiSquareDescriptorAction is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, new ChiSquareHeuristicDescriptor(ChiSquareDescriptorAction), options);
		}
		else if (ChiSquareValue is not null)
		{
			writer.WritePropertyName("chi_square");
			JsonSerializer.Serialize(writer, ChiSquareValue, options);
		}

		if (ExcludeValue is not null)
		{
			writer.WritePropertyName("exclude");
			JsonSerializer.Serialize(writer, ExcludeValue, options);
		}

		if (ExecutionHintValue is not null)
		{
			writer.WritePropertyName("execution_hint");
			JsonSerializer.Serialize(writer, ExecutionHintValue, options);
		}

		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (GndDescriptor is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndDescriptor, options);
		}
		else if (GndDescriptorAction is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, new GoogleNormalizedDistanceHeuristicDescriptor(GndDescriptorAction), options);
		}
		else if (GndValue is not null)
		{
			writer.WritePropertyName("gnd");
			JsonSerializer.Serialize(writer, GndValue, options);
		}

		if (IncludeValue is not null)
		{
			writer.WritePropertyName("include");
			JsonSerializer.Serialize(writer, IncludeValue, options);
		}

		if (JlhDescriptor is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhDescriptor, options);
		}
		else if (JlhDescriptorAction is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, new EmptyObjectDescriptor(JlhDescriptorAction), options);
		}
		else if (JlhValue is not null)
		{
			writer.WritePropertyName("jlh");
			JsonSerializer.Serialize(writer, JlhValue, options);
		}

		if (MinDocCountValue.HasValue)
		{
			writer.WritePropertyName("min_doc_count");
			writer.WriteNumberValue(MinDocCountValue.Value);
		}

		if (MutualInformationDescriptor is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationDescriptor, options);
		}
		else if (MutualInformationDescriptorAction is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, new MutualInformationHeuristicDescriptor(MutualInformationDescriptorAction), options);
		}
		else if (MutualInformationValue is not null)
		{
			writer.WritePropertyName("mutual_information");
			JsonSerializer.Serialize(writer, MutualInformationValue, options);
		}

		if (PercentageDescriptor is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageDescriptor, options);
		}
		else if (PercentageDescriptorAction is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, new PercentageScoreHeuristicDescriptor(PercentageDescriptorAction), options);
		}
		else if (PercentageValue is not null)
		{
			writer.WritePropertyName("percentage");
			JsonSerializer.Serialize(writer, PercentageValue, options);
		}

		if (ScriptHeuristicDescriptor is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicDescriptor, options);
		}
		else if (ScriptHeuristicDescriptorAction is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, new ScriptedHeuristicDescriptor(ScriptHeuristicDescriptorAction), options);
		}
		else if (ScriptHeuristicValue is not null)
		{
			writer.WritePropertyName("script_heuristic");
			JsonSerializer.Serialize(writer, ScriptHeuristicValue, options);
		}

		if (ShardMinDocCountValue.HasValue)
		{
			writer.WritePropertyName("shard_min_doc_count");
			writer.WriteNumberValue(ShardMinDocCountValue.Value);
		}

		if (ShardSizeValue.HasValue)
		{
			writer.WritePropertyName("shard_size");
			writer.WriteNumberValue(ShardSizeValue.Value);
		}

		if (SizeValue.HasValue)
		{
			writer.WritePropertyName("size");
			writer.WriteNumberValue(SizeValue.Value);
		}

		writer.WriteEndObject();
		if (MetaValue is not null)
		{
			writer.WritePropertyName("meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (AggregationsDescriptor is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsDescriptor, options);
		}
		else if (AggregationsDescriptorAction is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, new AggregationDescriptor(AggregationsDescriptorAction), options);
		}
		else if (AggregationsValue is not null)
		{
			writer.WritePropertyName("aggregations");
			JsonSerializer.Serialize(writer, AggregationsValue, options);
		}

		writer.WriteEndObject();
	}
}