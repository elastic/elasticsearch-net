// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Aggregations;

public sealed partial class ExtendedBoundsFloat
{
	/// <summary>
	/// <para>Maximum value for the bound.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("max")]
	public float? Max { get; set; }

	/// <summary>
	/// <para>Minimum value for the bound.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("min")]
	public float? Min { get; set; }
}

public sealed partial class ExtendedBoundsFloatDescriptor : SerializableDescriptor<ExtendedBoundsFloatDescriptor>
{
	internal ExtendedBoundsFloatDescriptor(Action<ExtendedBoundsFloatDescriptor> configure) => configure.Invoke(this);

	public ExtendedBoundsFloatDescriptor() : base()
	{
	}

	private float? MaxValue { get; set; }
	private float? MinValue { get; set; }

	/// <summary>
	/// <para>Maximum value for the bound.</para>
	/// </summary>
	public ExtendedBoundsFloatDescriptor Max(float? max)
	{
		MaxValue = max;
		return Self;
	}

	/// <summary>
	/// <para>Minimum value for the bound.</para>
	/// </summary>
	public ExtendedBoundsFloatDescriptor Min(float? min)
	{
		MinValue = min;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MaxValue.HasValue)
		{
			writer.WritePropertyName("max");
			writer.WriteNumberValue(MaxValue.Value);
		}

		if (MinValue.HasValue)
		{
			writer.WritePropertyName("min");
			writer.WriteNumberValue(MinValue.Value);
		}

		writer.WriteEndObject();
	}
}