// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.IndexManagement;

public sealed partial class IndexingPressure
{
	[JsonInclude, JsonPropertyName("memory")]
	public Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexingPressureMemory Memory { get; set; }
}

public sealed partial class IndexingPressureDescriptor : SerializableDescriptor<IndexingPressureDescriptor>
{
	internal IndexingPressureDescriptor(Action<IndexingPressureDescriptor> configure) => configure.Invoke(this);

	public IndexingPressureDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexingPressureMemory MemoryValue { get; set; }
	private IndexingPressureMemoryDescriptor MemoryDescriptor { get; set; }
	private Action<IndexingPressureMemoryDescriptor> MemoryDescriptorAction { get; set; }

	public IndexingPressureDescriptor Memory(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexingPressureMemory memory)
	{
		MemoryDescriptor = null;
		MemoryDescriptorAction = null;
		MemoryValue = memory;
		return Self;
	}

	public IndexingPressureDescriptor Memory(IndexingPressureMemoryDescriptor descriptor)
	{
		MemoryValue = null;
		MemoryDescriptorAction = null;
		MemoryDescriptor = descriptor;
		return Self;
	}

	public IndexingPressureDescriptor Memory(Action<IndexingPressureMemoryDescriptor> configure)
	{
		MemoryValue = null;
		MemoryDescriptor = null;
		MemoryDescriptorAction = configure;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (MemoryDescriptor is not null)
		{
			writer.WritePropertyName("memory");
			JsonSerializer.Serialize(writer, MemoryDescriptor, options);
		}
		else if (MemoryDescriptorAction is not null)
		{
			writer.WritePropertyName("memory");
			JsonSerializer.Serialize(writer, new IndexingPressureMemoryDescriptor(MemoryDescriptorAction), options);
		}
		else
		{
			writer.WritePropertyName("memory");
			JsonSerializer.Serialize(writer, MemoryValue, options);
		}

		writer.WriteEndObject();
	}
}