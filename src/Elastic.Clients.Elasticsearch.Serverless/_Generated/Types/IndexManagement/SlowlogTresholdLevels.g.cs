// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.IndexManagement;

public sealed partial class SlowlogTresholdLevels
{
	[JsonInclude, JsonPropertyName("debug")]
	public Elastic.Clients.Elasticsearch.Serverless.Duration? Debug { get; set; }
	[JsonInclude, JsonPropertyName("info")]
	public Elastic.Clients.Elasticsearch.Serverless.Duration? Info { get; set; }
	[JsonInclude, JsonPropertyName("trace")]
	public Elastic.Clients.Elasticsearch.Serverless.Duration? Trace { get; set; }
	[JsonInclude, JsonPropertyName("warn")]
	public Elastic.Clients.Elasticsearch.Serverless.Duration? Warn { get; set; }
}

public sealed partial class SlowlogTresholdLevelsDescriptor : SerializableDescriptor<SlowlogTresholdLevelsDescriptor>
{
	internal SlowlogTresholdLevelsDescriptor(Action<SlowlogTresholdLevelsDescriptor> configure) => configure.Invoke(this);

	public SlowlogTresholdLevelsDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Serverless.Duration? DebugValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Duration? InfoValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Duration? TraceValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Duration? WarnValue { get; set; }

	public SlowlogTresholdLevelsDescriptor Debug(Elastic.Clients.Elasticsearch.Serverless.Duration? debug)
	{
		DebugValue = debug;
		return Self;
	}

	public SlowlogTresholdLevelsDescriptor Info(Elastic.Clients.Elasticsearch.Serverless.Duration? info)
	{
		InfoValue = info;
		return Self;
	}

	public SlowlogTresholdLevelsDescriptor Trace(Elastic.Clients.Elasticsearch.Serverless.Duration? trace)
	{
		TraceValue = trace;
		return Self;
	}

	public SlowlogTresholdLevelsDescriptor Warn(Elastic.Clients.Elasticsearch.Serverless.Duration? warn)
	{
		WarnValue = warn;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (DebugValue is not null)
		{
			writer.WritePropertyName("debug");
			JsonSerializer.Serialize(writer, DebugValue, options);
		}

		if (InfoValue is not null)
		{
			writer.WritePropertyName("info");
			JsonSerializer.Serialize(writer, InfoValue, options);
		}

		if (TraceValue is not null)
		{
			writer.WritePropertyName("trace");
			JsonSerializer.Serialize(writer, TraceValue, options);
		}

		if (WarnValue is not null)
		{
			writer.WritePropertyName("warn");
			JsonSerializer.Serialize(writer, WarnValue, options);
		}

		writer.WriteEndObject();
	}
}