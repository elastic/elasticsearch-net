// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.IndexManagement;

[JsonConverter(typeof(ActionConverter))]
public sealed partial class Action
{
	internal Action(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantName = variantName;
		Variant = variant;
	}

	internal object Variant { get; }
	internal string VariantName { get; }

	public static Action Add(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.AddAction addAction) => new Action("add", addAction);
	public static Action Remove(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveAction removeAction) => new Action("remove", removeAction);
	public static Action RemoveIndex(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveIndexAction removeIndexAction) => new Action("remove_index", removeIndexAction);
}

internal sealed partial class ActionConverter : JsonConverter<Action>
{
	public override Action Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
		{
			throw new JsonException("Expected start token.");
		}

		reader.Read();
		if (reader.TokenType != JsonTokenType.PropertyName)
		{
			throw new JsonException("Expected a property name token representing the variant held within this container.");
		}

		var propertyName = reader.GetString();
		reader.Read();
		if (propertyName == "add")
		{
			var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.AddAction?>(ref reader, options);
			reader.Read();
			return new Action(propertyName, variant);
		}

		if (propertyName == "remove")
		{
			var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveAction?>(ref reader, options);
			reader.Read();
			return new Action(propertyName, variant);
		}

		if (propertyName == "remove_index")
		{
			var variant = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveIndexAction?>(ref reader, options);
			reader.Read();
			return new Action(propertyName, variant);
		}

		throw new JsonException();
	}

	public override void Write(Utf8JsonWriter writer, Action value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		if (value.VariantName is not null & value.Variant is not null)
		{
			writer.WritePropertyName(value.VariantName);
			switch (value.VariantName)
			{
				case "add":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.AddAction>(writer, (Elastic.Clients.Elasticsearch.Serverless.IndexManagement.AddAction)value.Variant, options);
					break;
				case "remove":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveAction>(writer, (Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveAction)value.Variant, options);
					break;
				case "remove_index":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveIndexAction>(writer, (Elastic.Clients.Elasticsearch.Serverless.IndexManagement.RemoveIndexAction)value.Variant, options);
					break;
			}
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ActionDescriptor<TDocument> : SerializableDescriptor<ActionDescriptor<TDocument>>
{
	internal ActionDescriptor(Action<ActionDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ActionDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ActionDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ActionDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ActionDescriptor<TDocument> Add(AddAction addAction) => Set(addAction, "add");
	public ActionDescriptor<TDocument> Add(Action<AddActionDescriptor<TDocument>> configure) => Set(configure, "add");
	public ActionDescriptor<TDocument> Remove(RemoveAction removeAction) => Set(removeAction, "remove");
	public ActionDescriptor<TDocument> Remove(Action<RemoveActionDescriptor> configure) => Set(configure, "remove");
	public ActionDescriptor<TDocument> RemoveIndex(RemoveIndexAction removeIndexAction) => Set(removeIndexAction, "remove_index");
	public ActionDescriptor<TDocument> RemoveIndex(Action<RemoveIndexActionDescriptor> configure) => Set(configure, "remove_index");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		if (!ContainsVariant)
		{
			writer.WriteNullValue();
			return;
		}

		writer.WriteStartObject();
		writer.WritePropertyName(ContainedVariantName);
		if (Variant is not null)
		{
			JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
			writer.WriteEndObject();
			return;
		}

		JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		writer.WriteEndObject();
	}
}

public sealed partial class ActionDescriptor : SerializableDescriptor<ActionDescriptor>
{
	internal ActionDescriptor(Action<ActionDescriptor> configure) => configure.Invoke(this);

	public ActionDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private ActionDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private ActionDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public ActionDescriptor Add(AddAction addAction) => Set(addAction, "add");
	public ActionDescriptor Add(Action<AddActionDescriptor> configure) => Set(configure, "add");
	public ActionDescriptor Add<TDocument>(Action<AddActionDescriptor<TDocument>> configure) => Set(configure, "add");
	public ActionDescriptor Remove(RemoveAction removeAction) => Set(removeAction, "remove");
	public ActionDescriptor Remove(Action<RemoveActionDescriptor> configure) => Set(configure, "remove");
	public ActionDescriptor RemoveIndex(RemoveIndexAction removeIndexAction) => Set(removeIndexAction, "remove_index");
	public ActionDescriptor RemoveIndex(Action<RemoveIndexActionDescriptor> configure) => Set(configure, "remove_index");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		if (!ContainsVariant)
		{
			writer.WriteNullValue();
			return;
		}

		writer.WriteStartObject();
		writer.WritePropertyName(ContainedVariantName);
		if (Variant is not null)
		{
			JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
			writer.WriteEndObject();
			return;
		}

		JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		writer.WriteEndObject();
	}
}