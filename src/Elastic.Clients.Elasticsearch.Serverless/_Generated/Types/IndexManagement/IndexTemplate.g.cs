// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.IndexManagement;

public sealed partial class IndexTemplate
{
	[JsonInclude, JsonPropertyName("allow_auto_create")]
	public bool? AllowAutoCreate { get; set; }

	/// <summary>
	/// <para>An ordered list of component template names.<br/>Component templates are merged in the order specified, meaning that the last component template specified has the highest precedence.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("composed_of")]
	public ICollection<Elastic.Clients.Elasticsearch.Serverless.Name> ComposedOf { get; set; }

	/// <summary>
	/// <para>If this object is included, the template is used to create data streams and their backing indices.<br/>Supports an empty object.<br/>Data streams require a matching index template with a `data_stream` object.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("data_stream")]
	public Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfiguration? DataStream { get; set; }

	/// <summary>
	/// <para>Name of the index template.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("index_patterns")]
	public Elastic.Clients.Elasticsearch.Serverless.Names IndexPatterns { get; set; }

	/// <summary>
	/// <para>Optional user metadata about the index template. May have any contents.<br/>This map is not automatically generated by Elasticsearch.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("_meta")]
	public IDictionary<string, object>? Meta { get; set; }

	/// <summary>
	/// <para>Priority to determine index template precedence when a new data stream or index is created.<br/>The index template with the highest priority is chosen.<br/>If no priority is specified the template is treated as though it is of priority 0 (lowest priority).<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("priority")]
	public long? Priority { get; set; }

	/// <summary>
	/// <para>Template to be applied.<br/>It may optionally include an `aliases`, `mappings`, or `settings` configuration.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("template")]
	public Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummary? Template { get; set; }

	/// <summary>
	/// <para>Version number used to manage index templates externally.<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	[JsonInclude, JsonPropertyName("version")]
	public long? Version { get; set; }
}

public sealed partial class IndexTemplateDescriptor<TDocument> : SerializableDescriptor<IndexTemplateDescriptor<TDocument>>
{
	internal IndexTemplateDescriptor(Action<IndexTemplateDescriptor<TDocument>> configure) => configure.Invoke(this);

	public IndexTemplateDescriptor() : base()
	{
	}

	private bool? AllowAutoCreateValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Serverless.Name> ComposedOfValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfiguration? DataStreamValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor DataStreamDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor> DataStreamDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Names IndexPatternsValue { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }
	private long? PriorityValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummary? TemplateValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor<TDocument> TemplateDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor<TDocument>> TemplateDescriptorAction { get; set; }
	private long? VersionValue { get; set; }

	public IndexTemplateDescriptor<TDocument> AllowAutoCreate(bool? allowAutoCreate = true)
	{
		AllowAutoCreateValue = allowAutoCreate;
		return Self;
	}

	/// <summary>
	/// <para>An ordered list of component template names.<br/>Component templates are merged in the order specified, meaning that the last component template specified has the highest precedence.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> ComposedOf(ICollection<Elastic.Clients.Elasticsearch.Serverless.Name> composedOf)
	{
		ComposedOfValue = composedOf;
		return Self;
	}

	/// <summary>
	/// <para>If this object is included, the template is used to create data streams and their backing indices.<br/>Supports an empty object.<br/>Data streams require a matching index template with a `data_stream` object.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> DataStream(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfiguration? dataStream)
	{
		DataStreamDescriptor = null;
		DataStreamDescriptorAction = null;
		DataStreamValue = dataStream;
		return Self;
	}

	public IndexTemplateDescriptor<TDocument> DataStream(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor descriptor)
	{
		DataStreamValue = null;
		DataStreamDescriptorAction = null;
		DataStreamDescriptor = descriptor;
		return Self;
	}

	public IndexTemplateDescriptor<TDocument> DataStream(Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor> configure)
	{
		DataStreamValue = null;
		DataStreamDescriptor = null;
		DataStreamDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Name of the index template.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> IndexPatterns(Elastic.Clients.Elasticsearch.Serverless.Names indexPatterns)
	{
		IndexPatternsValue = indexPatterns;
		return Self;
	}

	/// <summary>
	/// <para>Optional user metadata about the index template. May have any contents.<br/>This map is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>Priority to determine index template precedence when a new data stream or index is created.<br/>The index template with the highest priority is chosen.<br/>If no priority is specified the template is treated as though it is of priority 0 (lowest priority).<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> Priority(long? priority)
	{
		PriorityValue = priority;
		return Self;
	}

	/// <summary>
	/// <para>Template to be applied.<br/>It may optionally include an `aliases`, `mappings`, or `settings` configuration.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> Template(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummary? template)
	{
		TemplateDescriptor = null;
		TemplateDescriptorAction = null;
		TemplateValue = template;
		return Self;
	}

	public IndexTemplateDescriptor<TDocument> Template(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor<TDocument> descriptor)
	{
		TemplateValue = null;
		TemplateDescriptorAction = null;
		TemplateDescriptor = descriptor;
		return Self;
	}

	public IndexTemplateDescriptor<TDocument> Template(Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor<TDocument>> configure)
	{
		TemplateValue = null;
		TemplateDescriptor = null;
		TemplateDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Version number used to manage index templates externally.<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor<TDocument> Version(long? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AllowAutoCreateValue.HasValue)
		{
			writer.WritePropertyName("allow_auto_create");
			writer.WriteBooleanValue(AllowAutoCreateValue.Value);
		}

		writer.WritePropertyName("composed_of");
		JsonSerializer.Serialize(writer, ComposedOfValue, options);
		if (DataStreamDescriptor is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, DataStreamDescriptor, options);
		}
		else if (DataStreamDescriptorAction is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor(DataStreamDescriptorAction), options);
		}
		else if (DataStreamValue is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, DataStreamValue, options);
		}

		writer.WritePropertyName("index_patterns");
		JsonSerializer.Serialize(writer, IndexPatternsValue, options);
		if (MetaValue is not null)
		{
			writer.WritePropertyName("_meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (PriorityValue.HasValue)
		{
			writer.WritePropertyName("priority");
			writer.WriteNumberValue(PriorityValue.Value);
		}

		if (TemplateDescriptor is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, TemplateDescriptor, options);
		}
		else if (TemplateDescriptorAction is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor<TDocument>(TemplateDescriptorAction), options);
		}
		else if (TemplateValue is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, TemplateValue, options);
		}

		if (VersionValue.HasValue)
		{
			writer.WritePropertyName("version");
			writer.WriteNumberValue(VersionValue.Value);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class IndexTemplateDescriptor : SerializableDescriptor<IndexTemplateDescriptor>
{
	internal IndexTemplateDescriptor(Action<IndexTemplateDescriptor> configure) => configure.Invoke(this);

	public IndexTemplateDescriptor() : base()
	{
	}

	private bool? AllowAutoCreateValue { get; set; }
	private ICollection<Elastic.Clients.Elasticsearch.Serverless.Name> ComposedOfValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfiguration? DataStreamValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor DataStreamDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor> DataStreamDescriptorAction { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.Names IndexPatternsValue { get; set; }
	private IDictionary<string, object>? MetaValue { get; set; }
	private long? PriorityValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummary? TemplateValue { get; set; }
	private Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor TemplateDescriptor { get; set; }
	private Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor> TemplateDescriptorAction { get; set; }
	private long? VersionValue { get; set; }

	public IndexTemplateDescriptor AllowAutoCreate(bool? allowAutoCreate = true)
	{
		AllowAutoCreateValue = allowAutoCreate;
		return Self;
	}

	/// <summary>
	/// <para>An ordered list of component template names.<br/>Component templates are merged in the order specified, meaning that the last component template specified has the highest precedence.</para>
	/// </summary>
	public IndexTemplateDescriptor ComposedOf(ICollection<Elastic.Clients.Elasticsearch.Serverless.Name> composedOf)
	{
		ComposedOfValue = composedOf;
		return Self;
	}

	/// <summary>
	/// <para>If this object is included, the template is used to create data streams and their backing indices.<br/>Supports an empty object.<br/>Data streams require a matching index template with a `data_stream` object.</para>
	/// </summary>
	public IndexTemplateDescriptor DataStream(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfiguration? dataStream)
	{
		DataStreamDescriptor = null;
		DataStreamDescriptorAction = null;
		DataStreamValue = dataStream;
		return Self;
	}

	public IndexTemplateDescriptor DataStream(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor descriptor)
	{
		DataStreamValue = null;
		DataStreamDescriptorAction = null;
		DataStreamDescriptor = descriptor;
		return Self;
	}

	public IndexTemplateDescriptor DataStream(Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor> configure)
	{
		DataStreamValue = null;
		DataStreamDescriptor = null;
		DataStreamDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Name of the index template.</para>
	/// </summary>
	public IndexTemplateDescriptor IndexPatterns(Elastic.Clients.Elasticsearch.Serverless.Names indexPatterns)
	{
		IndexPatternsValue = indexPatterns;
		return Self;
	}

	/// <summary>
	/// <para>Optional user metadata about the index template. May have any contents.<br/>This map is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor Meta(Func<FluentDictionary<string, object>, FluentDictionary<string, object>> selector)
	{
		MetaValue = selector?.Invoke(new FluentDictionary<string, object>());
		return Self;
	}

	/// <summary>
	/// <para>Priority to determine index template precedence when a new data stream or index is created.<br/>The index template with the highest priority is chosen.<br/>If no priority is specified the template is treated as though it is of priority 0 (lowest priority).<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor Priority(long? priority)
	{
		PriorityValue = priority;
		return Self;
	}

	/// <summary>
	/// <para>Template to be applied.<br/>It may optionally include an `aliases`, `mappings`, or `settings` configuration.</para>
	/// </summary>
	public IndexTemplateDescriptor Template(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummary? template)
	{
		TemplateDescriptor = null;
		TemplateDescriptorAction = null;
		TemplateValue = template;
		return Self;
	}

	public IndexTemplateDescriptor Template(Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor descriptor)
	{
		TemplateValue = null;
		TemplateDescriptorAction = null;
		TemplateDescriptor = descriptor;
		return Self;
	}

	public IndexTemplateDescriptor Template(Action<Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor> configure)
	{
		TemplateValue = null;
		TemplateDescriptor = null;
		TemplateDescriptorAction = configure;
		return Self;
	}

	/// <summary>
	/// <para>Version number used to manage index templates externally.<br/>This number is not automatically generated by Elasticsearch.</para>
	/// </summary>
	public IndexTemplateDescriptor Version(long? version)
	{
		VersionValue = version;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (AllowAutoCreateValue.HasValue)
		{
			writer.WritePropertyName("allow_auto_create");
			writer.WriteBooleanValue(AllowAutoCreateValue.Value);
		}

		writer.WritePropertyName("composed_of");
		JsonSerializer.Serialize(writer, ComposedOfValue, options);
		if (DataStreamDescriptor is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, DataStreamDescriptor, options);
		}
		else if (DataStreamDescriptorAction is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateDataStreamConfigurationDescriptor(DataStreamDescriptorAction), options);
		}
		else if (DataStreamValue is not null)
		{
			writer.WritePropertyName("data_stream");
			JsonSerializer.Serialize(writer, DataStreamValue, options);
		}

		writer.WritePropertyName("index_patterns");
		JsonSerializer.Serialize(writer, IndexPatternsValue, options);
		if (MetaValue is not null)
		{
			writer.WritePropertyName("_meta");
			JsonSerializer.Serialize(writer, MetaValue, options);
		}

		if (PriorityValue.HasValue)
		{
			writer.WritePropertyName("priority");
			writer.WriteNumberValue(PriorityValue.Value);
		}

		if (TemplateDescriptor is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, TemplateDescriptor, options);
		}
		else if (TemplateDescriptorAction is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, new Elastic.Clients.Elasticsearch.Serverless.IndexManagement.IndexTemplateSummaryDescriptor(TemplateDescriptorAction), options);
		}
		else if (TemplateValue is not null)
		{
			writer.WritePropertyName("template");
			JsonSerializer.Serialize(writer, TemplateValue, options);
		}

		if (VersionValue.HasValue)
		{
			writer.WritePropertyName("version");
			writer.WriteNumberValue(VersionValue.Value);
		}

		writer.WriteEndObject();
	}
}