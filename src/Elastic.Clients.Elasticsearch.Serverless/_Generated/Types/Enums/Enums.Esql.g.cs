// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Core;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using Elastic.Transport;
using System;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.Esql;

[JsonConverter(typeof(EsqlFormatConverter))]
public enum EsqlFormat
{
	[EnumMember(Value = "yaml")]
	Yaml,
	[EnumMember(Value = "txt")]
	Txt,
	[EnumMember(Value = "tsv")]
	Tsv,
	[EnumMember(Value = "smile")]
	Smile,
	[EnumMember(Value = "json")]
	Json,
	[EnumMember(Value = "csv")]
	Csv,
	[EnumMember(Value = "cbor")]
	Cbor,
	[EnumMember(Value = "arrow")]
	Arrow
}

internal sealed class EsqlFormatConverter : JsonConverter<EsqlFormat>
{
	public override EsqlFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		var enumString = reader.GetString();
		switch (enumString)
		{
			case "yaml":
				return EsqlFormat.Yaml;
			case "txt":
				return EsqlFormat.Txt;
			case "tsv":
				return EsqlFormat.Tsv;
			case "smile":
				return EsqlFormat.Smile;
			case "json":
				return EsqlFormat.Json;
			case "csv":
				return EsqlFormat.Csv;
			case "cbor":
				return EsqlFormat.Cbor;
			case "arrow":
				return EsqlFormat.Arrow;
		}

		ThrowHelper.ThrowJsonException();
		return default;
	}

	public override void Write(Utf8JsonWriter writer, EsqlFormat value, JsonSerializerOptions options)
	{
		switch (value)
		{
			case EsqlFormat.Yaml:
				writer.WriteStringValue("yaml");
				return;
			case EsqlFormat.Txt:
				writer.WriteStringValue("txt");
				return;
			case EsqlFormat.Tsv:
				writer.WriteStringValue("tsv");
				return;
			case EsqlFormat.Smile:
				writer.WriteStringValue("smile");
				return;
			case EsqlFormat.Json:
				writer.WriteStringValue("json");
				return;
			case EsqlFormat.Csv:
				writer.WriteStringValue("csv");
				return;
			case EsqlFormat.Cbor:
				writer.WriteStringValue("cbor");
				return;
			case EsqlFormat.Arrow:
				writer.WriteStringValue("arrow");
				return;
		}

		writer.WriteNullValue();
	}
}