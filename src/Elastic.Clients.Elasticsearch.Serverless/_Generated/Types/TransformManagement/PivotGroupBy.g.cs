// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Serverless.Fluent;
using Elastic.Clients.Elasticsearch.Serverless.Serialization;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.Serverless.TransformManagement;

[JsonConverter(typeof(PivotGroupByConverter))]
public sealed partial class PivotGroupBy
{
	internal PivotGroupBy(string variantName, object variant)
	{
		if (variantName is null)
			throw new ArgumentNullException(nameof(variantName));
		if (variant is null)
			throw new ArgumentNullException(nameof(variant));
		if (string.IsNullOrWhiteSpace(variantName))
			throw new ArgumentException("Variant name must not be empty or whitespace.");
		VariantName = variantName;
		Variant = variant;
	}

	internal object Variant { get; }
	internal string VariantName { get; }

	public static PivotGroupBy DateHistogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation dateHistogramAggregation) => new PivotGroupBy("date_histogram", dateHistogramAggregation);
	public static PivotGroupBy GeotileGrid(Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation geotileGridAggregation) => new PivotGroupBy("geotile_grid", geotileGridAggregation);
	public static PivotGroupBy Histogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation histogramAggregation) => new PivotGroupBy("histogram", histogramAggregation);
	public static PivotGroupBy Terms(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation termsAggregation) => new PivotGroupBy("terms", termsAggregation);

	public bool TryGet<T>([NotNullWhen(true)] out T? result) where T : class
	{
		result = default;
		if (Variant is T variant)
		{
			result = variant;
			return true;
		}

		return false;
	}
}

internal sealed partial class PivotGroupByConverter : JsonConverter<PivotGroupBy>
{
	public override PivotGroupBy Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
	{
		if (reader.TokenType != JsonTokenType.StartObject)
		{
			throw new JsonException("Expected start token.");
		}

		object? variantValue = default;
		string? variantNameValue = default;
		while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)
		{
			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException("Expected a property name token.");
			}

			if (reader.TokenType != JsonTokenType.PropertyName)
			{
				throw new JsonException("Expected a property name token representing the name of an Elasticsearch field.");
			}

			var propertyName = reader.GetString();
			reader.Read();
			if (propertyName == "date_histogram")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "geotile_grid")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "histogram")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			if (propertyName == "terms")
			{
				variantValue = JsonSerializer.Deserialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation?>(ref reader, options);
				variantNameValue = propertyName;
				continue;
			}

			throw new JsonException($"Unknown property name '{propertyName}' received while deserializing the 'PivotGroupBy' from the response.");
		}

		reader.Read();
		var result = new PivotGroupBy(variantNameValue, variantValue);
		return result;
	}

	public override void Write(Utf8JsonWriter writer, PivotGroupBy value, JsonSerializerOptions options)
	{
		writer.WriteStartObject();
		if (value.VariantName is not null && value.Variant is not null)
		{
			writer.WritePropertyName(value.VariantName);
			switch (value.VariantName)
			{
				case "date_histogram":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation>(writer, (Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation)value.Variant, options);
					break;
				case "geotile_grid":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation>(writer, (Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation)value.Variant, options);
					break;
				case "histogram":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation>(writer, (Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation)value.Variant, options);
					break;
				case "terms":
					JsonSerializer.Serialize<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation>(writer, (Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation)value.Variant, options);
					break;
			}
		}

		writer.WriteEndObject();
	}
}

public sealed partial class PivotGroupByDescriptor<TDocument> : SerializableDescriptor<PivotGroupByDescriptor<TDocument>>
{
	internal PivotGroupByDescriptor(Action<PivotGroupByDescriptor<TDocument>> configure) => configure.Invoke(this);

	public PivotGroupByDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private PivotGroupByDescriptor<TDocument> Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private PivotGroupByDescriptor<TDocument> Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public PivotGroupByDescriptor<TDocument> DateHistogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation dateHistogramAggregation) => Set(dateHistogramAggregation, "date_histogram");
	public PivotGroupByDescriptor<TDocument> DateHistogram(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "date_histogram");
	public PivotGroupByDescriptor<TDocument> GeotileGrid(Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation geotileGridAggregation) => Set(geotileGridAggregation, "geotile_grid");
	public PivotGroupByDescriptor<TDocument> GeotileGrid(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregationDescriptor<TDocument>> configure) => Set(configure, "geotile_grid");
	public PivotGroupByDescriptor<TDocument> Histogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation histogramAggregation) => Set(histogramAggregation, "histogram");
	public PivotGroupByDescriptor<TDocument> Histogram(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregationDescriptor<TDocument>> configure) => Set(configure, "histogram");
	public PivotGroupByDescriptor<TDocument> Terms(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation termsAggregation) => Set(termsAggregation, "terms");
	public PivotGroupByDescriptor<TDocument> Terms(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationDescriptor<TDocument>> configure) => Set(configure, "terms");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class PivotGroupByDescriptor : SerializableDescriptor<PivotGroupByDescriptor>
{
	internal PivotGroupByDescriptor(Action<PivotGroupByDescriptor> configure) => configure.Invoke(this);

	public PivotGroupByDescriptor() : base()
	{
	}

	private bool ContainsVariant { get; set; }
	private string ContainedVariantName { get; set; }
	private object Variant { get; set; }
	private Descriptor Descriptor { get; set; }

	private PivotGroupByDescriptor Set<T>(Action<T> descriptorAction, string variantName) where T : Descriptor
	{
		ContainedVariantName = variantName;
		ContainsVariant = true;
		var descriptor = (T)Activator.CreateInstance(typeof(T), true);
		descriptorAction?.Invoke(descriptor);
		Descriptor = descriptor;
		return Self;
	}

	private PivotGroupByDescriptor Set(object variant, string variantName)
	{
		Variant = variant;
		ContainedVariantName = variantName;
		ContainsVariant = true;
		return Self;
	}

	public PivotGroupByDescriptor DateHistogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregation dateHistogramAggregation) => Set(dateHistogramAggregation, "date_histogram");
	public PivotGroupByDescriptor DateHistogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.DateHistogramAggregationDescriptor> configure) => Set(configure, "date_histogram");
	public PivotGroupByDescriptor GeotileGrid(Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregation geotileGridAggregation) => Set(geotileGridAggregation, "geotile_grid");
	public PivotGroupByDescriptor GeotileGrid<TDocument>(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.GeotileGridAggregationDescriptor> configure) => Set(configure, "geotile_grid");
	public PivotGroupByDescriptor Histogram(Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregation histogramAggregation) => Set(histogramAggregation, "histogram");
	public PivotGroupByDescriptor Histogram<TDocument>(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.HistogramAggregationDescriptor> configure) => Set(configure, "histogram");
	public PivotGroupByDescriptor Terms(Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregation termsAggregation) => Set(termsAggregation, "terms");
	public PivotGroupByDescriptor Terms<TDocument>(Action<Elastic.Clients.Elasticsearch.Serverless.Aggregations.TermsAggregationDescriptor> configure) => Set(configure, "terms");

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (!string.IsNullOrEmpty(ContainedVariantName))
		{
			writer.WritePropertyName(ContainedVariantName);
			if (Variant is not null)
			{
				JsonSerializer.Serialize(writer, Variant, Variant.GetType(), options);
				writer.WriteEndObject();
				return;
			}

			JsonSerializer.Serialize(writer, Descriptor, Descriptor.GetType(), options);
		}

		writer.WriteEndObject();
	}
}