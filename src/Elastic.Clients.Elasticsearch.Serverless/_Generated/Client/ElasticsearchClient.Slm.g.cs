// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.Serverless.SnapshotLifecycleManagement;

public partial class SnapshotLifecycleManagementNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>
	/// Initializes a new instance of the <see cref="SnapshotLifecycleManagementNamespacedClient"/> class for mocking.
	/// </para>
	/// </summary>
	protected SnapshotLifecycleManagementNamespacedClient() : base()
	{
	}

	internal SnapshotLifecycleManagementNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>
	/// Delete a policy.
	/// Delete a snapshot lifecycle policy definition.
	/// This operation prevents any future snapshots from being taken but does not cancel in-progress snapshots or remove previously-taken snapshots.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(DeleteLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequest, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a policy.
	/// Delete a snapshot lifecycle policy definition.
	/// This operation prevents any future snapshots from being taken but does not cancel in-progress snapshots or remove previously-taken snapshots.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(DeleteLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a policy.
	/// Delete a snapshot lifecycle policy definition.
	/// This operation prevents any future snapshots from being taken but does not cancel in-progress snapshots or remove previously-taken snapshots.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(policyId);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Delete a policy.
	/// Delete a snapshot lifecycle policy definition.
	/// This operation prevents any future snapshots from being taken but does not cancel in-progress snapshots or remove previously-taken snapshots.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<DeleteLifecycleResponse> DeleteLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, Action<DeleteLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new DeleteLifecycleRequestDescriptor(policyId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<DeleteLifecycleRequestDescriptor, DeleteLifecycleResponse, DeleteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a policy.
	/// Immediately create a snapshot according to the snapshot lifecycle policy without waiting for the scheduled time.
	/// The snapshot policy is normally applied according to its schedule, but you might want to manually run a policy before performing an upgrade or other maintenance.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteLifecycleResponse> ExecuteLifecycleAsync(ExecuteLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ExecuteLifecycleRequest, ExecuteLifecycleResponse, ExecuteLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a policy.
	/// Immediately create a snapshot according to the snapshot lifecycle policy without waiting for the scheduled time.
	/// The snapshot policy is normally applied according to its schedule, but you might want to manually run a policy before performing an upgrade or other maintenance.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteLifecycleResponse> ExecuteLifecycleAsync(ExecuteLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteLifecycleRequestDescriptor, ExecuteLifecycleResponse, ExecuteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a policy.
	/// Immediately create a snapshot according to the snapshot lifecycle policy without waiting for the scheduled time.
	/// The snapshot policy is normally applied according to its schedule, but you might want to manually run a policy before performing an upgrade or other maintenance.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteLifecycleResponse> ExecuteLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, CancellationToken cancellationToken = default)
	{
		var descriptor = new ExecuteLifecycleRequestDescriptor(policyId);
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteLifecycleRequestDescriptor, ExecuteLifecycleResponse, ExecuteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a policy.
	/// Immediately create a snapshot according to the snapshot lifecycle policy without waiting for the scheduled time.
	/// The snapshot policy is normally applied according to its schedule, but you might want to manually run a policy before performing an upgrade or other maintenance.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteLifecycleResponse> ExecuteLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, Action<ExecuteLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ExecuteLifecycleRequestDescriptor(policyId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteLifecycleRequestDescriptor, ExecuteLifecycleResponse, ExecuteLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a retention policy.
	/// Manually apply the retention policy to force immediate removal of snapshots that are expired according to the snapshot lifecycle policy retention rules.
	/// The retention policy is normally applied according to its schedule.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteRetentionResponse> ExecuteRetentionAsync(ExecuteRetentionRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ExecuteRetentionRequest, ExecuteRetentionResponse, ExecuteRetentionRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a retention policy.
	/// Manually apply the retention policy to force immediate removal of snapshots that are expired according to the snapshot lifecycle policy retention rules.
	/// The retention policy is normally applied according to its schedule.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteRetentionResponse> ExecuteRetentionAsync(ExecuteRetentionRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteRetentionRequestDescriptor, ExecuteRetentionResponse, ExecuteRetentionRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a retention policy.
	/// Manually apply the retention policy to force immediate removal of snapshots that are expired according to the snapshot lifecycle policy retention rules.
	/// The retention policy is normally applied according to its schedule.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteRetentionResponse> ExecuteRetentionAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new ExecuteRetentionRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteRetentionRequestDescriptor, ExecuteRetentionResponse, ExecuteRetentionRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Run a retention policy.
	/// Manually apply the retention policy to force immediate removal of snapshots that are expired according to the snapshot lifecycle policy retention rules.
	/// The retention policy is normally applied according to its schedule.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ExecuteRetentionResponse> ExecuteRetentionAsync(Action<ExecuteRetentionRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ExecuteRetentionRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ExecuteRetentionRequestDescriptor, ExecuteRetentionResponse, ExecuteRetentionRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(GetLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequest, GetLifecycleResponse, GetLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(GetLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Names? policyId, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor(policyId);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Names? policyId, Action<GetLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor(policyId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get policy information.
	/// Get snapshot lifecycle policy definitions and information about the latest snapshot attempts.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetLifecycleResponse> GetLifecycleAsync(Action<GetLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetLifecycleRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetLifecycleRequestDescriptor, GetLifecycleResponse, GetLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get snapshot lifecycle management statistics.
	/// Get global and policy-level statistics about actions taken by snapshot lifecycle management.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/slm-api-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetStatsResponse> GetStatsAsync(GetStatsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetStatsRequest, GetStatsResponse, GetStatsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get snapshot lifecycle management statistics.
	/// Get global and policy-level statistics about actions taken by snapshot lifecycle management.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/slm-api-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetStatsResponse> GetStatsAsync(GetStatsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetStatsRequestDescriptor, GetStatsResponse, GetStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get snapshot lifecycle management statistics.
	/// Get global and policy-level statistics about actions taken by snapshot lifecycle management.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/slm-api-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetStatsResponse> GetStatsAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetStatsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetStatsRequestDescriptor, GetStatsResponse, GetStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get snapshot lifecycle management statistics.
	/// Get global and policy-level statistics about actions taken by snapshot lifecycle management.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/master/slm-api-get-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetStatsResponse> GetStatsAsync(Action<GetStatsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetStatsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetStatsRequestDescriptor, GetStatsResponse, GetStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the snapshot lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetSlmStatusResponse> GetStatusAsync(GetSlmStatusRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetSlmStatusRequest, GetSlmStatusResponse, GetSlmStatusRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the snapshot lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetSlmStatusResponse> GetStatusAsync(GetSlmStatusRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetSlmStatusRequestDescriptor, GetSlmStatusResponse, GetSlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the snapshot lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetSlmStatusResponse> GetStatusAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new GetSlmStatusRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<GetSlmStatusRequestDescriptor, GetSlmStatusResponse, GetSlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Get the snapshot lifecycle management status.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetSlmStatusResponse> GetStatusAsync(Action<GetSlmStatusRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetSlmStatusRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetSlmStatusRequestDescriptor, GetSlmStatusResponse, GetSlmStatusRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a policy.
	/// Create or update a snapshot lifecycle policy.
	/// If the policy already exists, this request increments the policy version.
	/// Only the latest version of a policy is stored.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(PutLifecycleRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequest, PutLifecycleResponse, PutLifecycleRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a policy.
	/// Create or update a snapshot lifecycle policy.
	/// If the policy already exists, this request increments the policy version.
	/// Only the latest version of a policy is stored.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(PutLifecycleRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a policy.
	/// Create or update a snapshot lifecycle policy.
	/// If the policy already exists, this request increments the policy version.
	/// Only the latest version of a policy is stored.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutLifecycleRequestDescriptor(policyId);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Create or update a policy.
	/// Create or update a snapshot lifecycle policy.
	/// If the policy already exists, this request increments the policy version.
	/// Only the latest version of a policy is stored.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<PutLifecycleResponse> PutLifecycleAsync(Elastic.Clients.Elasticsearch.Serverless.Name policyId, Action<PutLifecycleRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new PutLifecycleRequestDescriptor(policyId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<PutLifecycleRequestDescriptor, PutLifecycleResponse, PutLifecycleRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start snapshot lifecycle management.
	/// Snapshot lifecycle management (SLM) starts automatically when a cluster is formed.
	/// Manually starting SLM is necessary only if it has been stopped using the stop SLM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartSlmResponse> StartAsync(StartSlmRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<StartSlmRequest, StartSlmResponse, StartSlmRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start snapshot lifecycle management.
	/// Snapshot lifecycle management (SLM) starts automatically when a cluster is formed.
	/// Manually starting SLM is necessary only if it has been stopped using the stop SLM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartSlmResponse> StartAsync(StartSlmRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<StartSlmRequestDescriptor, StartSlmResponse, StartSlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start snapshot lifecycle management.
	/// Snapshot lifecycle management (SLM) starts automatically when a cluster is formed.
	/// Manually starting SLM is necessary only if it has been stopped using the stop SLM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartSlmResponse> StartAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new StartSlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<StartSlmRequestDescriptor, StartSlmResponse, StartSlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Start snapshot lifecycle management.
	/// Snapshot lifecycle management (SLM) starts automatically when a cluster is formed.
	/// Manually starting SLM is necessary only if it has been stopped using the stop SLM API.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StartSlmResponse> StartAsync(Action<StartSlmRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new StartSlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<StartSlmRequestDescriptor, StartSlmResponse, StartSlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop snapshot lifecycle management.
	/// Stop all snapshot lifecycle management (SLM) operations and the SLM plugin.
	/// This API is useful when you are performing maintenance on a cluster and need to prevent SLM from performing any actions on your data streams or indices.
	/// Stopping SLM does not stop any snapshots that are in progress.
	/// You can manually trigger snapshots with the run snapshot lifecycle policy API even if SLM is stopped.
	/// </para>
	/// <para>
	/// The API returns a response as soon as the request is acknowledged, but the plugin might continue to run until in-progress operations complete and it can be safely stopped.
	/// Use the get snapshot lifecycle management status API to see if SLM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopSlmResponse> StopAsync(StopSlmRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<StopSlmRequest, StopSlmResponse, StopSlmRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop snapshot lifecycle management.
	/// Stop all snapshot lifecycle management (SLM) operations and the SLM plugin.
	/// This API is useful when you are performing maintenance on a cluster and need to prevent SLM from performing any actions on your data streams or indices.
	/// Stopping SLM does not stop any snapshots that are in progress.
	/// You can manually trigger snapshots with the run snapshot lifecycle policy API even if SLM is stopped.
	/// </para>
	/// <para>
	/// The API returns a response as soon as the request is acknowledged, but the plugin might continue to run until in-progress operations complete and it can be safely stopped.
	/// Use the get snapshot lifecycle management status API to see if SLM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopSlmResponse> StopAsync(StopSlmRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<StopSlmRequestDescriptor, StopSlmResponse, StopSlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop snapshot lifecycle management.
	/// Stop all snapshot lifecycle management (SLM) operations and the SLM plugin.
	/// This API is useful when you are performing maintenance on a cluster and need to prevent SLM from performing any actions on your data streams or indices.
	/// Stopping SLM does not stop any snapshots that are in progress.
	/// You can manually trigger snapshots with the run snapshot lifecycle policy API even if SLM is stopped.
	/// </para>
	/// <para>
	/// The API returns a response as soon as the request is acknowledged, but the plugin might continue to run until in-progress operations complete and it can be safely stopped.
	/// Use the get snapshot lifecycle management status API to see if SLM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopSlmResponse> StopAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new StopSlmRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<StopSlmRequestDescriptor, StopSlmResponse, StopSlmRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>
	/// Stop snapshot lifecycle management.
	/// Stop all snapshot lifecycle management (SLM) operations and the SLM plugin.
	/// This API is useful when you are performing maintenance on a cluster and need to prevent SLM from performing any actions on your data streams or indices.
	/// Stopping SLM does not stop any snapshots that are in progress.
	/// You can manually trigger snapshots with the run snapshot lifecycle policy API even if SLM is stopped.
	/// </para>
	/// <para>
	/// The API returns a response as soon as the request is acknowledged, but the plugin might continue to run until in-progress operations complete and it can be safely stopped.
	/// Use the get snapshot lifecycle management status API to see if SLM is running.
	/// </para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<StopSlmResponse> StopAsync(Action<StopSlmRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new StopSlmRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<StopSlmRequestDescriptor, StopSlmResponse, StopSlmRequestParameters>(descriptor, cancellationToken);
	}
}