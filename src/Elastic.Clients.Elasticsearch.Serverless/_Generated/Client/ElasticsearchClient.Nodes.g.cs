// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.Serverless.Nodes;

public partial class NodesNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// <para>Initializes a new instance of the <see cref="NodesNamespacedClient"/> class for mocking.</para>
	/// </summary>
	protected NodesNamespacedClient() : base()
	{
	}

	internal NodesNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(HotThreadsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<HotThreadsRequest, HotThreadsResponse, HotThreadsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(HotThreadsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<HotThreadsRequestDescriptor, HotThreadsResponse, HotThreadsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, CancellationToken cancellationToken = default)
	{
		var descriptor = new HotThreadsRequestDescriptor(nodeId);
		descriptor.BeforeRequest();
		return DoRequestAsync<HotThreadsRequestDescriptor, HotThreadsResponse, HotThreadsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Action<HotThreadsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new HotThreadsRequestDescriptor(nodeId);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<HotThreadsRequestDescriptor, HotThreadsResponse, HotThreadsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new HotThreadsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<HotThreadsRequestDescriptor, HotThreadsResponse, HotThreadsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>This API yields a breakdown of the hot threads on each selected node in the cluster.<br/>The output is plain text with a breakdown of each node’s top hot threads.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-hot-threads.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<HotThreadsResponse> HotThreadsAsync(Action<HotThreadsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new HotThreadsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<HotThreadsRequestDescriptor, HotThreadsResponse, HotThreadsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(NodesInfoRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<NodesInfoRequest, NodesInfoResponse, NodesInfoRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(NodesInfoRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesInfoRequestDescriptor, NodesInfoResponse, NodesInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesInfoRequestDescriptor(nodeId, metric);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesInfoRequestDescriptor, NodesInfoResponse, NodesInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Action<NodesInfoRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesInfoRequestDescriptor(nodeId, metric);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesInfoRequestDescriptor, NodesInfoResponse, NodesInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesInfoRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesInfoRequestDescriptor, NodesInfoResponse, NodesInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes information.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-info.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesInfoResponse> InfoAsync(Action<NodesInfoRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesInfoRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesInfoRequestDescriptor, NodesInfoResponse, NodesInfoRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(NodesStatsRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<NodesStatsRequest, NodesStatsResponse, NodesStatsRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync<TDocument>(NodesStatsRequestDescriptor<TDocument> descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor<TDocument>, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync<TDocument>(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Elastic.Clients.Elasticsearch.Serverless.Metrics? indexMetric, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor<TDocument>(nodeId, metric, indexMetric);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor<TDocument>, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync<TDocument>(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Elastic.Clients.Elasticsearch.Serverless.Metrics? indexMetric, Action<NodesStatsRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor<TDocument>(nodeId, metric, indexMetric);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor<TDocument>, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync<TDocument>(CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor<TDocument>();
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor<TDocument>, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync<TDocument>(Action<NodesStatsRequestDescriptor<TDocument>> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor<TDocument>();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor<TDocument>, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(NodesStatsRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Elastic.Clients.Elasticsearch.Serverless.Metrics? indexMetric, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor(nodeId, metric, indexMetric);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Elastic.Clients.Elasticsearch.Serverless.Metrics? indexMetric, Action<NodesStatsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor(nodeId, metric, indexMetric);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns cluster nodes statistics.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-stats.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesStatsResponse> StatsAsync(Action<NodesStatsRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesStatsRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesStatsRequestDescriptor, NodesStatsResponse, NodesStatsRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(NodesUsageRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<NodesUsageRequest, NodesUsageResponse, NodesUsageRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(NodesUsageRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesUsageRequestDescriptor, NodesUsageResponse, NodesUsageRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesUsageRequestDescriptor(nodeId, metric);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesUsageRequestDescriptor, NodesUsageResponse, NodesUsageRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(Elastic.Clients.Elasticsearch.Serverless.NodeIds? nodeId, Elastic.Clients.Elasticsearch.Serverless.Metrics? metric, Action<NodesUsageRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesUsageRequestDescriptor(nodeId, metric);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesUsageRequestDescriptor, NodesUsageResponse, NodesUsageRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesUsageRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesUsageRequestDescriptor, NodesUsageResponse, NodesUsageRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// <para>Returns information on the usage of features.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.14/cluster-nodes-usage.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<NodesUsageResponse> UsageAsync(Action<NodesUsageRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new NodesUsageRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<NodesUsageRequestDescriptor, NodesUsageResponse, NodesUsageRequestParameters>(descriptor, cancellationToken);
	}
}