// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using System;
using System.Threading;
using System.Threading.Tasks;

namespace Elastic.Clients.Elasticsearch.Serverless.Tasks;

public partial class TasksNamespacedClient : NamespacedClientProxy
{
	/// <summary>
	/// Initializes a new instance of the <see cref="TasksNamespacedClient"/> class for mocking.
	/// </summary>
	protected TasksNamespacedClient() : base()
	{
	}

	internal TasksNamespacedClient(ElasticsearchClient client) : base(client)
	{
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual CancelResponse Cancel(CancelRequest request)
	{
		request.BeforeRequest();
		return DoRequest<CancelRequest, CancelResponse, CancelRequestParameters>(request);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CancelResponse> CancelAsync(CancelRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<CancelRequest, CancelResponse, CancelRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual CancelResponse Cancel()
	{
		var descriptor = new CancelRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual CancelResponse Cancel(CancelRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual CancelResponse Cancel(Action<CancelRequestDescriptor> configureRequest)
	{
		var descriptor = new CancelRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CancelResponse> CancelAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new CancelRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CancelResponse> CancelAsync(CancelRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Cancels a task, if it can be cancelled through an API.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<CancelResponse> CancelAsync(Action<CancelRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new CancelRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<CancelRequestDescriptor, CancelResponse, CancelRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual GetTasksResponse Get(GetTasksRequest request)
	{
		request.BeforeRequest();
		return DoRequest<GetTasksRequest, GetTasksResponse, GetTasksRequestParameters>(request);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetTasksResponse> GetAsync(GetTasksRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<GetTasksRequest, GetTasksResponse, GetTasksRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual GetTasksResponse Get(Elastic.Clients.Elasticsearch.Serverless.Id task_id)
	{
		var descriptor = new GetTasksRequestDescriptor(task_id);
		descriptor.BeforeRequest();
		return DoRequest<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual GetTasksResponse Get(GetTasksRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual GetTasksResponse Get(Elastic.Clients.Elasticsearch.Serverless.Id task_id, Action<GetTasksRequestDescriptor> configureRequest)
	{
		var descriptor = new GetTasksRequestDescriptor(task_id);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetTasksResponse> GetAsync(Elastic.Clients.Elasticsearch.Serverless.Id task_id, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetTasksRequestDescriptor(task_id);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetTasksResponse> GetAsync(GetTasksRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns information about a task.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<GetTasksResponse> GetAsync(Elastic.Clients.Elasticsearch.Serverless.Id task_id, Action<GetTasksRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new GetTasksRequestDescriptor(task_id);
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<GetTasksRequestDescriptor, GetTasksResponse, GetTasksRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual ListResponse List(ListRequest request)
	{
		request.BeforeRequest();
		return DoRequest<ListRequest, ListResponse, ListRequestParameters>(request);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListResponse> ListAsync(ListRequest request, CancellationToken cancellationToken = default)
	{
		request.BeforeRequest();
		return DoRequestAsync<ListRequest, ListResponse, ListRequestParameters>(request, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual ListResponse List()
	{
		var descriptor = new ListRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequest<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual ListResponse List(ListRequestDescriptor descriptor)
	{
		descriptor.BeforeRequest();
		return DoRequest<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual ListResponse List(Action<ListRequestDescriptor> configureRequest)
	{
		var descriptor = new ListRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequest<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListResponse> ListAsync(CancellationToken cancellationToken = default)
	{
		var descriptor = new ListRequestDescriptor();
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListResponse> ListAsync(ListRequestDescriptor descriptor, CancellationToken cancellationToken = default)
	{
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor, cancellationToken);
	}

	/// <summary>
	/// EXPERIMENTAL! May change in ways that are not backwards compatible or be removed entirely.
	/// <para>Returns a list of tasks.</para>
	/// <para><see href="https://www.elastic.co/guide/en/elasticsearch/reference/8.12/tasks.html">Learn more about this API in the Elasticsearch documentation.</see></para>
	/// </summary>
	public virtual Task<ListResponse> ListAsync(Action<ListRequestDescriptor> configureRequest, CancellationToken cancellationToken = default)
	{
		var descriptor = new ListRequestDescriptor();
		configureRequest?.Invoke(descriptor);
		descriptor.BeforeRequest();
		return DoRequestAsync<ListRequestDescriptor, ListResponse, ListRequestParameters>(descriptor, cancellationToken);
	}
}