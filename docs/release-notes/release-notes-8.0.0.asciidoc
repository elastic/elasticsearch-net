[float]
[[release-notes-8.0.0]]
== Release-Notes 8.0.0

After many months of work, eleven alphas, six betas and two release candidates, 
we are pleased to announce the GA release of the {net-client} v8.0.0.

The overall themes of this release have been based around standardizing 
serialization, performance improvements, codebase simplification, and code 
generation. The following release notes explain the client's current state 
and our rationale for some of the design choices we have introduced.

[float]
=== Version 8 is a refresh

It's important to highlight that version 8 of the client represents 
a new start. Mature code becomes increasingly hard to maintain over time, and 
our ability to make timely releases has diminished as code complexity has increased. 
Major releases allow us to simplify and better align 
our language clients with each other in terms of design. Here, it is crucial to 
find the right balance between uniformity across programming languages and the 
idiomatic concerns of each language. For .NET, we will typically compare and 
contrast with Java and Go to make sure that our approach is equivalent for each 
of these. We also take heavy inspiration from Microsoft and the 
conventions of the wider .NET community.

[float]
==== New package

We have intentionally shipped the new code-generated client as a new package 
with a new root namespace, `Elastic.Clients.Elasticsearch`. 
This new client is built upon the foundations of NEST, but there are changes. 
By shipping as a new package, the expectation is that migration can be managed 
in a phased approach.

[float]
==== Limited feature set

We have also intentionally limited the feature set for the initial 8.0 release. 
Over the course of the 8.x releases, we will be able to reintroduce features 
again. Therefore, if something is missing, it may not be permanently omitted. 
We will endeavour to communicate our plans as and when they 
become available. If a feature you depend on is missing and not explicitly 
documented below as a feature we do not plan to reintroduce, please open an issue
(or comment on a relevant existing issue) to highlight it to us.

[float]
=== Code Generation

Given the size of the Elasticsearch API surface today, it is no longer practical 
to maintain by hand the thousands of data types. To ensure 
consistent, accurate and timely alignment between language clients and 
Elasticsearch, the 8.x clients, and all the associated types are now 
code-generated from a https://github.com/elastic/elasticsearch-specification[common specification]. 
This is a common solution to maintaining alignment between client and server 
among SDKs and libraries, such as those for Azure, AWS and the Google Cloud 
Platform.

Code generation from a specification has inevitably led to some differences 
between the existing NEST types and those available in the new client. 
One example is the lack of the convenience member Name on Property types. 
For the 8.0 release, we generate strictly from the specification, special 
casing a few areas to improve usability or to align with language idioms. 
The base type hierarchy for concepts such as Properties, Aggregations and Queries 
is no longer present in generated code as these arbitrary groupings do not align 
with concrete concepts of the public server API. These considerations do not 
preclude adding syntactic sugar and usability enhancements to types in future 
releases on a case-by-case basis.

[float]
=== Elastic.Transport

The .NET client includes a transport layer responsible for abstracting HTTP 
concepts and to provide functionality such as our request pipeline. This 
supports round-robin load-balancing of requests to nodes, pinging failed 
nodes and sniffing the cluster for node roles.

As part of the work for v8.0.0, we have moved the transport layer out into 
its own https://github.com/elastic/elastic-transport-net[dedicated package and repository]. 
This supports reuse across future clients and allows consumers with extremely 
high-performance requirements to build upon this foundation.

[float]
=== System.Text.Json for serialization

The v7 NEST high-level client uses an internalized and modified version of 
https://github.com/neuecc/Utf8Json[Utf8Json] for request and response 
(de) serialization. This was introduced for its performance improvements 
over https://www.newtonsoft.com/json[Json.NET], the more common JSON framework at 
the time.

While Utf8Json provides good value, we have identified minor bugs and 
performance issues that have required maintenance over time. Some of these 
are hard to change without more significant effort. This library is no longer 
maintained, and any such changes cannot easily be contributed back to the 
original project.

With .NET Core 3.0, Microsoft shipped new https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis[JSON APIs] 
that is part of .NET. We have adopted System.Text.Json for all (de) serialization. 
Consumers can still define and register their own serializer for their 
document types should they need this.

By adopting System.Text.Json, we can depend on a well-maintained and supported library. 
System.Text.Json is designed from the ground up to support the latest performance 
optimizations in .NET and, as a result, is both fast and low-allocation (de) 
serialization.

[float]
=== Migrating to Elastic.Clients.Elasticsearch

[WARNING]
--
The 8.0.0 release does not have feature parity with NEST and focuses on 
core endpoints, more specifically for common CRUD scenarios. We intend 
to reduce the feature gap in subsequent versions. We anticipate that this 
initial release will best suit new applications and may not be migration-ready 
for all existing consumers. We recommend reviewing this documentation's missing 
and reduced API surface details before migrating from NEST.
--

The choice to code-generate a new evolution of the .NET client introduces some 
significant breaking changes. We consciously took the opportunity to refactor 
and reconsider historic design choices as part of this release, intending to limit 
future breaking changes.

The 8.0 client is shipped as a new https://www.nuget.org/packages/Elastic.Clients.Elasticsearch/[NuGet package] 
which can be installed alongside NEST. We  
anticipate that some consumers may prefer a phased migration with both 
packages side-by-side for complex migrations. In addition, NEST 7.17.x can 
continue to be used in 
https://www.elastic.co/guide/en/elasticsearch/client/net-api/7.17/connecting-to-elasticsearch-v8.html[compatibility mode] 
with Elasticsearch 8.x servers until the 8.x {net-client} features 
align with application requirements and even during the migration phase.

We will continue to prioritize the feature roadmap and code-generation work 
based on feedback from consumers who may rely on features that are initially 
unavailable.

[float]
=== Breaking Changes

[WARNING]
--
As a result of code generating a majority of the client types, this version of 
the client includes multiple breaking changes.
--

We have strived to keep the core foundation reasonably similar, but types emitted 
through code generation are subject to change between NEST (v7.x) and the new 
`Elastic.Clients.Elasticsearch` (v8.x) package.

[float]
==== Namespaces

We have renamed the package and top-level namespace for the v8 client to 
`Elastic.Clients.Elasticsearch`. All types belong to this namespace. When 
necessary to avoid potential conflicts, types are generated into suitable 
sub-namespaces based on the Elasticsearch specification. Additional using 
directives may be required to access types when using the client.

Transport layer concepts have moved to the new `Elastic.Transport` NuGet package 
and related types are defined under a similarly named namespace. Some functionality 
may require a using directive for this namespace.

[float]
==== Type Names

Type names may have changed between versions. We are not listing these 
explicitly due to the potentially vast number of subtle differences. 
Names will now more closely align to those used in the JSON and as documented 
in the Elasticsearch documentation.

[float]
==== Class members

Types may include renamed properties based on the Elasticsearch specification, 
which differ from the original NEST property names. The Types used for properties 
may also have changed due to code generation. If you identify missing or 
incorrectly typed properties, please open an issue to alert us.

[float]
==== Sealing classes

Opinions on "sealing by default" within the .NET ecosystem tend to be quite 
polarised. Microsoft seal all internal types for potential performance gains 
and we see a benefit in starting with that approach for the {net-client}, 
even for our public API surface. 

While it prevents inheritance and, therefore, may inhibit a few consumer scenarios, 
sealing by default is to avoid the unexpected or invalid 
extension of types that could inadvertently be broken in the future. That said, 
sealing is not necessarily a final choice for all types; but it is clearly 
easier for a future release to unseal a previously-sealed class than 
vice versa. We can therefore choose to unseal as valid scenarios arise, 
should we determine that doing so is the best solution for those scenarios. 
This goes back to our clean-slate concept for this new client.

[float]
==== Removed features

As part of the clean slate redesign of the new client, we have opted to remove 
certain features from the v8.0 client.

[float]
===== Attribute Mappings

In previous versions of the NEST client, attributes could be used to configure 
the mapping behaviour and inference for user types. We have removed support for
these attributes and recommend that mapping be completed via the fluent API when 
configuring client instances. System.Text.Json attributes may be used to rename 
and ignore properties during source serialization.

[float]
===== CAT APIs

The CAT APIs of Elasticsearch are intended for human-readable usage and will no 
longer be supported via the v8 {net-client}.

[float]
===== Interface removal

We have removed several interfaces that previously shipped as part of NEST. This 
is a design decision to simplify the library and avoid interfaces where only a 
single implementation of that interface is expected to exist. We have also switched
to prefer abstract base classes over interfaces across the library.

[float]
==== Missing features

While not an exhaustive list, the following are some of the main features which 
have not been re-implemented in the new v8.0 client in time for this GA release. 
These remain on our roadmap and will be reviewed and prioritized for inclusion in
future releases.

* Query DSL operators
* Scroll Helper
* Fluent API for union types
* AutoMap
* PropertyVisitor pattern
* Support for JoinField which affects ChildrenAggregation.
* Conditionless Queries
* DiagnosticSources have been removed in Elastic.Transport to provide a clean slate
for an improved diagnostics story. The {net-client} emits OpenTelemetry Activities 
which can be consumed by APM agents such as the Elastic APM Agent for .NET.
* Documentation is a work in progress, and we will expand on the documented scenarios
in future releases.

[float]
=== Reduced API surface

In this first release of the code-generated .NET client, we have specifically 
focused on supporting commonly used endpoints. We have also skipped specific 
queries and aggregations which need further work to generate code correctly. 
Before migrating, please refer to the lists below for the endpoints, 
queries and aggregations currently generated and available 
in the 8.0.0 GA release to ensure the features you are using are supported.

[float]
==== Supported Elasticsearch endpoints

The following are Elasticsearch endpoints currently generated and available 
in the 8.0.0 client.

* AsyncSearch.Delete
* AsyncSearch.Get
* AsyncSearch.Status
* AsyncSearch.Submit
* Bulk 
* ClearScroll
* ClosePointInTime 
* Cluster.Health
* Count
* Create
* Delete
* DeleteByQuery
* DeleteByQueryRethrottle
* DeleteScript
* EQL.Delete
* EQL.Get
* EQL.Search
* EQL.Status
* Exists
* ExistsSource
* Explain
* FieldCaps
* Get
* GetScript
* GetScriptContext
* GetScriptLanguages
* GetSource
* Index
* Indices.Clone
* Indices.Close
* Indices.Create
* Indices.CreateDataStream
* Indices.Delete
* Indices.DeleteAlias
* Indices.DeleteDataStream
* Indices.DeleteIndexTemplate
* Indices.DeleteTemplate
* Indices.Exists
* Indices.ExistsIndexTemplate
* Indices.ExistsTemplate
* Indices.Flush
* Indices.ForceMerge
* Indices.Get
* Indices.GetAlias
* Indices.GetDataStream
* Indices.GetFieldMapping
* Indices.GetIndexTemplate
* Indices.GetMapping
* Indices.GetTemplate
* Indices.Indices.SimulateTemplate
* Indices.MigrateToDataStream
* Indices.Open
* Indices.PutAlias
* Indices.PutIndexTemplate
* Indices.PutMapping
* Indices.PutTemplate
* Indices.Refresh
* Indices.Rollover
* Indices.Shrink
* Indices.SimulateIndexTemplate
* Indices.Split
* Indices.Unfreeze
* Info
* MGet
* MSearch
* MSearchTemplate
* OpenPointInTime
* Ping
* PutScript
* RankEval
* Reindex
* ReindexRethrottle
* Scroll
* Search
* SearchShards
* SQL.ClearCursor
* SQL.DeleteAsync
* SQL.GetAsync
* SQL.GetAsyncStatus
* SQL.Query
* TermsEnum
* Update
* UpdateByQuery
* UpdateByQueryRethrottle

[float]
==== Supported queries

* Bool
* Boosting
* CombinedFields
* ConstantScore
* DisMax
* Exists
* FunctionScore
* Fuzzy
* HasChild
* HasParent
* Ids
* Intervals
* Match
* MatchAll
* MatchBool
* MatchNone
* MatchPhrase
* MatchPhrasePrefix
* MoreLikeThis
* MultiMatch
* Nested
* ParentId
* Percolate
* Prefix
* QueryString
* RankFeature
* Regexp
* Script
* ScriptScore
* Shape
* SimpleQueryString
* SpanContaining
* SpanFirst
* SpanMultiTerm
* SpanNear
* SpanNot
* SpanOr
* SpanTerm
* SpanWithin
* Term
* Terms
* TermsSet
* Wildcard
* Wrapper

[float]
==== Supported aggregations

* AdjacencyMatrix
* AutoDateHistogram
* Avg
* Boxplot
* Cardinality
* Children
* Composite
* CumulativeCardinality
* DateHistogram
* DateRange
* Derivative
* ExtendedStats
* Filters
* Global
* Histogram
* Inference
* IpRange
* MatrixStats
* Max
* MedianAbsoluteDeviation
* Min
* Missing
* MultiTerms
* Nested
* Parent
* PercentilesBucket
* Range
* Rate
* ReverseNested
* Sampler
* ScriptedMetric
* Stats
* StatsBucket
* StringStats
* Sum
* Terms
* TopHits
* TopMetrics
* TTest
* ValueCount
* VariableWidthHistogram
* WeightedAvg