:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/ClientConcepts/ConnectionPooling/BuildingBlocks/ConnectionPooling.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[connection-pooling]]
=== Connection pools

Connection pooling is the internal mechanism that takes care of registering what nodes there are in the cluster and which
NEST can use to issue client calls on.

[IMPORTANT]
--
Despite the name, a connection pool in NEST is **not** like connection pooling that you may be familiar with from
https://msdn.microsoft.com/en-us/library/bb399543(v=vs.110).aspx[interacting with a database using ADO.Net]; for example,
a connection pool in NEST is **not** responsible for managing an underlying pool of TCP connections to Elasticsearch,
this is https://blogs.msdn.microsoft.com/adarshk/2005/01/02/understanding-system-net-connection-management-and-servicepointmanager/[handled by the ServicePointManager in Desktop CLR].

--

So, what is a connection pool in NEST responsible for? It is responsible for managing the nodes in an Elasticsearch
cluster to which a connection can be made and there is one instance of an `IConnectionPool` associated with an
instance of `ConnectionSettings`. Since a single client and connection settings 
instance is recommended for the life of the application, the lifetime of a 
single connection pool instance will also be bound to the lifetime of the 
application.

There are five types of connection pool

* <<single-node-connection-pool,SingleNodeConnectionPool>>

* <<cloud-connection-pool,CloudConnectionPool>>

* <<static-connection-pool,StaticConnectionPool>>

* <<sniffing-connection-pool,SniffingConnectionPool>>

* <<sticky-connection-pool,StickyConnectionPool>>

[[single-node-connection-pool]]
==== SingleNodeConnectionPool

The simplest of all connection pools and the default if no connection pool is explicitly passed to the `ConnectionSettings` constructor.
It takes a single `Uri` and uses that to connect to Elasticsearch for all the calls. Single node connection pool doesn't opt in to
sniffing or pinging behavior and will never mark nodes dead or alive. The one `Uri` it holds is always ready to go.

Single node connection pool is the pool to use if your cluster contains only a single node or you are interacting with
your cluster through a single load balancer instance.

[source,csharp]
----
var uri = new Uri("http://localhost:9201");
var pool = new SingleNodeConnectionPool(uri);
var client = new ElasticClient(new ConnectionSettings(pool));
----

This type of pool is hardwired to opt out of reseeding (<<sniffing-behaviour, sniffing>>) as well as <<pinging-behaviour, pinging>> 

When you use the low ceremony `ElasticClient` constructor that takes a single `Uri`,
internally a `SingleNodeConnectionPool` is used

[source,csharp]
----
client = new ElasticClient(uri);
----

However we encourage you to pass connection settings explicitly.

[[cloud-connection-pool]]
==== CloudConnectionPool

A specialized subclass of `SingleNodeConnectionPool` that accepts a Cloud Id and credentials.
When used the client will also pick Elastic Cloud optimized defaults for the connection settings.

A Cloud Id for your cluster can be fetched from your Elastic Cloud cluster administration console.

A Cloud Id should be in the form of `cluster_name:base_64_data` where `base_64_data` are the UUIDs for the services in this cloud instance e.g

`host_name$elasticsearch_uuid$kibana_uuid$apm_uuid`

Out of these, only `host_name` and `elasticsearch_uuid` are always available.

A cloud connection pool can be created using credentials and a `cloudId`

[source,csharp]
----
var credentials = new BasicAuthentication("username", "password"); <1>
var pool = new CloudConnectionPool(cloudId, credentials); <2>
var client = new ElasticClient(new ConnectionSettings(pool));
----
<1> a username and password that can access Elasticsearch service on Elastic Cloud
<2> `cloudId` is a value that can be retrieved from the Elastic Cloud web console

This type of pool, like its parent the `SingleNodeConnectionPool`, is hardwired to opt out of
reseeding (<<sniffing-behaviour, sniffing>>) as well as <<pinging-behaviour, pinging>>.

You can also directly create a cloud enabled connection using the `ElasticClient`'s constructor

[source,csharp]
----
client = new ElasticClient(cloudId, credentials);
----

[[static-connection-pool]]
==== StaticConnectionPool

The static connection pool is great if you have a known small sized cluster and do no want to enable
sniffing to find out the cluster topology.

Given a collection of `Uri` 

[source,csharp]
----
var uris = Enumerable.Range(9200, 5)
    .Select(port => new Uri($"http://localhost:{port}"));
----

a connection pool can be seeded with this collection 

[source,csharp]
----
var pool = new StaticConnectionPool(uris);
var client = new ElasticClient(new ConnectionSettings(pool));
----

Or using an enumerable of `Node` 

[source,csharp]
----
var nodes = uris.Select(u => new Node(u));
pool = new StaticConnectionPool(nodes);
client = new ElasticClient(new ConnectionSettings(pool));
----

This type of pool is hardwired to opt out of reseeding
(<<sniffing-behaviour, sniffing>>) but supports <<pinging-behaviour, pinging>> when enabled.

[[sniffing-connection-pool]]
==== SniffingConnectionPool

A pool derived from `StaticConnectionPool`, a sniffing connection pool allows itself to be reseeded at run time.
It comes with the very minor overhead of a `ReaderWriterLockSlim` to ensure thread safety.

Given a collection of `Uri` 

[source,csharp]
----
var uris = Enumerable.Range(9200, 5)
    .Select(port => new Uri($"http://localhost:{port}"));
----

a connection pool can be seeded using an enumerable of `Uri` 

[source,csharp]
----
var pool = new SniffingConnectionPool(uris);
var client = new ElasticClient(new ConnectionSettings(pool));
----

Or using an enumerable of `Node`. A major benefit in using nodes is that you can include
known node roles when seeding, which NEST can then use to favour particular API requests. For example,
sniffing on master eligible nodes first, and take master only nodes out of rotation for issuing client calls on.

[source,csharp]
----
var nodes = uris.Select(u=>new Node(u));
pool = new SniffingConnectionPool(nodes);
client = new ElasticClient(new ConnectionSettings(pool));
----

This type of pool is hardwired to opt in to reseeding (<<sniffing-behaviour, sniffing>>), and <<pinging-behaviour, pinging>> 

[[sticky-connection-pool]]
==== StickyConnectionPool

A type of connection pool that returns the first live node to issue a request against, such that the node is _sticky_ between requests.
It uses https://msdn.microsoft.com/en-us/library/system.threading.interlocked(v=vs.110).aspx[`System.Threading.Interlocked`]
to keep an _indexer_ to the last live node in a thread safe manner.

Given a collection of `Uri` 

[source,csharp]
----
var uris = Enumerable.Range(9200, 5)
    .Select(port => new Uri($"http://localhost:{port}"));
----

a connection pool can be seeded using an enumerable of `Uri` 

[source,csharp]
----
var pool = new StickyConnectionPool(uris);
var client = new ElasticClient(new ConnectionSettings(pool));
----

Or using an enumerable of `Node`, similar to `SniffingConnectionPool`

[source,csharp]
----
var nodes = uris.Select(u=>new Node(u));
pool = new StickyConnectionPool(nodes);
client = new ElasticClient(new ConnectionSettings(pool));
----

This type of pool is hardwired to opt out of reseeding (<<sniffing-behaviour, sniffing>>), but does support <<pinging-behaviour, pinging>>. 

[[sticky-sniffing-connection-pool]]
==== Sticky Sniffing Connection Pool

A type of connection pool that returns the first live node to issue a request against, such that the node is _sticky_ between requests.
This implementation supports sniffing and sorting so that each instance of your application can favour a node. For example,
a node in the same rack, based on node attributes.

Given a collection of `Uri` 

[source,csharp]
----
var uris = Enumerable.Range(9200, 5)
    .Select(port => new Uri($"http://localhost:{port}"));
----

a sniffing sorted sticky pool takes a second parameter, a delegate of `Func<Node, float>`, that takes a Node and returns a weight.
Nodes will be sorted in descending order by weight. In the following example, nodes are scored so that client nodes
in rack_id `rack_one` score the highest

[source,csharp]
----
var pool = new StickySniffingConnectionPool(uris, node =>
{
    var weight = 0f;

    if (!node.HasFeature(HoldsData) && !node.HasFeature(MasterEligible))
        weight += 10;

    if (node.Settings.TryGetValue("node.attr.rack_id", out var rackId) && rackId.ToString() == "rack_one")
        weight += 10;

    return weight;
});

var client = new ElasticClient(new ConnectionSettings(pool));
----

