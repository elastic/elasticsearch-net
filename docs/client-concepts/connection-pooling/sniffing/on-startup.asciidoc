

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/ClientConcepts/ConnectionPooling/Sniffing/OnStartup.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[sniffing-on-startup]]
=== Sniffing on startup

<<connection-pooling, Connection pools>> that return `true` for `SupportsReseeding`
will sniff on startup by default.

We can demonstrate this by creating a _virtual_ Elasticsearch cluster using NEST's Test cluster framework.

Here we create a 10 node cluster that uses a <<sniffing-connection-pool,Sniffing connection pool>>, setting
sniff to fail on all nodes _*except*_ 9202

[source,csharp]
----
var audit = new Auditor(() => Virtual.Elasticsearch
    .Bootstrap(10)
    .Sniff(s => s.Fails(Always))
    .Sniff(s => s.OnPort(9202).Succeeds(Always))
    .Ping(c=>c.SucceedAlways())
    .ClientCalls(r => r.SucceedAlways())
    .SniffingConnectionPool()
    .AllDefaults()
);
----

When the client call is made, from the audit trail we see that the pool first tried to sniff on startup,
with a sniff failure on 9200 and 9201, followed by a sniff success on 9202. A ping and then healthy response are made on
9200

[source,csharp]
----
await audit.TraceCall(
     new ClientCall
     {
        { SniffOnStartup},
        { SniffFailure, 9200},
        { SniffFailure, 9201},
        { SniffSuccess, 9202},
        { PingSuccess , 9200},
        { HealthyResponse, 9200}
    }
 );
----

==== Occurs once

**A sniff on startup only happens once**. That is,

. a sniff is attempted on a node

. if that node fails, a sniff is attempted on the next node

. this continues until a sniff succeeds

. a sniff on startup does not occur again.

[source,csharp]
----
var audit = new Auditor(() => Virtual.Elasticsearch
    .Bootstrap(10)
    .Sniff(s => s.Fails(Always))
    .Sniff(s => s.OnPort(9202).Succeeds(Always))
    .ClientCalls(r => r.SucceedAlways())
    .Ping(c=>c.SucceedAlways())
    .SniffingConnectionPool()
    .AllDefaults()
);

await audit.TraceCalls(
     new ClientCall
     {
        { SniffOnStartup},
        { SniffFailure, 9200},
        { SniffFailure, 9201},
        { SniffSuccess, 9202},
        { PingSuccess , 9200},
        { HealthyResponse, 9200}
    },
    new ClientCall
    {
        { PingSuccess, 9201},
        { HealthyResponse, 9201}
    }
);
----

==== Uses cluster state

**A sniff on startup will use the returned cluster state**.

In this next example, the state of the cluster returned from the successful sniff
is used for subsequent client requests

[source,csharp]
----
var audit = new Auditor(() => Virtual.Elasticsearch
    .Bootstrap(10)
    .Sniff(s => s.Fails(Always))
    .Sniff(s => s.OnPort(9202).Succeeds(Always,
        Virtual.Elasticsearch.Bootstrap(8, startFrom: 9204)
            .Ping(c=>c.SucceedAlways())
            .ClientCalls(c=>c.SucceedAlways())

        )) <1>
    .ClientCalls(r => r.SucceedAlways())
    .Ping(c=>c.SucceedAlways())
    .SniffingConnectionPool()
    .AllDefaults()
);

await audit.TraceCall(new ClientCall {
    { SniffOnStartup},
    { SniffFailure, 9200},
    { SniffFailure, 9201},
    { SniffSuccess, 9202},
    { PingSuccess, 9204}, <2>
    { HealthyResponse, 9204}
});
----
<1> Sniffing returns 8 nodes, starting from 9204
<2> After successfully sniffing, the ping now happens on 9204

==== Prefers master eligible nodes

Sniffing prefers to run on master eligible nodes

[source,csharp]
----
var audit = new Auditor(() => Virtual.Elasticsearch
    .Bootstrap(new[] {
        new Node(new Uri("http://localhost:9200"), NotMasterEligible),
        new Node(new Uri("http://localhost:9201"), NotMasterEligible),
        new Node(new Uri("http://localhost:9202")),
    })
    .Sniff(s => s.Succeeds(Always))
    .Ping(s => s.Succeeds(Always))
    .ClientCalls(r => r.SucceedAlways())
    .SniffingConnectionPool()
    .AllDefaults()
);

await audit.TraceCall(new ClientCall {
    { SniffOnStartup},
    { SniffSuccess, 9202},
    { PingSuccess, 9200},
    { HealthyResponse, 9200}
});
----

although it will fail over to non-master eligible nodes when sniffing fails on master eligible nodes

[source,csharp]
----
var audit = new Auditor(() => Virtual.Elasticsearch
    .Bootstrap(new[] {
        new Node(new Uri("http://localhost:9200")),
        new Node(new Uri("http://localhost:9201")),
        new Node(new Uri("http://localhost:9202"), NotMasterEligible),
    })
    .Sniff(s => s.Fails(Always))
    .Sniff(s => s.OnPort(9202).Succeeds(Always))
    .Ping(c=>c.SucceedAlways())
    .ClientCalls(r => r.SucceedAlways())
    .SniffingConnectionPool()
    .AllDefaults()
);

await audit.TraceCall(new ClientCall {
    { SniffOnStartup},
    { SniffFailure, 9200},
    { SniffFailure, 9201},
    { SniffSuccess, 9202},
    { PingSuccess, 9200},
    { HealthyResponse, 9200}
});
----

