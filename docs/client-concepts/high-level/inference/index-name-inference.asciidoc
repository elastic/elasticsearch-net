

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/ClientConcepts/HighLevel/Inference/IndexNameInference.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[index-name-inference]]
=== Index name inference

Many endpoints within the Elasticsearch API expect to receive one or more index names
as part of the request, in order to know what index/indices a request should operate on.

NEST has a number of ways in which the index name(s) can be specified

==== Default Index name on Connection Settings

A default index name can be specified on `ConnectionSettings` using `.DefaultIndex()`.
This is the default index name to use, when no other index name can be resolved for a request

[source,csharp]
----
var settings = new ConnectionSettings()
    .DefaultIndex("defaultindex"); <1>

var client = new ElasticClient(settings);
var searchResponse = client.Search<Project>();
----
<1> set the default index

will send a search request to the API endpoint

[source,javascript]
----
"http://localhost:9200/defaultindex/_search"
----

[[index-name-type-mapping]]
==== Index name for a .NET type

An index name can be mapped for a _Plain Old CLR Object_ (POCO) using `.DefaultMappingFor<T>()` on `ConnectionSettings`

[source,csharp]
----
var settings = new ConnectionSettings()
    .DefaultMappingFor<Project>(m => m
        .IndexName("projects")
    );

var client = new ElasticClient(settings);
var searchResponse = client.Search<Project>();
----

will send a search request to the API endpoint

[source,javascript]
----
"http://localhost:9200/projects/_search"
----

`.DefaultMappingFor<T>()` can also be used to specify other defaults for a POCO, including
property names, property to use for the document id, amongst others.

An index name for a POCO provided using `.DefaultMappingFor<T>()` **will take precedence** over
the default index name set on `ConnectionSettings`. This way, the client can be configured with a default index to use if no
index is specified, and a specific index to use for different POCO types.

[source,csharp]
----
var settings = new ConnectionSettings()
    .DefaultIndex("defaultindex") <1>
    .DefaultMappingFor<Project>(m => m
        .IndexName("projects") <2>
    );

var client = new ElasticClient(settings);

var projectSearchResponse = client.Search<Project>();
----
<1> a default index to use, when no other index can be inferred
<2> a index to use when `Project` is the target POCO type

will send a search request to the API endpoint

[source,javascript]
----
"http://localhost:9200/projects/_search"
----

but

[source,csharp]
----
var objectSearchResponse = client.Search<object>();
----

will send a search request to the API endpoint

[source,javascript]
----
"http://localhost:9200/defaultindex/_search"
----

==== Explicitly specifying Index name on the request

For API calls that expect an index name, an index name can be explicitly provided
on the request

[source,csharp]
----
var settings = new ConnectionSettings();
var client = new ElasticClient(settings);

var response = client.Search<Project>(s => s
    .Index("some-other-index") <1>
);
----
<1> Provide the index name on the request

will send a search request to the API endpoint

[source,javascript]
----
"http://localhost:9200/some-other-index/_search"
----

When an index name is provided on a request, it **will take precedence** over the default
index name specified on `ConnectionSettings`, _and_ any index name specified for the POCO
using `.DefaultMappingFor<T>()`. The following example will send a search request
to the same API endpoint as the previous example

[source,csharp]
----
var settings = new ConnectionSettings()
    .DefaultIndex("defaultindex")
    .DefaultMappingFor<Project>(m => m
        .IndexName("projects")
    );

var client = new ElasticClient(settings);

var response = client.Search<Project>(s => s
    .Index("some-other-index")
);
----

In summary, the order of precedence for determining the index name for a request is

. Index name specified  on the request

. Index name specified for the generic type parameter in the request using `.DefaultMappingFor<T>()`

. Default index name specified on `ConnectionSettings`

[IMPORTANT]
--
If no index can be determined for a request that requires an index, the client will throw
an exception to indicate that this is the case.

--

