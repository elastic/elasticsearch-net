

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/ClientConcepts/HighLevel/Inference/IdsInference.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[ids-inference]]
=== Ids inference

==== Implicit conversion

Several places in the Elasticsearch API expect an instance of the `Id` type to be passed.
This is a special type that you can implicitly convert to from the following types

* `Int32`

* `Int64`

* `String`

* `Guid`

Methods that take an `Id` can be passed any of these types and they will be implicitly converted to an instance of `Id`

[source,csharp]
----
Id idFromInt = 1;
Id idFromLong = 2L;
Id idFromString = "hello-world";
Id idFromGuid = new Guid("D70BD3CF-4E38-46F3-91CA-FCBEF29B148E");

Expect(1).WhenSerializing(idFromInt);
Expect(2).WhenSerializing(idFromLong);
Expect("hello-world").WhenSerializing(idFromString);
Expect("d70bd3cf-4e38-46f3-91ca-fcbef29b148e").WhenSerializing(idFromGuid);
----

==== Inferring Id from a type

Sometimes a method takes an object instance and the client requires an `Id` from that
instance to build up a path.
There is no implicit conversion from any object to `Id`, but we can call `Id.From`.

Imagine your codebase has the following type that we want to index into Elasticsearch

[source,csharp]
----
class MyDTO
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public string OtherName { get; set; }
}
----

By default NEST will try to find a property called `Id` on the class using reflection
and create a cached delegate based on the property getter

[source,csharp]
----
var dto = new MyDTO
{
    Id = new Guid("D70BD3CF-4E38-46F3-91CA-FCBEF29B148E"),
    Name = "x",
    OtherName = "y"
};

Expect("d70bd3cf-4e38-46f3-91ca-fcbef29b148e").WhenInferringIdOn(dto);
----

Using connection settings, you can specify a different property that NEST should use to infer Id for the document.
Here we instruct NEST to infer the Id for `MyDTO` based on its `Name` property

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultMappingFor<MyDTO>(m => m
        .IdProperty(p => p.Name)
    )
).Expect("x").WhenInferringIdOn(dto);
----

IMPORTANT: Inference rules are cached __per__ `ConnectionSettings` instance.

Because the cache is per `ConnectionSettings` instance, we can create another `ConnectionSettings` instance
with different inference rules

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultMappingFor<MyDTO>(m => m
        .IdProperty(p => p.OtherName)
    )
).Expect("y").WhenInferringIdOn(dto);
----

DefaultMappingFor also has a non generic overload for the more dynamic use-cases.

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultMappingFor(typeof(MyDTO), m => m
        .IdProperty(typeof(MyDTO).GetProperty(nameof(MyDTO.Name)).Name)
    )
).Expect("x").WhenInferringIdOn(dto);
----

==== Using the ElasticsearchType attribute

Another way to control Id inference is to mark the type with an `ElasticsearchType` attribute, setting `IdProperty`
to the name of the property that should be used for the document id

[source,csharp]
----
[ElasticsearchType(IdProperty = nameof(Name))]
class MyOtherDTO
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public string OtherName { get; set; }
}
----

Now when we infer the id we expect it to be the value of the `Name` property without doing any configuration on the `ConnectionSettings` 

[source,csharp]
----
var dto = new MyOtherDTO
{
    Id = new Guid("D70BD3CF-4E38-46F3-91CA-FCBEF29B148E"),
    Name = "x",
    OtherName = "y"
};

Expect("x").WhenInferringIdOn(dto);
----

==== Using Mapping inference on ConnectionSettings

This attribute *is* cached statically/globally, however an inference rule on `ConnectionSettings` for the type will
still win over the attribute.

Here we demonstrate this by creating a different `ConnectionSettings` instance
that will infer the document id from the property `OtherName`:

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultMappingFor<MyOtherDTO>(m => m
        .IdProperty(p => p.OtherName)
    )
).Expect("y").WhenInferringIdOn(dto);
----

==== Disabling Id inference

You can configure the client to disable Id inference on a CLR type basis

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultMappingFor<MyOtherDTO>(m => m
        .DisableIdInference()
    )
).Expect(null).WhenInferringIdOn(dto);
----

or globally for all types

[source,csharp]
----
WithConnectionSettings(x => x.DefaultDisableIdInference())
    .Expect(null).WhenInferringIdOn(dto);
----

Once disabled globally, Id inference cannot be enabled per type

[source,csharp]
----
WithConnectionSettings(x => x
    .DefaultDisableIdInference()
    .DefaultMappingFor<MyOtherDTO>(m => m
        .DisableIdInference(disable: false)
    )
).Expect(null).WhenInferringIdOn(dto);
----

