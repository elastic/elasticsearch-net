

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Metric/Rate/RateAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[rate-aggregation-usage]]
=== Rate Aggregation Usage

A rate metrics aggregation can be used only inside a date_histogram and calculates a rate of documents or a field in each
date_histogram bucket. The field values can be generated by a provided script or extracted from specific numeric or histogram fields in the documents.

Be sure to read the Elasticsearch documentation on {ref_current}/search-aggregations-metrics-rate-aggregation.html[Rate Aggregation].

==== Fluent DSL example

[source,csharp]
----
a => a
.DateHistogram("by_date", d => d
    .Field(f => f.StartedOn)
    .CalendarInterval(DateInterval.Month)
    .Aggregations(a => a
        .Rate("my_rate", m => m
            .Field(p => p.NumberOfCommits)
            .Unit(DateInterval.Month)
            .Mode(RateMode.Sum)
        )))
----

==== Object Initializer syntax example

[source,csharp]
----
new DateHistogramAggregation("by_date")
{
    Field = Field<Project>(p => p.StartedOn),
    CalendarInterval = DateInterval.Month,
    Aggregations = new RateAggregation("my_rate", Field<Project>(p => p.NumberOfCommits))
    {
        Unit = DateInterval.Month,
        Mode = RateMode.Sum
    }
}
----

[source,javascript]
.Example json output
----
{
  "by_date": {
    "date_histogram": {
      "field": "startedOn",
      "calendar_interval": "month"
    },
    "aggs": {
      "my_rate": {
        "rate": {
          "field": "numberOfCommits",
          "unit": "month",
          "mode": "sum"
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var dateHistogram = response.Aggregations.DateHistogram("by_date");
dateHistogram.Should().NotBeNull();
dateHistogram.Buckets.Should().NotBeNull();
dateHistogram.Buckets.Count.Should().BeGreaterThan(10);
foreach (var item in dateHistogram.Buckets)
{
    var rate = item.Rate("my_rate");
    rate.Should().NotBeNull();
    rate.Value.Should().BeGreaterOrEqualTo(1);
}
----

