:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Pipeline/MovingFunction/MovingFunctionAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[moving-function-aggregation-usage]]
=== Moving Function Aggregation Usage

Given an ordered series of data, the Moving Function aggregation will slide a window across the data and allow
the user to specify a custom script that is executed on each window of data. For convenience, a number of
common functions are predefined such as min/max, moving averages, etc.

This is conceptually very similar to the Moving Average pipeline aggregation, except it provides more functionality.

NOTE: Only available in Elasticsearch 6.4.0+

Be sure to read the Elasticsearch documentation on {ref_current}/search-aggregations-pipeline-movfn-aggregation.html[Moving Function Aggregation]

==== Fluent DSL example

[source,csharp]
----
a => a
.DateHistogram("projects_started_per_month", dh => dh
    .Field(p => p.StartedOn)
    .CalendarInterval(DateInterval.Month)
    .MinimumDocumentCount(0)
    .Aggregations(aa => aa
        .Sum("commits", sm => sm
            .Field(p => p.NumberOfCommits)
        )
        .MovingFunction("commits_moving_avg", mv => mv
            .BucketsPath("commits")
            .Window(30)
            .Shift(0)
            .Script("MovingFunctions.unweightedAvg(values)")
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new DateHistogramAggregation("projects_started_per_month")
{
    Field = "startedOn",
    CalendarInterval = DateInterval.Month,
    MinimumDocumentCount = 0,
    Aggregations =
        new SumAggregation("commits", "numberOfCommits")
        && new MovingFunctionAggregation("commits_moving_avg", "commits")
        {
            Window = 30,
            Shift = 0,
            Script = "MovingFunctions.unweightedAvg(values)"
        }
}
----

[source,javascript]
.Example json output
----
{
  "projects_started_per_month": {
    "date_histogram": {
      "field": "startedOn",
      "calendar_interval": "month",
      "min_doc_count": 0
    },
    "aggs": {
      "commits": {
        "sum": {
          "field": "numberOfCommits"
        }
      },
      "commits_moving_avg": {
        "moving_fn": {
          "buckets_path": "commits",
          "window": 30,
          "shift": 0,
          "script": "MovingFunctions.unweightedAvg(values)"
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var projectsPerMonth = response.Aggregations.DateHistogram("projects_started_per_month");
projectsPerMonth.Should().NotBeNull();
projectsPerMonth.Buckets.Should().NotBeNull();
projectsPerMonth.Buckets.Count.Should().BeGreaterThan(0);

// average not calculated for the first bucket
foreach (var item in projectsPerMonth.Buckets.Skip(1))
{
    var movingAvg = item.Sum("commits_moving_avg");
    movingAvg.Should().NotBeNull();
    movingAvg.Value.Should().BeGreaterThan(0);
}
----

