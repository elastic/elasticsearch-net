

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Pipeline/SerialDifferencing/SerialDifferencingAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[serial-differencing-aggregation-usage]]
=== Serial Differencing Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
a => a
.DateHistogram("projects_started_per_month", dh => dh
    .Field(p => p.StartedOn)
    .CalendarInterval(DateInterval.Month)
    .MinimumDocumentCount(0)
    .Aggregations(aa => aa
        .Sum("commits", sm => sm
            .Field(p => p.NumberOfCommits)
        )
        .SerialDifferencing("second_difference", d => d
            .BucketsPath("commits")
            .Lag(2)
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new DateHistogramAggregation("projects_started_per_month")
{
    Field = "startedOn",
    CalendarInterval = DateInterval.Month,
    MinimumDocumentCount = 0,
    Aggregations =
        new SumAggregation("commits", "numberOfCommits")
        && new SerialDifferencingAggregation("second_difference", "commits")
        {
            Lag = 2
        }
}
----

[source,javascript]
.Example json output
----
{
  "projects_started_per_month": {
    "date_histogram": {
      "field": "startedOn",
      "calendar_interval": "month",
      "min_doc_count": 0
    },
    "aggs": {
      "commits": {
        "sum": {
          "field": "numberOfCommits"
        }
      },
      "second_difference": {
        "serial_diff": {
          "buckets_path": "commits",
          "lag": 2
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var projectsPerMonth = response.Aggregations.DateHistogram("projects_started_per_month");
projectsPerMonth.Should().NotBeNull();
projectsPerMonth.Buckets.Should().NotBeNull();
projectsPerMonth.Buckets.Count.Should().BeGreaterThan(0);

var differenceCount = 0;

foreach (var item in projectsPerMonth.Buckets)
{
    differenceCount++;
    var commits = item.Sum("commits");
    commits.Should().NotBeNull();
    commits.Value.Should().NotBe(null);

    var secondDifference = item.SerialDifferencing("second_difference");

    // serial differencing specified a lag of 2, so
    // only expect values from the 3rd bucket onwards
    if (differenceCount <= 2)
        secondDifference.Should().BeNull();
    else
    {
        secondDifference.Should().NotBeNull();
        secondDifference.Value.Should().NotBe(null);
    }
}
----

