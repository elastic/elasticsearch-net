:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Pipeline/MinBucket/MinBucketAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[min-bucket-aggregation-usage]]
=== Min Bucket Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
a => a
.DateHistogram("projects_started_per_month", dh => dh
    .Field(p => p.StartedOn)
    .CalendarInterval(DateInterval.Month)
    .Aggregations(aa => aa
        .Sum("commits", sm => sm
            .Field(p => p.NumberOfCommits)
        )
    )
)
.MinBucket("min_commits_per_month", aaa => aaa
    .BucketsPath("projects_started_per_month>commits")
)
----

==== Object Initializer syntax example

[source,csharp]
----
new DateHistogramAggregation("projects_started_per_month")
{
    Field = "startedOn",
    CalendarInterval = DateInterval.Month,
    Aggregations = new SumAggregation("commits", "numberOfCommits")
}
&& new MinBucketAggregation("min_commits_per_month", "projects_started_per_month>commits")
----

[source,javascript]
.Example json output
----
{
  "projects_started_per_month": {
    "date_histogram": {
      "field": "startedOn",
      "calendar_interval": "month"
    },
    "aggs": {
      "commits": {
        "sum": {
          "field": "numberOfCommits"
        }
      }
    }
  },
  "min_commits_per_month": {
    "min_bucket": {
      "buckets_path": "projects_started_per_month>commits"
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var projectsPerMonth = response.Aggregations.DateHistogram("projects_started_per_month");
projectsPerMonth.Should().NotBeNull();
projectsPerMonth.Buckets.Should().NotBeNull();
projectsPerMonth.Buckets.Count.Should().BeGreaterThan(0);

var minCommits = response.Aggregations.MinBucket("min_commits_per_month");
minCommits.Should().NotBeNull();
minCommits.Value.Should().BeGreaterThan(0);
minCommits.Keys.Should().NotBeNull();
minCommits.Keys.Count.Should().BeGreaterOrEqualTo(1);
foreach (var key in minCommits.Keys)
    key.Should().NotBeNullOrEmpty();
----

