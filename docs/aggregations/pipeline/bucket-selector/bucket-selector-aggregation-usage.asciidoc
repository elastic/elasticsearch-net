

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Pipeline/BucketSelector/BucketSelectorAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[bucket-selector-aggregation-usage]]
=== Bucket Selector Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
a => a
.DateHistogram("projects_started_per_month", dh => dh
    .Field(p => p.StartedOn)
    .CalendarInterval(DateInterval.Month)
    .Aggregations(aa => aa
        .Sum("commits", sm => sm
            .Field(p => p.NumberOfCommits)
        )
        .BucketSelector("commits_bucket_filter", bs => bs
            .BucketsPath(bp => bp
                .Add("totalCommits", "commits")
            )
            .Script(ss => ss.Source("params.totalCommits >= 500"))
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new DateHistogramAggregation("projects_started_per_month")
{
    Field = "startedOn",
    CalendarInterval = DateInterval.Month,
    Aggregations =
        new SumAggregation("commits", "numberOfCommits") &&
        new BucketSelectorAggregation("commits_bucket_filter", new MultiBucketsPath
        {
            { "totalCommits", "commits" },
        })
        {
            Script = new InlineScript("params.totalCommits >= 500")
        }
}
----

[source,javascript]
.Example json output
----
{
  "projects_started_per_month": {
    "date_histogram": {
      "field": "startedOn",
      "calendar_interval": "month"
    },
    "aggs": {
      "commits": {
        "sum": {
          "field": "numberOfCommits"
        }
      },
      "commits_bucket_filter": {
        "bucket_selector": {
          "buckets_path": {
            "totalCommits": "commits"
          },
          "script": {
            "source": "params.totalCommits >= 500"
          }
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var projectsPerMonth = response.Aggregations.DateHistogram("projects_started_per_month");
projectsPerMonth.Should().NotBeNull();
projectsPerMonth.Buckets.Should().NotBeNull();
projectsPerMonth.Buckets.Count.Should().BeGreaterThan(0);

foreach (var item in projectsPerMonth.Buckets)
{
    var commits = item.Sum("commits");
    commits.Should().NotBeNull();
    commits.Value.Should().BeGreaterOrEqualTo(500);
}
----

