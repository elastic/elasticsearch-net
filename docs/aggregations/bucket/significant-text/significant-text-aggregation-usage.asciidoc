

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Bucket/SignificantText/SignificantTextAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[significant-text-aggregation-usage]]
=== Significant Text Aggregation Usage

An aggregation that returns interesting or unusual occurrences of free-text
terms in a set. It is like the significant terms aggregation but differs in that:

* It is specifically designed for use on type `text` fields

* It does not require field data or doc-values

* It re-analyzes text content on-the-fly meaning it can also filter duplicate sections of noisy text that otherwise tend to skew statistics.

[WARNING]
--
Re-analyzing large result sets will require a lot of time and memory.
It is recommended that the significant_text aggregation is used
as a child of either the sampler or diversified sampler aggregation to
limit the analysis to a small selection of top-matching documents
e.g. 200. This will typically improve speed, memory use and quality
of results.

--

See the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-significanttext-aggregation.html[significant text aggregation] for more detail.

==== Fluent DSL example

[source,csharp]
----
a => a
.SignificantText("significant_descriptions", st => st
    .Field(p => p.Description)
    .FilterDuplicateText()
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SignificantTextAggregation("significant_descriptions")
{
    Field = Infer.Field<Project>(p => p.Description),
    FilterDuplicateText = true
}
----

[source,javascript]
.Example json output
----
{
  "significant_descriptions": {
    "significant_text": {
      "field": "description",
      "filter_duplicate_text": true
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var sigNames = response.Aggregations.SignificantText("significant_descriptions");
sigNames.Should().NotBeNull();
sigNames.DocCount.Should().BeGreaterThan(0);
foreach (var bucket in sigNames.Buckets)
{
    bucket.Key.Should().NotBeNullOrEmpty();
    bucket.BgCount.Should().BeGreaterThan(0);
    bucket.DocCount.Should().BeGreaterThan(0);
    bucket.Score.Should().BeGreaterThan(0);
}
----

