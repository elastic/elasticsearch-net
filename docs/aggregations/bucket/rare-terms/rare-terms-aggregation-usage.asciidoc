

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Bucket/RareTerms/RareTermsAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[rare-terms-aggregation-usage]]
=== Rare Terms Aggregation Usage

A multi-bucket value source based aggregation which finds "rare" terms — terms that are at the long-tail of the
distribution and are not frequent. Conceptually, this is like a terms aggregation that is sorted by _count ascending.
As noted in the terms aggregation docs, actually ordering a terms agg by count ascending has unbounded error.
Instead, you should use the rare_terms aggregation.

NOTE: Valid only in Elasticsearch 7.3.0+

See the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-rare-terms-aggregation.html[rare terms aggregation] for more detail.

==== Fluent DSL example

[source,csharp]
----
a => a
.RareTerms("names", st => st
    .Field(p => p.Name)
    .Missing("n/a")
    .MaximumDocumentCount(5)
    .Precision(0.001)
    .Meta(m => m
        .Add("foo", "bar")
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new RareTermsAggregation("names")
{
    Field = Infer.Field<Project>(p => p.Name),
    MaximumDocumentCount = 5,
    Precision = 0.001,
    Missing = "n/a",
    Meta = new Dictionary<string, object> { { "foo", "bar" } }
}
----

[source,javascript]
.Example json output
----
{
  "names": {
    "meta": {
      "foo": "bar"
    },
    "rare_terms": {
      "field": "name",
      "max_doc_count": 5,
      "missing": "n/a",
      "precision": 0.001
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var rareTerms = response.Aggregations.RareTerms("names");
rareTerms.Should().NotBeNull();
rareTerms.Buckets.Should().NotBeNull();
rareTerms.Buckets.Count.Should().BeGreaterThan(0);
foreach (var item in rareTerms.Buckets)
{
    item.Key.Should().NotBeNullOrEmpty();
    item.DocCount.Should().BeGreaterOrEqualTo(1);
}
rareTerms.Meta.Should().NotBeNull().And.HaveCount(1);
rareTerms.Meta["foo"].Should().Be("bar");
----

