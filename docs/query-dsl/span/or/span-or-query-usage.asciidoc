

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/QueryDsl/Span/Or/SpanOrQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[span-or-query-usage]]
=== Span Or Query Usage

==== Fluent DSL example

[source,csharp]
----
q
.SpanOr(sn => sn
    .Name("named_query")
    .Boost(1.1)
    .Clauses(
        c => c.SpanTerm(st => st.Field("field").Value("value1")),
        c => c.SpanTerm(st => st.Field("field").Value("value2")),
        c => c.SpanTerm(st => st.Field("field").Value("value3"))
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SpanOrQuery
{
    Name = "named_query",
    Boost = 1.1,
    Clauses = new List<ISpanQuery>
    {
        new SpanQuery { SpanTerm = new SpanTermQuery { Field = "field", Value = "value1" } },
        new SpanQuery { SpanTerm = new SpanTermQuery { Field = "field", Value = "value2" } },
        new SpanQuery { SpanTerm = new SpanTermQuery { Field = "field", Value = "value3" } }
    },
}
----

[source,javascript]
.Example json output
----
{
  "span_or": {
    "_name": "named_query",
    "boost": 1.1,
    "clauses": [
      {
        "span_term": {
          "field": {
            "value": "value1"
          }
        }
      },
      {
        "span_term": {
          "field": {
            "value": "value2"
          }
        }
      },
      {
        "span_term": {
          "field": {
            "value": "value3"
          }
        }
      }
    ]
  }
}
----

