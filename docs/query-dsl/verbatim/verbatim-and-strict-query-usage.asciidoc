

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/QueryDsl/Verbatim/VerbatimAndStrictQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[verbatim-and-strict-query-usage]]
=== Verbatim and Strict Query Usage

[float]
=== Verbatim Query Usage

An individual query can be marked as verbatim in order take effect; a verbatim query will be serialized and
sent in the request to Elasticsearch, bypassing NEST's conditionless checks.

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Must(qt => qt
            .Term(t => t
                .Verbatim()
                .Field(p => p.Description)
                .Value("")
            ), qt => qt
            .Term(t => t
                .Field(p => p.Name)
                .Value("foo")
            )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
&& new TermQuery
{
    Field = "name",
    Value = "foo"
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "description": {
            "value": ""
          }
        }
      },
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

A compound query can also be marked as verbatim, demonstrated here with a `bool` query. 

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Verbatim()
)
----

==== Object Initializer syntax example

[source,csharp]
----
new BoolQuery
{
    IsVerbatim = true,
}
----

[source,javascript]
.Example json output
----
{
  "bool": {}
}
----

A single verbatim query will be serialized as-is 

==== Fluent DSL example

[source,csharp]
----
q
.Term(t => t
    .Verbatim()
    .Field(p => p.Description)
    .Value("")
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "value": ""
    }
  }
}
----

Leaf queries within a compound query marked as verbatim will also be serialized as-is

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Filter(f => !f
            .Term(t => t
                .Verbatim()
                .Field(p => p.Name)
                .Value("")
            ) && f
            .Exists(e => e
                .Field(p => p.NumberOfCommits)
            )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new BoolQuery
{
    Filter = new QueryContainer[]
    {
        !new TermQuery
        {
            IsVerbatim = true,
            Field = "name",
            Value = ""
        } &&
        new ExistsQuery
        {
            Field = "numberOfCommits"
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "filter": [
      {
        "bool": {
          "must": [
            {
              "exists": {
                "field": "numberOfCommits"
              }
            }
          ],
          "must_not": [
            {
              "term": {
                "name": {
                  "value": ""
                }
              }
            }
          ]
        }
      }
    ]
  }
}
----

[float]
=== Strict Query Usage

A query can be marked as strict meaning that _if_ it is determined to be _conditionless_, it will throw an
exception. The following example demonstrates this by trying to send an empty string as the value for
a `term` query marked as strict

