

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/QueryDsl/TermLevel/Term/TermQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[term-query-usage]]
=== Term Query Usage

==== Fluent DSL example

[source,csharp]
----
q
.Term(c => c
    .Name("named_query")
    .Boost(1.1)
    .Field(p => p.Description)
    .Value("project description")
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    Name = "named_query",
    Boost = 1.1,
    Field = "description",
    Value = "project description"
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "_name": "named_query",
      "boost": 1.1,
      "value": "project description"
    }
  }
}
----

[float]
== Verbatim term query

By default an empty term is conditionless so will be rewritten. Sometimes sending an empty term to
match nothing makes sense. You can either use the `ConditionlessQuery` construct from NEST to provide a fallback or make the
query verbatim as followed:

==== Fluent DSL example

[source,csharp]
----
q
.Term(c => c
    .Verbatim()
    .Field(p => p.Description)
    .Value(string.Empty)
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = "",
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "value": ""
    }
  }
}
----

