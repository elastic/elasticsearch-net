

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/QueryDsl/TermLevel/Terms/TermsQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[terms-query-usage]]
=== Terms Query Usage

Filters documents that have fields that match any of the provided terms (not analyzed).

Be sure to read the Elasticsearch documentation on {ref_current}/query-dsl-terms-query.html[Terms query] for more information.

==== Fluent DSL example

[source,csharp]
----
q
.Terms(c => c
    .Name("named_query")
    .Boost(1.1)
    .Field(p => p.Description)
    .Terms("term1", "term2")
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermsQuery
{
    Name = "named_query",
    Boost = 1.1,
    Field = "description",
    Terms = ExpectedTerms,
}
----

[source,javascript]
.Example json output
----
{
  "terms": {
    "_name": "named_query",
    "boost": 1.1,
    "description": [
      "term1",
      "term2"
    ]
  }
}
----

[float]
== Single term Terms Query

==== Fluent DSL example

[source,csharp]
----
q
.Terms(c => c
    .Name("named_query")
    .Boost(1.1)
    .Field(p => p.Description)
    .Terms("term1")
)
----

[float]
== Verbatim terms query

By default an empty terms array is conditionless so will be rewritten. Sometimes sending an empty an empty array to mean
match nothing makes sense. You can either use the `ConditionlessQuery` construct from NEST to provide a fallback or make the
query verbatim as followed:

==== Object Initializer syntax example

[source,csharp]
----
new TermsQuery
{
    IsVerbatim = true,
    Field = "description",
    Terms = new string[] { },
}
----

[source,javascript]
.Example json output
----
{
  "terms": {
    "description": []
  }
}
----

==== Fluent DSL example

[source,csharp]
----
q
.Terms(c => c
    .Verbatim()
    .Field(p => p.Description)
    .Terms(new string[] { })
)
----

