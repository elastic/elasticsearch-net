

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/QueryDsl/Specialized/RankFeature/RankFeatureQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[rank-feature-query-usage]]
=== Rank Feature Query Usage

The rank_feature query is a specialized query that only works on `rank_feature` fields and `rank_features` fields.
Its goal is to boost the score of documents based on the values of numeric features. It is typically put in a should clause of a bool query
so that its score is added to the score of the query.

Compared to using `function_score` or other ways to modify the score, this query has the benefit of being able to efficiently
skip non-competitive hits when track_total_hits is not set to true. Speedups may be spectacular.

See the Elasticsearch documentation on {ref_current}/query-dsl-rank-feature-query.html[rank feature query] for more details.

==== Fluent DSL example

[source,csharp]
----
q
.RankFeature(rf => rf
    .Name("named_query")
    .Boost(1.1)
    .Field(f => f.Rank)
    .Saturation()
)
----

==== Object Initializer syntax example

[source,csharp]
----
new RankFeatureQuery()
{
    Name = "named_query",
    Boost = 1.1,
    Field = Infer.Field<Project>(f => f.Rank),
    Function = new RankFeatureSaturationFunction()
}
----

[source,javascript]
.Example json output
----
{
  "rank_feature": {
    "_name": "named_query",
    "boost": 1.1,
    "field": "rank",
    "saturation": {}
  }
}
----

==== Fluent DSL example

[source,csharp]
----
q
.RankFeature(rf => rf
    .Name("named_query")
    .Boost(1.1)
    .Field(f => f.Rank)
)
----

==== Object Initializer syntax example

[source,csharp]
----
new RankFeatureQuery
{
    Name = "named_query",
    Boost = 1.1,
    Field = Infer.Field<Project>(f => f.Rank),
}
----

[source,javascript]
.Example json output
----
{
  "rank_feature": {
    "_name": "named_query",
    "boost": 1.1,
    "field": "rank"
  }
}
----

==== Fluent DSL example

[source,csharp]
----
q
.RankFeature(rf => rf
    .Name("named_query")
    .Boost(1.1)
    .Field(f => f.Rank)
    .Linear())
----

==== Object Initializer syntax example

[source,csharp]
----
new RankFeatureQuery
{
    Name = "named_query",
    Boost = 1.1,
    Field = Infer.Field<Project>(f => f.Rank),
    Function = new RankFeatureLinearFunction()
}
----

[source,javascript]
.Example json output
----
{
  "rank_feature": {
    "_name": "named_query",
    "boost": 1.1,
    "field": "rank",
    "linear": {}
  }
}
----

