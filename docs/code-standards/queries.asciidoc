

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/CodeStandards/Queries.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[queries]]
=== Queries

[source,csharp]
----
var properties = from p in QueryProperties
                 let a = p.GetCustomAttributes<IgnoreDataMemberAttribute>()
                     .Concat<Attribute>(p.GetCustomAttributes<DataMemberAttribute>())
                 where a.Count() != 1
                 select p;
properties.Should().BeEmpty();

var staticProperties = from p in typeof(Query<>).GetMethods()
                       let name = p.Name.StartsWith("GeoShape") ? "GeoShape" : p.Name
                       select name;

var placeHolders = QueryPlaceHolderProperties.Select(p => p.Name.StartsWith("GeoShape") ? "GeoShape" : p.Name);
staticProperties.Distinct().Should().Contain(placeHolders.Distinct());

var fluentMethods = from p in typeof(QueryContainerDescriptor<>).GetMethods()
                       let name = p.Name.StartsWith("GeoShape") ? "GeoShape" : p.Name
                       select name;

var placeHolders = QueryPlaceHolderProperties.Select(p => p.Name.StartsWith("GeoShape") ? "GeoShape" : p.Name);
fluentMethods.Distinct().Should().Contain(placeHolders.Distinct());

var skipQueryImplementations = new[]
{
    typeof(IFieldNameQuery),
    typeof(IFuzzyQuery<,>),
    typeof(IConditionlessQuery),
    typeof(ISpanGapQuery)
};
var queries = typeof(IQuery).Assembly.ExportedTypes
    .Where(t => t.IsInterface && typeof(IQuery).IsAssignableFrom(t))
    .Where(t => !skipQueryImplementations.Contains(t))
    .ToList();
queries.Should().NotBeEmpty();

var visitMethods = typeof(IQueryVisitor).GetMethods().Where(m => m.Name == "Visit");
visitMethods.Should().NotBeEmpty();
var missingTypes = from q in queries
                   let visitMethod = visitMethods.FirstOrDefault(m => m.GetParameters().First().ParameterType == q)
                   where visitMethod == null
                   select q;
missingTypes.Should().BeEmpty();
----

