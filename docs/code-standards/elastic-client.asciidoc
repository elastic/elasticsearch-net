

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/CodeStandards/ElasticClient.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[elastic-client]]
=== Elastic Client

[source,csharp]
----
var fluentParametersNotNamedSelector =
    from m in typeof(IElasticClient).GetMethods()
    from p in m.GetParameters()
    where p.ParameterType.BaseType == typeof(MulticastDelegate)
    where !p.Name.Equals("selector") && !p.Name.Equals("mapper")
    select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'selector' or 'mapper' but has a name of '{p.Name}'";

fluentParametersNotNamedSelector.Should().BeEmpty();

var requestParametersNotNamedRequest =
    from m in typeof(IElasticClient).GetMethods()
    from p in m.GetParameters()
    where typeof(IRequest).IsAssignableFrom(p.ParameterType)
    where !p.Name.Equals("request")
    select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'request' but has a name of '{p.Name}'";

requestParametersNotNamedRequest.Should().BeEmpty();

var requestParameters =
    (from m in typeof(IElasticClient).GetMethods()
     from p in m.GetParameters()
     where typeof(IRequest).IsAssignableFrom(p.ParameterType)
     select p).ToList();

foreach (var requestParameter in requestParameters)
    requestParameter.HasDefaultValue.Should().BeFalse();

var concreteMethodParametersDoNotMatchInterface = new List<string>();
var interfaceMap = typeof(ElasticClient).GetInterfaceMap(typeof(IElasticClient));

foreach (var interfaceMethodInfo in typeof(IElasticClient).GetMethods())
{
    var indexOfInterfaceMethod = Array.IndexOf(interfaceMap.InterfaceMethods, interfaceMethodInfo);
    var concreteMethod = interfaceMap.TargetMethods[indexOfInterfaceMethod];

    var concreteParameters = concreteMethod.GetParameters();
    var interfaceParameters = interfaceMethodInfo.GetParameters();

    for (int i = 0; i < concreteParameters.Length; i++)
    {
        var parameterInfo = concreteParameters[i];
        var interfaceParameter = interfaceParameters[i];

        parameterInfo.Name.Should().Be(
            interfaceParameter.Name,
            $"{nameof(ElasticClient)}.{interfaceMethodInfo.Name} should have parameter named {interfaceParameter.Name}");

        if (parameterInfo.HasDefaultValue != interfaceParameter.HasDefaultValue)
            concreteMethodParametersDoNotMatchInterface.Add(
                $"'{interfaceParameter.Name}' parameter on concrete implementation of '{nameof(ElasticClient)}.{interfaceMethodInfo.Name}' to {(interfaceParameter.HasDefaultValue ? string.Empty : "NOT")} be optional");
    }
}

concreteMethodParametersDoNotMatchInterface.Should().BeEmpty();

var methodGroups =
    from methodInfo in typeof(IElasticClient).GetMethods()
    where
        typeof(IResponse).IsAssignableFrom(methodInfo.ReturnType) ||
        (methodInfo.ReturnType.IsGenericType
         && typeof(Task<>) == methodInfo.ReturnType.GetGenericTypeDefinition()
         && typeof(IResponse).IsAssignableFrom(methodInfo.ReturnType.GetGenericArguments()[0]))
    where !methodInfo.Name.Contains("CreateDocument")
    where !methodInfo.Name.Contains("IndexDocument")
    let method = new MethodWithRequestParameter(methodInfo)
    group method by method.Name into methodGroup
    select methodGroup;

foreach (var methodGroup in methodGroups)
{
    foreach (var asyncMethod in methodGroup.Where(g => g.IsAsync))
    {
        var parameters = asyncMethod.MethodInfo.GetParameters().Where(p => p.ParameterType != typeof(CancellationToken)).ToArray();

        var syncMethod = methodGroup.First(g =>
            !g.IsAsync
            && g.MethodType == asyncMethod.MethodType
            && g.MethodInfo.GetParameters().Length == parameters.Length
            && (!asyncMethod.MethodInfo.IsGenericMethod ||
                g.MethodInfo.GetGenericArguments().Length == asyncMethod.MethodInfo.GetGenericArguments().Length));

        asyncMethod.Parameter.HasDefaultValue.Should().Be(syncMethod.Parameter.HasDefaultValue,
            $"sync and async versions of {asyncMethod.MethodType} '{nameof(ElasticClient)}{methodGroup.Key}' should match");
    }
}

private class MethodWithRequestParameter
        {
public string Name { get; }

public MethodInfo MethodInfo { get; }

public bool IsAsync { get; }

public ClientMethodType MethodType { get; }

public ParameterInfo Parameter { get; }

public MethodWithRequestParameter(MethodInfo methodInfo)
{
    Name = methodInfo.Name.EndsWith("Async")
        ? methodInfo.Name.Substring(0, methodInfo.Name.Length - "Async".Length)
        : methodInfo.Name;

    IsAsync = methodInfo.ReturnType.IsGenericType &&
              methodInfo.ReturnType.GetGenericTypeDefinition() == typeof(Task<>);

    MethodInfo = methodInfo;

    var parameterInfo = methodInfo.GetParameters()
        .FirstOrDefault(p => typeof(IRequest).IsAssignableFrom(p.ParameterType));

    if (parameterInfo != null)
    {
        Parameter = parameterInfo;
        MethodType = ClientMethodType.Initializer;
    }
    else
    {
        Parameter = methodInfo.GetParameters()
            .First(p => p.ParameterType.BaseType == typeof(MulticastDelegate));
        MethodType = ClientMethodType.Fluent;
    }
}
        }
----

