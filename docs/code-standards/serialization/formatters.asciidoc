

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/CodeStandards/Serialization/Formatters.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[formatters]]
=== Formatters

[source,csharp]
----
var formatters = typeof(IElasticClient).Assembly.GetTypes()
    .Concat(typeof(IElasticLowLevelClient).Assembly.GetTypes())
    .Where(t => t.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IJsonFormatter<>)))
    .ToList();
var visible = new List<string>();
foreach (var formatter in formatters)
{
    if (formatter.IsVisible)
        visible.Add(formatter.Name);
}
visible.Should().BeEmpty();

Type GetFormatterTargetType(Type t)
{
    var attribute = t.GetCustomAttribute<JsonFormatterAttribute>();

    if (attribute == null)
        return null;

    var formatterType = attribute.FormatterType;

    if (formatterType.IsGenericType && !formatterType.IsConstructedGenericType)
        return null;

    return formatterType.GetInterfaces()
        .Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IJsonFormatter<>))
        .Select(i => i.GetGenericArguments()[0])
        .Single();
}

var typesAndProperties =
    from t in typeof(IElasticClient).Assembly.GetTypes().Concat(typeof(IElasticLowLevelClient).Assembly.GetTypes())
    let p = t.GetProperties()
    let typeHasFormatter = t.GetCustomAttribute<JsonFormatterAttribute>(false) != null
    let propertiesHaveFormatter = p.Any(pp => pp.GetCustomAttribute<JsonFormatterAttribute>(false) != null)
    where typeHasFormatter || propertiesHaveFormatter
    select new { Type = t, TypeHasFormatter = typeHasFormatter, Properties = p, PropertiesHaveFormatter = propertiesHaveFormatter };

var invalid = new List<string>();

foreach (var typeAndProperties in typesAndProperties)
{
    if (typeAndProperties.TypeHasFormatter)
    {
        var t = typeAndProperties.Type;
        var f = GetFormatterTargetType(t);

        if (f != null && t != f)
            invalid.Add($"{t.FullName} has IJsonFormatter<{f.FullName}>");
    }

    if (typeAndProperties.PropertiesHaveFormatter)
    {
        foreach (var property in typeAndProperties.Properties)
        {
            var t = property.PropertyType;
            var f = GetFormatterTargetType(t);

            if (f != null && t != f)
                invalid.Add($"property {property.Name} on {typeAndProperties.Type.FullName} has IJsonFormatter<{f.FullName}>");
        }
    }
}

invalid.Should().BeEmpty();
----

