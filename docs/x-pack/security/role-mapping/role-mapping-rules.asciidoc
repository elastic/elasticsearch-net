

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/XPack/Security/RoleMapping/RoleMappingRules.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[role-mapping-rules]]
=== Role Mapping Rules

X-Pack Security allows you to map role rules through the API as of 5.5
NEST exposes this role rules DSL in a strongy typed fashion

==== Rule Conjunction

You can create a conjuction of many rules using either `+` or `&` which are both overloaded to produce an `all` rule.

[source,csharp]
----
var allRule = new UsernameRule("u1") + new UsernameRule("u2") & new UsernameRule("u3");
allRule.All.Should().NotBeEmpty().And.HaveCount(3);
----

using `+=` assignments you can build rules more dynamically *

[source,csharp]
----
RoleMappingRuleBase rules = null;
for(var i = 0;i<10;i++)
    rules += new UsernameRule($"user_{i}");
rules.Should().BeOfType<AllRoleMappingRule>();

allRule = (AllRoleMappingRule) rules;
allRule.All.Should().NotBeEmpty().And.HaveCount(10);
----

==== Rule Disjunction

The produce an `any` disjunction rule over many rules you can use the overloaded `|`

[source,csharp]
----
var anyRule = new UsernameRule("u1") | new UsernameRule("u2") | new UsernameRule("u3");
anyRule.Any.Should().NotBeEmpty().And.HaveCount(3);
----

using `|=` assignments you can build disjunction rules more dynamically *

[source,csharp]
----
RoleMappingRuleBase rules = null;
for(var i = 0;i<10;i++)
    rules |= new UsernameRule($"user_{i}");
rules.Should().BeOfType<AnyRoleMappingRule>();

anyRule = (AnyRoleMappingRule) rules;
anyRule.Any.Should().NotBeEmpty().And.HaveCount(10);
----

==== Rule Negation

You can automatically negate any rule by using the `!` infix operator

[source,csharp]
----
var exceptRule = !new UsernameRule("user_1");
exceptRule.Should().BeOfType<ExceptRoleMappingRole>();
----

==== Full Example

Combining all of these you can build role mapping rules quite elegantly

[source,csharp]
----
var dn = "*,ou=admin,dc=example,dc=com";
var username = "mpdreamz";
var realm = "some_realm";
var metadata = Tuple.Create("a", "b");
var groups = new [] {"group1", "group2"};
----

using the operators we can succintly combine field rules  

[source,csharp]
----
var dsl =
    (new DistinguishedNameRule(dn) | new UsernameRule(username) | new RealmRule(realm))
    & new MetadataRule(metadata.Item1, metadata.Item2)
    & !new GroupsRule(groups);
----

We can also use an explicit object initializer syntax to compose the same graph 

[source,csharp]
----
var ois = new AllRoleMappingRule(
    new AnyRoleMappingRule(
        new DistinguishedNameRule(dn),
        new UsernameRule(username),
        new RealmRule(realm)
    )
    , new MetadataRule(metadata.Item1, metadata.Item2)
    , new ExceptRoleMappingRole(new GroupsRule(groups))
);

var writingStyles = Setup(dsl, ois);

Assert(writingStyles, json: new {
    all = new object[] {
        new {
            any = new object[] {
                new { field = new { dn = "*,ou=admin,dc=example,dc=com" } },
                new { field = new { username = "mpdreamz" } },
                new { field = new Dictionary<string, object>(){ {"realm.name", "some_realm" } } }
            }
        },
        new { field = new Dictionary<string, object>(){ {"metadata.a", "b" } } },
        new { except = new { field = new { groups = new [] { "group1", "group2" } } } }
    }
});

Tuple.Create(dsl, ois)
Assert(json, rules.Item1);
Assert(json, rules.Item2);

SerializationTestHelper.Expect(new
{
    enabled = true,
    roles = new[] {"admin"},
    rules = json,
    metadata = new
    {
        x = "y",
        //TODO test for null here again, limitation of Expect()
        //z = (object) null
    }
}).WhenSerializing(new PutRoleMappingRequest("x")
{
    Enabled = true,
    Roles = new[] {"admin"},
    Rules = rules,
    Metadata = new Dictionary<string, object>
    {
        {"x", "y"},
        //{"z", null}
    }
});
----

