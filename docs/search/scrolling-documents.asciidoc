

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Search/ScrollingDocuments.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[scrolling-documents]]
=== Scrolling documents

The scroll API can be used to return a large collection of documents from Elasticsearch.

NEST exposes the scroll API and an observable scroll implementation that can be used
to write concurrent scroll requests.

==== Simple use

The simplest use of the scroll API is to perform a search request with a
scroll timeout, then pass the scroll id returned in each response to
the next request to the scroll API, until no more documents are returned

[source,csharp]
----
var searchResponse = Client.Search<Project>(s => s
    .Query(q => q
        .Term(f => f.State, StateOfBeing.Stable)
    )
    .Scroll("10s") <1>
);

while (searchResponse.Documents.Any()) <2>
{
    ProcessResponse(searchResponse); <3>
    searchResponse = Client.Scroll<Project>("10s", searchResponse.ScrollId);
}
----
<1> Specify a scroll time for how long Elasticsearch should keep this scroll open on the server side. The time specified should be sufficient to process the response on the client side.
<2> make subsequent requests to the scroll API to keep fetching documents, whilst documents are returned
<3> do something with the response

[[scrollall-observable]]
==== ScrollAllObservable

Similar to <<bulkall-observable, `BulkAllObservable`>> for bulk indexing a large number of documents,
NEST exposes an observable scroll implementation, `ScrollAllObservable`, that can be used
to write concurrent scroll requests. `ScrollAllObservable` uses sliced scrolls to split the scroll into
multiple slices that can be consumed concurrently.

The simplest use of `ScrollAllObservable` is

[source,csharp]
----
int numberOfSlices = Environment.ProcessorCount; <1>

var scrollAllObservable = Client.ScrollAll<Project>("10s", numberOfSlices, sc => sc
    .MaxDegreeOfParallelism(numberOfSlices) <2>
    .Search(s => s
        .Query(q => q
            .Term(f => f.State, StateOfBeing.Stable)
        )
    )
);

scrollAllObservable.Wait(TimeSpan.FromMinutes(10), response => <3>
{
    ProcessResponse(response.SearchResponse); <4>
});
----
<1> See https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html[sliced scroll] documentation for choosing an appropriate number of slices.
<2> Number of concurrent sliced scroll requests. Usually want to set this to the same value as the number of slices
<3> Total overall time for scrolling **all** documents. Ensure this is a sufficient value to scroll all documents
<4> do something with the response

More control over how the observable is consumed can be achieved by writing
your own observer and subscribing to the observable, which will initiate scrolling

[source,csharp]
----
int numberOfSlices = Environment.ProcessorCount;

var scrollAllObservable = Client.ScrollAll<Project>("10s", numberOfSlices, sc => sc
    .MaxDegreeOfParallelism(numberOfSlices)
    .Search(s => s
        .Query(q => q
            .Term(f => f.State, StateOfBeing.Stable)
        )
    )
);

var waitHandle = new ManualResetEvent(false);
ExceptionDispatchInfo info = null;

var scrollAllObserver = new ScrollAllObserver<Project>(
    onNext: response => ProcessResponse(response.SearchResponse), <1>
    onError: e =>
    {
        info = ExceptionDispatchInfo.Capture(e); <2>
        waitHandle.Set();
    },
    onCompleted: () => waitHandle.Set()
);

scrollAllObservable.Subscribe(scrollAllObserver); <3>

waitHandle.WaitOne(); <4>
info?.Throw(); <5>
----
<1> do something with the response
<2> if an exception is thrown, capture it to throw outside of the observer
<3> initiate scrolling
<4> block the current thread until the wait handle is set
<5> if an exception was captured whilst scrolling, throw it

