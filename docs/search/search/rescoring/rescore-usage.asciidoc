

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Search/Search/Rescoring/RescoreUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[rescore-usage]]
=== Rescore Usage

Rescoring can help to improve precision by reordering just the top (eg 100 - 500) documents
returned by the query and post_filter phases, using a secondary (usually more costly) algorithm,
instead of applying the costly algorithm to all documents in the index.

See the Elasticsearch documentation on {ref_current}/search-request-rescore.html[Rescoring] for more detail.

==== Fluent DSL example

[source,csharp]
----
s => s
.From(10)
.Size(20)
.Query(q => q
    .MatchAll()
)
.Rescore(r => r
    .Rescore(rr => rr
        .WindowSize(20)
        .RescoreQuery(rq => rq
            .ScoreMode(ScoreMode.Multiply)
            .Query(q => q
                .ConstantScore(cs => cs
                    .Filter(f => f
                        .Terms(t => t
                            .Field(p => p.Tags.First())
                            .Terms("eos", "sit", "sed")
                        )
                    )
                )
            )
        )
    )
    .Rescore(rr => rr
        .RescoreQuery(rq => rq
            .ScoreMode(ScoreMode.Total)
            .Query(q => q
                .FunctionScore(fs => fs
                    .Functions(f => f
                        .RandomScore(rs => rs.Seed(1337).Field("_seq_no"))
                    )
                )
            )
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    From = 10,
    Size = 20,
    Query = new QueryContainer(new MatchAllQuery()),
    Rescore = new List<IRescore>
    {
        new Rescore
        {
            WindowSize = 20,
            Query = new RescoreQuery
            {
                ScoreMode = ScoreMode.Multiply,
                Query = new ConstantScoreQuery
                {
                    Filter = new TermsQuery
                    {
                        Field = Field<Project>(p => p.Tags.First()),
                        Terms = new[] { "eos", "sit", "sed" }
                    }
                }
            }
        },
        new Rescore
        {
            Query = new RescoreQuery
            {
                ScoreMode = ScoreMode.Total,
                Query = new FunctionScoreQuery
                {
                    Functions = new List<IScoreFunction>
                    {
                        new RandomScoreFunction { Seed = 1337, Field = "_seq_no" },
                    }
                }
            }
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "from": 10,
  "size": 20,
  "query": {
    "match_all": {}
  },
  "rescore": [
    {
      "window_size": 20,
      "query": {
        "score_mode": "multiply",
        "rescore_query": {
          "constant_score": {
            "filter": {
              "terms": {
                "tags": [
                  "eos",
                  "sit",
                  "sed"
                ]
              }
            }
          }
        }
      }
    },
    {
      "query": {
        "score_mode": "total",
        "rescore_query": {
          "function_score": {
            "functions": [
              {
                "random_score": {
                  "seed": 1337,
                  "field": "_seq_no"
                }
              }
            ]
          }
        }
      }
    }
  ]
}
----

