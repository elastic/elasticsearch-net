

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/CommonOptions/DistanceUnit/DistanceUnits.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[distance-units]]
=== Distance units

Whenever distances need to be specified, e.g. for a {ref_current}/query-dsl-geo-distance-query.html[geo distance query],
the distance unit can be specified as a double number representing distance in meters, as a new instance of
a `Distance`, or as a string of the form number and distance unit e.g. "`2.72km`"

NEST uses a `Distance` type to strongly type distance units and there are several ways to construct one.

==== Constructor

The most straight forward way to construct a `Distance` is through its constructor

[source,csharp]
----
var unitComposed = new Distance(25);
var unitComposedWithUnits = new Distance(25, Nest.DistanceUnit.Meters);
----

`Distance` serializes to a string composed of a factor and distance unit.
The factor is a double so always has at least one decimal place when serialized

[source,csharp]
----
Expect("25m")
    .WhenSerializing(unitComposed)
    .WhenSerializing(unitComposedWithUnits);
----

==== Implicit conversion

Alternatively a distance unit `string` can be assigned to a `Distance`, resulting in an implicit conversion to a new `Distance` instance.
If no `DistanceUnit` is specified, the default distance unit is meters

[source,csharp]
----
Distance distanceString = "25";
Distance distanceStringWithUnits = "25m";

Expect("25m")
    .WhenSerializing(distanceString)
    .WhenSerializing(distanceStringWithUnits);
----

==== Supported units

A number of distance units are supported, from millimeters to nautical miles

===== Metric

`mm` (Millimeters)

[source,csharp]
----
Expect("2mm").WhenSerializing(new Distance(2, Nest.DistanceUnit.Millimeters));
----

`cm` (Centimeters)

[source,csharp]
----
Expect("123.456cm").WhenSerializing(new Distance(123.456, Nest.DistanceUnit.Centimeters));
----

`m` (Meters)

[source,csharp]
----
Expect("400m").WhenSerializing(new Distance(400, Nest.DistanceUnit.Meters));
----

`km` (Kilometers)

[source,csharp]
----
Expect("0.1km").WhenSerializing(new Distance(0.1, Nest.DistanceUnit.Kilometers));
----

===== Imperial

`in` (Inches)

[source,csharp]
----
Expect("43.23in").WhenSerializing(new Distance(43.23, Nest.DistanceUnit.Inch));
----

`ft` (Feet)

[source,csharp]
----
Expect("3.33ft").WhenSerializing(new Distance(3.33, Nest.DistanceUnit.Feet));
----

`yd` (Yards)

[source,csharp]
----
Expect("9yd").WhenSerializing(new Distance(9, Nest.DistanceUnit.Yards));
----

`mi` (Miles)

[source,csharp]
----
Expect("0.62mi").WhenSerializing(new Distance(0.62, Nest.DistanceUnit.Miles));
----

`nmi` or `NM` (Nautical Miles)

[source,csharp]
----
Expect("45.5nmi").WhenSerializing(new Distance(45.5, Nest.DistanceUnit.NauticalMiles));
----

